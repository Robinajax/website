<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 18 Apr 2019 22:36:07 -0400</pubDate>
    <lastBuildDate>Thu, 18 Apr 2019 22:36:07 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Applying Formal Methods to the Events of the Resurrection</title>
        <description>&lt;p&gt;In honor of &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;Resurrection
Day&lt;/a&gt; this year,
let’s take a moment to apply formal methods in reverse, as though we were
detectives, in order to back out the timeline of the week when Christ
was crucified.&lt;/p&gt;

&lt;p&gt;Specifically, I’d like to investigate the timing of a couple of events
that took place leading up to Resurrection day.  These events include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The last supper,&lt;/li&gt;
  &lt;li&gt;The night of prayer in Gethsemane,&lt;/li&gt;
  &lt;li&gt;The crucifixion,&lt;/li&gt;
  &lt;li&gt;The time He spent in the tomb, and&lt;/li&gt;
  &lt;li&gt;The visit to the tomb early on Sunday morning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can express these events as inputs to a design, so we’ll constrain them
using assumptions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;resurrection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_prepare_spices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_request_guards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_resurrection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may notice that I’ve added a couple other items into the timeline as well,
such as when the chief priests requested guards for the temple and when the
women prepared the spices they then later brought to the tomb.  We’ll discuss
these more as we go along.  I’ve also added in inputs for the preparation
days and the Sabbath(s), because those will become important in this discussion
as well.&lt;/p&gt;

&lt;p&gt;Our goal will be to let the formal tool, in this case
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt; as a front-end for
the &lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;yices&lt;/a&gt; engine, solve for the timing of these
events, subject to the formal constraints we’ll discuss below.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-framework-for-our-events&quot;&gt;Creating a framework for our events&lt;/h2&gt;

&lt;p&gt;Part of the goal here is to determine when events took place.  This means
that we need a structure we can use to describe the events of interest.&lt;/p&gt;

&lt;p&gt;We’ll also use synchronous logic, and so that means that we’ll start with the
clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;.  Let’s assume that it has a period of twice
per day, with the rising edge at both dawn and dusk.  While I understand
that this will cause the duty cycle to vary somewhat, I’m not really
expecting any struggles to meet timing if we run the clock this slowly.&lt;/p&gt;

&lt;p&gt;This clock speed will also allow us to reason about whether an event happened
during the day or during the night.  To get there, we’ll use a counter to
describe time for us–to include which day of the week, Sunday, Monday,
Tuesday, etc., an event is taking place on.  We can do all of this with
a 14-state counter, such as the counter below that goes from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; on Sunday
to &lt;code class=&quot;highlighter-rouge&quot;&gt;13&lt;/code&gt; on Saturday and back again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, in Jewish fashion dating back to the beginning,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And God called the light Day, and the darkness he called Night.
And the evening and the morning were the first day.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/1/5&quot;&gt;Gen 1:5&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we’ll count days that begin and end at sundown.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also assign days to counter values, so we can later make sense of the
trace &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;
will generate for us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sunday&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;monday&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tuesday&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wednesday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;thursday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;friday&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;saturday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fig. 1 below should give you an idea of what this might look like.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1.  Weekdays and daytimes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-weekdays.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now we can now couple this counter with inferences from the Bible.  For
example, we know that the Sabbath &lt;a href=&quot;https://www.blueletterbible.org/kjv/ex/20/9&quot;&gt;takes place on
Saturday&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saturday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also know that the Sabbath begins or ends at nighttime.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s see where this all leads us.&lt;/p&gt;

&lt;h2 id=&quot;it-all-starts-with-the-last-supper&quot;&gt;It all starts with the last supper&lt;/h2&gt;

&lt;p&gt;While I suppose we might start with the triumphal entry, I’d rather start our
reasoning off with the Last Supper:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now before the feast of the passover, when Jesus knew that his hour was
come that he should depart out of this world unto the Father, having
loved his own which were in the world, he loved them unto the end.  And
supper being ended, the devil having now put into the heart of Judas
Iscariot, Simon’s son, to betray him;
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/13/1&quot;&gt;John 13:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those not familiar with the Last Supper, this was the night when,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… he took bread, and gave thanks, and brake it, and gave unto them,
saying, This is my body which is given for you: this do in remembrance of me.
Likewise also the cup after supper, saying, This cup is the new testament in
my blood, which is shed for you.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/22/19&quot;&gt;Luke 22:19-20&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that’s not my point today.  Today, I just want to work through the order
of events.&lt;/p&gt;

&lt;p&gt;The Last Supper is then followed by an evening in the Garden of Gethsemane.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When Jesus had spoken these words, he went forth with his disciples over the brook Cedron, where was a garden, into the which he entered, and his disciples.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/18/1&quot;&gt;John 18:1&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this, we know that the last supper occurred in the day time,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and that it was followed by the night in Gethsemane.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This isn’t quite enough of a constraint to force the night in Gethsemane to
immediately (and only ever) follow &lt;code class=&quot;highlighter-rouge&quot;&gt;i_last_supper&lt;/code&gt;.  We also need to tell the
formal tool that the night in Gethsemane &lt;em&gt;only&lt;/em&gt; occurs following the
last supper, and never at any other time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-night-in-the-garden&quot;&gt;The night in the Garden&lt;/h2&gt;

&lt;p&gt;After the Last Supper, Jesus went to pray in the Garden of Gethsemane.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then cometh Jesus with them unto a place called Gethsemane, and saith unto the disciples, Sit ye here, while I go and pray yonder.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/26/36&quot;&gt;Matt 26:36&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was here, in the garden, that Luke, the &lt;a href=&quot;https://www.blueletterbible.org/kjv/col/4/14&quot;&gt;beloved
physician&lt;/a&gt;, records that
his prayers were so agonizing that He sweat blood.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And being in an agony he prayed more earnestly: and his sweat was as it were
great drops of blood falling down to the ground.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/22/44&quot;&gt;Luke 22:44&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We know this took place at night because, among other things, his disciples
were struggling to stay awake.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And he came and found them asleep again: for their eyes were heavy.
And he left them, and went away again, and prayed the third time, saying
the same words.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/26/43-44&quot;&gt;Matt 26:43-44&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence, we can assume that the night in Gethsemane, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_gethsemane&lt;/code&gt;, only
took place during &lt;code class=&quot;highlighter-rouge&quot;&gt;nighttime&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may perhaps be wondering why I have chosen this backwards notation.
Could I not have instead said that, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_gethsemane |-&amp;gt; nighttime&lt;/code&gt;?
Probably.  However, I’m trying to capture the idea that the signal
I am assuming should be on the right hand of the implication.  Therefore, the
backwards notation is primarily to make plain which value I’m intending to
constrain with the assumption.&lt;/p&gt;

&lt;p&gt;Returning to the timeline, it was in Gethsemane that Jesus was betrayed and
arrested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then cometh he to his disciples, and saith unto them, Sleep on now,
and take your rest: behold, the hour is at hand, and the Son of man is betrayed into the hands of sinners.
Rise, let us be going: behold, he is at hand that doth betray me.&lt;/p&gt;

  &lt;p&gt;And while he yet spake, lo, Judas, one of the twelve, came, and with him a
great multitude with swords and staves, from the chief priests and elders
of the people.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/26/45-47&quot;&gt;Matt 26:45-47&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the next day, after a sham trial, the chief priests and elders led
Jesus to Pilate.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the morning was come, all the chief priests and elders of the people
took counsel against Jesus to put him to death: And when they had bound
him, they led him away, and delivered him to Pontius Pilate the
governor.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/27/1-2&quot;&gt;Matt 27:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I’m sure they would’ve loved to murder Him themselves, the Romans had
a law prohibiting the Jews from executing those they chose.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then said Pilate unto them, Take ye him, and judge him according to your
law. The Jews therefore said unto him, It is not lawful for us to put any
man to death:
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/18/31&quot;&gt;John 18:31&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, we might write that the day of the Crucifixion follows the
arrest in the Garden of Gethsemane.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-day-of-the-crucifixion&quot;&gt;The Day of the Crucifixion&lt;/h2&gt;

&lt;p&gt;We know Jesus was crucified in the day time, for it is written that,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now from the sixth hour there was darkness over all the land unto the ninth
hour.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/27/45&quot;&gt;Matt 27:45&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the custom of the time, the time of day was measured from dawn,
rather than as we do today from midnight.  Therefore, this took place between
high noon and 3pm in the afternoon.&lt;/p&gt;

&lt;p&gt;We can capture this with the assumption that,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we know from the record that the next day was the Sabbath, primarily
because those who buried Him had to press to get Him into the tomb before the
Sabbath, lest His body remain on the cross all the next day.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And now when the even was come, because it was the preparation, that is,
the day before the sabbath, Joseph of Arimathaea, an honourable counsellor,
which also waited for the kingdom of God, came, and went in boldly unto
Pilate, and craved the body of Jesus.  And Pilate marvelled if he were
already dead: and calling unto him the centurion, he asked him whether
he had been any while dead.  And when he knew it of the centurion, he gave
the body to Joseph.&lt;/p&gt;

  &lt;p&gt;And he bought fine linen, and took him down, and wrapped him in the linen,
and laid him in a sepulchre which was hewn out of a rock, and rolled a
stone unto the door of the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/15/42-46&quot;&gt;Mark 15:42-46&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this we might conclude not only that the crucifixion didn’t take place
on a Sabbath,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but also that the day of the crucifixion was immediately followed by a Sabbath.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2.  Preparation day&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-preparation.svg&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We also know from this description that, in the language of the time, the
day prior to the Sabbath was called the “preparation day”.  Let’s assume
that this preparation day describes the &lt;em&gt;daylight&lt;/em&gt; portion of the day as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also know that the day following the preparation day is a Sabbath.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, no Sabbath shall take place unless it is preceded by a preparation
day.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the extra requirement here that this criteria only applies to the daytime.
Since the preparation day cannot take place at nighttime, based upon our
assumption above, without this extra condition there could be no Sabbaths.&lt;/p&gt;

&lt;p&gt;At one time I was going to declare the preparation day to be the day of the
Crucifixion.  I think I’ll just assert this instead, and so let the solver
do the proof for me.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, since there are things that happen after the crucifixion, let’s keep
track of those in two ways.  First, once the crucifixion has passed, then
Jesus had been crucified.  We can write this as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also know that He was only crucified once.  While this might seem
obvious to you and I, the formal tool does require this information.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;three-days-and-three-nights&quot;&gt;Three Days and Three Nights&lt;/h2&gt;

&lt;p&gt;Perhaps the most controversial part of all of this is including the prophecy
that Jesus was going to spend three days and three nights in the tomb.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For as Jonas was three days and three nights in the whale’s belly; so shall
the Son of man be three days and three nights in the heart of the earth.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/12/40&quot;&gt;Matt 12:40&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let’s count these out.  First, He enters the tomb following the crucifixion,
and then leaves it after three days and three nights.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The check is off by one from six, for the simple reason that we are reasoning
about the &lt;em&gt;next&lt;/em&gt; clock cycle, but more on that in a bit.&lt;/p&gt;

&lt;p&gt;For now, let’s count the days,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the nights when He is in the tomb.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll know He was in the tomb for three days and three nights when these
two counters equal three.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;three_days&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;three_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can put our test together: If He’s been crucified, yet is no longer
in the tomb, then He must’ve been in the tomb for three days and three nights:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three_nights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This trace might therefore look like Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Jesus was in the tomb for three days and three nights&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-3days.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, why did we transition on &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; above?  Because we counted &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;
as our first time-step.  Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; are six steps.  If you examine the
trace in Fig. 3 at the right, you can see that,
yes, we did count three days and three nights as desired, until He was out
of the tomb.&lt;/p&gt;

&lt;p&gt;Yes, I’ve heard the arguments for fewer days.  The problem is that if He was
crucified on a Friday (the commonly proposed theory), then he would have been
in the ground for one day and two nights, not three days and three nights.  The
answer I’ve been given, that the ancient Greeks didn’t know how to count
properly just doesn’t hold water for me.  The historical record tells us
that people were &lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/7/24&quot;&gt;counting days as early as the
flood&lt;/a&gt;, and that by the time of
Christ they knew how to &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/25/27&quot;&gt;calculate
interest&lt;/a&gt;.
So, I don’t buy the argument that the ancient Greeks didn’t know how to count.&lt;/p&gt;

&lt;p&gt;Three days and three nights, therefore, must mean three days and three nights.&lt;/p&gt;

&lt;h2 id=&quot;the-spices-and-the-soldiers&quot;&gt;The Spices and the Soldiers&lt;/h2&gt;

&lt;p&gt;After Jesus was buried, certain women which came from Galilee went and prepared
spices, and then rested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And that day was the preparation, and the sabbath drew on.
And the women also, which came with him from Galilee,
followed after, and beheld the sepulchre, and how his body was laid.  And
they returned, and prepared spices and ointments; and rested the sabbath
day according to the commandment.  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/23/54-56&quot;&gt;Luke 23:54-56&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tells us that these women were devout in their faith, and so they wouldn’t
have prepared any spices on the sabbath.  We can also draw from this that
Jesus was in the tomb when they prepared the spices.  We also know that,
without artificial light, the spices would’ve been very difficult to prepare
anything, so they didn’t do this at night.  That leaves us with the following
assumption:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_prepare_spices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, in order to check whether, on the Resurrection day, these spices had
been prepared or not, we’ll register a value to keep track that they had been
prepared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;spices_prepared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_prepare_spices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;spices_prepared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Preparing the spices&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-spices.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, while Jesus was in the tomb, the chief priests and Pharisees came to ask
for a guard to be posted,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now the next day, that followed the day of the preparation, the chief
priests and Pharisees came together unto Pilate,&lt;/p&gt;

  &lt;p&gt;Saying, Sir, we remember that that deceiver said, while he was yet alive,
 After three days I will rise again.
Command therefore that the sepulchre be made sure until the third day, lest
 his disciples come by night, and steal him away, and say unto the people,
 He is risen from the dead: so the last error shall be worse than the first.
Pilate said unto them, Ye have a watch: go your way, make it as sure as ye
 can.
So they went, and made the sepulchre sure, sealing the stone, and setting
 a watch.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/27/62-66&quot;&gt;Matt 27:62-66&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note here that, again, the three day prophecy is confirmed–even by those
who didn’t believe Him.  But I digress.&lt;/p&gt;

&lt;p&gt;While the following logic captures this idea of the day following the day
of preparation, it is perhaps more complicated than it needs to be.  The
reason for the extra complication is that the “preparation day” was the
day of the crucifixion, and the day after is not one time step later, but
rather two.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_request_guards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Guarding the Tomb&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-guarded.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Following this request, we know the tomb was guarded, as shown in Fig. 5 on the
right.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_request_guards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this places the request on the Sabbath day.  In many ways,
I find it strange that the chief priests would go to Pilate on the Sabbath
day, but perhaps it’s no stranger than the rest of their actions that week.
For example, trying Jesus at night was already a violation of Jewish law.
If the chief priests were willing to violate one law in such a gross manner,
why should they be expected to hold to the rest of Jewish laws and customs?&lt;/p&gt;

&lt;h2 id=&quot;constraining-the-resurrection&quot;&gt;Constraining the Resurrection&lt;/h2&gt;

&lt;p&gt;We’d also like to determine when Jesus was resurrected.  Since this is
one of those things we want to determine, we want to make absolute certain
that it is only minimally constrained.  One obvious constraint would be
that He can’t be resurrected until He’s been crucified.  I’m going to
add one more, though: He can’t be resurrected unless He’s no longer in
the tomb.  Therefore,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_resurrection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll go one step more, though, and add yet another constraint.
This one will pin down the exact time of the resurrection–to within the
structure of our timeline.  Specifically, let’s define &lt;code class=&quot;highlighter-rouge&quot;&gt;i_resurrection&lt;/code&gt;
as the first clock period when He’s no longer in the tomb.  Hence,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_resurrection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should be a sufficient constraint for the solver to match what
we might expect.&lt;/p&gt;

&lt;h2 id=&quot;resurrection-day&quot;&gt;Resurrection Day&lt;/h2&gt;

&lt;p&gt;This leaves us with one final set of constraints–the first day of the week
when the women come to the tomb to find Him gone.  This is well attested
by every one of the Gospels.&lt;/p&gt;

&lt;p&gt;Matthew:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the end of the sabbath, as it began to dawn toward the first day of the week, came Mary Magdalene and the other Mary to see the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/1&quot;&gt;Matt 28:1&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mark:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And when the sabbath was past, Mary Magdalene, and Mary the mother of James, and Salome, had bought sweet spices, that they might come and anoint him.
And very early in the morning the first day of the week, they came unto the sepulchre at the rising of the sun.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/16/1-2&quot;&gt;Mark 16:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luke:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now upon the first day of the week, very early in the morning, they came
unto the sepulchre, bringing the spices which they had prepared, and
certain others with them.
And they found the stone rolled away from the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/24/1-2&quot;&gt;Luke 24:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;John:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first day of the week cometh Mary Magdalene early, when it was yet dark,
unto the sepulchre, and seeth the stone taken away from the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/20/1&quot;&gt;John 20:1&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence, the morning visit to the tomb must have taken place on Sunday.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sunday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why was the &lt;em&gt;first&lt;/em&gt; day a Sunday, as opposed to any other day?  Because, it is
recorded in Exodus that,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Six days shalt thou labour, and do all thy work:
But the seventh day is the sabbath of the LORD thy God: in it thou shalt not
do any work, thou, nor thy son, nor thy daughter, thy manservant, nor thy
maidservant, nor thy cattle, nor thy stranger that is within thy gates:
For in six days the LORD made heaven and earth, the sea, and all that in
them is, and rested the seventh day: wherefore the LORD blessed the sabbath
day, and hallowed it.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/ex/20/9-11&quot;&gt;Ex 20:9-11&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever since the commandment, and perhaps even before as well, the seventh
day of the week has been maintained as the Jewish Sabbath.
We know today that this seventh day is Saturday, therefore the “first day
of the week” must be a Sunday.&lt;/p&gt;

&lt;p&gt;This isn’t all of it either.  We also know that when the women visited the tomb,
they found it empty.&lt;/p&gt;

&lt;p&gt;Matthew:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And, behold, there was a great earthquake: for the angel of the Lord descended from heaven, and came and rolled back the stone from the door, and sat upon it.
His countenance was like lightning, and his raiment white as snow:
And for fear of him the keepers did shake, and became as dead men.&lt;/p&gt;

  &lt;p&gt;And the angel answered and said unto the women, Fear not ye: for I know that ye seek Jesus, which was crucified.
He is not here: for he is risen, as he said. Come, see the place where the Lord lay.
And go quickly, and tell his disciples that he is risen from the dead; and, behold, he goeth before you into Galilee; there shall ye see him: lo, I have told you.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/2-7&quot;&gt;Matt 28:2-7&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mark:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And they said among themselves, Who shall roll us away the stone from the door of the sepulchre?&lt;/p&gt;

  &lt;p&gt;And when they looked, they saw that the stone was rolled away: for it was very great.&lt;/p&gt;

  &lt;p&gt;And entering into the sepulchre, they saw a young man sitting on the right side, clothed in a long white garment; and they were affrighted.
And he saith unto them, Be not affrighted: Ye seek Jesus of Nazareth, which was crucified: he is risen; he is not here: behold the place where they laid him.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/16/3-6&quot;&gt;Mark 16:3-6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luke:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And they found the stone rolled away from the sepulchre.
And they entered in, and found not the body of the Lord Jesus.&lt;/p&gt;

  &lt;p&gt;And it came to pass, as they were much perplexed thereabout, behold, two men stood by them in shining garments:
And as they were afraid, and bowed down their faces to the earth, they said unto them, Why seek ye the living among the dead?
He is not here, but is risen: remember how he spake unto you when he was yet in Galilee,
Saying, The Son of man must be delivered into the hands of sinful men, and be crucified, and the third day rise again.&lt;/p&gt;

  &lt;p&gt;And they remembered his words,
And returned from the sepulchre, and told all these things unto the eleven, and to all the rest.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/24/2-9&quot;&gt;Luke 24:2-9&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;John:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So they ran both together: and the other disciple did outrun Peter, and came
 first to the sepulchre.
And he stooping down, and looking in, saw the linen clothes lying; yet went
 he not in.&lt;/p&gt;

  &lt;p&gt;Then cometh Simon Peter following him, and went into the sepulchre, and seeth the linen clothes lie,
And the napkin, that was about his head, not lying with the linen clothes, but wrapped together in a place by itself.&lt;/p&gt;

  &lt;p&gt;Then went in also that other disciple, which came first to the sepulchre,
and he saw, and believed.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/20/4-8&quot;&gt;John 20:4-8&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, what do we know from the accounts of these witnesses?  We know
that the tomb was empty, that the women had prepared spices, that they came
to the tomb after dawn on a Sunday, and that the guards were still there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spices_prepared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sunday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-resurrection-putting-it-all-together&quot;&gt;The Resurrection: Putting it all together&lt;/h2&gt;

&lt;p&gt;So what do you get when you put all of this together?&lt;/p&gt;

&lt;p&gt;Well first, if you don’t get your properties right, you’ll get a contradiction.
Worse, since most of our properties are assumptions, the contradiction will
end without a trace, you’ll simply see,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SBY 16:09:47 [resurrection_prf] engine_0.basecase: ##   0:00:00  Warmup failed!
SBY 16:09:47 [resurrection_prf] engine_0.basecase: ##   0:00:00  Status: FAILED&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That doesn’t help.&lt;/p&gt;

&lt;p&gt;However, if you bisect your assumptions, you’ll often find the problem.
The properties discussed above have been checked, so there are no (more)
contradictions within them.  Indeed, you can &lt;a href=&quot;https://github.com/ZipCPU/website/blob/master/examples/resurrection.sv&quot;&gt;check them out here if you would
like&lt;/a&gt;.
I’ve even posted the &lt;a href=&quot;https://github.com/ZipCPU/website/blob/master/examples/resurrection.sby&quot;&gt;SymbiYosys script for
reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, since we’re primarily running a cover proof, if the cover fails,
you might wish to back up and cover all of the steps leading up to the final
one.  When you find the point that fails, you can again bisect the assumptions
to find the one that is contradictory.  (Yes, I needed to do this too, although
I’ve since cleaned up these extraneous cover statements.)&lt;/p&gt;

&lt;p&gt;As an example of a contradictory property, if you assume that the Crucifixion
took place on a Friday, you would find no solution to these properties.&lt;/p&gt;

&lt;p&gt;When you put it all together, you’ll get something like Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6.  A formally generated timeline leading up to the Resurrection&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/resurrection-week.svg&quot;&gt;&lt;img src=&quot;/img/resurrection-week.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You’ll notice some very fascinating things about this figure that go contrary
to popular belief.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Jesus wasn’t crucified on a Friday.  A Friday crucifixion would’ve violated
several properties of the Biblical account.  First, no matter how you
count it, a Friday crucifixion would not have left him in the ground for
three days and three nights.  Second, had He been crucified on a Friday,
there would’ve been no time for the women to purchase and prepare their
spices–something that cannot be done on the Sabbath day.  Third, even the
chief priests expected something to happen on the &lt;em&gt;third&lt;/em&gt; day.&lt;/p&gt;

    &lt;p&gt;On the other hand, you might choose to find that this conclusion says a lot
about me.  For example, you might notice that I &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/15/3&quot;&gt;don’t much care what any
church says&lt;/a&gt; or teaches about
“Good Friday”–I care only about what the Bible teaches.  As a result, I
don’t suffer from any crisis of faith when I come across information
that might contradict what the Bible teaches: I just choose to believe
what the Bible says.&lt;/p&gt;

    &lt;p&gt;Incidentally, this is also the meaning of the word “epanorthosis” used in
&lt;a href=&quot;https://www.blueletterbible.org/kjv/2ti/3/16&quot;&gt;2Tim 3:16&lt;/a&gt;,
and translated as “correction”, when Paul uses it to describe the nature
of God’s words:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;All scripture is given by inspiration of God, and is profitable for
doctrine, for reproof, for correction, for instruction in righteousness:
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2ti/3/16&quot;&gt;2Tim 3:16&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Indeed, the &lt;a href=&quot;https://www.biblestudytools.com/lexicons/greek/nas/epanorthosis.html&quot;&gt;Greek Lexicon defines epanorthosis&lt;/a&gt; as: 1. Restoration
to an upright or right state, 2. Correction, improvement of life
or character.&lt;/p&gt;

    &lt;p&gt;In this case, we can &lt;em&gt;correct&lt;/em&gt; our understanding of the Resurrection by
simply paying attention to the Bible itself–as
&lt;a href=&quot;https://www.blueletterbible.org/kjv/2ti/3/16&quot;&gt;2Tim 3:16&lt;/a&gt;
suggests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jesus wasn’t in the tomb when the angel rolled the stone away.  Therefore
the actual resurrection must have occurred beforehand.&lt;/p&gt;

    &lt;p&gt;This actually corresponds to the Gospel accounts: when the angel rolled
the stone away, the women were invited to look into the tomb to verify
that it was indeed and already empty.&lt;/p&gt;

    &lt;p&gt;But then how did He get out?  Good question.  Let me answer that by
asking how He got into the upper room later that day:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Then the same day at evening, being the first day of the week,
when the doors were shut where the disciples were assembled for
fear of the Jews, came Jesus and stood in the midst, and saith unto
them, Peace be unto you.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/20/19&quot;&gt;John 20:19&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Personally, I judge walking through walls to be easier than rising from
the dead in the first place, so this theory of being able to walk through
the tomb walls doesn’t really bother me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There were two Sabbath days on crucifixion week.&lt;/p&gt;

    &lt;p&gt;Wait, what?  Saturday is the Sabbath!  How could there be two Sabbath days?!&lt;/p&gt;

    &lt;p&gt;As it turns out, Sabbath’s take place on more than just Saturdays.  Consider
this passage of Leviticus describing the Passover feast:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;In the fourteenth day of the first month at even is the LORD’s passover.
And on the fifteenth day of the same month is the feast of unleavened bread unto the LORD: seven days ye must eat unleavened bread.
In the first day ye shall have an holy convocation: ye shall do no servile work therein.
But ye shall offer an offering made by fire unto the LORD seven days: in the seventh day is an holy convocation: ye shall do no servile work therein.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/lev/23/5-8&quot;&gt;Lev 23:5-8&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;While I’m no expert in ancient Jewish customs, I will note that during this
week of the Passover, there are two specific days where no work is to be
done.  These would be rest days, also known as Sabbaths.  I would also note
that no enduring calendar is based upon weeks, nor could it be, since as
you and I both know there are 365 days in a year, which is just a touch
longer than 52 weeks per year.  Hence, in order to keep the year matching
the seasons, the 14th day of the first month would by necessity need to
wander through which day of the week it landed upon–forcing a Sabbath
rest on days other than Saturday alone.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;What conclusion should be drawn from this discussion of the Resurrection?
First, that the Resurrection happened.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/15/5-8&quot;&gt;Over 500 people saw and witnessed
the resurrected Christ&lt;/a&gt;.
Indeed, &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;Christianity would make no sense if there was no
Resurrection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second relevant point of the Resurrection follows Jesus’ explanation of
its importance:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There was a certain rich man, which was clothed in purple and fine linen,
  and fared sumptuously every day:
And there was a certain beggar named Lazarus, which was laid at his gate,
  full of sores,
And desiring to be fed with the crumbs which fell from the rich man’s table:
  moreover the dogs came and licked his sores.&lt;/p&gt;

  &lt;p&gt;And it came to pass, that the beggar died, and was carried by the angels
  into Abraham’s bosom: the rich man also died, and was buried;&lt;/p&gt;

  &lt;p&gt;And in hell he lift up his eyes, being in torments, and seeth Abraham afar
  off, and Lazarus in his bosom.
And he cried and said, Father Abraham, have mercy on me, and send Lazarus,
  that he may dip the tip of his finger in water, and cool my tongue; for I
  am tormented in this flame.&lt;/p&gt;

  &lt;p&gt;But Abraham said, Son, remember that thou in thy lifetime receivedst thy
  good things, and likewise Lazarus evil things: but now he is comforted,
  and thou art tormented.
And beside all this, between us and you there is a great gulf fixed: so that
  they which would pass from hence to you cannot; neither can they pass to
  us, that would come from thence.&lt;/p&gt;

  &lt;p&gt;Then he said, I pray thee therefore, father, that thou wouldest send him to
  my father’s house:
For I have five brethren; that he may testify unto them, lest they also come
  into this place of torment.&lt;/p&gt;

  &lt;p&gt;Abraham saith unto him, They have Moses and the prophets; let them hear them.&lt;/p&gt;

  &lt;p&gt;And he said, Nay, father Abraham: but if one went unto them from the dead,
  they will repent.&lt;/p&gt;

  &lt;p&gt;And he said unto him, If they hear not Moses and the prophets, neither will
they be persuaded, though one rose from the dead.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/16/19-31&quot;&gt;Luke 16:19-31&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rich man &lt;em&gt;begged&lt;/em&gt; for someone to come back from the dead to warn of
the torment waiting for those who have not believed.  God was kind enough to
grant the rich man’s wish.  As a result, we can now say that someone &lt;em&gt;has&lt;/em&gt;
come back from the dead.&lt;/p&gt;

&lt;p&gt;Tell me, was Abraham right?  Or will you hear hear the words of Jesus today?&lt;/p&gt;

&lt;p&gt;My third point is more personal: I know the Resurrection is true, because of
the change that has taken place in my own life once I chose to trust the
only Christ.  I was once a sinner, a liar, thief, and worse.  Once I chose
to trust the Lord, He transformed my life and I am now no longer the wicked
man I once was.&lt;/p&gt;

&lt;p&gt;Hallelujah!  Thank you, Lord Jesus, for changing my life.&lt;/p&gt;

&lt;p&gt;This change could be yours as well, if you chose to trust Him as I have done.
Will you hear his words today?&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;He is not here: for he is risen, as he said. Come, see the place where the Lord lay.  (Matthew 28:6)&lt;/em&gt;</description>
        <pubDate>Thu, 18 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/04/18/formal-resurrection.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/04/18/formal-resurrection.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The most common AXI mistake</title>
        <description>&lt;p&gt;Some time ago, &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;I posted a set of formal properties which could be used to
verify any AXI-lite interface, slave or
master&lt;/a&gt;.  I then applied
these properties to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite slave
core&lt;/a&gt;
generated by &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Xilinx’s
Vivado&lt;/a&gt; and found
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;multiple errors within their
core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This wasn’t enough to convince me, however, to that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
could be used broadly across many projects and designs.  So &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;I built my own
AXI-lite slave core&lt;/a&gt;
using &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;.
Using &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; together with a
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s cover sequence&lt;/a&gt;,
I could demonstrate that my core not only had less latency than
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx&lt;/a&gt;’s
(once the bugs were fixed), but I could also demonstrate that &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;my own
AXI-lite core&lt;/a&gt;
had twice the data throughput.&lt;/p&gt;

&lt;p&gt;So it works on two slave cores.  What about more complicated designs?&lt;/p&gt;

&lt;p&gt;On a whim, I recently built an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NxM&lt;/code&gt; AXI-lite
interconnect&lt;/a&gt;
that can connect any &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; AXI-lite masters to any &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; AXI-lite slaves, with up
to &lt;code class=&quot;highlighter-rouge&quot;&gt;min(N,M)&lt;/code&gt; active connections at any given time.  I used both my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite slave&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master property
sets&lt;/a&gt;
to prove that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;this
interconnect&lt;/a&gt;
would obey the rules of the road for the bus.  (It can also maintain the high
throughput rate of one transaction request or response per clock when using my
own &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite slave core&lt;/a&gt;,
but that’s another discussion for another day.)&lt;/p&gt;

&lt;p&gt;I then knew that my &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal property
set&lt;/a&gt; would work on not only
basic AXI-lite slaves with only one or two transactions ever outstanding, but
also on any number of arbitrary AXI-lite slaves driven by any
number of arbitrary AXI-lite masters.  The only rule for success was that the
slaves needed to follow &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;these formal
properties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But this was all my own code.  Would &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;these
properties&lt;/a&gt;
apply equally well to the designs of others?&lt;/p&gt;

&lt;p&gt;So, just for fun and to give &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;these
properties&lt;/a&gt; some exercise,
I’ve been wandering &lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s Forums&lt;/a&gt;, just looking
for an example AXI-lite core that can be &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formally
verified&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, this is a biased sample set, since no one submits their code to an
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;on-line forum&lt;/a&gt; unless they can’t get it
to work.  Sometimes this means the code is written by a hobbyist who doesn’t
care about whether or not his code gets released.  At other times, its
submitted by a (not always so) junior engineer who is so &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;frustrated by trying
to get a design to work&lt;/a&gt;
that he’s ready to do anything just to get some help.&lt;/p&gt;

&lt;p&gt;Personally, I think the problem is compounded by the prevalence of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
chips as well as the other &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
based architectures which force you to use such a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;complicated&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; interface to your design.
In many of the examples I’ve found, the poster is frustrated because
he feels like he is connecting his (working) code to a black box that he
doesn’t necessarily or completely understand, and worse to one that he
can’t examine.  What then would you conclude when it doesn’t work?&lt;/p&gt;

&lt;p&gt;So I thought I might share today the most common bug I’ve come across while
examining the AXI-lite designs of others.&lt;/p&gt;

&lt;h2 id=&quot;the-most-common-bug&quot;&gt;The most common bug&lt;/h2&gt;

&lt;p&gt;Let me get straight to the point: here’s the bug in Verilog form, as I found
it in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx’s AXI-lite example
core&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// reset the circuit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buggy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the same bug (again) in their (full) AXI example slave core, this one
taken from &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado
2018.3&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some reset code
&lt;/span&gt;	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Address latching code
&lt;/span&gt;	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;broken&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I won’t continue either of these examples, because the code is already buggy
at this point.&lt;/p&gt;

&lt;p&gt;While the examples above are shown with respect to the write address and data
channels, it can be found on any channel.  This includes not only the read
address channel, but also the write acknowledgment and read return channels.
Specifically, this bug can often be found in any design using a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;basic
handshaking&lt;/a&gt;
protocol.&lt;/p&gt;

&lt;p&gt;Perhaps the reason why this bug is so common is because it’s prevalent in
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s example code.  For example, here it is
again in the example AXI-lite slave generated from &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado
2018.3&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some reset code
&lt;/span&gt;	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Again&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;broken&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the problem: &lt;em&gt;the rest bus logic depends upon &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt;
alone!&lt;/em&gt;  Both the bus master and the interconnect will move on to the next
state in the bus transaction any time both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are true,
&lt;em&gt;irrespective of whether or not any other slave-imposed conditions are also
valid&lt;/em&gt;.  Hence, if you condition your response to
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
on anything other than &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt;, you code may easily miss
transactions.&lt;/p&gt;

&lt;p&gt;Yes, this has bit me too.&lt;/p&gt;

&lt;p&gt;Back when I was working on a &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V
design&lt;/a&gt;, I
discovered that missed or dropped transactions would lock up my design
so hard that there would be nothing to do but cycle the power.  (No, the
reset button didn’t work.)  While I can’t say the same would happen in a
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; design, I can safely say that the
consequences of these mistakes are &lt;em&gt;not&lt;/em&gt; benign.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-the-bug&quot;&gt;Avoiding the bug&lt;/h2&gt;

&lt;p&gt;The reason why this bug is common is that a designer will look at the
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; signals and say to himself, but I only want to act on
these signals if I’m not already busy, or only if some other operation is
complete.&lt;/p&gt;

&lt;p&gt;Adding conditions to the transaction test, such as what we’ve seen in the
examples above, is not the way to solve this problem.&lt;/p&gt;

&lt;p&gt;What you want to do instead is to make certain that any time you are not ready
for the next transaction, you are then holding the &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; line low.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;,
this is as easy as adding another property to your proof, or rather one
property for every condition you want to accept on.  For example, if we
were looking at the write address channel, and we wanted to condition on
&lt;code class=&quot;highlighter-rouge&quot;&gt;something_else&lt;/code&gt;, you’d then want to change your code from,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// reset the circuit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buggy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// reset the circuit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with the added formal property,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also express this same property using an immediate assertion, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how I’m not placing &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; in this check.  &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt;
is one of the incoming signals to your design–one you have no control over.
It makes more sense, therefore, to check against &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; alone since
this is the one signal in this group that you do have control over.&lt;/p&gt;

&lt;p&gt;If this property passes &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;, you
can then remove &lt;code class=&quot;highlighter-rouge&quot;&gt;something_else&lt;/code&gt; from your &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition with confidence,
knowing that &lt;code class=&quot;highlighter-rouge&quot;&gt;something_else&lt;/code&gt; will always be true anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; is true, and
so it no longer needs to be tested by your logic.  This will also simplify
your design, leaving more logic resources available for other tasks.&lt;/p&gt;

&lt;h2 id=&quot;the-second-form&quot;&gt;The Second Form&lt;/h2&gt;

&lt;p&gt;You may also see this same bug in another form.  Consider this following
snippet of code, also generated automatically by
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset code
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Accept a transaction
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buggy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case the question you need to ask yourself is, what will
your design do when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID &amp;amp;&amp;amp; S_AXI_AWREADY&lt;/code&gt;
are both true &lt;em&gt;at the same time&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID &amp;amp;&amp;amp; S_AXI_BREADY&lt;/code&gt; are true?&lt;/p&gt;

&lt;p&gt;There are two options to fix this form of the problem.  First, you could
use &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
to prove that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; would never be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; was true,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you could write your code to handle both conditions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset condition
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic when nothing happens
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic when a return is accepted
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic when a new request is made
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic for when both a new request is made
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// and the last one is accepted
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This bug is not specific to &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
peripherals by any means.  You might also find this bug within
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
slave peripherals](/zipcpu/2017/05/29/simple-wishbone.html).
Indeed, the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;basic handshake is a very common design
component&lt;/a&gt;
and it’s important to learn how to do it right.&lt;/p&gt;

&lt;p&gt;No, I’m not done discussing the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; just yet.
I’d like to come back and discuss &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
some more, &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;should the Lord
permit&lt;/a&gt;.  For example, I’ve just
recently managed to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt;
both Xilinx’s AXI (full, not lite) example core as well as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;my own brand-new
AXI (full) slave
core&lt;/a&gt;, and I
think it might be valuable to share this solution with others and to show
you how to do it.  Further, the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;solution
I’ve presented for Verilog
designs&lt;/a&gt; can also be
applied to VHDL designs using the &lt;a href=&quot;https://www.symbioticeda.com/symbiotic-eda-suite&quot;&gt;Symbiotic EDA
Suite&lt;/a&gt;, and I’d like to show
how to verify a VHDL design using the same tools as well.  Indeed, it’s really
not all that much harder, but there are a few interesting twists necessary
to make it happen.&lt;/p&gt;

&lt;p&gt;If these are topics you are interested in, please feel free to &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;contribute
to the ZipCPU blog on Patreon&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;There hath no temptation taken you but such as is common to man: but God is faithful, who will not suffer you to be tempted above that ye are able; but will with the temptation also make a way to escape, that ye may be able to bear it. (1 Cor 10:13)&lt;/em&gt;</description>
        <pubDate>Tue, 16 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2019/04/16/axi-mistakes.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/04/16/axi-mistakes.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>The ZipCPU&#39;s Interrupt Controller</title>
        <description>&lt;p&gt;For those unfamiliar with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
it was designed from the ground up to be a simple, low logic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;.  At every location
and opportunity, I have tried to cut logic from the design to make it simpler.
One of the places where I tried to keep the design simple was the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1: The ZipCPU Interrupt Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/interrupt-controller.svg&quot;&gt;&lt;img src=&quot;/img/interrupt-controller.svg&quot; alt=&quot;Multiple interrupts come in, one goes out&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Traditionally, when a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
receives an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
the hardware &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
logic then looks up an “&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt
vector&lt;/a&gt;” from a table
located at a known location in memory.  The index to the table is given by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; number.  This
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt vector&lt;/a&gt;
will contain the address of a software routine known as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt
handler&lt;/a&gt;.  Once the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; reads this value
from memory, it will then jump to that address in order to execute what is
known as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;“Interrupt Service Routine” or
ISR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a pseudo-assembly, these actions of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; might look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	PUSH CC	; Push the condition codes to the stack
	PUSH PC	; Push the program counter to the stack
	; Read from the interrupt table, in the INTN entry, the value
	; to place into the program counter
	LW ITBL[INTN],PC&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, these instructions would never appear in any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
software.  Rather, they are implied by and executed within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; itself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2: A Generic Interrupt Vector Table&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/interrupt-vectors.svg&quot; alt=&quot;A table of function pointers at the end of memory&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Depending upon the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
other actions may take place as well.  The current
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
may be disabled, and some architectures will even disable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.  The old
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
is usually stored somewhere (as shown in pseudocode above), and sometimes
there’s even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;flag register&lt;/a&gt;
that needs to be stored as well (also shown in pseudocode above).  Modern
multitasking computers may also store the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;stack
register&lt;/a&gt; register itself,
and so on.  Where these registers get stored is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_System&quot;&gt;Operating System (O/S)&lt;/a&gt;
dependent.  Older &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
used to store these values in memory on the stack.  Many newer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
just place these values into special purpose registers.&lt;/p&gt;

&lt;p&gt;The size of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;vector table&lt;/a&gt; itself
is also &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
dependent.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Programmable_interrupt_controller&quot;&gt;Some
architectures&lt;/a&gt;
support 16 &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s.  Some support
more.  Each &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; gets its own 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt handler&lt;/a&gt; address in
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;table&lt;/a&gt;, and as a
result the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can have many &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service
routines (ISRs)&lt;/a&gt;.  This
allows the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; to jump
to a routine specific to the type of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; taking place.  Should the
keyboard &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; trigger, for
example, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
could transition straight to the software necessary for handling keyboard
input.  Other possible &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
sources include the display, mouse,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;,
hard drive, SD-card, and many more.&lt;/p&gt;

&lt;p&gt;One fascinating fact of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux O/S&lt;/a&gt;
is that it tends to set every &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt
address&lt;/a&gt;
to the same &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service
routine&lt;/a&gt;–regardless of the
peripheral that tripped it.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; uses a different approach,
somewhat inspired by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
approach of having only a single &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service
routine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; doesn’t look up an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt
address&lt;/a&gt; from memory.
Instead, it just clears the &lt;a href=&quot;/zipcpu2017/08/23/cpu-pipeline.html&quot;&gt;internal
pipeline&lt;/a&gt; and then
switches from the user to the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor&lt;/a&gt; register
sets.  It also has only one &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
input.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 3: ZipCPU Operating Modes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-modes.svg&quot; alt=&quot;Reset -&amp;gt; [ supervisor -&amp;gt; user ]*&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From the software standpoint, the 
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; doesn’t call the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt handler&lt;/a&gt; directly.
That’s not the entry point to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt
handler&lt;/a&gt;.  Instead, it just
looks like the return of a special &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_rtu()&lt;/code&gt; function call made from
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;.
As a quick background, if you will recall the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; starts
in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt; upon
any reset.  When it then hits an RTU (return to userspace)
instruction, i.e. when the software calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_rtu()&lt;/code&gt; function, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
switches from supervisor to user mode.  It will then run instructions from the
user register set until some time later following either a user trap
(system call request), an exception (something went wrong, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; for example), or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.  At this point in time,
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; switches to the supervisor
register set, and continues executing instructions from there.&lt;/p&gt;

&lt;p&gt;This often leads to a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
supervisor program that looks something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kernel_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... Setup the environment
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Set up the interrupt controller
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;zip_rtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read interrupt status from the controller
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_picv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ANY_INTERRUPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Handle any interrupt
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// ....
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_ucc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Handle any user exceptions
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_ucc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CC_TRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Handle any user traps
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Halt the CPU if we ever exit from the loop
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;zip_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with this approach is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
needs to know, once it switches to &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor
mode&lt;/a&gt;, which device
triggered the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.  This is
the purpose of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt controller&lt;/a&gt;
also handles enabling particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;–something
we’ll get to in a moment.&lt;/p&gt;

&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;/h2&gt;

&lt;p&gt;The basic concept of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Programmable_interrupt_controller&quot;&gt;interrupt
controller&lt;/a&gt;
is that it monitors several &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
lines or sources, and triggers an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; when any of the lines is
high.  If we consider a generic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; numbered &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;, we might
write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_interrupt_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4: Interrupt Register States&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/interrupt-bistate.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, this isn’t quite sufficient.  We also need a way to clear this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state once set.  We also need to insure that it starts in an idle state, and
only triggers after the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
has taken place, as shown in Fig. 4 on the right.&lt;/p&gt;

&lt;p&gt;So, let’s try this again.  We’ll initialize our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;’s
state to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, on an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
we’ll set the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Triggered&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if the user writes to our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
register, we’ll clear the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state.  To be specific to one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
we’ll clear the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state any time the user writes a ‘1’ to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state associated with this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state register, and ignore any write otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Turned off via a wishbone write command
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if we aggregate all of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
together, we can create a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
input for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Except … what if we don’t want to be interrupted?  Or, alternatively,
what if we don’t want to be interrupted by a particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Therefore, let’s create what’s known as an interrupt mask, so that only
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt; found identified by the
mask will &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are actually two parts to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;s
interrupt mask logic within its &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;.
First, an individual interrupt mask selects particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
to be enabled or disabled.  Second, there’s a master interrupt enable wire
that needs to be set in order for any interrupt wire to create an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; within that
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code for this “interrupt enable” register might now look something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// By default, upon reset no interrupts are enabled
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;int_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Set the enable bit based upon the hi-word of the write
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// together with bit 15 indicating whether to set or clear
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// the big
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;int_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also apply this same logic to the master interrupt enable or MIE
register within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;.
We’ll just use the MSB to control this value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Disable everything
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When put together, the logic for generating an outgoing interrupt will now
look something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not tripped
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a result, an outgoing &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
will be created any time one of several
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; source wires goes high,
provided that both that individual enable and the MIE bit is set.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;
logic I’m presenting above is actually from a second generation
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;–one
that hasn’t (yet) propagated into all of &lt;a href=&quot;/projects.html&quot;&gt;my projects
yet&lt;/a&gt;.  The
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/peripherals/icontrol.v&quot;&gt;first generation controller&lt;/a&gt;
had a big problem with the lack of an ability to atomically set or clear
particular interrupt enable lines.  In this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/peripherals/icontrol.v&quot;&gt;first controller&lt;/a&gt;,
writing a word with the high order bit set high, that is with the MIE bit
set, would enable all &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
as well as those whose interrupt enable
lines were set.  However, if you were to wrote a word to the controller
with the high order bit clear, you could then disable any interrupt masks but
&lt;em&gt;you would also disable the MIE bit&lt;/em&gt;!  These two operations, in the original
design, &lt;em&gt;could not be decoupled&lt;/em&gt;.  As a result of that earlier approach,
disabling any &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
source within the controller also disabled the master
interrupt enable bit.  If you only wanted to disable a single
interrupt’s enable bit, you’d need to first disable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
as well as the single interrupt you wanted to disable, and then
you’d need to re-enable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt; in a second transaction.&lt;/p&gt;

&lt;p&gt;The newer, and updated logic above, avoids that problem.&lt;/p&gt;

&lt;p&gt;Let’s see how this works, shall we?&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The biggest difference between the outlined logic above, and the actual
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller as implemented&lt;/a&gt;,
is that the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;currently implemented
controller&lt;/a&gt;
uses word rather than bit operators.  Hence, for &lt;code class=&quot;highlighter-rouge&quot;&gt;IUSED&lt;/code&gt; possible
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
there’s a word of &lt;code class=&quot;highlighter-rouge&quot;&gt;IUSED&lt;/code&gt; bits in length that contains all of the bits in the
current
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and another one that contains a list of all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
sources that are currently enabled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The third state register controls whether this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;
will generate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
at all.  Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt; to zero, will disable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
generation from this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reads to this core will just read our status register, but writes can have
a couple of side effects.  In particular, we’ll want to support a basic write
to the peripheral, as well as writes that either enable or disable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now comes the fun parts!&lt;/p&gt;

&lt;p&gt;First, how shall we determine which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.
are active?  Remember, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
is active independent of whether or not it is enabled.  An
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
becomes “active” when the incoming
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line is high, and it gets deactivated when a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is written to its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state line.  We’ll keep the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state in our bottom 15 bits, giving us something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Deactivate any interrupts that may have tripped,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// but only if the interrupt source is also inactive
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Activate or trigger on any new interrupts
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next important piece of logic controls our interrupt enable lines.  These
will be controlled by bits &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[16 +: IUSED]&lt;/code&gt;.  If you’ve never used
this &lt;code class=&quot;highlighter-rouge&quot;&gt;A[X +: W]&lt;/code&gt; notation before, it’s equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;A[(X+W)-1:X]&lt;/code&gt;.  I
often find it much easier to read–especially since, like an old codger,
I try to make certain all of my code fits within an &lt;a href=&quot;https://en.wikipedia.org/wiki/Punched_card#IBM_80-column_punched_card_format_and_character_codes&quot;&gt;80 column screen&lt;/a&gt;,
using 8-character tabs.&lt;/p&gt;

&lt;p&gt;We’ll start out the interrupt enable logic by disabling all of
the enable bits on any synchronous reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if the user writes a word to our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;
with bit &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[15]&lt;/code&gt; held high, then we’ll enable any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
whose enable bits are also set during the write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same is true for disabling
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.
Writing to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt controller&lt;/a&gt;
with bit &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[15]&lt;/code&gt; clear, will be used to clear any enable lines that
are set during the write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logic for the master enable bit for this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;
is almost identical.  The big difference is that we aren’t using word logic
but rather bit logic to set it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the important part of this control design: the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt; bit is &lt;em&gt;only&lt;/em&gt;
adjusted when &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[DW-1]&lt;/code&gt; is also high.  This allows other bits to be
adjusted without adjusting this one–fixing the problem from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/peripherals/icontrol.v&quot;&gt;last controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ok, that handles most of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state and enable controls.&lt;/p&gt;

&lt;p&gt;How can we now go about using them to generate our outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;First, we’ll set a helper bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;w_any&lt;/code&gt;, to capture whether any enabled bits
are also active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if &lt;code class=&quot;highlighter-rouge&quot;&gt;w_any&lt;/code&gt; is set, and if the master
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
enable is also set, then we can send an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt; is registered, or set on a clock edge.  That’s
important, since a &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
may have a lot of logic riding on this incoming signal.  By registering it
here and now, we avoid compounding any internal timing problems the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
might already have.  Indeed, &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
used to have a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/1786a8529d44157a22de3661c413559f8ba1ece4/rtl/core/zipcpu.v#L1669-L1693&quot;&gt;lot more
logic&lt;/a&gt;
dependent upon this one signal than &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/zipcpu.v#L1971-L1987&quot;&gt;it has
now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All that’s left, then, is to set our
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus outputs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first one is &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;.  In this case, we want to set bit &lt;code class=&quot;highlighter-rouge&quot;&gt;31&lt;/code&gt; to
reflect whether or not the master interrupt enable is set,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and bit &lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt; to reflect whether any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
would be currently triggering.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that,
the register is split into two halves.  The top half indicates which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
are enabled,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the bottom half indicates which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
are currently active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only there’s a tricky problem here: if we don’t set all of the bits, such
as if &lt;code class=&quot;highlighter-rouge&quot;&gt;IUSED&lt;/code&gt; is something less than the full width, then the synthesis
tools will complain at us about undefined bits–and rightly so.&lt;/p&gt;

&lt;p&gt;I used to get around this by setting part of the bits in the basic always
block, and using a generate block to set the rest.  Verilog, however, has
this wonderful feature where the “last assignment wins.”  Therefore, we can
start by assigning &lt;em&gt;all&lt;/em&gt; of the bits within &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; to zero,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;after which we can set the specific bits of interest as before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a result, any bit that isn’t set specifically, will be set by default
to zero.  Even better, the synthesizer can remove the logic surrounding any
of these bits which might get stuck at zero.&lt;/p&gt;

&lt;p&gt;This particular peripheral is also unique because it has only one address,
and hence there’s no logic that needs to take place on a read other than just
returning &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;.  Hence, we can set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; to be equal to
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt;, and set our stall line to zero as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  A functioning &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-the-interrupt-controller&quot;&gt;Formally Verifying the Interrupt Controller&lt;/h2&gt;

&lt;p&gt;What about &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verifying&lt;/a&gt;
something this simple?&lt;/p&gt;

&lt;p&gt;Let’s see if we can’t turn the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
section into a set of
rules that we will check, and then check at each point that our
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;
works as intended.&lt;/p&gt;

&lt;p&gt;The first step, though, is a bit preliminary.  First, we want to create our
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; logic, so we can tell when any &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; values are properly
constrained and usable within any assertions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we want to make certain our design starts with an initial reset.  This
is really needed more for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
than anything else, but it often makes good practice anyway.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here are the values we want to make certain are responsive to a reset.
Notice that we also force them to be properly responsive to the first
or initial clock as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ok, let’s start walking through what this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;
needs to do.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #1: Any incoming
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
should be able to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_state&lt;/code&gt; bits&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The word level logic here might be a touch confusing.  Basically,
we’re asserting that if a bit was high in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_brd_ints&lt;/code&gt; on the last
clock, that &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_state&lt;/code&gt; in the next clock should reflect that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #2: An
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
should be generated if received and enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_state&lt;/code&gt; captures an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
being received, and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_enable&lt;/code&gt; captures one being enabled.  If this is
true one clock ago, and if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt; was high, then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt; should now
be high as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #3: If the master
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
enable bit is off, then no outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
shall be asserted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is really the first part of the inverse of Rule #2 above, expressing when
the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line should be clear.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rule #4 is the other half of rule #3.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #4: If no active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
are enabled, then no outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
shall be asserted either&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, we are asserting when the outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; line should be
&lt;em&gt;clear&lt;/em&gt; (zero).  In this case, if there are no active and enabled
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;,
then neither should the outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line be high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, let’s switch from how the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;
should deal with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;,
and look at how it should deal with transactions from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #5: It should be possible to disable one (or all)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
as a result of writing a word from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To put this another way, if it was set one clock ago within
&lt;code class=&quot;highlighter-rouge&quot;&gt;$past({i_wb_data[31],i_wb_data[16 +: IUSED]})&lt;/code&gt;, then the enables on the
current clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r_mie,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; should be zero.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #6: It should be possible to enable one (or more)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #7: It should be possible to acknowledge an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
and so deactivate it&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #8: The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
enables should be stable without a write&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next big portion of our proof is to include our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus property
file&lt;/a&gt;,
to verify that, yes, we are properly responding to
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus requests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The tricky part here is that this slave doesn’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line coming
into it.  According to the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone
spec&lt;/a&gt;, it doesn’t need one.  It can (and
does) get by with just the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; signal.  Our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;interface properties&lt;/a&gt;,
however, require an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line.  Therefore, let’s imagine we had an
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line, and that our imagined &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; followed the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;rules of the
bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Allow the solver to pick an i_wb_cyc signal that
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// can change as often as the solver wants to whatever
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// the solver sets it to
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// If i_wb_stb is ever true, make sure the solver also sets
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// i_wb_cyc true at the same time
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Similarly, following a reset, i_wb_cyc should be low
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can include our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus
properties&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;fwb_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_STALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_ACK_DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_REQUESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_MINCLOCK_DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fwb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_nreqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_nacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may note that we set the width of the address bus to &lt;code class=&quot;highlighter-rouge&quot;&gt;.AW(1)&lt;/code&gt;.  It’s not.
It’s really zero.  I have yet, however, to learn how to remove bits
automatically based upon a parameter, so I instead set this to one and then set
the address bit(s) themselves to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack == i_wb_stb&lt;/code&gt;, we’ll never have any outstanding requests, so
asserting the proper value for the number of outstanding (not responded to)
requests becomes easy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then threw some odds and ends into the proof, just for good measure.&lt;/p&gt;

&lt;p&gt;For example, if there hasn’t been either a write or reset request, then any
previously active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
should remain active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s missing?  A big and important part of any proof: the proof that, in
spite of all of our constraints, our logic can still work.  So, let’s add some
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;The first and most obvious item to cover is, yes, it is possible to produce an
outgoing &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A good second example would be that, given a prior active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
it can be cleared by a write from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s also make certain our enables work, by covering a low &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt;,
but yet a high &lt;code class=&quot;highlighter-rouge&quot;&gt;w_any&lt;/code&gt; or similarly a low &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt;, an active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line, and a high &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should be (roughly) enough to convince ourselves that this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;
is working.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But how to use it?  Well, the first step towards using an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;
is to wire it up.  To do that, let’s invoke
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to make our connections for us.&lt;/p&gt;

&lt;h2 id=&quot;autofpga&quot;&gt;AutoFPGA&lt;/h2&gt;

&lt;p&gt;The first step to integrating &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;
into a design using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is to create an &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt; for this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;.
The second step will be using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; to connect
various &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; sources to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;.
So let’s start out by walking through an
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt;
for this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;,
and then walk through how to connect the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
from the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer peripheral that we discussed
previously&lt;/a&gt;
to our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;new interrupt
controller&lt;/a&gt;.
If you’d like, you can follow along as I work my way through the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;buspic&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt;
in my &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt;, and again through
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;the bus timer&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;configuration&lt;/a&gt;
to see how some simple
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
tags can be used to merge this into a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we get into this, let me remind you of two things about
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;: First,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is designed to be able to compose a design from multiple sources via a
copy-and-paste approach, with some amount of variable substitution.  Second,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can also attach
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slaves&lt;/a&gt; together,
assign addresses, and for our purposes today, it can assign
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt; to a bit-vector that
will then be the input to an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
like the one we’ve discussed above.&lt;/p&gt;

&lt;p&gt;We’ll start out by examining how to integrate this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
into the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; project.  In many of &lt;a href=&quot;/projects.html&quot;&gt;my
projects&lt;/a&gt;, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
is a part of the wrapper of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
that I call the
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipSystem&lt;/a&gt;.  Not so in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt;.  Sorry.  There wasn’t
room in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt; for the
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipSystem&lt;/a&gt;.  Instead, in
the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; design the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
is a proper
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;peripheral&lt;/a&gt; on the
main &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone bus&lt;/a&gt;
along with every other peripheral.&lt;/p&gt;

&lt;p&gt;As a result, we’ll be primarily just integrating a
&lt;a href=&quot;/zipcpu/2017/10/06/autofpga-dataword.html&quot;&gt;simple peripheral&lt;/a&gt;
into the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone bus&lt;/a&gt;
structure using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step, as always, is to pick a name for our peripheral.  I’m going to
use the name &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;, since this Programmable Interrupt Controller (PIC) is
attached to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; instead of the
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipSystem&lt;/a&gt;.
I’m also going to create the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;@DEVID&lt;/code&gt; for later substitution
and set it to the same name, but this time in all capitals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@PREFIX=buspic
@DEVID=BUSPIC&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case anything else depends upon the presence of the BUSPIC within the
design, we’ll also create an &lt;code class=&quot;highlighter-rouge&quot;&gt;@ACCESS&lt;/code&gt; tag.  This will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt;
macro in the top of the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
design element, that can then later be
commented out (if you’d like).  Other Verilog components within
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
that might depend upon the presence of this one can then use this macro
to determine whether this peripheral is present in the design or not.
Even better, a quick script within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/Makefile&quot;&gt;Makefile&lt;/a&gt;
of our
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip&quot;&gt;rtl directory&lt;/a&gt;
converts these defines into a &lt;code class=&quot;highlighter-rouge&quot;&gt;design.h&lt;/code&gt; file as well, which
can then be used within software components to determine what components
are and are not built into the design.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@ACCESS=BUSPIC_ACCESS&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
connection for this component.  The first step is to
tell &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
how many addresses this slave has.  In our case, it’s just the
one, so &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR=1&lt;/code&gt;.  We then want to connect to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
I’ve named &lt;code class=&quot;highlighter-rouge&quot;&gt;wb&lt;/code&gt;.  Further, since our output register is available to be
read at all times, and since this peripheral never stalls, we can tell
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; to
connect it up as a peripheral of type &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;, as in, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE=SINGLE&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@NADDR=1
@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That will create return wires for this peripheral to return to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; tag to determine their names.  It will also create another
value to determine when a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
operation is selecting this device, &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic_sel&lt;/code&gt;.  In total, this will looks
something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// Wishbone slave definitions for bus wb(SIO), slave buspic
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;buspic_sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buspic_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buspic_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;buspic_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll use these various connections in a moment to actually connect &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;our
device&lt;/a&gt;
to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we do that, though, let’s tell
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; that this
particular device is a programmable interrupt  controller (PIC).  Specifically,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
accepts a number of tags associated with any PIC.  These are first the name of a
multi-element vector, in our case &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_int_vector&lt;/code&gt;, and second the number of
elements in that vector–which for us is 15 elements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@PIC.BUS= bus_int_vector
@PIC.MAX= 15&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when any peripheral wants to route its interrupt wire to the PIC named
&lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;, it will be assigned a bit within this &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_int_vector&lt;/code&gt; of bits.
We’ll get back to that in a bit.&lt;/p&gt;

&lt;p&gt;Our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
needs an output wire, to be fed to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Let’s call that
&lt;code class=&quot;highlighter-rouge&quot;&gt;bus_interrupt&lt;/code&gt;, and declare it at the top of our
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@MAIN.DEFNS=
	wire	bus_interrupt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.DEFNS&lt;/code&gt; describes one of those tags that’s just copied directly
into a given location within an output file–in this case
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another straight copy tag is &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.INSERT&lt;/code&gt;.  The value for this tag will
be copied directly into
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
after variable substitution.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@MAIN.INSERT=
	//
	// The BUS Interrupt controller
	//
	icontrol #(15)	@$(PREFIX)i(i_clk, 1&#39;b0,
			(wb_stb)&amp;amp;&amp;amp;(@$(PREFIX)_sel), wb_we, wb_data,
			@$(PREFIX)_ack, @$(PREFIX)_stall, @$(PREFIX)_data,
			bus_int_vector, bus_interrupt);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, the primary variable that we wish to substitute in, as we copy
this longer string into our
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
file, is the &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(PREFIX)&lt;/code&gt; tag.  As you may
recall, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
tags may be referenced by either a &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(*)&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;@$*&lt;/code&gt;.  Hence, we could
reference &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(PREFIX)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@$PREFIX&lt;/code&gt; equally.  Both will get substituted with
our prefix, &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;.  I personally like the &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(*)&lt;/code&gt; form better, because in
this case the underscore following the tag will not be confused with the
identifier for the tag itself.&lt;/p&gt;

&lt;p&gt;We can also specify some alternate logic, for if and when the &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; macro
at the top of
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
is commented out.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@MAIN.ALT=
	assign	bus_interrupt = 0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.ALT&lt;/code&gt; code will replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.INSERT&lt;/code&gt; code.&lt;/p&gt;

&lt;p&gt;Further, in this alternate “the buspic is not included” case, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
will provide default values for the bus returns: &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic_stall = 0&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;buspic_data = 0&lt;/code&gt;, and so on, so you can ignore them here.&lt;/p&gt;

&lt;p&gt;If you’ve followed this blog much, you know that I like to have command line
access to the peripherals within my designs using a command I call
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;wbregs&lt;/a&gt;.
This allows me access to memory mapped peripherals in roughly the same was
as the &lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;PEEK &amp;amp; POKE&lt;/a&gt; of
yesteryear.&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;PEEK &amp;amp; POKE&lt;/a&gt;,
though, &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; allows named values.&lt;/p&gt;

&lt;p&gt;In a similar manner, if you want access to this peripheral from the C++
bus interface, you’ll need to know the address of this peripheral.  This
is the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@REGS.*&lt;/code&gt; tags.  The first one, &lt;code class=&quot;highlighter-rouge&quot;&gt;@REGS.N=1&lt;/code&gt;, tells
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; that this
peripheral has only one named register.  The second line tells
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
that this register has a zero word offset from the base address
of this peripheral, that the C++ name for this register should be &lt;code class=&quot;highlighter-rouge&quot;&gt;R_PIC&lt;/code&gt;,
and that &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; should accept a name &lt;code class=&quot;highlighter-rouge&quot;&gt;PIC&lt;/code&gt; in order to access this register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@REGS.N=1
@REGS.0= 0 R_PIC PIC&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two lines affect the &lt;code class=&quot;highlighter-rouge&quot;&gt;regdefs.h&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;regdefs.cpp&lt;/code&gt; files generated
by &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’d also like to reference this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
from within a program for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, given an interrupt number, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;, it would be nice to know
how it maps to the various bit masks within our peripheral.  We can also
throw in macros to enable and disable interrupts using &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;’s
if we would like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.DEFN=
#define BUSPIC(X) (1&amp;lt;&amp;lt;X)
#define	BUSPIC_EN(X)	(0x80008000 | (X) | ((X)&amp;lt;&amp;lt;16))
#define	BUSPIC_DIS(X)	(0x00000000 | (X) | ((X)&amp;lt;&amp;lt;16))&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These macros will get copied to the top part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file, used to
describe peripherals for any CPU within the design.  The first one of these,
&lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC(X)&lt;/code&gt;, will also get called by the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated code to define values to describe each interrupt assignment.&lt;/p&gt;

&lt;p&gt;We’d also like to know, in that same file, the location of this peripheral
in address space.  We &lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;discussed some time ago how to access memory mapped
peripherals in general&lt;/a&gt;,
so here’s how it is done with &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we define the name that we want to reference this peripheral as from
within our &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; C code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.IONAME= _@$(PREFIX)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the type this value will point to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.IOTYPE= unsigned&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a macro that can be used to determine if the design (originally) had this
peripheral within it,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.OSDEF= _BOARD_HAS_@$(DEVID)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we can put these all together to define an constant address
pointer referencing this peripheral.  This final line, after variable
substitution, will be copied directly into the &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.OSVAL= static volatile @$BDEF.IOTYPE *const @$BDEF.IONAME = ((@$BDEF.IOTYPE *)@$[0x%08x](REGBASE));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; will then place a line into the &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file looking something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_buspic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00600008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt; contains one more group of
tags.  These are used to place information into a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/make.inc&quot;&gt;make include file&lt;/a&gt;, which
can then be used to determine which files to send to
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
(or any other synthesizer) and how to determine dependencies.&lt;/p&gt;

&lt;p&gt;For our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;,
we create a group of files within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/cpu&quot;&gt;cpu&lt;/a&gt;
subdirectory named &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC&lt;/code&gt;.  This file group contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;icontrol.v&lt;/code&gt; file
only in our case, since this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
implementation doesn’t have any submodules.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@RTL.MAKE.GROUP= BUSPIC
@RTL.MAKE.SUBD= cpu
@RTL.MAKE.FILES=icontrol.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
has now been connected to the rest of the design.  The one remaining detail
is that the rest of the design hasn’t been connected to this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;.
So let’s take a look at how to connect the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; output to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; design contains a &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt; &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; configuration within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;configuration file, zipbones.txt&lt;/a&gt;.
Two particular lines within &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;this
configuration&lt;/a&gt;
need to be discussed.&lt;/p&gt;

&lt;p&gt;First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@INT.BUSTIMER.WIRE&lt;/code&gt; line defines a wire that will contain this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@INT.BUSTIMER.WIRE= @$(PREFIX)_int&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This alone will define the wire, &lt;code class=&quot;highlighter-rouge&quot;&gt;bustimer_int&lt;/code&gt;, pasting a line,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;	wire	bustimer_int;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;into the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
file.  That only defines it.&lt;/p&gt;

&lt;p&gt;To connect it up to a particular
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt controller&lt;/a&gt;,
just name the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
you want to connect to.  In
our case, that’s
the &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt; we just defined above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@INT.BUSTIMER.PIC= buspic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; will now pick a bit within &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_int_vector[14:0]&lt;/code&gt;, and assign
&lt;code class=&quot;highlighter-rouge&quot;&gt;bustimer_int&lt;/code&gt; to that vector, giving it the name &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSTIMER&lt;/code&gt; found within the
key name, &lt;code class=&quot;highlighter-rouge&quot;&gt;@INT.BUSTIMER.WIRE&lt;/code&gt;.  For example, if you look through the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated file within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; repository, you’ll find
the lines,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;       &lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;bus_int_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bustimer_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;spio_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rtc_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uartrx_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uarttx_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uartrxf_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uarttxf_int&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here you can see how the seven interrupts used within this design are
assigned.&lt;/p&gt;

&lt;p&gt;But how would you access these definitions within some C code, to know which
interrupts got assigned where?  For that, check out the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file.  Towards the bottom, you’ll find these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
assignment statements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
// Interrupt assignments (1 PICs)
//
// PIC: buspic
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define BUSPIC_UARTTXF  BUSPIC(0)
#define BUSPIC_UARTRXF  BUSPIC(1)
#define BUSPIC_UARTTX   BUSPIC(2)
#define BUSPIC_UARTRX   BUSPIC(3)
#define BUSPIC_RTC      BUSPIC(4)
#define BUSPIC_SPIO     BUSPIC(5)
#define BUSPIC_BUSTIMER BUSPIC(6)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These lines are created by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
based upon the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
connected to the peripheral having the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;, and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;@PIC.WIRE&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;Looking over this code, you should now understand why we defined the
&lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC(X)&lt;/code&gt; macro earlier.  We can now reference these interrupt ID’s
by these macros.  In the case of our
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;,
we can now reference the &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC_BUSTIMER&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
within our code.&lt;/p&gt;

&lt;p&gt;Alternatively,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
has defined a value for the &lt;code class=&quot;highlighter-rouge&quot;&gt;@INT.BUSTIMER.ID&lt;/code&gt; key that you can
use as well, to place this identifier as necessary wherever you need to within
your design.&lt;/p&gt;

&lt;p&gt;That’s all that’s necessary to connect a &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE.TYPE=SINGLE&lt;/code&gt; peripheral to the
bus, and then to fill out an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
(or other) vector register with values
composed from several other peripherals within the design.  Yes, this
capability is currently very flexible–I’ve even used it to compose system
reset wires from multiple independent sources.  It’s just that useful.&lt;/p&gt;

&lt;p&gt;What if you didn’t want to include this &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt; in your design?  You could
simply remove it from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line.  Sure, you’d then get some errors about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
that didn’t have corresponding &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controllers&lt;/a&gt;,
but that’s what you’d want, right?&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;At this point, we’ve now created (or rather updated) an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;interrupt
controller&lt;/a&gt;,
we’ve then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
it and connected it into our design.  The peripheral now has an address
on our bus, and the bus logic knows to check the results of this peripheral
for responses.  Similarly, we’ve also seen how to connect various
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
lines created from among our several peripherals to this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.md&quot;&gt;controller&lt;/a&gt;
using &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
All that remains is to demonstrate &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;
within a design.&lt;/p&gt;

&lt;p&gt;At this point, though, I’m going to stop and break this article into pieces.
The next step in using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
isn’t really a Verilog or
FPGA
design problem.  Using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
is more of an advanced software lesson, so it will have
somewhat of a different flavor to it.&lt;/p&gt;

&lt;p&gt;My hope is to use &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;
to demonstrate and discuss not only how to control
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timing delays&lt;/a&gt;
within an embedded
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
but also to demonstrate how to run multiple tasks within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;All of these will be if and &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;as the Lord
wills&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;While he was yet speaking, there came also another, and said, The fire of God is fallen from heaven, and hath burned up the sheep, and the servants, and consumed them; and I only am escaped alone to tell thee.  (Job 1:16)&lt;/em&gt;</description>
        <pubDate>Tue, 02 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/04/02/icontrol.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/04/02/icontrol.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Logic usage and decoding return results with cascaded multiplexers</title>
        <description>&lt;p&gt;About a week ago or so, I was working on a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;cross-bar interconnect&lt;/a&gt;.
It seemed like a fun project to toy around with.  However, at one point in my
design, things just weren’t working.  Personally, I was convinced
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; was at fault, but I couldn’t figure out
what the fault was.&lt;/p&gt;

&lt;p&gt;So I set out about the task of creating a
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
&lt;a href=&quot;https://github.com/YosysHQ/yosys/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem with creating a &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
&lt;a href=&quot;https://github.com/YosysHQ/yosys/issues&quot;&gt;issue&lt;/a&gt;
is that most
&lt;a href=&quot;https://github.com/YosysHQ/yosys/issues&quot;&gt;issues&lt;/a&gt;
are ignored unless you can provide a &lt;a href=&quot;https://stackoverflow.com/help/mcve&quot;&gt;minimal, complete, verifiable
example&lt;/a&gt;
of the error.  For me, this is usually about 60-90 lines of code.  However,
usually when I turn in this 60-90 lines, &lt;a href=&quot;https://twitter.com/oe1cxw&quot;&gt;Clifford&lt;/a&gt;
tends to school me: either pointing out how the fault was my own, or
otherwise he reduces my “minimal” example to 15 lines of code.&lt;/p&gt;

&lt;p&gt;This time I was determined to create a better example of this bug myself first.
Who knows, perhaps I might have even been able to find the bug?&lt;/p&gt;

&lt;p&gt;So I set up all of the configurable parameters just the way I wanted, and
ran &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;.  At the prompt, I typed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ yosys -ql log.txt
yosys&amp;gt; read -sv wbxbar.v
yosys&amp;gt; dump
yosys&amp;gt; exit&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sure enough, if I squinted my eyes just right at the output in &lt;code class=&quot;highlighter-rouge&quot;&gt;log.txt&lt;/code&gt;,
I felt like I could understand what was going on.&lt;/p&gt;

&lt;p&gt;For example, I found things like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  attribute \src &quot;../../rtl/wbxbar.v:227&quot;
  cell $mux $ternary$../../rtl/wbxbar.v:227$1146
    parameter \WIDTH 1
    connect \Y $ternary$../../rtl/wbxbar.v:227$1146_Y
    connect \S \r_stb [0]
    connect \B \r_we [0]
    connect \A \i_mwe [0]
  end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This appeared to describe a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiplexer&quot;&gt;multiplexer&lt;/a&gt;, where the output,
&lt;code class=&quot;highlighter-rouge&quot;&gt;\Y&lt;/code&gt;, would be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;\A&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;\S&lt;/code&gt; was false, and to &lt;code class=&quot;highlighter-rouge&quot;&gt;\B&lt;/code&gt; otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If I looked at line 227 within &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;my source file&lt;/a&gt;, sure
enough, I could recognize some of the variables within my design: &lt;code class=&quot;highlighter-rouge&quot;&gt;r_stb[0]&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_we[0]&lt;/code&gt;, and even &lt;code class=&quot;highlighter-rouge&quot;&gt;i_mwe[0]&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;$ternary$../../rtl/wbxbar.v:227$1146_Y&lt;/code&gt;
value really didn’t make much sense to me, but if I searched on this string
within the &lt;code class=&quot;highlighter-rouge&quot;&gt;log.txt&lt;/code&gt; file, I could often find where that was an input to
another block, meaning that it was an intermediate piece of logic.&lt;/p&gt;

&lt;p&gt;Then, as I started trying to back out what was going on in this giant file of
logic, I found a chain of several
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiplexer&quot;&gt;muxes&lt;/a&gt; all in a row.  Sure, I
had to do some scratching through the output to try to put it back together.
No, it wasn’t easy, but I was convinced I was going to do this! If you adjust
the output format to make it easier to read, you can then see (roughly) what
I found:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  cell $mux ...
    connect \Y $one$
    connect \S av
    connect \B bdata
    connect \A adata
  end

  cell $mux ...
    connect \Y $two$
    connect \S cv
    connect \B cdata
    connect \A $one$
  end

  cell $mux ...
    connect \Y myoutput
    connect \S dv
    connect \B ddata
    connect \A $two$
  end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is really simplified, but what I found was certainly a &lt;em&gt;long&lt;/em&gt; chain of
these multiplexers, perhaps as many as sixteen in a row.&lt;/p&gt;

&lt;p&gt;This new knowledge left me wondering, was I writing my logic properly?&lt;/p&gt;

&lt;h2 id=&quot;whats-wrong-with-cascaded-ifs&quot;&gt;What’s wrong with cascaded if’s&lt;/h2&gt;

&lt;p&gt;Okay, I’ll admit that I use cascaded if’s in my code all the time.  A classic
example of when I might use such a cascaded if is when decoding a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
return within an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basic logic is something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_ack&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_slaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;o_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;I don’t normally use a for
loop&lt;/a&gt;
for this logic, like I did in my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;crossbar code&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/79553b81c687f27ec8737be16179ea19186cb9e4/rtl/busmaster.v#L390-L395&quot;&gt;result would roughly be the same&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, consider what this look like once it was turned into
logic.  It would become something similar to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And so on …. as this would continue through processing eight separate slaves.&lt;/p&gt;

&lt;p&gt;Immediately I was concerned: long chains of logic like this &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;will impact the
clock rate this logic can run
at&lt;/a&gt;!  In
general, as part of design, you want to minimize your longest path in
order to achieve high speed.  This logic, however was anything but minimum!&lt;/p&gt;

&lt;p&gt;But could it be improved?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A series of unbalanced multiplexers&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mux-lopsided.svg&quot; width=&quot;240&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Looking over this logic tree, it was very much a one-sided tree, much like the
one shown in Fig. 1 at the right.&lt;/p&gt;

&lt;p&gt;In this figure, the inputs are at the bottom left, and the intersections 
within the tree represent the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiplexer&quot;&gt;multiplexers&lt;/a&gt;
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; placed into my design.  At the top,
then is the result of this logic.&lt;/p&gt;

&lt;p&gt;What if I could balance the tree?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2: A balanced multiplexer tree&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mux-balanced.svg&quot; width=&quot;240&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Were I able to balance the tree, I might then use fewer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiplexer&quot;&gt;multiplexers&lt;/a&gt;,
the decoding logic would get far simpler, and the longest path far shorter,
perhaps as short as Fig 2 on the left.&lt;/p&gt;

&lt;p&gt;Was it doable?&lt;/p&gt;

&lt;p&gt;In this example, I was issuing requests to one of several slaves, never to more
than one slave at a time, then listening for the requests in return.  So I got
to thinking, what if I also created an index to describe the one slave that
would respond?  In that fashion, the above code could be simplified to
something closer to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_ack&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, I could’ve written this output in a case statement–had I
known how many slaves.  An example of such a case statement for four slaves
might look something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slave_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Surely that would be better, right?&lt;/p&gt;

&lt;p&gt;It was time to run some tests.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-logic-test&quot;&gt;The basic logic test&lt;/h2&gt;

&lt;p&gt;Some time ago, I had the wonderful opportunity to meet
&lt;a href=&quot;https://twitter.com/jangray&quot;&gt;Jan Gray&lt;/a&gt;.  While you may
know me for advertising a resource constrained 32-bit
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;
that I call the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/jangray&quot;&gt;Jan&lt;/a&gt; has been known
for stuffing many, many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;s
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Much as I hate to admit it, his
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;s
are often much smaller than mine.  So, I asked him, how do you get your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;s
that small?  I found his answer very enlightening.&lt;/p&gt;

&lt;p&gt;He said, and I’m paraphrasing here, to start with the clock rate you want to
achieve.  Then start piecing small bits of logic together here and there, and
just run these tiny pieces of logic through the synthesizer–never the whole
design.  Look at what the synthesizer does with these tiny pieces, the number
of &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s
they create, their timing performance, and then optimize these small
pieces at the low level.  In this way, you can gradually work your way up to
the whole.&lt;/p&gt;

&lt;p&gt;No, that’s not a direct quote.  About a year and a half has passed since that
conversation, but his point remains: optimize your design piecemeal at the
very low level, and learn optimization there.  It will then be easier to create
a larger design from the lessons you’ve learned.&lt;/p&gt;

&lt;p&gt;So, let’s do that here!&lt;/p&gt;

&lt;p&gt;Imagine if you will that we have four sources of data, &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;.  Each
of these sources has a select line, &lt;code class=&quot;highlighter-rouge&quot;&gt;asel&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;dsel&lt;/code&gt;, telling us when
their respective data words, &lt;code class=&quot;highlighter-rouge&quot;&gt;adata&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;ddata&lt;/code&gt; are valid.  Our goal
will be to set our own output, &lt;code class=&quot;highlighter-rouge&quot;&gt;odata&lt;/code&gt;, to contain the data from the one valid
input data word.&lt;/p&gt;

&lt;p&gt;The code for this would look something like the one below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;asel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bsel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;adata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bsel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s run this through &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; and see what we
can learn.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;yosys
&lt;span class=&quot;gp&quot;&gt;yosys&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -sv test.v
&lt;span class=&quot;c&quot;&gt;# ... lots of stuff&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;yosys&amp;gt; &lt;/span&gt;synth_ice40 -top testa
&lt;span class=&quot;c&quot;&gt;# ... skipping even more stuff, then ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
2.42. Printing statistics.

&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; testa &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;

   Number of wires:                 73
   Number of wire bits:            228
   Number of public wires:           9
   Number of public wire bits:     164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     SB_LUT4                        96

2.43. Executing CHECK pass &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;obvious problems&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
checking module testa..
found and reported 0 problems.

yosys&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So we now know that this code would cost us 96
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s–essentially 3
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s
for every outgoing data bit.&lt;/p&gt;

&lt;p&gt;Can we do better?&lt;/p&gt;

&lt;p&gt;Suppose we instead had an &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;, which could indicate for us which of the
four inputs we wanted to set our output to.  Such an example might look like
this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;adata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
        &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time, &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; tells us that
we could calculate our outgoing data using only two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s
per output bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2.42. Printing statistics.
=== testb ===

   Number of wires:                 38
   Number of wire bits:            194
   Number of public wires:           6
   Number of public wire bits:     162
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     SB_LUT4                        64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you find yourself like me, scrounging for every
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;
you can in order to maintain your reputation as a log-logic designer, 32
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s
is a &lt;em&gt;big&lt;/em&gt; difference.  It might get even bigger if this sort of savings
could be replicated across the design.&lt;/p&gt;

&lt;h2 id=&quot;moving-to-the-cpu&quot;&gt;Moving to the CPU&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: The ZipCPU has four basic data calculation units: ALU, memory, divide and the (not yet built) FPU&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.svg&quot; width=&quot;360&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So I took a look within the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
As you may recall, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;  has a
couple of functional units.  There’s the &lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU, which can perform basic
arithmetic&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;memory unit, which can load values from memory and stores them back again&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divide
unit&lt;/a&gt;.  Not shown
in Fig. 3, is the fact that the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;external debugging
port&lt;/a&gt;
can also write values to the registers within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
I’ve also dreamed of creating a floating point unit, so let’s include that in
our discussion as well.&lt;/p&gt;

&lt;p&gt;Now, each of these three units can return a &lt;code class=&quot;highlighter-rouge&quot;&gt;valid&lt;/code&gt; signal, indicating that it
has an item to write to the register file, a &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; signal, containing the
data to be written, and similarly, many of the units can return an error signal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/zipcpu.v#L1759-L1769&quot;&gt;The logic, then, to determine when to write a value to a register looks
something like the following&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_illegal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_wR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Does this look at all like the logic cascade we were dealing with above?&lt;/p&gt;

&lt;p&gt;How about the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/zipcpu.v#L1793-L1799&quot;&gt;logic to determine which of the various values needs to be
written to the register file&lt;/a&gt;?
That looks like another logic cascade:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wr_gpreg_vl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_result&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alu_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, actually, it’s worse.  If you look at the code I referenced above,
you’ll notice that I calculated the value twice, once for &lt;code class=&quot;highlighter-rouge&quot;&gt;wr_gpreg_vl&lt;/code&gt; and
another time for &lt;code class=&quot;highlighter-rouge&quot;&gt;wr_spreg_vl&lt;/code&gt;.  I had to do this just to keep any updates to
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Status_register&quot;&gt;status register&lt;/a&gt;
off of the critical path.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/zipcpu.v#L1793-L1799&quot;&gt;This logic&lt;/a&gt;
doesn’t need to be so complex!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is very much an in order
processor.  Sure, it is
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined&lt;/a&gt;,
but by the time you get to this stage in the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;,
you already know what component will be producing a value.  Hence, I
could’ve  used an index instead.&lt;/p&gt;

&lt;p&gt;So let’s instead create a simple test, just to estimate what the impact
of this change will be.  Let’s say that this is our current logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testcpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dbgerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbgdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aludata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpudata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;dbgerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;dbgdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aludata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpudata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
        	&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aluv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aluerr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memerr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diverr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpuv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpuerr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpudata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbgdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if (aluv)
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aludata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you compare this to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/zipcpu.v#L1793-L1799&quot;&gt;actual logic above&lt;/a&gt;,
you should see some strong similarities.&lt;/p&gt;

&lt;p&gt;So let’s ask, how much logic does this use?  A quick run through
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; yields the following result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2.42. Printing statistics.

=== testcpu ===

   Number of wires:                117
   Number of wire bits:            303
   Number of public wires:          19
   Number of public wire bits:     205
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                131
     SB_LUT4                       131&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can we do better?&lt;/p&gt;

&lt;p&gt;Sure we can!  Let’s add in just a little bit of precursor logic.  In this
case, imagine we know we will have to write to the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
on the clock after &lt;code class=&quot;highlighter-rouge&quot;&gt;prealu&lt;/code&gt; is true, and likewise for the other values.
This means we’ll need to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; first from these &lt;code class=&quot;highlighter-rouge&quot;&gt;pre*&lt;/code&gt; values,
and so change our test case to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testcpui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prealu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;premem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prediv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dbgerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dbgdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aludata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpudata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prealu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;premem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prediv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;dbgerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aluerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpuerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dbgdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aludata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpudata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prealu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;premem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prediv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if (fpuv)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we have this three bit index, we can now create logic based around a case
statement to decode our results.  As before &lt;code class=&quot;highlighter-rouge&quot;&gt;ov&lt;/code&gt; will tell us when our output is
valid and hence when we need to write to the register file,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aluv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aluerr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diverr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpuv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpuerr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ov&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;odata&lt;/code&gt; will be the value we write to the register file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbgdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aludata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;3&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpudata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What kind of logic usage might this garner?&lt;/p&gt;

&lt;p&gt;Any guesses?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;=== testcpui ===

   Number of wires:                103
   Number of wire bits:            291
   Number of public wires:          26
   Number of public wire bits:     214
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                113
     SB_DFFSR                        3
     SB_LUT4                       110&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;110 &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s!
That’s a savings of nearly 20%!&lt;/p&gt;

&lt;p&gt;What about that &lt;code class=&quot;highlighter-rouge&quot;&gt;SB_DFFSR&lt;/code&gt; line?  That’s new.  Those three &lt;code class=&quot;highlighter-rouge&quot;&gt;SB_DFFSR&lt;/code&gt;s
are the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;
holding the three bits of our index.  In most all of my designs, I’ve been
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;
starved, not
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;
starved, so I’m not really worried about these.&lt;/p&gt;

&lt;h2 id=&quot;resource-measurement-is-not-just-for-ice40s&quot;&gt;Resource measurement is not just for iCE40s&lt;/h2&gt;

&lt;p&gt;Did you know you could measure resource usage for
&lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; chips,
&lt;a href=&quot;http://www.intel.com&quot;&gt;Intel&lt;/a&gt; chips, as well as
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; gates
using this approach with &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;If you wanted to do this for a &lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
design, for example, all you’d need to change is the
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_synth_ice40.html&quot;&gt;synth_ice40&lt;/a&gt; line to a
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_synth_xilinx.html&quot;&gt;synth_xilinx&lt;/a&gt; line.
Indeed, in my experience, you’ll also get a much faster result using
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; than using any of the
Vendor tools–&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;, &lt;a href=&quot;https://www.xilinx.com/products/design-tools/ise-design-suite.html&quot;&gt;ISE&lt;/a&gt;,
or even &lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;.
Feel free to check me out on this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ yosys
yosys&amp;gt; read -sv test.v
yosys&amp;gt; synth_xilinx -top testcpu
# ... 
=== testcpu ===

   Number of wires:                116
   Number of wire bits:            302
   Number of public wires:          19
   Number of public wire bits:     205
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     LUT3                           32
     LUT5                            1
     LUT6                           65
     MUXF7                          32&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So our basic design would require 65 6-input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s, one 5-input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;, and 32 3-input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s.  The 32 MUXF7s are
needed to combine 64 of those 6-input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s
together in order to make 32 7-input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;If you now swap design approaches to use the index, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;
usage drops dramatically:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;=== testcpui ===

   Number of wires:                 67
   Number of wire bits:            257
   Number of public wires:          26
   Number of public wire bits:     214
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     FDRE                            3
     LUT2                            5
     LUT3                            1
     LUT4                            1
     LUT5                           16
     LUT6                           52
     MUXF7                           1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you figure that the MUXF7s are really there for free, then we dropped
our logic needs from 98 6-input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s
down to 78–again this is about a 20% improvement or so.&lt;/p&gt;

&lt;p&gt;Ever had to try to answer the question, “how complex is your design?” and the
questioner wants your answer in gates?  We can do that too!  In this case,
just run &lt;a href=&quot;http://www.clifford.at/yosys/cmd_dump.html&quot;&gt;synth&lt;/a&gt;,
a generic synthesis routine, followed by
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_abc.html&quot;&gt;abc -g cmos2&lt;/a&gt;,
to map your design to traditional CMOS gates, and then
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_abc.html&quot;&gt;stat&lt;/a&gt;
to report the results.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ yosys
yosys&amp;gt; read -sv test.v
yosys&amp;gt; synth
yosys&amp;gt; abc -g cmos2
yosys&amp;gt; stat
=== testcpu ===

   Number of wires:                729
   Number of wire bits:            915
   Number of public wires:          19
   Number of public wire bits:     205
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_NAND_                       293
     $_NOR_                         70
     $_NOT_                         70&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is, our pre-optimized design will require 293 NAND gates, 70 NOR gates,
and another 70 NOT gates.&lt;/p&gt;

&lt;p&gt;Similarly, after our optimization, you’d get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;=== testcpui ===

   Number of wires:                856
   Number of wire bits:           1046
   Number of public wires:          26
   Number of public wire bits:     214
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                396
     $_DFF_P_                        3
     $_NAND_                       238
     $_NOR_                         80
     $_NOT_                         75&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we don’t count the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;,
then you can see that we’ve dropped from 433 gates down to 393.  This time the
savings isn’t nearly as much, but 10% fewer gates translates to area in the
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;
business, and lower area translates to lower cost.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Perhaps you’ve picked up on a couple of points from this discussion.  First,
if you are concerned about &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum area and minimum
logic&lt;/a&gt;,
then it’s important to know a bit about what’s happening under the hood.
Second, that &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_dump.html&quot;&gt;dump&lt;/a&gt;
command was what tipped me off to what was going on under the hood.
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt; also supports a 
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_show.html&quot;&gt;show&lt;/a&gt; command
for those who would rather view this information graphically.  Third,
you can compare various design techniques in seconds when using
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;.  It’s really quite a valuable lesson.&lt;/p&gt;

&lt;p&gt;I’ve just rewritten how
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
handles its address decoding as a result.  While I’m still working through some
of the pains of that rewrite, it turns out that it wasn’t all that hard to do.&lt;/p&gt;

&lt;p&gt;Adjusting how the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
determines whether or not to write back, and which
value to write back to the register file is likely to be next.  Perhaps you
might want to consider at this point, what
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal properties&lt;/a&gt;
could be used in a switch like this, and how easy (or hard) would it be
to convince yourself that the updated code still worked as before?&lt;/p&gt;

&lt;p&gt;I should also mention, there is another competing theory out there espoused by
the major vendors.  This theory is that you should build your design, count up
the gates you need, and buy your chip.  If your algorithm doesn’t fit in the
chip, then you need to buy a bigger chip and possibly even build a bigger board.
This also applies to much of the vendor supplied IP.  The major vendors have no 
incentive to build low-logic designs, if their low logic designs would keep you
from buying more of their product.&lt;/p&gt;

&lt;p&gt;Think about it.&lt;/p&gt;

&lt;p&gt;Oh, one more thing, remember that bug that sent me looking into the
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_dump.html&quot;&gt;dump&lt;/a&gt; in the
first place?  Yeah, that one.  It was my own fault.  The problem was just
obscured by the for loop I was using, and the fact that &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;for loops in Verilog
don’t work like they do in
C++&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;It is naught, it is naught, saith the buyer: but when he is gone his way, then he boasteth. (Prov 20:14)&lt;/em&gt;</description>
        <pubDate>Thu, 28 Mar 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/03/28/return-decoding.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/03/28/return-decoding.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Building a universal QSPI flash controller</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Typical flash memory chip I/O&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-io-pins.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;Flash&lt;/a&gt; is an important component
in any &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design, and a vital component in any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core CPU design&lt;/a&gt;).
First, many &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
load their configurations on power up from
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;.  Thus, if you want your
configuration to load from non-volatile memory and without using the
&lt;a href=&quot;https://en.wikipedia.org/wiki/JTAG&quot;&gt;JTAG&lt;/a&gt;,
placing your design into the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
memory is often a requirement.  The good news is that this means most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
development boards already include a
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; memory for configuration.  The
even better news is that &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chips
are cheap enough that there’s usually plenty of space available for user
applications in addition to the configuration memory.&lt;/p&gt;

&lt;p&gt;Just think through those possibilities: what would you do in your design
if you had non-volatile memory available to you?  Even better, what if you
had 8-16MB of non-volatile memory available?&lt;/p&gt;

&lt;p&gt;Now, before you get too excited, be aware: there’s usually a beginner out there
who thinks that &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; can be treated
like normal memory.  No, I’m sorry, it can’t.  While  you can read from
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; fairly quickly, writing to
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; is more problematic.  If you want
to change something in &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;, you have
the choice of erasing the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;–that
is to turn bits to ones and hence the bytes to &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;hff&lt;/code&gt;, and then programming the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;,
also known as turning bits to zeros.  Of these two, the erase is the most
problematic.  Depending on the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;,
you might only be able to erase 64kB blocks at a time.  (Yes, some
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chips allow 2kB sub-sector erase
operations.)  Worse, a sector erase command will take anywhere between a half
second and two seconds.  It is slow.&lt;/p&gt;

&lt;p&gt;For these reasons, &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; memory make a good ROM addition to your design.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;I’ve written before&lt;/a&gt;, I’ve
now created several &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; designs in
support of my own &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; development.&lt;/p&gt;

&lt;p&gt;Today’s story, though, starts with the &lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty
board&lt;/a&gt;,
now sold by &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; under the name &lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty
A7&lt;/a&gt;.
This is a wonderful starter board for anyone who wants to try building their
own embedded &lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;: it has
a decent sized
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;,
a 100Mbps &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;ethernet port&lt;/a&gt;, a couple of
switches, buttons, LEDs, some &lt;em&gt;color&lt;/em&gt; LEDs, four PMod ports and … 16MB of
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; memory.&lt;/p&gt;

&lt;p&gt;When I first built &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;my own design&lt;/a&gt; for the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;,
&lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; shipped it with a &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip built by &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;.  Sadly, my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/6fa93fb810c9e091f6608d58f7b3887870b3747f/rtl/wbqspiflash.v&quot;&gt;original flash
controller&lt;/a&gt; couldn’t handle this
&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
device.  Why?  Because for a common standard such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI
(QSPI)&lt;/a&gt;,
the &lt;a href=&quot;https://www.cypress.com/spansion-redirect&quot;&gt;Spansion&lt;/a&gt; and
&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt; chips were just too different
for my controller.  Well, that and I originally wanted to build a 200MHz
design, but that’s a different story for a different day.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; implementation had the problem
that it was difficult to reset.  There were modes the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; could get into where, if you
reloaded your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design, the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; might no longer
respond the way you thought it should.  Worse,
&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;’s design offered settings under which the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; might power up into a state
unknown to the design.  These extra modes were “features”, designed to help you
achieve high speed operation immediately on start up.  To me, however, they
were liabilities, since it became that much harder to know if &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/6fa93fb810c9e091f6608d58f7b3887870b3747f/rtl/eqspiflash.v&quot;&gt;my
controller&lt;/a&gt;
would work.  I complained about this, and sometime later
&lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; modified the board to use a
different &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, this only happened after I finally had a design that worked with
the &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; device.&lt;/p&gt;

&lt;p&gt;Worse, I only discovered that &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;
had swapped &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chips when &lt;a href=&quot;https://github.com/ZipCPU/openarty/issues/1&quot;&gt;someone
tried to use&lt;/a&gt; my &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty
design&lt;/a&gt;, only to discover the new
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; was incompatible with the old
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/6fa93fb810c9e091f6608d58f7b3887870b3747f/rtl/eqspiflash.v&quot;&gt;controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was now time to build a &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new flash
controller&lt;/a&gt;.
Again.  The question before me, though, was whether it might be possible to
build a single &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;controller&lt;/a&gt;
that I could re-use with any &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
device I came across.&lt;/p&gt;

&lt;p&gt;This blog article is about the design and verification of that &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new Quad-SPI
flash
controller&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;No, I do not believe in top-down, requirements driven development.  As &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;we
discussed in the last article, this flash controller is not the first flash
controller I’ve ever built&lt;/a&gt;.  Reality seems to dictate that &lt;a href=&quot;https://en.wikipedia.org/wiki/Spiral_model&quot;&gt;spiral
development&lt;/a&gt;, or other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Iterative_and_incremental_development&quot;&gt;iterative development&lt;/a&gt; approaches work better.
Indeed, I’m slowly becoming a believer in &lt;a href=&quot;https://en.wikipedia.org/wiki/Iterative_and_incremental_development&quot;&gt;incremental design&lt;/a&gt; approaches.&lt;/p&gt;

&lt;p&gt;Still, it makes sense to start the story off with a discussion of what a
“better” &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; controller would look like.  What should it do, and what
functions should it support?&lt;/p&gt;

&lt;p&gt;First and foremost, any &lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;flash controller&lt;/a&gt;
must be able to read from the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash
memory&lt;/a&gt;.
This is the basic requirement, without which we will fail.&lt;/p&gt;

&lt;p&gt;When &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;we last built a SPI flash
controller&lt;/a&gt;, it
could read one word every 64 (8+24+32) clock cycles, as shown in
Fig. 2 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: Basic SPI read transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/spi-bare.svg&quot;&gt;&lt;img src=&quot;/img/spi-bare.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the other hand, if you want to build a &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; controller that stands out
when compared to other controllers, a one-size-fits most controller, or
even, as I’ve started to call this, a &lt;em&gt;Universal QSPI flash controller&lt;/em&gt;,
then you need to do more than just read values from the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;: you need to
read them &lt;em&gt;fast&lt;/em&gt;.  How fast?  As fast as the device will support a read
using logic synchronous to the rest of the design.&lt;/p&gt;

&lt;p&gt;This will force us not only into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; territory, where &lt;em&gt;four&lt;/em&gt;
data lines are strapped together, but it’s also going to have us looking
at whether or not we can keep the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
clock running at the same
rate as the system clock rate.  For my &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty design&lt;/a&gt;, this means I am going
want to run my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; at a 100MHz clock rate–twice as fast as most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
controllers.  Since most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; devices support 108Mhz, I figured I should be good here.  Hence,
this was my second criteria: running the in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
mode, with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; line
running at the system clock rate.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3: Basic QSPI read transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-bare.svg&quot;&gt;&lt;img src=&quot;/img/qspi-bare.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This gets us down to 28 (8+6+6+8) &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock cycles per read.&lt;/p&gt;

&lt;p&gt;If you are working to achieve speed, however, this still isn’t fast enough.&lt;/p&gt;

&lt;p&gt;Most &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; devices offer a mode where, after one &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; command you can leave
the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; in some sort of
eXecute-In-Place (XIP) mode.  In this mode, the next
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; command starts immediately
by sending a 24-bit address, then after some amount of wait, you can read
your data.  This will save us 8
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; clock cycles by not needing to
send a new &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; read command.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: QSPI transaction, starting from XIP mode&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-xip.svg&quot;&gt;&lt;img src=&quot;/img/qspi-xip.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’re now at 20 (6+6+8) &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; cycles per read.&lt;/p&gt;

&lt;p&gt;This still isn’t fast enough for me: I wanted to build a
&lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/qflexpress.v&quot;&gt;flash controller&lt;/a&gt;
that can handle burst reads.&lt;/p&gt;

&lt;p&gt;By “burst reads”, I mean I wanted my
&lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/qflexpress.v&quot;&gt;flash controller&lt;/a&gt;
to be able to read multiple words in the same transaction.  The first word
will require sending an address and several
dummy cycles, before using up eight clocks for the data.  If we want to keep
reading, we can then arrange for the second and subsequent words to take
no more than 8 &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
additional clocks each.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: QSPI transaction, continuing the last transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-pipe.svg&quot;&gt;&lt;img src=&quot;/img/qspi-pipe.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This brings us to 12+8N (6+6+8N) &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; cycles per N reads,
asymptoting at 8-cycles per read.&lt;/p&gt;

&lt;p&gt;Now that’s a &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;fast QSPI flash controller&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Yes, there is a faster mode supported by some &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chips where
the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip returns its data on both edges of the clock.  We’ll save the
investigation of those chips and that mode for a later time.&lt;/p&gt;

&lt;p&gt;But what about programming the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;?  Sure, I could use the vendor tools to program my
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;, but … I like to have as
much control over my design as I can get.  Therefore, I want an option whereby
I can erase and program my
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; device via &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;my own
controller&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6: Issuing an arbitrary 8-bit command&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-8bcmd.svg&quot;&gt;&lt;img src=&quot;/img/qspi-8bcmd.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In addition, modern &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;Flash&lt;/a&gt; devices
support many features beyond just erasing and
programming their memory region.  Many of them also support an identification
code, whereby you can determine the make and size of your device.  They
might also support “One-Time-Programmable” memory regions–allowing designers
to place special, often build-specific cryptographic data into the devices
they then send to customers.&lt;/p&gt;

&lt;p&gt;Supporting all of these features would be nice, but only if they didn’t cumber
the basic read capability of the controller.  So let’s make this capability an
option, and then work to make it a cheap option that doesn’t expand our
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;controller&lt;/a&gt;
by all that much.&lt;/p&gt;

&lt;p&gt;As we’ll see later, the read-manufacturer ID command support didn’t turn out
to be an optional feature.  Indeed, I needed to use it to get the design
working in the first place–but more on that when we get there.&lt;/p&gt;

&lt;p&gt;Ok, how have we done?  Have we finally specified the perfect
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;?
Is this finally everything we need from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;I thought so at first.  So, after building it, I was quite pleased with
my work.&lt;/p&gt;

&lt;p&gt;Then my requirements started falling apart.&lt;/p&gt;

&lt;p&gt;Most &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; designs, you see, require that the
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; startup sequence be able
to control the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; I/O pins
independent of the design.  The unfortunate result is that you can only access
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
serial clock) pin through a special &lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug470_7Series_Config.pdf&quot;&gt;STARTUPE2
primitive&lt;/a&gt;.
Should you need to use this primitive, you’ll lose your access to the &lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug471_7Series_SelectIO.pdf&quot;&gt;ODDR
primitive&lt;/a&gt;
necessary to control the clock.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
is an unusual development board, in a good way, because it doesn’t have this
problem.  &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; &lt;a href=&quot;https://reference.digilentinc.com/reference/programmable-logic/arty-a7/reference-manual&quot;&gt;created a second I/O pin
which they also tied to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;
pin&lt;/a&gt;.
Hence, we can still get system clock rate I/O (100MHz) from our &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications/&quot;&gt;Nexys Video board&lt;/a&gt;
wasn’t so lucky.  Neither was my
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users/&quot;&gt;Basys3 board&lt;/a&gt;.
Both of these boards require that CCK line (configuration clock) going to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; pin must go through the
&lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug470_7Series_Config.pdf&quot;&gt;STARTUPE2 primitive&lt;/a&gt;.
Hence, these design will need to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;50MHz&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Strangely, that wasn’t my first problem.&lt;/p&gt;

&lt;p&gt;The first problem I realized in my brand new, awesome &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
design was when someone contacted me to see if they could use my older
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; controller in an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s!!?!&lt;/em&gt;
That changes things a lot!
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s tend to run at
higher clock rates, whereas most
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; devices max out at around
108MHz.  Worse, an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; chip
may (or may not) have an ODDR I/O controller in the first place.  To even dream
of &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; device support,
I really needed an arbitrary clock divider.&lt;/p&gt;

&lt;p&gt;Since I don’t normally build
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;
designs, I’ll be up front: this new design doesn’t (officially) support
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s, although I think
it could easily be modified to do so.  In particular, I’ve discovered several
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; devices have different numbers
of “dummy” cycles.  Were I to rebuild this design for an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; part, I’d want to
support a varying number of dummy  cycles.  I might also want to support a
run-time adjustable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
clock speed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7: Using a logic generated SCK at half speed&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-halfck.svg&quot;&gt;&lt;img src=&quot;/img/qspi-halfck.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Still, I added a parameterizable clock divider to my “universal” controller.
If nothing else, this would solve the problem with my &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications/&quot;&gt;Nexys
Video&lt;/a&gt; and
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users/&quot;&gt;Basys3&lt;/a&gt; boards.&lt;/p&gt;

&lt;p&gt;That wasn’t my last problem either.&lt;/p&gt;

&lt;p&gt;As it turns out, if you want to operate using DDR I/O modes, you may need to
register your outputs and then your inputs for better performance.  This
places a delay between when the logic is valid within your design, and a later
time when the value comes back from the pin.  This delay is non-zero.  On a
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; chip, there’s a rough 3-clock delay.  (I’m
still investigating whether or not I can drop it two 2-clocks.)
&lt;a href=&quot;https://www.intel.com&quot;&gt;Intel chips&lt;/a&gt; can do this with a 2-clock delay.  In
other words, the delay needs to be parameterizable.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8: Input, marked as INPT below, is delayed 3-clocks from when the output (OUT) leaves our controller &lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-xdelay.svg&quot;&gt;&lt;img src=&quot;/img/qspi-xdelay.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9: Franken IP?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-frankenip.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This was when I started wondering if my requirements had diverged so much
that I was now building a “FrankenIP”.  Nevertheless, I pressed on, being
certain that somewhere, within this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Universal IP
core&lt;/a&gt;
that there was a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
flash controller trying to break free.&lt;/p&gt;

&lt;p&gt;Did I mention that, on top of all these other requirements I wanted a controller
that only had a minimum amount of logic?  This is going to dictate, below,
that all of these options we are working with will need to be created using
&lt;code class=&quot;highlighter-rouge&quot;&gt;parameter&lt;/code&gt;s and generate blocks, but that’s still easy enough to handle.&lt;/p&gt;

&lt;p&gt;The difficult part is going to be verifying that all of these various
configurations work, while only having the hardware to test a couple of them.&lt;/p&gt;

&lt;p&gt;Before leaving this section, let’s summarize our choices in terms of
latency and throughput in Fig. 10 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10: Predicted access latency, excluding bus latencies&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-latency.png&quot; alt=&quot;&quot; width=&quot;722&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The top of this chart shows the number of clocks required for each part of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
interaction.  The basic transaction costs 8 clocks for the command
word, followed by another 6 clocks to send 24-bits of address 4-bits at a time.
After this point, the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip might require between 1 and 10 “dummy cycles”.  This is an annoying
requirement necessary to support &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt; flash chips.  &lt;a href=&quot;https://www.winbond.com/hq/?_locale=en&quot;&gt;Winbond&lt;/a&gt; and
&lt;a href=&quot;https://www.cypress.com/spansion-redirect&quot;&gt;Spansion&lt;/a&gt; flash chips have a fixed number of dummy cycles: six–so we’ll use that
going forward for our calculations.  Following the dummy cycles, it
takes 8 clocks to transfer one 32-bit word of information.&lt;/p&gt;

&lt;p&gt;These are the numbers we’re dealing with.&lt;/p&gt;

&lt;p&gt;Now for the controller options.  Our last controller, operating in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; mode
alone, took 64 clock cycles to transfer a word.  Switching to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI&lt;/a&gt;
alone brings us down to 28 cycles.  Using the eXecute In Place mode allows
us to then skip the eight clocks of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
I/O command, bringing our access time down another 8 cycles to 20 cycles.  The
next request, however, will require another 20 cycles.  On the other hand, if
we can string multiple requests for sequential addresses together into the
same request, using the pipelined mode of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
we can drop our access time from &lt;code class=&quot;highlighter-rouge&quot;&gt;20N&lt;/code&gt; clocks for &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; values down to &lt;code class=&quot;highlighter-rouge&quot;&gt;12+8N&lt;/code&gt;
clock cycles.&lt;/p&gt;

&lt;p&gt;This is about as fast as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
controller will get.&lt;/p&gt;

&lt;p&gt;If you have to use the CCK port of a &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
you’re clock rate will be
slowed down by at least 2x.  I placed another clock in the chart above, to
allow the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; to go low after the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line becomes active.  Then, if you are
using the registered &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug471_7Series_SelectIO.pdf&quot;&gt;DDR primitives&lt;/a&gt;,
you’ll be required to slow down another three clocks.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;“Universal” QSPI flash
core&lt;/a&gt;
can therefore provide performance somewhere between
&lt;code class=&quot;highlighter-rouge&quot;&gt;12+8N&lt;/code&gt; clocks and &lt;code class=&quot;highlighter-rouge&quot;&gt;28+16N&lt;/code&gt; clocks per word, depending upon how it is set up,
how your board is designed, and the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip on that board.&lt;/p&gt;

&lt;h2 id=&quot;timing-control-loop&quot;&gt;Timing control loop&lt;/h2&gt;

&lt;p&gt;Let’s start out with our &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;timing
control&lt;/a&gt;, because
the &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;timing control&lt;/a&gt;
signals are going to be pervasive throughout the rest of
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;the core&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11: CSn, and SCK&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-sckck.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In our highest speed configuration, we’re going to want to handle an &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;
signal equal to our controllers clock rate.  Such a signal might generate
an output looking like Fig. 11 on the right.  In this figure, the &lt;code class=&quot;highlighter-rouge&quot;&gt;w_qspi_sck&lt;/code&gt;
control signal is being used to control the final &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; output.  (I’ll
also confess, these are top-level signal names.  Within
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;the core&lt;/a&gt;,
I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; to reflect the signal shown at the right labeled
&lt;code class=&quot;highlighter-rouge&quot;&gt;w_qspi_sck&lt;/code&gt;.  In the non-ODDR modes, there’s no difference between these
two signals, only in the ODDR mode.)&lt;/p&gt;

&lt;p&gt;Of course, we’ll want to be able to slow this clock down as well, so let’s
create several signals from a basic clock divider circuit that we can use
to control our logic below in the presence of a slower clock.  These
extra signals are shown in Fig. 12 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12: Clock control signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-ckstb.svg&quot;&gt;&lt;img src=&quot;/img/qspi-ckstb.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; signals are part of the basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
protocol.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;
is inactive (high), then the other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;SPI&lt;/a&gt;
signals, primarily clock and data, are allowed to be anything so that they
can be multiplexed together in order to control several chips.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;
signal controls the basic data transfer, and so we’ll focus on making sure
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;SPI&lt;/a&gt;
data values only ever change when &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; falls.&lt;/p&gt;

&lt;p&gt;The other clock control signals are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt;: True when it’s time to move to the next set of output values.&lt;/p&gt;

    &lt;p&gt;In a DDR output mode, this will be true on every cycle during a transaction.
If we are dividing the clock by two, this will be true every other cycle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ckneg&lt;/code&gt;: True when it’s time to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; signal low&lt;/p&gt;

    &lt;p&gt;Since we’ll only set &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; low at the beginning of a cycle, this signal is
just a pseudonym for the &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt; signal above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ckpos&lt;/code&gt;: True when it’s time to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; signal high&lt;/p&gt;

    &lt;p&gt;This will take place mid-cycle.&lt;/p&gt;

    &lt;p&gt;Of course, if we are in a DDR output mode, that is with &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; toggling at the
system clock rate, then this doesn’t nearly have as much meaning, so we’ll
leave it high.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ckpre&lt;/code&gt;: Some of the logic below will require an extra clock cycle to prepare
for the next transition.  This is the purpose of &lt;code class=&quot;highlighter-rouge&quot;&gt;ckpre&lt;/code&gt;.  It is designed
so as to be true on the clock cycle prior to &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code within this section is parameterized by several pieces.  The first is
the clock division parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CLKDIV&lt;/code&gt;.  We’ll use this to control a clock
divider in a moment.  The second parameter, really a &lt;code class=&quot;highlighter-rouge&quot;&gt;localparam&lt;/code&gt;, is the
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DDR&lt;/code&gt; parameter.  We’ll set this any time &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CLKDIV == 0&lt;/code&gt;, and use
it to indicate that we are driving the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; line at our full system clock rate,
using an &lt;code class=&quot;highlighter-rouge&quot;&gt;ODDR&lt;/code&gt; output primitive.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CLKDIV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the case where &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; is true, there’s only ever one clock per
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; cycle.  Hence, we’ll set all of these values true on every clock cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckneg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckpre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we are dividing our clock by two, such as in order to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;CCK&lt;/code&gt; port
through a &lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug470_7Series_Config.pdf&quot;&gt;STARTUPE2 primitive&lt;/a&gt;,
then we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CLKDIV&lt;/code&gt; to 1.  We’ll also need to toggle these
signals–but only while the port is active.  That way we can respond
to a request no matter what phase of the counter we are in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CLKDIV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKSTB_ONE&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckpre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ckneg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the sake of brevity, I’m going to skip the discussion of what it takes
to divide the clock down slower then a factor of two.  Fig. 12 above should
show you what these signals need to look like in that case.&lt;/p&gt;

&lt;p&gt;Before leaving this section, I’d like to draw your attention to the presence
of the three generate blocks for this timing: one for &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; when the clock
divider is set to zero, one for when the clock divisions is set to one, and one
more for all other cases.  That means that, when we get to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this core&lt;/a&gt;,
we’ll have to make certain that our &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;
work gets applied to each of these three blocks separately.&lt;/p&gt;

&lt;h2 id=&quot;reading-a-word&quot;&gt;Reading a word&lt;/h2&gt;

&lt;p&gt;Now that we have the clock divider out of the way, we can turn our attention
to the fun part: building the actual &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
logic.&lt;/p&gt;

&lt;p&gt;If you ever find yourself needing to build your own controller, whether it be
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
or whatever protocol, the way to do it is usually
straight forward: Find the specification sheet for the device you wish
to interact with, search through the sheet for the timing diagram
illustrating the interaction or interactions you wish to implement,
and then build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;state machine&lt;/a&gt;
whose &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
matches that diagram.&lt;/p&gt;

&lt;p&gt;Building a &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; controller
is no different.&lt;/p&gt;

&lt;p&gt;In this case, we’ll be implementing the QUAD I/O READ function.  If you look
this function up in the data sheet for your device, you’ll find two
sets of protocols.  The first describes how to get into the QUAD I/O XIP
mode.  The second I/O function shows a timing diagram describing the
QUAD I/O XIP mode we’ll be using.&lt;/p&gt;

&lt;p&gt;For example, here’s what the timing diagram looks like for a
&lt;a href=&quot;https://www.cypress.com/file/196861/download&quot;&gt;Spansion device&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13: Spansion Flash timing diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-spansion.png&quot;&gt;&lt;img src=&quot;/img/qspi-spansion.png&quot; alt=&quot;&quot; width=&quot;746&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s another one describing how our operation needs to work for a &lt;a href=&quot;https://www.pjrc.com/store/w25q64fv.pdf&quot;&gt;Winbond
device&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14: Winbond Flash timing diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-winbind.png&quot;&gt;&lt;img src=&quot;/img/qspi-winbond.png&quot; alt=&quot;&quot; width=&quot;799&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The data sheet for the &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt; flash that I have doesn’t show the Quad I/O
read from XIP mode, but it does show the Quad I/O read starting with the
8-bit command.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15: Micron Quad I/O Read, starting from the SPI command&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-micron.png&quot;&gt;&lt;img src=&quot;/img/qspi-micron.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll need to use this mode to get into the XIP mode, but more on that in a bit.
For now, let’s just assume we are in the XIP mode where we can start
immediately by sending the address to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all cases, we’ll need to go through several steps, and we’ll need to
control the chip select (negative logic), &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt;, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; clock signal
sometimes called &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt;, and the four outgoing data wires,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_dat&lt;/code&gt;.  Since these wires will eventually be bi-directional at the top
level, we’ll use a third signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_mod&lt;/code&gt;, to control the final I/O driver.
We’ll also need to read the data lines from the
device, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat&lt;/code&gt;, once it starts returning information to us.&lt;/p&gt;

&lt;p&gt;That means that we’ll need to support 3-I/O modes using &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_mod&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI = 2&#39;b00&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;DAT[0]&lt;/code&gt; is an output, &lt;code class=&quot;highlighter-rouge&quot;&gt;DAT[1]&lt;/code&gt; is an input,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAT[3:2]&lt;/code&gt; are both set high.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_WRITE = 2&#39;b10&lt;/code&gt;: All data wires, &lt;code class=&quot;highlighter-rouge&quot;&gt;DAT[3:0]&lt;/code&gt;, are &lt;em&gt;outputs&lt;/em&gt; of our
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ  = 2&#39;b11&lt;/code&gt;: All data wires, &lt;code class=&quot;highlighter-rouge&quot;&gt;DAT[3:0]&lt;/code&gt;, are &lt;em&gt;inputs&lt;/em&gt; into our
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 	&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 	&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 	&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How the design interacts with the devices I/O controllers is typically beyond
the scope of any of my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; designs, although it is required
to actually implement them within any hardware.  At one time, I would specify
specific I/O connections in the toplevel:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_qspi_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;bz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_qspi_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;bz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;bz&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve stopped setting my I/O pins in this manner, however.&lt;/p&gt;

&lt;p&gt;The primary reason for this is that
&lt;a href=&quot;https://github.com/YosysHQ/arachne-pnr&quot;&gt;Arachne-PNR&lt;/a&gt;
would never guarantee that the placement of this final piece of
combinatorial logic would be anywhere near the pin.  As a result,
I’ve now counseled several individuals who have declared
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;
broken when their design gets sufficiently large that the
I/O logic no longer gets placed adjacent to their pins.&lt;/p&gt;

&lt;p&gt;While I’m told that this is fixed in
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;NextPNR&lt;/a&gt;, I haven’t (yet) taken the time
to go back and verify this.  Instead, I’ve gotten used to configuring the
vendor specific I/O buffers to handle this.  Further, since I’m already using
one for the ODDR &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; pin, it makes sense to use the same thing for all of the
pins–if for no other reason than to keep the timing matching throughout the
design.&lt;/p&gt;

&lt;p&gt;Hence our design will need to control &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_dat[3:0]&lt;/code&gt;.  We’ll also control an intermediate value, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_mod&lt;/code&gt;
to tell an external I/O controller how we want the I/O handled.  Similarly,
we’ll be reading from &lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat[3:0]&lt;/code&gt;, the data lines that come from that
external I/O controller.&lt;/p&gt;

&lt;p&gt;So let’s go back to how &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this
controller&lt;/a&gt;
will need to control these various wires.&lt;/p&gt;

&lt;p&gt;The basic logic is that upon any
bus request,
we will need to work our way through a sequence of steps.&lt;/p&gt;

&lt;p&gt;Just like with the state machine examples in
&lt;a href=&quot;/tutorial/&quot;&gt;my tutorial&lt;/a&gt;, I often find that using a counter
to control the steps in the timing diagram feels the most natural–especially
in a particularly long sequence such as this one.  In this case, the counter
idles at zero, and starts counting down immediately following a bus request.
Once the counter reaches zero, the interface will return to idle and we should
be producing our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone (WB)
acknowledgment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see this counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt;, and how it relates to our design in Fig. 16
below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16: XIP timing diagram, including numbered states&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-xip-ctr.svg&quot;&gt;&lt;img src=&quot;/img/qspi-xip-ctr.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This one counter controls everything, so let’s walk through the steps of
how it works.&lt;/p&gt;

&lt;p&gt;Our logic starts with a bus request,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where we set our counter to &lt;code class=&quot;highlighter-rouge&quot;&gt;14&lt;/code&gt; plus the number of dummy cycles,
&lt;code class=&quot;highlighter-rouge&quot;&gt;NDUMMY&lt;/code&gt;.  This number of dummy cycles also includes two cycles for
the mode bits, &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;ha&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDUMMY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note, above, that if we are not running in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, that mode that
runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; at the system clock speed, then we take an extra step to lower
the clock line after activating the chip select.  This will cost us one extra
clock, and so this first value of &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; depends upon &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; in addition
to &lt;code class=&quot;highlighter-rouge&quot;&gt;NDUMMY&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 17: XIP timing diagram, this time at two clocks per SCK&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-halfck-ctr&quot;&gt;&lt;img src=&quot;/img/qspi-halfck-ctr.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 18: CSn, and SCK&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-sckck.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the other hand, if we are running in ODDR mode, then it feels like a waste
to spend a whole cycle to lower &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;, so both &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; will drop
together, as shown in Fig. 18 on the right.&lt;/p&gt;

&lt;p&gt;Once set, then on any following step during this operation, we’ll decrement
our counter until it reaches zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once it reaches zero, we are idle.&lt;/p&gt;

&lt;p&gt;Now that we have this counter, we can hang all of the rest of our logic
upon it.&lt;/p&gt;

&lt;p&gt;For example, here’s the outgoing chip select bit.  Remember, this is an active
low bit.  On any bus request, we’ll clear this bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then at the end of every clock interval, we’ll check the &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; to
know if this operation is over.  Once the counter gets to one, we’ll set
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; again to indicate the end of the operation on the next cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
clock is a bit more difficult, particularly because of our requirements
creep.  If we are running in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, where the outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; is
determined by an &lt;code class=&quot;highlighter-rouge&quot;&gt;ODDR&lt;/code&gt; I/O primitive, then we’ll output a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt; anytime
we want the clock to toggle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look closely, you might argue that this &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; signal is
identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; signal.  At this most basic mode, and only if
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; is true, then these two signals could share the same logic.&lt;/p&gt;

&lt;p&gt;I should point out that I ended up using &lt;code class=&quot;highlighter-rouge&quot;&gt;parameters&lt;/code&gt; quite extensively in this
core.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; isn’t the only one.  I did this for reasons of code
optimization.  By using &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt;, the synthesis tool can quickly recognize
the &lt;code class=&quot;highlighter-rouge&quot;&gt;if (OPT_ODDR)&lt;/code&gt; statement, and that the else following will never get
used.  Hence, the synthesis tool will remove the rest of this nested if.
Similarly, if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; isn’t true, this part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; will get removed
and not count against the logic used by this core.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; isn’t true then things get just a little more interesting.&lt;/p&gt;

&lt;p&gt;As per the &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; protocol we are following, the clock idles at &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt; over the
wire, and so it idles at &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt; in non-ODDR mode where we
are directly controlling the over-the-wire interface.  On the other hand, if
we are running in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, we are only controlling whether the clock
&lt;em&gt;toggles&lt;/em&gt;.  Hence in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, the clock pin idles at &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b0&lt;/code&gt;.
(See Figs. 11 and 12 for clarification)&lt;/p&gt;

&lt;p&gt;Now, if the clock is low, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ckpos&lt;/code&gt; tells us that it is time to raise it,
then set it high.  This will occur in the middle of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;state machine&lt;/a&gt;
interval, and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; isn’t set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if our clock divider tells us it is time to lower the clock, that
is if &lt;code class=&quot;highlighter-rouge&quot;&gt;ckneg&lt;/code&gt; is true, then lower the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; output–but only if our
SPI cycle isn’t finished.  Notice the check here, as above, for whether are or
are not still within any I/O operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckneg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we’ve set the chip select and the clock, we can turn our attention
to the data bits.  These get set on any bus request, and
then shifted at the end of every clock interval.  Ideally, that would mean
we’d set this anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb &amp;amp;&amp;amp; !o_wb_stall&lt;/code&gt;.  However, I’ve become somewhat
of a stickler for low-logic solutions, and the reality is that these bits are
don’t cares if &lt;code class=&quot;highlighter-rouge&quot;&gt;!i_wb_stb &amp;amp;&amp;amp; !o_wb_stall&lt;/code&gt;, so I just check for &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_wb_stall&lt;/code&gt;
here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Set the high bits to zero initially
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGFLASHSZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps if I were interested in building a lower power design, I’d want to
eliminate any extraneously toggling data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGFLASHSZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But low-power isn’t my current goal.&lt;/p&gt;

&lt;p&gt;For now, you can see how &lt;code class=&quot;highlighter-rouge&quot;&gt;LGFLASHSZ&lt;/code&gt; address bits get set, the lower two
address bits get cleared (since we are responding to a 32-bit data
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; request), and the &lt;code class=&quot;highlighter-rouge&quot;&gt;4&#39;ha&lt;/code&gt;
mode bits get set.  These mode bits will help to guarantee that we don’t leave
XIP mode once we’ve gotten into it.&lt;/p&gt;

&lt;p&gt;Sure, the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
read operation is longer than this, but there’s never a time when we’ll
need to output more valid bits than this.  Indeed, after these bits get sent,
the controller will switch the I/O lines from output to input modes, so again
there’s no reason to care about these bits after the output duration of
this operation ends.&lt;/p&gt;

&lt;p&gt;The last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
I/O interface item that needs to be controlled is the I/O
mode, to be used in determining which bits are set to outputs and which bits
to inputs in the external I/O controller.&lt;/p&gt;

&lt;p&gt;We’ll start in &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt; mode, and then transition on a bus request
to &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_WRITE&lt;/code&gt; mode in order to send the address of the data we wish to read.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get past the address and mode bits, we can then go into &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ&lt;/code&gt;
mode to read our data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the logic necessary to control a read.&lt;/p&gt;

&lt;p&gt;But what about the rest of our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus logic&lt;/a&gt;?
While all of this is going on, we need to be doing a couple of things.  First,
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
must be stalled.  Second, we need to be collecting data from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
data lines to return to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Finally, once the operation completes, we need to acknowledge the bus request,
signaling that the data we’ve collected is now valid.&lt;/p&gt;

&lt;p&gt;Let’s start with the stall signal.  On any bus request, we’ll set the stall
signal high since it will be many cycles before we can respond to another bus
request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, at the end of every clock interval, we’ll adjust the stall signal so that
it remains high until our operation is done.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 0&lt;/code&gt;, we’ll both
(potentially) acknowledge the request, and drop our stall signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll come back to this in a bit and discuss how to handle the register delays
on our input wires, since that will force us to keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;
line high even after our transaction has finished.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone acknowledgement&lt;/a&gt; signal looks simple enough.  Following the
clock cycle where &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr==1&lt;/code&gt;, we’ll acknowledge this request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only … this is where we start to get in trouble with reality.&lt;/p&gt;

&lt;p&gt;First, a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal proof&lt;/a&gt;
of this logic fails if the master drops the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line before we have the
chance to set this acknowledgment.  We can’t interrupt our
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; I/O cycle when this happens,
lest we fail to output the &lt;code class=&quot;highlighter-rouge&quot;&gt;0xa0&lt;/code&gt; mode bits and the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chip get placed into a
state other than the XIP one.  Therefore, we’ll need to keep track of
whether the bus master has dropped the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line and then suppress any
acknowledgments if it had.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;pre_ack&lt;/code&gt; logic below keeps track of whether or not we are still
within the original
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus cycle&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way we can use it, within our calculation of the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus acknowledgment&lt;/a&gt;,
to return a proper value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This isn’t quite the last of our problems either.  What if a user wants to
&lt;em&gt;write&lt;/em&gt; to our read-only memory?  Such an operation is undefined, but we can’t
allow the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
to stall waiting for the result of an unsupported operation.
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;If I believed in&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s,
I might raise one here–and there are a lot of good reasons to do so.  I
chose instead to quietly acknowledge any write request
without doing anything instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our last step is to set and return our data value to the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB
bus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That one’s easy, right?  Anytime there’s a value to be read, shift it into
our data register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But, when is there data to be shifted in?  Here, I use a separate signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;read_sck&lt;/code&gt;, to capture this logic.  While I could have used &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt;, and
certainly did initially, I had to adjust this approach later to make certain
that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; never changes unless we are mid-operation with &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr &amp;gt; 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we are in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, the mode where &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; can toggle at the system
clock speed, then anytime the output clock is active, we should be reading
into our shift register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK_ACTUAL&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the resulting waveform trace in Fig. 19 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 19: The read_sck signal in ODDR mode&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-xip-readsck.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This would be catastrophic, though, if we only wanted to shift the data in
on every other clock.  Hence, if we are dividing the clock by two, then
we want to read on the last clock of every clock cycle.  One clock before
then, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; will be low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CLKDIV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK_ONE&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This extra logic is shown in the last line of the trace shown below in Fig. 20.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 20: The read_sck signal in slower clocking modes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-halfck-readsck.svg&quot;&gt;&lt;img src=&quot;/img/qspi-halfck-readsck.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finally, if we are dividing by anything more than two, then we’ll register the
&lt;code class=&quot;highlighter-rouge&quot;&gt;read_sck&lt;/code&gt; signal, and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ckpre&lt;/code&gt; signal as our indication that we
need to sample on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCK_ANY&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, this is shown in Fig. 21 below.  Notice how &lt;code class=&quot;highlighter-rouge&quot;&gt;ckpre&lt;/code&gt; is true one clock
before &lt;code class=&quot;highlighter-rouge&quot;&gt;read_sck&lt;/code&gt;, as required to make this work.  Notice also how the
clock goes through its negative cycle first, leaving the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; positive
edge mid-interval.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 21: The read_sck signal in much slower clocking modes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-slow-readck.svg&quot;&gt;&lt;img src=&quot;/img/qspi-slow-readck.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To verify that this logic works, I used one of those &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;“poor man’s sequences”
that I discussed earlier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why not use a regular &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SystemVerilog
sequence&lt;/a&gt;?
Well, I started out using the more traditional &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;.
However, ultimately it was the variable clock rate that made using &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;
impossible, and so I had to switch to the
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;
approach.&lt;/p&gt;

&lt;p&gt;By a &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;,
I mean something like the following:&lt;/p&gt;

&lt;p&gt;First, I define how long this operation will take in logical steps, not
clock steps.  This
includes the first step, found only when &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; is low, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line
is low and &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; remains high, followed by the six clock intervals of
the address.  This is then followed by a parameterizable number of dummy cycles,
and then our eight data read cycles.  We can capture this total length with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;localparam&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MEMDONE&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDUMMY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then define a sequence vector of this many states, plus one more for the
acknowledgment cycle, with the meaning that if any of the bits in this vector
is a one, then we are in that state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logic to control this sequence is actually fairly simple.  On a reset,
the sequence is cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, we advance the sequence at the end of every &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock period.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one problem with only stepping the sequence at the end of every
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock interval: what happens to the acknowledgment?  &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; can only
be high for one clock cycle, not for as many cycles as there are in an
extended &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock interval.  Therefore, we’ll need to clear the upper bit
if our clocking is extended at all.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step is to start the sequence.  We’ll start it on any bus
request.  Well, almost.  For reasons we’ll get into later we’ll start this
only on a bus request where the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line is idle (high).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, we’ll shift this left one step per every state transition.
Fig. 35 below shows an example of this, but only after adding in several more
features, so let’s work our way up to that point.&lt;/p&gt;

&lt;p&gt;Now we can make assertions about what’s supposed to happen in each step.&lt;/p&gt;

&lt;p&gt;For example, we want to make certain &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; is high during any &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt;
read operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We might also wish to assert that we start out this sequence in &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_WRITE&lt;/code&gt;
mode, and end it in &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ&lt;/code&gt; mode.  There’s a couple steps in the middle
where our I/O mode doesn’t matter, but otherwise this fully constraints our
I/O modes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDUMMY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a moment, we’ll need a copy of what was read from the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat&lt;/code&gt; set of
input pins in order to verify that we received the right values.  So let’s
create a second copy of the incoming data for that check.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, let’s examine those first six clocks.  These are the ones where we need
to be outputting the address we were given from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.  The first step
to this check is making sure we have a copy of the last requested address
to check against.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Make sure all of the bits are set
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Now set as many bits as we have address bits
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now use this to compare against what we are presenting across the port.
For example, during our first time interval, we’ll want to output address
bits &lt;code class=&quot;highlighter-rouge&quot;&gt;21:18&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 6 nibbles of address, one nibble of mode
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t let the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; scare you in this expression.  This just references
the extra clock cycle used in the slow clock mode before lowering the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;
line.  During that cycle, output data values are don’t cares, so we don’t
check them here.  However, if we are running in the faster mode, then we
don’t take an extra cycle–hence the reason for checking whether or not
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; is set here or not.&lt;/p&gt;

&lt;p&gt;Here are the rest of the checks for the rest of the address intervals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t forget that, because we are addressing the flash with 32-bit word
addresses, that the bottom two of twenty-four bits are necessarily zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=={&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fv_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or, likewise, if we want to stay in XIP mode (and we do), that we have to
output a &lt;code class=&quot;highlighter-rouge&quot;&gt;4&#39;ha&lt;/code&gt; following the address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s turn our attention to the returned result.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, we get a result every clock tick.  In this case,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; function is ideal for checking if we are returning the right
values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if we haven’t yet reached the end of the sequence,
then both the stall signal should be high and the acknowledgment signal
should be low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we are running in a slower clock mode, then &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; won’t work for us.
Instead, we can use the copy we just made of the incoming data to prove
that we received the right value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of this logic should match the logic above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also want to make certain that, on the very last clock tick, the counter
has properly returned to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll use one final assertion to double check that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_memread&lt;/code&gt; only ever has
one value active at any given time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONEHOT_MEMREAD&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, just to get some assurance that this actually works, we’ll add a
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement to check that, yes, we truly can perform this operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now have a basic, functioning, &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;QSPI flash
controller&lt;/a&gt;.
Or do we?  So far, I’ve only presented how to handle requests once we’ve
already gotten into this special XIP mode.  We’ll have to come back to the
question of how to get into this mode in the first place still.  Similarly,
we haven’t discussed how to send or receive arbitrary commands yet, or how
to handle I/O delays.  Let’s push those topics off for a bit longer, and look
at how to read a second word without needing to go through the address cycle
again.&lt;/p&gt;

&lt;h2 id=&quot;reading-another-word&quot;&gt;Reading another word&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 22: Subsequent word state diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-pipe-fsm.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With the logic above, we can now read a word from our
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chip.  We can do this at the
system clock rate, or any arbitrary division of it.  In this section, let’s
instead focus on what it takes to read data from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; using the pipelined features of
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While you might wish to call this a &lt;em&gt;burst&lt;/em&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; mode, unlike other
burst modes that I’ve worked with (WB, AXI, etc), this one doesn’t carry a
burst length parameter, burst size, or even address increment information.
For this reason, I often call this a &lt;em&gt;pipelined&lt;/em&gt; mode rather than a &lt;em&gt;burst&lt;/em&gt;
mode, even though there are some obvious similarities between the two.  As a
result, you’ll find I often describe these as “pipe” or “piped” requests.&lt;/p&gt;

&lt;p&gt;Within my design, this pipelined mode is controlled by the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; parameter.
Further, unlike many &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; burst
modes, these piped requests are controlled on a beat by beat basis in the
master.  There’s no pre-announcement of the number of values to be read, such
as in the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI master specification&lt;/a&gt;
or in the &lt;a href=&quot;https://cdn.opencores.org/downloads/wbspec_b3.pdf&quot;&gt;Wishbone burst modes from the B3
specification&lt;/a&gt; that &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;I’ve
carefully chosen not to
implement&lt;/a&gt;.  Instead, we’ll
need to determine on a beat by beat basis if the next read request continues the
burst, or if we need to raise &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; and start over with a new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
transaction.&lt;/p&gt;

&lt;p&gt;Here you can see the definition of the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; parameter controlling whether
or not we support this mode in the first place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// OPT_PIPE makes it possible to string multiple requests together,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// with no intervening need to shutdown the QSPI connection and send a
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// new address
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this parameter is set, the controller will respond to requests for subsequent
addresses.  Hence, if you request a read from address &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, and then while the
controller is busy making that happen you request a second read from address
&lt;code class=&quot;highlighter-rouge&quot;&gt;A+1&lt;/code&gt; (i.e. one word, or 32-bits later), then the controller should recognize
and honor this request before closing up the interface.&lt;/p&gt;

&lt;p&gt;Sadly, that means we’re going to need to go back over a lot of our logic
above and adjust it to make these subsequent reads possible.&lt;/p&gt;

&lt;p&gt;The first step, though, is a bit of complicated logic determining if a
subsequent read is even pending that would extend our burst access in the first
place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_PIPE_BLOCK&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_pipe_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_pipe_condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An important part of this check is to know if a bus request is pending for
the &lt;em&gt;next&lt;/em&gt; address.  The first step of that logic is to calculate what that
next address, or &lt;code class=&quot;highlighter-rouge&quot;&gt;next_addr&lt;/code&gt;, will be.  In particular, this address is defined
as one more than the last address accepted.  Hence, anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_wb_stall&lt;/code&gt;, we
can create a copy of the incoming address plus one.  (Notice we dropped the
check for &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; again.)  Following requests for this &lt;code class=&quot;highlighter-rouge&quot;&gt;next_addr&lt;/code&gt;
will then be honored without closing the interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will capture the &lt;code class=&quot;highlighter-rouge&quot;&gt;next_addr&lt;/code&gt; from not only the beginning of our first
request, but will also update it at the beginning of any subsequent address
as well, since the logic above, based upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_wb_stall&lt;/code&gt; signal alone,
doesn’t care which of the two it is responding to.&lt;/p&gt;

&lt;p&gt;A pipe request requires several things that all need to be true.
First, this has to be part of the last transaction.  Remember how we used
&lt;code class=&quot;highlighter-rouge&quot;&gt;pre_ack&lt;/code&gt; to keep track of whether the last transaction was aborted?
Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;pre_ack&lt;/code&gt; must be true–indicating that the last request was never
aborted.  Second, there must be an outstanding request, so &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; must
be true as well.  The new request must also be a read request, so &lt;code class=&quot;highlighter-rouge&quot;&gt;!i_wb_we&lt;/code&gt;.
Further, it must be a request while we are already busy, and so the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; pin
must be active so &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_qspi_cs_n&lt;/code&gt;.  The clock counter must be greater than
zero, and the outstanding request must be for the next address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_pipe_condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This all makes sure that we are not only receiving a next address read request,
but also that we are getting that request while we are still reading from the
last address.&lt;/p&gt;

&lt;p&gt;Since that’s a lot of logic, we’ll register it to keep it from slowing down
the rest of the core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_pipe_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_pipe_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_pipe_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_pipe_condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_pipe_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, if we aren’t supporting burst reads, then this value needs to be
kept at zero–so the synthesizer can optimize away any unused logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Registering all this logic is going to change our timing diagram somewhat,
as shown in Fig. 23 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 23: Timing associated with piped reads&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-pipe-stall.svg&quot;&gt;&lt;img src=&quot;/img/qspi-pipe-stall.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Notice from the figure that the logic recognizing a pipelined request needs
to first notice the request when &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 3&lt;/code&gt;.  Then &lt;code class=&quot;highlighter-rouge&quot;&gt;pipe_req&lt;/code&gt; gets set
one clock later, when &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 2&lt;/code&gt;, and so the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; line gets
dropped when &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 1&lt;/code&gt;.  This is all set up so that &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; can then
jump back from &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr==1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 8&lt;/code&gt; to start the second read.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tools&lt;/a&gt;,
however, discovered the error in this basic set up.  If
I ever take more than one clock cycle per &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;, then it might be that
&lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 1&lt;/code&gt; for multiple cycles before &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; needs to be lowered.
Thanks to the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
tools&lt;/a&gt;,
I think I found all of the missing logic tests.&lt;/p&gt;

&lt;p&gt;All that’s left then is to patch this into our prior logic.  The biggest
changes will be to our counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt;, and our stall signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;.
Neither the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; logic nor the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; logic needs to change,
since both of these are already set appropriately on any bus request.&lt;/p&gt;

&lt;p&gt;Let’s start by updating &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt;.  Before, on a read request, we set the
&lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;14+NDUMMY+(!OPT_ODDR)&lt;/code&gt;.  Now, if &lt;code class=&quot;highlighter-rouge&quot;&gt;pipe_req&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; are
true, we’ll need to set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; just before the operation ends.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// We start out as before
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Notice that this is only appropriate for
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// regular bus reads, and so the check for
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// !pipe_req
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDUMMY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;amp;&amp;amp; pipe_req
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Otherwise, if this is a piped read, we&#39;ll
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// reset the counter back to eight.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The rest is as it was before
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At first, updating the stall signal is easy.  We still raise the stall signal
on a bus request, regardless of whether or not its a piped (burst) request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where things start to get difficult is when determining when to drop the
stall line in order to accept this transaction.&lt;/p&gt;

&lt;p&gt;It turns out that there’s two separate pieces of logic required.  First, if
we are in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode and hence running at the system clock, then we’ll
need to drop &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 2&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; will be low
when &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 1&lt;/code&gt; as shown in Fig. 23 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, we can’t make a mistake here, and timing is critical.  Once mistake,
where &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; is low for one too many clock cycles, and we might
accidentally accept an extra request that we have no intention of processing.&lt;/p&gt;

&lt;p&gt;On the other hand, if we are running slower than our clock speed, then we’ll
need to drop the stall signal while &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 1&lt;/code&gt; as discussed above.
This needs to be done one clock before &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt; when all of our states change,
and so we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ckpre&lt;/code&gt; signal for that purpose.  Notice that, if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt;
is true, &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt; in the above condition will always be true, so this next bit
of logic will get ignored.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, if you get confused by this logic at all, refer back to Figs. 11 or 12
above.&lt;/p&gt;

&lt;p&gt;Verifying the piped reads follows much of the same logic as the original
memory read verification: we use a
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;.
This sequence is only ever nine steps in length, since all the variable
length stuff was handled above.  These eight states represent the eight
new steps on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
bus, as well as a final one to return an
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone acknowledgment&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can define a shift register with eight states (plus one for the
acknowledgment), and step through it every time a clock period completes.
This should look very similar to the shift register associated with the
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;
for reading in the first place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Shift left, to advance the states in our sequence
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Likewise, we start this sequence on a bus request when we
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// are already running
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, if the states last longer than a single clock, then we’ll need
to make certain that any
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus acknowledgments&lt;/a&gt;
still don’t last any longer than a single clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using this &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;state sequence
vector&lt;/a&gt;,
we can now make assertions about this second part of our state machine.  For
example, on that last beat of the sequence, either the data is right, or the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;acknowledgments&lt;/a&gt;
must be low–in which case we don’t care what’s in the data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s look at the rest of the steps in the sequence.  Prior to our
acknowledgment, we should be stalled until the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we hit the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock cycle, we should still be stalled for all
stages except the one before we are done.  That one exception is the stage,
shown in Fig. 23 above when &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr == 1&lt;/code&gt;, where we might possibly accept
another request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, unless we are acknowledging the last memory cycle, the acknowledgment
line must also be low.  (Remember, we checked for our own acknowledgment
cycle earlier in this cascaded if statement.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One last assertion is necessary to tie our &lt;code class=&quot;highlighter-rouge&quot;&gt;f_piperead&lt;/code&gt; vector to the clock
counter.  On the very last cycle of &lt;code class=&quot;highlighter-rouge&quot;&gt;f_piperead&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; should be at
zero, unless we are extending into an additional burst read following this
one in which case &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; should be eight.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For all other cycles, the &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; should specify which of the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_piperead&lt;/code&gt;
bits is on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As one final step to know that our core truly passes, we’ll add a cover
statement to cover the acknowledgment from one of these pipe reads.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piperead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when we run &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;
in cover mode, we’ll get a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; that we can examine assuring us that our
design truly did what we were expecting.&lt;/p&gt;

&lt;h2 id=&quot;the-startup-sequence&quot;&gt;The Startup Sequence&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 24: Sequence of startup commands&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-startup-fsm.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Our core&lt;/a&gt;
now possesses all of the functionality necessary to read from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;,
just not any of the functionality necessary to get into the Quad I/O XIP read
mode that all of our reads will start from.  Once there, we can read at full
speed (or slower) upon any request, and we can continue that read request as
long as the master continues issuing subsequent read requests.  Getting into
this mode in the first place will be the topic of this section.  Well, that
and how to patch the logic for such a startup sequence into the logic we’ve
already written above.&lt;/p&gt;

&lt;p&gt;Before getting into the details, I should note that I’ve built more than one
of these startup scripts before.  Sadly, they all end up being very device
dependent, often because different
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;Flash&lt;/a&gt; devices support different
reset commands, and some need special instructions to set chip specific
configuration registers.  Hence, while the previous two sections are all
(fairly) device &lt;em&gt;independent&lt;/em&gt;, and while they all apply to any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; device that supports
the Quad I/O XIP read mode, things become quite device dependent in this
section.&lt;/p&gt;

&lt;p&gt;When I built my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/4a2d41caaf4be8ce6e63d7c5d2a0085476e0127d/rtl/qflexpress.v#L218-L292&quot;&gt;first startup script&lt;/a&gt;,
I built my startup sequence from a giant counter.  After letting the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; idle for a period of time,
following the &lt;a href=&quot;https://www.cypress.com/spansion-redirect&quot;&gt;Spansion&lt;/a&gt;
specification I was following for starting the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;, I would then toggle the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;
line as a form of a reset sequence, and then issue a single read command.
Sometimes this required setting the Quad-SPI enable bit in the configuration
register.&lt;/p&gt;

&lt;p&gt;This all worked until I tried using the &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;.  In that case, toggling
the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line without toggling &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; wasn’t guaranteed to do anything useful.
Worse, before setting the Quad-SPI enable bit, you had to set the write enable bit.  And, if that wasn’t
all, the &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;
required up to 10-cycles between the address and the
data.  Not only that, but that number of cycles is clock rate dependent.  If
you didn’t run at 100MHz, you might be able to use fewer dummy cycles–making
the number of dummy cycles not only vendor but also clock rate dependent.  If
that wasn’t enough, my 100 MHz &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
implementation required setting the drive strength, measured in Ohms, in order
to actually get up to 100MHz, and that requires setting the write enable bit
&lt;em&gt;again&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So I rebuilt my &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; driver in order
to support this &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt; as well as the others.&lt;/p&gt;

&lt;p&gt;Because of the number of times I’ve ended up rebuilding this startup script,
I chose to rebuild it this last time using an array of startup micro-commands
rather than a counter driven script.  While this might not be as low logic
as I like, it will at least be easy enough to adjust from one
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; device to the next.&lt;/p&gt;

&lt;p&gt;This, therefore, is the one piece of our “Universal” &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
that remains device dependent–not counting the number of dummy cycles,
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
dependent number of wait states on registered I/O, the device dependent
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; rate, or ….&lt;/p&gt;

&lt;p&gt;Here’s how our micro-control commands will be formatted.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 25: Startup microcode command word format&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-cmdword.png&quot; width=&quot;208&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll use one bit to select between a command to be send to the device, and
some number of counts to wait idle before the next command.  I call this the
wait bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;M_WAITBIT&lt;/code&gt;, within the code and marked it as &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; for sleep
in Fig. 25 above.  If this bit is set, the other 10-bits of the command word
will indicate the number of counts to remain idle with the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line inactive
(high).  If the bit is not set, the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line will be made active (low).
Indeed, this sleep mode is currently the only way to set &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; inactive
between commands.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next two bits, shown as &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; above, will select the mode the command
will be in, whether &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_WRITE&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final 8-bits will record an 8-bit data byte to be sent to the
device–in either high or low speed, or ignored in &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ&lt;/code&gt; mode.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll admit, this is even my second version of this micro-code interface.  My
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/7d7db428220390befe82fc85ba89539703391ce3/rtl/qflexpress.v#L260-L396&quot;&gt;first version was a basic bit-banging microcode
interface&lt;/a&gt;.  I switched to the
more complicated command interface when the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/7d7db428220390befe82fc85ba89539703391ce3/rtl/qflexpress.v#L260-L396&quot;&gt;bit-banging
one&lt;/a&gt;
started to become difficult to maintain.  Now, with all of the commands
specifying 8-bit byte values, the command script has become much easier
to read and check by eye.&lt;/p&gt;

&lt;p&gt;The good news is that we will barely need to adjust anything else in our
design to make this startup script work once it comes time to integrate it.&lt;/p&gt;

&lt;p&gt;The startup script begins with the array of instructions, each 11-bits long.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;M_LGADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_LGADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These words are set within a &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/c4f98974a8c282284fdd582e19d675287883ca33/rtl/qflexpress.v#L346-L421&quot;&gt;giant initial
block&lt;/a&gt;.
In general, this block needs to start by placing the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;
into a known state from which we can send an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;
command to enter the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
XIP read state,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Addr 1
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h09&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Addr 2
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h0a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Addr 2
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Idle, to raise the CS_n line
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h0b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;10&#39;h3f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and end with a Quad Read I/O command, &lt;code class=&quot;highlighter-rouge&quot;&gt;0xeb&lt;/code&gt;,
24-bits of address (I set these to zero in general), a mode command, &lt;code class=&quot;highlighter-rouge&quot;&gt;0xa0&lt;/code&gt;,
some number of dummy cycles as determined by your specification sheet, and
then reading one or two bytes for good measure.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;heb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Addr #1
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Addr #2
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Addr #3
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Mode byte
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;ha0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Dummy clocks, x10 for the MICRON flash
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//   This includes the 2 clocks for the mode byte above
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h1a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h1c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Now read a byte for form
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mh&quot;&gt;8&#39;h00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Idle
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h1e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;5&#39;h1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some chips will also require you to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;Quad I/O&lt;/code&gt; bit in a configuration
register.  That annoying &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt; chip requires that
we first send a write enable, and then set the &lt;em&gt;enhanced configuration
register&lt;/em&gt;, followed by sending the write enable &lt;em&gt;again&lt;/em&gt; and the setting the
&lt;em&gt;enhanced volatile configuration register&lt;/em&gt; before we can start our flash
command.  In other words, check your
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip vendor’s data sheet to see what information needs to be sent.&lt;/p&gt;

&lt;p&gt;The startup interface within our controller centers and revolves first around
an internal signal I call &lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt;, because in this &lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt; (i.e.
startup) mode the design is offline for &lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt;.  Once the &lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt;
flag clears, we’ll enter into our normal operations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_midcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_FIRSTIDX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We both start out in maintenance mode, and we return to it upon any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_FIRSTIDX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// i.e. 0
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, whenever it is time to move forward to the next word, we step forward
one index into our microcode array, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_cmd_index&lt;/code&gt;, stopping only when we get
to the last word in our sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M_FIRSTIDX&lt;/code&gt; above is used to help speed us through
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;,
making it so the design skips the first several commands (mostly sleep
commands) and then goes directly into the startup sequence.  That way, we can
get a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement to generate a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; showing us the whole
sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But I’m getting ahead of myself.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;m_final&lt;/code&gt; register above will be true when we get to the end of the
sequence.  More on that in a moment as well.&lt;/p&gt;

&lt;p&gt;Now that we have a command index into our micro-command table, we’ll want to
use it to read from our array of startup commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cmd_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re also going to need a flag to tell us when we are on the last command
word.  We’ll call this &lt;code class=&quot;highlighter-rouge&quot;&gt;m_final&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, let’s implement our sleep or wait counter.  This is the one that counts
down some number of sleep cycles, with &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; held high (inactive).
Of course, the counter resets to its longest count, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, on reset, and it
starts in the middle of a sleep cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_midcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_midcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, when it’s time to step to the next state, and time to move to the
next micro-command word, the counter starts up only if the &lt;code class=&quot;highlighter-rouge&quot;&gt;M_WAITBIT&lt;/code&gt; (i.e.
the sleep bit) is set within the command word and the sleep count is greater
than zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_midcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once set, the timer counts down to zero.  Likewise, the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;m_midcount&lt;/code&gt;
will reflect that we are waiting for the timer to complete.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_midcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once this &lt;code class=&quot;highlighter-rouge&quot;&gt;m_midcount&lt;/code&gt; flag clears, we can then move to the next microcode
instruction.  This is also why the logic above depends upon &lt;code class=&quot;highlighter-rouge&quot;&gt;m_ce&lt;/code&gt;, which
itself is only true if &lt;code class=&quot;highlighter-rouge&quot;&gt;!m_midcount&lt;/code&gt;: we only move forward to the next
instruction if our counter has reached zero.&lt;/p&gt;

&lt;p&gt;What about the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line and the mode bits?  Let’s set them here, as well as
a &lt;code class=&quot;highlighter-rouge&quot;&gt;m_bitcount&lt;/code&gt; to keep track of which bit within our eight that we are currently
transmitting.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On every &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt;, we’ll move forward to the next step in our sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once every instruction has been acted upon, if this is the final instruction,
then let’s cause these values to stop toggling.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise if we are in the middle of a timer count, or if we are about to start
a timer count down, then again set the bits to idle.  &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; is deactivated,
and the port is placed in a &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt; mode.  The bit count is also left
at zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_midcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if we aren’t mid byte, and if this isn’t the last byte, and we
aren’t in a sleep cycle or about to start one, then we can accept
a new byte to transmit. &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; is activated (lowered) automatically, and the
mode is drawn from the next two bits of the word.  The bit count is set to
the number of remaining &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock periods necessary to send this word,
either 1 for a two-cycle word, or 7 for an eight cycle word.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, almost.  If we aren’t running in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, and we aren’t continuing
a previous command, then we’ll add in one extra clock cycle for &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; to be
high before dropping.&lt;/p&gt;

&lt;p&gt;But what data should be sent?  That comes from the rest of the bits in the
micro-command word, bits &lt;code class=&quot;highlighter-rouge&quot;&gt;7:0&lt;/code&gt; as outlined in Fig. 25 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_bitcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On any new command to send data to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;, we’ll set the outgoing
data register, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_dat&lt;/code&gt; to the top four bits of the word for the &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD*&lt;/code&gt; modes.
Otherwise, if we will be transmitting in &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt; mode, then we’ll instead
set bit zero to the top bit, and the other three are don’t cares.  &lt;code class=&quot;highlighter-rouge&quot;&gt;m_byte&lt;/code&gt; is
then used to capture the remaining bits to be sent.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;m_dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;m_dat&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			    &lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
			    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Slow speed
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;m_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
			    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, while we are within a word, we’ll want to shift the &lt;code class=&quot;highlighter-rouge&quot;&gt;m_byte&lt;/code&gt; data
over by either one or four bits in order to grab the next bits to send.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Slow speed
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;m_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last wire to set is the clock register, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_clk&lt;/code&gt;, that will be used to
drive the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; pin.  If we are in &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; mode, where we are
running our clock at the system clock rate, this is as simple as setting the
clock to be identical to the negated &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; pin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, the &lt;code class=&quot;highlighter-rouge&quot;&gt;m_clk&lt;/code&gt; pin will set the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt; and hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; wire
directly, so we’ll need to spend a bit more time at this.  On a reset, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock wire needs to idle at one.  Otherwise, whenever &lt;code class=&quot;highlighter-rouge&quot;&gt;m_clk&lt;/code&gt; is already
low, then the clock is raised on the &lt;code class=&quot;highlighter-rouge&quot;&gt;ckpos&lt;/code&gt; signal.  Further, in the middle
of a count down, the clock is kept idle (high).  Otherwise, the clock goes
low if there’s another bit (nibble) to be sent.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckneg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the startup logic.&lt;/p&gt;

&lt;p&gt;Since it doesn’t depend upon the inputs at all, it’s easily tested by a basic
testbench.  Alternatively, the one cover statement shown above will calculate
a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; for us, showing what this startup routine does.&lt;/p&gt;

&lt;p&gt;But how shall we integrate this within the rest of the design?&lt;/p&gt;

&lt;p&gt;Actually, that’s the easy part, and part of the magic of using the
&lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt; flag.  First notice that there’s no feedback path from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt; to this micro-code startup
design.  That means that an extra clock cycle (or two) won’t affect our logic.
This makes it easy to adjust each of our basic controller output port logic
block to respond to the &lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt; flag when it is set, and to ignore
the startup registers if not.&lt;/p&gt;

&lt;p&gt;For example, in the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt;, we’d have&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt;, we’d have&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;before&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same applies to &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_mod&lt;/code&gt;, the bits used to control the external I/O
directions,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;before&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone stall&lt;/a&gt;
register,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;before&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and so forth and so on.&lt;/p&gt;

&lt;p&gt;If we’ve done this all right, we can then get a cover &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; showing that
our startup script works using a simple,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as I mentioned above.&lt;/p&gt;

&lt;p&gt;Only, this doesn’t practically work.&lt;/p&gt;

&lt;p&gt;The first problem is that I start the script with a very long set of delays.
These are required by some
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;s.  The problem with these
long delays is that the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tools&lt;/a&gt;
can’t practically work through that many cycles.  So, to cut these delays
down, I introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;M_FIRSTIDX&lt;/code&gt; above–as a way to start the startup sequence
in the middle–but only during &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second problem was the delays within the control structure, and this is
a problem for the same reason as the long delays upon startup.  To deal with
these, I arbitrarily kept the maximum number of counts to 3, but only during
&lt;code class=&quot;highlighter-rouge&quot;&gt;FORMAL&lt;/code&gt; mode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_this_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_WAITBIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My third problem was that even with all this help, the startup design
still didn’t pass &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve ever had to debug a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; failure, it can be quite annoying,
since the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tools&lt;/a&gt;
provide no information to you telling you why the
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; request failed.  Instead, all you learn is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
part of the proof failed.&lt;/p&gt;

&lt;p&gt;The secret to solving problems like this with &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; is to break the
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; problem up into smaller problems, to help you bisect and find the
problematic cycle.&lt;/p&gt;

&lt;p&gt;While this was my approach, I may have also gone a bit overkill at it, as
you’ll see below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h0a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h0b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h0d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h0e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cmd_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This way, if &lt;code class=&quot;highlighter-rouge&quot;&gt;cover(m_cmd_index == 5&#39;h12)&lt;/code&gt; passed, but &lt;code class=&quot;highlighter-rouge&quot;&gt;5&#39;h13&lt;/code&gt; didn’t,
I could look at the number of steps between states and estimate how many
more steps the
formal tools
needed to reach the ultimate &lt;code class=&quot;highlighter-rouge&quot;&gt;cover(!maintenance)&lt;/code&gt;.  When dividing the clock
by six, such that &lt;code class=&quot;highlighter-rouge&quot;&gt;CLK_DIV == 5&lt;/code&gt;, this meant &lt;em&gt;checking 560 states before the
proof would complete!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the end, I also created some
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;s
to describe the various possible micro-commands and make certain that each were
properly carried out.  We’ll skip these, since they basically follow the
same form as the others above.&lt;/p&gt;

&lt;h2 id=&quot;arbitrary-commands&quot;&gt;Arbitrary commands&lt;/h2&gt;

&lt;p&gt;The next step in implementing this core was to create an optional
configuration port through which arbitrary commands could be sent to
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;.  Further, I chose to use
the parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CFG&lt;/code&gt;, to control whether this arbitrary command port should
be integrated into &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;the
controller&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// OPT_CFG enables the configuration logic port, and hence the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ability to erase and program the flash, as well as the ability
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// to perform other commands such as read-manufacturer ID, adjust
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// configuration registers, etc.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are several reasons why we might want such a port.  First, if we don’t
implement any start up sequences, the arbitrary command capability can be used
to create a startup sequence to place us into the XIP mode where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; will
respond to a sequence starting with an address instead of a command.  Second,
arbitrary command sequences are necessary for erasing and programming the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;,
should you want that capability.  Finally, while debugging the I/O, to see
what is working and what is not, arbitrary commands are an absolute
necessity to get a perspective of what is going on either right or wrong.&lt;/p&gt;

&lt;p&gt;Of course, to do this, the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
will need to be able to place the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt; into
a state where it would no longer respond to read requests.  This will
necessitate that we add at least two more states to our basic state diagram,
as shown in Fig. 26 below.&lt;/p&gt;

&lt;table style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 26: Configuration Port State Diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-cfg-fsm.svg&quot;&gt;&lt;img src=&quot;/img/qspi-cfg-fsm.svg&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the new configuration mode state, any attempts to read from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash memory&lt;/a&gt; will be
erroneous–sort of like any requests to write to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; were erroneous earlier.  As
before, such read attempts could be responded to with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, although I have
chosen to instead return an empty acknowledgment instead.  This means that any
software controller will be responsible for making certain reads from
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
aren’t attempted during the configuration mode.&lt;/p&gt;

&lt;p&gt;Of course, if you read through any
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;
specification, this will appear backwards.  Most &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash
chips&lt;/a&gt; support
many modes, of which the read mode we are using is a subset of the
“Quad I/O read” mode.  Instead, as far as our controller is concerned, our
read mode is our primary reason for being.  That’s why it is our primary mode
in our state diagram above.&lt;/p&gt;

&lt;p&gt;When I first started designing this configuration port, I was only
interested in implementing traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
instructions with this port: send 8-bits of data on &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_dat[0]&lt;/code&gt;, and
receive 8-bits of data on &lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat[1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with this initial view is that switching back into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
mode requires sending the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
I/O read command in the traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The address, written in QUAD output mode.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A mode nibble (sometimes byte) of &lt;code class=&quot;highlighter-rouge&quot;&gt;4&#39;ha&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;4&#39;ha0&lt;/code&gt;).  This needs to be
sent in QUAD output mode, while driving all of the wires.&lt;/p&gt;

    &lt;p&gt;If the mode byte is not sent in its entirety across all four
bit lanes, the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chip will not
return to XIP mode following this interaction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dummy bytes, where the clock is ticked.  This can be sent in any I/O mode,
but must allow the I/O direction to be switched.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some amount of data, read in QUAD input mode, so that the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; chip fully places
us into the XIP mode we want for everything else.  This must also be done
in QUAD input mode to avoid contention on the various wires.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, in order to support an arbitrary command interface, we need to
support all three modes: &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_WRITE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ&lt;/code&gt; just to be
able to return our interface to the state where our logic above will apply.&lt;/p&gt;

&lt;p&gt;Not only that, but some commands require 8-bits, some 16, some 24, and some
more bits–such as the command we need to send to return to XIP mode.  To keep
this interface simple, I chose to only support 8-bit transactions, in a way
where larger/longer transactions could be composed from multiple 8-bit
transactions.  That means that the configuration port
must support leaving the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line low at the end of every
transaction, and then only raising it later upon command.  Further, at the
end of every transaction, the port should be stable: &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; will be
high or low as specified in the transaction, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; will be constant.&lt;/p&gt;

&lt;p&gt;This necessitated creating five separate control port operations, controlled
by a single control word written to &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;our
controller&lt;/a&gt;
over the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
and shown in Fig. 27 below:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 27: Control word bit assignment&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-cfgword-bits.png&quot;&gt;&lt;img src=&quot;/img/qspi-cfgword-bits.png&quot; width=&quot;603&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A traditional 8-bit &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; interaction.&lt;/p&gt;

    &lt;p&gt;This would be started upon a write request, but would end with &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt;
left active.  &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; would maintain, in its bottom 8-bits, the values
read from the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I called this a low speed configuration request.&lt;/p&gt;

    &lt;p&gt;To initiate such a request, one would a single word to the control port.
Of this word, the lower 8-bits would contain the data to be sent,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;) bit would be low, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; bit (Quad I/O rate) low, and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; bit (Configuration mode) would be set high.  Once the operation
completed, you could then read the results back from the data word.
A second write to the configuration port setting &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; low would exit
the configuration mode and raise (deactivate) the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line.  The
direction, or &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; bit, would be a don’t care in this operation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI&lt;/a&gt;
8-bit interaction to write 8-bits to the port.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 28: Sending 8-bits using Quad I/O&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-cfg-hs-write.svg&quot; width=&quot;320&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;This is a two cycle &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; request, also leaving &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; active (low)
at the end.  This two-cycle operation would begin, as before, by writing a
command word to the configuration port.  The bottom 8-bits of this command
word would specify the data bits to be sent to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI&lt;/a&gt;
port.  Likewise, the &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; bit would be high placing us into configuration
mode, the &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;) bit would be low, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; (speed) bit would be high
to send us into QSPI mode, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; (the direction) bit would be high
to indicate a write operation.  As with the traditional request, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI&lt;/a&gt;
port would be left with &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; active (low).  Further, the port will
be left with the mode bits set so as to continue this active write until
either the next command, or until &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; is deactivated (raised).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;Quad-SPI&lt;/a&gt;
8-bit read interaction&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 29: Reading 8-bits using Quad I/O&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-cfg-hs-read.svg&quot; width=&quot;320&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;This is essentially the same as the last interaction, only the goal is to
read 8-bits of data from the port, four at a time.  The big difference is
that the direction bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; in Fig. 27, of the command word needs to be
clear.  As before, the I/O mode will be left in its last mode, &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ&lt;/code&gt;,
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; line will be left active (low) until the next read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A read from this configuration register port should return the last 8-bits
read from the device.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 30: Flash controller bus connections, showing two shared ports&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-bus-connections.svg&quot;&gt;&lt;img src=&quot;/img/qspi-bus-connections.svg&quot; width=&quot;320&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;Here, I got a bit greedy.  I merged the two return ports together, as shown
in Fig. 30.  I set
it up so that the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
return signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_cfg_stall&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_cfg_ack&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_cfg_data&lt;/code&gt;, would be shared
between the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash memory&lt;/a&gt; and
configuration ports.  I also placed the current configuration port state
in bits &lt;code class=&quot;highlighter-rouge&quot;&gt;16:8&lt;/code&gt;, with the last 8-bits read placed into bits &lt;code class=&quot;highlighter-rouge&quot;&gt;7:0&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Much to my surprise, this came back to bite me later when I was working
on improving the address decoding within
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
Perhaps I shouldn’t have been surprised.  The configuration port, as
currently designed, rather breaks the rules of the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
specifically one request should return one acknowledgment only, and that
acknowledgment should come back on the port where the request was made.
This meant that I had a problem when my updated and improved
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
interconnect later looked for an acknowledgment specifically from the
configuration port, when I was sending it over the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash memory&lt;/a&gt; port.&lt;/p&gt;

    &lt;p&gt;I managed to find a quick fix, but I might need to come back to &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this
controller&lt;/a&gt;
later and rework some of its &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus
interface&lt;/a&gt;.  For now,
though, it works with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; (again).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, one final but necessary operation is to deactivate &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt;
and possibly, but not necessarily to close the configuration port at the
same time.&lt;/p&gt;

    &lt;p&gt;Deactivating &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt; simply means writing a word to the port with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;) configuration bit set.  Closing the configuration port
means also writing a &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; or mode bit of the configuration word,
after which the design will return to its normal mode for reading from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Do be cautioned: for reasons of space within the design, the software
driver must be careful to place the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; back into Quad I/O XIP mode.
The &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
does not do this automatically.  On the other hand, this isn’t that hard to
do from the configuration port.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we get to our
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal properties&lt;/a&gt;,
we’ll need to cover each of these separate operations.&lt;/p&gt;

&lt;p&gt;The transactions themselves are built around a configuration
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus interface&lt;/a&gt;
to our core, shown in Fig. 30 above, consisting of only an additional
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone strobe bit,
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt;&lt;/a&gt;, as well as
a set of “special” bits used to decode the instruction word shown above in
Fig. 27 above and defined within the core below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Set this bit to &quot;turn on&quot; the configuration mode
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CFG_MODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Set the QSPEED_BIT to use any of the higher speed operations:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//   QUAD_READ or QUAD_WRITE
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;QSPEED_BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 	&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// My dual I/O cores use a DSPEED_BIT
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DSPEED_BIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 	&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not supported
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Set the DIR_BIT to write, clear it to read
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DIR_BIT&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 	 &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// USER_CS_n offers user control of the CS bit.  Set to deactivate CS,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//   clear it to use the interface
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;USER_CS_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 	 &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To highlight how this interface might work, suppose we wanted to read the
manufacturer ID (&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;
CMD &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h9f&lt;/code&gt;) from the device.  We would need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First exit from the Quad I/O XIP mode the core is normally in.  That means
we’d need to write, to the configuration port:&lt;/p&gt;

    &lt;p&gt;a. One word of a potential address: &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h10ff&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;These &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;hff&lt;/code&gt; data bits are carefully
   chosen to send an “undefined” command to the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
   in the case that we aren’t in Quad I/O XIP mode.  As a result, this is
   also a low-speed command.  At high speed, these would be interpreted as
   24’bits of an address, followed by two mode nibbles–all with the
   low-order bit held high.  Since the last two bits are set, this will
   clear the mode word, so that the
   &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt; will exit XIP mode
   at the end of the command.&lt;/p&gt;

    &lt;p&gt;b. We’ll send one additional word for good effect, just to guarantee that we
   actually complete the read command.  (On a
   &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;
   &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;,
   you might need to send more.  Hence, we’ll write 32’h10ff to the port
   again to send another 8 clocks.&lt;/p&gt;

    &lt;p&gt;c. Writing a 32’h1100 to the port keeps it in the configuration mode, but
   deactivates the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; bit–so that we can now transition to our next
   command.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 31: Exiting from XIP mode&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-xip-exit.svg&quot;&gt;&lt;img src=&quot;/img/qspi-xip-exit.svg&quot; width=&quot;720&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;We can now write the &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h109f&lt;/code&gt; to the port.  This will send the &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h9f&lt;/code&gt;
command to the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt; in normal
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; mode.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 32: Sending a 9F via normal SPI mode&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-9f.svg&quot;&gt;&lt;img src=&quot;/img/qspi-9f.svg&quot; width=&quot;720&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Another 8-clocks are necessary to read the manufacturers ID from the port,
  so we’ll send an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h1000&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;During the last command, the controller will read 8-bits from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;.  Now, reading from the
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;controller&lt;/a&gt;
will return those 8-bits.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 33: Reading the byte following the 9F via normal SPI mode&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-9f-read.svg&quot;&gt;&lt;img src=&quot;/img/qspi-9f-read.svg&quot; width=&quot;720&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Writing 32’h1100 will clear the port and deactivate (raise) the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;, but
leave the
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;controller&lt;/a&gt;
in its configuration mode.&lt;/p&gt;

    &lt;p&gt;Fig. 33 above shows all three of these transactions.  First, the read.
Notice how I’m only showing &lt;code class=&quot;highlighter-rouge&quot;&gt;io_qspi_dat[1]&lt;/code&gt; here.  This is the traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;SPI&lt;/a&gt;
MISO channel.  The bits in this channel are then accumulated into
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;, which is then read on the second configuration port
transaction shown above.  After the third transaction, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;SPI&lt;/a&gt;
port is returned to idle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we are done with our configuration commands, whatever they might be,
we’ll need to place the design back into Quad I/O read mode–so the controller
can go back to what it was doing before.  Doing this may require some device
specific setup, as we discussed in the setup section.  Once accomplished, it
then requires sending a command to the controller
from the configuration mode.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, we send the Quad I/O read command, &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h10eb&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then the address.  In our case, this is a simple dummy address–anything
will work, so we send three bytes of zeros.  The trick is–these need to
be written to the port at high speed.  Hence, we set the speed bit and
the direction bit, so we write &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h1a00&lt;/code&gt; three times to the configuration
port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we send the mode bit, by writing &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h1aa0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Depending upon your &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;, you may
need to clock it up to eight more times.  (Thanks
&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;!) These dummy cycles can be in either
read or write mode, though, so we’ll write &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h1800&lt;/code&gt; to clock &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; twice
several times over.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll then read one byte of data from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; by writing a &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h1800&lt;/code&gt;
to the port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The configuration port is then closed by writing &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h0&lt;/code&gt; to the port.&lt;/p&gt;

    &lt;p&gt;Once complete, all of the above read commands that start in Quad XIP mode
will work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At least, that’s the idea.  We still need to make all of this capability
happen.  Further, we need to make it happen without disturbing any of the
capability we’ve already built above.&lt;/p&gt;

&lt;p&gt;To make the logic easier to read, I created a series of simplifying assignments.
The first one, &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt;, is very similar to the logic we discussed earlier.
The difference now is that we only accept a &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; to read from
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash memory&lt;/a&gt; when we are not in our
configuration mode, &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_mode&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that, a couple of more signals.  First, &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_stb&lt;/code&gt; simplifies checking
for a bus request on this configuration port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_stb&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Many of these requests, such as reading from the port, releasing the port,
or returning &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; high can be acknowledged immediately.  This includes
request of the configuration port when our &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CFG&lt;/code&gt; parameter was low,
describing the case where we haven’t built the configuration port into the
design at all.  We’ll capture these empty interaction requests with &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_noop&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_noop&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFG_MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_CS_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of these simplifying assignments describe actual requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFG_MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite.  They are user requests as long as the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; bit is set
low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_CS_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The other three commands will require require some amount of
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; interaction.
Primary among these are the writes that place or keep us in configuration
mode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_hs_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QSPEED_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIR_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_hs_read&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QSPEED_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIR_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_ls_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QSPEED_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here are the three types of interactions we’ll support from here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_hs_write&lt;/code&gt;, a high speed write request is made of the configuration
port.  This will cause 8-bits to be transmitted to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; over two clock cycles.&lt;/p&gt;

    &lt;p&gt;This was shown in Fig. 28 above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_hs_read&lt;/code&gt;, a high speed read request is be sent to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;.  This
will create two &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock cycles, after which the 8-bits read across those
cycles can be read from the wishbone port.  Note that, despite this being
called a read command, it is actually a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
write that commands a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
read.  Therefore, a second
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
operation is still required to read the results back out.&lt;/p&gt;

    &lt;p&gt;This was shown in Fig. 29 above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_ls_write&lt;/code&gt;, this signals a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; command.  This will cause
us to write 8-bits to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; port, and
read 8-bits back, across 8
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;
clock cycles.  These 8-bits can later be read from the configuration port via
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This was shown in Fig. 6 above.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those are our three primary operations that we are going to need to support
in order to support an arbitrary read/write configuration interface directly
to the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I should point out that this is a second generation version of this interface.
The first one was based upon bit-banging the various
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; wires.  I have since abandoned
that interface in favor of this current one since: 1) “most” of these
operations are already supported with our current basic logic, and
2) bit-banging over a slow
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; driven by a &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;serial
debugging port&lt;/a&gt; is
highly inefficient.  (Can I highlight the &lt;em&gt;highly&lt;/em&gt; in inefficient?)&lt;/p&gt;

&lt;p&gt;That’s our vision.  Now we just need to integrate this into the rest of the
design.&lt;/p&gt;

&lt;p&gt;The first step is to keep track of any enduring modes that will last beyond
a single request.  In particular, this subset of the design requires tracking
four mode bits.  One to determine whether or
not the configuration mode of the interface is active,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFG_MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;one to determine the value of the chip select in this mode,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_cs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_cs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_cs&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_CS_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFG_MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the last two in order to determine the speed and direction of the I/O pins.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_dir&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_dir&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QSPEED_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_dir&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DIR_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CFG&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;parameter&lt;/code&gt;.  As before, if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CFG&lt;/code&gt; is not
defined then this let’s the synthesis tool know that it can remove all of the
logic surrounding these values and replace them with constants–simplifying the
rest of the design along the way as well.&lt;/p&gt;

&lt;p&gt;With these adjusted bits, we can now return to our basic design blocks.
The first one we’ll adjust to support this mode is the &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt;.  Here,
we’ll add two more options–one for a low-speed request that will take
eight clock cycles, and one for a higher speed request that will take
only two clock cycles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDUMMY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;amp;&amp;amp; pipe_req
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_ls_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Here&#39;s the low speed request
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// and here&#39;s the high speed request
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; is false, then we take one extra clock cycle after
&lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; becomes active for the clock to lower and begin our first cycle.&lt;/p&gt;

&lt;p&gt;For the most part, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; logic doesn’t change at all.  It’s essentially
what it was before.&lt;/p&gt;

&lt;p&gt;The chip select line needs adjustment, however.  In particular, this line needs
to respond to both read commands, which we’ve discussed above, as well as
configuration writes.  Hence, on a write to the configuration port, &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; is now
adjusted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFG_MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_CS_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the write to the configuration port, the chip select pin follows the
last written value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise the chip select is controlled in an identical fashion to what it was
above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Port direction control starts out as before: on a request to read from memory,
we start out writing to the port, so we can send the address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if we have a burst continuation or pipe request then we
need to keep reading.  Likewise, if there’s a configuration
port request to read at high speed, then we also go into high speed read mode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_hs_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next two adjustments are basic.  On a high speed write request, we set
all pins to outputs,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_hs_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_WRITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;whereas on either a low-speed request or any time the bus remains in
configuration mode at low speed, then the port I/O modes transition back
to normal &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;io_qspi_dat[3:2]&lt;/code&gt; are outputs, &lt;code class=&quot;highlighter-rouge&quot;&gt;io_qspi_dat[1]&lt;/code&gt; is an input, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;io_qspi_dat[0]&lt;/code&gt; is our output data pin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_ls_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL_SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last piece of logic we’ve discussed before: After sending the address
and the mode command, the wires should become all read wires.  This only
applies, however, if we aren’t already in any configuration mode.  In that
case, we need to maintain whatever I/O standard that we’ve been commanded
to remain in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUAD_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_dat&lt;/code&gt; logic is the last of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
registers that needs to be adjusted.&lt;/p&gt;

&lt;p&gt;As you may recall, we set this value any time &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; was low,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Set the high bits to zero initially
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGFLASHSZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difference is that now we need to set the data bits associated with any
outgoing data.  Note also that we don’t need to check the direction of the
operation, in case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;QSPI_READ&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;QSPI_WRITE&lt;/code&gt;, since this will be
handled by the vendor-specific I/O drivers external to this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this
controller&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QSPEED_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Low speed I/O
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// These can be set independent of speed
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of the data logic is as it was before.  On a &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt; signal, we shift
everything left by four.  This includes when we are in &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt; mode.
That’s why we wrote to every fourth pin above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, we might have shifted a variable number of bits on each clock,
either one or four.  I’ve chosen this approach to minimize the logic required,
but we’ll have to check in a moment how effective this approach was.&lt;/p&gt;

&lt;p&gt;During our startup script, we can just copy the startup data into the top four
values of the &lt;code class=&quot;highlighter-rouge&quot;&gt;data_pipe&lt;/code&gt;–leaving the rest of the bits as don’t cares.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These same top four bits are then used to drive our data wires, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_dat&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;4*(OPT_ODDR ? 0:1)&lt;/code&gt; expression above.  This simply gives
us four dummy output bits for the case where we take an extra clock to drop
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; line after the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line goes low–as shown above in Fig. 12.&lt;/p&gt;

&lt;p&gt;Moving on to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
logic, we’ll start with the stall line since it doesn’t change much with this
new capability.  The big new difference is that, upon any configuration request,
whether it be a regular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; operation or
a high speed one, the stall line goes high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;before&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus return&lt;/a&gt;
logic needs to change just a touch as well.  As before, we’ll
want to acknowledge any request as soon as it completes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, we want to acknowledge any memory write requests–requests that we
are not going to act upon, immediately as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The one change is that, following a configuration write where &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; is either
not activated or deactivated, or following any read from the configuration
port, we’ll want to acknowledge such requests immediately.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_noop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One other signal changes to create this configuration port capability, and
that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; signal containing the data to be returned to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.  Unlike before,
we now have to shift our data by either one bit or four bits, depending
upon the mode we are in.  Here, we’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_mod[1]&lt;/code&gt;, the bit that
determines whether we are in &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt; mode or either &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_READ&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;QUAD_WRITE&lt;/code&gt; modes to determine how many bits to shift in.&lt;/p&gt;

&lt;p&gt;Of course, you don’t want to forget that, in &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL_SPI&lt;/code&gt; mode, the incoming
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
data bit is bit one, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat[1]&lt;/code&gt;, and not bit zero or
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat[0]&lt;/code&gt;.  This just follows from the typical
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
pin mapping.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a last step in this process, if we are in configuration mode, then
we’ll set the next nine bits to indicate that fact so we can read back off
the mode we are in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;4&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_speed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;cfg_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_cs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, these bits are somewhat ambiguous, since I merged the two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; return
ports together as shown in Fig. 30.  Following a proper data read from
the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; memory, these bits may be
set to anything–depending upon what was read from the memory.  A configuration
port read would then return this same value.  However, without splitting the
output between the two ports, something we chose not do, we are stuck with this
ambiguity.&lt;/p&gt;

&lt;p&gt;Since there are three basic extended operations we are supporting in this
section, we’ll create three new
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;s:
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_cfglswrite&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cfghswrite&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cfghsread&lt;/code&gt;.  By now, though, you should
have the hang of these.  First, there’s a logic block defining the sequence
logic, then another one defining how the rest of the core needs to behave
during the sequence, and lastly a cover statement to make sure the
acknowledgment at the end of the sequence can be reached.&lt;/p&gt;

&lt;h2 id=&quot;delayed-io&quot;&gt;Delayed I/O&lt;/h2&gt;

&lt;p&gt;I’ll admit, by the time I got to this point in my design process, I was
feeling pretty good.  &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;My
design&lt;/a&gt; was
“working”, the logic did what I wanted in simulation, and all of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal proofs&lt;/a&gt;,
were passing.  I just needed to place it onto my hardware to try it out.
What could possibly go wrong?&lt;/p&gt;

&lt;p&gt;Sadly, &lt;a href=&quot;/blog/2018/08/04/sim-mismatch.html&quot;&gt;everything could go wrong&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;High speed I/O, such as at DDR rates and above, really requires for design
stability purposes that the outputs be registered and that they go through
a vendor specific I/O module, like &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/xioddr.v&quot;&gt;this one for
Xilinx&lt;/a&gt; or even
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/yaddrio.v&quot;&gt;this one for
Intel&lt;/a&gt;.
Registering the outputs, though, breaks all my logic above.  Registering the
inputs also costs another clock cycle.&lt;/p&gt;

&lt;p&gt;If this design hadn’t become “FrankenIP” yet, it was about to do so now.&lt;/p&gt;

&lt;p&gt;Yes, this was also the day I just gave up in frustration.  I had worked this
design to perfection, and now reality didn’t agree with me.&lt;/p&gt;

&lt;p&gt;The next day, though, I’d figured out how to move forward.&lt;/p&gt;

&lt;p&gt;The key is that only the inputs need to be delayed.  None of the control logic
above, &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_cs_n&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_sck&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_dat&lt;/code&gt;, is dependent upon
any inputs, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; are.  In other words, if I just
separated the read logic from the write logic by a programmable number of
clocks, then everything should work as before.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 34: Incoming traces are delayed by three clocks from outgoing logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-xilinx-reprise.svg&quot;&gt;&lt;img src=&quot;/img/qspi-xilinx-reprise.svg&quot; width=&quot;720&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s call this extra read delay, &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt;, and make it a parameter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// RDDELAY is the number of clock cycles from when o_qspi_dat is valid
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// until i_qspi_dat is valid.  Read delays from 0-4 have been verified.
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// DDR Registered I/O on a Xilinx device can be done with a RDDELAY=3
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// On Intel/Altera devices, RDDELAY=2 works
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// I&#39;m using RDDELAY=0 for my iCE40 devices
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way it should be easy to re-target this design from one device with one
I/O delay to another.&lt;/p&gt;

&lt;p&gt;The next step was to delay all of the input data processing.  If you recall,
the timing of the input data processing was dependent upon two signals:
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;read_sck&lt;/code&gt;–in addition to the more obvious &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; we set as soon as the clock counter reached zero.&lt;/p&gt;

&lt;p&gt;My first step, therefore, was to rename the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; logic so that it produced
an acknowledgment that would need to be delayed.  I called this new signal
&lt;code class=&quot;highlighter-rouge&quot;&gt;dly_ack&lt;/code&gt;.  If the &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; was zero, the two would be identical.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RDDELAY_NONE&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; was non-zero, I’d delay &lt;code class=&quot;highlighter-rouge&quot;&gt;dly_ack&lt;/code&gt; using a shift register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RDDELAY_NONZERO&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s a couple things to note about this logic.  First, if the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus master&lt;/a&gt;
aborts the transaction, then the acknowledgment delay shift register is set to
zero.  Second, if &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY==1&lt;/code&gt;, the delay is just a single clock delay.
Otherwise, we have to reference values from &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY-2&lt;/code&gt; down to zero.  My
original plan was to use Verilog’s rules of assignment:
If an N-bit value is assigned to a less-than N-bit register, the upper bits
are ignored.  Unfortunately, while this worked with some tools, it failed with
others.  Eventually, I came up with the logic above that has (so far) worked
in all of my tools.&lt;/p&gt;

&lt;p&gt;Finally, at the end of this shift, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; can be set to its delayed value.&lt;/p&gt;

&lt;p&gt;I then repeated this logic with the read clock, creating a new value I called
&lt;code class=&quot;highlighter-rouge&quot;&gt;actual_sck&lt;/code&gt; to describe the outgoing read clock, and then delayed &lt;code class=&quot;highlighter-rouge&quot;&gt;read_sck&lt;/code&gt;
to describe the sample time on the input.  Now, if I updated &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; on
our (now delayed) &lt;code class=&quot;highlighter-rouge&quot;&gt;read_sck&lt;/code&gt; signal, I could use the same logic as before.&lt;/p&gt;

&lt;p&gt;The sticky parts, however, turned out to be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
access.&lt;/p&gt;

&lt;p&gt;The first problem was that my set of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone formal interface
properties&lt;/a&gt;
counts the number of outstanding accesses, and in order to pass induction the
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash controller&lt;/a&gt;
controller has to assert that it’s own idea of how many accesses are
outstanding needs to match those of the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus interface
properties&lt;/a&gt;.
Once I delayed acknowledgments through this pipe, my counts were all off.  It
might be that, while processing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; read, some value gets
acknowledged from a prior read.&lt;/p&gt;

&lt;p&gt;Fixing this required maintaining a count of how many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
acknowledgments were in the pipeline.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes, I’ll admit to some amount of cringing as I created a for loop like this.
I’ve just told too many individuals &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;not to use for loops in their Verilog
code&lt;/a&gt;.  This
loop, on the other hand, is actually somewhat short and so, if you look at the
logic, it can be implemented with a simple lookup table.  Of course,
this value is also defined &lt;em&gt;only&lt;/em&gt; in the formal context, so I really don’t
need to be worried about meeting timing here either.&lt;/p&gt;

&lt;p&gt;Those were the easy changes.&lt;/p&gt;

&lt;p&gt;The harder change was the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus stall&lt;/a&gt;
signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At issue were the immediate acknowledgment signals, such as when you read from
the configuration register, or write to it without setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; pin
active.  Similarly, I grouped the attempts to write to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; memory in this group.  According
to our design above, all of these bus requests get acknowledged immediately.&lt;/p&gt;

&lt;p&gt;In addition, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; gets changed immediately following any configuration
write, and so the &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_mode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_cs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_dir&lt;/code&gt; and so forth bits get set
immediately upon the write.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tools&lt;/a&gt;
again showed me this bug: If I set the configuration state on a bus request
immediately following the read request, the outgoing read data might not match
what was read from the &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;.  This
would be a catastrophic error, violating the whole purpose in designing a &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;–even
if it would only ever be a very rare event.&lt;/p&gt;

&lt;p&gt;I solved this problem in two steps.  First, I adjusted the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;
logic to stall on any incoming request if &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; was greater than zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, I added a flag I called &lt;code class=&quot;highlighter-rouge&quot;&gt;xtra_stall&lt;/code&gt; to indicate that there was
an extra stall cycle, based upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; value that needed to be
placed into the cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xtra_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpre&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&#39;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;xtra_stall&lt;/code&gt; was true, the design would now wait for any
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus interactions&lt;/a&gt;
to clear the final pipeline before releasing the stall line.&lt;/p&gt;

&lt;p&gt;While the &lt;code class=&quot;highlighter-rouge&quot;&gt;xtra_stall&lt;/code&gt; calculation was simple if &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY==0&lt;/code&gt;, basically
&lt;code class=&quot;highlighter-rouge&quot;&gt;xtra_stall = 0&lt;/code&gt;, it was a touch more complicated otherwise.  The first problem
is that, unlike the acknowledgment, the extra stall had to be active if any
stall request was in the pipeline–not just if there was one at the end of the
pipeline.  After writing this logic over and over a couple of times, I eventually chose to make it work with a pipeline similar to that of the one necessary
for &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;synchronizing an asynchronous
reset&lt;/a&gt;.  Then this didn’t
work, I returned to a more traditional shift register configuration–such as
the one we used above.&lt;/p&gt;

&lt;p&gt;The first part of this logic set a value, &lt;code class=&quot;highlighter-rouge&quot;&gt;not_done&lt;/code&gt;, indicating that we’d
want to stall an additional cycle.  On any bus request, if &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY &amp;gt; 0&lt;/code&gt;, we’d
want to stall an additional cycle.  Second, if any interaction with the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
was ongoing, we’d want to stall an additional cycle.  This includes not only
those cases where we haven’t yet gotten to the last state of the transaction,
i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr &amp;gt; 1&lt;/code&gt;, but also those cases where we are on the last state, but
we’re taking multiple cycles there and we haven’t (yet) gotten to the last one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;stall_pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that this always block uses &lt;em&gt;blocking&lt;/em&gt; assignments, i.e. it uses the
&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; sign.  While I generally discourage the use of blocking assignments
within clocked always blocks, I use them religiously in any combinatorial
blocks–such as the one above.  The rule, though, is that you cannot create
a latch in the process.  Hence, the initial assignment that makes certain
&lt;code class=&quot;highlighter-rouge&quot;&gt;not_done&lt;/code&gt; always has at least some value.  Any subsequent assignments will
override that that initial one, and are primarily written that way just to
keep things simple and easy to read.&lt;/p&gt;

&lt;p&gt;Now, using this &lt;code class=&quot;highlighter-rouge&quot;&gt;not_done&lt;/code&gt; value, we can set the &lt;code class=&quot;highlighter-rouge&quot;&gt;stall_pipe&lt;/code&gt; and hence the
&lt;code class=&quot;highlighter-rouge&quot;&gt;xtra_stall&lt;/code&gt; value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;stall_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;stall_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;stall_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stall_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;stall_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;xtra_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stall_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that setting a value to &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, according to Verilog’s rules, will set
all the bits in &lt;code class=&quot;highlighter-rouge&quot;&gt;stall_pipe&lt;/code&gt;.  It &lt;em&gt;should&lt;/em&gt; do this without error or warning.
Sadly, Verific’s parser (used by the major vendors) will create a warning
regarding truncating a 32-bit value to &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; bits.  Still, it gets the
job done.&lt;/p&gt;

&lt;p&gt;The really fascinating part of this extension to handle I/O delays is how the
formal sequences can be adjusted to handle things.&lt;/p&gt;

&lt;p&gt;First, I expanded the various
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;
lengths by creating new length parameters
equivalent to the originals plus the new length,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_MEMACK&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_PIPEACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_PIPEDONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;p&gt;Then, I adjusted the driving loop to make it so that the first half of the
sequence proceeded at the rate of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; interface,
but the second half, the half counting our new RDDELAY clock extensions, at
the rate of the system clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RDDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This our prior code, ommitted here for brevity
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Advance the pipe whenever SCK advances
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above, as before, we step the whole register any time the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; clock moves us
forward to the next step in our sequence.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; is true, &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt; will
be true on every clock, and so this sequence will step forward on every clock.&lt;/p&gt;

&lt;p&gt;On the other hand, if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ODDR&lt;/code&gt; isn’t true, then we’ll step the new register
bits on every clock, rather than just once per &lt;code class=&quot;highlighter-rouge&quot;&gt;ckstb&lt;/code&gt; step above.  Therefore,
we’ll step the last &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; couple of steps at the full system clock speed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_ODDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MEMDONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Somethings don’t change.  We still need to start the sequence on any request
to read from &lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; memory, as long as
we aren’t already in the middle of a read, at which point we’d start the
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s sequence&lt;/a&gt;
for a pipelined read, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_piperead&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_memread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This might make more sense if you “saw” it in action, as shown in Fig. 35 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 35: Looking at `f_memread[]` when the incoming I/O is delayed by three clocks, RDDELAY=3&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/qspi-halfck-xdelay.svg&quot;&gt;&lt;img src=&quot;/img/qspi-halfck-xdelay.svg&quot; width=&quot;720&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Notice how, for the first several steps of the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_memread&lt;/code&gt; sequence, everything
takes two clocks.  Indeed, it is lined up with the output data lines,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_qspi_dat&lt;/code&gt;.  The incoming lines, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat&lt;/code&gt;, however are delayed by three
clocks, &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY=3&lt;/code&gt;.  This means that when, in the output time units, it would
be time to read &lt;code class=&quot;highlighter-rouge&quot;&gt;D[7:4]&lt;/code&gt;, the data aren’t yet on &lt;code class=&quot;highlighter-rouge&quot;&gt;i_qspi_dat[7:4]&lt;/code&gt;.  During
this time, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_memread&lt;/code&gt; transitions once every other clock.  Once it gets to
the end, at &lt;code class=&quot;highlighter-rouge&quot;&gt;f_memread[25]&lt;/code&gt; in this case, it starts transitioning on every
clock for &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; clocks (3 in this case).  Then, on the last clock,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_memread[28]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; is true.&lt;/p&gt;

&lt;p&gt;The same would play out in &lt;code class=&quot;highlighter-rouge&quot;&gt;f_piperead&lt;/code&gt;, the sequence for the continuation
read.  Here, in Fig. 35, you can see the beginning of the pipelined read, and so
the port stays active.  You may also notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_piperead&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_memread&lt;/code&gt;
are overlapping.  We already dealt with some of this above.&lt;/p&gt;

&lt;p&gt;Although these changes need to be applied to all of the various sequence
vectors, at this point that’s about all that’s left.&lt;/p&gt;

&lt;p&gt;Does this mean the design works?  Well, sure, it had all of its functionality
by this point, and it passed a &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;
check, but … did it &lt;em&gt;work&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Did this &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;design&lt;/a&gt;
work on its first time out?  Of course not, but it did come pretty close.  What
I’ve shared above is the result of my debugging
work, after all of the pain associated with getting it working.&lt;/p&gt;

&lt;p&gt;On the other hand, if you need to get a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
controller working, you might be curious about what it took to get this one
to work.&lt;/p&gt;

&lt;p&gt;Care to hear it?&lt;/p&gt;

&lt;p&gt;Most of the debugging took place over the configuration port, for the simple
reason that the configuration port offers the external user complete control
over the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
port, and hence complete control over the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;.
Even better, I was able to control the configuration port from the &lt;a href=&quot;/blog/2017/06/28/dbgbus-goal.html&quot;&gt;debugging
bus&lt;/a&gt;–allowing
me to script commands to be sent to the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;
and examine byte by byte any returns from the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step was to shut off the start up sequence, by setting
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_STARTUP=0&lt;/code&gt;.  This helps to keep the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
from interfering with our debugging work on the configuration port.&lt;/p&gt;

&lt;p&gt;Then, once the design was loaded, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; (my
&lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;PEEK-POKE&lt;/a&gt;
command when using the &lt;a href=&quot;/blog/2017/06/28/dbgbus-goal.html&quot;&gt;debugging
bus&lt;/a&gt;) to place the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;
into a mode where it would then respond to normal
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;
commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./wbregs flashcfg 0x0001100	&lt;span class=&quot;c&quot;&gt;# Activate config mode&lt;/span&gt;
./wbregs flashcfg 0x00010ff	&lt;span class=&quot;c&quot;&gt;# Send 16(x4) bits of ones, break the mode&lt;/span&gt;
./wbregs flashcfg 0x00010ff
./wbregs flashcfg 0x0001100	&lt;span class=&quot;c&quot;&gt;# Inactivate the port&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Incidentally, if you’d like to follow along, the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashid.sh&quot;&gt;script I used is still
present&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;OpenArty repository&lt;/a&gt;
where I started working with it.&lt;/p&gt;

&lt;p&gt;These commands &lt;em&gt;should&lt;/em&gt; place the flash into the right mode.  However, when
debugging this interaction, I had no real way of knowing (yet), since none of
these commands returned responses.&lt;/p&gt;

&lt;p&gt;The second step was to request the manufacturer ID from my device.  This is an 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;0x9f&lt;/code&gt;
command, after which every byte clocked through the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;
interface will return an additional byte of the ID–eventually returning not
only the manufacturer, but also the product number and the size of the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# echo READ-ID&lt;/span&gt;
./wbregs flashcfg 0x000109f     &lt;span class=&quot;c&quot;&gt;# Issue the read ID command&lt;/span&gt;
./wbregs flashcfg 0x0001000     &lt;span class=&quot;c&quot;&gt;# Read the ID&lt;/span&gt;
./wbregs flashcfg
./wbregs flashcfg 0x0001000     &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
./wbregs flashcfg
./wbregs flashcfg 0x0001000     &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
./wbregs flashcfg
./wbregs flashcfg 0x0001000     &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
./wbregs flashcfg
./wbregs flashcfg 0x0001100     &lt;span class=&quot;c&quot;&gt;# End the command&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you remember from our &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;previous discussions of
wbregs&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs address data&lt;/code&gt; writes &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; to the address given by &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt;,
whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs address&lt;/code&gt; reads the value from &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt; and returns it
as a result.  Hence, this set of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;
commands first writes &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h9f&lt;/code&gt; to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt; port,
then writes &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h00&lt;/code&gt; to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt; port
and reads the returned result.
This is then repeated three more times, before we issue the command to
deactivate &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;, while yet leaving the configuration port active.  (Remember
the bit fields definitions from Fig. 27 above?)&lt;/p&gt;

&lt;p&gt;If all goes well, at this point the number should match those from the
data sheet for your
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my case, things didn’t go quite so well.&lt;/p&gt;

&lt;p&gt;No, this didn’t surprise me either.  While I had verified much of the
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;controller&lt;/a&gt;’s
functionality, I hadn’t verified that the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/xioddr.v&quot;&gt;Xilinx I/O
driver&lt;/a&gt;
was working with this design.  As it turns out, there were some other bugs in
the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/micron.txt&quot;&gt;AutoFPGA configuration
script&lt;/a&gt;
for the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
as well.&lt;/p&gt;

&lt;p&gt;I didn’t discover this, though, until I picked 32’bits to run through my
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone Scope&lt;/a&gt;, and looked at the resulting
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_last_cfg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_last_cfg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_dbg_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_last_cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_dbg_trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//6
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 8
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_cs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_speed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 8
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; is worth a thousand LEDs in so many ways.&lt;/p&gt;

&lt;p&gt;Further, because the commands were separated so far apart in time, I used the
&lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/wbscopc.v&quot;&gt;compressed version of the Wishbone
scope&lt;/a&gt;,
and so I was still able to capture (roughly) the entire ad-hoc interaction.&lt;/p&gt;

&lt;p&gt;Once I fixed the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/micron.txt&quot;&gt;AutoFPGA configuration
script&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/xioddr.v&quot;&gt;I/O drivers&lt;/a&gt;
started working and I could now read an ID from the port.  Exciting, no?&lt;/p&gt;

&lt;p&gt;The problem was that it was the wrong ID.  Looking at the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; again, I could
see that the right ID was getting returned, only that I had the wrong
&lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY&lt;/code&gt; value.  This helped me get the final shifting for the ID right, so
it was now &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20ba1810&lt;/code&gt; as I was expecting.&lt;/p&gt;

&lt;p&gt;By the way, if you ever have to do debug this kind of interaction, I cannot
recommend highly enough that you use this known ID value.  The
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; returned from
the manufacturer ID request confirmed for me that my normal
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;
transmit was working, and I could read off how to get the manufacturer ID back
out.&lt;/p&gt;

&lt;p&gt;However, when I turned &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_STARTUP&lt;/code&gt; back on, rebuilt the updated design and
loaded it onto the board–it still wasn’t working.&lt;/p&gt;

&lt;p&gt;At this point, I switched to simulation–just to check that the design was
running &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_STARTUP&lt;/code&gt; like it was supposed to.  (In hind sight, I should’ve
&lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;started with
simulation&lt;/a&gt;
as soon as I was done with my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal proof&lt;/a&gt;.)
As you may recall, I had [formally
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified&lt;/a&gt;
almost all of the core–but not the startup sequence.  I had committed that to
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.
Sure enough, looking at the
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
generated &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; showed that
startup sequence logic wasn’t doing what I wanted.&lt;/p&gt;

&lt;p&gt;Once fixed, I went back and ran the design on the board again.  When the design
still didn’t work, I returned to the &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt; data sheet
to see if I was missing anything.&lt;/p&gt;

&lt;p&gt;As it turns out, when using the
&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt; flash, you need to enable the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
mode before entering into it &lt;em&gt;every time&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;How did I figure this out?  By using the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashid.sh&quot;&gt;flashid.sh&lt;/a&gt;
script again.  This time, after assuring myself that the manufacturer’s ID
was (still) correct, I read the status register.  This looked good.  I read
the flag status register.  This looked good again.  (Yes, I am trying to read
random status registers from the chip to see what’s going on.)  Reading the
Non-volatile configuration register showed that I had not activated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
I/Os.  I wrote a new value to this register.  It didn’t change.  I tried again,
this time adding the “Write-Enable” command first.  Now it changed.  Now,
when I sent the commands to enter
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
XIP I/O read mode it worked!&lt;/p&gt;

&lt;p&gt;I quickly scripted up a &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp&quot;&gt;C++ &lt;code class=&quot;highlighter-rouge&quot;&gt;erase_sector&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FLASHDRVR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase_sector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Remove us from QSPI mode
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;take_offline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send a write enable
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_WREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SZPAGEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the erase sector command to the configuration port
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Erasing sector: %06x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_SE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFG_USERMODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFG_USERMODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFG_USERMODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Wait for the erase to complete
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;flwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Turn quad-mode read back on, so we can read next
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;place_online&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Now, let&#39;s verify that we erased the sector properly
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify_erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ... skipped for brevity
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I scripted up a &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp&quot;&gt;C++ &lt;code class=&quot;highlighter-rouge&quot;&gt;page_program&lt;/code&gt; command&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FLASHDRVR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SZPAGEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bswapd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SZPAGEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ... Skipping preliminary checks for good measure here
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Write enable
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_WREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write the page
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Issue the page program command
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_PP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// The address of the page to be programmed
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFG_USERMODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFG_USERMODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFG_USERMODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Write the page data itself
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;CFG_USERMODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFG_WEDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Writing page: 0x%08x - 0x%08x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fflush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Wait for the write to complete
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;flwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Turn quad-mode read back on, so we can verify the program
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;place_online&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Skipped for brevity
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sure enough, I was now able to erase and then program my first
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;
(a &lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;) using &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this new
controller&lt;/a&gt;
with &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp&quot;&gt;this C++
driver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My excitement, however, was short lived.&lt;/p&gt;

&lt;p&gt;It only &lt;em&gt;mostly&lt;/em&gt; worked.&lt;/p&gt;

&lt;p&gt;I increased the drive strength on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
pins in question.&lt;/p&gt;

&lt;p&gt;Now it worked better, but still not consistently enough.&lt;/p&gt;

&lt;p&gt;The problem was that every now and then, the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;
would fail to return the data I had written to it.
On a second read, however, it would then read the right value.  This suggested
to me that there may have been a synchronization problem between the two.&lt;/p&gt;

&lt;p&gt;At this point, I started rolling up my sleeves to build a synchronization
circuit to capture the bits in the middle of the eye.  This would’ve been quite
a fun project, and a fun one to blog and explain about.&lt;/p&gt;

&lt;p&gt;Perhaps to my relief, perhaps to my displeasure, someone was kind enough to
point out on twitter that the
&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;
had options for impedance matching that could be quite important at high speeds.
The first change I made fixed everything.&lt;/p&gt;

&lt;p&gt;Bummer.  That synchronization post would’ve been fun.  I might still write one
later, but for another purpose.&lt;/p&gt;

&lt;p&gt;Of course, I then had to go back and adjust my startup script to include this
new setup command.&lt;/p&gt;

&lt;p&gt;You might also note, I would test changes to the startup script first
using the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashid.sh&quot;&gt;flashid.sh&lt;/a&gt;
shell script.  (Yes, I &lt;em&gt;love&lt;/em&gt; the capability the &lt;a href=&quot;/blog/2017/06/28/dbgbus-goal.html&quot;&gt;debugging
bus&lt;/a&gt;
offers for scripting unknowns together to find a solution.)&lt;/p&gt;

&lt;p&gt;The good and relieving news was that it all worked.  I could now run my
favorite &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board&quot;&gt;demonstration
software&lt;/a&gt; on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; again.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I’ve now tested this new controller with both a 
&lt;a href=&quot;https://www.micron.com&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt; as well as a 
&lt;a href=&quot;https://www.winbond.com/hq/?_locale=en&quot;&gt;Winbond&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chip&lt;/a&gt;.  I’ve also tested a &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/dualflexpress.v&quot;&gt;sister
controller&lt;/a&gt;
to this one that uses Dual SPI mode (two data bits, not four, using
both MISO and MOSI in a bidirectional fashion)–all with great success.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 36: Flash controller logic usage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/qspi-gates.png&quot; width=&quot;360&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Even better, in spite of all the logic we dumped into this core, it still builds
into a rather small footprint, as shown in Fig. 36 to the right.  In this
figure, the first line shows the number of CMOS gates, in total, that would be
used by this core with all options on, &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY=0&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CLKDIV=7&lt;/code&gt;.  The
second line is the same, but limited to measuring the number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/NAND_gate&quot;&gt;NAND&lt;/a&gt; gates the design would use,
were it to use nothing but
&lt;a href=&quot;https://en.wikipedia.org/wiki/NAND_gate&quot;&gt;NAND&lt;/a&gt; gates,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip flops&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverter_(logic_gate)&quot;&gt;NOT&lt;/a&gt; gates.
The third line, marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;iCE40&lt;/code&gt;, shows how many 4-input LUTs would be required
by a design with &lt;code class=&quot;highlighter-rouge&quot;&gt;RDDELAY=0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CLKDIV=0&lt;/code&gt;.  This may be a rather
misleading statistic, though, since &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
is known to pack logic into the reset circuitry present in the iCE40
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip flops&lt;/a&gt;.
The last line is a conservative estimate of the number of 6-input LUTs that
would be required in a &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; design–the actual
number is likely going to be much lower.  Even in that case, it looks like
we’ve done pretty well!  Indeed, &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this
controller&lt;/a&gt;
has a small logic foot print, just as we had desired from the beginning.&lt;/p&gt;

&lt;p&gt;All that said, wow, that was a lot of ground to cover!  We’ve now gone over
most of the
details in &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this flash
controller&lt;/a&gt;
from the ground up.  We discussed the basic requirements of a good
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash&lt;/a&gt; controller, and
how to build one that ran at a high speed.  Yes, this does run roughly twice
the speed of the &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; default
flash controller–if your board allows you to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; pin in ODDR mode.
We also went though how to then modify that initial basic controller that we
started with to handle burst reads, getting into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect#Quad_SPI&quot;&gt;QSPI&lt;/a&gt;
XIP read mode in the first place, sending arbitrary commands to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interconnect&quot;&gt;SPI&lt;/a&gt;,
and even how to handle I/O delays from using registered I/Os.  Once we were
finished, I discussed all of the steps necessary to debug &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this new flash
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No, I haven’t discussed the vendor specific I/O drivers.  You should be able
to find a decent discussion of them in the respective vendor literature.
Instead, I’m trying to keep this blog somewhat vendor independent.&lt;/p&gt;

&lt;p&gt;In practice, while I really like how easy it is to port &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this flash
controller&lt;/a&gt;
from one design to the next, the &lt;a href=&quot;/blog/2017/06/28/dbgbus-goal.html&quot;&gt;debugging
bus&lt;/a&gt; that this depends
upon is horrendously slow.  Particularly slow are the steps necessary to
determine if an erase step is required, or to determine that either the
erase or programming steps were successful.  Both of these are ideal tasks
for a small program running within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
so if we continue this discussion that might be where we end up next.&lt;/p&gt;

&lt;p&gt;Also, as more of a side note, I don’t normally write blog articles this long.
This has taken several weeks to write, and is likely going to take you a long
time to read.  My apologies to you if this isn’t what you are looking for.  I’ll
try to keep future posts shorter.  That said, my prayer for you is that this
post will all be worth your while as well, so that you might either trust
my own “Universal” &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
now, or if not that you would at least have a good idea of where to start from
when building your own.&lt;/p&gt;

&lt;p&gt;One final note, there’s a reason why I’m calling this a “Universal” &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;,
controller, with the “Universal” in quotations.  As currently built, &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;this
controller&lt;/a&gt;
will be able to properly interact with all of the
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash chips&lt;/a&gt; I’ve seen to date.
However, I haven’t tested it on &lt;em&gt;every&lt;/em&gt; chip in order to be able to prove that
it truly is &lt;em&gt;Universal&lt;/em&gt;.  Moreover, I am aware of other classes of
&lt;a href=&quot;https://en.wikipedia.org/Flash_memory&quot;&gt;flash devices&lt;/a&gt; for which I already know
this controller will not work.  Still, I like the term “Universal”–even if I
have to place it in quotation marks.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;God, who at sundry times and in divers manners spake in time past unto the fathers by the prophets, Hath in these last days spoken unto us by his Son, whom he hath appointed heir of all things, by whom also he made the worlds (Heb 1:1)&lt;/em&gt;</description>
        <pubDate>Wed, 27 Mar 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/03/27/qflexpress.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/03/27/qflexpress.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Introducing the ArrowZip ZipCPU design, featuring the Max-1000</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The Max 1000&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/max1k-picture.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, I
&lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;wrote about the Max-1000 board&lt;/a&gt;
sold by &lt;a href=&quot;https://shop.trenz-electronic.de&quot;&gt;Trenz&lt;/a&gt; and distributed
in the US by &lt;a href=&quot;https://www.arrow.com&quot;&gt;Arrow&lt;/a&gt;.  In
&lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;that post&lt;/a&gt;, I discussed
some of the problems associated with getting a design running on the
board, but also discussed its utility.&lt;/p&gt;

&lt;p&gt;Indeed, &lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;for $30, the Max-1000
board&lt;/a&gt; is a nice entry board
for beginners — once you get past the difficulty associated with building
and loading a design onto the board, and once you get past the difficulty of
getting an &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;
to work on the board.&lt;/p&gt;

&lt;p&gt;For all of these reasons and more, I thought it might be a fun board to build
a demonstration design with.  Better yet, as of last week, &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the
design&lt;/a&gt; appears to be working!  Yes,
working:
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash controller&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM controller&lt;/a&gt;,
and indeed everything but the
&lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;accelerometer&lt;/a&gt;.
(That’s still on my TODO list.)&lt;/p&gt;

&lt;p&gt;Shall we take a walk through the various parts of &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the
repository&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;lets-play&quot;&gt;Let’s Play!&lt;/h2&gt;

&lt;p&gt;Let’s start out with a quick list of things you can do (currently) with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; as found in &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the ArrowZip
repository&lt;/a&gt; of mine.&lt;/p&gt;

&lt;p&gt;First, there’s the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;.
We’ve &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;met this program
before&lt;/a&gt;.
It’s somewhat of a relic of time past when I used it to verify that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; worked at all.  Now, most
of the CPU testing is done via
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formal methods&lt;/a&gt;, but
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;this test&lt;/a&gt;
remains.  It’s usually the first program I will place onto a new
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
design.  As such, it runs from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
only.  To run this &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;from
simulation&lt;/a&gt;,
build the design (i.e. run &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;
in the root directory) and then go into the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sim/verilated&quot;&gt;sim/verilated&lt;/a&gt;
directory, and run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;main_tb ../../sw/board/cputest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will take a moment to run, and a bit longer to handle the multiplication
test, but pretty soon you’ll see the “All tests passed.  Halting CPU.” line.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;center&quot;&gt;&lt;caption&gt;Fig 2. The Basic ZipCPU Self-Test Output&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/arrowzip-cputest.png&quot;&gt;&lt;img src=&quot;/img/arrowzip-cputest.png&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you want to capture a trace of the entire run, just add “-d” to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;main_tb&lt;/code&gt; command line and run,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;main_tb -d ../../sw/board/cputest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;trace.vcd&lt;/code&gt; file in your current directory that you can
view using &lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;.  Be prepared for it
to take a while, and to use more than 25GB of your hard drive.&lt;/p&gt;

&lt;p&gt;On the other hand, if you want to load and test the design on
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;the FPGA board&lt;/a&gt;
itself, you’ll need to first build and load the design &lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;as discussed
earlier&lt;/a&gt;,
and then run
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;netuart&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;bridge the serial port to a pair of network
ports&lt;/a&gt;.  If we
assume the serial port connected to this device is at &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyUSB0&lt;/code&gt;, then you
would run
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;netuart&lt;/a&gt;
from the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;sw/host
directory&lt;/a&gt; as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;netuart /dev/ttyUSB0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;this
program&lt;/a&gt;
is running, you will be able to &lt;a href=&quot;/blog/2017/06/26/dbgbus-verilator.html&quot;&gt;access the design through
the debugging bus&lt;/a&gt;
on &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;TCP port &lt;code class=&quot;highlighter-rouge&quot;&gt;6955&lt;/code&gt; and the serial port on TCP
port &lt;code class=&quot;highlighter-rouge&quot;&gt;6956&lt;/code&gt;&lt;/a&gt;.
Hence, to interact with the design, you’ll want to telnet to port 6956.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;telnet localhost 6956&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now load the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;
into the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and start it,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./zipload -r ../board/cputest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;
finishes almost instantaneously now–once it finishes getting loaded onto
the board.&lt;/p&gt;

&lt;p&gt;This is interesting, but what else can we do?&lt;/p&gt;

&lt;p&gt;We can test our &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM
memory&lt;/a&gt;
using a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/memtest.c&quot;&gt;memory test
program&lt;/a&gt;
created just for that purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./zipload -r ../board/memtest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/memtest.c&quot;&gt;This program&lt;/a&gt;
is a bit more confusing than the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;,
since it doesn’t use the serial port
interface.  It works by writing to memory and then reading back from memory
as part of one of four tests.  After each test, the LEDs are adjusted, and
after the last test the fourth LED is toggled and the test is restarted.  If
at any time the value read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
doesn’t match the pseudorandom data that was written to it, all LEDs will be set
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt; will halt.
I would then bring up the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in the (very basic)
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
to see what happened, although by now it should “just work” in case you wish
to try it.&lt;/p&gt;

&lt;p&gt;The third piece of &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; software is
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/hello.c&quot;&gt;This program&lt;/a&gt;
runs from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
As before, the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipload.cpp&quot;&gt;zipload&lt;/a&gt; program can be used to load this program into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./zipload -r ../board/hello&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will take some time to program this design into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  To understand this
extended time, remember that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;
works by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First searching for any sectors (64kB each) that need to be erased (i.e. bits
that need to be flipped from zero to one), and then&lt;/li&gt;
  &lt;li&gt;Erasing those sectors, and so turning all the bits to ones.&lt;/li&gt;
  &lt;li&gt;Once the erase is complete, the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;
  will re-read from the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
  device to make certain that the erase has been successful.&lt;/li&gt;
  &lt;li&gt;If the erase was successful, the
  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;
  will proceed page by page, i.e. 256 bytes at a time) through the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
  If any bit needs to be “programmed”, that is if it needs to be flipped from
  a one to a zero, then the whole 256-byte page will be programmed and then&lt;/li&gt;
  &lt;li&gt;Read back again to verify the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
  design load.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a bit of a challenge on the low-logic serial port interface I call the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;Hexbus&lt;/a&gt;.  Each byte
needs to be read either once or twice to check the erase,
and then read twice and written once for the program section.  While the reads
are done 32-bits at a time, transmitted using more than 80 bit intervals, the
writes are done 8-bits at a time and transmitted using more than 80 bit
intervals per byte.  This is horribly inefficient, and I’m already considering
ways to optimize this in the future.&lt;/p&gt;

&lt;p&gt;Once the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; program,
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;,”
is written to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the design&lt;/a&gt; will
start running, and will write out,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, World!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to the serial port and thus to the TCP/IP port 6956.&lt;/p&gt;

&lt;p&gt;These are the three current &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
examples I’ve written to date for this design.&lt;/p&gt;

&lt;p&gt;There’s a lot more that can be done with this design that I haven’t (yet) done
with it.  For example, the
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;MAX-1000 board&lt;/a&gt;
has a &lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;3-axis nano accelerometer&lt;/a&gt; on board.  I’ve thought about using
&lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;this accelerometer&lt;/a&gt;
to create a level sensor.  I’ve also thought about using this design as an
unlicensed
&lt;a href=&quot;https://github.com/ZipCPU/wbfmtx&quot;&gt;FM transmitter&lt;/a&gt;.  Last time I did that,
I used a &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA-LX25 board&lt;/a&gt; to do it,
and struggled with maintaining a non-standard configuration of my project.&lt;/p&gt;

&lt;p&gt;Perhaps I should just teach the design to play &lt;a href=&quot;https://github.com/ZipCPU/tttt&quot;&gt;4x4x4
Tic-Tac-Toe&lt;/a&gt; as we did with
the &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;ZBasic (simulation only)
design&lt;/a&gt; before it?&lt;/p&gt;

&lt;p&gt;The possibilities are endless!&lt;/p&gt;

&lt;h2 id=&quot;command-line-access&quot;&gt;Command line access&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;The design&lt;/a&gt; and the components within it
can also be accessed externally via &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;C++
calls&lt;/a&gt;.  It’s been
a while since &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;I
discussed&lt;/a&gt;
the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/devbus.h&quot;&gt;DEVBUS
interface&lt;/a&gt;
that I use, but since that time &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/devbus.h&quot;&gt;the
interface&lt;/a&gt; has
hardly changed.  My design still supports reading from and writing
to the memory and peripheral address space within the design from external
C++ host programs.&lt;/p&gt;

&lt;p&gt;For example, there’s a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/dumpflash.cpp&quot;&gt;dumpflash&lt;/a&gt;
program in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;sw/host&lt;/a&gt;
directory.  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/dumpflash.cpp&quot;&gt;This
program&lt;/a&gt;
reads and dumps the state of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
to a file on your host system.  It is centered around a single line calling the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/devbus.h&quot;&gt;DEVBUS
interface&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define	DUMPMEM		FLASHBASE
#define	DUMPWORDS	(FLASHLEN&amp;gt;&amp;gt;2)
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
// ...
//
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// One single call to the DEVBUS interface to read from the
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// flash in the design
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMPMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;byteswapbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, we could split our massively long 8MB data read into multiple
reads, and read (and dump) one portion of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
at a time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Alternatively
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMPMEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01ffc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01ffc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;~&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1ffc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;The design&lt;/a&gt;
also supports a command line interface using the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/wbregs.cpp&quot;&gt;wbregs command&lt;/a&gt; we
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;spoke of before&lt;/a&gt;.
Basically, “wbregs address” will read from the given address
and return the result to the command line.  “wbregs address data” will similarly
write the value “data” to the given “address”.  What might you do with this?&lt;/p&gt;

&lt;p&gt;The first thing I did with this was to try to debug my brand new &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;This
controller&lt;/a&gt; is part of my new
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;“Universal flash controller”
project&lt;/a&gt;, and now marks the second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip that works with this
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;new controller design&lt;/a&gt;.
You can see the string of test commands I sent to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashid.sh&quot;&gt;flashid.sh&lt;/a&gt;
script.  Only once I got the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
to the point where I could successfully read the
manufacturer’s ID from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
did I then move towards replacing this script with a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashid.cpp&quot;&gt;C++ program to do the
same thing–only faster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could also have some fun and play with our &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch
peripheral&lt;/a&gt;.
Writing a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the LSB starts the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;,
writing &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to the LSB stops it, and
writing bit 1 (i.e. a two) will clear the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch 1    &lt;span class=&quot;c&quot;&gt;# Start the stopwatch peripheral&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt; 00000001
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 2 &lt;span class=&quot;c&quot;&gt;# Wait two seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# Read from the stopwatch&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 80000202
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 6 &lt;span class=&quot;c&quot;&gt;# Wait six more seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# Read from the stopwatch again&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 80000806
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 2 &lt;span class=&quot;c&quot;&gt;# Wait another two seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch 0  &lt;span class=&quot;c&quot;&gt;# Stop the stopwatch&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# Read, now that it has stopped&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 00001009
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch 2  &lt;span class=&quot;c&quot;&gt;# Clear the stop watch&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt; 00000002
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# and read it one final time&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 00000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Binary-coded_decimal&quot;&gt;Binary-Coded Decimal (BCD)&lt;/a&gt;
based
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;.
The numbers given are in the form of HHMMSSmm,
or hours, minutes, and seconds, followed by tens of milliseconds.&lt;/p&gt;

&lt;p&gt;We could also set the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtctimer.v&quot;&gt;timer&lt;/a&gt; associated with the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer 0x00130  &lt;span class=&quot;c&quot;&gt;# Set the timer to count-down a minute and a half&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt; 00000130
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer          &lt;span class=&quot;c&quot;&gt;# Immediately read how far its counted&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...0] 01000130
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 75                &lt;span class=&quot;c&quot;&gt;# Wait 75 seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer          &lt;span class=&quot;c&quot;&gt;# ... and read again&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 01000015
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 15                &lt;span class=&quot;c&quot;&gt;# Wait 15 seconds for it to finish&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer          &lt;span class=&quot;c&quot;&gt;# Now read, and notice the alarm bit is set&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 02000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For now, let’s back up and discuss a bit more about the composition of the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip repository&lt;/a&gt;
and the files within it, especially since this repository mirrors so many of
my other &lt;a href=&quot;/projects.html&quot;&gt;project&lt;/a&gt;
repositories–should you be interested in wandering around and exploring.&lt;/p&gt;

&lt;h2 id=&quot;autofpga-scripts&quot;&gt;AutoFPGA Scripts&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;The ArrowZip repository&lt;/a&gt;
is one of now several demonstration
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
repositories [&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;1&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;2&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;3&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;4&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/dev&quot;&gt;5&lt;/a&gt;].  You can find the basic
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration scripts in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data&quot;&gt;auto-data/&lt;/a&gt;
directory.  As you may recall from my &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;introduction to AutoFPGA
article&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
connects independent components together into a design.  The goal is to compose
a design from components that can be added or removed from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line,
with the details of how to connect a component found in the various
configuration files.  Don’t want a component?  Remove it from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line!  Want to add one in?  Add a configuration file, and add it to the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line.&lt;/p&gt;

&lt;p&gt;Indeed, if you look at the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/Makefile&quot;&gt;Makefile&lt;/a&gt;
found within the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data&quot;&gt;configuration
directory&lt;/a&gt;,
you’ll find a series of components used by the design.&lt;/p&gt;

&lt;p&gt;I recently rebuilt how these files were placed onto the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line.  Here’s the current list of components in a
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;Makefile&lt;/a&gt; format.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; global.txt dlyarbiter.txt
&lt;span class=&quot;nv&quot;&gt;AUX&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; version.txt buserr.txt pic.txt pwrcount.txt
&lt;span class=&quot;nv&quot;&gt;IO&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; spio.txt
&lt;span class=&quot;nv&quot;&gt;RTC&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; rtclight.txt
&lt;span class=&quot;nv&quot;&gt;DBGBUS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; hbconsole.txt
&lt;span class=&quot;nv&quot;&gt;MEMORY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; bkram.txt flexpress.txt sdram.txt
&lt;span class=&quot;nv&quot;&gt;CPU&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; zipbones.txt
&lt;span class=&quot;nv&quot;&gt;SCOPES&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# flashscope.txt # sdramscope.txt # cpuscope.txt&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LDSCRIPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; mem_all.txt mem_flash_bkram.txt mem_bkram_only.txt mem_sdram_bkram.txt
&lt;span class=&quot;nv&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; clock.txt &lt;span class=&quot;nv&quot;&gt;$(BASE)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(AUX)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(IO)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTC)&lt;/span&gt;			&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(DBGBUS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(MEMORY)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(SCOPES)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(LDSCRIPT)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;AUTOFPGA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; autofpga
&lt;span class=&quot;nl&quot;&gt;$(AUTOFPGA)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(AUTOFPGA) $(DATA)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(AUTOFPGA)&lt;/span&gt; -d -o . &lt;span class=&quot;nv&quot;&gt;$(DATA)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The components of this design are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/global.txt&quot;&gt;global.txt&lt;/a&gt;:
A set of global variable declarations, applying to the whole design&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/dlyarbiter.txt&quot;&gt;dlyarbiter.txt&lt;/a&gt;:
For timing reasons, both the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
can’t drive the bus at the same time without a
&lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;single clock delay&lt;/a&gt;.  This component
includes a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/wbpriarbiter.v&quot;&gt;bus arbitration core&lt;/a&gt;
to determine which of the two
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;
gets access to the bus, followed by a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/busdelay.v&quot;&gt;bus delay&lt;/a&gt;
to keep the &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;clock speed up&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’ll admit, this is a bit clumsy, so I’m now investigating whether or not I
can use &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to connect multiple masters up to a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’ll keep you posted on that project as it moves along.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/version.txt&quot;&gt;version.txt&lt;/a&gt;:
Ever had a time when you became quite frustrated that a design
wasn’t working, only to discover you never loaded the changes onto the
device?  The
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/version.txt&quot;&gt;version.txt&lt;/a&gt;
configuration places two single-address register components on the bus,
allowing me to determine when the design was built, as well as whether
the design is running in simulation or on the hardware.&lt;/p&gt;

    &lt;p&gt;Yes, I did get burned multiple times when testing this design.  I was first
burned by not reloading the “program device” dialogue box in
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/overview.html&quot;&gt;Quartus&lt;/a&gt;, and
so it would continue reloading the prior design.  I was burned again later
after making changes and then loading a design onto the board, only to see
no changes to the design.  In that case, I was &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;interacting
with&lt;/a&gt; the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulated&lt;/a&gt;
design, which hadn’t gotten updated.
Ever since, this read-only register has been modified with a flag telling
me that it is &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;running in
simulation&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/buserr.txt&quot;&gt;buserr.txt&lt;/a&gt;:
One of the frustrating parts of debugging is trying to figure
out what caused the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
This component simply records the address
of the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
allowing me to read it out later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;pic.txt&lt;/a&gt;:
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;The MAX-1000&lt;/a&gt;
is a rather small
FPGA.  Normally, I would place a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/icontrol.v&quot;&gt;programmable interrupt controller
(PIC)&lt;/a&gt;
right next to the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and ship it
with what I call the
“&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZipSystem&lt;/a&gt;”,
containing a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/icontrol.v&quot;&gt;PIC&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;performance
counters&lt;/a&gt;
and more.  However, if space is tight, I have to rapidly
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;shed weight&lt;/a&gt;.  After
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;sheding the weight&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
system that remains has only one
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/icontrol.v&quot;&gt;PIC&lt;/a&gt;,
and that is external to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pwrcount.txt&quot;&gt;pwrcount.txt&lt;/a&gt;:
Sometimes you need to sequence things on startup.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;pwrcount&lt;/code&gt; component is nothing more than a 32-bit counter that keeps track
of the number of clocks since startup.  Once the counter overflows, the MSB
is held high and the rest of the counter just keeps going.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/spio.txt&quot;&gt;spio.txt&lt;/a&gt;:
Here’s where I will place any &lt;a href=&quot;/blog/2017/08/09/series-debouncing.html&quot;&gt;button&lt;/a&gt;, switch, and/or LED
processing.  In the case of the
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;MAX-1000&lt;/a&gt;,
there are two buttons, 8-LEDs, and no switches.  Of those two buttons, only
one is user accessible, and so that’s the one coming into &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/spio.v&quot;&gt;this design
component&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/rtclight.txt&quot;&gt;rtclight.txt&lt;/a&gt;:
Offers me access to a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Binary-coded_decimal&quot;&gt;BCD&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtctimer.v&quot;&gt;count-down timer&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;,
(with 10ms precision), and
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcalarm.v&quot;&gt;alarm&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The basic &lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time core&lt;/a&gt; has been
around for quite some time, however I only recently took the time to split
it into its various component structures and to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
that all of them work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/hbconsole.txt&quot;&gt;hbconsole.txt&lt;/a&gt;:
This component adds the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
to the design, offering me access
into the design to read from or write to any component.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/hbconsole.txt&quot;&gt;This configuration file&lt;/a&gt;
also defines a console port that will be multiplexed with the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
over the serial port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/bkram.txt&quot;&gt;bkram.txt&lt;/a&gt;:
The &lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;MAX-1000&lt;/a&gt;
has three types of memory available to it.  The
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM memory&lt;/a&gt;,
defined by &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/bkram.txt&quot;&gt;this configuration
file&lt;/a&gt;,
is of course the fastest but most limited
memory.  As currently configured, the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt;
supports only 32768 bytes of memory, although
adjustments to this &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/bkram.txt&quot;&gt;configuration
file&lt;/a&gt;
can easily adjust that number down.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/memdev.v&quot;&gt;This block RAM component&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;has been formally
verified&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/flexpress.txt&quot;&gt;flexpress.txt&lt;/a&gt;:
This defines the interface to the (new)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;controller&lt;/a&gt;.
This also marks only the second time I’ve used my brand-new
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;“Universal” flash controller&lt;/a&gt;
in a project.&lt;/p&gt;

    &lt;p&gt;Yes, this
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;controller&lt;/a&gt;
has been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord wills&lt;/a&gt;, I’m hoping
to post about this “Universal”
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;flash controller&lt;/a&gt;
design in an upcoming article.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/sdram.txt&quot;&gt;sdram.txt&lt;/a&gt;:
This configures the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM controller&lt;/a&gt;.  When attached, the design
has access to the &lt;a href=&quot;https://www.winbond.com/resource-files/w9864g6jt_a03.pdf&quot;&gt;8MB SDRAM
chip&lt;/a&gt; on the
board.  Yes, the design works.&lt;/p&gt;

    &lt;p&gt;Even better, this
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM controller&lt;/a&gt;
has also been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;zipbones.txt&lt;/a&gt;:
Remember how I said this wasn’t the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZipSystem&lt;/a&gt;
distribution?
Without all of the peripherals kept next to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, I call the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
wrapper and interface to the rest of the design the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
since it is a bare-bones implementation of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  This &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;configuration file
component&lt;/a&gt;,
therefore connects the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; with
the rest of the design.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has been &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally
verified&lt;/a&gt;,
although I have not done the same with either the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt; or the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;
wrappers yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Scopes&lt;/a&gt;:
As I was working with this design to get it to work, I used one
of three
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;Wishbone Scope&lt;/a&gt;
configurations.  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/flashscope.txt&quot;&gt;One was for the flash&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/sdramscope.txt&quot;&gt;one for the SDRAM&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipscope.txt&quot;&gt;another for the CPU&lt;/a&gt;.
Since these aren’t permanent additions to the
design, they are currently commented out in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/Makefile&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Well, not quite.  I haven’t yet needed to use the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipscope.txt&quot;&gt;scope for the
ZipCPU&lt;/a&gt;
within &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;this project&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;Linker scripts&lt;/a&gt;:
There are four linker-script configuration files for the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip
repository&lt;/a&gt;, based upon four separate
memory configurations.  These were
designed to support first the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_bkram.txt&quot;&gt;minimal required memory necessary to test that
the CPU would work, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_bkram.txt&lt;/code&gt;&lt;/a&gt;, the next step up &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_flash_bkram.txt&quot;&gt;adding flash,
&lt;code class=&quot;highlighter-rouge&quot;&gt;mem_flash_bkram.txt&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_sdram_bkram.txt&quot;&gt;SDRAM and block RAM only, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_sdram_bkram.txt&lt;/code&gt;&lt;/a&gt;, and
finally the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_all.txt&quot;&gt;entire memory architecture on the board, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_all.txt&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given all of &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data&quot;&gt;these various configuration
files&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
creates the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/topleve.v&quot;&gt;toplevel.v file&lt;/a&gt;
of &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt;.  This contains both
simulatable and non-simulatable components, and sometimes even vendor
specific components.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;The main.v file&lt;/a&gt;
of the design is the top level
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulatable&lt;/a&gt;
component.  This is the file upon which
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;verilator&lt;/a&gt;
is run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/main_tb.cpp&quot;&gt;sim/main_tb.cpp&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/testb.h&quot;&gt;sim/testb.h&lt;/a&gt;
are the two main simulation files which, when coupled with simulators for the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/dbluartsim.cpp&quot;&gt;serial port&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/flashsim.cpp&quot;&gt;flash&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/sdramsim.cpp&quot;&gt;SDRAM&lt;/a&gt;
form the basis for &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulating the design in a cycle accurate
fashion&lt;/a&gt; using
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;verilator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/board.h&quot;&gt;sw/zlib/board.h&lt;/a&gt;
describes the various peripherals within
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt; in a C-language friendly
way for any &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; programs to use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/regdefs.h&quot;&gt;sw/host/regdefs.h&lt;/a&gt;
maps C-language identifiers to their corresponding addresses within
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt;.  A similar
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/regdefs.cpp&quot;&gt;sw/host/regdefs.cpp&lt;/a&gt;
file matches command-line identifiers to these C-language identifiers, so
you can read from or write to
peripheral memory on a command line using
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/wbregs.cpp&quot;&gt;wbregs&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removing any one of the component files will update the files above, and leave
behind a working design without that component.  Likewise, adding a component
will do the same.&lt;/p&gt;

&lt;p&gt;At least, that’s how simple it is &lt;em&gt;supposed&lt;/em&gt; to be.  Unfortunately, I’ve
discovered several important parts of a design that don’t fit into this
methodology very well.  The biggest/worst culprit is clock generation.  If
your design needs multiple clocks, you’ll usually want to generate them from
a common/single PLL (if possible).  However, PLLs can be limited, and this
form of design generation would place all of the PLLs in separate component
files.  To handle this, there is a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/clock.txt&quot;&gt;clock.txt&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration file to generate all of the clocks used within the design.
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/&quot;&gt;This design&lt;/a&gt;
uses only two clocks–one for the system, and one for the external
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
memory interface.&lt;/p&gt;

&lt;p&gt;The second problem the approach currently has is that it doesn’t handle
multiple
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;s
very well (yet).  As such, the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/dlyarbiter.txt&quot;&gt;dlyarbiter.txt&lt;/a&gt;
handles merging the two
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;s,
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
into a single
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus master&lt;/a&gt;.
Were &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/dlyarbiter.txt&quot;&gt;this component&lt;/a&gt;
removed, &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt;
would be broken and unable to operate.&lt;/p&gt;

&lt;p&gt;Still, I like how easy it is to reconfigure things using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verilog-components&quot;&gt;Verilog Components&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. ArrowZips HDL directory structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/arrowzip-rtld.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;All of the various HDL (i.e. Verilog) components within the design can be
found in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl&quot;&gt;rtl&lt;/a&gt;
directory.&lt;/p&gt;

&lt;p&gt;Building the components of this system took a couple passes, though.  So the
first (very basic) designs can be found in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/simple&quot;&gt;rtl/simple&lt;/a&gt;
directory.  The demonstration design there includes not only an HDL based
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;,”
but also a very basic &lt;a href=&quot;/blog/2017/05/20/knight-rider.html&quot;&gt;Knight-Rider LED display
demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I needed those to prove that the vendor toolchain worked, and that I could
successfully load a design onto the board in the first place.&lt;/p&gt;

&lt;p&gt;Ever afterwards, I was able to start in on the main design, kept in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip&quot;&gt;rtl/arrowzip&lt;/a&gt;
directory, with common files to both kept in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/common&quot;&gt;rtl/common&lt;/a&gt;
directory.  Within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip&quot;&gt;arrowzip&lt;/a&gt;
directory are several other subproject
directories, to include ones for both the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/cpu&quot;&gt;ZipCPU&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/hexbus&quot;&gt;debugging
bus&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/cpu&quot;&gt;CPU&lt;/a&gt;
code is itself copied almost verbatim from the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/rtl/cpu&quot;&gt;ZBasic repository&lt;/a&gt;,
which itself is copied (minus the formal properties) from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;Yes, if you scan my &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;github repositories&lt;/a&gt;,
you’ll find a lot of duplication and reuse.&lt;/p&gt;

&lt;p&gt;For example, when moving &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
from one design to the next, I usually only adjust the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/cpudefs.v&quot;&gt;CPU configuration
file&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;CPU
parameters&lt;/a&gt;,
with the latter being set by the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;zipbones.txt&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration file.&lt;/p&gt;

&lt;h2 id=&quot;simulation-files&quot;&gt;Simulation Files&lt;/h2&gt;

&lt;p&gt;I also maintain a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/sim/verilated/&quot;&gt;sim/verilated&lt;/a&gt;
directory, where the basic simulation sources for the design are stored.  The
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/automaster_tb.cpp&quot;&gt;main simulation file,
automaster_tb.cpp&lt;/a&gt;,
is used to start and drive the simulation.  Unlike some of my &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;graphical
simulation work&lt;/a&gt;, this
design has only the straight text interface for the time being.&lt;/p&gt;

&lt;p&gt;We’ve discussed many of the useful parts of building a simulation before, and
in this directory you’ll find me using all of them.  For example, there’s a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/sim/verilated/dbluartsim.cpp&quot;&gt;bridge from the simulated serial port to a TCP/IP port&lt;/a&gt;.  It’s not all that
different from when I &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;originally presented the
concept&lt;/a&gt;.
The biggest difference is that I’ve realized many individuals only ever
have the one serial port in the design.  Therefore, I’ve split the serial
port into two streams based upon the high order bit.  If the high bit is set,
the serial port connects to the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
otherwise the console port.  The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/sim/verilated/dbluartsim.cpp&quot;&gt;serial port
bridge&lt;/a&gt;
splits these two streams apart, connecting the design’s one serial port to the
two TCP/IP ports–the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
and the console port.&lt;/p&gt;

&lt;p&gt;This allows me to both load the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
as well as to interact with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
over the same serial port, although the end-result is that the two ports will
only even supports 7-bit serial instead of the full 256-possible characters
typically associated with 8-bit serial.&lt;/p&gt;

&lt;p&gt;There are also other various simulation components within this directory.  For
example, there’s a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/flashsim.cpp&quot;&gt;flash simulator tuned for Dual SPI
operation&lt;/a&gt;,
as well as an &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/sdramsim.cpp&quot;&gt;SDRAM
simulator&lt;/a&gt;.
This way, the &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;host software can interact with the simulator and not
realize that anything is
different&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another very useful component, used both by the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipload.cpp&quot;&gt;zipload&lt;/a&gt;
program in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host/&quot;&gt;sw/host&lt;/a&gt;
directory as well as the program loader in the simulation directory, is the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sim/verilated/zipelf.cpp&quot;&gt;zipelf&lt;/a&gt; module.
This software module a wrapper on top of
libelf,
allowing me to easily decompose a design into the various components that
need to be loaded in order to run, where each component consists of a (word
aligned) &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sim/verilated/zipelf.h&quot;&gt;starting address, a length, and a data
section&lt;/a&gt;.
Other parts of the &lt;a href=&quot;https://www.skyfree.org/linux/references/ELF_Format.pdf&quot;&gt;ELF data
structure&lt;/a&gt; have been
stripped out for simplicity, since they are not needed by the loader.&lt;/p&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;One of my earlier designs&lt;/a&gt; had only
the one software subdirectory.  This directory contained only host support
programs for the repository.  Imagine my surprise when a confused user tried
to load a host support program, compiled for either the PC or the ARM, onto
the board in order to have the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; run it!&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. ArrowZips Software directory structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/arrowzip-swd.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Since that time, I’ve typically split my software directories into two or three
subdirectories.  One contains &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;host software&lt;/a&gt; for running on your PC connected to the FPGA board,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/board&quot;&gt;another&lt;/a&gt;
contains &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; programs
for running within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; contained within the design,
and a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/zlib&quot;&gt;third&lt;/a&gt;
contains the missing portions of the
&lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;C-library&lt;/a&gt;–more on that in a moment.&lt;/p&gt;

&lt;h4 id=&quot;host-programs&quot;&gt;Host Programs&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;sw/host&lt;/a&gt;
directory contains a variety of programs that you can run from your
host machine, typically a PC.  These programs communicate with the either
the design or the simulation over the same
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging port&lt;/a&gt;.  This
can be very helpful in case I need to debug some interaction or other, since &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;I
can then run the same (broken) program in the simulation as I can on the design
itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ve discussed many of the basic host programs already.  They are, again:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipload.cpp&quot;&gt;zipload&lt;/a&gt;:  Used to load a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; design into
memory, whether into
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
or &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Passing ‘-r’ to this program will also start the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; once it is loaded.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipdbg.cpp&quot;&gt;zipdbg&lt;/a&gt;:
This is the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s debugger.
We’ve &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;discussed how this works before&lt;/a&gt;.
It basically halts the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;, and &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;then tells you
what registers had what values within
them&lt;/a&gt;.
It’s not a &lt;a href=&quot;https://en.wikipedia.org/wiki/Debugger&quot;&gt;source level debugger&lt;/a&gt;,
so if you want to use it make sure you have a copy of your program’s
(dis)assembly on hand.&lt;/p&gt;

    &lt;p&gt;Yes, one of my “TODO” items is to get &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;gdb&lt;/a&gt;
up and running on the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
Instead, I’ve been spending so much time just enjoying
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
and proving new design components that I haven’t gotten that far along yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/wbregs.cpp&quot;&gt;wbregs&lt;/a&gt;:
This is my basic access program for command line interaction with a
(perhaps not yet working) design.  I use it to command actions by hand, to
see what will happen and then to read results back.  It’s really useful for
ad-hoc interaction, but after using this program for a while  I will typically
write any real interaction I want into C++.  My fingers can only type so fast,
and I often like to go faster.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: A Network Based Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netdbg.svg&quot; alt=&quot;A Network Based FPGA Controller&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;netuart&lt;/a&gt;:
We discussed this above.  It connects to the serial port of the
design, and &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;bridges between that serial port and a pair of TCP/IP
ports&lt;/a&gt;,
as shown in Fig 5 above.  As mentioned above, the serial port carries
both &lt;a href=&quot;/blog/2017/06/26/dbgbus-verilator.html&quot;&gt;debugging bus
commands&lt;/a&gt; as well
as user serial port commands, and a separate TCP/IP port accesses each
of these.  The two streams are also 7-bit only, since they use the eighth
bit to determine which stream is in use.&lt;/p&gt;

    &lt;p&gt;Key to this design is the baud rate, set in the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration file(s), captured by the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/regdefs.h&quot;&gt;regdefs.h&lt;/a&gt;
file, which is then used to set the baud rate on this interface.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipstate.cpp&quot;&gt;zipstate&lt;/a&gt;:
Sometimes, it can be hard to know if the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; is doing something, or if the
program it was running has somehow crashed and halted it.  The
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipstate.cpp&quot;&gt;zipstate&lt;/a&gt; 
program reads the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;CPU status
register&lt;/a&gt;
and tries to decode it into a (semi-legible) line of text.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/dumpflash.cpp&quot;&gt;dumpflash&lt;/a&gt;:
Reads and then dumps the flash of the device onto a file.  When
using the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;Hexbus&lt;/a&gt;
debugging bus implementation, dumping the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
can take a &lt;em&gt;LONG&lt;/em&gt; time.  Sadly, there’s not enough room on the design
for my &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;higher performance bus
bridge&lt;/a&gt;, so
another solution may be needed.  Perhaps capturing the first 64kB or so from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and then loading a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
program to compress the rest?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashid.cpp&quot;&gt;flashid&lt;/a&gt;:
Used to read the manufacturer’s ID off of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory chip&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This was a very important part of the debugging the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash
controller&lt;/a&gt;,
because the read-manufacturer-ID command produces a
&lt;em&gt;known answer&lt;/em&gt;.  Therefore I could use it to tell if my
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;controller&lt;/a&gt;
reads were working at all, or if for example they were off by a bit or two.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the directory contains a series of C++ files supporting the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;.
A &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashscope.cpp&quot;&gt;flashscope&lt;/a&gt;
file for debugging the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash controller&lt;/a&gt;’s interaction with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/sdramscope.cpp&quot;&gt;sdramscope&lt;/a&gt;
for debugging the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;.
While there is a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipscope.txt&quot;&gt;configuration file&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data/&quot;&gt;auto-data configuration
directory&lt;/a&gt;
to create a third scope for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;,
I haven’t (yet) needed it within this design.  So far, everything has worked.&lt;/p&gt;

&lt;p&gt;Yeah, right, I know.  Okay, so everything &lt;em&gt;almost&lt;/em&gt; worked.  I found a subtle
bug in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
associated with what was essentially an endless logic loop, when using the
early branching functionality with &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
configured into its non-pipelined mode.  That I found and fixed first with
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
and then I left a formal property in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to keep it from happening again later.&lt;/p&gt;

&lt;h4 id=&quot;zlib-the-c-library-stubs&quot;&gt;ZLib: The C-Library Stubs&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; currently supports the
&lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;newlib C-library&lt;/a&gt;.  This is a highly
configurable version of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;
that is very appropriate for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;
experimentation, new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Embedded_system&quot;&gt;embedded CPU&lt;/a&gt;s,
etc.  &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;The library&lt;/a&gt;, however,
depends upon several functionality stubs that need to be provided by the
implementation.&lt;/p&gt;

&lt;p&gt;Two particular stubs are critical to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; operation: the serial port
input stub, &lt;code class=&quot;highlighter-rouge&quot;&gt;_inbyte&lt;/code&gt;, and the output stub, &lt;code class=&quot;highlighter-rouge&quot;&gt;_outbyte&lt;/code&gt;.  These are really all
the I/O the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; currently supports
using the &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;newlib C-library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other projects, such as
&lt;a href=&quot;https://openrisc.io/&quot;&gt;OpenRISC&lt;/a&gt;, use symbols that can be resolved at link
time for their I/O accesses.  To tell if the peripheral is present within the
design, these projects will check if the symbol’s value is NULL before
attempting to access the peripheral.  The really neat part of this approach is
that the same &lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
dependent stubs may be used across many projects.&lt;/p&gt;

&lt;p&gt;In my infinite wisdom, or perhaps more likely my utter folly, I chose a
different path for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
I didn’t really want my peripheral drivers to need to check if the peripheral
was available in run time.  That seemed to make more sense to me to be done
at build time, rather than run time.  As a result, when you build the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s version of the
&lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;newlib C-library&lt;/a&gt;,
you won’t get a complete library.  You still need to build the component stubs.&lt;/p&gt;

&lt;p&gt;Most of these stubs are copied from one implementation to the next, with only
little adjustment beyond the address of the peripheral used.  You can find
them in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/syscalls.c&quot;&gt;syscalls&lt;/a&gt;
file.&lt;/p&gt;

&lt;p&gt;There’s also a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt; in
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/zlib/&quot;&gt;this same directory&lt;/a&gt;
as well.  &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;We’ve discussed
it before&lt;/a&gt;.
It basically copies program instructions and data from any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
to the volatile RAM memory within the design.&lt;/p&gt;

&lt;p&gt;I’ll admit, I was somewhat surprised when I built my first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Booting&quot;&gt;bootloader&lt;/a&gt;.  A
&lt;a href=&quot;https://en.wikipedia.org/wiki/Booting&quot;&gt;bootloader&lt;/a&gt;
had been a big black box to me, and I didn’t understand how it worked.  Once
I had the opportunity to build my own, I was surprised at how simple
it was.  Indeed, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Booting&quot;&gt;bootloader&lt;/a&gt;
is &lt;em&gt;nothing more than a glorified memory copy!&lt;/em&gt;  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
performs up to three memory copies.  First, it copies any high-speed
instructions, those that need to be loaded into block RAM instead of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
into the block RAM.  It then copies the rest of the design into
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
Finally, the third copy is really more of a
&lt;a href=&quot;http://www.cplusplus.com/reference/cstring/memset/&quot;&gt;memset&lt;/a&gt;:
it zeros all of the &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;global data structures that don’t have
initial values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of these choices have consequences, however, which we’ll start
discussing in the next section.&lt;/p&gt;

&lt;h4 id=&quot;the-swboard-directory-where-zipcpu-programs-reside&quot;&gt;The sw/board directory, where ZipCPU programs reside&lt;/h4&gt;

&lt;p&gt;We’ve finally gotten to &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/board/&quot;&gt;the directory
containing the&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s demonstration
programs, the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU test&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/memtest.c&quot;&gt;memory test&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/hello.c&quot;&gt;hello world&lt;/a&gt;.
While I’ve  tried to keep
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/board/&quot;&gt;this directory&lt;/a&gt;
simple, there are quite the few surprises in it for
someone who might not be familiar with programming a device that may, or
may not, have the memory on it that you expect.&lt;/p&gt;

&lt;p&gt;Most of this complexity is hidden in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/Makefile&quot;&gt;Makefile&lt;/a&gt;.
It’s set up so that you can just type&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to build the demonstration programs.&lt;/p&gt;

&lt;p&gt;That’s great, until you want to build your own.  So let’s dig through this
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/Makefile&quot;&gt;Makefile&lt;/a&gt;
a bit to understand how it works.&lt;/p&gt;

&lt;p&gt;Years ago, I worked on a program where I needed to build the same design
for multiple architectures.  In that environment, I learned to create an
object directory for partial compilation products (i.e. &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object
files&lt;/a&gt;).
Since then, I’ve gone through several rounds of learning to put &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object
files&lt;/a&gt;
into such a directory.&lt;/p&gt;

&lt;p&gt;The first step is to define a directory to place
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object files&lt;/a&gt;, with the
computer architecture name as part of the directory name.  I like to usee
&lt;code class=&quot;highlighter-rouge&quot;&gt;obj-zip&lt;/code&gt; for 
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; object files, &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-arm&lt;/code&gt;
for ARM files, and &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-pc&lt;/code&gt; for your basic x86-64 files.
Once defined, we’ll then build an object file directory with that name.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;OBJDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; obj-zip
&lt;span class=&quot;c&quot;&gt;#
# .... sometime later
#
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;err&quot;&gt;mk-objdir&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;@bash&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(OBJDIR)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(OBJDIR)/;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;endef&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This make function silently calls a command-line bash script, to check if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;$(OBJDIR)&lt;/code&gt; directory exists.  If not, it creates the directory silently.&lt;/p&gt;

&lt;p&gt;The second step is to set up a series of C-flags that can be used to compile
any program.  I like to use &lt;code class=&quot;highlighter-rouge&quot;&gt;-O3&lt;/code&gt;, mostly because I end up staring at
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;assembly&lt;/a&gt; often and
I get really annoyed by less-than optimal code.  I also want to reference
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s generated
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/board.h&quot;&gt;board.h&lt;/a&gt;
file, containing all of the decisions going into creating the design–what
peripherals are located at what memory addresses, etc., as well as the
design.h file which can be used to adjust which peripherals are
actually built or not.  This means I need to capture these two directories
in my &lt;code class=&quot;highlighter-rouge&quot;&gt;$(CFLAGS)&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -O3 -I ../zlib -I../../rtl/arrowzip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this definition, I can build
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object files&lt;/a&gt;
from C code.  The following generic rule, will make a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object file&lt;/a&gt;
from any corresponding .c file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(OBJDIR)/%.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%.c&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mk-objdir&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CC)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CFLAGS)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -c $&amp;lt; -o $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yea, I know it looks cryptic.  Yes, I will confess I visit the &lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html&quot;&gt;Makefile
documentation page&lt;/a&gt;
more often than not to look up the strange symbols such
as &lt;code class=&quot;highlighter-rouge&quot;&gt;$&amp;lt;&lt;/code&gt; (the first dependency, i.e. the .c file) and &lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt; (the file
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; is
trying to build, i.e. the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object file&lt;/a&gt;).
Notice, though, that it automatically checks if the &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-zip&lt;/code&gt; directory
exists prior to trying to build anything, and that it creates the
directory if not.&lt;/p&gt;

&lt;p&gt;You might also notice a similar script, right next to that primary build
script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(OBJDIR)/%.s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%.c&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mk-objdir&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CC)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CFLAGS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(DUMPRTL)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -S $&amp;lt; -o $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’ve ever needed to debug &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt;, you’ll recognize
the&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DUMPRTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -fdump-rtl-all&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; option.  It tells &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; to
dump the output from all of its intermediate stage, one stage
at a time, from the time it starts getting specific with
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;assembly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What this rule really does is to compile my .c file into
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU assembly&lt;/a&gt;
and then stop–that’s the meaning of the &lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt; flag.  This can be really
useful when you need to debug the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt;,
or alternatively when your program isn’t doing what you think it should and
you don’t know why.&lt;/p&gt;

&lt;p&gt;Of course, all of these bugs have finally been worked out of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, right?  Right??&lt;/p&gt;

&lt;p&gt;Ahem, moving right along, let’s move to the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  If you
are familiar with basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt;
options, you’ll be expecting to build a program with a line similar to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc program.c -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This really only works when you already know where in your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_space&quot;&gt;address space&lt;/a&gt; you want
to place all the parts of your design.  This is accomplished by way of a
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  For
almost all of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
I’ve ever worked with before FPGA-based
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft microprocessors&lt;/a&gt;,
this script was built into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt;
and I never saw it until I tried to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt; back end for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
However, for an
FPGA
based
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;
where the memory size might change from one build to the next, this is not
nearly as reasonable.&lt;/p&gt;

&lt;p&gt;For this reason, the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data/&quot;&gt;AutoFPGA
scripts&lt;/a&gt;
have directed
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to build several
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
for us.  There’s a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/bkram.ld&quot;&gt;block RAM only script,
&lt;code class=&quot;highlighter-rouge&quot;&gt;bkram.ld&lt;/code&gt;&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/flash.ld&quot;&gt;block RAM with flash script, &lt;code class=&quot;highlighter-rouge&quot;&gt;flash.ld&lt;/code&gt;&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/sdram.ld&quot;&gt;block RAM with SDRAM script, &lt;code class=&quot;highlighter-rouge&quot;&gt;sdram.ld&lt;/code&gt;&lt;/a&gt;,
and a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/board.ld&quot;&gt;basic use them all script,
&lt;code class=&quot;highlighter-rouge&quot;&gt;board.ld&lt;/code&gt;&lt;/a&gt;.
To select between these,
&lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; accepts a &lt;code class=&quot;highlighter-rouge&quot;&gt;-T ldscript.ld&lt;/code&gt;
command line option, changing our basic build command to something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld program.c -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, if we’ve already placed our component
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object file&lt;/a&gt;
into &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-zip&lt;/code&gt;, it might look more like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld obj-zip/program.o -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This only gets us part of the way.  We still need to include the
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;.
Normally, this
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;library&lt;/a&gt;
would be included for you in the default options built
into the compiler.  It would be integrated in such a way that when you type,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld obj-zip/program.o -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you’ll automatically get something closer to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld -L ../zlib/ obj-zip/program.o -lc -lgcc -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What are these extra arguments?  We’ve already discussed the &lt;code class=&quot;highlighter-rouge&quot;&gt;-T&lt;/code&gt; argument
to specify a
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;-L ../zlib&lt;/code&gt; argument tells &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; where to look for
any libraries.  &lt;code class=&quot;highlighter-rouge&quot;&gt;-lc&lt;/code&gt; tells &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; to include the
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;-lgcc&lt;/code&gt; tells it to include the &lt;a href=&quot;https://wiki.osdev.org/Libgcc&quot;&gt;soft-operator library, such as the
soft-floating point support&lt;/a&gt; for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, since in my wonderful wisdom (or folly) I insisted on leaving parts
of the library undefined and board dependent, we’ll need to provide the
remaining command line information.  As a result, here’s the rule to build
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;.”&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LFLAGS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; -T &lt;span class=&quot;nv&quot;&gt;$(LDSCRIPT)&lt;/span&gt; -L../zlib
&lt;span class=&quot;nv&quot;&gt;LIBS&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; -lc -lzarrow -lgcc
&lt;span class=&quot;c&quot;&gt;#
# ...
#
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(OBJDIR)/hello.o board.ld $(LIB)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CC)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CFLAGS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(LFLAGS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(LIBS)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -o $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This captures most of the confusing parts of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; software
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/Makefile&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This should also give you the insight you need to build your own
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; programs for the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;ArrowZip project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;ArrowZip design&lt;/a&gt;
could really use some better demo’s, it’s complete enough to
work with as is.  That said, I still have two big problems with it.&lt;/p&gt;

&lt;p&gt;First, it looks like I got a bit greedy with the system.  Of the
8,064 logic elements, I’ve used 5,566 or roughly 69% of them.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
reason for being was always to be low logic and out of the way.
Using 69% of the logic resources on a given board is hardly “out of the way.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/cpudefs.v&quot;&gt;Removing the multiply, divide, compressed instruction set support,
dual-instruction prefetch, and early branching
support&lt;/a&gt; from the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
brings the total logic usage down to 4,602 logic elements, or about 57% of the
available logic elements.  Removing the &lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time
clock&lt;/a&gt; as well brings the logic
usage down to 4,066 logic elements, or 52% of the device.  The problem with
removing multiplies, divides, and compressed instructions, though, is that
it means the &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;library support&lt;/a&gt;
needs to be rebuilt without these instructions.  While doable, it would mean
I’d need a different main &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;library&lt;/a&gt;
build for different designs–those with and those without these special
instructions.&lt;/p&gt;

&lt;p&gt;My second criticism of this design as currently implemented is that writing
to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; and verifying
the result is painfully slow.  Looking over the current transaction, it seems
quite wasteful to transfer the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
values back and forth over the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
so many times.  A short &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
helper program, working in conjunction with the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;flash
driver&lt;/a&gt;,
should be able to mitigate that problem.&lt;/p&gt;

&lt;p&gt;Finally, I’d still like to implement an interface to the
&lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;accelerometer&lt;/a&gt;.
While this isn’t really that hard to do, I haven’t yet decided on the ideal
interface for doing so.  Therefore, after the upgrades to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;,
this will probably be my next goal/focus with this device.  Well, that and I’d
still like to build this project using &lt;a href=&quot;https://www.clifford.at/yosys/&quot;&gt;Yosys&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And unto man he said, Behold, the fear of the LORD, that is wisdom; and to depart from evil is understanding. (Job 28:28)&lt;/em&gt;</description>
        <pubDate>Tue, 12 Mar 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/03/12/arrowzip.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/03/12/arrowzip.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Using Sequence Properties to Verify a Serial Port Transmitter</title>
        <description>&lt;p&gt;For those who have been reading &lt;a href=&quot;https://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;,
you’ll know that most of my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
work has involved the immediate assertion subset of the SystemVerilog
Assertion language.  I’d like to take this opportunity to discuss some of my
frustrations using &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;,
and illustrate how I was able to replicate much of the functionality I needed
from &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;
with immediate assertions alone.&lt;/p&gt;

&lt;p&gt;For this discussion, we’ll use the example of a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;serial port
transmitter&lt;/a&gt;
I built long ago.&lt;/p&gt;

&lt;h2 id=&quot;the-first-serial-port-transmitter&quot;&gt;The First Serial Port Transmitter&lt;/h2&gt;

&lt;p&gt;One of my early Verilog projects after starting &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology,
LLC&lt;/a&gt; was to build a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve only learned later, at &lt;a href=&quot;https://orconf.org/2017/&quot;&gt;ORCONF2017&lt;/a&gt; to be exact,
that building a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial
port&lt;/a&gt; is highly controversial.  At issue is, why should anyone rebuild the wheel?  There are so many
&lt;a href=&quot;https://opencores.org/projects&quot;&gt;serial ports available on line, examples to look
at&lt;/a&gt;, etc., that some would argue that it
hardly makes sense to build one more.  The “market” is quite saturated.&lt;/p&gt;

&lt;p&gt;I also discovered, long after implementing my own
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt; “the right way” that there’s
a well established interface between a computer and a serial port based upon
the &lt;a href=&quot;https://en.wikipedia.org/wiki/16551_UART&quot;&gt;16550 serial port&lt;/a&gt;.  Of course,
mine was done “right” from the beginning just because it was mine–we need not
go over all of the flaws with that logic today, but there is something to be
said for having pride in your own workmanship.  On the other hand, I’m sure
we can all be critical of an interface that takes multiple steps to configure,
and that even requires paging in and out bytes of data.  We can also be
highly critical of a &lt;a href=&quot;https://opencores.org/projects/uart16550&quot;&gt;buggy
implementation&lt;/a&gt; that can be caused
to send data that it was never commanded to sent.  (It’s amazing what a little
bit of &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; can
find …)&lt;/p&gt;

&lt;p&gt;Yes, I have enjoyed the reality that my own
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt; can
be completely configured by writing one 32-bit word to the configuration
register, as shown in Fig 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. One 32-bit word can completely configure a UART&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blog/master/doc/spec.pdf&quot;&gt;&lt;img src=&quot;/img/wbuart-setup.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hence, in &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;one 32-bit write&lt;/a&gt; you can configure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rate&lt;/a&gt;, specified as an
integer divider of the clock.  This integer divider is shown in Fig. 1 as
&lt;code class=&quot;highlighter-rouge&quot;&gt;Baud CLKS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Whether or not hardware flow control is to be used, shown in Fig. 1 as
&lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Whether the serial port would transmit 5, 6, 7, or 8 bit characters.  These
are the &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits in Fig. 1.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt;, which can be
either no parity, even or odd parity, or even mark or space fixed parity
values–as specified by bits &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; (use parity), &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; (fixed parity) and
&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; (type of parity).&lt;/li&gt;
  &lt;li&gt;If the stop bit is a single stop bit, or rather two stop bits.  This is
specified by bit &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; in the setup register.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A separate write to the data register could send a &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter#Break_condition&quot;&gt;break
condition&lt;/a&gt;
down the line.&lt;/p&gt;

&lt;p&gt;But why did &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my serial port&lt;/a&gt; need all this
functionality?  Well, ahm, … it didn’t.  It only needed it because I wanted
to build a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full
featured&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;.
Hence, I implemented &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;every feature that a serial port could or should
have&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why not? Coding is fun, right?&lt;/p&gt;

&lt;p&gt;Sure, but does it work?&lt;/p&gt;

&lt;p&gt;Well, I tested the 8 bit character, with one stop bit and
no &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt; at a
variety of &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rates&lt;/a&gt;.  That worked
quite well.&lt;/p&gt;

&lt;p&gt;… and this is the problem with a lot of both &lt;a href=&quot;https://opencores.org&quot;&gt;open&lt;/a&gt;
and closed source digital design these days.&lt;/p&gt;

&lt;p&gt;It’s one thing to design something that’s easy to do because it’s fun.  It’s
something else entirely to fully verify that all of this (cough unused)
functionality even works.  Indeed, the greater the functionality, the greater
the number of modes something has, the more complex the verification problem
becomes.  How did I know that the design would work if I later asked it to
operate in a mode I had never tested nor verified?  I didn’t.  Worse, when such
a time would come later, I’d likely be &lt;a href=&quot;/zipcpu/2019/02/04/debugging-that-cpu.html&quot;&gt;trying to verify something
else&lt;/a&gt;
and not expecting a bug in a “working”
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
component.&lt;/p&gt;

&lt;p&gt;This is neither &lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot;&gt;black box&lt;/a&gt;
nor &lt;a href=&quot;https://en.wikipedia.org/wiki/White-box_testing&quot;&gt;white box&lt;/a&gt; verification.
It is ticking box verification.&lt;/p&gt;

&lt;p&gt;But the story goes on.&lt;/p&gt;

&lt;h2 id=&quot;the-simplified-serial-port-transmitter&quot;&gt;The Simplified Serial Port Transmitter&lt;/h2&gt;

&lt;p&gt;The first problem I had with my one-size fits all serial port was that it
wouldn’t fit in a &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;small
design&lt;/a&gt;.  It just had &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;way too much
logic&lt;/a&gt;.
So I simplified it.  Since I only ever used one &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud
rate&lt;/a&gt;, I created a parameter to fix the
number of clocks per &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; to a constant
value.  Since I only ever used 8-data bits, 1 stop bit, and no
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;–a protocol sometimes called
&lt;a href=&quot;https://en.wikipedia.org/wiki/8-N-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8N1&lt;/code&gt;&lt;/a&gt;,
I removed all of the other functionality from the core.&lt;/p&gt;

&lt;p&gt;These simplifications lead to my
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;txuartlite&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;rxuartlite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
cores.&lt;/p&gt;

&lt;p&gt;At one time, I was scrounging for logic elements so hard that I even
parameterized the number of bits in the integer clock divider.  Perhaps
24-bits was too many.  Yes, design space has been tight.&lt;/p&gt;

&lt;p&gt;These two cores became a mainstay of many of my designs–especially if I was
going to use a fixed &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rate&lt;/a&gt; with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/8-N-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8N1&lt;/code&gt;&lt;/a&gt;,
protocol.  How often was that?  Essentially all the time.&lt;/p&gt;

&lt;p&gt;But I said this article was about
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;,
so let’s move on to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verifying&lt;/a&gt;
my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;&lt;em&gt;lite&lt;/em&gt; transmitter
core&lt;/a&gt; with
some &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SystemVerilog
sequences&lt;/a&gt;.
Once you see how easy and awesome these 
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
can be, we’ll then transition to looking at the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;fully functional transmitter
implementation&lt;/a&gt;,
and discuss how
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
can be used to verify it.&lt;/p&gt;

&lt;h2 id=&quot;verifying-the-simplified-transmitter&quot;&gt;Verifying the Simplified Transmitter&lt;/h2&gt;

&lt;p&gt;If you want to know how to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
yourself, this probably isn’t the article for you.  Check out my
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;If you want to know how to verify the receiver, then I’ll caution you that the
proof of my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;my lite
receiver&lt;/a&gt;
isn’t trivial.  It’s an &lt;a href=&quot;/formal/2018/05/31/clkswitch.html&quot;&gt;asynchronous
proof&lt;/a&gt; that involves
two separate &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;–one
for the receiver and another subtly different clock for the
(assumed) transmitter.  The proof of &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;this
receiver&lt;/a&gt; was
one of the more challenging proofs I have done–so there’s little likelihood
I can fit it into this blog article.  You are more than welcome to check out
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;the code and formal
properties&lt;/a&gt;
yourself if you would like.&lt;/p&gt;

&lt;p&gt;No, today we’re going to discuss the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
transmitter.  I’m also going to assume you know how to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
transmitter, and so I’m only
going to discuss a couple of details associated with the implementation.&lt;/p&gt;

&lt;p&gt;First, the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;serial port
transmitter&lt;/a&gt;
is built around a state machine.  This state machine has ten separate states:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TXUL_BIT_ZERO&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	TXUL_BIT_ONE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h1&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_TWO	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h2&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_THREE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h3&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_FOUR	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h4&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_FIVE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h5&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_SIX	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h6&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_SEVEN	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h7&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_STOP	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h8&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_IDLE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;hf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll probably adjust these in due time so that they are defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s
instead of macros, but these are the state names today.  Notice how there are
nine transmitting states and an idle state, and that they aren’t all sequential.&lt;/p&gt;

&lt;p&gt;The second thing to note is that my design has a &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;basic clock
divider&lt;/a&gt;, kept
in two parts.  First, there’s the countdown clock.  The logic below has been
simplified, but you should get the idea.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Start transmitting a new byte
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCKS_PER_BAUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Transmission is finished
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Count down the number of clocks in a baud
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// interval
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Start the next baud interval for the next
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// start, data, or stop bits
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCKS_PER_BAUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, there’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; value.  This is a registered
value designed to be equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;baud_counter == 0&lt;/code&gt;.  As a reminder,
if you ever find yourself drafting code to do something like this, you’d
want to place a reminder in your draft code to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;the
design&lt;/a&gt;
has a basic state machine,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// r_busy needs to be set coming into here
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// STATE_IDLE
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Immediately start us off with a start bit
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_BIT_ZERO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// One clock tick in each of these states ...
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`TXUL_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start bit, 8-d bits, stop-b
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;shift register,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and output bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Set the start bit on writes
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Set the data bit.
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;None of this should look strange to you.  If it does, please check out my
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; for a discussion of how to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
and why.&lt;/p&gt;

&lt;p&gt;I’m just presenting this as a quick background, because I’d like to discuss the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
used to verify this core.&lt;/p&gt;

&lt;p&gt;Why
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;?
Because I was looking for a use for them.  Because I wanted to be able to
teach them to others.  Because they are a part of the SystemVerilog standard.
Because … well, I wanted to figure out what they were worth.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. A Basic UART transmission&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/serialtx.png&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic “contract” associated with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
is that upon any request to send a character, provided you aren’t already busy,
that you then send that character as shown in Fig 2 on the right.&lt;/p&gt;

&lt;p&gt;This is fairly easy to express in
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html&quot;&gt;SVA&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCKS_PER_BAUD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you aren’t familiar with this notation, this says that …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Following any clock where the module is given a write request,
and where the module isn’t busy (&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr &amp;amp;&amp;amp; !o_busy&lt;/code&gt;) …&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The port starts transmitting on the next clock.  That’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;|=&amp;gt;&lt;/code&gt; piece.
If the left side of the &lt;code class=&quot;highlighter-rouge&quot;&gt;|=&amp;gt;&lt;/code&gt; is true (it doesn’t need to be) then whatever
follows &lt;em&gt;must&lt;/em&gt; be the case.  Finally, throughout the whole
duration that the port is transmitting, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; must be true.&lt;/p&gt;

    &lt;p&gt;This &lt;em&gt;transmitting&lt;/em&gt; idea is captured by another
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SEND&lt;/code&gt;.  We’ll get to that next in a moment.  For now, notice that we are
passing two parameters to it.  The first of these is the (fixed) number
of clocks per baud, and the second is the data we wish to send.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the port has finished transmitting a character, the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; line
should be dropped, and the output wire should be high again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What about the &lt;code class=&quot;highlighter-rouge&quot;&gt;fsv_data&lt;/code&gt; value?  Well, it turns out that you can parameterize
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;,
and so tailor them to their environment.  The values given
to them, though, are not necessarily constant.  If the design adjusts any
of the values, the properties within the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
adjust as well.&lt;/p&gt;

&lt;p&gt;This was not what I wanted.  I wanted to keep track of the byte value that
was requested.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr &amp;amp;&amp;amp; !o_busy&lt;/code&gt; is true, however, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; can be
changed as early as the next clock cycle.  Therefore, on a write request,
I captured the data for reference within my design later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 3. Serial port sequence assertion structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-seqstructure.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Good!  This makes sense so far, so let’s peel the onion back one step further
and dig into the &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
transmission consists of a start bit, 8-data bits (in this case)
followed by a stop bit, as shown above in Fig. 2 above.  Each of these “bits”
fills a &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval entirely.
Therefore, if we could represent a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval with a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
of its own, such as one I shall call &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;, we can now represent
these ten intervals with a single parameterized
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’ve never read something like this before, the big thing that you need to
know is that &lt;code class=&quot;highlighter-rouge&quot;&gt;##1&lt;/code&gt; means “on the next clock”.  Hence this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
reads that after the first &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL()&lt;/code&gt;, another one will start
immediately on the next clock, followed by another, and so on.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL()&lt;/code&gt;s themselves are parameterized, much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND()&lt;/code&gt;
sequence.  First, they are parameterized by the number of clocks per baud,
&lt;code class=&quot;highlighter-rouge&quot;&gt;CKS&lt;/code&gt;.  Then by the value that the output bit is supposed to have, &lt;code class=&quot;highlighter-rouge&quot;&gt;DAT&lt;/code&gt;.  This
works its way from bit zero all the way to bit 7.  They are then parameterized
by the value that the shift register is to have, &lt;code class=&quot;highlighter-rouge&quot;&gt;SR&lt;/code&gt;, and finally the value
that the state variable is to have, &lt;code class=&quot;highlighter-rouge&quot;&gt;ST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Putting all of these together, we can define a &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt; sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
comes in two parts.  The first part lasts &lt;code class=&quot;highlighter-rouge&quot;&gt;CKS-1&lt;/code&gt; clock intervals.
That’s what the &lt;code class=&quot;highlighter-rouge&quot;&gt;[*(CKS-1)]&lt;/code&gt; means at the end of the first expression.
The second part follows the &lt;code class=&quot;highlighter-rouge&quot;&gt;##1&lt;/code&gt;, and so comes on the next clock after the
first one.  This one is identical, save that &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; is now true
indicating the end of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval.  Put together, this one
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
will require &lt;code class=&quot;highlighter-rouge&quot;&gt;CKS&lt;/code&gt; clocks to complete.&lt;/p&gt;

&lt;p&gt;You might also notice a subtle bug in this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
property, having to deal with the number of clocks in the stop bit.  I’ve
left it in there in order to keep the logic minimal, but the sharp eye might
catch it.&lt;/p&gt;

&lt;p&gt;Don’t see it?  We’ll come back to it in the next section.&lt;/p&gt;

&lt;p&gt;Now, remember the &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;difficulties with using
induction&lt;/a&gt;?
Because of those, I have constrained &lt;em&gt;all&lt;/em&gt; of my state variables in this
one interval.  Well, all except the &lt;code class=&quot;highlighter-rouge&quot;&gt;baud_counter&lt;/code&gt;.  As long as the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
search depth lasts longer than one &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval, that shouldn’t be a problem.&lt;/p&gt;

&lt;p&gt;At this point in my story, I was rather excited!  So far, this was easy.  I
could &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;my
transmitter&lt;/a&gt;
using
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;,
each
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
used an appropriate abstraction, and so this was quite readable.  Yes, if you
look through
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;my code&lt;/a&gt;,
you’ll find many more assertions within it–probably even more than it requires.&lt;/p&gt;

&lt;p&gt;It was only when I returned on to my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;original, full-featured serial port
design&lt;/a&gt;
that I started having problems with these wonderful SystemVerilog
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verifying-the-full-featured-transmitter&quot;&gt;Verifying the Full-Featured Transmitter&lt;/h2&gt;

&lt;p&gt;My first approach to verifying the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full-featured
transmitter&lt;/a&gt;
was to adjust how the &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
was defined, and then to make
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
using my new and improved &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
for each of the 5, 6, 7, and 8-bit bytes.  Things then got interesting as
I tried to implement each of the different types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;,
but we’ll ignore that for now.  I’m not sure I ever figured out how to do that
using
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
properties.  However, I had bigger problems before I got to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt; bits.
It’s not that my design passed or failed, nor was it that I had an example
of a broken trace.  The problem I was suffering from was much worse.&lt;/p&gt;

&lt;p&gt;But let me slow down, and tell you how I ended up struggling with these
wonderful
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
properties.&lt;/p&gt;

&lt;p&gt;It started out simply enough: the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full featured
transmitter&lt;/a&gt;
allows you to adjust the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rate&lt;/a&gt;.
That should be straightforward.  The problem was first that there was no way
to specify a &lt;em&gt;variable&lt;/em&gt; number of repeats of a step in a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.
The number of repeats, specified by &lt;code class=&quot;highlighter-rouge&quot;&gt;[*(CKS-1)]&lt;/code&gt; above, only worked because
&lt;code class=&quot;highlighter-rouge&quot;&gt;CKS&lt;/code&gt; was a parameter and thus fixed at synthesis time.  The &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full featured
serial port
transmitter&lt;/a&gt;, 
on the other hand, needed to be able to support a variable number of
clock cycles in each &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval
or it wouldn’t be able to support changing &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud
rates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, I adjusted the &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval sequence to have an undetermined number of clock cycles, and figured
I’d use other properties to force this to work based upon the constraints
found in &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt;.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; became true,
i.e. once the &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
counter reached zero, the solver would exit the sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Four properties could capture each of the 5, 6, 7, or 8-bit transmit sequences&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-multiseq.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then created various &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND5&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND6&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND7&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND8&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;,
all composed of a variety of &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;s within them:
7 &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
intervals in order to send 5-bit data, 8 for sending 6-bits data, etc.&lt;/p&gt;

&lt;p&gt;At this point, I was feeling good about &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;this
design&lt;/a&gt;.  Yes,
there were more
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
within it than in the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;lite
design&lt;/a&gt;.  Yes, the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
were more verbose.  Still, I was excited: I was finally getting the hang of &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SV
sequences&lt;/a&gt;
and starting to really enjoy using them!&lt;/p&gt;

&lt;p&gt;That’s when &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; failed to elaborate
my design.&lt;/p&gt;

&lt;p&gt;As it turns out, I had by now created so many states that
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
was suffering from a complete combinatorial explosion of states my
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
could be in.  Once &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
hit 2^16 possible states, it gave up with an error message.&lt;/p&gt;

&lt;p&gt;This took me by surprise.  There were only 20 states I counted in an 8-bit byte,
18 states in a 7-bit byte, and so forth.  How did
&lt;a href=&quot;https//www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; get to over 2^16 states?&lt;/p&gt;

&lt;p&gt;I asked the &lt;a href=&quot;https://symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt; team for some help,
and they created a special option which I could use to raise the limit.
Perhaps this might fit in 2^17 states?&lt;/p&gt;

&lt;p&gt;Nope.&lt;/p&gt;

&lt;p&gt;2^18 states?&lt;/p&gt;

&lt;p&gt;Not even.&lt;/p&gt;

&lt;p&gt;I went as high as somewhere between 2^22 and 2^24 states.  I don’t remember
the exact number anymore.  No matter what number it was,
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; plus my computer clearly couldn’t handle
it.  This left me unsure of how many states would’ve been required to
represent this updated design, since I was never able to expand them all.&lt;/p&gt;

&lt;p&gt;The problem stems from the fact that SystemVerilog requires that
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
be re-entrant.  That is, you can start a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
at any time–even if you are already in the middle of one.  In other
words, even though my design would only ever start on &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr &amp;amp;&amp;amp; !o_busy&lt;/code&gt;,
and even though &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; would be true for the rest of the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;,
the underlying logic was still trying to account for all of the possibilities
where multiple
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
states might be active at a given time.&lt;/p&gt;

&lt;p&gt;Ouch.  This meant that nothing was working.  How was I ever going to verify
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;this design&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;poor-mans-sequences&quot;&gt;Poor Man’s Sequences&lt;/h2&gt;

&lt;p&gt;Eventually I figured out a solution to the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
problem.  My solution is something I’m going to call a “Poor man’s sequences.”
These sequences are built out of immediate assertions, and they don’t use any of
the SystemVerilog concurrent assertions that the free version of
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
doesn’t support.&lt;/p&gt;

&lt;p&gt;Need to implement an &lt;code class=&quot;highlighter-rouge&quot;&gt;A|=&amp;gt;B&lt;/code&gt; sequence?  This sequence says that if &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is
ever true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; must be true on the next clock.  You may have noticed
that I have been writing,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to describe this case.&lt;/p&gt;

&lt;p&gt;Using concurrent assertions, you might’ve written&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using these “Poor man’s sequences”, you might also write,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See the idea?  Sure, it’s a bit longer and more verbose, but it captures the
idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; must be followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.  Indeed, this was how
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
was implementing my original logic anyway.&lt;/p&gt;

&lt;p&gt;What about a longer sequence?  Suppose I wanted a sequence of ten states,
such as I might use when transmitting an 8-bit byte over the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;.
How might that work?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can now make a set of assertions based upon what bit is a one within
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_sendbyte&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What else can I do with this?  I can assert that only one bit of
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_sendbyte&lt;/code&gt; will ever be true at any time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;onehot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Okay, &lt;code class=&quot;highlighter-rouge&quot;&gt;$onehot()&lt;/code&gt; requires a
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
license.  On the other hand, if I add to each of my assertions which
unique state the design must be in, and if I do it in such a way that no
two assertions could ever be true at the same time, I can then create
something equivalent.&lt;/p&gt;

&lt;p&gt;Alternatively, I suppose I could’ve used a counter to describe each state
within this poor man’s sequence.
I’m not sure I have a good reason for not using a counter, other than
these bit-vector representations still maintained an appearance of supporting
the original SystemVerilog
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;–even
if they weren’t truly concurrent anymore.&lt;/p&gt;

&lt;p&gt;What about the assertions that the design is busy while it is transmitting,
but that it lowers its busy flag once the sequence is complete?
To do this, I need to extend my &lt;code class=&quot;highlighter-rouge&quot;&gt;sendbyte&lt;/code&gt; by one more state–the state in
which the &lt;code class=&quot;highlighter-rouge&quot;&gt;busy&lt;/code&gt; flag is dropped.  This one is a bit unusual.  Unlike the
others which all last a full &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval, this last state only lasts for one clock cycle at the most.
Hence, I can set and clear it as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Only allow sendbyte[10] to be true for one
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// clock cycle--the cycle where o_busy is false
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I can assert my property that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; should be true in the middle of
any character being sent, but false as soon as we are done.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll admit that, while this is mighty expressive, the code that results seems
to explode in size.  It’s a shame I wasn’t being paid for the number of lines
of code I was writing.&lt;/p&gt;

&lt;p&gt;There’s also a really subtle bug here that took writing my
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; to discover: if the last stop bit has the same number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; clocks as every other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval, than the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
will use one too many clock ticks per byte, as shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. If busy is true throughout all the baud intervals, a clock is lost at the transition between bytes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-xtrabit.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In order to make sure we can transmit at full speed, we’ll need to make certain
that the next byte can start &lt;em&gt;immediately&lt;/em&gt; at the end of the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval.  This means that on the &lt;em&gt;last clock&lt;/em&gt; of the final stop bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;
must be low indicating that the core is ready to accept a new character
on last clock of the last character.  Instead, I had built my design so that
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; would stay high throughout the entire duration of the stop bit.&lt;/p&gt;

&lt;p&gt;The correct trace should’ve looked like Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. o_busy now goes low before the end of the stop bit, so the next byte can now start as soon as the last one finishes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-xtrabit-gone.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is a subtle &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial
port&lt;/a&gt;
bug that I wasn’t expecting in my own code.  Sure, I’d seen it in the code
of others, but in my own?&lt;/p&gt;

&lt;p&gt;Oops.&lt;/p&gt;

&lt;p&gt;But I digress.  Let’s get back to talking about these poor man’s
sequences again.&lt;/p&gt;

&lt;p&gt;It shouldn’t be too hard to imagine that this bit-vector approach could easily
be extended to handle 5, 6, 7 and 8 bit bytes.  Indeed, if you look within &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;my
serial port code&lt;/a&gt;,
you’ll find definitions for several sequences:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_five_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_six_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_seven_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_eight_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can also do one critical thing that the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SV
sequence&lt;/a&gt;,
approach could not do: I can assert that if any sequence is active, then no
other sequences are active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_five_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_six_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_seven_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_eight_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This plus the &lt;code class=&quot;highlighter-rouge&quot;&gt;$onehot()&lt;/code&gt; solution above fixes the explosion of states problem 
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; was struggling with.&lt;/p&gt;

&lt;p&gt;But what about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt; or
the optional second stop bit?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 7. Each byte could end with an optional parity bit, and either one or two stop-bits&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-stopseq.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Using &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequence&lt;/a&gt;,
I had been struggling to figure out how to handle the
optional &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt; or the optional
extra stop bit.  Ideally, I’d want to define a single
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
that would follow any byte of data no matter how long, and that would
include all of my &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;
and stop bit options.&lt;/p&gt;

&lt;p&gt;This isn’t a problem with these poor man’s sequences, although all of the
options I needed to implement made it somewhat of a challenge.&lt;/p&gt;

&lt;p&gt;To handle all of these stop sequences, I created yet another bit vector.  If
ever we were at the end of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval (i.e. if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; were true), I could check the ends
of my various bit sequences to know if I should enter this new one.&lt;/p&gt;

&lt;p&gt;So, for the stop sequence, I created a three bit vector.  The first bit would
be true during the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt;–if
there was one.  The second bit would
be true during the first of two stop bits, and the third bit would be true
for the final stop bit.  This sequence of states then looked something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This would be equivalent to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	disable_iff (i_reset || i_break)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// We&#39;ll rebuild every bit of this sequence each time through
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// If we are coming from the parity bit ...
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dblstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// If there&#39;s two stop bits, go to bit &#39;1&#39;
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// otherwise go to the last stop bit
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Any time we come from the first of two stop bits,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// immediately go to the second.
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Now let&#39;s check for whether we need to enter the
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// stop bit sequence.  Following the last bit of any
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// of our 5, 6, 7, or 8-bit sequences, we&#39;ll enter this
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sequence of final bits.  This therefore merges these
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sequences with a single stop sequence.
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_eight_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_seven_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_six_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_five_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_parity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// If we are using parity,
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//   go to the parity state
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dblstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// If we are using two stop bits, go to
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// the first of the two
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// In all other cases, go to the one
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// (and only) stop bit period
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Asserting the properties of each of the various states is now a little bit
tedious, but it also works–something which it didn’t before.&lt;/p&gt;

&lt;p&gt;As a result, I can now say that I have managed to fully verify both my
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;stripped down serial port transmitter
core&lt;/a&gt;,
as well as the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full featured serial port
transmitter&lt;/a&gt;.
Yes, you heard me right, I verified that the core could handle any division
of the clock greater than two, 5, 6, 7 or
8 data bits, no parity, a fixed mark or space parity bit, odd or even
parity, and one or two stop bits–&lt;em&gt;and all combinations of those options&lt;/em&gt;!
The core can also handle changing &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud
rates&lt;/a&gt;, something the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;lite core&lt;/a&gt;
could not.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’ve now started using this approach on several of my newer designs.  For
example, did you notice that at the bottom of my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite demonstration
code&lt;/a&gt;
I used a sequence like this to create a cover trace?  Or, if you’ve been
watching my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Quad-SPI flash
development&lt;/a&gt;,
you’ll notice I’ve used these poor man’s sequences for reading from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
continued reading from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
or reading and writing arbitrary bytes to the QSPI interface.&lt;/p&gt;

&lt;p&gt;Yes, I think I still like &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SystemVerilog’s
sequence&lt;/a&gt;
language better.  It’s &lt;em&gt;very&lt;/em&gt; expressive.  However, there’s just some things
I haven’t figured out how to express within it that this (uglier) approach
using immediate assertions can handle.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Happy is the man that findeth wisdom, and the man that getteth understanding. (Prov 3:13)&lt;/em&gt;</description>
        <pubDate>Thu, 21 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2019/02/21/txuart.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/02/21/txuart.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Why does blinky make a CPU appear to be so slow?</title>
        <description>&lt;p&gt;Imagine if you will that you’ve just built a brand new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
How fast do you think your brand-new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
will be able to toggle a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO
pin&lt;/a&gt;?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Comparing several GPIO toggle rates&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/gpio.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The question is a fascinating one, and it applies to more than just home-brew
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft cores&lt;/a&gt;.
Several individuals for example have been surprised that the
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can’t toggle a
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO pin&lt;/a&gt;
very fast.  One individual &lt;a href=&quot;https://forum.digilentinc.com/topic/4930-arty-microblaze-speed-question&quot;&gt;measured his 82MHz
MicroBlaze CPU toggling an IO pin at
37kHz&lt;/a&gt;.
Another looked at his &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/Why-microblaze-loop-speed-is-40-times-slower-than-I-expected/td-p/111342&quot;&gt;80MHz MicroBlaze CPU, and measured his I/O toggle rate
only at 2.5MHz&lt;/a&gt;.
Still others measured a 100MHz
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt; toggling an I/O at 
&lt;a href=&quot;https://forums.xilinx.com/t5/7-Series-FPGAs/SDK-GPIO-implementation/td-p/784626&quot;&gt;1.7MHz&lt;/a&gt;
or &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/AXI-GPIO-max-rate/td-p/484496&quot;&gt;2.3MHz&lt;/a&gt;.
The problem isn’t unique to
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt;
either.  Using a Zynq with a 250MHz
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
clock, someone else &lt;a href=&quot;https://forums.xilinx.com/t5/Evaulation-Boards/AXI_GPIO-too-slow/td-p/725431&quot;&gt;measured the IO pins toggle frequency at no more than
3.8 MHz&lt;/a&gt;.
Without insight into these architectures and their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementations, it’s hard to answer why these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
achieve the toggle rates they do.&lt;/p&gt;

&lt;p&gt;This isn’t true of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
implementation is entirely open and available for inspection.
It’s not closed source.  In other words, using an open source
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
like
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;this one&lt;/a&gt;
we should be able to answer the basic question, “Why do
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
toggle &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O pins&lt;/a&gt;
so slowly?”  We might even get so far as to answer the question of, “How much
I/O speed might I expect from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;?”
But this latter question is really
very
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
dependent, and we might be pushing our luck to answer it today.&lt;/p&gt;

&lt;p&gt;So, let’s take a look at a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt; controller.
We can then run some tests on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, to see how fast the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can toggle an LED from
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;software&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-basic-gpio-controller&quot;&gt;A Basic GPIO controller&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt;
controllers are a dime a dozen.  They are easy to build and easy to
implement.  If you are an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
developer and haven’t built your own
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt;
controller before, then let me encourage you to do so as a good exercise.&lt;/p&gt;

&lt;p&gt;For this article, I’ll just point out a couple features of the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO controller
I use&lt;/a&gt;
on many of my designs.  If you are a regular reader of this blog, you’ll
already know that I use the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone Bus&lt;/a&gt;.
You’ll also recognize the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone I/O signals from our earlier article on the
topic&lt;/a&gt;.  So
I’m not going to repeat those here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;My own GPIO
controller&lt;/a&gt;, one I
call &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO&lt;/a&gt;,
handles up to 16 inputs and 16 outputs as part of a single 32-bit
register.  The top
16-bits are input bits, whereas the bottom 16 are output bits.  Not all of
these bits need to be wired in any given design.  Further, all of the
input/output wires have fixed directions in this controller.
I basically judged that, at least on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
by the time you’ve wired everything up to build your design you already
know which direction the pins need to go.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://openrisc.io&quot;&gt;OpenRISC&lt;/a&gt; ecosystem offers a &lt;a href=&quot;https://github.com/openrisc/orpsoc-cores/blob/master/cores/gpio/gpio.v&quot;&gt;nice alternative
if you want to examine a controller where the pins have a programmable
direction&lt;/a&gt;,
but I digress.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO
controller&lt;/a&gt;,
adjusting an output bit requires writing to two
bits in the control word at once.  First, you want to set the new value of
the bit, but second, in order to avoid the need to set all of the other output
bits, you also need to set a second bit in the upper half of the register.
The software supporting &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;this
controller&lt;/a&gt;,
therefore includes the definitions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define GPIO_SET(WIRE)		(((WIRE)&amp;lt;&amp;lt;16)|(WIRE))
#define GPIO_CLEAR(WIRE)	((WIRE)&amp;lt;&amp;lt;16)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means that we can set a bit,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or even clear the same bit,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;without needing to first read the register and adjust the one bit of interest,
as in,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// This is not the WBIO approach:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Setting a bit without hardware support
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clearing a bit without hardware support
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Verilog logic necessary to handle this is trivially simple to write,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_OUTPUTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The input logic is really irrelevant to our discussion today, but it’s not
much more than a &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;2FF
synchronizer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A quick check for anything changing can be used to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;… or at least something like that.  The actual implementation tries to
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;free up as much logic as
possible&lt;/a&gt;
by only adjusting a parameterizable &lt;code class=&quot;highlighter-rouge&quot;&gt;NOUT&lt;/code&gt; output bits and only
reading and testing for changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;NIN&lt;/code&gt; input bits.&lt;/p&gt;

&lt;p&gt;It really is just that basic.&lt;/p&gt;

&lt;p&gt;The logic is also fast.  As you can see, it only takes a single clock cycle
to toggle any &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;output
pins&lt;/a&gt;.
Surely this wouldn’t slow a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
down, right?&lt;/p&gt;

&lt;h2 id=&quot;running-a-zipcpu-program&quot;&gt;Running a ZipCPU program&lt;/h2&gt;

&lt;p&gt;If you are interested in trying out the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
in simulation, the &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic
repository&lt;/a&gt;
is one of the better repositories for that purpose.  Sure, I have
&lt;a href=&quot;/projects.html&quot;&gt;other repositories&lt;/a&gt; tailored for
specific boards, but
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;this one&lt;/a&gt;
 is fairly generic.&lt;/p&gt;

&lt;p&gt;To support this test, I recently added the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO module&lt;/a&gt;
to the repository, as well as the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/auto-data/gpio.txt&quot;&gt;WBGPIO AutoFPGA configuration
file&lt;/a&gt;.  One
run of &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
and this &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;new module&lt;/a&gt;
has been merged: new I/Os are created at the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/toplevel.v&quot;&gt;top
level&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/main.v&quot;&gt;main.v file&lt;/a&gt;
now connects it to my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO control&lt;/a&gt;
register has been added to the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/host/regdefs.h&quot;&gt;list of host accessible
registers&lt;/a&gt;,
and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board.board.h&quot;&gt;hardware definition header
file&lt;/a&gt;
now includes the defines necessary to access this peripheral.&lt;/p&gt;

&lt;p&gt;Pretty neat, huh?&lt;/p&gt;

&lt;p&gt;If you want to test it, you’ll need to build the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;tool chain&lt;/a&gt;.
You’ll find &lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;instructions for building the toolchain
here&lt;/a&gt;.
Once built, you should have &lt;code class=&quot;highlighter-rouge&quot;&gt;zip-gcc&lt;/code&gt; in your path.&lt;/p&gt;

&lt;p&gt;I placed a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;gpiotoggle.c&lt;/a&gt;
program in the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/sw/board&quot;&gt;sw/board&lt;/a&gt;
directory for you, and adjusted the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/Makefile&quot;&gt;makefile&lt;/a&gt;
so it should build one of several tests for us.  Feel free to examine &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;that
program&lt;/a&gt;,
and adjust it as you see fit should you wish to repeat or modify this test.&lt;/p&gt;

&lt;p&gt;Once you build &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;gpiotoggle&lt;/a&gt;,
you’ll then want to start the simulation.  The easiest way is to run
&lt;code class=&quot;highlighter-rouge&quot;&gt;main_tb&lt;/code&gt; from from the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/sim/verilated&quot;&gt;sim/verilated&lt;/a&gt;
directory, and to instruct it to load and run the 
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;gpiotoggle&lt;/a&gt;
program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sim/verilated
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;main_tb -d ../../sw/board/gpiotoggle&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; flag above turns on the internal debugging options.  In particular,
it tells the simulator to create a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
trace&lt;/a&gt;
file output that will be placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;trace.vcd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the program will go on forever, you’ll need to press a control-C to
kill it.  On my ancient computer, about five seconds is all that is required
to create 250MB file, which should be completely sufficient for our needs today.&lt;/p&gt;

&lt;p&gt;Once killed, you can pull the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace file&lt;/a&gt; up in
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;
to see how fast the LED toggled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;gtkwave trace.vcd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you have the trace up, pull in the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_gpio&lt;/code&gt; trace at the top level
and expand it.  You should get something like Fig. 2.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. A Simulation VCD trace, showing the GPIO pin(s) toggling&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-gtkwave-single-wide.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Don’t forget, you’ll have to scan past the program getting loaded by the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;
to get to the point where the I/O is toggling.  If you zoom into this
section where &lt;code class=&quot;highlighter-rouge&quot;&gt;o_gpio[0]&lt;/code&gt; toggles, you should see something like Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Zooming in on the trace, we can see a 700ns period&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-gtkwave-single.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Shall we see how fast we can toggle this pin?&lt;/p&gt;

&lt;h2 id=&quot;running-our-experiments&quot;&gt;Running our Experiments&lt;/h2&gt;

&lt;p&gt;Let’s run some experiments.  We’ll start slow, with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
disabled, and then slowly enable features along the way.&lt;/p&gt;

&lt;p&gt;Before starting, though, let me ask you to do one thing: take out a piece
of paper, and write onto it the fastest speed you expect the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to be able to toggle the
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O pin&lt;/a&gt;,
assuming that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
is running at 100MHz.&lt;/p&gt;

&lt;p&gt;Why 100MHz?  Well, it’s sort of my baseline
system clock speed, dating back to my work on the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;.  Since the 
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
offered a 100MHz clock input, I got used to using that speed for
development.  The reality is that some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
will run slower, such as the Spartan 6 or the iCE40,
and some will run faster.  One individual even reported running the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
at 150MHz.  100MHz just happens to be a nice number in between that makes
reading data from a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace file&lt;/a&gt;
easier–since each clock tick is 10ns.&lt;/p&gt;

&lt;p&gt;Now, fold that paper up with your prediction on it, and then let’s continue.&lt;/p&gt;

&lt;h4 id=&quot;starting-out-slow&quot;&gt;Starting out slow&lt;/h4&gt;

&lt;p&gt;Let’s start out as slow as we can, just to see how things improve by
adding more logic to our design.  If you go into the file
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;rtl/cpu/cpudefs.v&lt;/a&gt;,
you can edit the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
default configuration.  Let’s start by uncommenting the line defining
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt;.  We’ll also comment the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EARLY_BRANCHING&lt;/code&gt; definition,
and so disable it.  This is almost the lowest logic configuration of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
We’ve just turned off the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline logic&lt;/a&gt;,
we’ve
turned off all caches and the pipelined data access mode.
(More about pipelined data access in a moment.)  If we wanted, we could also
disable the multiply and divide instructions, but those should be irrelevant
for the purposes of today’s test.&lt;/p&gt;

&lt;p&gt;Go ahead and rebuild the design now, by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; from the root directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# cd to the root directory, then&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s look at our &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;LED toggling
program&lt;/a&gt;.
The
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;program&lt;/a&gt;
contains many different approaches to toggling the LED.  We’ll work through
them one at a time.  We’ll start by using the following loop to toggle the LED.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gpiocmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpiocmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;gpiocmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that, because of how we built our
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO controller&lt;/a&gt;,
we don’t need to read from the output port prior to writing the new value in
order to ensure that we only toggle a single bit.&lt;/p&gt;

&lt;p&gt;I shouldn’t have to mention that for any type of test of this type, you need
to turn compiler optimizations on with &lt;code class=&quot;highlighter-rouge&quot;&gt;-O3&lt;/code&gt;.  Without optimization, this
little snippet of code will turn into,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  ; Create a stack frame, and save some registers to it so they can be
  ; recovered later.
  e00000:	e8 14 85 0c 	SUB        $20,SP         | SW         R0,$12(SP)
  e00004:	64 c7 40 10 	SW         R12,$16(SP)
  ; Now create a stack frame where our local variables may be stored
  e00008:	63 43 40 0c 	MOV        $12+SP,R12
  ; Save a copy of argc and argv (we won&#39;t be using them anyway
  e0000c:	0c c7 3f f8 	SW         R1,$-8(R12)
  e00010:	14 c7 3f f4 	SW         R2,$-12(R12)
  ; gpiocmd = 0x10000, or 65536.  Load this into a register, then store it into
  ; the stack location for gpio
  e00014:	0e 01 00 00 	LDI        $65536,R1
  e00018:	0c c7 3f fc 	SW         R1,$-4(R12)
  ; Load the address of our GPIO register into R1
  ; This is also the first instruction within our our while(1) loop
  e0001c:	0a 00 03 00 	LDI        0x00c0000c,R1  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00020:	0a 40 00 0c 
  ; Load gpiocmd into R0, and write that to the GPIO register
  e00024:	84 e4 85 88 	LW         -4(R12),R0     | SW         R0,(R1)
  ; Load gpiocmd back into R0, and XOR it with one
  e00028:	04 87 3f fc 	LW         -4(R12),R0
  e0002c:	01 00 00 01 	XOR        $1,R0
  ; Write the result back into gpiocmd
  e00030:	04 c7 3f fc 	SW         R0,$-4(R12)
  ; and loop back to the top of our while loop
  e00034:	78 83 ff e4 	BRA        @0x00e0001c    // e0001c &amp;lt;main+0x1c&amp;gt;_&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each instruction takes, at a minimum, one cycle.
You’ll see in a moment how difficult it can be to fetch each of these
many instructions.&lt;/p&gt;

&lt;p&gt;Part of the problem with this unoptimized implementation is that all of the
data values are kept in a local variable space in memory, never in any
registers.  As you’ll also see below, each &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; (store word) instruction
to write our &lt;code class=&quot;highlighter-rouge&quot;&gt;gpiocmd&lt;/code&gt; variable to memory can take many clock cycles.
Loads are worse, since the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
needs to wait for a load to complete before continuing.
In other words, this is a very slow way to toggle an
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;On the other hand, if you place variables into registers, such as placing
&lt;code class=&quot;highlighter-rouge&quot;&gt;gpiocmd&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;, you’ll get much faster code.  GCC’s &lt;code class=&quot;highlighter-rouge&quot;&gt;-O3&lt;/code&gt; applies
three levels of optimizations doing just this, so don’t forget to use it.
In this example, if you run a “make gpiotoggle.txt” from within the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/sw/board&quot;&gt;sw/board&lt;/a&gt; directory,
you’ll get both an optimized executable as well as a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
disassembly file.  If you look through that file, you can find
the main program generated from our C-code above.  I added some comments to it
below, to help it make more sense to a reader.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  ; gpiocmd = (1&amp;lt;&amp;lt;16)
  e00000:       0e 01 00 00     LDI        $65536,R1
  ; R2 = _gpio, the address of the WBGPIO&#39;s one control register
  e00004:       12 00 03 00     LDI        0x00c0000c,R2  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00008:       12 40 00 0c
  ; Here&#39;s the first instruction of our while loop: *_gpio = gpiocmd;
  e0000c:       0c c4 80 00     SW         R1,(R2)
  ; Now we toggle the bottom bit, gpiocmd ^= 1;
  e00010:       09 00 00 01     XOR        $1,R1A
  ; And repeat back to the beginning of our loop
  e00014:       78 83 ff f4     BRA        @0x00e0000c    // e0000c &amp;lt;main+0xc&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Within this main program are three instructions: one store instruction to
set the I/O, one XOR instruction to toggle the lower bit of the register &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;
containing our &lt;code class=&quot;highlighter-rouge&quot;&gt;gpiocmd&lt;/code&gt;, and then a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
always instruction to return to the top of the loop.&lt;/p&gt;

&lt;p&gt;This looks much better than the unoptimized version!&lt;/p&gt;

&lt;p&gt;So, let’s see … a quick back of the envelope estimate says that if we are
running at a 100MHz clock, these three instructions should take &lt;code class=&quot;highlighter-rouge&quot;&gt;10ns&lt;/code&gt; each,
so we should be able to toggle our LED every &lt;code class=&quot;highlighter-rouge&quot;&gt;30ns&lt;/code&gt;, right?&lt;/p&gt;

&lt;p&gt;In this case, with &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt; defined, it takes &lt;code class=&quot;highlighter-rouge&quot;&gt;350ns&lt;/code&gt; to toggle
the LED once, or &lt;code class=&quot;highlighter-rouge&quot;&gt;700ns&lt;/code&gt; per cycle.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O pin&lt;/a&gt;
therefore toggles at 1.4MHz.&lt;/p&gt;

&lt;p&gt;Wow.  What just happened?!&lt;/p&gt;

&lt;p&gt;If you examine a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
trace&lt;/a&gt;,
you’ll see something like Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. VCD trace showing the CPU pipeline signals associated with toggling an LED&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-gtkwave-single-all.png&quot;&gt;&lt;img src=&quot;/img/toggle-gtkwave-single-all-snap.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; can be rather confusing
to understand.  First, you need to know the meanings of the various
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus signals&lt;/a&gt;,
the names of the four bus interfaces shown, mem_ (the CPU
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;memory controller&lt;/a&gt;),
pf_ (the CPU
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;),
zip_ (the combined memory/prefetch bus), and wb_ (the &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;master
bus&lt;/a&gt;
within the system), as well as the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU pipeline signals&lt;/a&gt;
such
as pf_valid (theer’s a valid instruction coming out of the prefetch stage),
dcd_valid (a valid instruction has come out of the instruction decoder),
op_valid (operands are ready to be used by the execution units) and
wr_reg_ce (a value may now be written to the register file).  At the end of all
of that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;new_pc&lt;/code&gt; signal indicating that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
has been detected at the end of the pipeline.&lt;/p&gt;

&lt;p&gt;While I &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;covered the basics of what these signals meant
before&lt;/a&gt;, the overall
trace can be difficult to follow.  Therefore, I’ve summarized the signals
from this trace in Fig. 5 below–to make for easy reading.  You should also
be able to click on the figure for an expanded version that might be easier
to view.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Toggling an LED with a basic prefetch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-slow-single.svg&quot;&gt;&lt;img src=&quot;/img/toggle-slow-single.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Basically, any time there’s an instruction at the output of a particular stage,
instead of just listing the stage valid signal, I’ve  also placed the
instruction’s name into the figure as well–so you can see the instruction work
its way through the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let’s spend some time examining Fig 5.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
basically shows just one cycle in this loop.&lt;/p&gt;

&lt;p&gt;Within the trace, you can see the three instructions of our loop marked as
&lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;The timing within this trace is driven primarily by the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;,
shown in the &lt;code class=&quot;highlighter-rouge&quot;&gt;I-Bus&lt;/code&gt; line at the top.  (This captures the &lt;code class=&quot;highlighter-rouge&quot;&gt;pf_cyc&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;pf_stb&lt;/code&gt; lines from Fig. 4 further up.)
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;We discussed this particular prefetch and how it
works&lt;/a&gt;
some time ago.  In
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;that discussion&lt;/a&gt;,
I showed some clearer timing diagrams when illustrating how it would work.
In this chart, I’ve now collapsed the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC &amp;amp; STB&lt;/code&gt; signal into the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC &amp;amp; ACK&lt;/code&gt; signal into the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; cycle and &lt;code class=&quot;highlighter-rouge&quot;&gt;WAIT&lt;/code&gt; in between for those
times when &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC &amp;amp; !STB &amp;amp; !ACK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But, why are their four wait cycles?  To answer that question, let me direct
your attention to Fig. 6 to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Bus signals for a memory access&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-memack.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
starts a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;memory cycle&lt;/a&gt;.
by setting its cycle and strobe lines.  It then takes one clock cycle to
arbitrate between the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
and the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
creating a STB signal that actually gets broadcast across the bus.  As
currently configured, the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM memory&lt;/a&gt;
takes two cycles to return.  While we could drop this to one cycle, the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;
was configured for two cycles in this test.  One cycle would be just one clock
faster on every
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;
operation.  The next problem is in the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
where we have to select a result from among many items that might respond.
Hence, an additional clock is taken to multiplex among these many
possible answers.  Finally, there’s an additional clock cycle to get our
data back into the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why are so many clocks involved?  Are they required?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 7. ZBasic&#39;s bus structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-bus.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To answer this question, let’s look at the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structure for the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic&lt;/a&gt;
design, shown on the left.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in this figure
contains two
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
drivers.  Because the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Von_Neumann_architecture&quot;&gt;Von Neumann
architecture&lt;/a&gt;, there is
only one &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus interface&lt;/a&gt;
leaving the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;.
(Not shown in the picture is a second
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpu/wbarbiter.v&quot;&gt;arbiter&lt;/a&gt;
dealing with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;.)
Once the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; leaves the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
it is then merged with the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.  An
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/wbpriarbiter.v&quot;&gt;arbiter&lt;/a&gt;
then selects between the &lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;two bus
masters&lt;/a&gt;.  However,
by this point in time there’s now
been &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;too much combinatorial logic for the clock
period&lt;/a&gt;.
In order to maintain a high clock speed, a
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/busdelay.v&quot;&gt;delay&lt;/a&gt;
needs to be inserted on the path to the primary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This gets us to the master &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus
strobe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what about the delay in the acknowledgement?&lt;/p&gt;

&lt;p&gt;The purpose of the acknowledgment delay is basically the same thing: to
&lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;reduce the necessary amount of logic within one clock
period&lt;/a&gt;.
In particular, our bus implementation contains a &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;large case
statement&lt;/a&gt;
controlling the return data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;scope_sdcard_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;flctl_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sdcard_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;uart_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rtc_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wb_sio_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;bkram_ack&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b1??????&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope_sdcard_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b01?????&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flctl_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b001????&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdcard_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b0001???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b00001??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtc_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b000001?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_sio_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b0000001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bkram_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This takes time.  To keep the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
speed up, this case statement was given it’s own clock period.  Indeed,
there’s yet another clock taken to get back through the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/busdelay.v&quot;&gt;bus delay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hence, when you count it all out, fetching an instruction using &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;this
prefetch&lt;/a&gt;
takes five cycles within
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;this deslgn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, why were there six cycles shown in the trace in Fig. 5 above?  Because an
extra cycle was used within the priority prefetch/memory arbiter.  That
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpu/wbdblpriarbiter.v&quot;&gt;priority arbiter&lt;/a&gt;
defaults to offering access to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;memory
unit&lt;/a&gt; over the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;.  An extra
clock is required to switch from
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;data&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt; access.
This makes perfect sense when the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch uses an instruction
cache&lt;/a&gt;,
but the priority probably needs to switch when it isn’t.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 8. GPIO peripheral access timing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-gpioack.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The timing associated with accessing the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO device&lt;/a&gt;
to toggle the LED is similar.  The big difference is that
there’s only a single clock delay within the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, 1.4MHz is a good start.  Let’s consider this the pretest: we can do
better.  The only problem is that doing better will cost us
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;more logic&lt;/a&gt;.
Therefore, we’ll need to adjust our &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;configuration
option(s)&lt;/a&gt;
to control how much logic will be used.&lt;/p&gt;

&lt;h4 id=&quot;adding-a-better-fetch-routine&quot;&gt;Adding a better fetch routine&lt;/h4&gt;

&lt;p&gt;Some time ago, &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;I discussed how to build a prefetch that would fetch two
instructions at once&lt;/a&gt;.
Let’s take a look at the difference we might expect by using &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;this “better”
prefetch&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dblfetch.v&quot;&gt;unit&lt;/a&gt;.
To enable &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;this second/alternate
prefetch&lt;/a&gt;,
we’ll comment the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt; option and uncomment the
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DOUBLE_FETCH&lt;/code&gt; option from within the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;CPU configuration
file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example trace from this updated configuration is shown above in
Fig. 9 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. Toggling an LED with our pipelind prefetch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-slow-double.svg&quot;&gt;&lt;img src=&quot;/img/toggle-slow-double.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The big difference between this trace and the one in Fig. 5 above is that the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;strobe signals&lt;/a&gt;
are now
three cycles long, and there are two acknowledgement cycles.  Given that the
first strobe cycle deals with the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpu/wbdblpriarbiter.v&quot;&gt;priority
arbiter&lt;/a&gt;
focusing on &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;data
access&lt;/a&gt;
instead of the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction
fetch&lt;/a&gt;, we’re still
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;fetching two instructions&lt;/a&gt;
in eight cycles now instead
of one instruction in seven cycles.  Clearly doubling the speed of the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
should speed up our algorithm, right?&lt;/p&gt;

&lt;p&gt;Well, yes, just not much.  We went from taking 700ns down to 580ns per cycle.&lt;/p&gt;

&lt;p&gt;What happened?  Why aren’t we going any faster?&lt;/p&gt;

&lt;p&gt;In this case, the problem is the fact that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
isn’t fully
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Yes, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is a &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;fully pipelined
CPU&lt;/a&gt;.
This requires multiple copies of the internal CPU data structures–one per
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline stage&lt;/a&gt;.
This also requires some
rather elaborate stall calculation logic.  To create a non-pipelined
CPU, such as we have been testing so far, the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
stall logic has been simplified and many of the stages share data.  In
other words: the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
instructions take several exclusive clock cycles to complete in this mode.&lt;/p&gt;

&lt;p&gt;The next problem is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction has to wait at the output of the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
until it has been accepted into the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode unit&lt;/a&gt;.
This will keep the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
from getting another instruction until the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; has moved
into the decode operands stage.&lt;/p&gt;

&lt;p&gt;As you might expect, the store word instruction takes five cycles on the data
bus to finally complete.  This means that we took a whole eight cycles to
execute this one instruction before the next instruction could enter
the instruction decode stage.&lt;/p&gt;

&lt;p&gt;Sure, the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction executes faster, taking only four clocks,
but during this time &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is waiting for the memory cycle to complete before starting this
instruction.&lt;/p&gt;

&lt;p&gt;Worse, the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instruction cannot be fetched until the CPU accepts
the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction from the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the next instruction is finally available, it’s a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt; always
instruction (BRA).  When this instruction gets to the write-back stage, the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;
has to reset itself and start fetching the next instruction from a new
address: the result of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;.  This also means we just aborted an ongoing
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;
memory operation for the instruction that would’ve followed the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt;
operation, had it not been a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all, we are now taking &lt;code class=&quot;highlighter-rouge&quot;&gt;290ns&lt;/code&gt; for three instructions, or just under &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;ten
clocks per instruction&lt;/a&gt;.
At this rate we can toggle our LED at &lt;code class=&quot;highlighter-rouge&quot;&gt;1.7MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That doesn’t feel like much of an improvement over the last
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/prefetch.v&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What if we turned on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelining logic&lt;/a&gt;?
Would that help?&lt;/p&gt;

&lt;h4 id=&quot;going-full-pipeline&quot;&gt;Going full pipeline&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;Pipelining&lt;/a&gt;
allows the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to execute multiple instructions at the same time.  To do this, instruction
processing is split into stages, with the effect that multiple instructions
can be processed at once–with one instruction in each
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline stage&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. The ZipCPU&#39;s pipeline structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.png&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you may recall, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;five basic pipeline
stages&lt;/a&gt;:
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;, decode,
&lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;read-operands&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;execute ALU/mem/divide&lt;/a&gt;,
and write-back, as shown in Fig. 10 on the right.  In general,
each instruction takes one clock cycle to work through each stage,
although most of my charts today just show when the outputs of all the given
stages are valid, with the exception that the &lt;code class=&quot;highlighter-rouge&quot;&gt;WB&lt;/code&gt; (write-back) line shows when
the input of the write-back stage is valid.&lt;/p&gt;

&lt;p&gt;All that said, if you execute multiple instructions at once, the result should
be faster, right?&lt;/p&gt;

&lt;p&gt;Let’s find out!&lt;/p&gt;

&lt;p&gt;In order to enable the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU
pipeline&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;configuration
file&lt;/a&gt;,
both the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DOUBLE_FETCH&lt;/code&gt;
and the earlier &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt; options need to be commented out.  This
also enables the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/pfcache.v&quot;&gt;instruction
cache&lt;/a&gt;,
in order to be able to feed the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
enough instructions to keep it busy.  Just to give us something to examine
later, let’s also turn off the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
early branching, and the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;pipelined bus&lt;/a&gt;
capability.  (More on that later.)  We can do this by commenting the
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EARLY_BRANCHING&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPELINED_BUS_ACCESS&lt;/code&gt; configuration options.
Turning off the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;
is a bit more difficult, since it requires setting &lt;code class=&quot;highlighter-rouge&quot;&gt;LGDCACHE&lt;/code&gt; to zero in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/auto-data/zipmaster.txt&quot;&gt;configuration file&lt;/a&gt;
and then rerunning
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once done, we can run our three instruction loop again.&lt;/p&gt;

&lt;p&gt;You can see the basic results in the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
shown in Fig. 11 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. Toggling an LED with full CPU pipelining enabled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-pip-noearly.svg&quot;&gt;&lt;img src=&quot;/img/toggle-pip-noearly.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Wait, I thought
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU pipelines&lt;/a&gt;
were supposed to be able to execute with one instruction in every stage?
What’s with all the empty stages?&lt;/p&gt;

&lt;p&gt;We’ll pick up the story after the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction gets into the write-back stage.  This forces the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
to be cleared, so all the work we’ve done on any subsequent instructions
needs to be thrown away.&lt;/p&gt;

&lt;p&gt;Ouch!  That’ll slow us down.&lt;/p&gt;

&lt;p&gt;Second, in addition to killing our
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;,
we also suffer a clock in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction
cache&lt;/a&gt;
due to switching between cache lines.  This manifests itself in an extra clock
before &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; shows on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PF&lt;/code&gt; line, as well as an extra clock between the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instructions on that same line.  After the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
our first instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; is ready to move through our
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
after two cycles.  However, the cycle after &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; is valid in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PF&lt;/code&gt; stage
is empty again.  Why?  Because we are again switching cache lines: &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; is
the last instruction in a given cache line.  Our
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache implementation&lt;/a&gt;
requires an extra instruction cycle when switching cache lines.&lt;/p&gt;

&lt;p&gt;Why?  Shouldn’t a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache&lt;/a&gt;
be able to deliver one &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;instruction per
cycle&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Yes, perhaps it should.  However, the cache tag is stored in block RAM.
Therefore, it costs us one cycle to look up the cache tag, and a second
cycle to compare if its the right tag.  (I really need to blog about this.)
With some optimization, we can skip this in the great majority of
cases, but every now and then an access crosses cache lines and must suffer
a stall.&lt;/p&gt;

&lt;p&gt;Once we get to the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction
cache&lt;/a&gt;
seems to be doing well.&lt;/p&gt;

&lt;p&gt;A second optimization in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
implementation allows the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; to complete before the &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; instruction does.
This only works for store instructions, not data load instructions.  Because
store instructions don’t modify any registers, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
doesn’t need to hold the next instruction waiting for a result.&lt;/p&gt;

&lt;p&gt;This optimization doesn’t apply to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instructions however.  Looking at this
stall, I’m not sure I can explain it very well.  I have a vague recollection
of some complication forcing this, but I might need to go back and re-examine
that stall logic.  That’s the fun thing about examining traces in detail,
though–you see all kinds of things you might not have been expecting.&lt;/p&gt;

&lt;p&gt;Of course, since the early branching we’re going to discuss in the next section
is such a cheap optimization, costing &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;so few extra logic
elements&lt;/a&gt;, that I
hardly ever run the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
without it as we have just done here.&lt;/p&gt;

&lt;p&gt;In the end, this took us &lt;code class=&quot;highlighter-rouge&quot;&gt;120ns&lt;/code&gt; to execute these three instructions
and toggle our LED, or 4 &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;clock cycles per
instruction&lt;/a&gt;.  This
leads to &lt;code class=&quot;highlighter-rouge&quot;&gt;240ns&lt;/code&gt; per LED cycle, or &lt;code class=&quot;highlighter-rouge&quot;&gt;4.2MHz&lt;/code&gt;.  While this is better than
&lt;code class=&quot;highlighter-rouge&quot;&gt;580ns&lt;/code&gt; per cycle, it’s still a far cry from the speed I’d expect from a
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can do better.&lt;/p&gt;

&lt;h4 id=&quot;early-branching&quot;&gt;Early Branching&lt;/h4&gt;

&lt;p&gt;Perhaps you noticed in the last section all the instructions filling the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
that had to be thrown out when the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction was encountered.  This is unfortunate.  Let’s do better in this
section.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has the capability of recognizing certain
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instructions
from within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode stage&lt;/a&gt; This allows the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode stage&lt;/a&gt;
to send any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
always instructions directly to the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;.  This
also allows the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
to fill back up while the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction bubble works its way through the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to enable this early branching capability, we’ll uncomment and set
the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EARLY_BRANCHING&lt;/code&gt; flag within the configuration file.&lt;/p&gt;

&lt;p&gt;With this new configuration, we’re now down to &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;60ns&lt;/code&gt; per three
instructions&lt;/a&gt;
to toggle the I/O, or &lt;code class=&quot;highlighter-rouge&quot;&gt;120ns&lt;/code&gt; per cycle, for a cycle rate now of 8.3MHz.
You can see the resulting trace shown in Fig. 12 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Toggling an LED with both pipelining and early branching enabled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-piped.svg&quot;&gt;&lt;img src=&quot;/img/toggle-piped.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unlike our previous figures, I’m now showing multiple toggles in this trace.
Why?  Because I can!  The
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
is now that short that I can fit multiple toggles in a single image.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
starts out much as before, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt;, the stall, and then the
&lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instructions coming from the instruction
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
unit.&lt;/p&gt;

&lt;p&gt;This time, however, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instruction is in the decode stage, the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
stage is invalidated and the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache&lt;/a&gt;
gets sent to get the next instruction in the loop.&lt;/p&gt;

&lt;p&gt;While there appear to be some further room for optimization here, the data
bus is now completely loaded.  As a result, the only way we might go faster
would be to speed up the data bus by, for example, simplifying the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structure or removing some of the peripherals.&lt;/p&gt;

&lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;8.3MHz&lt;/code&gt; is much faster than we started, it’s still much slower than
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
clock speed.  Indeed, looking over our program, if our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
had no stalls at all, we would only ever be able to do &lt;code class=&quot;highlighter-rouge&quot;&gt;60ns&lt;/code&gt; per cycle, or
&lt;code class=&quot;highlighter-rouge&quot;&gt;16.6MHz&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;pipelined-multiple-bus-accesses&quot;&gt;Pipelined Multiple Bus Accesses&lt;/h4&gt;

&lt;p&gt;What if we wanted our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to toggle this LED faster?  Speeding up the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;I-cache&lt;/a&gt;
won’t help, nor would better branching logic.  Right now, our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
is the bottleneck.  It’s at its highest speed.  Hence, we can’t push any
more instructions into our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
if we are stuck waiting four cycles for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus cycle&lt;/a&gt;
to complete.  While we might be able to shave a clock cycle off in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementation latency, doing that would essentially strip the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;ZBasic SoC&lt;/a&gt;
down so bare that it could no longer be used for general purpose processing.&lt;/p&gt;

&lt;p&gt;That leaves only one way to go faster: to stuff more than one store in each
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
transaction.&lt;/p&gt;

&lt;p&gt;The first step towards making this happen is to uncomment the
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPELINED_BUS_ACCESS&lt;/code&gt; parameter in the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;CPU configuration file&lt;/a&gt;,
and then to rebuild the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic&lt;/a&gt;
simulator.&lt;/p&gt;

&lt;p&gt;This time, let’s update our
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;toggling
software&lt;/a&gt;
as well.  Instead of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction, let’s instead issue
back-to-back set and clear instructions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also compiles into a three instruction loop, like before, but this time
it’s slightly different.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  e00000:       0a 00 03 00     LDI        0x00c0000c,R1  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00004:       0a 40 00 0c 
  e00008:       1e 01 00 01     LDI        $65537,R3
  e0000c:       13 40 df ff     MOV        $-1+R3,R2
  e00010:       9d 88 95 88     SW         R3,(R1)        | SW         R2,(R1)
  e00014:       78 83 ff f8     BRA        @0x00e00010    // e00010 &amp;lt;main+0x10&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, we have two store instructions in a row followed by our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
always instruction.  Further, the two store word instructions use
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
compressed instruction set encoding, so both are shown as part
of the same instruction word.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;memory
controller&lt;/a&gt;
that has the ability to issue multiple subsequent memory
requests.  This is the controller we just selected by enabling
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPELINED_BUS_ACCESS&lt;/code&gt;.  Issuing multiple
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus requests&lt;/a&gt;,
however, has some requirements in order to avoid crossing devices
and thus losing acknowledgments or getting any results out of order.
Specifically, multiple requests must be to the same identical, or to
subsequent, addresses.  Hence these two store word instructions
will be placed into the same memory transfer.&lt;/p&gt;

&lt;p&gt;To understand what that might look like, let’s take a look at Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Issuing two write operations on consecutive clocks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-pipemem2.svg&quot;&gt;&lt;img src=&quot;/img/toggle-pipemem2.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first thing to notice is that we are now issuing two back to back store
word requests of the bus.  (The &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB STB
lines&lt;/a&gt;
are high for two consecutive cycles, while the stall lines are low.)  These
two instructions fly through the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; logic in
adjacent clock periods.  Hence, when the acknowledgments
come back, they are still together.&lt;/p&gt;

&lt;p&gt;If you look down at the LED line, you’ll also notice the two changes are made
back to back.  First the LED is set, then it is cleared.  Then nothing happens
until the next
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus cycle&lt;/a&gt;.
This means we now have a duty cycle of only 14%.  Sure, we’re
toggling faster, now at a rate of &lt;code class=&quot;highlighter-rouge&quot;&gt;70ns&lt;/code&gt; per cycle or equivalently at
a rate of 14MHz, but we now lost the 50% duty cycle we once had in our
original square wave.&lt;/p&gt;

&lt;p&gt;Next, did you notice that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
now issues a valid instruction immediately following the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instruction
from the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode
stage&lt;/a&gt;?
This is because we aren’t crossing cache lines anymore.&lt;/p&gt;

&lt;p&gt;Further, did you notice the instructions highlighted in blue?  These represent
the first half of the decompressed compressed instructions.  Since the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
knows nothing about the compressed instruction encoding, all of the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;prefetches control
state&lt;/a&gt;
is captured by the stall signal–independent of the blue marking.  The
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decoder&lt;/a&gt;
is the first to recognize the compressed instruction, and so I’ve then split
the store word instruction word into &lt;code class=&quot;highlighter-rouge&quot;&gt;SW1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SW2&lt;/code&gt; representing the first
and second store word instruction respectively.&lt;/p&gt;

&lt;p&gt;Finally, notice how the first &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; instruction gets stuck in the read-operands
stage for an extra three cycles.  This is due to the fact that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;memory unit&lt;/a&gt;
is busy, and so these commands cannot (yet) issue until the two memory
acknowledgements come back.  Just to help illustrate this, I added the
data bus &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; signal back into my trace summary, outlining the time when the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
is busy.  The first store instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;SW1&lt;/code&gt;, cannot issue until this
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;memory cycle&lt;/a&gt;
finishes.  Hence we are still limited by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
speed.&lt;/p&gt;

&lt;p&gt;Can we do better than &lt;code class=&quot;highlighter-rouge&quot;&gt;14MHz&lt;/code&gt;?  What if we unrolled our loop a bit and so
packed eight store instructions per loop?  Our C code would now look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with the associated assembly code,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  e00000:	0a 00 03 00 	LDI        0x00c0000c,R1  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00004:	0a 40 00 0c 
  e00008:	1e 01 00 01 	LDI        $65537,R3
  e0000c:	13 40 df ff 	MOV        $-1+R3,R2
  e00010:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e00014:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e00018:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e0001c:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e00020:	78 83 ff ec 	BRA        @0x00e00010    // e00010 &amp;lt;main+0x10&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How fast would you expect this loop to toggle our LED?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. Issuing eight write operations on consecutive clocks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-pipemem.svg&quot;&gt;&lt;img src=&quot;/img/toggle-pipemem.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you can see from Fig. 14 above, we are now toggling our LED four times in
&lt;code class=&quot;highlighter-rouge&quot;&gt;130ns&lt;/code&gt;, for a rough rate of &lt;code class=&quot;highlighter-rouge&quot;&gt;30MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is finally starting to look like we might expect from a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.  We’re still taking a pretty big
hit from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
which is also forcing the ongoing memory operation to be flushed.&lt;/p&gt;

&lt;p&gt;Might we go further?  Certainly!  If you check the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;GPIO toggling
program&lt;/a&gt;,
there’s an example within it that now toggles our LED 72 times in &lt;code class=&quot;highlighter-rouge&quot;&gt;770ns&lt;/code&gt;.
At first I didn’t believe this would be possible, since the instruction
stream would now cross multiple cache lines.  If the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
isn’t kept filled, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;memory
controller&lt;/a&gt;
will break the extended memory cycle.  However, in this case, because
there are so many compressed instructions, the extra cache cycles associated
with crossing cache lines aren’t noticed.&lt;/p&gt;

&lt;p&gt;This gives us our ultimate LED toggling rate of &lt;code class=&quot;highlighter-rouge&quot;&gt;47MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s also the time to check your notes.  Remember how I asked you to scribble
down the speed you expected at first, indicating how fast you felt a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
could toggle a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO
pin&lt;/a&gt;?  Go ahead,
take a peek at your scribbled note.  How close did you come to the results
we just presented?&lt;/p&gt;

&lt;h2 id=&quot;other-bus-implementations&quot;&gt;Other Bus Implementations&lt;/h2&gt;

&lt;p&gt;I would be remiss if I didn’t point out two things regarding other
implementations.&lt;/p&gt;

&lt;p&gt;First, the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone Classic implementation found in the Wishbone B3
specification&lt;/a&gt;
requires a minimum of three cycles per
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
access, and doesn’t allow multiple transactions to be in flight at once.
At best, this would have limited us to &lt;code class=&quot;highlighter-rouge&quot;&gt;120ns&lt;/code&gt; per cycle and our &lt;code class=&quot;highlighter-rouge&quot;&gt;8.3MHz&lt;/code&gt;
number above.  At worst, this will slow down the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
operation from
100MHz down to 50MHz.  However, this is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structure used by the &lt;a href=&quot;https://openrisc.io&quot;&gt;OpenRISC&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, while the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI bus&lt;/a&gt;
is more universally accepted than the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
Bus&lt;/a&gt;,
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;default AXI-lite
implementation&lt;/a&gt;
can’t handle once access per clock.  At best, it can only do one access
every other clock.  At that rate, your best speed would only ever be &lt;code class=&quot;highlighter-rouge&quot;&gt;90ns&lt;/code&gt;
per loop (assuming only two toggles, or one LED cycle per loop), not &lt;code class=&quot;highlighter-rouge&quot;&gt;70ns&lt;/code&gt; per
loop.  Likewise, if you tried to do the 72 toggles per loop using
that demo &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI&lt;/a&gt;-lite
peripheral, you’d be stuck at &lt;code class=&quot;highlighter-rouge&quot;&gt;24MHz&lt;/code&gt; instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;47MHz&lt;/code&gt; mentioned above.&lt;/p&gt;

&lt;p&gt;My whole point here is that if speed is important to you, then your choice of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
matters.&lt;/p&gt;

&lt;p&gt;These same observations apply to your choice of
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
implementation as well.  However, without any insight into how the various
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
projects have implemented their interconnects, it’s a bit difficult to
compare them.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We’ve now examined several implementations of
&lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;blinky&lt;/a&gt;
from the standpoint of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
What sorts of conclusions can we draw?
Perhaps the first and most obvious conclusion is that the speed of
&lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;blinky&lt;/a&gt;
&lt;em&gt;depends&lt;/em&gt;.  Just because
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;your processor&lt;/a&gt;
runs at 100MHz doesn’t mean you’ll be able to
&lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;blink&lt;/a&gt;
an LED at anywhere near that rate.  The closest we managed to get was 47MHz.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Our first two examples showed how critical the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;’s
performance is to overall
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
speed.  Indeed, reality is usually worse than these examples.  Our &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;code
above&lt;/a&gt;
ran from an on-chip
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM component&lt;/a&gt;.
Had we been trying to read instructions from an external
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
or even &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
our performance would’ve likely been an order of magnitude worse.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We saw several examples of how an ongoing memory operation would bring the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to a halt.  A really fast
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
therefore, can only go as fast as its memory unit and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
will let it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;Pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
are commonly known for being able to retire one &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;instruction
per clock&lt;/a&gt;.
Here we saw several examples where a
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
wasn’t able to retire &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;one instruction per
clock&lt;/a&gt;.
.  We saw examples where the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
couldn’t keep the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
filled with instructions, where an ongoing
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;memory operation&lt;/a&gt;
forced the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt; to stall,
and where a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction forced the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; to clear the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;All of these realities are known for keeping a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
number of &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;instructions per clock
cycle&lt;/a&gt;
lower than the ideal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We saw the importance of a good early branching scheme.  While the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
doesn’t really implement a traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor&quot;&gt;branch prediction&lt;/a&gt; scheme,
it’s early branching mechanism can often compensate.  Just adding this
capability to our
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
under test nearly doubled its performance from 4.7MHZ to 8.3 MHz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At one point, we got to the point where our performance was entirely
dominated by the speed of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
could run faster, but the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
could not.  In many ways, I might argue that this test does more to measure a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
speed than it measures the speed of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
The only problem with that argument is that you can still mess up the
speed of &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
implementation.  Hence the I/O speed really depends upon both the speed of
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
as well as the speed of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also learned that we could cheat the whole system if we could stuff
multiple store requests into the same memory transaction, yielding our
highest total toggle rate but yet distorting the square wave produced.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, I should point out that computers aren’t optimized for toggling LEDs,
so in many ways this is a very poor measure of how fast a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can perform.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
are optimized for executing instructions and for …
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s!
&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_multitasking&quot;&gt;Multi-tasking&lt;/a&gt;!
By the time you limit your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
down to three instructions
only, you’ve really destroyed the power your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
had initially to
execute arbitrary instructions, to execute diverse functions, to handle
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
and more.&lt;/p&gt;

&lt;p&gt;You might argue that this is like taking a semi-tractor, filling the trailer
with a single loaf of bread, and taking it out onto the race track.  That’s
not what it was designed for!&lt;/p&gt;

&lt;p&gt;On the other hand, if you really wanted to toggle an LED quickly, why not
just do it from Verilog?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;initiali&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That design is a whole lot simpler than all the work we just spent to get our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to toggle an LED at high speed, and it uses far fewer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;resources&lt;/a&gt;,
while toggling our LED at a whole 50MHz!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And he gave some, apostles; and some, prophets; and some, evangelists; and some, pastors and teachers (Eph 4:11)&lt;/em&gt;</description>
        <pubDate>Sat, 09 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/02/09/cpu-blinky.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/02/09/cpu-blinky.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Debugging a CPU</title>
        <description>&lt;p&gt;This is the story of finding a bug in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It starts much like any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
story: somewhere else.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Digilent&#39;s Arty Board&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/arty-board.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; replaced the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip within their
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board.
They also created a line of new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
boards, so my
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
board has now been
rebranded as the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty A7&lt;/a&gt;.  I never realized there was a difference until
&lt;a href=&quot;https://github.com/ZipCPU/openarty/issues/2&quot;&gt;someone wrote to tell me the design didn’t work
anymore&lt;/a&gt;.  With a
&lt;a href=&quot;https://forum.digilentinc.com/topic/16908-arty-a7-flash-chip&quot;&gt;little bit of digging&lt;/a&gt;,
he and I discovered that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip had changed.  The new &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip wasn’t just another chip from the same vendor, it was now from a
different vendor entirely: from
&lt;a href=&quot;https://www.micron.com/~/media/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf&quot;&gt;Micron&lt;/a&gt;
to Spansion.&lt;/p&gt;

&lt;p&gt;This broke my old &lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;flash controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not a problem, I thought to my self, I was hoping to write a blog article on
how to build a &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Universal Quad SPI flash
controller&lt;/a&gt;.
This &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new controller&lt;/a&gt; needed to be tested and proven in real hardware.  Let me just place
this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;universal
controller&lt;/a&gt;
into my &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; design and then all
shall be well.  Indeed, all shall be better: my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;universal Quad SPI flash
controller&lt;/a&gt;
runs at twice the speed.  This will be a nice upgrade!&lt;/p&gt;

&lt;p&gt;But what about the differences between the two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chips?  I can use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to help me select between configurations of this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;universal flash
controller&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Original OpenArty Design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/openarty.svg&quot;&gt;&lt;img src=&quot;/img/openarty.svg&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The only problem is that the &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt;
design wasn’t an
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; design
to begin with.
Ok, that’s not really a problem, we can update the
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; design so that it
uses &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
That will make it even easier to test my &lt;a href=&quot;https://github.com/ZipCPU/wbhyperram&quot;&gt;HyperRAM
controller&lt;/a&gt;
as part of my &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; project as well.&lt;/p&gt;

&lt;p&gt;The next problem is that the original
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; design requires an &lt;a href=&quot;https://store.digilentinc.com/pmod-usbuart-usb-to-uart-interface/&quot;&gt;external
serial port&lt;/a&gt;
in addition to the one on the board.  This may have kept folks from using the
design, and so my newer designs have been multiplexing a console port onto the
serial debugging port.  This is a fairly simple upgrade, so we can do that too.&lt;/p&gt;

&lt;p&gt;Further, when I was struggling to get the
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash controller&lt;/a&gt;
working, I had just had a bad experience with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on the iCE40s that had
&lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;forced me to change my default linker script(s)&lt;/a&gt;.  After a quick upgrade to &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, it now &lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;supports multiple custom
linker scripts&lt;/a&gt;,
but that now meant that the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;
needed to change as well.&lt;/p&gt;

&lt;p&gt;Other things had changed and needed to be updated as well.  For example, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; had now been
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;.  I
found a &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;lot of bugs in that
process&lt;/a&gt; some time ago,
and so I was excited to be updating the design with the new
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the middle of this, I chose to switch to Vivado 2018.3 from Vivado 2016.3.&lt;/p&gt;

&lt;p&gt;Is this starting to sound all too familiar?&lt;/p&gt;

&lt;p&gt;Years ago, when I studied Software Engineering, we would call each of these a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Small_matter_of_programming&quot;&gt;“Small matter of Programming” or
SMOP&lt;/a&gt;.  This is
said in a tongue-in-cheek fashion, however, because &lt;em&gt;nothing&lt;/em&gt; is truly ever a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Small_matter_of_programming&quot;&gt;“Small matter of
Programming”&lt;/a&gt;.  As
an engineer I also tend to (inappropriately) judge each of these changes to be
small and simple matters.&lt;/p&gt;

&lt;p&gt;The result was that, with so many changes, I was threatening to violate the
fundamental assumption of all debugging: “There’s only ever one bug in the
design.”  Sure, I know, that gets violated all the time, but think about it:
most debugging methodologies can only handle one bug at a time.&lt;/p&gt;

&lt;p&gt;So, today’s blog post is about the “final” bug in this process, and one I
certainly wasn’t expecting.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;We’ll pick up the story from the point where I was working on my new &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.
In my mind, this was the only big thing that had changed in this design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt; hadn’t significantly changed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;It passed its self test&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It now passed
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
in &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;many different
configurations&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This verified instructions up to the input of the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;.  &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;All instructions
were known to be properly performed, the pipeline timing was known to not
drop or skip instructions, and for not inserting instructions.  Further,
the difficult part of making sure memory instructions were not issued
unless I was willing to commit to them had also been
verified&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had just recently found and fixed the bug that had prevented &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; from
starting at an arbitrary address.  &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/zipload.html&quot;&gt;The
loader&lt;/a&gt;
could now load a program and start it from any address–not just the reset
address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
simulator is supposed to be able to load any program into the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
bypassing the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/sw/host/zipload.cpp&quot;&gt;loader&lt;/a&gt;.
This is primarily useful if you want to bypass writing to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; via the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/sw/host/flashdrvr.cpp&quot;&gt;flash driver&lt;/a&gt;
using the cycle-accurate &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/sim/verilated/flashsim.cpp&quot;&gt;flash simulator&lt;/a&gt;,
when you didn’t expect a bug in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; interaction.
Why wait to program the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;?
The only problem was that this simulation loader had a bug in
it that kept it from starting &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
at any address, restricting it to starting from the reset address only.&lt;/p&gt;

    &lt;p&gt;This bug had now been found and fixed, and the “WARNING” statement indicating
the presence of the bug has been removed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt; now has a new
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This one I knew worked.  I’d also
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
it, and ran it through
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulations&lt;/a&gt;,
so I could be confident that this worked.  Or … could I?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
passed its &lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; tests&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was ready.  That was the easy part.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
updates, those were a bit harder.  I had now switched conventions
regarding how I referenced peripherals.  All peripherals at fixed addresses
now had names starting with an underscore like &lt;code class=&quot;highlighter-rouge&quot;&gt;_flash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_sdram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_clrleds&lt;/code&gt;,
and so forth.  These all had to be changed, and so the
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/master/sw/board&quot;&gt;ZipCPU
software&lt;/a&gt; all
needed to be adjusted.&lt;/p&gt;

&lt;p&gt;I also wanted to bring up the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
with fewer capabilities–just to work one by
one through them.  This meant a limited
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
build, but it also broke many of the programs that now depended upon
non-existant hardware registers–since they weren’t part of the limited
build.  This was easily fixed through the per-component &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; macros
provided by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, but
it still required software to be updated to use those macros.&lt;/p&gt;

&lt;p&gt;That brought me to the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new flash
controller&lt;/a&gt;.
I knew this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
was ready, but not yet hardware proven.  That was okay, since I was going to
use this opportunity to verify my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new universal QSPI flash
controller&lt;/a&gt;
worked on real hardware, to finish testing the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/sw/host/flashdrvr.cpp&quot;&gt;driver for
it&lt;/a&gt;
and to blog about it next.  I just needed to get it working–at 2x the clock
and data speeds.  I expected this to take a bit of work.&lt;/p&gt;

&lt;p&gt;Indeed, the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
took a lot of work.  I struggled to &lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug471_7Series_SelectIO.pdf&quot;&gt;read and understand the timing of
both Xilinx’s &lt;code class=&quot;highlighter-rouge&quot;&gt;IDDR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ODDR&lt;/code&gt;
modules&lt;/a&gt;.
I was struggling with things like the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; writing properly, but not
reading properly.  Or, perhaps worse, it would read &lt;em&gt;mostly&lt;/em&gt; properly.  This
killed my
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/sw/host/zipload.cpp&quot;&gt;loader&lt;/a&gt;,
since I would write the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
program to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and then
attempt to read my data back in order to verify
it was correctly written.  If the reads were only somewhat reliable, then my
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/sw/host/flashdrvr.cpp&quot;&gt;flash driver&lt;/a&gt;
would always try to reprogram the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
This reprogramming happened nearly all the time, even when reloading the same
program with the same instructions, indicating that something was broken.&lt;/p&gt;

&lt;p&gt;This also left me wondering if
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was reading the right program from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a while, I went forward with this “broken”
&lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;flash controller&lt;/a&gt;
anyway.&lt;/p&gt;

&lt;p&gt;I got as far as the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;demonstration program that is designed to demonstrate the Arty’s 100MHz MII
ethernet port&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;This software&lt;/a&gt;
handles &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP
transactions&lt;/a&gt;, while
sending &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;pings&lt;/a&gt;
to a nearby host.  It’s also supposed to be able to respond to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;pings&lt;/a&gt;
request.  The program was failing.  For some reason it was locking
up mid-design.&lt;/p&gt;

&lt;p&gt;I figured it must be a problem with my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new flash
controller&lt;/a&gt;.
Perhaps
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was misreading its instructions from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this post isn’t about the bug in the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;,
that can wait for a later post, it is important that you understand what was
going on because it sets the background for what follows.  Basically, I was
able to write anything I wanted to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
without any problems, but reads were unreliable.  It might
be that they were 99.99% reliable and then there would be a bit flipped.  I
figured this could only be a timing problem, and that I was going to need
to write and blog about how to build a synchronization circuit.&lt;/p&gt;

&lt;p&gt;In other words, when the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;network
program&lt;/a&gt;
failed, I had no idea where within the design to look for the problem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/maxslug&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAX BAXTER&lt;/code&gt; from twitter&lt;/a&gt; suggested
I change the drive strength on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  The
&lt;a href=&quot;https://www.micron.com/~/media/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip has several
control registers, among them are the Extended Volatile configuration register
and the Extended Non-Volatile configuration register.  Both of these registers
can be used to adjust the drive strength in Ohms.  (Drive strength?  Shouldn’t
the units of drive strength be Amps and not Ohms?)  The first adjustment I
tried worked, and so my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;,
was finally working!&lt;/p&gt;

&lt;p&gt;So the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;network ping
program&lt;/a&gt;
should too, right?&lt;/p&gt;

&lt;p&gt;Wrong.&lt;/p&gt;

&lt;p&gt;Okay, that was my last working hypothesis.  Now what’s wrong?&lt;/p&gt;

&lt;h2 id=&quot;symptoms&quot;&gt;Symptoms&lt;/h2&gt;

&lt;p&gt;So let’s start by taking stock of this situation.  My goal at this point is to
verify that the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/rtl/enetpackets.v&quot;&gt;MII Ethernet
controller&lt;/a&gt;
was fully functional, even after redesigning the top level of the project to
use &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Flash controller&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;My new flash controller&lt;/a&gt;
now worked.  It could read and write the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; at an SPI clock rate
twice what it was before, and now equal to the system clock rate.
If I wrote a design to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; at this point, I could
read it back at any time to verify the correct design has been written.&lt;/p&gt;

    &lt;p&gt;There were now no more differences between the data I wrote to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; and the data I read
back out, so I figured there were no more bugs in the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Packet transactions required to get a ping response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ping.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;My goal was to test whether or not I could send and receive packets
via the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet port&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I have a &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;“manual” approach to sending a packet and receiving a
packet&lt;/a&gt;.
This doesn’t use the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; at all,
but rather controls the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/rtl/enetpackets.v&quot;&gt;networking
device&lt;/a&gt;
through the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging port&lt;/a&gt;.
I could even do this via a shell script if I wanted–only it’s harder to
calculate/verify a CRC from a shell script.  Indeed, this &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;manual ping
program&lt;/a&gt;
was how I originally built and tested the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/rtl/enetpackets.v&quot;&gt;network
controller&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;manual approach&lt;/a&gt;
isn’t very useful for debugging a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;
interaction, though, since a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;
exchange requires an &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP
request&lt;/a&gt;, then
an &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP response&lt;/a&gt;,
followed by sending the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping packet&lt;/a&gt;
itself, as shown in Fig 3 on the right.  The &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;manual
approach&lt;/a&gt;
sends one packet and then waits until the first response is received.  This
isn’t enough to get a &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping
response&lt;/a&gt;
from my host machine.&lt;/p&gt;

    &lt;p&gt;What I really wanted to know, was whether the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping
response&lt;/a&gt;
was received from my host machine.  Once my desktop/host receives the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping
request&lt;/a&gt;
from my &lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
board, it then needs to send an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP request&lt;/a&gt; to
my board, get an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP response&lt;/a&gt;,
and then finally return the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;That’s a lot of network transactions that are required just to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The good news is that you can debug what goes over the channel using
&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;.  Using
&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;, I discovered …&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;That the network wasn’t working at all initially.  I traced this down to
a failure to send the reference clock to the PHY chip in the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;That the &lt;a href=&quot;https://en.wikipedia.org/wiki/MAC_address&quot;&gt;MAC address&lt;/a&gt;
from my device was being left at zero.  I traced this down to what might
be a compiler issue.  (I’ll need to come back to this, as it’s been “fixed”
but hasn’t been fully chased down.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;That my host computer is sending
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP responses&lt;/a&gt;,
but that they aren’t getting properly
received.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;These could all be fixed fairly easily, once I realized what was taking place.
Fixing these issues got me further along, just not quite there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Eventually, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; system
hangs and stops running.&lt;/p&gt;

    &lt;p&gt;I could tell this by using &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
variables&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As you may recall, I can &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;read and write any value within
my design&lt;/a&gt;
using &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; using in the
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; distribution accepts an
optional parameter telling it where to find a map file defining where all the
variables are in memory.  The map file itself is generated by the linker,
so there’s no extra work in that part.  As an example, I can read the
variable &lt;code class=&quot;highlighter-rouge&quot;&gt;user_heartbeats&lt;/code&gt; by running,&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;wbregs -m simple_ping.map user_heartbeats&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I knew my program had stopped once this number had stopped incrementing.
  This is also how I can (somewhat) tell what’s going on within my design even
  while a program is running, without needing to stop it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; hung, the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
also failed.  Indeed, if you bring up the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;,
it hangs waiting for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to respond to it.&lt;/p&gt;

    &lt;p&gt;This is disappointing.
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
isn’t supposed to work like that.&lt;/p&gt;

    &lt;p&gt;During this time, I can reset
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
to get into the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;,
but doing so causes the system flags and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
to get reset.  Hence, I can’t tell if
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode or user
mode&lt;/a&gt; when it crashed,
nor if it was in
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;
could I tell what the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt; was set to.&lt;/p&gt;

    &lt;p&gt;Looking at the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user
space&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
suggested that the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user space&lt;/a&gt;
program always stopped at a compressed instruction.  Had I looked closer,
I might have noticed that it wasn’t always stopping at the same compressed
instruction and realized the bug.&lt;/p&gt;

    &lt;p&gt;I wrote this evidence off as not clear enough to use.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ever been in this situation?&lt;/p&gt;

&lt;p&gt;Now let me ask, how would you approach debugging this issue?&lt;/p&gt;

&lt;h2 id=&quot;examining-the-tools&quot;&gt;Examining the tools&lt;/h2&gt;

&lt;p&gt;Let’s take a quick look at the tools we have available to work with to find
this bug.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Often the first method I turn to when I have a bug like this is “Voodoo
computing.”&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Defn: Voodoo Computer&lt;/p&gt;

      &lt;p&gt;To change what isn’t broken, in an effort to fix what is&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;In good voodoo programming fashion, I disabled the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;It didn’t help.&lt;/p&gt;

    &lt;p&gt;I tried playing with the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/rtl/enetctrl.v&quot;&gt;network control port&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;It didn’t help either.&lt;/p&gt;

    &lt;p&gt;In many ways, most of the on-line forum requests I find, on either Digilent’s
or Xilinx’s site, are Voodoo programming requests.  “I don’t know what’s
going on, so I changed something I didn’t understand, and now my design
still doesn’t work.”&lt;/p&gt;

    &lt;p&gt;Sure, “Voodoo computing” feels good, but it rarely leads you any closer to
understanding what is going on within the design.  On the other hand, your
likelihood of success with Voodoo computer is still better than your
likelihood of winning the lottery.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The other end of the spectrum of bug-fixing approaches is to guarantee that
you never have the bug in the first place.  That’s the purpose of both &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; and
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;My CPU&lt;/a&gt;
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;passed both formal
verification&lt;/a&gt;
and &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;simulation&lt;/a&gt;,
but was still failing in this instance.&lt;/p&gt;

    &lt;p&gt;Now what?  I went back and double checked the proof of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; and the
network control interface.  They still passed.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;While you might be able to
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;simulate&lt;/a&gt;
a commercial CPU, it is unlikely that you’ll ever be able to
get access to the code or formal properties necessary to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; one.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As I mentioned above, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
fails&lt;/p&gt;

    &lt;p&gt;Normally, I’d try to see what’s going on within the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;.
However, a failing
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
doesn’t help much.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Most commercial CPU’s have a debugger you can use.  Sometimes it helps.
Often, as in this case, it doesn’t since few debuggers can examine a
program struggling with interrupt and non-interrupt contexts.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;Global Variables&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
program contains a variety of &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
variables&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pkts_received&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replies_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_requests_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;arp_pkt_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_pkt_invalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;arp_missed_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_non_broadcast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ip_pkts_received&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_pkts_invalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;icmp_echo_requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icmp_invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ping_reply_address_not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ping_replies_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ping_reply_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_tx_packets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;user_heartbeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I do this on purpose.  Each of these particular variables is a
  counter of some type.  I can then use them to see if or when things
  are happening with &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; or not.&lt;/p&gt;

&lt;p&gt;By compiling my &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
  program with the linker flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wl,-Map=simple_ping.map&lt;/code&gt;, the linker will
  then create a file for me containing the final addresses of all these
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variables&lt;/a&gt;.  Indeed,
  this is the very reason why they are
  &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global&lt;/a&gt;&lt;/em&gt; and not
  &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/Local_variable&quot;&gt;local&lt;/a&gt;&lt;/em&gt;
  variables: so that they will have a fixed address in memory.&lt;/p&gt;

&lt;p&gt;If you scroll through this map file, you’ll find lines looking like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; .bss           0x000000000700c490       0x68 obj-zip/simple_ping.o
                0x000000000700c490                gbl_picv
                0x000000000700c494                subbeats
                0x000000000700c498                heartbeats
                0x000000000700c49c                pkt_id
                0x000000000700c4a0                router_mac_addr
                0x000000000700c4a8                ping_rx_count
                0x000000000700c4ac                ping_tx_count
                0x000000000700c4b0                ping_mac_addr
                0x000000000700c4b8                user_heartbeats
                0x000000000700c4bc                user_tx_packets
                0x000000000700c4c0                ping_reply_err
                0x000000000700c4c4                ping_replies_sent&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These lines are created as the linker places the
  &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
  object file into my executable.  At that time, these variables can be found
  within the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;.
  Once these values are placed within the final executable, their addresses
  are then given on the left hand side, with the variables names on the right.&lt;/p&gt;

&lt;p&gt;Originally, I would read values from this list by looking up their addresses
  and then reading them with my &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt;
  command&lt;/a&gt;.
  This command implements a basic &lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;peek/poke
  capability&lt;/a&gt;
  within the design.  The result might look something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./wbregs 0x0700c498
0700c498 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 00000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would tell me that
  &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
  had never gotten to the &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats++&lt;/code&gt; statement, and so I could
  track down what was taking place across interrupts even–without
  needing to disturb the running &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this case, I knew
  &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
  was failing.  These &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
  variables&lt;/a&gt; gave me a good
  idea of &lt;em&gt;where&lt;/em&gt; it was failing.  I just had no idea &lt;em&gt;why&lt;/em&gt; it was failing.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This approach would work well with any CPU, commercial or otherwise,
as long as your design has some form of
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
within it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BREAK statements&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; supports a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;break instruction,
&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;&lt;/a&gt;.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction takes an optional immediate value, although
it doesn’t do anything different between one immediate value and any
other.  When
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
encounters a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction&lt;/a&gt;
in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;,
all processing halts and waits for the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
to rescue it.  If
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
encounters a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction&lt;/a&gt;
in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user mode&lt;/a&gt;,
you can choose to have the statement halt
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
(the default), or just to return to
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;A &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction&lt;/a&gt;
can be added to any program by just calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_break()&lt;/code&gt; function from
your C/C++ source code.  This function call is treated specially by the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; GCC back end, which then
places a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;
instruction&lt;/a&gt; at that
point in the instruction stream.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Steps to Executing a Break-point&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/breakpoint.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;My intent has always been to &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;integrate this statement into the
debugger&lt;/a&gt;,
so that the &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;debugger can create break points to help debug a
program&lt;/a&gt;.
The debugger could then replace any user instruction with a &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;
instruction to create a breakpoint.  In order to continue,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would then return the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction to its original value and then step
forward by one instruction.  It could then replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;
instruction so as to re-enable the breakpoint the next time it is seen.
This is still on my to do list, however.&lt;/p&gt;

    &lt;p&gt;Even without &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;break-point support in the
debugger&lt;/a&gt;,
break points have been one of my “go-to” approaches to debugging.  If you
know &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; hangs, you can often
bisect your code with &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; statements to slowly figure out where
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; hangs.  If it hits the
breakpoint, then the hang must’ve occurred after that instruction.&lt;/p&gt;

    &lt;p&gt;Because the break points are not (yet) supported by the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;,
though, you currently need to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction by recompiling
your program and reloading it.  It’s not pretty, but it works.&lt;/p&gt;

    &lt;p&gt;In this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction stopped
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
long before the problem.  So, it didn’t help (much).&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Many commercial CPUs have break point support as well.  This support
is usually integrated into the debuggers, and unavailable from the
compiler.  However, debuggers in general tend to struggle to handle
designs with interrupt contexts.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LEDs&lt;/p&gt;

    &lt;p&gt;We’ve discussed &lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;using LEDs for debugging before&lt;/a&gt;.
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
can set the LEDs to any particular value of interest, and you can then use
the value of the LED register once
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
hangs to figure out where
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
hung, or in what kind of state it was in.  This is much like the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variables&lt;/a&gt; approach
listed earlier, save that LEDs can be used without the
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;one example&lt;/a&gt;, I set an LED on entering
an interrupt routine and cleared it on leaving the routine.  Seeing a dimly
lit LED was then my indication the design was still running.  In that
example, when/if the design halted, I could clearly see what state
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was in at the time.&lt;/p&gt;

    &lt;p&gt;For this particular design, the LEDs got me closer.  Indeed, I was
able to bisect the code down to the loop where it failed.  It just
wasn’t close enough for me to figure out where the bug was coming from.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;This approach would also work nicely when debugging with any commercial CPU&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;Watchdog timer&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;I’ve often been successful debugging a design by using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt;.  My &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt; is essentially
identical to the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer we’ve discussed
earlier&lt;/a&gt;, with one
critical exception: when the timer goes off,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is reset.  You can then create a special bootloader to learn something about
what happened.&lt;/p&gt;

    &lt;p&gt;The trick to using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog timer&lt;/a&gt; is to sprinkle your code with
commands to set the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;count-down
timer&lt;/a&gt;
to some number greater than zero.  Once the timer reaches zero,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
resets.  In my case, this meant that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would halt, since I had it configured to halt on reset.&lt;/p&gt;

    &lt;p&gt;This approach may have been most useful to me when debugging my
&lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;S6SoC design&lt;/a&gt;, where I couldn’t fit the
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;debugging bus&lt;/a&gt;
into the design.  Once the &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt; would go off, &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; would read out to the
serial port the values from the internal
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone Scope&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/dev/resetdump.s&quot;&gt;routine to do this was carefully hand-crafted in
assembly&lt;/a&gt;,
so that I could be sure nothing would over-write any critical portions of
the previous state.&lt;/p&gt;

    &lt;p&gt;I liked that debugging approach so much, that nearly every CPU design I’ve
put together since has had a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
connection within it.&lt;/p&gt;

    &lt;p&gt;In this case, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt; felt useful but didn’t
provide me with any of the key information I needed to debug the problem.&lt;/p&gt;

    &lt;p&gt;I needed more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5: Looking back into the past&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/scope-past.svg&quot; alt=&quot;A scope that looks back in time&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This brings me back to my &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As you may remember, the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
is a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;-based scope.
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;It records any data you send it, and then stops some time following a
trigger&lt;/a&gt; after which
you’ll need to read the data out via the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;.  It
is not a JTAG scope, such as Xilinx’s ILA, but rather a scope that acts more
like an integrated peripheral to the design.  This means that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
can configure it as part of any program it might be running.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
has three big limitations.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;First, since it is a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;-based
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;,
your design needs a working and dependable peripheral
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
within it in order for it to work.&lt;/p&gt;

        &lt;p&gt;While the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone scope&lt;/a&gt;.
was built around the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;, I have other
versions for both Avalon and
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; busses.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Second, because it is a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;-based
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;,
it can only capture the width of the data
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; on every clock
period.  Since &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;my busses are all
32-bits wide&lt;/a&gt;,
this &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
will only ever capture 32-bit debugging words at any given time.&lt;/p&gt;

        &lt;p&gt;Yes, I keep telling myself that it would be easy to strap two
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scopes&lt;/a&gt;
together, but the reality is that I have never done the software work
necessary to make that possible.&lt;/p&gt;

        &lt;p&gt;But what to capture?  I’d like to capture every time a register is written,
both the name of the register (5-bits) and the value written to it
(32-bits).  This busts my 32-bit limit, and I’m not even done with my
requirements yet.  I’d also like to capture &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; requests.  In the case of
a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; read, I’d like to capture the read address (32-bits) and the
returned value (32-bits, but on a later clock).  In the case of a write,
I’d want to capture both the address (32-bits) and data written to the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
(another 32-bits).  I’d
also like to be able to “see” how long it takes the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; to return a value
(i.e. CYC, STB, WE, STALL, and ACK, or about 5 bits).
What else?  I’d definitely like to capture any branch targets (32-bits),
as well as all of the internal pipeline control flags within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;.&lt;/p&gt;

        &lt;p&gt;It should be pretty obvious that all of this information won’t fit within
a 32-bit word.&lt;/p&gt;

        &lt;p&gt;My current solution to this problem is to multiplex several words together
depending upon the conditions.&lt;/p&gt;

        &lt;p&gt;a. If &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; is
   halted, set the 32’bits to be the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline control
   signals&lt;/a&gt;.&lt;/p&gt;

        &lt;p&gt;b. If a register is written, record which register within
   &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;the set&lt;/a&gt;,
   and 26-bits of that registers value&lt;/p&gt;

        &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 6: Looking back into the past&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-dbg-reg.svg&quot; alt=&quot;Capturing any register writes&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

        &lt;p&gt;Fig 6. above shows the format of this word.  It starts with a &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;
   bit, to indicate if this was the word that triggered the scope.  The
   &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; following identifies this encoding.  It’s then followed by 4-bits
   identifying the register, and then 26-bits of the registers value.&lt;/p&gt;

        &lt;p&gt;c. Anytime the pipeline is cleared, such as if we are jumping to a new
   address, record the bottom 28 bits of the address.  (Ignore the subword
   address bits, though, since the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can only jump to addresses on
   word boundaries.)&lt;/p&gt;

        &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 7: On any jump, record the jump address&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-dbg-branch.svg&quot; alt=&quot;Recording the branch address&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

        &lt;p&gt;d. Otherwise, if there is a memory operation taking place this cycle,
   return 27-bits of the data being written (if it is a write cycle),
   otherwise return 27-bits of the address.&lt;/p&gt;

        &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 8: On any memory operation, record either the address or the value&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-dbg-memory.svg&quot; alt=&quot;Recording a memory operation&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

        &lt;p&gt;e. Finally, if all else fails, just record the internal &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU pipeline
   control signals&lt;/a&gt;.&lt;/p&gt;

        &lt;p&gt;These get kind of cluttered, so I’m not going to try to draw them here.
   Feel free to check out how &lt;code class=&quot;highlighter-rouge&quot;&gt;dbg_flags&lt;/code&gt; are set &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;within the
   ZipCPU&lt;/a&gt;
   if you are interested.&lt;/p&gt;

        &lt;p&gt;That’s four different possibilities, all nearly 32-bits in size.  The
first couple bits of each of these possibilities, stored in the MSBs,
are used to decode which of these possibilities was recorded.&lt;/p&gt;

        &lt;p&gt;One sad reality, though, is that my &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD writing
script&lt;/a&gt;
can’t handle non-constant bit-mappings.  In other words, when I need to
examine the captured data, I’ll end up looking at an ad-hoc textual
(&lt;a href=&quot;http://www.cplusplus.com/reference/cstdio/printf/&quot;&gt;printf&lt;/a&gt;) output
describing what’s going on.&lt;/p&gt;

        &lt;p&gt;It works, but it isn’t pretty.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The third limitation with any &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal logic
analyzer&lt;/a&gt;,
whether it be a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
or something else, is that the size of the memory buffer has to
compete with any other &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
RAM&lt;/a&gt;
requirements within the design.&lt;/p&gt;

        &lt;p&gt;In other words, even though the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone Scope&lt;/a&gt;
can record values from within any design at the speed of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPUs&lt;/a&gt; clock, it cannot
do so for very long.  The only way to capture relevant data therefore is
to use some kind of trigger signal in order to tell us when to
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;stop recording&lt;/a&gt;,
as I illustrated in Fig. 5 above.&lt;/p&gt;

        &lt;p&gt;The other unfortunate consequence of adding a
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
into a design is that you might &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;need to adjust how much block
RAM&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; has available to it.
Using &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
this is the easy part.  &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;One value controls the size of the block
RAM&lt;/a&gt;, and
re-running &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
will adjust the address space, adjust the pointer of where the block
RAM is located that’s used by the bootloader, and &lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;build us a new linker
script&lt;/a&gt;
to be used when we’re using this smaller amount of block RAM.  Then, later,
when we remove the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
and change the block RAM usage number back,
we’ll return to our prior/original configuration.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;As with adjusting the block RAM size, the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; size can also
be adjusted by just changing a single number in the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/auto-data/cpuscope.txt&quot;&gt;configuration&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Even better, the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
can be added (or removed) but just adding (or removing) the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/auto-data/cpuscope.txt&quot;&gt;configuration filename&lt;/a&gt;
to/from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/auto-data/Makefile&quot;&gt;command line&lt;/a&gt;.
All of the files then depending upon the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; can be rebuilt,
and pre-processor macros will be set so they can be built knowing whether or
not the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; is
built into the design or not.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, it was the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;,
together with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;,
that finally helped me find the bug.&lt;/p&gt;

&lt;p&gt;To do this, I had to modify the trigger for the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;.  That’s the
next part of this story.&lt;/p&gt;

&lt;p&gt;Normally, I have &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;’s
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; trigger off of
any internal exception that would cause
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; to halt unnaturally.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This wouldn’t work in this case, because the whole problem was that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; hung without properly halting.&lt;/p&gt;

&lt;p&gt;So I adjusted my trigger logic.  I chose to count the number of clocks
since the last valid instruction retired.&lt;/p&gt;

&lt;p&gt;Within the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, any time a
non-memory instruction retires, it sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;alu_pc_valid&lt;/code&gt; flag.  This tells
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;the CPU&lt;/a&gt;
that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
needs to be updated.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;alu_pc_valid&lt;/code&gt; isn’t true for many cycles, then
we can conclude that &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
must be hanging.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Look for a hang of 2048 cycles
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the idea.&lt;/p&gt;

&lt;p&gt;The problem is that I only want to know when
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; &lt;em&gt;hangs&lt;/em&gt;.  What if it hasn’t
been started in the first place?  What if I stop it in the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;?
What if &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;sleep mode waiting for an
interrupt&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;I needed to adjust the counter just slightly to avoid these cases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; will trigger after 2048 clocks of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
not updating the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But would this trigger on the bug?&lt;/p&gt;

&lt;h2 id=&quot;the-trace-result&quot;&gt;The Trace Result&lt;/h2&gt;

&lt;p&gt;Yes, the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
triggered!  The next time I ran
the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
program on &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; it hung as I hoped
and expected.  As a result, I could check the trace capability and see that,
yes, the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; had
triggered and there was a trace waiting for me.  (Yes, I’m skipping over
writing the software to read from the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; and to decode
its results–&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;we’ve already discussed that
before&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Since we are working with text, and not
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD files&lt;/a&gt;, every line shows one
more clock step of what’s going on.  The lines will start with the location
within the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;’s
buffer, followed by the 32’bit word located there.  After that, the line
follows a custom ad-hoc decoding script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6059 04012512:      R1 &amp;lt;- 0x.0012512
     6060 0c7b3cd9:      R3 &amp;lt;- 0x.07b3cd9
     6061 0c7b3cda:      R3 &amp;lt;- 0x.07b3cda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll pick it up at line 6059 out of 8191.  While it can be annoying to page
through thousands of lines of output just looking for the bug, in this case,
the bug was at the bottom of the trace.  Further, once
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
halted, all the trace words were identical–making it easy to quickly scan
about two pages of information from the bottom of the trace to find the
bug.&lt;/p&gt;

&lt;p&gt;At line 6059, the trace looks fairly normal.
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
simply writes to registers &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;R3&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;R3&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Then there is a cycle where nothing is written to the registers.  This is
likely the result of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt; (compare) instruction.  Such an instruction
consumes one clock, but doesn’t write to any register values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6062 5885b440:      FLAGS 5885b440 CE[DOA ] V[PDO ] MCE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 9: Pipeline stages of the ZipCPU&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.svg&quot; alt=&quot;Pipeline steps of the ZipCPU&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAGS&lt;/code&gt; response contains a large bit-field.  To help understand it,
I’ve shown a model of the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;ZipCPU pipeline&lt;/a&gt; in
Fig. 9 on the right.&lt;/p&gt;

&lt;p&gt;I’ve tried to break out some of the trace fields in the line above.
For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;V[*]&lt;/code&gt; section tells me which pipeline stages have &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;valid
entries within them: the prefetch, decode, and read-operands
stage&lt;/a&gt;.  It also tells
me that the master CE (&lt;code class=&quot;highlighter-rouge&quot;&gt;MCE&lt;/code&gt;) signal, the signal that controls whether any
instruction transitions from the read operands stage to the execution units,
is high.  Given that we have valid instructions, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MCE&lt;/code&gt; is high, &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; is running at this trace point.
Finally, the trace line shows me &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;which pipeline stages are advancing.  These
are the ones with their respective &lt;code class=&quot;highlighter-rouge&quot;&gt;*_ce&lt;/code&gt; flags
high&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;As we discussed
before&lt;/a&gt;, the
basic pipeline operation follows as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prior_stage_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Copy data from the previous pipeline
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// stage to this stage, operating on it as
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// necessary
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the stage’s &lt;code class=&quot;highlighter-rouge&quot;&gt;CE&lt;/code&gt; line is high, the instruction moves from the previous
stage into the current stage stage.&lt;/p&gt;

&lt;p&gt;In this case, instructions will be advancing from the &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt;refetch to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;ecode stage, from the &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;ecode stage to the read &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;perands stage, and
from the read &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;perands stage to the &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;LU stage.  That’s the meaning of
the cryptic &lt;code class=&quot;highlighter-rouge&quot;&gt;CE[DOA ]&lt;/code&gt; field.  This is all good: the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt; is full,
and &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is operating normally–it just so happens that it is not writing to any
register values on this cycle.  Again, this is normal.&lt;/p&gt;

&lt;p&gt;Following the compare (&lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt;) instruction, there’s a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch instruction&lt;/a&gt;.
This shows up as taking two clocks.  The first one is where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
is given a new value.  This is the same register write format we discussed
above in Fig. 6.  The second line shows where
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
actually sets the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;clears the pipeline&lt;/a&gt;.
This is the same format we showed in Fig. 7 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6063 3e801814:      PC &amp;lt;- 0x.2801814
     6064 41a00605:      JMP 0x06801814&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, we can finally identify where in the program code we are at.
By examining the disassembly of our
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
program, we find that we are in a tight loop waiting for a network packet to be
received, or for the seconds-hand on the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt; to advance.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;	while(((_netp-&amp;gt;n_rxcmd &amp;amp; ENET_RXAVAIL)==0)
				&amp;amp;&amp;amp;(_rtc-&amp;gt;r_clock == rtc))
			user_heartbeats++;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here you can see where I set one of those &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
variables&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;user_heartbeats&lt;/code&gt;.
This allowed me to tell, when using the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variable&lt;/a&gt;
debugging approach, when the program was hung, since this value would stop
changing.&lt;/p&gt;

&lt;p&gt;Following the conditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
needed to &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;clear its
pipeline&lt;/a&gt;.  This
required a couple of clock cycles, which are shown in the trace lines below.
As before, the &lt;code class=&quot;highlighter-rouge&quot;&gt;CE[]&lt;/code&gt; block shows which pipeline stages, &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;ecode, &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;perands,
or &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;LU are accepting data, whereas the &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt;alid block shows which stages
actually have valid instructions within them.  Hence, we are now watching
a new instruction stream move into the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.
The first of these new instructions will eventually write to the &lt;code class=&quot;highlighter-rouge&quot;&gt;R2&lt;/code&gt; register,
as shown below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6065 58810000:      FLAGS 58810000 CE[D   ] V[    ] MCE
     6066 58850000:      FLAGS 58850000 CE[D   ] V[P   ] MCE
     6067 5885a000:      FLAGS 5885a000 CE[DO  ] V[PD  ] MCE
     6068 5885b400:      FLAGS 5885b400 CE[DOA ] V[PDO ] MCE
     6069 087b3cda:      R2 &amp;lt;- 0x.07b3cda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next instruction is a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;load word instruction&lt;/a&gt;.
This instruction issues a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
transaction to read from location &lt;code class=&quot;highlighter-rouge&quot;&gt;0x03800000&lt;/code&gt; in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6070 70e00000:      MEM-R[0x.3800000] -&amp;gt; (Not Givn) (GBL)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
hasn’t captured all 32-bits of that address, I can infer it from the fact
that my design doesn’t have more than 27-bits of address space,
and so the number of bits is sufficient.&lt;/p&gt;

&lt;p&gt;This read polls the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/rtl/enetpackets.v&quot;&gt;network
interface&lt;/a&gt;,
to query if any packets have been read.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;(GBL)&lt;/code&gt; flag indicates that this read is from the global address space,
rather than the processor’s local peripheral address space.&lt;/p&gt;

&lt;p&gt;As you might imagine, reading a value from the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; stalls the
processor.  While there are waiting instructions in the prefetch, decode,
and read operands stages, nothing moves forward until this result comes
back–lest &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; need to undo and
re-perform any instructions.  (The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is not an
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Out-of-order_execution&quot;&gt;out-of-order&lt;/a&gt;”
machine.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6071 5884d00c:      FLAGS 5884d00c CE[    ] V[PDO ] MCE DCD-STALL MEM-BUSY&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While it is waiting, we get another flags trace line.  In this case, we can see
that the memory unit is busy, &lt;code class=&quot;highlighter-rouge&quot;&gt;MEM-BUSY&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;DCD-STALL&lt;/code&gt; is an indication that
there is an instruction in the decode stage of our
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
that is stalled.  We’ll come back to this later.&lt;/p&gt;

&lt;p&gt;The memory instruction takes about five clock cycles.  During this
time, nothing changes within &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;,
and so the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/sw/host/cpuscope.cpp&quot;&gt;control program&lt;/a&gt;
outputs the line &lt;code class=&quot;highlighter-rouge&quot;&gt;**** ****&lt;/code&gt; so we can tell that nothing is changing.&lt;/p&gt;

&lt;p&gt;Once the memory read operation is complete, the result is written to &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; **** ****
     6076 04020000:      R1 &amp;lt;- 0x.0020000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far this all looks good.  We haven’t hit the bug yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
then issues an
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;AND instruction&lt;/a&gt;,
to check whether or not the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/dev/rtl/enetpackets.v&quot;&gt;network
interface&lt;/a&gt;
has received any packets.
The result of this instruction is zero: there are no pending packets waiting.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6077 04000000:      R1 &amp;lt;- 0x.0000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Based upon the zero flag, we then hit a conditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
and so we need to clear and load the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt; again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6078 3e80182c:      PC &amp;lt;- 0x.280182c
     6079 41a0060b:      JMP 0x0680182c
     6080 58810000:      FLAGS 58810000 CE[D   ] V[    ] MCE
     6081 58850000:      FLAGS 58850000 CE[D   ] V[P   ] MCE
     6082 5885a000:      FLAGS 5885a000 CE[DO  ] V[PD  ] MCE
     6083 5885b020:      FLAGS 5885b020 CE[DO M] V[PDO ] MCE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time, we’re going to read from address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x05800060&lt;/code&gt;: the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt; register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6084 71600018:      MEM-R[0x.5800060] -&amp;gt; (Not Givn) (GBL)
     6085 5884d00c:      FLAGS 5884d00c CE[    ] V[PDO ] MCE DCD-STALL MEM-BUSY
 **** ****
     6090 04012512:      R1 &amp;lt;- 0x.0012512&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x012512&lt;/code&gt;, from the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;clock&lt;/a&gt;
is in &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary-coded_decomal&quot;&gt;Binary Coded Decimal, or
BCD&lt;/a&gt;.  You might
read it as &lt;code class=&quot;highlighter-rouge&quot;&gt;1:25:12&lt;/code&gt;.  It indicates that it has now been one hour, twenty five
minutes, and twelve seconds since this design was initially loaded.  (No,
I never set the clock to real time–I was more focused on debugging all
this time.)&lt;/p&gt;

&lt;p&gt;Again, so far this looks normal.&lt;/p&gt;

&lt;p&gt;Then something different happens.  The trace ends.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6091 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL
 **** ****
     8127 d884d000: TRIG FLAGS d884d000 CE[    ] V[PDO ] MCE DCD-STALL &amp;lt;--- TRIGGER
     8128 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL
 **** ****
     8191 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the trace location values: 6091, 8127, 8128, and then 8191.  These are
key.  &lt;code class=&quot;highlighter-rouge&quot;&gt;6091&lt;/code&gt; is expected–that’s the next clock cycle.  &lt;code class=&quot;highlighter-rouge&quot;&gt;8127&lt;/code&gt; is unexpected.
That means that we just spent 2036 cycles &lt;em&gt;doing nothing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Wait, I thought we set
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
to count 2048 cycles before setting the trigger on our
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;?
How did the count end up at 2036?&lt;/p&gt;

&lt;p&gt;It ended up at 2036 because we only counted
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
results, not results from the memory unit.  Our last valid
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
result was on cycle 6078, we we’re still good here.&lt;/p&gt;

&lt;p&gt;Or rather, we’re not good here:
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
just stopped.&lt;/p&gt;

&lt;p&gt;The good news is that we know what instruction we were executing.  If you run
&lt;code class=&quot;highlighter-rouge&quot;&gt;objdump&lt;/code&gt; on our executable, you can see an assembly listing showing the
instruction we just completed, and the context around it.  To generate a
listing, just type,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;zip-objdump -S -D simple_ping &amp;gt; simple_ping.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, I find listings of this type so valuable when debugging, that I have a
special &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target just to create
listings.  The target looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;%.txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(OBJDUMP)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -S -D $^ &amp;gt; $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will get turned into the command above any time I type&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make simple_ping.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;Make&lt;/a&gt; is smart enough to recognize, when I
type this, that if the source code for &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_ping&lt;/code&gt; has changed then it needs
to be rebuilt before dumping the assembly to &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_ping.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, I’ve recompiled this routine since capturing my trace.  As a result,
the assembly below that matches the loop in question doesn’t quite match
the trace.  Still, this was roughly the instruction we halted on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 7001808:	84 a8 97 88 	LW         (R5),R0        | MOV        R1,R2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The critical piece of this disassembly is that we were trying to execute a
two-instruction word, containing both a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;load word
instruction (&lt;code class=&quot;highlighter-rouge&quot;&gt;LW&lt;/code&gt;)&lt;/a&gt;
followed by a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;register copy
(&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;) instruction&lt;/a&gt;.
(&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;assembly&lt;/a&gt;
reads left to right, hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt; instruction copies &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;R2&lt;/code&gt;.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 10: ZipCPU ISA Quick Reference Sheet&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/nextgen.png&quot;&gt;&lt;img src=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/nextgen.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I introduced the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU
ISA&lt;/a&gt;,
I didn’t say much about compressed instructions.  Now, however, you need
to know a little bit about them to know what’s going on.  Fig. 10 at the right
shows my quick reference sheet of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
instructions.  The first line shows the basic format of most instructions.
The second line shows the format of a compressed instruction.  It starts with
a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; in the MSB, followed by fifteen bits containing the first instruction,
an unused bit, then fifteen bits containing the second instruction.  The
opcodes for these compressed instructions are shown in the top half of the
third column: &lt;code class=&quot;highlighter-rouge&quot;&gt;SUB&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LW&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LDI&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; compressed instructions are
a little different from other architectures, because you cannot jump halfway
into a word.  All instruction words, whether compressed or not, are all word
aligned.  The assembler handles the compression, making certain for example that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
targets never get compressed into the middle of a compressed instruction word.&lt;/p&gt;

&lt;p&gt;Further, the 
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; disassembler displays both
instructions within a compressed instruction word on the same line, using
a &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; to separate them–as shown above.&lt;/p&gt;

&lt;p&gt;This will all come into play in a moment.&lt;/p&gt;

&lt;p&gt;From the trace we know that we executed the &lt;code class=&quot;highlighter-rouge&quot;&gt;LW&lt;/code&gt; instruction, but that the
&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt; instruction never made it into the execution unit(s).&lt;/p&gt;

&lt;p&gt;Why not?  What happened?&lt;/p&gt;

&lt;h2 id=&quot;moving-from-trace-to-bug&quot;&gt;Moving from trace to bug&lt;/h2&gt;

&lt;p&gt;When I finally got to this point, I had no idea why
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
might stall like that.&lt;/p&gt;

&lt;p&gt;Yes, it is
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;my CPU&lt;/a&gt;.  Yes, I did write &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;the code
for it&lt;/a&gt;.  Yes,
the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;stall logic&lt;/a&gt;
is all my own handiwork.  Yes, I did just create this trace.  However,
when a design gets over 2500 lines, when you wrote it years ago, when
it has multiple options it can be built with …  it can become difficult
to remember all the details.  Worse, even if you do remember them, do
you know why this happened?&lt;/p&gt;

&lt;p&gt;So I turned to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead of proving that &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
“worked”, I wanted to prove that &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would never stall like this.  Hence, I wanted to say that: if there’s an
instruction in the read-operands stage,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
should always proceed to the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;execution stage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So how might we write such an assertion?&lt;/p&gt;

&lt;p&gt;Well, if there’s a valid instruction in the read-operands stage, then it should
proceed to the execution stage, right?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;adf_ce_unconditional&lt;/code&gt; says the instruction will move forward into the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ALU&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DIV&lt;/code&gt;ide or (not-yet-written) &lt;code class=&quot;highlighter-rouge&quot;&gt;FPU&lt;/code&gt; (floating point unit), whereas
&lt;code class=&quot;highlighter-rouge&quot;&gt;mem_ce&lt;/code&gt; says the instruction will move into the memory unit.&lt;/p&gt;

&lt;p&gt;Only, that’s not quite right.  We don’t want to move forward if the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging unit&lt;/a&gt;
has requested that we halt.  In that case, &lt;code class=&quot;highlighter-rouge&quot;&gt;master_ce&lt;/code&gt; will be low.
We also don’t want to move forward on a reset, or anytime the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
is cleared.  Further, we don’t want to move to the execution stage
if any of the execution units is busy and its result might affect one
of our operands.&lt;/p&gt;

&lt;p&gt;So, let’s adjust our assertion.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This assertion fails.&lt;/p&gt;

&lt;p&gt;It has?  Aha!  Have I found my bug?&lt;/p&gt;

&lt;p&gt;I pulled up the trace to look.  This time, it’s a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
created by &lt;a href=&quot;https://symbiyosys.readthedocs.io&quot;&gt;SymbiYosys&lt;/a&gt;.  Not, this
assertion hasn’t found the bug.  Instead, all I found were examples of
other reasons why the instruction shouldn’t move forward.&lt;/p&gt;

&lt;p&gt;The execution units shouldn’t accept any more instructions if …&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If this is a &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;op_break&lt;/code&gt;, the pipeline needs to stop just
before the instruction gets to the execution unit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
has halted on an error, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_break&lt;/code&gt; will be true and we’ll need to
make sure we are halted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we just retired an illegal instruction, we need to halt.  Similarly, if
the last memory instruction returned a bus error then we need to halt as
well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If there’s an interrupt pending or a trap was just executed,
&lt;code class=&quot;highlighter-rouge&quot;&gt;w_switch_to_interrupt&lt;/code&gt; will be true and we’ll need to switch to
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;.
In this case, the instruction in the read operands stage won’t move forward
into any of the execution units either.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list goes on.  In the end, I was surprised at how long it was.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_switch_to_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_illegal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ibus_err_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ill_err_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idiv_err_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, however,
&lt;a href=&quot;https://symbiyosys.readthedocs.io&quot;&gt;SymbiYosys&lt;/a&gt;
had found my bug for me.&lt;/p&gt;

&lt;p&gt;The problem was specific to the compressed instruction word.  In the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ISA&lt;/a&gt;,
two instruction words may optionally be packed into one, and the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has no ability
to restart any instructions mid-word (currently).  I may need to come back
and “fix” this later, but the approach was chosen to simplify the
instruction decoder: all instruction words start on word boundaries, some
instruction words contain two instructions.&lt;/p&gt;

&lt;p&gt;This was why the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt; failed:
it had to wait for the second part of the compressed instruction word to
complete before
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would halt, since there is (currently) no way to restart
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
mid-instruction word.&lt;/p&gt;

&lt;p&gt;This also means that I cannot jump into an interrupt mid-word.
The internal flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;w_switch_to_interrupt&lt;/code&gt; properly captures this logic.
The stall signal, however, did not.  That meant that any time the interrupt
signal went high in the middle of a two-instruction word, the interrupt logic
would wait for the second instruction to complete while the stall logic would
prevent the second instruction from starting.&lt;/p&gt;

&lt;p&gt;The conflicting logic lead to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Deadlock&quot;&gt;deadlock&lt;/a&gt; causing
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
to hang.&lt;/p&gt;

&lt;p&gt;The fix was simple: add a check to the stall logic so that we only stall
if an interrupt is pending &lt;em&gt;and&lt;/em&gt; we are on a single-instruction word or the
second instruction of a double-instruction word.&lt;/p&gt;

&lt;p&gt;Once fixed, my
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;network ping program&lt;/a&gt;
worked as intended again.&lt;/p&gt;

&lt;h2 id=&quot;wasnt-the-cpu-formally-verified&quot;&gt;Wasn’t the CPU Formally Verified?&lt;/h2&gt;

&lt;p&gt;Some time ago, I wrote about &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;all of the bugs I found when formally verifying
this CPU&lt;/a&gt;.
I even went to &lt;a href=&quot;https://www.youtube.com/watch?v=7DHV_rJKSgo&quot;&gt;ORCONF 2018 to discuss all of the lessons I learned
while going through this process&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shouldn’t
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
have caught this bug?&lt;/p&gt;

&lt;p&gt;Yes, I suppose it should have.&lt;/p&gt;

&lt;p&gt;Why didn’t it?&lt;/p&gt;

&lt;p&gt;Because I never created a property asserting that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would never stall indefinitely.&lt;/p&gt;

&lt;p&gt;I’ve now gone back to the proof and added a similar property to ensure that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
will never stall in the decode stage either.&lt;/p&gt;

&lt;p&gt;This wasn’t the first time I found a bug in my now
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verified&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.
The first time was when I tried setting the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt; from the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging port&lt;/a&gt;.
You may recall, I mentioned fixing this bug above.  This oversight happened
for the same reason: My initial set of formal properties was incomplete.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt; now has a set of debugging
interface properties, “proving” that the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
can set and adjust the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s state.&lt;/p&gt;

&lt;h2 id=&quot;what-about-simulation&quot;&gt;What about simulation?&lt;/h2&gt;

&lt;p&gt;What about
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;?
Could this bug have been caught during
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;?
Why wasn’t it?&lt;/p&gt;

&lt;p&gt;I suppose this bug could have been caught in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, my current network packet simulator implements a loop-back mode only.
This isn’t sufficient for testing the complex interaction of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP requests&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP replies&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping requests and
replies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An online friend has recommended I try building a network simulator that
integrates into the Linux Kernel, so that other computers can actually interact
with my design while it is running in the simulator.  This would be a truly
awesome idea, and might well have caught this bug.  I might just need to update
my network simulation for this purpose.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;So what are some of the lessons we can learn from this whole exercise?&lt;/p&gt;

&lt;p&gt;First, your current bug may not be in the last place you looked.  I had just
worked on the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.
Mentally, my mind was in a bug hunting mode within the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.
Instead, the bug was somewhere else within my design–somewhere where I least
expected it.&lt;/p&gt;

&lt;p&gt;Second, the more things you change within a design, the more painful it is
to find and fix the bugs within it.  In many ways, I set myself up for problems
with the shear number of things I had changed to get here.  Understand, just
because I presented one or two of these problems above, doesn’t mean that these
were the only problems I had.&lt;/p&gt;

&lt;p&gt;Third, did you notice how many tools I was using to debug the design?
Besides the tools for debugging &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
listed above, I was also using &lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;
for debugging
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;the network&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging a
CPU&lt;/a&gt;
really crosses several disciplines.  While this is a “hardware” task,
look at what we needed to do in terms of support software along the way:
We needed a &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging
port&lt;/a&gt; to
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
(S/W+H/W), a &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; to
gather a trace from within &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
(H/W), software to interpret that trace (S/W), a disassembly of the failing
program (compiler S/W), an understanding of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set (assembly
S/W)&lt;/a&gt;,
and finally &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;
to finally catch the bug in the end.&lt;/p&gt;

&lt;p&gt;That’s quite the cross-disciplinary task!&lt;/p&gt;

&lt;p&gt;This also means that, if you are interested in learning hardware design, there
are several prerequisites before you dive into CPU design.  The other way of
looking at it is that CPU design is a wonderful field of study where you will
be forced to learn all kinds of details of how CPUs work that you would never
learn otherwise.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And he informed me, and talked with me, and said, O Daniel, I am now come forth to give thee skill and understanding.&lt;/em&gt;</description>
        <pubDate>Mon, 04 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/02/04/debugging-that-cpu.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/02/04/debugging-that-cpu.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Building a custom yet functional AXI-lite slave</title>
        <description>&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The AXI4 bus requires five independent channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;Illustration, showing the five separate channels of the AXI4 bus&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Last year, we discussed &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;how to verify an AXI-lite slave
peripheral&lt;/a&gt;.  To do
this, we asked Vivado to generate an example &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite
peripheral&lt;/a&gt;
and then added a reference to an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite property
file&lt;/a&gt;
and about 20 more lines of code to our design.  Much to my surprise, Vivado’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite peripheral&lt;/a&gt;
didn’t pass &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;The core&lt;/a&gt;
failed because it didn’t properly drop the ready lines to prevent an incoming
transaction in the case where the outgoing acknowledgement channel was stalled.&lt;/p&gt;

&lt;p&gt;We also noticed that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx’s demonstration
core&lt;/a&gt;
as designed could only ever ever process a single
transaction for every two clocks ticks, limiting its maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.  No
simple code adjustment would fix this.&lt;/p&gt;

&lt;p&gt;That post referenced &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;a core generated by Vivado
2016.3&lt;/a&gt;.
Since that time, I’ve also had a chance to
download and examine Vivado’s 2018.3 AXI-lite demonstration core.  While
superficial changes have been made to this example core, it still suffers
from the same basic design flaws: unless the outgoing ready signals on the two
acknowledgment channels, both for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, are
dependably held high &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
will drop acknowledgments.  This is fundamentally bad, since it could cause a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to lock up hard.  Worse, since it would be caused by the vendor’s
demonstration code, no one would think twice to examine it for an error.&lt;/p&gt;

&lt;p&gt;For the sake of those who wish to work with an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; slave peripheral,
let’s take a moment and examine how we might build a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;better AXI-slave&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;goals-for-any-bus-component&quot;&gt;Goals for any Bus Component&lt;/h2&gt;

&lt;p&gt;Whenever I build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component, whether it be a slave or a master, I start with three basic design
criteria.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component must maintain the rules of the road for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
it is on.  In the case of an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
bus&lt;/a&gt;, that means we need
to examine the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt; to determine how our
code must behave.&lt;/p&gt;

    &lt;table style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/fpropfile.png&quot; alt=&quot;What is a formal property file?&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;Once we’ve done that once, we can then capture this behavior in a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal
property file&lt;/a&gt;
that can then be used later to verify any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; component.
Such property files are great timesavers, since they typically only need
to be built once, and yet they can then be used to verify any number of
design components.&lt;/p&gt;

    &lt;p&gt;A common question I often get from corporate clients new to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
is, where do I start?  My answer is often, “Start by building property
files for the interfaces you support,” for this very reason: for a small
amount of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
work, you can get a tremendous return on your investment.&lt;/p&gt;

    &lt;p&gt;Today, we’ll be reaping a return on our &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;last AXI-lite
investment&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My next two goals are performance related.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Once the component obeys the rules of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
my next priority is maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.  A
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component must support the highest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
possible.  Think of it this way, the speed of the entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU portion of the
design&lt;/a&gt;
depends upon the speed of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
High performance is achieved by pipelining multiple transactions to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
in a group.  The higher the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; is, the faster the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
(or whatever
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master) can perform its functions.&lt;/p&gt;

    &lt;p&gt;Several individuals have posted both on
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s forum&lt;/a&gt; and
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent’s forum&lt;/a&gt;
about the MicroBlaze computer being
&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;horrendously slow&lt;/a&gt;
[&lt;a href=&quot;https://forum.digilentinc.com/topic/4930-arty-microblaze-speed-question&quot;&gt;1&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Evaulation-Boards/AXI_GPIO-too-slow/td-p/725431&quot;&gt;2&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/Why-microblaze-loop-speed-is-40-times-slower-than-I-expected/td-p/111342&quot;&gt;3&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/7-Series-FPGAs/SDK-GPIO-implementation/td-p/784626&quot;&gt;4&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/AXI-GPIO-max-rate/td-p/484496&quot;&gt;5&lt;/a&gt;].
The measurement is typically made by examining how fast the processor can
toggle a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;general purpose
output&lt;/a&gt;
fed into an &lt;a href=&quot;https://en.wikikpedia.org/wiki/Oscilloscope&quot;&gt;oscilloscope&lt;/a&gt;.
While I’ll admit this isn’t a great measure of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
performance, it is a somewhat decent measure of peripheral
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
performance.
(Incidentally, the ZipCPU can toggle a GPIO peripheral about 12x
faster](/zipcpu/2019/02/09/cpu-blinky.html))&lt;/p&gt;

    &lt;p&gt;There is no reason why a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt; driver,
as an example, needs two clocks for every transaction.&lt;/p&gt;

    &lt;p&gt;We’ll create a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component in a moment that can handle one transaction
on every clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Minimum &lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;By &lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
I mean the number of clock cycles it takes from when the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
makes a request until the response comes back from the peripheral.  Most
of the clock cycles used during the request will be
consumed by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
first and then the interconnect, meaning that there isn’t all
that much that a peripheral designer can do to affect the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
associated with accessing his component.&lt;/p&gt;

    &lt;p&gt;What he can do, however, is make certain that he doesn’t &lt;em&gt;increase&lt;/em&gt; that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt; by how he
processes the request.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; requires that all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
signals must be registered on the clock edge.  This means that the minimum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
through any &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification compliant&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-slave
peripheral&lt;/a&gt;
can never be better than a single clock cycle.  The
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;core&lt;/a&gt;
presented below will achieve this minimum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My last criteria, &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum
area&lt;/a&gt;,
is often lost after meeting the first three.  In general, a design that
meets the first three criteria is often so constrained that there’s not
much more you can do to achieve &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum
area&lt;/a&gt;.  This is why
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;choice of a bus
standard&lt;/a&gt; is so
important to anyone designing for &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;low area/minimum
cost&lt;/a&gt;: design
choices have consequences.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall system performance depends upon the first three design goals.  High
performance is fairly easy to meet using the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;–which is
one of the reasons why I like it so much.  With
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
however, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus requirements&lt;/a&gt; and
maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; goal can seem
contradictory.  It’s certainly not obvious, and so it’s worth illustrating
how to make this happen.&lt;/p&gt;

&lt;p&gt;Therefore let’s examine how to make an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite
slave&lt;/a&gt;.  I’ll
focus on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; based
design.  Indeed, if we do this right, then our design should be able to map into
block &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;.  (My first
draft didn’t meet this criteria.)  Either way the design approach will be quite
appropriate for a typical &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;register-based&lt;/a&gt;
slave peripheral.&lt;/p&gt;

&lt;p&gt;Finally, before beginning to look at how we’d do this, let’s just note that
of the two types of transactions, read and write, the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
read channel is simplest to implement.  Unlike the write channel, there’s only
the one request channel called the read address channel going into a read
transaction.  The write channel, on the other hand, requires both an address
and a data channel feeding it, as shown in Fig. 1 above.  Therefore let’s
examine the read channel first, and then apply the lessons we learn from the
read channel to the write channel in the following section.&lt;/p&gt;

&lt;h2 id=&quot;read-channel-processing&quot;&gt;Read Channel Processing&lt;/h2&gt;

&lt;p&gt;Sometimes I like to sprint into code and just see how far I can get.  In this
case, such a sprint into the read channel implementation appears easy:
every time we get an &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY &amp;amp;&amp;amp; S_AXI_ARVALID&lt;/code&gt; we want to set
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; on the next clock.  As long as &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; remains true, this
is sufficient for high speed interaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that we’re following Vivado’s notation here, and using &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt; to
describe any external signals, whereas we’ll use both the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_*&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt; prefixes to describe any internally generated
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. AXI-lite read transactions with S_AXI_RREADY high&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-rready.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, all with ARREADY held high&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 2 on the right illustrates how this scheme might work.  Following any
clock period where both &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt; are true,
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is set with the appropriate result on the next clock.  So far,
this is about as easy as
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone&lt;/a&gt;
was.&lt;/p&gt;

&lt;p&gt;The problem with the approach outlined above is easily discovered
when we attempt to
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;verify its functionality&lt;/a&gt;.
It’s also the same basic logic the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Vivado generated
core&lt;/a&gt;
was been using: if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; were always true, this would pass as working
code.  Nothing in the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt;,
however, requires that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; be guaranteed to be true.  Indeed, I
have to believe the authors of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
were quite proud of creating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interface that might respond to “&lt;a href=&quot;https://en.wikipedia.org/wiki/Backpressure_routing&quot;&gt;back
pressure&lt;/a&gt;”
as a stall on an outgoing channel is called.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 3. AXI-lite read transactions with S_AXI_RREADY high&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-rfails.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, with two lost due to RREADY being low&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 3 on the left shows what this naive implementation might lead to when
the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; line not held high.&lt;/p&gt;

&lt;p&gt;In particular, we are required to hold the outgoing data constant any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid &amp;amp;&amp;amp; !S_AXI_RREADY&lt;/code&gt;.  Did you notice how the blue transaction in this
figure got lost?  This would be a catastrophic bug in our code.  Notice also
how there’s an empty clock cycle in the return channel between the brown return
and the white return, precisely where the blue return should be?&lt;/p&gt;

&lt;p&gt;Two realities lead to this bug.  The first is that we need to stall, i.e. lower,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; line when the response ready, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, is low and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is high.  (The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt;
is very clear that setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; line cannot depend up
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; being set initially.)  A straightforward implementation might
look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This implementation, however, would cause the bug shown above in Fig. 3 above:
the ready signal is only dropped &lt;em&gt;after&lt;/em&gt; a transaction is lost!  This is a
catastrophic bug.&lt;/p&gt;

&lt;p&gt;We could try to simplify this approach and just state that,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this would meet our
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus requirements&lt;/a&gt;, it would violate
our maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; goal.&lt;/p&gt;

&lt;p&gt;Another simple fix would be to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; signal combinatorially,
so that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Result of combinatorial axi_arready logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-rcomb.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, where the AXI_ARREADY line is generated combinatorially&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This appears as though it might solve all of our problems.  A trace built upon
this logic is shown in Fig. 4 on the right.&lt;/p&gt;

&lt;p&gt;Only it doesn’t solve our problems.  It violates our first goal, since the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
is quite clear: all signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; included, must be registered.  That
is, they must all be  set on a clock edge.  Adjusting &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; to meet
this standard will force a single clock delay in processing.&lt;/p&gt;

&lt;p&gt;If we try to register &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; while maintaining a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
of one transaction per clock, then we are forced to deal
with accepting a transaction before we realize we should’ve been stalled.
Such a transaction will need to be
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;
within our core.&lt;/p&gt;

&lt;p&gt;We &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;studied how to do this back in 2017, under the name of a “buffered
handshake.”&lt;/a&gt;
&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;Eric LaForest has recently posted a similar description, only he
called it a “Skid Buffer”&lt;/a&gt;.
However, I have yet to present code that will perform this handshake here on
this blog.  Until now.&lt;/p&gt;

&lt;p&gt;Sadly, the design is not trivial.
&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;LaForest&lt;/a&gt;
makes it look easy, although I tend to get confused every time I try this.
Traces just don’t do it justice.  Therefore,
let’s examine how this might work through a series of figures.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. The master requests a read&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-dbl-1.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll start with Fig. 5 on the right.  This figure shows the beginning of the
transaction, as the master creates a read request to send to the
slave.  We’ll assume that all of the ready signals are true initially, so this
request is immediately accepted by the slave.&lt;/p&gt;

&lt;p&gt;This is the way we want things to work.&lt;/p&gt;

&lt;p&gt;Some might even argue that this is how slaves are normally accessed: one
cycle at a time separated by idle cycles on both sides.
This was something I discussed in &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf.pdf&quot;&gt;my 2016 ORCONF presentation as well&lt;/a&gt; (see slides 26-27), since
the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone classic bus&lt;/a&gt; can never
handle more than one transaction every three clocks as a result.
We’ll reflect for a moment on the reality that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is more than capable of issuing multiple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
requests on adjacent clocks, and then we’ll ignore this piece of advice and
continue with a second access following immediately after the first one.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. The slave returns its first response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-dbl-2.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 6 illustrates the slave returning the initial request as a response to
the master.  This is on the next clock, so we are still meeting our maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
requirement of a single clock.  During this time, the master
sends a second request to the slave.&lt;/p&gt;

&lt;p&gt;Again, this is the way things are supposed to work.  We’re just pushing
data through at high speed, one transaction on every clock and meeting our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
requirements.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. The master stalls the response channel before the second response is accepted&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-dbl-3.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 7 shows the beginning of our problems.  In Fig. 7, the master
lowers his &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; signal (now shown in red), stalling the return
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
It will now take the slave another clock period, i.e. until Fig. 8, before
the slave can lower &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; since &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is required
to be a clocked signal.  This means that the slave must accept a second
request, the request marked number three in Fig. 7, while still waiting
for its second response to the master to be accepted.&lt;/p&gt;

&lt;p&gt;There’s no other way to do handle this new request than to
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt; this
transaction within the slave.  This means that that the slave will need to
hold on to two separate transactions any time the read address channel is
busy while the read response channel is stalled.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. The slave now needs to stall the address channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-dbl-4.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the next clock, shown in Fig. 8, the slave can finally lower the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; line to stall the input.  As we noted above, the slave is
required to hold onto both request number three and the second response as
long as the input ready line, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is stalling our whole system.
Failing to do this means that a transaction would get lost in this shuffle.&lt;/p&gt;

&lt;p&gt;Now that both request and response channels have stalled, the system can remain
in this state indefinitely.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. The master releases the response channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-dbl-5.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Eventually, the master will raise the ready line, as shown in Fig. 9 on
the right.  Once this happens, the second response can cross the channel.&lt;/p&gt;

&lt;p&gt;Further, the third request can move from the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;internal
buffer&lt;/a&gt;
to the output position on the next clock.&lt;/p&gt;

&lt;p&gt;Because it takes a clock edge to lower the stall signal, request number four
will remain stalled this cycle.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. The slave can now release the request channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-dbl-6.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now when we get to Fig. 10, the slave has finally raised its ready signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;, meaning request number four can proceed to the response
channel finishing our example.&lt;/p&gt;

&lt;p&gt;This is the concept we are going to try to implement below.&lt;/p&gt;

&lt;p&gt;Usually when I start to implement something like this, I create a buffer
is-valid signal to indicate that there’s valid information in the buffer.
However, if you look back over the last several charts, you can see that any
time &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is low, there’s data in the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;.
Hence, we’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_ARREADY&lt;/code&gt; as our signal that we have something in
this extra
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
position.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. The read address stall lin doesn&#39;t go low until the buffer is full&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-dbl-7.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 11 illustrates the other situation that often confuses me, since I will
catch myself trying to stall the upstream channel anytime the downstream
channel is stalled.&lt;/p&gt;

&lt;p&gt;That’s not how this &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;
works, however.  To do this right,
the upstream channel should only stall if the downstream channel is stalled
&lt;em&gt;and&lt;/em&gt; if there’s an item in the buffer.  Both criteria need to be true.&lt;/p&gt;

&lt;p&gt;We’ll need this tidbit as we move forward.&lt;/p&gt;

&lt;p&gt;So let’s work through our downstream implementation first.&lt;/p&gt;

&lt;p&gt;The downstream response will be invalid following a reset (obviously), but
valid following any incoming request, stalled or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise if the response was valid before and the downstream response channel
was stalled, then we need to maintain the response on the output channel until
it has been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are the straightforward parts of this logic.&lt;/p&gt;

&lt;p&gt;The piece that isn’t quite as straight forward is that if the downstream channel
isn’t stalled, but yet there’s an item in our buffer and so &lt;code class=&quot;highlighter-rouge&quot;&gt;!axi_arready&lt;/code&gt;,
then we also want to set the output response channel as valid.  This was the
situation shown in Fig. 9 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In all other cases, we’ll release the response channel and lower our valid
signal, since all transactions have by now been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what about the data content of this channel?&lt;/p&gt;

&lt;p&gt;First, I’m going to keep this simple.  Our slave will never return
any type of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;.
You can read about what I dislike about allowing slaves to create
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; in my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
properties post&lt;/a&gt; if you
are interested.  Not returning any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; means the response
type is constant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rresp&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OKAY&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was too easy.&lt;/p&gt;

&lt;p&gt;The response data payload is just a touch harder, although we can split into
three basic steps.&lt;/p&gt;

&lt;p&gt;First, on any valid read address transaction, we’ll set the address for
our &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;.
If our 
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
doesn’t contain a valid read request, then this will just be a don’t care
address.  Even better, as long as the buffer isn’t already full, then we can
set the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
address independent of whether there’s a request we are accepting or not.
This helps to satisfy our minimum logic goal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dly_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second step is to determine which address to read from.  If our
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
has valid data in it, then we’ll want to read from this
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;
address, &lt;code class=&quot;highlighter-rouge&quot;&gt;dly_addr&lt;/code&gt;.  In all other cases we can read directly from the
address provided on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The third step is to do the actual read.  In the case of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;,
extraneous reads never hurt.  Therefore we can read any time the outgoing
channel isn’t stalled–regardless
of whether we have an active read request or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If the outgoing channel is not stalled (above)
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// then read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you were implementing any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;hardware registers&lt;/a&gt;
instead of a block &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;,
this is where you would implement the read
from those &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;registers&lt;/a&gt;.
You might also to adjust this logic as well: sometimes read transactions have
side effects, such as in my
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V&lt;/a&gt; design.
In that case, you’d want to add a bit more logic, perhaps even the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_READ_SIDEEFFECTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If 1. the outgoing channel is not stalled (above)
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// and 2. there&#39;s an outstanding (!axi_arready) or
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// incoming (S_AXI_ARVALID) read request, then
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// perform the read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That sets our response data.  Now for the upstream &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; which, as
I mentioned above, also determines when or if we have an item in our buffer.&lt;/p&gt;

&lt;p&gt;The logic here starts by looking downstream.  If we have something in our
buffer, that is if &lt;code class=&quot;highlighter-rouge&quot;&gt;!axi_arready&lt;/code&gt; is true, then as long as the downstream
channel remains stalled with &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; !S_AXI_RREADY&lt;/code&gt; the upstream
channel needs to remain stalled as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Outgoing channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If something is already in the buffer,
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// axi_arready needs to stay low
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the difficult part: If the downstream channel is stalled,
and the upstream channel is passing us data, then we need to accept the
request into our buffer and then immediately stall the upstream channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we didn’t stall the upstream channel &lt;em&gt;until&lt;/em&gt; there was a valid item
in our buffer.  This is the detail I always get confused by which I illustrated
in Fig. 11 above.&lt;/p&gt;

&lt;p&gt;Finally, if the outgoing response channel isn’t stalled, then we can set
the read address ready line to be ready for the next transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all there is to it, although I personally find the pictures above
easier to understand than the code above.  Indeed, if it weren’t for the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
tools, I might’ve gotten this code quite wrong.&lt;/p&gt;

&lt;p&gt;One last figure in this section will illustrate how this logic works.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12. A demonstration of how reads work with this core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-read.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 12 shows the results from a rather complex cover statement found at the
end of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;the file&lt;/a&gt;.
Here you can see that, yes, we did meet our requirements for both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;.
The next piece of good news is that this logic passes our
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
test–but I’ll have more to say on that further down.  Finally, let me say
that I found Figs. 5-11 more instructive about what was going on that
the trace shown in Fig. 12 on the right.&lt;/p&gt;

&lt;p&gt;For now, let’s turn our attention to the more difficult transaction: the
write transaction.&lt;/p&gt;

&lt;h2 id=&quot;write-processing&quot;&gt;Write processing&lt;/h2&gt;

&lt;p&gt;We now need to apply the lessons we just learned from the read channel to the
write channel.  The first lesson is that we’ll need a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;,
and the second lesson is that the return ready signals will also indicate
negatively whether or not buffer is full.&lt;/p&gt;

&lt;p&gt;That’s the easy part.&lt;/p&gt;

&lt;p&gt;If only the write channel were as easy as the read channel.  Indeed, it would
be if we were able to guarantee that the write address and write data would
both arrive at our slave at the same time.  Sadly, this is not the case.  The
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;two channels, write address and write data, may be separated by up to two
clocks&lt;/a&gt;.  We’ll need to
synchronize those two channels here, however, since we can’t perform the
write transaction internal to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;our slave&lt;/a&gt;
without having both the required address and the required data.  That
then will be the challenge of this section.&lt;/p&gt;

&lt;p&gt;Let’s think this through for a moment before sprinting ahead this time.  We
can complete a write transaction any time the following three conditions hold.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The outgoing response channel must not be stalled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We must have the address of where we need to write.  This can be
either in our buffer, or coming directly from &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWADDR&lt;/code&gt;.  Yes, we’ll
need to buffer the address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We must have the data of what we wish to write as well.  This also includes
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;the write strobes&lt;/a&gt;,
indicating which bytes in our data word need to be written.  This channel
will also need to be buffered, just like the write address channel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As before, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_AWREADY&lt;/code&gt; to indicate that we have a value in
our address buffer, and &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_WREADY&lt;/code&gt; to indicate that we have a value in our
data buffer.&lt;/p&gt;

&lt;p&gt;That’s going to be our basic approach.  Now let’s just work through the
various signals.&lt;/p&gt;

&lt;p&gt;Let’s start with the write address channel ready signal, and the logic that
would be appropriate if there were no write data channel.  That is, set the
ready on reset, then deal with the case where the outgoing buffer is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now when I say that the outgoing buffer is stalled, I mean that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;
is true and so there’s a value waiting to be returned.  I also mean that
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; is false, meaning that this value can’t go any where.  This
leaves us with two conditions to check, as shown in Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Stall conditions if the response channel is already stalled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-wdbl-1.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If the output channel is stalled and our buffer is already full, then we need
to remain stalled.  This is the case shown on the right above.  Likewise if
the output channel is stalled and we just accepted a value, then we need to
lower the ready line of &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt;.  This is shown on the left above.
In either case, we need to drop the ready signal for this channel.  However,
if there’s nothing in our buffer and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; is low (not shown),
then we can just leave our buffer empty.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// The output channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If our buffer is full, remain stalled
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If the buffer is empty, accept one transaction
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// to fill it and then stall
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That wasn’t too bad, and it was roughly identical to what we did before.&lt;/p&gt;

&lt;p&gt;Now let’s look at the case where the output isn’t stalled, as shown in Fig. 14
below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. Two conditions preceeding a write address channel being ready&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-wdbl-2.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left side of Fig. 14 shows the case where a write data is coming into our
core, and the right side shows the case where the write data is already within
our core and stalled.  In both cases, we’ll want to make certain that the write
address channel is ready to accept an associated address.&lt;/p&gt;

&lt;p&gt;But what’s happening on the write address channel?  It doesn’t matter.  Either
an address is coming in or it isn’t.  If no address comes in, then the
&lt;em&gt;write data&lt;/em&gt; channel will have to stall–not the &lt;em&gt;write address&lt;/em&gt; channel.
We are working through the write address channel, so that doesn’t impact
us here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is clear, and write data
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// are available
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one final condition, shown below in Fig. 15.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15. What happens when the response channel is ready, but the address shows up before the data&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-wdbl-3.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What happens when there’s no data available from the data channel and a valid
address shows up?  There’d be no data to go with it!  We’ll have to then stall
until there’s data ready.  Two examples of this are shown above in Fig. 15.
If neither example is fits, then we can set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; otherwise we’ll
need to stall.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we were ready before, then remain ready unless an
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// address unaccompanied by data shows up
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you get all that?&lt;/p&gt;

&lt;p&gt;The write data ready signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt;, has the same identical logic as
that of the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; signal save that the write data and address channel
information are reversed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is clear, and a write address
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// is available
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// if we were ready before, and there&#39;s no new data avaialble
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to cause us to stall, remain ready
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What does it mean to buffer the transaction in this context?  For the write
address channel, it means capturing the incoming address.  Remember,
our buffer is valid any time &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; is low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Buffer the address
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same applies to the write data channel.  We’ll want to make a copy of it
any time we accept a value.  Then, if we end up accepting a value while the
output is stalled or likewise if we have no address, this will become the
buffered value waiting to be written to the address that hasn’t yet been given.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Buffer the data
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a moment we’ll do our write and move the operation to the output buffer.
But not until the address and data are synchronized.  Here, we pick between
either the buffered address or the incoming address for that write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read the write address from our &quot;buffer&quot;
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_waddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, we need to pick between the buffered data and the incoming data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read the write data from our &quot;buffer&quot;
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is finally time to write to our &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;slaves
registers&lt;/a&gt;.
Remember our three conditions for writing that we presented above?  Here
they are again: We can write if there’s a place available in the outgoing
channel, if we have a valid address, and if we have valid data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// If the output channel isn&#39;t stalled, and
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we have a valid address, and
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we have valid data
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s been a while since &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;I’ve discussed byte enable or select
lines&lt;/a&gt;.  The basic
idea is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt; signal contains which of the various octets
on the bus should be written by the given value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Vivado’s auto-generated slave core&lt;/a&gt;
uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop to walk through the various select lines and their associated
bytes.  While this works, I find it harder to read than the code above.
Further, since &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx requires&lt;/a&gt;
that the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite bus&lt;/a&gt;
be only ever 32-bits wide, the code above should still be widely applicable.&lt;/p&gt;

&lt;p&gt;That leaves only one step left: adjusting &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bvalid&lt;/code&gt; to acknowledge
that a write has taken place.  The code below almost follows our three
conditions above, though it skips the first one.  As it turns out, it doesn’t
matter if the output is valid but the bus master isn’t ready:
we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; high either way using the logic below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The outgoing response channel should indicate a valid write if ...
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 1. We have a valid address, and
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 2. We had valid data
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// It doesn&#39;t matter here if we are stalled or not
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// We can keep setting ready as often as we want
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oops, I forgot one: as with the read channel, our write response won’t return
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OKAY&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s what it takes to write to an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI slave
peripheral&lt;/a&gt;
tuned for high
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.
I hope the pictures along the way helped.  I know I tend to struggle getting
the logic right for a basic &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;
as we’ve done above.  Without the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verification component&lt;/a&gt;,
I’m not sure I’d have much confidence doing this.&lt;/p&gt;

&lt;p&gt;Fig. 16 below shows an example trace drawn from the logic of this core.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16.  Write demonstration through an improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left side of this trace shows several examples of how the logic might stall.
The right side, on the other hand, shows that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
truly can handle one transaction per clock.&lt;/p&gt;

&lt;p&gt;Shall we discuss what it takes to verify
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this design&lt;/a&gt;?
It’s actually &lt;em&gt;really&lt;/em&gt; easy to do now that we have a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
list&lt;/a&gt;
put together for the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite bus&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Verifying&lt;/a&gt;
this design isn’t all that much more difficult than &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;the last design
we verified&lt;/a&gt;.  Really,
it isn’t.&lt;/p&gt;

&lt;p&gt;The first step is to instantiate our set of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite bus
properties&lt;/a&gt;.
This big ugly block of code only looks that way because there are so many
signals associated with this protocol.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Allow a maximum of 2^4-1 or 15 transactions to be in flight at
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// any given time
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If I wasn’t interested in passing
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
I might be willing to stop right here.  However,
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
is a powerful tool and I’ve learned to depend on its ability to prove that
a design will maintain a set of properties for all time.&lt;/p&gt;

&lt;p&gt;So let’s look at the few properties that are necessary for passing the
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
step.&lt;/p&gt;

&lt;p&gt;Let’s start by examining three read properties.  First, if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is
low, then there shouldn’t be any outstanding read transactions at all.  Our
code should match the counter from within our
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;property set&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, if the output is valid but stalled, then we may have accepted either
one or two read requests.  If we have something in our buffer, then
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; will be low and we will have accepted two requests.  In all other
examples, we’ll have only accepted one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those same properties can now be applied to our write channel, but with one
subtle difference.  The write channel contains two separate channels whose
counts must be checked.&lt;/p&gt;

&lt;p&gt;First, if the output is valid then each channel, address and data, must have
accepted at least one request.  The two channels may have accepted a second
request as well, but only if they currently have one
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if no output is valid, then each channel must either have
nothing outstanding, or it must have one valid and be waiting on the other
channel.  These two options are shown in Fig. 17 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 17. A demonstration of how reads work with this core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil/demoaxil-wdbl-4.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;They are described in properties below.  Note that it is an error for both
buffers to contain a value if &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bvalid&lt;/code&gt; is false.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/demoaxi.sby&quot;&gt;script
for this core here&lt;/a&gt;.
Only twenty six steps are necessary to prove that we meet all of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;bus
properties&lt;/a&gt;
I presented in our &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;last AXI-lite
article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cover-properties&quot;&gt;Cover properties&lt;/h2&gt;

&lt;p&gt;Only one requirement remains to be shown from our initial goals above.  We’ve
shown that we can meet our
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus interface requirements&lt;/a&gt;, but can
we truly accomplish maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
as we wanted?&lt;/p&gt;

&lt;p&gt;Let’s see if we can push four values through this slave, retiring one read
on each of four clocks.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RREADY&lt;/code&gt; will be true any time
a return value is accepted, than if this value is high for four clocks in
a row we’ll know
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;our core&lt;/a&gt;
has the ability to as fast as &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the
specification&lt;/a&gt;
will allow it to go.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why four clocks though?  Because I wanted some confidence that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
could truly handle retiring one request per clock without requiring it
be stalled while the pipeline filled up.&lt;/p&gt;

&lt;p&gt;The same approach applies to the return path.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That concludes our examination of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve now not only built an interface with a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;,
but we’ve also managed to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt;
that it works.  Indeed, I would have no
confidence that this worked were it not for the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me share another secret with you: Often, while writing articles like this
one, I’ll find something I want to tweak in the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;example code I’m presenting&lt;/a&gt;.
Usually
this is to make the code easier to read and explain, although sometimes I
touch things up to remove extraneous logic as well.  However,
I also want to make certain that the slightly changed code still works.  As a
result, every time I make a change I’m re-running the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification
proof&lt;/a&gt; to
make certain I haven’t introduced changes in the process.  Usually this means
I can greatly simplify a design for presentation.  In this case, the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools also caught a check for &lt;code class=&quot;highlighter-rouge&quot;&gt;if (ready &amp;amp;&amp;amp; ready)&lt;/code&gt; instead of
&lt;code class=&quot;highlighter-rouge&quot;&gt;if (valid &amp;amp;&amp;amp; ready)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I might argue that
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
designs is really easy when
using &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;!  If you haven’t
tried it yourself, let me encourage you to do
so.  Just the ability to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;verify an AXI-lite
core&lt;/a&gt; alone and find bugs
that Xilinx’s VIP wasn’t able to find should give you some confidence when using
the tool.  Wait, did I just say their VIP couldn’t find these bugs?  While I
really don’t know that to be the case, I am drawn to such a conclusion.  I mean,
why would they publish a broken code generator unless they had tried to verify
it only to receive a false positive suggesting that it worked when it didn’t?&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is now the second article in a short series about the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite
bus&lt;/a&gt;.  The
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;first article&lt;/a&gt;
discusses how I created the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite property
file&lt;/a&gt;
which was used to verify &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;the slave
implementation&lt;/a&gt;
we discussed above.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;repository containing&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
also contains several bridge cores to include an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;AXI-lite to
wishbone core&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axilite.v&quot;&gt;wishbone to AXI-lite
bridge&lt;/a&gt; and
even a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to full AXI
bridge&lt;/a&gt;.  If you
look around, you might also notice that I have a similar property files posted
there for both the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fwb_slave.v&quot;&gt;Wishbone&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d like to come back to this topic in the future and discuss a &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full
AXI&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
bridge as well as the properties necessary to verify it.  That
project and post, however, will need to wait for another day.&lt;/p&gt;

&lt;p&gt;Another potential future post would be to discuss how easy it can be to build
the complex cover statements used to demonstrate
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
above.  Such an approach would &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;offer an alternative to the &lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;s that
SVA supports&lt;/a&gt; but which the
free version of &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;
does not.  That will also need to wait for another day as well.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Judgment also will I lay to the line, and righteousness to the plummet: and the hail shall sweep away the refuge of lies, and the waters shall overflow the hiding place. (Is 28:17)&lt;/em&gt;</description>
        <pubDate>Sat, 12 Jan 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2019/01/12/demoaxilite.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/01/12/demoaxilite.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
