<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Aug 2019 15:07:16 -0400</pubDate>
    <lastBuildDate>Thu, 22 Aug 2019 15:07:16 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Technology Debt and AutoFPGA, the bill just came due</title>
        <description>&lt;p&gt;I’m currently working on a fun SONAR project where I need a data collector.
The project involves transmitting SONAR data through the thick hull of a deeply
submerged underwater object, without drilling holes in the hull to do it.&lt;/p&gt;

&lt;p&gt;Understanding the transmission path through the hull will be a challenge,
so it becomes important to store the incoming signal to memory, download
it to &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;, and study it there
before building the downstream processing logic.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Sonar Signal Processing Chain&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/signalpath.svg&quot;&gt;&lt;img src=&quot;/img/autofpga/signalpath.svg&quot; alt=&quot;Sonar signal path: transmitter, hull, copy to memory, to SD card, then analyzed in Octave&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My plan is to collect this information at high speed (800Msps),
to dump it to memory, and then to an &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD-Card&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve used Xilinx cores before, you may remember that they offer
an &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_datamover/v5_1/pg022_axi_datamover.pdf&quot;&gt;AXI Stream to Memory Mapped DataMover
core&lt;/a&gt;
to handle this sort of data to memory processing, but I’ve always liked the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt; and
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;–the
&lt;a href=&quot;https://www.youtube.com/watch?v=en8JMz7v3LU&quot;&gt;fastest simulator on the market&lt;/a&gt;,
and one that’s easy to integrate an &lt;a href=&quot;https://github.com/ZipCPU/sdspi/blob/master/bench/cpp/sdsdpisim.cpp&quot;&gt;SD-Card simulator
into&lt;/a&gt;.
Creating a similar
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
core took me only a couple hours one morning to both build and verify.  Having
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal properties for the Wishbone
bus&lt;/a&gt; on hand
definitely helped.&lt;/p&gt;

&lt;p&gt;That was the easy part.  Indeed, I’d like blog about this new core soon as well
(once I decide where to put it).&lt;/p&gt;

&lt;p&gt;The harder part was integrating this new core with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem is simple and basic:
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
as currently designed can handle the logic necessary to connect a
&lt;em&gt;single Wishbone&lt;/em&gt; master to all of the slaves within a design.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This approach is light on logic, as desired.  The &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;necessary interconnect
logic is cheap and easy to
build&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. ZipCPU and AutoFPGA bus structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/zipbus.svg&quot; alt=&quot;Four bus masters, three bus arbiters&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, this logic
represents a bit of a &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;speed
bump&lt;/a&gt;.  Internally, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has two memory ports, one for instructions and one for data, and after
generating them I &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbdblpriarb.v&quot;&gt;arbitrate them together&lt;/a&gt; into a single bus interface.  While
this slows down the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;,
I’ve accepted the consequences of this to date because it helps simplify the
rest of the design.  Sadly, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
gets slowed down again when its bus control signals have to be arbitrated
against the DMA peripheral, and then again when they are arbitrated against
the debugging bus.&lt;/p&gt;

    &lt;p&gt;All of this costs time and capability.  Indeed, in order to meet timing each
of the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbarbiter.v&quot;&gt;bus
arbiters&lt;/a&gt;
has required &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/busdelay.v&quot;&gt;delaying bus accesses by a
cycle&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’ve dreamed of rewriting the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
so that it has two independent bus ports, removing the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to the main design, and then allowing all four bus masters
(&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;CPU instructions&lt;/a&gt;,
CPU data,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
and &lt;a href=&quot;/zipcpu/2017/05/20/which-came-first.html&quot;&gt;debugging interface&lt;/a&gt;)
to interact with the bus at the same time through a
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can’t handle this (yet).  We’ll discuss this more in a moment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. A better bus design, this time using a crossbar interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/crossbarbus.svg&quot; alt=&quot;All bus masters are now equals entering  the bus, all delays are internal to the crossbar&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This also has consequences for anyone who would like to use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  For
example, I’d like it to be able to handle interconnecting
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
and even &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone classic&lt;/a&gt; signals.
However, as built today,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can only ever create the logic for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipeline&lt;/a&gt;
signaling.&lt;/p&gt;

    &lt;p&gt;To solve this, I’ve recently created a series of
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; bus
arbiters–&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone (pipeline)&lt;/a&gt;,
with the goal and intent that
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
should just be able to reference such an arbiter and not need
to know much more about the bus.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… and now I want to add a &lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;new bus
master&lt;/a&gt;, a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;stream&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
bus master.&lt;/p&gt;

&lt;p&gt;It’s not quite that simple either.  A second SONAR project I’m working on will
require a transmit controller that will want to read instructions from the bus.
Indeed, this is why I like and use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  It
allows me to easily and rapidly reconfigure a master base design, &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;such as this
one&lt;/a&gt; for the &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video
board&lt;/a&gt;,
from one configuration and application to another.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Two different AutoFPGA Configurations, built from the same base design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/dualconfig.svg&quot; alt=&quot;Two design shown, one with recording components and one with transmitter components&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While the new SONAR transmit controller component is not a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;, I found the idea
of re-using &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;my instruction fetch
code&lt;/a&gt; just too tempting.
Indeed, should the &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord be
willing&lt;/a&gt;, I’m hoping to discuss
how to build something like this in my (to be written) &lt;a href=&quot;/blog/2019/08/16/intermediate.html&quot;&gt;intermediate
tutorial&lt;/a&gt;, with a music
box as an application, but we’ll have to come back to that on another day.&lt;/p&gt;

&lt;p&gt;What I’d like to do today is to use the same &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;basic FPGA
design&lt;/a&gt; for both applications, as shown
in Fig. 4 above: the stream to memory controller, as well as the scripted
SONAR transmit controller.  Ideally, I’d just make a small change or two
and the design would suddenly go from working on one project to working
on a second project.&lt;/p&gt;

&lt;p&gt;Again, that’s the purpose of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
in the first place.&lt;/p&gt;

&lt;p&gt;Sadly, this leaves me with a choice: I can either upgrade my &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect
logic&lt;/a&gt; generator
within &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to handle multiple bus masters, or I can slow the bus down (again) by
manually adding in one more arbiter to transform the problem back to a
known solution–the single bus master.&lt;/p&gt;

&lt;p&gt;This time (yes, there were others), I chose to update
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;updates-in-progress&quot;&gt;Updates in Progress&lt;/h2&gt;

&lt;p&gt;The updates to
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
are still a work in progress, or I’d share them on
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;github&lt;/a&gt;.  (No one really wants to try
to build code that will just
&lt;a href=&quot;https://en.wikipedia.org/wiki/Segmentation_fault&quot;&gt;segfault&lt;/a&gt;, and that’s
where I spent most of my day yesterday.)  Here’s some of what’s coming, though:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First and foremost, my immediate goal is to create multiple bus master
support, through a
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar interconnect&lt;/a&gt;,
so that adding (or removing) a
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus master&lt;/a&gt;
is as easy as adjusting the line in the Makefile identifying
which masters are to be included in the design.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. A Crossbar can support multiple masters&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/multimaster.svg&quot; alt=&quot;Block logic for 3 master connected to a crossbar driving 6 slaves&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the advantages of using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
over a proprietary solution like
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
or &lt;a href=&quot;https://www.intel.com/content/www/us/en/programmable/products/design-software/fpga-design/quartus-prime/features/qts-platform-designer.html&quot;&gt;Quartus&lt;/a&gt;
is that all of the project files are user-supplied text files, and so they
can easily be examined and fixed (if necessary).  Even better, you’ll never
need to “rebuild” your project from the ground up after updating your vendor
tool set, although you might need to make some adjustments when updating
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
I’ll discuss why below.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar
interconnect&lt;/a&gt;
logic is not currently a part of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
This creates both opportunities and problems.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;The opportunity:&lt;/em&gt; You can easily replace
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;my arbiter logic&lt;/a&gt;
with yours by just matching the interface and then swapping the
arbiter logic.&lt;/p&gt;

    &lt;p&gt;The problem comes from licensing.  While
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is licensed under &lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;GPL&lt;/a&gt;, it asserts
no license over the code it creates.  I treat it sort of like a
&lt;a href=&quot;https://www.gnu.org/software/gcc&quot;&gt;GCC&lt;/a&gt;: the code
&lt;a href=&quot;https://www.gnu.org/software/gcc&quot;&gt;GCC&lt;/a&gt;
produces remains under the license it started with.  I’ve done this to try
to make &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
usable by all in any context.&lt;/p&gt;

    &lt;p&gt;If I want to keep
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
usable in this new context, I may need to release any bus-logic sub-cores
under a very permissive license.  Given the amount of time that went into
creating them, I am reluctant to do so, but needs may require this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned above, this new
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
upgrade has multiple bus protocol
support.  This currently includes
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;
support as well as
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
support.  Even better, the
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;
will be high speed straight from the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;arbiter&lt;/a&gt;
arbiter–rather than &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;crippled like Xilinx’s
support&lt;/a&gt; was.&lt;/p&gt;

    &lt;p&gt;My eventual goal will be to automatically insert crossbars and bus protocol
(and clock) bridges as needed by the design.  While other tools already exist
to do this, not all of them are open–making it difficult to use the &lt;a href=&quot;https://www.youtube.com/watch?v=en8JMz7v3LU&quot;&gt;fastest
simulator on the market&lt;/a&gt;.  My
current goal is just to be able to handle different bus protocols–bus
bridges and clock crossings can be added manually for the time being.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also been burned by the previous
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
approach to integrating bus components into a design.  Specifically, in
order to integrate a bus component before,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
would create wires based upon the bus name (not type):
&lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt; and so on.  To connect a slave, you’d need to
create a &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.INSERT&lt;/code&gt; tag to outline code that would be simply inserted
into the main project design.  This code would then pass &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt; directly to the peripheral design, and the design would return
something like &lt;code class=&quot;highlighter-rouge&quot;&gt;flash_ack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flash_stall&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;flash_data&lt;/code&gt; (assuming it
was a &lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;flash controller&lt;/a&gt;.
Further, rather than passing &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt; to the slave, the design would &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;decode
addresses&lt;/a&gt;
to determine which slave was being addressed, and so you’d then pass
&lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb &amp;amp; flash_sel&lt;/code&gt;.  That is, you’d pass the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
strobe (i.e.  transaction request) ANDed with the slave selection drawn
from the bus address.&lt;/p&gt;

    &lt;p&gt;While I like this design approach in general, since it allows you to connect
to the bus any way you want, there’s been more than one time I’ve 
connected a &lt;a href=&quot;/zipcpu/2018/01/22/formal-progress.html&quot;&gt;formally
verified&lt;/a&gt;
core to the bus and gotten this logic wrong.&lt;/p&gt;

    &lt;p&gt;As an example, I once got careless and just passed &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt; directly to
the core rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb &amp;amp; slave_sel&lt;/code&gt;.  The result wasn’t pretty,
but caused multiple returns from the bus (I wasn’t filtering returns based
upon the active slave) and so &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;crashed Intel’s AXI interface (it had gone
through an AXI to Avalon bridge …)&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Worse, when you try to integrate with something like
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
you end up needing to mention and connect &lt;em&gt;every single I/O wire&lt;/em&gt; just to
get it right.&lt;/p&gt;

    &lt;p&gt;The easy answer would be to define a tag in
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.PORTLIST&lt;/code&gt;, which would contain a string containing
all the logic (i.e. a list of I/O ports) that can be used to connect your
slave to the bus.  A similar tag, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.ANSIPORTLIST&lt;/code&gt;, would reference
a string containing all the logic necessary to connect a peripheral to a
bus using ANSI notation.  Similar tags, &lt;code class=&quot;highlighter-rouge&quot;&gt;@MASTER.PORTLIST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@MASTER.ANSIPORTLIST&lt;/code&gt;, would define this
logic for bus masters.  (There are already other &lt;code class=&quot;highlighter-rouge&quot;&gt;@*PORTLIST&lt;/code&gt; tags used
to define external I/O connections, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MASTER&lt;/code&gt; prefix would
designate these port lists specific to the bus at hand.)&lt;/p&gt;

    &lt;p&gt;Creating these strings will simplify my design efforts, and help to
standardize things as well.&lt;/p&gt;

    &lt;p&gt;One unintended consequence of this adjusting a core from one interface
type to another would only require adjusting the &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.BUS.TYPE&lt;/code&gt;
tag–of course, you’ll still need to adjust the core.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Peripheral classes&lt;/p&gt;

    &lt;p&gt;To keep the logic light, I’ve defined two subsets of the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
protocol, subsets I call &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;.  I created them when I
noticed that I had a lot of peripherals with nearly the same logic, and
it just made sense to aggregate the control logic together across peripherals.&lt;/p&gt;

    &lt;p&gt;Neither of these two sub-classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;, are allowed to
stall the bus, neither are they allowed to return
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals create their acknowledgments on the same clock cycle
they are accessed, and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripherals create their acknowledgments
one cycle later.&lt;/p&gt;

    &lt;p&gt;– A &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripheral is one that contains a single register only,
   and it’s useful for your basic control register.&lt;/p&gt;

    &lt;p&gt;– A &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripheral is one that contains multiple registers.  It uses
   one clock in a case statement to select among multiple values to return.&lt;/p&gt;

    &lt;p&gt;I’ve found these bus classes to be quite common across many design elements.
Because their logic is simple, I’ve had no problem creating designs with
30+ peripherals and then adding or removing those peripherals via
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
as projects have required.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Special slave classes: SINGLE and DOUBLE&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/sdiobus.svg&quot; alt=&quot;SINGLE slaves and DOUBLE slaves each form a class of I/O where the control logic is shared between them&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s the good news: When I started creating the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; support, I
realized that I needed to continue to support these two subclasses.  The
need for them wasn’t specific to
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; peripherals.
Therefore, the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; support
will support these two subclasses.  To give you an idea how these might
work, here are the assumptions required for these simplified peripherals.&lt;/p&gt;

    &lt;p&gt;– &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; requires that &lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_ADDR_WIDTH == 0&lt;/code&gt;, or a slave having one
   address only.  That allows the address lines to be dropped.  The
   &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; class will allow a peripheral to support multiple addresses, and
   so different address widths as well.&lt;/p&gt;

    &lt;p&gt;– Write interface&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;The slave must guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY = WREADY = 1&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;This will allow the interconnect to ignore these inputs.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The slave must also guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID == $past(AWVALID)&lt;/code&gt; for
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals, and that &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID == $past(AWVALID,2)&lt;/code&gt; for
&lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripherals.&lt;/p&gt;

        &lt;p&gt;This will allow the interconnect to automatically generate a common
&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; for all of the peripherals in the set without needing the
logic to check every peripheral for this condition individually.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The controller (i.e interconnect) will guarantee that
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID == WVALID&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;This means that you can connect &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; when connecting
your core, and also that you don’t need to handle synchronizing these
two channels together within your core.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The controller will also guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY == 1&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;That is also required for the interconnect to ignore &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;– Read interface&lt;/p&gt;

    &lt;p&gt;These rules pretty much follow the write interface above.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;The slave must guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY == 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;The slave must also guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID == $past(ARVALID)&lt;/code&gt; for
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals, or equivalently that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID == $past(ARVALID,2)&lt;/code&gt;
for &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripherals.&lt;/li&gt;
      &lt;li&gt;The controller will guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY == 1&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Together, these assumptions will greatly simplify creating
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; slaves.
The control logic to support this is pretty easy to build and verify
as well, so it’s likely I’ll do something similar when I get to building
the full &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; support.&lt;/p&gt;

    &lt;p&gt;I’m sure we’ll discuss more about this on the blog as time goes along.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these are wonderful, great, and (insert your favorite superlative
here) ideas.&lt;/p&gt;

&lt;p&gt;There’s one problem I discovered when integrating these changes into my design:
I had used the knowledge of how the interconnect worked when building some of
my cores.  This is now causing these otherwise “working” cores to break.&lt;/p&gt;

&lt;h2 id=&quot;technology-debt-the-bill-comes-due&quot;&gt;Technology Debt: The bill comes due&lt;/h2&gt;

&lt;p&gt;Wikipedia (today) defines &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_debt&quot;&gt;technology
debt&lt;/a&gt; as,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Technical debt is a concept in software development that reflects
the implied cost of additional rework caused by choosing an easy or
limited solution now instead of using a better approach that would take
longer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two of my cores that are now suffering from this debt are my RMII/RGMII
network cores, and my wonderful new &lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;“Universal” QSPI flash
controller&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 7. Abusing the bus protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/qspiports.svg&quot; alt=&quot;Shared signals: CYC, WE, ADDR, bus separate STB signals.  Bus returns share ACK, STALL, and DATA signals.  The result is not protocol compliant.&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Both of these cores have both a memory interface and a control interface,
as shown in Fig. 7 on the left.  For the network core, the memory interface is
to either the to-be-transmitted or the already-received packet memory
contained within the core.  For the
&lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;flash controller&lt;/a&gt;,
the interface is between the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt; and the control register.&lt;/p&gt;

&lt;p&gt;In both cases, I abused the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; protocol knowing how the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
would handle things.&lt;/p&gt;

&lt;p&gt;You can see how this affects the port list for the
flash controller
below,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;qflexpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rather than defining two (properly separate) interfaces, I just created a
single interface with two strobe signals: &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; for reading from memory,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt; for reading from the control port.  Results were returned
through a common return port of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack, o_wb_stall,&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If first hit a problem with this interface when I tried to handle
acknowledgments.  Since the simple
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
I was using just OR’d all of the acknowledgment signals together in order to
generate an ACK signal to return to the
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus master&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;there was never any problem with OR’ing two acknowledgment signals together
within the slave.  Indeed, it spared bus logic in the return.  Similarly, since
the &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
selected the data to be returned based upon which slave set its
acknowledgment signal,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flash_memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// No line to accept flash_config_data
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;4&#39;b1???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mb&quot;&gt;4&#39;b01??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;a slave interface that hadn’t been referenced could validly set it’s
acknowledgment signal and then return data via the other slave interface port.&lt;/p&gt;

&lt;p&gt;Both of these are an abuse of
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
protocol.&lt;/p&gt;

&lt;p&gt;As you might expect, I then ran into problems when I wanted to update my
interconnect to drop the &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;poorly designed return
logic&lt;/a&gt;, since I
wanted to now create an index register for a multiplexer that would identify
which core should receive the returned data.
(If that’s confusing, I explain
the concept &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;wb_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW_BITS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This port will never return valid data, since there was no defined
// flash configuration port defining a flash_config_data value
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_config_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the selected channel stopped returning the correct value under
this new logic implementation, I then started to learn the error of my ways.&lt;/p&gt;

&lt;p&gt;Note the key word “started”.  Rather than fixing the problem properly by
creating two separate bus interfaces, I cheated.  I returned the same data
on both channels.  This would work because the returned acknowledgment was
still the OR of all the acknowledgments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_config_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the bill is coming due again, since in order to support multiple masters
it is now possible that two masters will each try to access the two peripheral
interfaces, both at the same time, and so combining values in the return port
is no longer possible under any stretch.&lt;/p&gt;

&lt;p&gt;That means I’ll need to change the &lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;“Universal” QSPI flash
controller&lt;/a&gt; port list to be
something closer to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;qflexpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_cfg_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_cfg_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_cfg_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_cfg_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;like it probably should’ve been in the beginning.&lt;/p&gt;

&lt;p&gt;There’s another problem that I’m likely to struggle from as well: all of the
bus wire names are changing.  Creating a bus structure where every wire is
prefixed by &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_&lt;/code&gt;, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt;, etc., is great when only
one master will ever control this bus.  Creating multi-master support is going
to require changing all of these wire names so that each peripheral can be
interacted with separately.  This will result in an annoying
incompatibility between
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
versions.  While I think the benefit outweighs the problems, it will take
some time to upgrade all of my separate projects to get things to work again
with the new version.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;My conclusion from this whole affair is that I’m learning some hard lessons
about design.  In particular, be careful not to use the knowledge of how the
other end of an interface is working to violate the rules of that interface.
Sure, the result might work for your first project, but by doing so you are
incurring a debt–one that will need to be paid eventually when you use the
core later in a different environment.&lt;/p&gt;

&lt;p&gt;Some time ago, I remember consulting with a particular technology company
about this issue.  They shared with me their own struggles, sounding very
similar to this one, where they had all kinds of cores written in house but
each of which had abused the bus protocol in some fashion or other.
The result was that drawing a core out from their library to use in a new
project incurred an update cost any time the new environment was different.
Worse, because of the tyranny of the urgent, the didn’t fix the issue properly.
Instead, they had chosen the quick and easy solution of modifying the library
core to fit the new need.  As a result, their core IP library was filled with
many similar cores–but all having subtly different (abused) interfaces.&lt;/p&gt;

&lt;p&gt;It’s fun for me to consult and discuss the “way out” of a problem like that.
I’m sure you, like me, enjoy telling other people how to live their lives.
It becomes quite a different matter when you find yourself stuck in the same
mire.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behold, thou … makest the boast of God, And knowest his will, and
approvest the things that are more excellent, being instructed out of
the law; And art confident that thou thyself art a guide of the blind,
a light of them which are in darkness, An instructor of the foolish, a
teacher of babes, which hast the form of knowledge and of the truth in
the law.  &lt;strong&gt;Thou therefore which teachest another, teachest thou not
thyself?&lt;/strong&gt; thou that preachest a man should not steal, dost thou steal?
(From &lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/2/17-21&quot;&gt;Romans 2:17-21&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ouch.  That hurts.  So true though.&lt;/p&gt;

&lt;p&gt;So I’m going to try to start paying off this debt today, together with whatever
interest may have accrued.  I’d still like to come back later,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord willing&lt;/a&gt;,
and discuss that stream to Wishbone converter–but that’ll have to wait for
another day.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The rich ruleth over the poor, and the borrower is servant to the lender. (Prov 22:7)&lt;/em&gt;</description>
        <pubDate>Thu, 22 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/08/22/tech-debt.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/08/22/tech-debt.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Xilinx deleted this post</title>
        <description>&lt;p&gt;I was originally going to title this article, &lt;em&gt;“Digital design is not Lego
design”&lt;/em&gt;, but then Xilinx deleted the &lt;a href=&quot;https://forums.xilinx.com&quot;&gt;forum&lt;/a&gt; post
it was based upon, so I’ve since changed the title.  Here’s the story:&lt;/p&gt;

&lt;p&gt;Recently, someone posted some fairly benign recommendations for beginners on
Xilinx’s forums.  I’d point you to the forum post so you could read these in
context, but like I mentioned above–Xilinx was apparently so upset by my
comments (copied below) that they deleted the whole discussion.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Deleted!&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/xilinx-msg-not-found.png&quot;&gt;&lt;img src=&quot;/img/tweets/xilinx-msg-not-found.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Maybe I should start recording all of my discussions from now on …&lt;/p&gt;

&lt;p&gt;The first individual to comment (sorry, his username has now been lost in the
web somewhere), shared his recommendations for a beginning designer.  In
particular, he was noting how much time you’d need to speed using the
simulator for a project, and if that was the case, why not spend your time
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;learning to use the simulator
well&lt;/a&gt; before
purchasing a dev board?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For a real project, you will have no choice but to simulate the $@ out of
it because it won’t work and your physical debugging will be meaningless.  So
why not focus on that?  The HDL and simulation environment are already a lot
to learn.  Then when you literally can’t do any more without hardware, you
will be in a better position to buy a board.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In many ways, I agree with the sentiment–but with a few caveats that I’ll share
in a moment.&lt;/p&gt;

&lt;p&gt;A well known and often very helpful user,
&lt;a href=&quot;https://forums.xilinx.com/t5/user/viewprofilepage/user-id/74556&quot;&gt;u4223374&lt;/a&gt;,
responded with his own perspective, recommending a design approach I’ll call
“Lego design”.  He writes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Increasingly these days an FPGA designer can get away without any hardware
knowledge.  With Xilinx (and others) providing IP cores for most of the
common interfaces, the unique processing hardware doesn’t tend to need any
external-to-the-FPGA communications at all – it just talks to the I/O IP
cores&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… &lt;em&gt;without any hardware knowledge&lt;/em&gt;?  Incredible.  Let’s just say I disagree.&lt;/p&gt;

&lt;p&gt;After I responded, Xilinx then deleted the whole post.  The next section 
contains my response, which is what I will assume offended them.  I didn’t
copy and paste it, though, but rather fat-fingered typing it in so you might
find subtle spelling differences.  I’ve also added hyperlinks links to the
discussion for anyone wanting background information, since I’ve been scolded
by a Xilinx forum moderator for offering too many links to my blog and &lt;a href=&quot;/projects.html&quot;&gt;my
github IP&lt;/a&gt;.  Specifically, I’ve been told me
to keep the hyper-links in my forum replies at two or less.  The reply quoted
below originally had only the one link within it.&lt;/p&gt;

&lt;h2 id=&quot;my-response&quot;&gt;My Response&lt;/h2&gt;

&lt;p&gt;If you read through the forums, you’ll see that this [&lt;a href=&quot;https://forums.xilinx.com/t5/user/viewprofilepage/user-id/74556&quot;&gt;u4223374&lt;/a&gt;’s]
view doesn’t hold water.&lt;/p&gt;

&lt;p&gt;A very common question is, “Why doesn’t my design work?”  This question is
asked over and over, from those who have tried this approach, understand none
of what’s going on under the hood, and then &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;can’t figure out what’s wrong with
their design&lt;/a&gt; when it doesn’t
work.  They are forever posting here [on &lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s
forums&lt;/a&gt;] needing to be rescued, unable to &lt;a href=&quot;/digilent/2017/05/29/fft-debugging.html&quot;&gt;narrow
down the problem to the component at fault&lt;/a&gt;,
and so they tend to blame Xilinx’s cores of not working when it is their
own code at fault.&lt;/p&gt;

&lt;p&gt;While not always the case, it doesn’t help when the code block they are using
&lt;a href=&quot;//formal/2018/12/28/axilite.html&quot;&gt;actually has bugs in it already&lt;/a&gt;.  Worse, because the beginner is never taught
the fundamentals, but rather the idea that digital design is just like
connecting Legos, they have &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;no idea where to even
start&lt;/a&gt; when trying to find
the problem.&lt;/p&gt;

&lt;p&gt;The problem gets worse for the designer who wants to make use of older hardware,
hardware that might no longer be supported by Xilinx.  Equivalenty, FPGA design
is often seen as a gateway to ASIC design.  If all you learn is how to connect
pre-built Lego blocks, you’re not likely to get a job where you actually need
to build something to sell.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/High-level_synthesis&quot;&gt;HLS&lt;/a&gt; was designed to make
HDL even easier.  From what I’ve seen, it only makes HDL design easier &lt;em&gt;for
the individual who already understands HDL design&lt;/em&gt; in the first place.  Many
students I know who’ve tried it
[&lt;a href=&quot;https://en.wikipedia.org/wiki/High-level_synthesis&quot;&gt;HLS&lt;/a&gt;]
have noted that small, subtle, and seemingly insignificant code changes will
take a “working” design and render it non-synthesizable.&lt;/p&gt;

&lt;p&gt;As to the recommendation from the original author,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I would suggest if you have no hands on experience and aren’t really itching
to see sometimes [sic] happen in a circuit that you can focus on learning
your HDL of choice and learn to write test benches to validate your designs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would agree somewhat, but with caveats based upon the mistakes I’ve seen
students make who have followed this recommendation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve seen students confuse test-bench only code, code that cannot be
synthesized, with synthesizable code.  Often students don’t even know the
difference after starting from this standpoint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also seen &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;way too many bugs pass bench tests, only to fail in real
hardware&lt;/a&gt;.   (This
includes first and foremost my own bugs …)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This leaves me with two additional recommendations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A beginner needs to learn how to &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;debug their design in
hardware&lt;/a&gt; as well as
with the test bench–especially if his design hits hardware after only ever
seeing a testbench.  (Yes, there is a &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;better
way&lt;/a&gt;.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I recommend using the synthesizer along the way.  Even if the student doesn’t
have any real hardware, it is possible to use a synthesizer to 1) recognize
unsynthesizable code, and 2) discover what kinds of code can be synthesized
within any particular clock speed and what kinds cannot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even better, a beginner should learn to use &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Why?&lt;/p&gt;

    &lt;p&gt;Because &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; do a better
job of finding bugs than test benches alone&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since I believe so firmly in this approach, I’ve put together a &lt;a href=&quot;/tutorial&quot;&gt;tutorial for
beginners&lt;/a&gt;.  It’s a hardware agnostic tutorial,
so you should be able to learn regardless of what hardware you have as long
as 1) You have a serial port, 2) a button, and 3) A couple of LEDs.&lt;/p&gt;

&lt;h2 id=&quot;why-would-xilinx-delete-this-comment&quot;&gt;Why would Xilinx delete this comment?&lt;/h2&gt;

&lt;p&gt;I think Xilinx is working very hard to sell the idea that hardware design is
as simple as playing with Legos: Connect this block to that block and Voila!
Magically a working design appears.  While (I hope) that this is often the
case for those who use this approach, I have a different perspective: I tend
to read the forum posts that were written by those for whom this simplified
design methodology doesn’t work.  (You might argue that my
sampling &lt;a href=&quot;https://en.wikipedia.org/wiki/Universe_(mathematics)&quot;&gt;Universe&lt;/a&gt;
is skewed as a result.)&lt;/p&gt;

&lt;p&gt;I also tend to be rather hard on Xilinx for the bugs in their example AXI
designs–those that they recommend beginners start from.
[&lt;a href=&quot;//formal/2018/12/28/axilite.html&quot;&gt;1&lt;/a&gt;]
[&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;2&lt;/a&gt;]  Sadly, these faulty
designs have caused a lot of problems for Xilinx’s users:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;One software engineer picked up from where the hardware engineer left
off–after the hardware engineer “finished” the project, delivered a
“working” design, and left the company …  This software engineer made
a very minor adjustment to his MicroBlaze code and the FPGA portion of his
design stopped working.  A key feature of his new design was a pair of
adjacent store instructions just before the design failed.  This could’ve
been caused by either of the bugs I had found in their training material
(cited above).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Several other users have been frustrated that Xilinx’s AXI DMA core has
“caused” their design to hang.  They’ve asked how to “reset” the core, so
they can go on.&lt;/p&gt;

    &lt;p&gt;The problem here is important: AXI, by design, cannot recover from dropped
transactions.  If the master is no longer interested in the bus response,
it has no way to drop the response without resetting the entire bus or just
ignoring the response.&lt;/p&gt;

    &lt;p&gt;In the bugs I demonstrated above, transaction responses would get dropped
in their demo code.  This will cause the design (and the attached bus) to
hang–unable to be reset until a power cycle.&lt;/p&gt;

    &lt;p&gt;One solution to this problem is to use a wrapper core with some kind of
safety feature: Xilinx offers what they call an “AXI firewall” IP to check
for AXI failures and set a flag that the ILA might notice.  Of course, that
IP would be forever broken until the next reset (i.e. power cycle).  An
alternative approach is to use my own &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;,
and to configure it to reset the downstream peripheral once any error is
detected.  Sadly, while these two approaches will allow you to recover from
a fault, it may well be that a faulty core doesn’t trigger either of the
tests within these cores.  I know from my own experience, that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;the logic
within my own core&lt;/a&gt;,
simplifies (and slows down) the AXI transaction, and so there’s a non-zero
likelihood that this might prevent a design from failing downstream of
this fault isolator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s not that uncommon for an engineer to post to the forum, declare
Xilinx’s code is broken, but then refuse to share his own code.&lt;/p&gt;

    &lt;p&gt;In many of these examples, I’ve asked if users will post their code so that
I can test my formal properties on their core.  While some have taken me
up on the offer, there haven’t been that many takers.  Of those who have
taken me up on the offer, verifying the code is often quite easy: since most
Xilinx users copy from Xilinx’s demo designs.  As a result, the proof is
usually as simple as one of the ones I’ve done before.  Of those who haven’t
posted their code, some have at least posted traces showing &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;dropped
acknowledgements&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are “right” and “wrong” answers to this kind of criticism.  The
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/3/21&quot;&gt;“right” response&lt;/a&gt; is to
1) acknowledge the problem (Yes, it’s broken), 2) identify
the problem (it does this when it should do that, it’s been broken since
2016 or whenever), 3) promise a fix, and then 4) announce when the
demonstration code works again again.  Finally, they should 5) point out to
users who might not know of the problem, that a fix has been issued.&lt;/p&gt;

    &lt;p&gt;Were they to do this, I’d either get quiet or repeat the corporate message.
Up until now, Xilinx’s has been (nearly) silent on this topic.&lt;/p&gt;

    &lt;p&gt;Not commenting is one thing, but … deleting posts?&lt;/p&gt;

    &lt;p&gt;Sadly, getting rid of the messenger doesn’t change the truth of the message.
It also leaves those who desire to build reliable designs in a lurch, since
they still don’t know why their designs are failing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At a glance, the problem is simply this: When a newcomer comes to the Xilinx
forums to ask &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;how to build an AXI
design&lt;/a&gt;, the official answer
is to point him to the demo designs.  Sadly, when I pointed one such user to
the bugs in Xilinx’s demonstration designs, they were quite disheartened.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank you, Dan, but I need something easier. …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My response below helps to highlight the core issue:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In many ways, it’s a shame Xilinx chose AXI as their protocol for connecting
everything together.  AXI is a very complicated protocol, and a hard one to
get right.  I like to use
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;, and find it
much easier to work with.  There’s also an AHB protocol that’s easier to work
with than &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;That said, I really don’t know any way to make this “easy” as you would like.
The complexity comes with the territory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sorry, folks, but we’re not building Legos here.  If you want things to work,
and to reliably work well, then you need to learn the fundamentals.  Second,
if you want to build &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI interfaces with
confidence&lt;/a&gt;, you need &lt;a href=&quot;//formal/2018/12/28/axilite.html&quot;&gt;formal
methods&lt;/a&gt;.
Neither Xilinx’s test benches, nor their Verification IP, found the bugs
I’ve blogged about that many users have been struggling with and from.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;What I tell you in darkness, that speak ye in light: and what ye hear in the ear, that preach ye upon the housetops.  (Matt 10:27)&lt;/em&gt;</description>
        <pubDate>Tue, 20 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/08/20/lego-design.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/08/20/lego-design.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #3: Will formal verification prove this counter keeps its bounds?</title>
        <description>&lt;!-- answer: &quot;2019/08/14/fv-answer02.html&quot; --&gt;

</description>
        <pubDate>Mon, 19 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/08/19/quiz03.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/08/19/quiz03.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Planning an Intermediate Design Tutorial</title>
        <description>&lt;p&gt;I’ve been known for wandering through &lt;a href=&quot;/digilent/2017/05/18/most-common-digilent-support-requests.html&quot;&gt;an FPGA forum or two, and I’ve see some
common and reocurring
themes&lt;/a&gt;.
One of them is, “My design isn’t working and I don’t know why
not.”  It’s the reason I dedicated this blog to keeping individuals out of
“&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;” as I called it.&lt;/p&gt;

&lt;p&gt;Indeed, I saw such a post again just this morning.  Someone had a MicroBlaze
design that wasn’t starting.  It worked on an older board, but not the newer
revision of the board.  What might be wrong?&lt;/p&gt;

&lt;p&gt;If all you know is that, “My design doesn’t start,” you don’t have much to
debug from.&lt;/p&gt;

&lt;p&gt;This was one of the reasons why one of my first blog topics was how to build
a &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
followed by the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;.
Why?  Because this is how I debug problems like that.  Using the two of those,
I can typically trace anything going wrong down to a trace between two
interfaces.  At that point, you can then visually “see” what’s going on.&lt;/p&gt;

&lt;p&gt;Sadly, if all you have are the vendor tools, it’s very hard to “see” what’s
going on.  Worse, I find myself quick to blame someone else’s code when I
don’t see a problem in my own–even if I can’t figure out what the problem is.&lt;/p&gt;

&lt;p&gt;It was for this reason that I &lt;a href=&quot;/fpga-hell.html&quot;&gt;dedicated the blog&lt;/a&gt; to keeping individuals out of
“&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;”.
One of the problems associated with blogging, however, is that my articles
1) tend not to be arranged in any particular order, and 2) tend not to get
updated over time.&lt;/p&gt;

&lt;p&gt;This was my first reason for writing a &lt;a href=&quot;/tutorial&quot;&gt;beginner’s
tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second reason for writing a &lt;a href=&quot;/tutorial/&quot;&gt;beginner’s
tutorial&lt;/a&gt; was in response to problems
I’ve seen with the more traditional instruction.  For example, I’ve seen
students confuse “testbench” constructs with “synthesizable” constructs and
then wonder why their design doesn’t work.  I’ve seen students create bench
tests that provide less test coverage of their code than “modern” swimwear.&lt;/p&gt;

&lt;p&gt;Indeed, I &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;once had the same problem in my own
designs&lt;/a&gt;: My own test
coverage left me
&lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;chasing bugs in my designs over late nights, and GB traces containing the
bug&lt;/a&gt;
… somewhere … within them.  It was specifically for this reason that I
&lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;fell in love with formal
verification&lt;/a&gt; so
quickly–it finds the bugs within your design that my own testbenches were
always missing.&lt;/p&gt;

&lt;p&gt;When no one listened to me hollering about the way I felt things “should” be
done, I decided to try writing a &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
myself to help teach what’s missing.&lt;/p&gt;

&lt;p&gt;So far, that
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
has been well received.  Sure, I’ve had some welcome but less than flattering
comments.  Perhaps the biggest one regards
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
and the C++ nature of the &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;.
Why should C++ be required when your goal is to learn Verilog and FPGA design.
I get it.  A similar comment regards “make” files we used.  However, you can’t
do things like &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;this VGA
simulator&lt;/a&gt; without some basic
software background, and a lot of folks are coming into the FPGA community
with that background–much like me.  For them, at least, it makes sense.&lt;/p&gt;

&lt;p&gt;That said, there’s a strong need in the community for teaching materials that
will teach “From blinky to AXI,” and while &lt;a href=&quot;/tutorial&quot;&gt;my own
tutorial&lt;/a&gt; gets past blinky, it doesn’t make it
anywhere near &lt;a href=&quot;/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let me present some of my thoughts today regarding how this might be fixed.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-the-intermediate-tutorial&quot;&gt;The problem with the intermediate tutorial&lt;/h2&gt;

&lt;p&gt;There’s a couple of reasons why I have yet to start on an intermediate FPGA
tutorial.  One is that I sell my services and … things have been quite busy
as of late.  (Sorry, but this blog is a &lt;em&gt;hobby&lt;/em&gt; of mine rather than something
that puts food on the table for my family.)  The second reason is that the
next step really requires a lot of design-ware that few students would like
to build.&lt;/p&gt;

&lt;p&gt;Allow me to explain.&lt;/p&gt;

&lt;p&gt;Many of the FPGA designs I’ve worked with involve some kind of bus master
together with several bus slaves.  The common task, then, for the FPGA designer
is to build a new bus slave.  A classic example of this might be to create a
new piece of hardware to add to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
capabilities, such as is shown in Fig. 1 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. A typical CPU based design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-cpu.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The task of the student is then to build this new slave.  Perhaps he has several
such slaves he’d like to build.&lt;/p&gt;

&lt;p&gt;Were I to build this the way my mathematical background requires, I’d want
to teach everything from the bus master, to the S(D)RAM memory controller,
to the &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;bus interconnect&lt;/a&gt; before the student gets to their first bus slave.
You know, learn multiplication before square roots.  In this case, that’d be …&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BORING!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I mean, seriously, would you want to know how to build a
&lt;a href=&quot;https://www.teachengineering.org/lessons/view/cub_dams_lesson03&quot;&gt;lock and dam&lt;/a&gt;
just to go canoing on the river?&lt;/p&gt;

&lt;p&gt;Here’s another example design that’s common among FPGAs: you want to process
data, say an image perhaps.  That means you want to read the image from memory
(there’s not enough room in block RAM to store most images), process it however,
and then store it back into memory again.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. A basic processing pipeline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-procbare.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this might be a typical signal or image processing application, there’s
a missing piece to it: the design usually begins and ends with Matlab or, in
my case, &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, you build your design in
  &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; and prove that your algorithm
  works&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Along the way, you discover how to measure the performance of your
  algorithm, and you learn how to communicate (i.e. plot) that performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you want to put it on an FPGA.  So, you build your data processing
  algorithm to put it on the FPGA.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s now the big moment: As you are synthesizing your brand-new algorithm
in order to place it into an FPGA design, you suddenly realize that you
have no way of getting your data set into or out of memory.  Worse, even
if you do realize that, you have no easy way to get it in or out of
&lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; from your design, even if you
were to get it into memory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see the problem illustrated below in Fig. 3,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. A traditional data streaming problem&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-procpipe.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, what I haven’t mentioned is that the end goal of this sort of stream
processing task is typically not to process the data within memory, but rather
to receive the data on some signal or video feed, process it, and then to
forward the output back to a similar feed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. From input to output&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-procpipeio.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Where’s the tutorial to teach that?&lt;/p&gt;

&lt;p&gt;There isn’t one (that I know of).  (I don’t really know of that many.)&lt;/p&gt;

&lt;p&gt;Hence, the reality is that a lot of individuals end up using the vendor tools
and vendor design components and have no idea what’s going wrong when they
don’t work.&lt;/p&gt;

&lt;p&gt;As an example, a recent Xilinx user wrote that he’d written a lot of data into
his Xilinx stream processor and no data ever came out.  Why not?  Eventually,
after some back and forth, he realized he’d never marked the &lt;em&gt;end&lt;/em&gt; of the
data packet.  Now, without using your own code, or at least something that’s
open source, how would you ever find a bug like that?&lt;/p&gt;

&lt;p&gt;My point in all of this is simply that, when your goal is data processing,
you don’t really want to build all of that miracle glueware shown in Fig. 3
above–just like you didn’t want to build the interconnect and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
shown in the example before that, in Fig. 1.&lt;/p&gt;

&lt;p&gt;Yes, I understand that most FPGA vendors provide cores and logic that can
handle all of this middle ware.  Personally, I have a couple of problems
with using these cores.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, and perhaps most important, if you ever need to switch hardware
  vendors, you’ll have to tear apart your design and rebuild it for the new
  cores using their new interfaces.&lt;/p&gt;

    &lt;p&gt;This includes switching design flows, even for the same hardware.  For
example, if there were an open source tool chain, would you be able to get
by without the vendor supplied cores?  How about if you wanted to use
an open source simulator, like
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;?
Know of any good &lt;a href=&quot;/2019/07/17/crossbar.html&quot;&gt;open source
interconnects&lt;/a&gt;?  Or tools to
connect your components to said open source interconnects?&lt;/p&gt;

    &lt;p&gt;Or have you not noticed that I have
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; based designs for
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;iCE40&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipversa&quot;&gt;ECP5&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;Xilinx&lt;/a&gt;, &lt;em&gt;and&lt;/em&gt;
&lt;a href=&quot;/zipcpu/2019/03/12/arrowzip.html&quot;&gt;Intel&lt;/a&gt;?  Yes, it
is doable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, the purpose of the intermediate tutorial we are discussing would be
for learning.  It’s one thing to use a vendor’s core when you have a product
that’s due on a tight schedule.  Sure, I get it, go for it.  I’m not knocking
that at all.  On the other hand, if you want to learn design, then doesn’t
it make sense to spend your time learning how to build your own versions
of the basic building blocks before you turn around and use those from a
vendor?&lt;/p&gt;

    &lt;p&gt;Worse, wouldn’t it be a shame if you learned how to design using vendor
based building blocks but then … had to switch tools and discovered that
you no longer knew anything because you could no longer use the cores and
tools you were familiar with?  For example, have you ever tried simulating
Xilinx’s AXI interconnect using &lt;a href=&quot;https://www.youtube.com/watch?v=en8JMz7v3LU&quot;&gt;the fastest
simulator&lt;/a&gt;
out there?  (Hint: it’s not Vivado.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My point here is simply this: there’s a need for instruction material that
goes past basic serial port I/O in a vendor independent fashion.&lt;/p&gt;

&lt;h2 id=&quot;tutorial-goals&quot;&gt;Tutorial Goals&lt;/h2&gt;

&lt;p&gt;As always, one of the goals of the tutorial is to have the widest applicability
possible.  That means it needs to share FPGA design concepts and strategies
in a vendor independent fashion.  That means I can’t really use vendor code in
my tutorial.  That includes all the vendor glueware, bus interconnects, etc.&lt;/p&gt;

&lt;p&gt;My apologies to all of you big-named vendors out there.  On the other hand,
after trying to answer questions from clueless forum posters, wouldn’t you
rather have customer’s who knew how to debug their own designs?&lt;/p&gt;

&lt;p&gt;So, here was my thought: Using entirely open source tools, so that the design
components could be verified with
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; and then simulated
using &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
create a set of lessons similar to those shown
in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Proposed intermediate tutorial structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-intermediate.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The lessons would use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to connect all of the parts and pieces together.  In every lesson, the goal
would be to be able to formally verify any new components, then to run the
design in a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based simulation, and then in actual hardware.&lt;/p&gt;

&lt;p&gt;The lesson sequence would start out by discussing some of your basic slave
design components.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first lesson would start out by creating a &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;very simple “blinky”
design&lt;/a&gt;,
but this time using the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;.  Commands sent
from the host over the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; would be used
to turn LEDs on and off.&lt;/p&gt;

    &lt;p&gt;For those who don’t recall the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/README.md&quot;&gt;debugging bus
articles&lt;/a&gt;, a
“&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;” is
my term for a bus, internal to an FPGA, that can be accessed and commanded
from host (PC) software.  Even better, I like to run my &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; software &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;over
a network&lt;/a&gt;,
allowing me to interact with either my design or its simulation from
anywhere on my local network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second lesson would involve simply &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;creating an audio
tone&lt;/a&gt;.
This would be very similar to the first lesson, but might involve a couple
of bus addresses, to allow the developer to control amplitude and frequency
from their external computer as one example.  The tone itself could be
played using a basic &lt;a href=&quot;{ site.baseurl }}/dsp/2017/09/04/pwm-reinvention.html&quot;&gt;PWM
controller&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The third lesson would be quick, just showing how to connect a &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
RAM&lt;/a&gt; to the bus as
well as how to verify RAM based slaves.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’d then discuss building a “&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;bus
scope&lt;/a&gt;”.  If you’ve
read my blog much, you’ll know that I use what I call a “&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;”.
You’d be amazed at the &lt;a href=&quot;/2017/09/14/even-i-get-stuck.html&quot;&gt;bugs you can find and
diagnose&lt;/a&gt; using
something like this.&lt;/p&gt;

    &lt;p&gt;This is somewhat different from using vendor tools (chipscope, ILA, etc),
simply because it is bus based.  This will allow you greater control of the
scope, eventually allowing you to control it from your embedded
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;–but
we’re not there yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final slave in this section of the course would be your &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;basic xSPI
flash memory controller&lt;/a&gt;.
This could be done either with SPI or
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;QSPI&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voila, the first section of an intermediate Verilog tutorial.&lt;/p&gt;

&lt;p&gt;The second section of the tutorial would focus on bus masters, rather than bus
slaves.&lt;/p&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;It would begin with a set of lessons on creating a video output.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(6) The first might discuss &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;outputting a fixed test
 pattern&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(7) That lesson would be followed with a stream processing lesson where
a “sprite” of some type would be added to the video stream.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(8) The next lesson would be (generic) on &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFOs&lt;/a&gt;.  Although this
is really a video independent topic, it’s really a necessary background
for the next lesson&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(9) The final video lesson would be on how to &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;stream pixels from a (fixed)
memory location&lt;/a&gt;
to the video controller and hence to the VGA screen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this would be simulatable using
  &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.
  Perhaps painfully simulatable, but simulatable none the less.&lt;/p&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll then move back to a quick bus slave, to learn how to &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;control a basic
SPI A/D controller&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once we have a way to ingest samples, the next lesson would discuss how
to record samples from something like an A/D controller to memory, in order
to later be read out using the debugging bus.&lt;/p&gt;

    &lt;p&gt;At this point, you should be able to ingest your pipeline processing
algorithm into a design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, before getting into
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
  design, we’d work our way through a basic
  hardware controller–something that could read “instructions” from a memory,
  and then use them to control a hardware output.  In this case, it should be
  possible to build a basic music box–perhaps something that could play
  “&lt;a href=&quot;https://www.youtube.com/watch?v=Qwa0c8VO71s&quot;&gt;Music Box Dancer&lt;/a&gt;”?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That would end the basic set of lessons on building bus masters.&lt;/p&gt;

&lt;p&gt;The next group of lessons would focus on building a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.  This would not
be about &lt;a href=&quot;https://www.amazon.com/Computer-Architecture-Quantitative-John-Hennessy/dp/012383872X&quot;&gt;ISA design&lt;/a&gt; (Sorry, I know my limits), but rather on
implementing some increasingly complex
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s.&lt;/p&gt;

&lt;ol start=&quot;13&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The first lesson would discuss just a simple, very basic, microcontroller.
  I haven’t yet decided what ISA I’d use, or if there’s one available that has
  a nice tool suite with it, but you get the idea.&lt;/p&gt;

    &lt;p&gt;In this lesson, the student would implement such a simple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
really &lt;a href=&quot;//zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;needs a debugging
interface&lt;/a&gt;, so
we’d add one.  This would allow us to start and stop our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
using the same debugging bus that’s supported us so far, and perhaps even
read registers and state from it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That would lead us right into building an &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/host/zipload.cpp&quot;&gt;ELF program
loader&lt;/a&gt;.
This could be just something basic that can read a compiled file and load
it into either flash or (block) RAM.  Of course, this would also require
an ELF-based tool chain, and so likely a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Instruction_set_architecture&quot;&gt;ISA&lt;/a&gt;
as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can then move to a lesson on &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined
CPUs&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This one I haven’t quite figured out yet, but I’d like to offer something
more complex than the basic state-machine based microcontroller.&lt;/p&gt;

    &lt;p&gt;While one option might be to use the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; here,
I want an option that presents some amount of learning to the
student–rather than just following a script.&lt;/p&gt;

    &lt;p&gt;Perhaps one option might be adding a special instruction (or two, or four)
to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
Another option might be to restructure the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; for some
purpose (such as MMU integration as an example).  We’ll see.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How fast your CPU works is really dependent upon where it’s memory is found,
and linker scripts provide the means of adjusting where your memory is found
within your design.  We’ll discuss how to read, write, and adjust linker
scripts so you have an idea of what’s going on within your design.&lt;/p&gt;

    &lt;p&gt;The student should be able to load a CPU (either theirs or mine) so that it
runs from &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;Flash&lt;/a&gt;, block RAM,
block ROM, or … wherever.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This really then feeds nicely into understanding &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;how a bootloader
works&lt;/a&gt;.
Once you know how to place program instructions (wherever), it’s important
to be able to copy them to where you need them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next lesson would focus on how to build a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache
controller&lt;/a&gt;.
I’d provide the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to any one
who wished to use it at this point, although I could understand why a
student might rather wish to use their own.  I’m not (yet) set on this
course of action.&lt;/p&gt;

    &lt;p&gt;Of course, as with all of these designs, part of the lesson would discuss
how to go about formally verifying the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, we’d discuss the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system&quot;&gt;FAT
filesystem&lt;/a&gt;,
so that the CPU could access files on an external &lt;a href=&quot;https://en.wikipedia.org/wiki/SD_Card&quot;&gt;SD Card&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Yes, the course will show how this can be done from simulation too.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think this progression builds nicely, one lesson upon the next, with the
bus components being built growing every more capable.  Further, while
I like this progression of lessons, I’ve noted that with all of my
tutorials students have found it valuable to pick up in the middle
as their interest and needs dictate.&lt;/p&gt;

&lt;h2 id=&quot;hardware-required&quot;&gt;Hardware required&lt;/h2&gt;

&lt;p&gt;Unlike the &lt;a href=&quot;/tutorial&quot;&gt;beginner’s tutorial&lt;/a&gt;, once we get
past lesson one, special hardware will be required for the following lessons.
Well, either that or the student might choose (instead) to build the design
in the simulator alone and just go on.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Proposed hardware requirements&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/generic-hw.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Judging from the hardware we’ve discussed above, to complete all of the lessons
you’d need:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;Flash memory&lt;/a&gt;
controller (most FPGAs have this)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A VGA port.&lt;/p&gt;

    &lt;p&gt;While I’d love to do &lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt;,
and while HDMI isn’t really all that much more
difficult, the I/O’s required for HDMI are a touch more challenging
to do in a &lt;em&gt;generic hardware&lt;/em&gt; fashion.&lt;/p&gt;

    &lt;p&gt;Perhaps this &lt;a href=&quot;https://store.digilentinc.com/pmod-vga-video-graphics-array&quot;&gt;dual Pmod VGA
peripheral&lt;/a&gt;
would serve our purpose well here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While I’d like to avoid any external RAM controllers, the Video lesson
really requires a significant amount of RAM (typically external) in order
to handle streaming from a memory buffer.&lt;/p&gt;

    &lt;p&gt;This may require an AXI lesson mid-tutorial.&lt;/p&gt;

    &lt;p&gt;Perhaps the best way to handle this in an intermediate course would be to
offer vendors an opportunity to post and share how to interact with their
xDDR SDRAM controllers.  I know I have several SDRAM controllers available
to work from, and even an &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/sramdev.v&quot;&gt;SRAM controller&lt;/a&gt;.  I would also expect that the
&lt;a href=&quot;https://github.com/enjoy-digital/litedram&quot;&gt;litedram&lt;/a&gt; authors might be
willing to support this project as well.  (Maybe I should ask them?)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A simple PWM based audio controller, such as might be used with &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier&quot;&gt;this
  PMod audio device&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A SPI based A/D.  For this, I was thinking of something similar to
  &lt;a href=&quot;http://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain&quot;&gt;Digilent’s audio
  PMod&lt;/a&gt;,
  for which I already have both &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smpladc.v&quot;&gt;(verified) example
code&lt;/a&gt; as well
as a decent &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/micnco.cpp&quot;&gt;emulator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, in order to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/SD_Card&quot;&gt;SD
Card&lt;/a&gt;.  and read and parse a &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system&quot;&gt;FAT file
filesystem&lt;/a&gt;,
you’d need a design with an SD card reader on it.  My current &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD card
controller&lt;/a&gt; is SPI based, so I might
start there.  On the other hand, one of my current projects is to upgrade
that controller to be fully SDIO compliant, so we might do even better.&lt;/p&gt;

    &lt;p&gt;For those that do not have an SD card on their board, there does exist
a &lt;a href=&quot;https://store.digilentinc.com/pmod-sd-full-sized-sd-card-slot&quot;&gt;PMod SD&lt;/a&gt;
which might work nicely for this purpose as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sadly, not all entry level development boards have all of this hardware,
so whether or not this list is too aggressive or not is an important question.&lt;/p&gt;

&lt;h2 id=&quot;from-blinky-to-axi--wheres-the-axi&quot;&gt;“From Blinky to AXI” … where’s the AXI?&lt;/h2&gt;

&lt;p&gt;So I started by saying that a tutorial “From Blinky to AXI” would be a valuable
contribution.  Sadly, the proposed tutorial above doesn’t (yet) discuss
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.
I haven’t quite decided on how to handle that.&lt;/p&gt;

&lt;p&gt;I could leave the AXI work for a future “AXI only” tutorial, or I might work
it into this tutorial, or I might just leave it within the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;blog&lt;/a&gt;.
Another approach might be to provide the bus with a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wb2axilite.v&quot;&gt;WB to AXI-lite
bridge&lt;/a&gt;, and
then to make all of the devices using
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;.
I’m not quite certain right now.&lt;/p&gt;

&lt;p&gt;I am open to ideas, if you’d like to share them.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Whew!  While I like this overview of what would be next, I’m not certain any
(potential) students would be interested in something quite this intensive.&lt;/p&gt;

&lt;p&gt;I’d love to hear your thoughts.  I intend to create a &lt;a href=&quot;https://www.reddit.com/r/ZipCPU/comments/crbyrw/planning_an_intermediate_design_tutorial/&quot;&gt;Reddit post&lt;/a&gt;
with this article, and hear any comments that might be shared.  Feel free to
join in the discussion.&lt;/p&gt;

&lt;p&gt;My own first thought is to note that, while
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
handles multiple slave integration easily, it doesn’t (yet) handle multiple
masters.  The good news is that I’m going to have to fix that already for
a contract I’m working on, so that’s likely to get fixed quickly.&lt;/p&gt;

&lt;p&gt;Of course, all of this would only be if the &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord
wills&lt;/a&gt;–so we’ll have to see
if any of this ever gets off of the ground in the first place, but your
thoughts would be welcome either way.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And whatsoever ye do in word or deed, do all in the name of the Lord Jesus, giving thanks to God and the Father by him. (Col 3:17)&lt;/em&gt;</description>
        <pubDate>Fri, 16 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/08/16/intermediate.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/08/16/intermediate.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #2: Will this counter pass formal verification?</title>
        <description>&lt;p&gt;Formal verification is known for catching the subtle bugs.  This very simple
counter design has a subtle bug within it.  See if you can find it.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/08/08/quiz02.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/08/08/quiz02.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Quiz #1: Will the assertion below ever fail?</title>
        <description>&lt;h2 id=&quot;welcome-to-formal-quizes&quot;&gt;Welcome to Formal Quizes!&lt;/h2&gt;

&lt;p&gt;Since I have enjoyed sharing &lt;a href=&quot;https://twitter.com/hashtag/FVQuiz&quot;&gt;formal verification quizzes on
twitter&lt;/a&gt;, and since they’ve been such
a well received part of the &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;feed&lt;/a&gt;,
I thought I’d add these same quizzes to the blog.&lt;/p&gt;

&lt;p&gt;The spirit of these quizes is intended to be fun.  They are drawn from the
slides for my &lt;a href=&quot;/tutorial/#training&quot;&gt;formal verification
course&lt;/a&gt;.  The format limits the quiz
questions to a single slide.  The up side is that the quizzes tend to be
simpler.  The downside is that there’s a challenge required on my side to
make them understandable and complete as well.  (I don’t always succeed at
this.)&lt;/p&gt;

&lt;p&gt;Take as much time on each quiz as you would like.  I encourage you to
create small designs to try each concept using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; and to see what
happens when possible.  I also anticipate posting the answer to the quizzes
within days of the quiz itself.  Once posted, the image containing the quiz
will become a web link, and there will also be a link underneath pointing to
the answer page.  By the time most people come across any particular quiz,
the chances will be that the answer is already posted.&lt;/p&gt;

&lt;p&gt;Be aware, I enjoy posting trick questions!&lt;/p&gt;

&lt;p&gt;You may also notice that I’ve added two new links to the navigation bar.
The first link will be to an &lt;a href=&quot;/quiz/quizzes.html&quot;&gt;index page&lt;/a&gt;,
linking to all the various quiz posts.  The other is to a
&lt;a href=&quot;https://www.reddit.com/r/ZipCPU&quot;&gt;Reddit feed&lt;/a&gt; I’ve created to go with the
blog itself.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/08/03/quiz01.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/08/03/quiz01.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Just how long does a formal proof take to finish?</title>
        <description>&lt;p&gt;Formal methods are exhaustive in their nature.  That’s what makes them
special.  That’s why I like using them over &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_testing&quot;&gt;constrained random simulation
based testing&lt;/a&gt;.  If there’s
ever a way a property within your design can be made to fail,
formal methods can find it.&lt;/p&gt;

&lt;p&gt;That’s the good news.&lt;/p&gt;

&lt;p&gt;The bad news is that because formal methods are exhaustive they can take
exponential time to complete.  The bigger and more complex your design is,
the longer the solver will take to prove a property.  Eventually, there
comes a complexity where the property becomes essentially impossible to prove.&lt;/p&gt;

&lt;p&gt;In other words, the answer to “how long does the formal solver take to
return an answer?” can be anywhere from trivial to infinite depending upon
the problem.&lt;/p&gt;

&lt;p&gt;That’s not helpful.  Perhaps some statistics might be more useful.&lt;/p&gt;

&lt;h2 id=&quot;looking-at-some-statistics&quot;&gt;Looking at some statistics&lt;/h2&gt;

&lt;p&gt;I’ve now been doing formal verification for almost two years, ever since my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;first humbling
experience&lt;/a&gt;.  Over the
course of that time, I’ve kept the output directories created by
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; for
nearly 900 of the proofs that I’ve completed.  This includes both halves of any
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
proofs, as well as quite a few cover proofs.  With a bit of work, these
proof durations can be organized into an approximate &lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;cumulated distribution
function&lt;/a&gt;,
such as Fig. 1 shows.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Proof duration CDF&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/proof-cdf.png&quot;&gt;&lt;img src=&quot;/img/tweets/proof-cdf.png&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this chart, the X axis is the number of seconds a given proof took to
complete, whereas the Y axis is the percentage of all of the proofs that
took less than that X amount of time.  By plotting this on a semilog scale in
X, you can understand some of the realities of formal verification.  For
example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;82% of all of the proofs I’ve done have taken less than &lt;strong&gt;one&lt;/strong&gt; minute&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;87% of all of the proofs I’ve done have taken less than &lt;strong&gt;two&lt;/strong&gt; minutes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;93% of all of the proofs I’ve done have taken less than &lt;strong&gt;five&lt;/strong&gt; minutes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;95% of all of the proofs I’ve done have taken less than &lt;strong&gt;ten&lt;/strong&gt; minutes&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every now and again, I’ll post about how long a given proof takes.  For example,
I’ve had proofs require a couple of hours to return.  A classic example
would be some of the proofs associated with verifying my &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;open source
generated FFT cores&lt;/a&gt;.
Such proofs are the exception rather than the norm, however, and typically
when I write about such extreme times its because I wasn’t expecting the
proof to take that long to accomplish.&lt;/p&gt;

&lt;p&gt;The reality is that I don’t normally notice how long a proof takes.  Why not?
Because formal verification, in my experience, has typically been faster than
simulation.  It’s typically faster than running a design through synthesis or
place-and-route.  This follows from the fact that 95% of all of these proofs
were accomplished in less than 10 minutes, whereas it often takes longer than
10 minutes with Vivado to synthesize a design.&lt;/p&gt;

&lt;!-- &lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;CAPTION&gt;Fig 2. Relative durations of EDA tasks&lt;/CAPTION&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG SRC=&quot;/img/eda-task-duration.png&quot; ALT=&quot;&quot; WIDTH=&quot;480&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt; --&gt;

&lt;h2 id=&quot;how-do-i-keep-my-proofs-that-short&quot;&gt;How do I keep my proofs that short?&lt;/h2&gt;

&lt;p&gt;This is a really good question, and there’s typically several parts to the
answer.&lt;/p&gt;

&lt;p&gt;In general, the amount of time a proof requires is a function of the number
of items that need to be checked, and the number of steps they need to be
checked in.  Of these two, I usually have the most control over the number
of steps required by the proof.  SymbiYosys calls this the “depth” of the proof.&lt;/p&gt;

&lt;p&gt;How shall this depth be set?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;For many simple peripheral cores, the depth can be set initially to however
long it takes to perform the operation the core is required to perform.&lt;/p&gt;

    &lt;p&gt;This can often be determined by running a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; check, and seeing how
long it takes the core to complete an operation and to return to idle.&lt;/p&gt;

    &lt;p&gt;This doesn’t work for all cores, however, but it is a fairly good start.
It does apply nicely to most SPI cores, as well as those that are similar
such as my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Management_Data_Input/Output&quot;&gt;MDIO&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/rtl/enetctrl.v&quot;&gt;controller&lt;/a&gt;,
since they all have fixed transaction lengths.  It can also apply to
CPUs, where the depth is determined by the time it takes for a single
instruction to go from when it is issued all the way to when it is retired.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For most of my proofs, I start with a depth set to default, 20 steps.  If
I struggle inexplicably at that depth, I may set it to longer as a result of
a basic knee-jerk reaction.&lt;/p&gt;

    &lt;p&gt;The fact is, when you first start out with a formal proof, the solver can
typically find assertion failures very quickly.  It’s only as you slowly
remove these initial failures that the proof starts to take the solver
more and more time to return an answer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the solver takes too long at a depth of 20, I’ll often shorten the depth.&lt;/p&gt;

    &lt;p&gt;This was the case with my &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI
crossbar&lt;/a&gt;.  &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI is such a
complicated protocol&lt;/a&gt;,
I couldn’t let the depth get too long at all.  In the end, I fixed this
depth to four time-steps.  It was the shortest depth I could find where
all of the various constraints could be evaluated properly in the time
interval.&lt;/p&gt;

    &lt;p&gt;One of the nice features of Yosys’ SMT solver is that it reports back
periodic status messages showing how long each step has taken.  This helps
you know where the “limit” is.  For example, if the first five steps take
less than 6 seconds each, but the six step has taken over an hour and it
hasn’t yet completed, you may need to drop the depth to five and just work
with it there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The trick to setting the depth is
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;If the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;inductive&lt;/a&gt;
step ever passes, even if I don’t have all of the properties
I want in place yet, I’ll set the depth to whatever it took to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
This keeps the proof as short as it will ever be.&lt;/p&gt;

    &lt;p&gt;For example, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can be formally verified
in &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/bench/formal/zipcpu.sby&quot;&gt;between 10 and 14 steps depending upon the configuration&lt;/a&gt;.  Given that
each step is longer than the step before hand, it makes sense to keep the
solver from doing too much.  Those configurations that can be
solved in 10 steps I set to be solved in 10 steps.  Those that cannot, get
set to however many steps they need.  While this won’t speed up the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;inductive&lt;/a&gt;
step at all, it often shortens the associated basecase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you know your depth is too shallow?&lt;/p&gt;

    &lt;p&gt;I’ve had several proofs that have required depths of much longer than
ten or twenty steps.  Examples include my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;serial port receiver (an
asynchronous proof)&lt;/a&gt; at 110 clocks,
my &lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/bench/dev/wbhyperram.sby&quot;&gt;hyperram controller&lt;/a&gt; at 40 clocks,
and several of the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/bench/formal/qflexpress.sby&quot;&gt;slower configurations&lt;/a&gt; of my &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;universal flash
controller&lt;/a&gt; ranging
from 26 steps all the way up to 610.
Cover proofs tend to be worse than assertion based proofs, with my
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;serial port receiver&lt;/a&gt; requiring &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/bench/formal/rxuartlite.sby&quot;&gt;720 steps&lt;/a&gt;,
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Management_Data_Input/Output&quot;&gt;MDIO&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/bench/formal/enetctrl.sby&quot;&gt;controller&lt;/a&gt; for my ethernet implementations requiring 258 steps.&lt;/p&gt;

    &lt;p&gt;The easy way to know that a proof &lt;em&gt;isn’t&lt;/em&gt; too shallow is to work with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
until it passes as we just discussed above.  In the case of cover, covering
intermediate states will help to reveal just how long the trace needs to be.&lt;/p&gt;

    &lt;p&gt;Knowing if an
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt; proof
is too shallow requires understanding your core, and the trace produced
during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As I teach in my &lt;a href=&quot;/tutorial#training&quot;&gt;formal methods
course&lt;/a&gt;, there are three kinds of 
assertion failures during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;:
1) those that fail at the last time step, 2) those that fail the time step
before that, and 3) those whose failure can be tracked to earlier in the
trace.  Typically, in the third case, an assertion is sufficient to bring
the design back in line.  If the data necessary to make the assertion isn’t
part of the trace, such as if it’s dependent upon something that happened
earlier, then you either need to add a register to capture the dependency
or you need to increase the depth of the trace.&lt;/p&gt;

    &lt;p&gt;The reason that my serial port receive proof is so long is that I had a
criteria that the clock in the serial port transmitter would never be off
by more than half a baud interval at the end of the transmission.  Measuring
how far that would be at every time step required a multiplication
function–something that doesn’t work well with formal methods.  As a result,
I was forced to only checking this value at the end of every baud interval,
and using power-of-two properties.  This fixed the induction length to at
least one baud interval in length.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some problems are just too hard&lt;/p&gt;

    &lt;p&gt;Two classic examples are multiplies and encryption.  Of the two, formally
verifying designs with multipliers within them is an area of active research.
I wouldn’t be surprised to see some breakthroughs in the near future.
Formally verifying designs with encryption within them should be and
should remain a hard problem, otherwise the encryption isn’t worth its salt.&lt;/p&gt;

    &lt;p&gt;I like to get around this problem by replacing the internal multiplier or
encryption result with a solver chosen value.  This can work for DSP
problems, making it possible to still apply formal methods to DSP
algorithms although the result is often not quite as satisfying.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-beginner-mistake&quot;&gt;The Beginner Mistake&lt;/h2&gt;

&lt;p&gt;The big mistake I’ve seen beginners make is to take a large and complex core,
often one with several component files having no formal properties, and then
try to formally verify that a single property holds for all time.&lt;/p&gt;

&lt;p&gt;This is a recipe for both frustration and failure.&lt;/p&gt;

&lt;p&gt;A classic example would be a user who finds a CPU core on
&lt;a href=&quot;https://opencores.org&quot;&gt;opencores&lt;/a&gt;, knows nothing about it, but still wants
to know if an assertion about it will pass.&lt;/p&gt;

&lt;p&gt;Instead, start your formal verification work at the &lt;em&gt;bottom&lt;/em&gt; level of a design
with what I often call “leaf modules”–modules that have no submodules beneath
them.  Formal verification, and particularly verification using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
is &lt;em&gt;not&lt;/em&gt; a &lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot;&gt;black box&lt;/a&gt;
exercise.  Passing an
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
test requires an intimate knowledge of the design in question, and several
assertions within the design.  Building those assertions from the bottom up
makes it easier to get a property to pass later at the top level.&lt;/p&gt;

&lt;p&gt;I should mention that there are several solvers that do not require this
intimate internal knowledge, such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;abc pdr&lt;/code&gt; solver or either of
the &lt;a href=&quot;https://en.wikipedia.org/wiki/And-inverter_graph&quot;&gt;aiger&lt;/a&gt;
solvers &lt;code class=&quot;highlighter-rouge&quot;&gt;aiger avy&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;aiger suprove&lt;/code&gt;, and so I’ve seen beginners
attempt to use these solvers for this purpose as well.  Sadly, these solvers
are not well suited for such large designs, and they tend not to provide any
progress feedback along the way.  The result tends to be user complaints that
the solver hangs or crashes, when in reality the problem was that the user
was expecting too much from the tool.&lt;/p&gt;

&lt;p&gt;This is also one of those reasons why formal verification works so well at
the design stage, rather than as a separate verification stage done by a
new team of engineers.  It is the designer who knows how to constrain the
values within his own design–not the verification engineer.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Despite its reputation for computational complexity, hardware formal
verification tends to be very fast in practice today.  It’s often faster
than both simulation and synthesis, allowing a designer to iterate on his
design faster than he would with either of these other approaches.&lt;/p&gt;

&lt;p&gt;If you’ve never tried formal verification, then let me invite you to work
through my &lt;a href=&quot;/tutorial&quot;&gt;beginning verilog tutorial&lt;/a&gt;.  Once
you get past the second lesson, every design will involve formally verifying
that it works before ever trying to implement the design on actual
hardware.  Indeed, the background you will need for more complicated projects
is to be gained by working on simpler projects–as it is in many other fields.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;But the day of the Lord will come as a thief in the night; in the which the heavens shall pass away with a great noise, and the elements shall melt with fervent heat, the earth also and the works that are therein shall be burned up. (2Pet 3:10)&lt;/em&gt;</description>
        <pubDate>Sat, 03 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2019/08/03/proof-duration.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/08/03/proof-duration.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Lessons learned while building crossbar interconnects</title>
        <description>&lt;p&gt;Okay, I’ll admit it, I’ve never used
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
for anything other than accessing
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt; memory.  Even for that
I tend to use a &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone (WB) to AXI
bridge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have, however, looked for posts on both
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;’s and now
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s forums
that I might be able to answer.  It seems that
Xilinx’s
answer to most design problems is to create either a
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze CPU&lt;/a&gt; or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM CPU&lt;/a&gt; (within a Zynq),
that you then connect to the rest of your design using their
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1.  Xilinx Tech Support&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/xiltech-support.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s interconnect&lt;/a&gt;
is a general &lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;cross bar switch&lt;/a&gt;.
It “connects one or more &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
memory-mapped master devices to one or more memory-mapped slave devices.”
In general, a &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar switch&lt;/a&gt;
allows any number of bus masters to access any number of bus slaves with the
(general) rule that only one master can talk to any given slave at a time.&lt;/p&gt;

&lt;p&gt;This is all fine and dandy, but what happens when you want to simulate a design
that has an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; within it?  &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s
crossbar&lt;/a&gt;
is proprietary.  It won’t run in
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.
Of course, &lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;their
CPU&lt;/a&gt;
is also proprietary, but we’ll leave that as a topic for a different discussion.&lt;/p&gt;

&lt;p&gt;I recently had the opportunity to investigate how to build a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar switch&lt;/a&gt;
of my own.  I built three of them: a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone
crossbar&lt;/a&gt;, an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;,
and a full-up &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI4
crossbar&lt;/a&gt;.  Today,
I thought I might share several of the more important points of these designs,
and perhaps even some lessons I learned while building them.&lt;/p&gt;

&lt;h2 id=&quot;crossbars-and-autofpga&quot;&gt;Crossbars and AutoFPGA&lt;/h2&gt;

&lt;p&gt;My own interest in building a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
stems from my work with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; takes
a series of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components, and connects them all together–much like either Vivado or Quartus
does but without the graphical user interface.  Each component is given its own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;, a set of
dedicated &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
connection wires, and then connected to a user-selected
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This works great … when it works.&lt;/p&gt;

&lt;p&gt;Sadly, I’ve had to work through some times when it hasn’t worked for me.
Often, I’ve mis-connected a slave to the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;–perhaps not ANDing the address selection wire with the strobe, perhaps swapping
the stall and acknowledgment signals, whatever it is I’ve often ended up needing
to debug a piece of a design where the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt; core
meets some “&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;verified-by-simulation&lt;/a&gt;”
logic.&lt;/p&gt;

&lt;p&gt;My ultimate goal is to avoid these problems by &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verifying&lt;/a&gt;
all of the parts and pieces of any design I create, to include those parts
that &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generates.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2.  Crossing slaves mid-request&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/double-ack-bug.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of my first problems is that &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;my favorite interconnect
design&lt;/a&gt;,
the same basic interconnect
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
builds, has a couple of limitations.  First, it can only handle a single bus
master at a time.  Multiple bus masters need to go through an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
first
before they can get access to the bus.  We’ll come back to this again
in a moment.  Second, &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;that
interconnect&lt;/a&gt;
offers no protection against the case where a
bus master
crosses from one slave to another during a single bus interaction, as Fig. 2
illustrates on the left.  In this illustration, the first bus slave responds
two cycles after the strobe while the second slave responds one cycle later.
The responses might end up colliding, as shown in the figure, or even out of
order.  Worse, the third problem has to do with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.
If a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
is generated as I have things set up, the
bus master
will never know &lt;em&gt;which&lt;/em&gt; request generated the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
and which request(s) have completed.&lt;/p&gt;

&lt;p&gt;I was curious to know if I could do better.&lt;/p&gt;

&lt;p&gt;At least, that was my first reason for being interested.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. A Formal Property File can be the easiest way to start with formal verification&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/fpropfile.png&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Eventually, a second reason came into play as well:
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;Interconnects&lt;/a&gt;,
like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
bridges in general, make ideal tests of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal bus property
files&lt;/a&gt;.
Because you need the properties for both the slave and the master, you
essentially have to verify your properties back to back.  Are the master
bus property assumptions sufficient to drive the slave?  Are the slave
bus assumptions sufficient to satisfy the master’s assertions?&lt;/p&gt;

&lt;p&gt;Finally, my last basic reason was that this
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
work was a lot of fun.  Indeed, I found them building these
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;, and particularly
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
them, to be a rather addictive challenge–even if it’s quite a time consuming
one.  Hey, we all have our hobbies, right?&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-crossbar&quot;&gt;What is a Crossbar?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;Wikipedia describes a crossbar&lt;/a&gt;
as a two-dimensional electrical structure where the source
comes in from one direction, and the outgoing connections go out a second.
While there’s &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;no picture offered currently on
wikipedia&lt;/a&gt;, I’m going to use
Fig. 4 as my attempt to capture and explain this concept.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4.  The Concept of a Crossbar Switch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/crossbar-switch.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see a set of incoming electrical connections at the top,
and a set of outgoing electrical connections on the right.  At every crossing,
there’s a switch which may be closed to create a connection between any given
master and slave combination.&lt;/p&gt;

&lt;p&gt;There’s two other things to note from this figure.  First, note that any
of the incoming signals can be connected to any of the outputs.  Second, note
that for an &lt;code class=&quot;highlighter-rouge&quot;&gt;NxN&lt;/code&gt; array, all &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; sources can be connected to a different
sink.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;Bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;
are very similar conceptually.  A series of
bus masters
are available as sources to drive one of several
bus slaves.  The biggest difference is that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt; typically have
many wires associated with them, and some of those wires are driven
with return values by the slave.  For example, a 32-bit
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; requires roughly 164
separate wires to drive the slave, whereas the slave will respond with another
50 wires returned in response.  The
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; is both much simpler, and
not nearly so full featured.  Wishbone transactions, therefore, can be
accomplished with only 106 separate wires, of which 71 are used to drive the
slave and 35 are returned in response.&lt;/p&gt;

&lt;p&gt;As for how you might use one of these, consider as an example that the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;typical ZipCPU design&lt;/a&gt;
that has at least four separate
bus masters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;instruction
fetch&lt;/a&gt; unit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;data memory port&lt;/a&gt;, handling any load or store instructions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt; data transfer port&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;A debug port&lt;/a&gt;,
through which the CPU can be &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;stopped, stepped, or reset and its registers
may be read&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of my
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; designs have more
masters as well, for example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;A Video display controller&lt;/a&gt;
that needs to read from memory in order to create a pixel stream&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;A spectrogram raster, that writes FFT results from captured data to the
memory&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As I’ve currently built most of my &lt;a href=&quot;/about/zipcpu.md&quot;&gt;ZipCPU&lt;/a&gt;
designs, I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;2:1&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiters&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;such as this
one&lt;/a&gt;
followed by a &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1:N&lt;/code&gt; interconnect&lt;/a&gt;, as illustrated by Fig. 5.  (I did build a &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/master/rtl/wbquadarbiter.v&quot;&gt;4:1
arbiter&lt;/a&gt;
once, but as I recall I’ve yet to use it.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. The ZBasic bus structure only allows a single master to ever drive the bus&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/zipcpu-nocrossbar.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sadly, that means that any
bus master
can starve another by simply hogging the port.&lt;/p&gt;

&lt;p&gt;To see how this might happen, consider an example from one of my first FPGA
projects what it would take to drive a video stream from a &lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users/&quot;&gt;Basys3
board&lt;/a&gt;.
The &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video driver&lt;/a&gt; needed access
to the &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; to read
(and then decompress) pixels so that they could be displayed on
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;VGA&lt;/a&gt; output.
(There wasn’t enough RAM on or off chip for a proper screen buffer.)  Now
imagine that at the same time, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
wants to &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;read
instructions&lt;/a&gt; from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;: the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video controller&lt;/a&gt; needs the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;, and &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; needs the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
By going through an N:1
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
first, or rather several &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;2:1
arbiters&lt;/a&gt;
as I had actually implemented it, any time
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
request would get through the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;arbiter&lt;/a&gt;
it would then force any
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
requests to stall.  Worse, they might need to wait so long that the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
can’t read its pixel memory fast enough to display it.&lt;/p&gt;

&lt;p&gt;This particular design was from before
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
The solution I eventually chose, shown in Fig. 6 below, was to place the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
memory controller &lt;em&gt;after&lt;/em&gt; the main
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
in order to disconnect &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; from
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
memory if it didn’t need it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Placing the arbiter after the interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/flash-v-video.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, this will only ever work as long as the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video controller&lt;/a&gt;
only ever needs access to a single peripheral–in this case the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If, on the other hand,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
could access the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
at the same time the video controller could access
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;, then you have a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;—or at least that’s the
idea.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;my new flash
controller&lt;/a&gt;,
this might no longer be an issue–but it certainly
was back then with the older controller.  On the other hand, with the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;old flash controller&lt;/a&gt;,
I could only ever control a 640x480 screen–with the newer
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash controller&lt;/a&gt;
I might be able to handle some better screen resolutions if I ever returned
to the project.&lt;/p&gt;

&lt;h2 id=&quot;the-key-an-nxm-arbiter&quot;&gt;The key: an NxM Arbiter&lt;/h2&gt;

&lt;p&gt;When building a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;, everything
comes down to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
has &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; ports for &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; masters, and &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; ports for &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; slaves.  Somehow, then,
a slave needs to get its data from one of the masters.  But which master?
That’s the task of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;arbiter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are several rules to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt; in a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; The bus protocol must be obeyed.&lt;/p&gt;

    &lt;p&gt;This is easily checked: all it requires is attaching a set of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal bus
properties&lt;/a&gt;
to every incoming or outgoing connection.  Since I have bus properties for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;, and even
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;,
I could easily verify that each of my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt;
maintained these properties for each connection.&lt;/p&gt;

    &lt;p&gt;Having &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt; identical master connections and &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; identical slave connections
naturally lent itself to a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops within the design.  Normally I
avoid &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops within digital design like the plague.  In this case, there
was no way around it if I wanted the interconnects to have a programmable
number of master and slave connections.&lt;/p&gt;

    &lt;p&gt;To help deal with this, I used either the &lt;code class=&quot;highlighter-rouge&quot;&gt;genvar&lt;/code&gt; index &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; or equivalently
the integer index &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt; to refer to a connection to a bus master, while I
used either &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; to refer to a connection to a bus slave.  I’ll
refer to these indexes often later, so remember &lt;code class=&quot;highlighter-rouge&quot;&gt;NxM&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; will reference
one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; connections from the &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt;
bus masters,
whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; references one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; outgoing connections to
bus slaves.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7.  One master connection, one slave connection&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/arbiter-rule-1.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; No more than one master can be connected to any particular slave.&lt;/p&gt;

    &lt;p&gt;I used a 2-dimensional &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; variable to help express this.  This is
most easily understood by examining Fig. 7 on the right.  Imagine that
each switch’s status was represented by a single bit in this array.
In my terminology, &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N]&lt;/code&gt; represents all of the connections associated
with all of the slaves that might connect to master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, shown in Fig. 7
as a vertical bar.  Fig. 7 shows what would happen if &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[0][2]&lt;/code&gt; were
set, connecting master numbered &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to slave number &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Using this 2-D &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; array, I could easily express this property that
no more than one master could ever be connected to more than one slave as
&lt;code class=&quot;highlighter-rouge&quot;&gt;assert($onehot0(grant[iN]));&lt;/code&gt; for every value of the master index, &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;In the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt; I’ve built,
whether the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;full AXI4
interconnect&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite interconnect&lt;/a&gt;,
I used two grant variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;wgrant&lt;/code&gt; for writes and &lt;code class=&quot;highlighter-rouge&quot;&gt;rgrant&lt;/code&gt; for reads,
since the &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
protocol allows both writes and reads at the same time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px;&quot;&gt;&lt;caption&gt;Fig 8. Quick loop up functions, master&#39;s perspective&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/mgrant.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This wasn’t enough to keep the &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;synthesized logic simple and low
   cost&lt;/a&gt;,
   so I created two other structures.  The first of these,  &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt;, was
   true if a particular master had been granted access to a slave–any slave.
   Essentially, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was equivalent to the “OR” of all of the elements
   in the grant array for a particular master, &lt;code class=&quot;highlighter-rouge&quot;&gt;|grant[iN]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second structure was &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[iN]&lt;/code&gt;, which contained the index of the slave
   that master &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt; was connected to.  Hence, if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was true,
   then it must also be true that &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[iN][mindex[iN]]&lt;/code&gt; was also true.
   Perhaps you may recall &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;the post discussing why this approach was so
   necessary&lt;/a&gt; from
   some time ago.  This index-based reference was my solution to that problem.&lt;/p&gt;

&lt;p&gt;This “solution” naturally led to another problem, what if you only have for
   example 5 slaves?  How many bits should be used for each &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex&lt;/code&gt; value?
   Well, three obviously.  However, that also meant that any time a value was
   referenced using the index, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;slave_ack[mindex[N]]&lt;/code&gt;, that a full 8
   values needed to be defined–even if I knew that only the lower 5 would be
   used.&lt;/p&gt;

&lt;p&gt;All of these various data structures are tightly connected.  As I mentioned
   above, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN] |-&amp;gt; (grant[iN] == 1&amp;lt;&amp;lt; mindex[iN])&lt;/code&gt;.  There was also the
   corollary, that &lt;code class=&quot;highlighter-rouge&quot;&gt;!mgrant[iN] |-&amp;gt; (grant[iN] == 0)&lt;/code&gt;.  This helped to make
   certain that any logic I created kept these values properly synchronized.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Quick loop up functions, slave&#39;s perspective&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/sgrant.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; No more than one slave can be connected to any master.  Any unconnected
slave should neither receive requests nor send replies.&lt;/p&gt;

    &lt;p&gt;To capture this, I created two new values: &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt;, which would be true
if slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; had been assigned to a master.  Remember how &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was
true if any switch in the columns of Fig. 2 above was closed?  &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt;
is the same thing, only acting across the rows.  &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[iM]&lt;/code&gt; was the
slave side corollary for the master index, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[iN]&lt;/code&gt;, so that any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt; was true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[sindex[iM]][iM]&lt;/code&gt; must also be true.
(That’s what the &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; is intending to express in Fig. 9–evaluated
across all masters.  No, this is not valid syntax in any language I am
familiar with, but it fit in the figure.)&lt;/p&gt;

    &lt;p&gt;Put together, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N][M]&lt;/code&gt; was true, then master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; was connected
to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.  In that case, both &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[N]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[M]&lt;/code&gt; would be true.
Further, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[N]&lt;/code&gt; would be &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[M]&lt;/code&gt; would be &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Yes, keeping track of all of these values, &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex&lt;/code&gt; took a lot of accounting.  As I mentioned above,
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
really helped.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 10. Pseudo-slaves to handle bus errors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/buserr.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; If a master requests an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
that doesn’t belong to any slave, the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; must send a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
in response.  Further, it must not send the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
response until any other valid responses have been returned, so enforcing
a strict ordering of operations on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;–something I
didn’t have before.&lt;/p&gt;

    &lt;p&gt;This necessitated the creation of a special set of slaves, internal to the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;, which would
respond to any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.  That meant
that the slave index, &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; wouldn’t just go from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;NS-1&lt;/code&gt;, but rather
to &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; in order to reference the “no-peripheral mapped to this address”
slave.  You can see these extra slaves illustrated in Fig. 10 on the left.&lt;/p&gt;

    &lt;p&gt;This special slave ID was unusual, since every master could connect to
the error slave &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; at the same time.  It’s as though there really were
&lt;code class=&quot;highlighter-rouge&quot;&gt;NS+NM&lt;/code&gt; slaves, such as are shown in Fig. 10, rather than just the &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;
slaves connected to the right of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;.  That way two
masters can be receiving &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
responses at the same time without needing to wait for access to the special
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; slave.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
can’t change the grant for a given master while that master is waiting
for a response from a slave.&lt;/p&gt;

    &lt;p&gt;This requires counters.  Every request accepted into the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
needs to increase that counter by one, whereas every response needs to
decrease the counter by one.  Once the counter reaches zero, the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
can tear down a given connection and set up a new one.&lt;/p&gt;

    &lt;p&gt;Checking for whether or not the counter is empty is quite straightforward,
and I kept a set of flags I called &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N]&lt;/code&gt;, one for every master, to
indicate that there were no outstanding returns pending for that master.&lt;/p&gt;

    &lt;p&gt;Before we leave this topic, though, let me ask: have you thought
about what would happen when the counter overflows?  I think we can all
agree that would be bad, but how should it be prevented?&lt;/p&gt;

    &lt;p&gt;The easy answer would be to just add more bits to the counter to prevent
this from ever happening in the first place.  I mean, realistically, what’s
the likelihood that that a 32-bit counter of outstanding transactions would
ever overflow?  How about a 64-bit counter overflowing?&lt;/p&gt;

    &lt;p&gt;I chose a different answer.  I chose instead to keep track of when the
counter was full, which I kept track of in another array &lt;code class=&quot;highlighter-rouge&quot;&gt;mfull[N]&lt;/code&gt;,  and
to stall a given master if accepting another
transaction would cause the counter to overflow.  This wasn’t as easy as it
sounds, since it took a clock to stop things before I made the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt; external.
That meant checking for when the counter was near overflow, and stalling if
there was already something in the pipeline at that time.  Once I made the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt; external,
this all got much easier.&lt;/p&gt;

    &lt;p&gt;There’s also an unfortunate consequence of this rule: if ever a slave
misbehaves and doesn’t return a response, both the master granted access
to that slave and any other master attempting to access that slave will be
locked until a design reset.  Perhaps you’ll remember when I discussed having
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;that problem in a DE-10 Nano
board&lt;/a&gt;.  Finding a
bug is a challenge when the only way to get the board to respond to you
again is to reset it knowing that doing so will wipe away the information
you need to find the bug.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. A Broken slave can break the interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/broken-slave.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;(&lt;strong&gt;Implementation Option&lt;/strong&gt;:) A bus
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; may generate an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
if ever a slave doesn’t respond to a request within a given amount of time.&lt;/p&gt;

    &lt;p&gt;This follows from some ugly lessons I’ve had in the past when building
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components.  Because I use a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;bus based
“scope”&lt;/a&gt;
to debug my design, if ever a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component didn’t respond to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
the master might get stuck waiting for a response–and so I’d never be able
to access my “scope” to know what was going wrong.&lt;/p&gt;

    &lt;p&gt;To deal with this, every
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
structure I’ve built includes a counter with a timeout.  That way, if an
errant slave refused to respond to a request (this was pretty common
before I started working with
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;),
the design wouldn’t freeze and I could still use the design to discover
what the fault was.&lt;/p&gt;

    &lt;p&gt;Sadly, the way the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
protocol&lt;/a&gt; is structured,
this is really hard to do.  Eventually, I created &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;a separate AXI bus
component&lt;/a&gt;
that I could use to bridge between the “trusted” bus master side and any
untrusted slave, returning a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
on any violation of the bus protocol by the slave.  Unfortunately, as
currently built, this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt; also
limits the throughput of the bus–although not nearly as bad as &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s
demo implementations do&lt;/a&gt;.
Perhaps I’ll be able to come back later to fix this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Basic Processing Steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/cbar-channel.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; Every connection that can stall needs to be connected to a &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;, as shown in
Fig. 12 above.  All of my
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; have an incoming
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;, while
only the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
and &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; have return channel
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s as well.&lt;/p&gt;

    &lt;p&gt;Sadly, these sub-module &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s weren’t part of
my initial design approach.  In hind sight, they should’ve been.&lt;/p&gt;

    &lt;p&gt;Initially, I instantiated every one of the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffers&lt;/a&gt;
by hand within each
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
I created.  I then verified each
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
from the standpoint of the external connections.  This threw all of my
counters off, since I had to create an equation mapping the number of
outstanding transactions from the perspective of each master, to the
number of outstanding transactions from the perspective of each slave,
and the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
got in the middle of that.  If I failed to do so, the design would fail
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This book-keeping was quite painful.&lt;/p&gt;

    &lt;p&gt;On the other hand, once I created and verified a separate 
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
module, I went back and tore apart all of those painful
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties and rewrote them for simplicity.  Now, when verifying the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;,
the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s have been
removed and replaced with simple pass-through logic.  The proof, I’ve
judged, is just as valid–since the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s have
already been verified separately.&lt;/p&gt;

    &lt;p&gt;This almost worked, too.  There was one problem: The
bus abort capability I’ve written into all of my
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; implementations.
Eventually, I convinced myself with a bit of bounded model checking that
this was working, although I haven’t come back to simulate these
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt;
(yet) to see how they work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structures have more or less requirements than others.  For
example, &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;the way I implement
WB&lt;/a&gt;, I insist that the
cycle line be dropped following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
This then implements a bus &lt;em&gt;abort&lt;/em&gt;, forcing any pending upstream
requests to be aborted and leaving any pending transactions in an uncertain
state.  Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; doesn’t support any
aborts.  However, &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
also has &lt;em&gt;two&lt;/em&gt; write channels that need to be synchronized: an
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; write address
channel and an &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
write data channel–something
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; doesn’t
need to deal with.  The
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI arbiter&lt;/a&gt;,
whether &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;full&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;lite&lt;/a&gt;,
needs to stall any write data channels in order to wait for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
to be given before it knows what slave to connect the write data channel to.&lt;/p&gt;

&lt;p&gt;Still, most of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
code is the same across all three of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.  Care to take a peek?&lt;/p&gt;

&lt;h2 id=&quot;examining-the-arbitration-code&quot;&gt;Examining the Arbitration Code&lt;/h2&gt;

&lt;p&gt;Let’s look at the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone
crossbar&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/wbxbar.v#L356-L471&quot;&gt;arbiter&lt;/a&gt;
and see how it’s done.  Both the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/axixbar.v#L754-L981&quot;&gt;AXI&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/axilxbar.v#L558-L799&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s
have similar structures and logic, although in those cases the logic is
duplicated in order to handle the separate read and write channels.&lt;/p&gt;

&lt;p&gt;The first step is to find out what master is requesting which slave.  Since this
code is common to all three
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;s,
it has been separated &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;into its own
file, &lt;code class=&quot;highlighter-rouge&quot;&gt;addrdecode.v&lt;/code&gt;&lt;/a&gt;.
The entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
decode operation is driven by the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/addrdecode.v#L44-L55&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ADDR&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_MASK&lt;/code&gt; parameters&lt;/a&gt;.
These two parameters are each one-dimensional implementations of what
should properly be a 2d array.  There’s one entry of &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; (address width) bits
per slave.  In order to match an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;,
the master’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
request must match the slave’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
in &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ADDR&lt;/code&gt; for every bit where &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_MASK&lt;/code&gt; is true.&lt;/p&gt;

&lt;p&gt;We’ll start first with the &lt;code class=&quot;highlighter-rouge&quot;&gt;none_sel&lt;/code&gt; flag though.  This flag is used to 
indicate that the requested
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
doesn’t match any slave’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
range.  To do this, we’ll run a check through a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, checking
whether or not the requested
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
matches any of the possible
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
requests.  We’ll start by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;none_sel&lt;/code&gt; high if ever there’s a valid
request, indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt;, and then clear it if any slave is found who’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; matches.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Let&#39;s assume nothing&#39;s been selected, and then check
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to prove ourselves wrong.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Note that none_sel will be considered an error condition
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// in the follow-on processing.  Therefore it&#39;s important
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to clear it if no request is pending.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then populate a &lt;code class=&quot;highlighter-rouge&quot;&gt;request[M]&lt;/code&gt; array structure, so that
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[M]&lt;/code&gt; will be true if and only if the address of the transaction
we are examining is requesting access to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// request[NS] indicates a request forr a non-existent
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// slave.  A request that should (eventually) return a bus
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// error
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all of the hard address decoding work.  The rest of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
just handles how these values are to be returned–whether they are to be
registered, or held at zero when nothing is requested, or both.&lt;/p&gt;

&lt;p&gt;Once the addresses have been decoded to determine which slave is requested,
the next step is to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitrate&lt;/a&gt;
among potentially multiple masters all wanting access to the same slave.
For my implementations, I chose to do
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
on a priority basis.  In other words, if a
master &lt;code class=&quot;highlighter-rouge&quot;&gt;N2&lt;/code&gt; requests a slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, the request will not be granted if some
other higher priority master, we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;N1&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;N1 &amp;lt; N2&lt;/code&gt;, has also
requested the same slave at the same time.  The array of &lt;code class=&quot;highlighter-rouge&quot;&gt;requested&lt;/code&gt; values,
defined below, captures this idea.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;requested[N][M]&lt;/code&gt; is true, then some
other master with a higher priority than master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has requested access to
slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// For each slave
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// This slave has been requested if a prior
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// master has requested it
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// This includes any master before the last one
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// As well as if the last master has requested
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// this slave.  Only count this request, though,
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// if this master could act upon it.
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that I cross-checked the request against those masters that could
properly respond to it.  That way if a master &lt;code class=&quot;highlighter-rouge&quot;&gt;N1&lt;/code&gt; requests slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M1&lt;/code&gt;,
but hasn’t yet finished getting the responses from slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M2&lt;/code&gt; that it is
already connected to (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N1]&lt;/code&gt; is clear), then a lower priority
master such as &lt;code class=&quot;highlighter-rouge&quot;&gt;N2&lt;/code&gt; will not be prohibited from connecting to &lt;code class=&quot;highlighter-rouge&quot;&gt;M1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have our address decoding and basic book-keeping out of the way,
we can look into what the actual
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
requires.  In this design,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
is done on a master by master basis using a variety of different
variables, some of which I’ve already highlighted and defined above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Arbitrate among masters to determine who gets to access a given
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// channel
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARBITRATE_REQUESTS&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// This is done using a couple of variables.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// request[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is true if master N is requesting to access slave
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	M.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// requested[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if some other master, prior to N, has requested
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	channel M.  This creates a basic priority arbiter,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	such that lower numbered masters get access before
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	a greater numbered master
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// grant[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if a grant has been made for master N to access
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	slave channel M
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// mgrant[N]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if master N has been granted access to some slave
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	channel, any channel.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// mindex[N]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is the number of the slave channel that master
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	N has been given access to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sgrant[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if there exists some master, N, that has been
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 	granted access to this slave, hence grant[N][M] must
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	also be true
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sindex[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is the index of the master that has access to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	slave M, assuming sgrant[M].  Hence, if sgrant[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	then grant[sindex[M]][M] must be true
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before assigning any slaves to a given master, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
needs to know whether any current connection needs to remain connected and
unchanged.  In other words, if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has already been granted
access to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, has master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; finished its business with that slave?
For that, we’ll check if this master is making additional requests of
the same slave that it has already been assigned to.  In the simple check below,
we check every master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and every slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;.  If a grant has already been
made between master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, and a new transaction request from
that same master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is being made to the same slave slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, then we want
to maintain this connection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s only the first reason why we might wish to stay on the channel and
maintain a given grant.  The other reason why we’d want to maintain a given
grant is if we are still expecting returns from it.&lt;/p&gt;

&lt;p&gt;Handling this requires counting the number of transactions that have been
issued, minus the number of acknowledgments that have been returned.  A
variable &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N]&lt;/code&gt;, set from the master’s perspective, contains whether
this count is zero or not.  Hence if this master has never been granted
access to a slave, or if a grant has been made but we’re still waiting
for responses, then we need to &lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to determine if the requested channel is even available.
In this case, if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is requesting channel &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, that is if
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[N][iM]&lt;/code&gt; is true, and no other master has currently been granted access
to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt; is false, and no other (prior) masters
are also requesting this channel, indicated when &lt;code class=&quot;highlighter-rouge&quot;&gt;requested[N][iM]&lt;/code&gt; is low,
then this channel is available for reassignment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgrant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// The bus error channel is always available
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all of this background work, we are now ready to make a channel grant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll only ever adjust any grant given to a particular master if that master
doesn’t need to &lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;.  In that case, the master can be granted
access to any channel that is available, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;requested_channel_is_available&lt;/code&gt;
is true.  Finally, if the master is attempting to make a request of another
channel, then we’ll release the channel grant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Master is requesting access to another
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// slave, one that isn&#39;t yet available.
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// Release the grant so another master
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// can use it.
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The new variable introduced here, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[N]&lt;/code&gt;, is simply the strobe signal
output coming from the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
shown in Fig. 12.&lt;/p&gt;

&lt;p&gt;Since we’ve assigned slave number &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; to reference the “no slave at that
address” channel, this simple logic above handles that grant as well.&lt;/p&gt;

&lt;p&gt;I should also point out, getting this right took several iterations, and a
bit of learning along the way.  Earlier versions of this logic, such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/c9821fe23abf19a077afe56a9ad61942ab599c4f/rtl/wbxbar.v#L260-L306&quot;&gt;this
one for example&lt;/a&gt;,
were horrendous to follow and/or maintain.  Getting the design to be
properly simple–that’s taken some work.&lt;/p&gt;

&lt;p&gt;From here on out, the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;’s
work is book-keeping.&lt;/p&gt;

&lt;p&gt;Well, not quite.  Did you notice how many clocks were required for that
processing?  One.  We calculated quite a few pieces of logic from &lt;code class=&quot;highlighter-rouge&quot;&gt;requested&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;requested_channel_is_available&lt;/code&gt;, all the way to
&lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant&lt;/code&gt; all on the same clock cycle.  Did  you catch that?
That’s a &lt;em&gt;lot&lt;/em&gt; of processing for a single clock.  As a result, the more
slaves and the more masters get connected to this
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;,
the slower it will become.  To keep this from ballooning out of control, both
the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
and the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
have configuration options to add clock cycles in order to break up the
any paths leading into to this critical path.&lt;/p&gt;

&lt;p&gt;There’s also a big difference at this point between
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
has separate channels for write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
and write data.
According to the specification, the data in these channels may arrive at any
time and in any order.  The write data, for example, might arrive first
and then the write &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
or vice versa.  However, the data cannot be routed to the correct slave until
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; is known and has
been properly decoded.  Therefore the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
must stall the write data channel, should it arrive at the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; early, until the write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
is provided, decoded, and a grant is given.  Once a grant has been provided,
it must remain active until all of the write data associated with that grant
has been accepted.  With
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;,
that means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
must wait until the &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; signal has been received before
any write grants referencing this master-slave combination may change.  With
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;,
that also means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
must wait until the write data channel has caught up to the write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
channel before adjusting any write grants.&lt;/p&gt;

&lt;h2 id=&quot;setting-the-slave-outputs&quot;&gt;Setting the slave outputs&lt;/h2&gt;

&lt;p&gt;At this point, all the difficult processing has been done.  All that remains
is to reap the rewards from this hard work.&lt;/p&gt;

&lt;p&gt;For example, we can now set our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
outputs to drive the various slaves.  To do this, we’ll loop through
every slave channel, and adjust the associated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
information any time the channel isn’t stalled.  Further, we’ll use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[N]&lt;/code&gt;, the slave’s index array indicating which master is associated
with this slave, to set these values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Values can change any time the slave isn&#39;t stalled
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_swe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_saddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_sdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_ssel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These particular values, however, are the easy ones: they aren’t the control
signal values, but rather the values that are qualified by the control signal
values themselves.  As a result, if the valid signal (&lt;code class=&quot;highlighter-rouge&quot;&gt;o_sstb[M]&lt;/code&gt; for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; for
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;)
is low, these become don’t care values.&lt;/p&gt;

&lt;p&gt;The control signals are a touch more complicated.&lt;/p&gt;

&lt;p&gt;First, in order to support a bus abort capability, we abort any transaction
following either a reset or a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
return from the slave.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step of implementing the bus abort is to drop the slave’s
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
cycle line any time the master drops his.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if we aren’t aborting a transaction and a grant has been made then
we must be in the middle of a valid transaction.  The slave’s cycle line
needs to be set to reflect that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The strobe signal is more complicated.&lt;/p&gt;

&lt;p&gt;As you may remember, the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
strobe signal indicates a transaction request, whether for read or write, and
that it is roughly analogous to the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;)
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; signals.  The first rule of any request is that the request cannot
change as long as another one is outstanding.  For this reason, we wrap the
control logic so that any time &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sstb[M] &amp;amp;&amp;amp; s_stall[M]&lt;/code&gt;, that is any time
the slaves strobe and stall signals are both high, nothing gets changed.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;(!o_sstb[M] || !s_stall[M])&lt;/code&gt; just reflects the opposite using
&lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&quot;&gt;De Morgan’s laws&lt;/a&gt;, such
that &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
values may legitimately be changed without dropping any requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was the easy part.&lt;/p&gt;

&lt;p&gt;The difficult part about the strobe signal is that we can’t just set it to
the master’s strobe input, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[sindex[M]]&lt;/code&gt;.  We have to first check that
the master is still requesting this particular slave, such that
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[sindex[M]][M]&lt;/code&gt; is still true.  Remember, one of the bugs we are hoping
to fix by creating this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
is associated with a master accessing a second
slave before the first has had a chance to respond.  In this case, we can
check both by simply checking &lt;code class=&quot;highlighter-rouge&quot;&gt;request[sindex[M]][M]&lt;/code&gt; since the request
signal will never be high unless &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[sindex[M]]&lt;/code&gt; is also high.&lt;/p&gt;

&lt;p&gt;The unusual requirement is that we also need to check that the channel isn’t
already too full.  Remember the comment about using counters to count
transactions, and the requirement that the counters cannot overflow?  If the
counter is about to overflow, then the channel is full.  We can’t issue
another transaction in that case, but rather need to wait for some returns
to come back first.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;					&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if there’s been no grant to this slave at all, then both cycle line
and strobe line’s can be cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve now decoded the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;,
and connected the slave to the master requesting
a connection.  We’ve even sent the details of the request to the slave.  What
we haven’t done is return any of the details from the slave back to the master.
That’s the next step.&lt;/p&gt;

&lt;h2 id=&quot;returning-values-to-the-master&quot;&gt;Returning values to the master&lt;/h2&gt;

&lt;p&gt;There are two types of values that need to be returned to the master.  The
first is are the acknowledgments and data returned from the slave.  With
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
these are easy.  We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[]&lt;/code&gt; as a pointer to just
copy the slave’s return values to the master.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_mdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The stall signal is a bit more involved, just because there are more reasons
why we might stall.  We default the stall signal to one, then allow it to be
cleared &lt;em&gt;if&lt;/em&gt; the we have an active grant to a given slave, &lt;em&gt;and&lt;/em&gt; a request to
that slave, &lt;em&gt;and&lt;/em&gt; if that slave isn’t also stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;// Possibly lower the stall signal
&lt;/span&gt;					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
					    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if the channel is full–that is if our counter is near rolling over,
then we need to stall this channel as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As with many things, there are exceptions.&lt;/p&gt;

&lt;p&gt;For example, if the master has requested a non-existent
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;, or if
the transaction has timed out, then we need clear the stall line, accept
a transaction, and return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, this timeout signal only works because of the bus &lt;em&gt;abort&lt;/em&gt; capability
implemented within the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB standard&lt;/a&gt;
I use.  It doesn’t work on the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Finally, if the master drops his cycle line, aborting any ongoing transactions,
then we need to make certain that nothing more gets returned.  Any ongoing
transactions will be left in an undetermined state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use this bus abort capability primarily for two reasons.  First, following
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the master will naturally want to abort any ongoing transactions.  This
implementation was chosen from the perspective of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
If a software program receives a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; doesn’t really
care what other transactions might succeed or fail–the software program has
already failed.  This simplifies the cleanup.  The same is true of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;:
following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the correct answer is to abort any efforts at further transactions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
however, doesn’t have a way of signaling a bus abort condition, nor does
it have a way of implementing one: every transaction request &lt;em&gt;must&lt;/em&gt; receive a
response.  This includes burst read responses as well–the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
bus is still required to return every beat of a burst read response even if all
of them will indicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;This lack of a bus abort makes implementing a timeout difficult.  Imagine, if
you will, that the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
detects a broken channel.  Perhaps the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave&lt;/a&gt;
has failed to return a response, or perhaps that response is to an
ID for which nothing is pending, or perhaps it sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;xLAST&lt;/code&gt; flag too early,
either way, there’s no way to recover since there’s no way to indicate to the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave&lt;/a&gt; that the master
wishes to discard anything it might still wish to respond to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; doesn’t have that
problem since all the master needs to do is to deassert the cycle line
for the slave to know to reset any transactions in progress.&lt;/p&gt;

&lt;p&gt;The way to handle this properly is to assign a timeout counter to every
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; burst.  Then, if the
slave fails to respond or responds inappropriately, &lt;em&gt;every response following&lt;/em&gt;
is to be held as an error.  This is how my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt;
worked initially.  The reason for this approach is simply that there’s no way
to know if a response, following an error of some type, is to be treated as a
valid response or a continuation of the fault.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that there’s no way to recover.&lt;/p&gt;

&lt;p&gt;This is why I went back and updated the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt;
to add to it the ability to reset the entire (broken) downstream core, using
the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; signal.  Once the downstream slave then comes back from
the reset condition, it is reattached to the bus.  Until that time, as long
as it is either in the fault condition or in the reset condition, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI
bus fault
isolator&lt;/a&gt;
simply returns &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s for every transaction
request.&lt;/p&gt;

&lt;h2 id=&quot;composing-slave-and-master-properties&quot;&gt;Composing slave and master properties&lt;/h2&gt;

&lt;p&gt;The last step of the &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
design process was to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; that the design
worked, or equivalently to verify that it still worked following any changes.
Changes?  Yes, I made a lot of changes along the way, especially as I learned
more and more about how to do this.&lt;/p&gt;

&lt;p&gt;The first and easy step in this process was to connect a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
bus property file to every connection coming in or going out of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;,
as shown in Fig. 13.  We’ve already discussed this property file for both
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; and
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; on the blog.
In general, having such a file makes it really easy to verify that a given
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component obeys the rules of the road.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 13.  Bus property files are connected to each of the input and output buses&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/composing-bus-properties.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The difficult part of this task is
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.  In
order to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
the internal state variables of each formal property file need to be
related to the registers within the design, and to the state variables found
in each of the other formal property files.&lt;/p&gt;

&lt;p&gt;For example, consider the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; bus.
The &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal property file&lt;/a&gt;
maintains a counter of outstanding transactions in order to be able to make
certain that 1) every request gets a response, and 2) that no responses are
issued without a prior request.  These counters need to be matched.  For
example, suppose master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is connected to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, so that &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N][M]&lt;/code&gt;
is true.  In that case, the number of outstanding transactions from the
perspective of the master must be matched to the outstanding transactions
counter within the slave.&lt;/p&gt;

&lt;p&gt;This isn’t as trivial as it sounds.&lt;/p&gt;

&lt;p&gt;Transactions issued by the master might be waiting in the decoder.  Similarly,
transactions in any
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
need to be counted.  In the end, you need to have an assertion that
one value, based upon the master’s transaction counter, equals a similar
value based upon the slave’s transaction counter.&lt;/p&gt;

&lt;p&gt;Let’s see if we can make any sense of how this is done.  Within
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;this design&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_moutstanding[N]&lt;/code&gt; is the counter containing the number of outstanding
transactions from the perspective of the master, and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_soutstanding[M]&lt;/code&gt;
contains the same counter from the perspective of the slave.&lt;/p&gt;

&lt;p&gt;The check itself is done across all masters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_OUTSTANDING&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step is to make certain that the master’s transaction count includes
at least enough to keep our arithmetic from overflowing.  This means that
if there’s a valid transaction coming out of the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;decoder&lt;/a&gt;,
and if the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;decoder&lt;/a&gt;
outputs were registered, then it must be accounted for in the master’s count.
Similarly, if the return response is being buffered, then there must be
a value in the master’s counter accounting for the valid value in that
buffer as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_moutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_BUFFER_DECODER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_DBLBUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now subtract these two values from the master’s counter to create
a new value, &lt;code class=&quot;highlighter-rouge&quot;&gt;n_outstanding&lt;/code&gt;, containing the number of transactions that have
been sent to the slave.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;n_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_moutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_BUFFER_DECODER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_DBLBUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step is to match this count to the slave’s count.  So, we’ll
loop through all possible slave connections.  For any bus master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
connected to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, this number of outstanding transactions is required
to match the number of outstanding slave transactions.  Well, almost.  The
slave hasn’t yet counted any transaction it hasn’t yet accepted.  It might
also be that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_scyc[iM]&lt;/code&gt; (the slave’s cycle line) is low, or an error
received and so the slave has aborted its transaction but the master hasn’t
yet aborted it, etc., etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_serr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_outstanding&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_soutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key here is that this assertion &lt;em&gt;must be an assertion of equality&lt;/em&gt;.
If the two counters are not related to each other &lt;em&gt;exactly&lt;/em&gt;, the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine is guaranteed to fail.  (I should know–I keep trying to use inequalities
for this check, and then getting corrected by the solver.)&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
this check is just a touch more involved.  Unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
there’s no bus abort.  Unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; which has only
the one counter, 
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; requires
counters for the number of outstanding read transactions, write address
and write data transactions.
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt; has even more state
to track, in order to make certain that the number of transactions with a
given ID, and the number of beats per burst, all match the data within the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;’s internal registers.&lt;/p&gt;

&lt;h2 id=&quot;crossbar-options&quot;&gt;Crossbar Options&lt;/h2&gt;

&lt;p&gt;One of the annoying realities of these separate
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s
is the options
they can be configured with.  Sure, there’s the easy options: the number of
masters, &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt;, and the number of slaves, &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;, are both configurable.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; ranges
of the various slaves are configurable as well.  Further, as you’ve gathered
from above, the size of the counters used to determine how many transactions
are outstanding is also adjustable.  The size of this counter is controlled
by the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;LGMAXBURST&lt;/code&gt;.  After that, though, I started to get greedy.&lt;/p&gt;

&lt;p&gt;The first option I created was the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; option.  This option is
common to all three of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.  The jury is still
out regarding whether this is useful or not (I haven’t measured it), however
many bus lines can travel long distances on a chip.  If the lines can be held
at zero any time they are not in use, that is any time &lt;code class=&quot;highlighter-rouge&quot;&gt;cyc&lt;/code&gt; is zero for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; is zero
for &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;, then no energy
needs to be spent to charge those
lines.  This comes at the cost of extra required logic, but I still think it
might help lower the overall power required.  I’m looking forward to measuring
if this has any effect.&lt;/p&gt;

&lt;p&gt;For the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB
crossbar&lt;/a&gt;,
there’s also an option to register the return values from the
slave, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DBLBUFFER&lt;/code&gt;.  There’s also the option of setting a timeout,
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_TIMEOUT&lt;/code&gt;, so that any return
that doesn’t come back in time for the timeout can be turned into an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
and a subsequent bus abort.  Here, I got greedy again.  I added an additional
register to control whether or not a request should timeout &lt;em&gt;before&lt;/em&gt; it even
gets to the slave.  This I call a starvation timeout, and its an indication
that a particular master isn’t getting access to the slave fast enough.
Perhaps another master is hogging the slave.  Perhaps it’s a well used slave
and this master doesn’t have enough of a priority.  Either way, with the
starvation timeout parameter set, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_STARVATION_TIMEOUT=1&#39;b1&lt;/code&gt;, each master
will be guaranteed a return in a fixed and known number of time-steps.&lt;/p&gt;

&lt;p&gt;If only I could do that with
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.
Although I haven’t done that with the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite
crossbar&lt;/a&gt;,
that might be easy enough to be doable still.&lt;/p&gt;

&lt;p&gt;One of the parameters the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; share that the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;
doesn’t have is a linger option, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LINGER&lt;/code&gt;.  The idea behind this option is
that if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has just finished talking to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, then that connection
is likely to be needed again in the near future.  Once the channel becomes
idle, therefore, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
will wait &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LINGER&lt;/code&gt; clocks before removing the grant.  If master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; wants
to talk to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; again, the grant is already there waiting for him and
he won’t have to wait for it.  Of course, it will
only linger if no other master wants access to this particular slave.  This is
therefore a useful, though optional, configuration parameter which might
impact performance.&lt;/p&gt;

&lt;p&gt;Of course, the sad reality of any of these options is that the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; really needs to be
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified&lt;/a&gt;
for every possible parameter setting.  Hence verifying the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;
requires 48 proofs (36 assertion based, 12 cover based), whereas the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;
requires 12 proofs (6 assertion based, 6 cover based).  The full
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI crossbar&lt;/a&gt;,
as currently configured, requires 8 assertion based proofs.  This is really
incomplete, since it doesn’t (yet) have a set of cover-based proofs
to show that not only will it not violate any properties, but that it can
actually properly complete transactions in the first place.  For now, though,
you can just consider this last piece a work in progress–even though I’ve
done enough testing with various &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; checks to be confident that
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt;,
would work.&lt;/p&gt;

&lt;h2 id=&quot;xilinxs-interconnect&quot;&gt;Xilinx’s Interconnect&lt;/h2&gt;

&lt;p&gt;Once I had formally verified my own
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;, I became curious
about how hard it might be to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s AXI
interconnect&lt;/a&gt;.
If you check out Vivado’s IP Catalog, you’ll find an entry for a
&lt;code class=&quot;highlighter-rouge&quot;&gt;AXI interconnect RTL&lt;/code&gt; which, when instantiated, will create a Verilog copy
of their &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;their
interconnect&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Xilinx offers an interconnect in their IP catalog&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/xilinx-intercon-ip.png&quot; alt=&quot;&quot; width=&quot;781&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I spent some time looking through this (after I’d built &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my
own&lt;/a&gt;)
and I’ve learned a lot from it.&lt;/p&gt;

&lt;p&gt;First, they have two different types of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;
implemented.  The first type offers grants to slaves based upon read or write
requests.  This is different from my own grants above which are based upon
either write requests or read requests.  In other words, if you request
to read from a peripheral from this first type of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;, you’ll get a
write grant as well.  It’s not yet clear to me what will happen if you request
both read and write grants at the same time, though.  This particular
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; ignores the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt;
values when routing–much like &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my
own&lt;/a&gt;.  Not only
that, this version of Xilinx’s
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; might easily
mask the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt; bugs found
in their demonstration slave core.&lt;/p&gt;

&lt;p&gt;The other type of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
they support grants access to both read and write requests separately, and
uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt; field to route the returns back to the slave that requested
the transaction.  This was how I had always thought an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
interconnect&lt;/a&gt; would
be created–that is, until I tried building my own.  The reason why I don’t
route bus returns based upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;RID&lt;/code&gt; fields is simply because you’d
need another
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;–this
time for the return channel.  The first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
already costs a minimum of two clock cycles of latency.  This second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
would need to consume a similar amount of resources on the return.  Adding
four clocks to every transaction seems excessive.  So, while it’s doable,
I didn’t find it worth the performance cost.&lt;/p&gt;

&lt;p&gt;The other thing I found while browsing Xilinx’s
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; code, were a large
number of translators that could bridge from one bus type to another.  Their
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
it seems is capable of instantiating &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain
crossing&lt;/a&gt; bridges, bridging from
AXI3 to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; with one size
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt; values to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; with
another, and so on.  It’s quite configurable, although the small budget
hobbyist should beware: each of these translations costs resources within
your design.&lt;/p&gt;

&lt;p&gt;Of those bridges, the one that surprised me was the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; to
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; bridge.
Whereas &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; is a
very capable protocol, capable of high speed operation just as fast if not
faster than the full &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;
protocol, Xilinx’s bridge code crippled the
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; generated
transactions so that no more than one read or one write would ever be
outstanding at any given time.  The bridge also cost several clock cycles,
which is unusual since an
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; transaction can be
created from an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
transaction by &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;fixing and ignoring the unused
fields&lt;/a&gt;.
No matter how I looked it over, I couldn’t see any reason for building their
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; to
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; bridge in this
fashion.&lt;/p&gt;

&lt;p&gt;Perhaps this explains why the bugs in their
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
demonstration core have gone unnoticed for so long?&lt;/p&gt;

&lt;p&gt;The sad reality, however, of both of these observations is that some day
Xilinx will update &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;their
interconnect&lt;/a&gt;,
and all of a sudden a lot of &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
slaves&lt;/a&gt;, written based upon
their &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;demonstration code&lt;/a&gt;,
will start failing.&lt;/p&gt;

&lt;p&gt;I guess that means that if you haven’t started
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
your
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components, you should start doing so now.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Building your own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar interconnect&lt;/a&gt;
may be intense, but it is certainly possible to do.  I will say this, though,
I’m not sure I could’ve done it without the formal property files for either
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
or the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; protocols.&lt;/p&gt;

&lt;p&gt;I should also mention that the proofs themselves aren’t necessarily all that
fast to accomplish.  While the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools can often find bugs quickly, proving that there are no bugs can be much
harder.  As a result, my initial development on each of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbars&lt;/a&gt; was
pretty quick.  It then slowed down.  At one point, it took over 50 hours
to verify the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt; in one
of its configurations.  Creating submodules to contain the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s really helped,
dropping the maximum proof time down to 22 minutes.  Sure, it takes time, but
it’s quite doable.&lt;/p&gt;

&lt;p&gt;The biggest thing I haven’t discussed about full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar interconnects&lt;/a&gt;
is their logic cost.  That full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar&lt;/a&gt;
doesn’t come cheap, and certainly not for any sizable number of masters or
slaves.  Worse, the cost doesn’t scale linearly as the number of masters or
slaves increases.  Instead of opening that discussion now, let me simply invite
you to take any of the arbiters discussed here and to build it using
&lt;a href=&quot;&quot;&gt;Yosys&lt;/a&gt;
to see how much it will cost as you vary the parameters.&lt;/p&gt;

&lt;p&gt;Finally, I would still like to come back to this topic and walk through some
of my brand new &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
cores: the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;AXI to AXI-lite bridge&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;AXI-lite to AXI bridge&lt;/a&gt;, or perhaps even the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to AXI&lt;/a&gt;
bridge that I use to get high speed access to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt; memory.  These we’ll do
&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/6/3&quot;&gt;if the Lord permits&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Thus saith the LORD, Stand ye in the ways, and see, and ask for the old paths, where is the good way, and walk therein, and ye shall find rest for your souls. But they said, We will not walk therein.  (Jer 6:16)&lt;/em&gt;</description>
        <pubDate>Wed, 17 Jul 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/07/17/crossbar.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/07/17/crossbar.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
