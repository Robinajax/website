<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Feb 2019 16:12:10 -0500</pubDate>
    <lastBuildDate>Mon, 04 Feb 2019 16:12:10 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Debugging a CPU</title>
        <description>This is the story of finding a bug in the [ZipCPU](/about/zipcpu.html).

It starts much like any other
[FPGA](https://en.wikipedia.org/wiki/Field-programmable_gate_array)
story: somewhere else.

&lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;CAPTION&gt;Fig 1. Digilent&#39;s Arty Board&lt;/CAPTION&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG SRC=&quot;/img/arty-board.png&quot; ALT=&quot;&quot; WIDTH=&quot;360&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

Some time ago, [Digilent](https://store.digilentinc.com) replaced the [flash](https://en.wikipedia.org/wiki/Flash_memory)
chip within their
[Arty](https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists)
[FPGA](https://en.wikipedia.org/wiki/Field-programmable_gate_array) board.
They also created a line of new
[FPGA](https://en.wikipedia.org/wiki/Field-programmable_gate_array)
boards, so my
[Arty](https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists)
board has now been
rebranded as the
[Arty A7](https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists).  I never realized there was a difference until
[someone wrote to tell me the design didn&#39;t work
anymore](https://github.com/ZipCPU/openarty/issues/2).  With a
[little bit of digging](https://forum.digilentinc.com/topic/16908-arty-a7-flash-chip),
he and I discovered that the [flash](https://en.wikipedia.org/wiki/Flash_memory) chip had changed.  The new [flash](https://en.wikipedia.org/wiki/Flash_memory)
chip wasn&#39;t just another chip from the same vendor, it was now from a
different vendor entirely: from
[Micron](https://www.micron.com/~/media/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf)
to Spansion.

This broke my old [flash controller](https://opencores.org/project/qspiflash).

Not a problem, I thought to my self, I was hoping to write a blog article on
how to build a [Universal Quad SPI flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v).
This [new controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v) needed to be tested and proven in real hardware.  Let me just place
this [universal
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)
into my [OpenArty](https://github.com/ZipCPU/openarty) design and then all
shall be well.  Indeed, all shall be better: my [universal Quad SPI flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)
runs at twice the speed.  This will be a nice upgrade!

But what about the differences between the two
[flash](https://en.wikipedia.org/wiki/Flash_memory) chips?  I can use
[AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html)
to help me select between configurations of this [universal flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v).

&lt;TABLE align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;CAPTION&gt;Fig 2. Original OpenArty Design&lt;/CAPTION&gt;&lt;TR&gt;&lt;TD&gt;&lt;A HREF=&quot;/img/openarty.svg&quot;&gt;&lt;IMG SRC=&quot;/img/openarty.svg&quot; ALT=&quot;&quot; WIDTH=&quot;400&quot;&gt;&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;
The only problem is that the [OpenArty](https://github.com/ZipCPU/openarty)
design wasn&#39;t an
[AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html) design
to begin with.
Ok, that&#39;s not really a problem, we can update the
[OpenArty](https://github.com/ZipCPU/openarty) design so that it
uses [AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html).
That will make it even easier to test my [HyperRAM
controller](https://github.com/ZipCPU/wbhyperram)
as part of my [OpenArty](https://github.com/ZipCPU/openarty) project as well.

The next problem is that the original
[OpenArty](https://github.com/ZipCPU/openarty) design requires an [external
serial port](https://store.digilentinc.com/pmod-usbuart-usb-to-uart-interface/)
in addition to the one on the board.  This may have kept folks from using the
design, and so my newer designs have been multiplexing a console port onto the
serial debugging port.  This is a fairly simple upgrade, so we can do that too.

Further, when I was struggling to get the
[flash controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)
working, I had just had a bad experience with the [ZipCPU](/about/zipcpu.html) on the iCE40s that had
[forced me to change my default linker script(s)](/zipcpu/2018/12/22/autofpga-ld.html).  After a quick upgrade to [AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html), it now [supports multiple custom
linker scripts](/zipcpu/2018/12/22/autofpga-ld.html),
but that now meant that the
[bootloader](/zipcpu/2018/02/12/zbasic-intro.html)
needed to change as well.

Other things had changed and needed to be updated as well.  For example, the
[ZipCPU](/about/zipcpu.html) had now been
[formally verified](/blog/2017/10/19/formal-intro.html).  I
found a [lot of bugs in that
process](/blog/2018/04/02/formal-cpu-bugs.html) some time ago,
and so I was excited to be updating the design with the new
[formally verified](/blog/2017/10/19/formal-intro.html)
[CPU](/about/zipcpu.html).

In the middle of this, I chose to switch to Vivado 2018.3 from Vivado 2016.3.

Is this starting to sound all too familiar?

Years ago, when I studied Software Engineering, we would call each of these a
[&quot;Small matter of Programming&quot; or
SMOP](https://en.wikipedia.org/wiki/Small_matter_of_programming).  This is
said in a tongue-in-cheek fashion, however, because *nothing* is truly ever a
[&quot;Small matter of
Programming&quot;](https://en.wikipedia.org/wiki/Small_matter_of_programming).  As
an engineer I also tend to (inappropriately) judge each of these changes to be
small and simple matters.

The result was that, with so many changes, I was threatening to violate the
fundamental assumption of all debugging: &quot;There&#39;s only ever one bug in the
design.&quot;  Sure, I know, that gets violated all the time, but think about it:
most debugging methodologies can only handle one bug at a time.

So, today&#39;s blog post is about the &quot;final&quot; bug in this process, and one I
certainly wasn&#39;t expecting.

## Background

We&#39;ll pick up the story from the point where I was working on my new [flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v).
In my mind, this was the only big thing that had changed in this design:

- [The CPU](/about/zipcpu.html) hadn&#39;t significantly changed

 - [It passed its self test](/zipcpu/2018/02/12/zbasic-intro.html)

 - It now passed
   [formal verification](/blog/2017/10/19/formal-intro.html)
   in [many different
   configurations](/zipcpu/2018/12/20/sby-makefile.html).

   This verified instructions up to the input of the
   [ALU](/2017/08/11/simple-alu.html).  [All instructions
   were known to be properly performed, the pipeline timing was known to not
   drop or skip instructions, and for not inserting instructions.  Further,
   the difficult part of making sure memory instructions were not issued
   unless I was willing to commit to them had also been
   verified](/blog/2018/04/02/formal-cpu-bugs.html).

- I had just recently found and fixed the bug that had prevented [the
  CPU](/about/zipcpu.html) from
  starting at an arbitrary address.  [The
  loader](https://github.com/ZipCPU/openarty/blob/master/sw/host/zipload.html)
  could now load a program and start it from any address--not just the reset
  address.

- The [ZipCPU](/about/zipcpu.html)
  simulator is supposed to be able to load any program into the
  [ZipCPU](/about/zipcpu.html),
  bypassing the
  [loader](https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/zipload.cpp).
  This is primarily useful if you want to bypass writing to the
  [flash](https://en.wikipedia.org/wiki/Flash_memory) via the
  [flash driver](https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp)
  using the cycle-accurate [flash simulator](https://github.com/ZipCPU/blob/autoarty/sim/verilated/flashsim.cpp),
  when you didn&#39;t expect a bug in the
  [flash](https://en.wikipedia.org/wiki/Flash_memory) interaction.
  Why wait to program the 
  [flash](https://en.wikipedia.org/wiki/Flash_memory)?
  The only problem was that this simulation loader had a bug in
  it that kept it from starting [ZipCPU](/about/zipcpu.html)
  at any address, restricting it to starting from the reset address only.

  This bug had now been found and fixed, and the &quot;WARNING&quot; statement indicating
  the presence of the bug has been removed.

- [The CPU](/about/zipcpu.html) now has a new
  [data cache](https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v)

  This one I knew worked.  I&#39;d also
  [formally verified](/blog/2017/10/19/formal-intro.html)
  it, and ran it through
  [simulations](/blog/2018/08/22/what-is-simulation.html),
  so I could be confident that this worked.  Or ... could I?

- [The CPU](/about/zipcpu.html)
  passed its [Dhrystone](https://en.wikipedia.org/wiki/Dhrystone) tests

I knew [the CPU](/about/zipcpu.html)
was ready.  That was the easy part.

The [AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html)
updates, those were a bit harder.  I had now switched conventions
regarding how I referenced peripherals.  All peripherals at fixed addresses
now had names starting with an underscore like `_flash`, `_sdram`, `_clrleds`,
and so forth.  These all had to be changed, and so the
[OpenArty](https://github.com/ZipCPU/openarty) [ZipCPU
software](https://github.com/ZipCPU/openarty/tree/master/sw/board) all
needed to be adjusted.

I also wanted to bring up the
[Arty](https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists)
with fewer capabilities--just to work one by
one through them.  This meant a limited
[AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html)
build, but it also broke many of the programs that now depended upon
non-existant hardware registers--since they weren&#39;t part of the limited
build.  This was easily fixed through the per-component `#define` macros
provided by
[AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html), but
it still required software to be updated to use those macros.

That brought me to the [new flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v).
I knew this [flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)
was ready, but not yet hardware proven.  That was okay, since I was going to
use this opportunity to verify my [new universal QSPI flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)
worked on real hardware, to finish testing the [driver for
it](https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp)
and to blog about it next.  I just needed to get it working--at 2x the clock
and data speeds.  I expected this to take a bit of work.

Indeed, the [flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)
took a lot of work.  I struggled to [read and understand the timing of
both Xilinx&#39;s `IDDR` and `ODDR`
modules](https://www.xilinx.com/support/documentation/user_guides/ug471_7Series_SelectIO.pdf).
I was struggling with things like the
[flash](https://en.wikipedia.org/wiki/Flash_memory) writing properly, but not
reading properly.  Or, perhaps worse, it would read *mostly* properly.  This
killed my
[loader](https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/zipload.cpp),
since I would write the [ZipCPU](/about/zipcpu.html)
program to the [flash](https://en.wikipedia.org/wiki/Flash_memory), and then
attempt to read my data back in order to verify
it was correctly written.  If the reads were only somewhat reliable, then my
[flash driver](https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp)
would always try to reprogram the
[flash](https://en.wikipedia.org/wiki/Flash_memory).
This reprogramming happened nearly all the time, even when reloading the same
program with the same instructions, indicating that something was broken.

This also left me wondering if
[the CPU](/about/zipcpu.html)
was reading the right program from the
[flash](https://en.wikipedia.org/wiki/Flash_memory).

For a while, I went forward with this &quot;broken&quot;
[flash controller](https://opencores.org/project/qspiflash)
anyway.

I got as far as the
[demonstration program that is designed to demonstrate the Arty&#39;s 100MHz MII
ethernet port](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c).
[This software](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
handles [ARP
transactions](https://en.wikipedia.org/wiki/Address_Resolution_Protocol), while
sending [pings](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
to a nearby host.  It&#39;s also supposed to be able to respond to a
[pings](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
request.  The program was failing.  For some reason it was locking
up mid-design.

I figured it must be a problem with my [new flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v).
Perhaps
[the CPU](/about/zipcpu.html)
was misreading its instructions from the [flash](https://en.wikipedia.org/wiki/Flash_memory).

While this post isn&#39;t about the bug in the [flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v),
that can wait for a later post, it is important that you understand what was
going on because it sets the background for what follows.  Basically, I was
able to write anything I wanted to the
[flash](https://en.wikipedia.org/wiki/Flash_memory)
without any problems, but reads were unreliable.  It might
be that they were 99.99% reliable and then there would be a bit flipped.  I
figured this could only be a timing problem, and that I was going to need
to write and blog about how to build a synchronization circuit.

In other words, when the [network
program](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
failed, I had no idea where within the design to look for the problem.

[`MAX BAXTER` from twitter](https://twitter.com/maxslug) suggested
I change the drive strength on the
[flash](https://en.wikipedia.org/wiki/Flash_memory).  The
[Micron](https://www.micron.com/~/media/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf)
[flash](https://en.wikipedia.org/wiki/Flash_memory) chip has several
control registers, among them are the Extended Volatile configuration register
and the Extended Non-Volatile configuration register.  Both of these registers
can be used to adjust the drive strength in Ohms.  (Drive strength?  Shouldn&#39;t
the units of drive strength be Amps and not Ohms?)  The first adjustment I
tried worked, and so my [flash
controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v),
was finally working!

So the [network ping
program](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
should too, right?

Wrong.

Okay, that was my last working hypothesis.  Now what&#39;s wrong?

## Symptoms

So let&#39;s start by taking stock of this situation.  My goal at this point is to
verify that the [MII Ethernet
controller](https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v)
was fully functional, even after redesigning the top level of the project to
use [AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html).

- [Flash controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)

  [My new flash controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v)
  now worked.  It could read and write the
  [flash](https://en.wikipedia.org/wiki/Flash_memory) at an SPI clock rate
  twice what it was before, and now equal to the system clock rate.
  If I wrote a design to the
  [flash](https://en.wikipedia.org/wiki/Flash_memory) at this point, I could
  read it back at any time to verify the correct design has been written.

  There were now no more differences between the data I wrote to the
  [flash](https://en.wikipedia.org/wiki/Flash_memory) and the data I read
  back out, so I figured there were no more bugs in the [flash
  controller](https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v).

&lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;CAPTION&gt;Fig 3. Packet transactions required to get a ping response&lt;/CAPTION&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG SRC=&quot;/img/ping.svg&quot; ALT=&quot;&quot; WIDTH=&quot;240&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

- My goal was to test whether or not I could send and receive packets
  via the [Ethernet port](https://en.wikipedia.org/wiki/Ethernet).

  I have a [&quot;manual&quot; approach to sending a packet and receiving a
  packet](https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp).
  This doesn&#39;t use the [ZipCPU](/about/zipcpu.html) at all,
  but rather controls the [networking
  device](https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v)
  through the
  [debugging port](/blog/2017/06/16/dbg-bus-forest.html).
  I could even do this via a shell script if I wanted--only it&#39;s harder to
  calculate/verify a CRC from a shell script.  Indeed, this [manual ping
  program](https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp)
  was how I originally built and tested the [network
  controller](https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v).

  This [manual approach](https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp)
  isn&#39;t very useful for debugging a
  [ping](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
  interaction, though, since a proper
  [ping](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
  exchange requires an [ARP
  request](https://en.wikipedia.org/wiki/Address_Resolution_Protocol), then
  an [ARP response](https://en.wikipedia.org/wiki/Address_Resolution_Protocol),
  followed by sending the [ping packet](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
  itself, as shown in Fig 3 on the right.  The [manual
  approach](https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp)
  sends one packet and then waits until the first response is received.  This
  isn&#39;t enough to get a [ping
  response](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
  from my host machine.

  What I really wanted to know, was whether the [ping
  response](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
  was received from my host machine.  Once my desktop/host receives the [ping
  request](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
  from my [Arty](https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists)
  board, it then needs to send an
  [ARP request](https://en.wikipedia.org/wiki/Address_Resolution_Protocol) to
  my board, get an
  [ARP response](https://en.wikipedia.org/wiki/Address_Resolution_Protocol),
  and then finally return the
  [ping](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol).

  That&#39;s a lot of network transactions that are required just to implement a
  [ping](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol).

  The good news is that you can debug what goes over the channel using
  [Wireshark](https://www.wireshark.org).  Using
  [Wireshark](https://www.wireshark.org), I discovered ...

  1. That the network wasn&#39;t working at all initially.  I traced this down to
     a failure to send the reference clock to the PHY chip in the
     [Arty](https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists).

  2. That the [MAC address](https://en.wikipedia.org/wiki/MAC_address)
     from my device was being left at zero.  I traced this down to what might
     be a compiler issue.  (I&#39;ll need to come back to this, as it&#39;s been &quot;fixed&quot;
     but hasn&#39;t been fully chased down.)

  3. That my host computer is sending
     [ARP responses](https://en.wikipedia.org/wiki/Address_Resolution_Protocol),
     but that they aren&#39;t getting properly
     received.

  These could all be fixed fairly easily, once I realized what was taking place.
  Fixing these issues got me further along, just not quite there.

- Eventually, the [ZipCPU](/about/zipcpu.html) system
  hangs and stops running.

  I could tell this by using [global
  variables](https://en.wikipedia.org/wiki/Global_variable).

  As you may recall, I can [read and write any value within
  my design](/blog/2017/06/29/sw-dbg-interface.html)
  using `wbregs`.  The `wbregs` using in the
  [OpenArty](https://github.com/ZipCPU/openarty) distribution accepts an
  optional parameter telling it where to find a map file defining where all the
  variables are in memory.  The map file itself is generated by the linker,
  so there&#39;s no extra work in that part.  As an example, I can read the
  variable `user_heartbeats` by running,

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;wbregs -m simple_ping.map user_heartbeats&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  I knew my program had stopped once this number had stopped incrementing.
  This is also how I can (somewhat) tell what&#39;s going on within my design even
  while a program is running, without needing to stop it.

- When the [ZipCPU](/about/zipcpu.html) hung, the
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html)
  also failed.  Indeed, if you bring up the
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html),
  it hangs waiting for the
  [ZipCPU](/about/zipcpu.html) to respond to it.

  This is disappointing.
  [The CPU](/about/zipcpu.html)
  isn&#39;t supposed to work like that.

  During this time, I can reset
  [the CPU](/about/zipcpu.html)
  to get into the
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html),
  but doing so causes the system flags and the
  [program counter](https://en.wikipedia.org/wiki/Program_counter)
  to get reset.  Hence, I can&#39;t tell if
  [the CPU](/about/zipcpu.html)
  was in [supervisor mode or user
  mode](/zipcpu/2018/01/01/zipcpu-isa.html) when it crashed,
  nor if it was in
  [supervisor mode](/zipcpu/2018/01/01/zipcpu-isa.html)
  could I tell what the [program
  counter](https://en.wikipedia.org/wiki/Program_counter) was set to.

  Looking at the [user
  space](/zipcpu/2018/01/01/zipcpu-isa.html)
  [program counter](https://en.wikipedia.org/wiki/Program_counter)
  suggested that the
  [user space](/zipcpu/2018/01/01/zipcpu-isa.html)
  program always stopped at a compressed instruction.  Had I looked closer,
  I might have noticed that it wasn&#39;t always stopping at the same compressed
  instruction and realized the bug.

  I wrote this evidence off as not clear enough to use.

Ever been in this situation?

Now let me ask, how would you approach debugging this issue?

## Examining the tools

Let&#39;s take a quick look at the tools we have available to work with to find
this bug.

- Often the first method I turn to when I have a bug like this is &quot;Voodoo
  computing.&quot;

  &gt; Defn: Voodoo Computer
  &gt;
  &gt; To change what isn&#39;t broken, in an effort to fix what is

  In good voodoo programming fashion, I disabled the
  [data cache](https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v).

  It didn&#39;t help.

  I tried playing with the [network control port](https://github.com/ZipCPU/blob/autoarty/rtl/enetctrl.v).

  It didn&#39;t help either.

  In many ways, most of the on-line forum requests I find, on either Digilent&#39;s
  or Xilinx&#39;s site, are Voodoo programming requests.  &quot;I don&#39;t know what&#39;s
  going on, so I changed something I didn&#39;t understand, and now my design
  still doesn&#39;t work.&quot;

  Sure, &quot;Voodoo computing&quot; feels good, but it rarely leads you any closer to
  understanding what is going on within the design.  On the other hand, your
  likelihood of success with Voodoo computer is still better than your
  likelihood of winning the lottery.

- The other end of the spectrum of bug-fixing approaches is to guarantee that
  you never have the bug in the first place.  That&#39;s the purpose of both [formal
  verification](/blog/2017/10/19/formal-intro.html) and
  [simulation](/blog/2018/08/22/what-is-simulation.html).

  [My CPU](/about/zipcpu.html)
  [passed both formal
  verification](/blog/2018/04/02/formal-cpu-bugs.html)
  and [simulation](/zipcpu/2018/02/12/zbasic-intro.html),
  but was still failing in this instance.

  Now what?  I went back and double checked the proof of
  [the CPU](/about/zipcpu.html) and the
  network control interface.  They still passed.

  &gt; While you might be able to
  &gt; [simulate](/zipcpu/2018/02/12/zbasic-intro.html)
  &gt; a commercial CPU, it is unlikely that you&#39;ll ever be able to
  &gt; get access to the code or formal properties necessary to [formally
  &gt; verify](/blog/2017/10/19/formal-intro.html) one.

- As I mentioned above, the [ZipCPU](/about/zipcpu.html)
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html)
  fails

  Normally, I&#39;d try to see what&#39;s going on within the
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html).
  However, a failing
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html)
  doesn&#39;t help much.

  &gt; Most commercial CPU&#39;s have a debugger you can use.  Sometimes it helps.
  &gt; Often, as in this case, it doesn&#39;t since few debuggers can examine a
  &gt; program struggling with interrupt and non-interrupt contexts.

- [Global Variables](https://en.wikipedia.org/wiki/Global_variable)

  My [simple_ping](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
  program contains a variety of [global
  variables](https://en.wikipedia.org/wiki/Global_variable).

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pkts_received&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replies_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_requests_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;arp_pkt_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_pkt_invalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;arp_missed_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_non_broadcast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ip_pkts_received&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_pkts_invalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;icmp_echo_requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icmp_invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ping_reply_address_not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ping_replies_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ping_reply_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_tx_packets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;user_heartbeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  I do this on purpose.  Each of these particular variables is a
  counter of some type.  I can then use them to see if or when things
  are happening with [the CPU](/about/zipcpu.html) or not.

  By compiling my [simple_ping](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
  program with the linker flag, `-Wl,-Map=simple_ping.map`, the linker will
  then create a file for me containing the final addresses of all these
  [global variables](https://en.wikipedia.org/wiki/Global_variable).  Indeed,
  this is the very reason why they are
  *[global](https://en.wikipedia.org/wiki/Global_variable)* and not
  *[local](https://en.wikipedia.org/Local_variable)*
  variables: so that they will have a fixed address in memory.

  If you scroll through this map file, you&#39;ll find lines looking like,

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; .bss           0x000000000700c490       0x68 obj-zip/simple_ping.o
                0x000000000700c490                gbl_picv
                0x000000000700c494                subbeats
                0x000000000700c498                heartbeats
                0x000000000700c49c                pkt_id
                0x000000000700c4a0                router_mac_addr
                0x000000000700c4a8                ping_rx_count
                0x000000000700c4ac                ping_tx_count
                0x000000000700c4b0                ping_mac_addr
                0x000000000700c4b8                user_heartbeats
                0x000000000700c4bc                user_tx_packets
                0x000000000700c4c0                ping_reply_err
                0x000000000700c4c4                ping_replies_sent&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  These lines are created as the linker places the
  [simple_ping](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
  object file into my executable.  At that time, these variables can be found
  within the
  [BSS segment](https://en.wikipedia.org/wiki/.bss).
  Once these values are placed within the final executable, their addresses
  are then given on the left hand side, with the variables names on the right.

  Originally, I would read values from this list by looking up their addresses
  and then reading them with my [`wbregs`
  command](/blog/2017/06/29/sw-dbg-interface.html).
  This command implements a basic [peek/poke
  capability](https://en.wikipedia.org/wiki/PEEK_and_POKE)
  within the design.  The result might look something like:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./wbregs 0x0700c498
0700c498 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 00000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  This would tell me that
  [the CPU](/about/zipcpu.html)
  had never gotten to the `heartbeats++` statement, and so I could
  track down what was taking place across interrupts even--without
  needing to disturb the running [CPU](/about/zipcpu.html).

  In this case, I knew
  [the CPU](/about/zipcpu.html)
  was failing.  These [global
  variables](https://en.wikipedia.org/wiki/Global_variable) gave me a good
  idea of *where* it was failing.  I just had no idea *why* it was failing.

  &gt; This approach would work well with any CPU, commercial or otherwise,
  &gt; as long as your design has some form of
  &gt; [debugging bus](/blog/2017/06/16/dbg-bus-forest.html)
  &gt; within it.

- BREAK statements

  The [ZipCPU](/about/zipcpu.html) supports a
  [break instruction,
  `BREAK`](/zipcpu/2018/01/01/zipcpu-isa.html).
  This `BREAK` instruction takes an optional immediate value, although
  it doesn&#39;t do anything different between one immediate value and any
  other.  When
  [the CPU](/about/zipcpu.html)
  encounters a
  [`BREAK` instruction](/zipcpu/2018/01/01/zipcpu-isa.html)
  in [supervisor mode](/zipcpu/2018/01/01/zipcpu-isa.html),
  all processing halts and waits for the
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html)
  to rescue it.  If
  [the CPU](/about/zipcpu.html)
  encounters a
  [`BREAK` instruction](/zipcpu/2018/01/01/zipcpu-isa.html)
  in [user mode](/zipcpu/2018/01/01/zipcpu-isa.html),
  you can choose to have the statement halt
  [the CPU](/about/zipcpu.html)
  (the default), or just to return to
  [supervisor mode](/zipcpu/2018/01/01/zipcpu-isa.html).

  A [`BREAK` instruction](/zipcpu/2018/01/01/zipcpu-isa.html)
  can be added to any program by just calling the `zip_break()` function from
  your C/C++ source code.  This function call is treated specially by the
  [ZipCPU](/about/zipcpu.html) GCC back end, which then
  places a [`BREAK`
  instruction](/zipcpu/2018/01/01/zipcpu-isa.html) at that
  point in the instruction stream.

  &lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;CAPTION&gt;Fig 4. Steps to Executing a Break-point&lt;/CAPTION&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG SRC=&quot;/img/breakpoint.svg&quot; ALT=&quot;&quot; WIDTH=&quot;360&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

  My intent has always been to [integrate this statement into the
  debugger](/zipcpu/2017/07/14/cpu-debugging-needs.html),
  so that the [debugger can create break points to help debug a
  program](/zipcpu/2017/07/14/cpu-debugging-needs.html).
  The debugger could then replace any user instruction with a `BREAK`
  instruction to create a breakpoint.  In order to continue,
  [the CPU](/about/zipcpu.html)
  would then return the `BREAK` instruction to its original value and then step
  forward by one instruction.  It could then replace the `BREAK`
  instruction so as to re-enable the breakpoint the next time it is seen.
  This is still on my to do list, however.

  Even without [break-point support in the
  debugger](/zipcpu/2017/07/14/cpu-debugging-needs.html),
  break points have been one of my &quot;go-to&quot; approaches to debugging.  If you
  know [the CPU](/about/zipcpu.html) hangs, you can often
  bisect your code with `BREAK` statements to slowly figure out where
  [the CPU](/about/zipcpu.html) hangs.  If it hits the
  breakpoint, then the hang must&#39;ve occurred after that instruction.

  Because the break points are not (yet) supported by the
  [debugger](/blog/zipcpu/2017/08/25/hw-debugging.html),
  though, you currently need to remove the `BREAK` instruction by recompiling
  your program and reloading it.  It&#39;s not pretty, but it works.

  In this case, the `BREAK` instruction stopped
  [the CPU](/about/zipcpu.html)
  long before the problem.  So, it didn&#39;t help (much).

  &gt; Many commercial CPUs have break point support as well.  This support
  &gt; is usually integrated into the debuggers, and unavailable from the
  &gt; compiler.  However, debuggers in general tend to struggle to handle
  &gt; designs with interrupt contexts.

- LEDs

  We&#39;ve discussed [using LEDs for debugging before](/blog/2017/05/19/blinky.html).
  [The CPU](/about/zipcpu.html)
  can set the LEDs to any particular value of interest, and you can then use
  the value of the LED register once
  [the CPU](/about/zipcpu.html)
  hangs to figure out where
  [the CPU](/about/zipcpu.html)
  hung, or in what kind of state it was in.  This is much like the
  [global variables](https://en.wikipedia.org/wiki/Global_variable) approach
  listed earlier, save that LEDs can be used without the
  [debugging bus](/blog/2017/06/29/sw-dbg-interface.html).

  In [one example](https://github.com/ZipCPU/s6soc), I set an LED on entering
  an interrupt routine and cleared it on leaving the routine.  Seeing a dimly
  lit LED was then my indication the design was still running.  In that
  example, when/if the design halted, I could clearly see what state
  [the CPU](/about/zipcpu.html)
  was in at the time.

  For this particular design, the LEDs got me closer.  Indeed, I was
  able to bisect the code down to the loop where it failed.  It just
  wasn&#39;t close enough for me to figure out where the bug was coming from.

  &gt; This approach would also work nicely when debugging with any commercial CPU

- [Watchdog timer](https://en.wikipedia.org/wiki/Watchdog_timer)

  I&#39;ve often been successful debugging a design by using a [watchdog
  timer](https://en.wikipedia.org/wiki/Watchdog_timer).  My [watchdog
  timer](https://en.wikipedia.org/wiki/Watchdog_timer) is essentially
  identical to the [ZipTimer we&#39;ve discussed
  earlier](/zipcpu/2018/04/17/ziptimer.html), with one
  critical exception: when the timer goes off,
  [the CPU](/about/zipcpu.html)
  is reset.  You can then create a special bootloader to learn something about
  what happened.

  The trick to using the [watchdog timer](https://en.wikipedia.org/wiki/Watchdog_timer) is to sprinkle your code with
  commands to set the [count-down
  timer](/zipcpu/2018/04/17/ziptimer.html)
  to some number greater than zero.  Once the timer reaches zero,
  [the CPU](/about/zipcpu.html)
  resets.  In my case, this meant that
  [the CPU](/about/zipcpu.html)
  would halt, since I had it configured to halt on reset.

  This approach may have been most useful to me when debugging my
  [S6SoC design](https://github.com/ZipCPU/s6soc), where I couldn&#39;t fit the
  [debugging bus](/blog/2017/06/29/sw-dbg-interface.html)
  into the design.  Once the [watchdog
  timer](https://en.wikipedia.org/wiki/Watchdog_timer) would go off, [the
  CPU](/about/zipcpu.html) would read out to the
  serial port the values from the internal
  [Wishbone Scope](/blog/2017/07/08/getting-started-with-wbscope.html).
  The [routine to do this was carefully hand-crafted in
  assembly](https://github.com/ZipCPU/s6soc/blob/master/sw/dev/resetdump.s),
  so that I could be sure nothing would over-write any critical portions of
  the previous state.

  I liked that debugging approach so much, that nearly every CPU design I&#39;ve
  put together since has had a [Wishbone
  Scope](/blog/2017/07/08/getting-started-with-wbscope.html)
  connection within it.

  In this case, the [watchdog
  timer](https://en.wikipedia.org/wiki/Watchdog_timer) felt useful but didn&#39;t
  provide me with any of the key information I needed to debug the problem.

  I needed more.

&lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5: Looking back into the past&lt;/caption&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG src=&quot;/img/scope-past.svg&quot; ALT=&quot;A scope that looks back in time&quot; width=&quot;240&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

- This brings me back to my [Wishbone
  Scope](/blog/2017/07/08/getting-started-with-wbscope.html).

  As you may remember, the [Wishbone
  Scope](/blog/2017/07/08/getting-started-with-wbscope.html)
  is a [bus](/zipcpu/2017/11/07/wb-formal.html)-based scope.
  [It records any data you send it, and then stops some time following a
  trigger](/blog/2017/06/08/simple-scope.html) after which
  you&#39;ll need to read the data out via the
  [bus](/zipcpu/2017/11/07/wb-formal.html).  It
  is not a JTAG scope, such as Xilinx&#39;s ILA, but rather a scope that acts more
  like an integrated peripheral to the design.  This means that
  [the CPU](/about/zipcpu.html)
  can configure it as part of any program it might be running.

  The [Wishbone
  Scope](/blog/2017/07/08/getting-started-with-wbscope.html)
  has three big limitations.

  1. First, since it is a [bus](/zipcpu/2017/11/07/wb-formal.html)-based
     [scope](/blog/2017/06/08/simple-scope.html),
     your design needs a working and dependable peripheral
     [bus](/zipcpu/2017/11/07/wb-formal.html)
     within it in order for it to work.

     While the
     [Wishbone scope](/blog/2017/07/08/getting-started-with-wbscope.html).
     was built around the
     [Wishbone bus](/zipcpu/2017/11/07/wb-formal.html)
     [specification](/doc/wbspec_b4.pdf), I have other
     versions for both Avalon and
     [AXI-lite](/formal/2018/12/28/axilite.html) busses.

  2. Second, because it is a
     [bus](/zipcpu/2017/11/07/wb-formal.html)-based
     [scope](/blog/2017/06/08/simple-scope.html),
     it can only capture the width of the data
     [bus](/zipcpu/2017/11/07/wb-formal.html) on every clock
     period.  Since [my busses are all
     32-bits wide](/zipcpu/2017/11/07/wb-formal.html),
     this [scope](/blog/2017/06/08/simple-scope.html)
     will only ever capture 32-bit debugging words at any given time.

     Yes, I keep telling myself that it would be easy to strap two
     [scopes](/blog/2017/06/08/simple-scope.html)
     together, but the reality is that I have never done the software work
     necessary to make that possible.

     But what to capture?  I&#39;d like to capture every time a register is written,
     both the name of the register (5-bits) and the value written to it
     (32-bits).  This busts my 32-bit limit, and I&#39;m not even done with my
     requirements yet.  I&#39;d also like to capture [bus](/zipcpu/2017/11/07/wb-formal.html) requests.  In the case of
     a [bus](/zipcpu/2017/11/07/wb-formal.html) read, I&#39;d like to capture the read address (32-bits) and the
     returned value (32-bits, but on a later clock).  In the case of a write,
     I&#39;d want to capture both the address (32-bits) and data written to the [bus](/zipcpu/2017/11/07/wb-formal.html)
     (another 32-bits).  I&#39;d
     also like to be able to &quot;see&quot; how long it takes the [bus](/zipcpu/2017/11/07/wb-formal.html) to return a value
     (i.e. CYC, STB, WE, STALL, and ACK, or about 5 bits).
     What else?  I&#39;d definitely like to capture any branch targets (32-bits),
     as well as all of the internal pipeline control flags within the
     [the CPU](/about/zipcpu.html).

     It should be pretty obvious that all of this information won&#39;t fit within
     a 32-bit word.

     My current solution to this problem is to multiplex several words together
     depending upon the conditions.

     a. If [the CPU](/about/zipcpu.html) is
        halted, set the 32&#39;bits to be the [pipeline control
        signals](/zipcpu/2017/08/23/cpu-pipeline.html).

     b. If a register is written, record which register within
        [the set](/zipcpu/2018/01/01/zipcpu-isa.html),
        and 26-bits of that registers value

        &lt;TABLE align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 6: Looking back into the past&lt;/caption&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG src=&quot;/img/zipcpu-dbg-reg.svg&quot; ALT=&quot;Capturing any register writes&quot; width=&quot;480&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

        Fig 6. above shows the format of this word.  It starts with a `T`
        bit, to indicate if this was the word that triggered the scope.  The
        `0` following identifies this encoding.  It&#39;s then followed by 4-bits
        identifying the register, and then 26-bits of the registers value.

     c. Anytime the pipeline is cleared, such as if we are jumping to a new
        address, record the bottom 28 bits of the address.  (Ignore the subword
        address bits, though, since the [ZipCPU](/about/zipcpu.html) can only jump to addresses on
        word boundaries.)

        &lt;TABLE align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 7: On any jump, record the jump address&lt;/caption&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG src=&quot;/img/zipcpu-dbg-branch.svg&quot; ALT=&quot;Recording the branch address&quot; width=&quot;480&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

     d. Otherwise, if there is a memory operation taking place this cycle,
        return 27-bits of the data being written (if it is a write cycle),
        otherwise return 27-bits of the address.

        &lt;TABLE align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 8: On any memory operation, record either the address or the value&lt;/caption&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG src=&quot;/img/zipcpu-dbg-memory.svg&quot; ALT=&quot;Recording a memory operation&quot; width=&quot;480&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

     e. Finally, if all else fails, just record the internal [CPU pipeline
        control signals](/zipcpu/2017/08/23/cpu-pipeline.html).

        These get kind of cluttered, so I&#39;m not going to try to draw them here.
        Feel free to check out how `dbg_flags` are set [within the
        ZipCPU](https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v)
        if you are interested.

     That&#39;s four different possibilities, all nearly 32-bits in size.  The
     first couple bits of each of these possibilities, stored in the MSBs,
     are used to decode which of these possibilities was recorded.

     One sad reality, though, is that my [VCD writing
     script](/blog/2017/07/31/vcd.html)
     can&#39;t handle non-constant bit-mappings.  In other words, when I need to
     examine the captured data, I&#39;ll end up looking at an ad-hoc textual
     ([printf](http://www.cplusplus.com/reference/cstdo/printf/)) output
     describing what&#39;s going on.

     It works, but it isn&#39;t pretty.

  2. The third limitation with any [internal logic
     analyzer](/blog/2017/06/08/simple-scope.html),
     whether it be a [Wishbone
     Scope](/blog/2017/07/08/getting-started-with-wbscope.html)
     or something else, is that the size of the memory buffer has to
     compete with any other [block
     RAM](/zipcpu/2018/07/13/memories.html)
     requirements within the design.

     In other words, even though the
     [Wishbone Scope](/blog/2017/07/08/getting-started-with-wbscope.html)
     can record values from within any design at the speed of
     [the CPUs](/about/zipcpu.html) clock, it cannot
     do so for very long.  The only way to capture relevant data therefore is
     to use some kind of trigger signal in order to tell us when to
     [stop recording](/blog/2017/06/08/simple-scope.html),
     as I illustrated in Fig. 5 above.

     The other unfortunate consequence of adding a
     [scope](/blog/2017/06/08/simple-scope.html)
     into a design is that you might [need to adjust how much block
     RAM](/zipcpu/2018/02/12/zbasic-intro.html)
     [the CPU](/about/zipcpu.html) has available to it.
     Using [AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html),
     this is the easy part.  [One value controls the size of the block
     RAM](/zipcpu/2018/02/12/zbasic-intro.html), and
     re-running [AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html)
     will adjust the address space, adjust the pointer of where the block
     RAM is located that&#39;s used by the bootloader, and [build us a new linker
     script](/zipcpu/2018/12/22/autofpga-ld.html)
     to be used when we&#39;re using this smaller amount of block RAM.  Then, later,
     when we remove the
     [scope](/blog/2017/06/08/simple-scope.html)
     and change the block RAM usage number back,
     we&#39;ll return to our prior/original configuration.

  As with adjusting the block RAM size, the
  [scope](/blog/2017/06/08/simple-scope.html) size can also
  be adjusted by just changing a single number in the
  [scope](/blog/2017/06/08/simple-scope.html)
  [configuration](https://github.com/ZipCPU/openarty/blob/autoarty/autodata/cpuscope.txt).

  Even better, the
  [scope](/blog/2017/06/08/simple-scope.html)
  can be added (or removed) but just adding (or removing) the
  [scope](/blog/2017/06/08/simple-scope.html)&#39;s
  [configuration filename](https://github.com/ZipCPU/openarty/blob/autoarty/master/autodata/cpuscope.txt)
  to/from the
  [AutoFPGA](/zipcpu/2017/10/05/autofpga-intro.html)
  [command line](https://github.com/ZipCPU/openarty/blob/autoarty/master/autodata/Makefile).
  All of the files then depending upon the
  [scope](/blog/2017/06/08/simple-scope.html) can be rebuilt,
  and pre-processor macros will be set so they can be built knowing whether or
  not the [scope](/blog/2017/06/08/simple-scope.html) is
  built into the design or not.

In the end, it was the [wishbone
scope](/blog/2017/07/08/getting-started-with-wbscope.html),
together with [formal
methods](/blog/2017/10/19/formal-intro.html),
that finally helped me find the bug.

To do this, I had to modify the trigger for the
[scope](/blog/2017/06/08/simple-scope.html).  That&#39;s the
next part of this story.

Normally, I have [the CPU](/about/zipcpu.html)&#39;s
[scope](/blog/2017/06/08/simple-scope.html) trigger off of
any internal exception that would cause
[the CPU](/about/zipcpu.html) to halt unnaturally.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

This wouldn&#39;t work in this case, because the whole problem was that
[the CPU](/about/zipcpu.html) hung without properly halting.

So I adjusted my trigger logic.  I chose to count the number of clocks
since the last valid instruction retired.

Within the [ZipCPU](/about/zipcpu.html), any time a
non-memory instruction retires, it sets the `alu_pc_valid` flag.  This tells
[the CPU](https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v)
that the [program counter](https://en.wikipedia.org/wiki/Program_counter)
needs to be updated.  If `alu_pc_valid` isn&#39;t true for many cycles, then
we can conclude that [the CPU](/about/zipcpu.html)
must be hanging.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Look for a hang of 2048 cycles
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

That&#39;s the idea.

The problem is that I only want to know when
[the CPU](/about/zipcpu.html) *hangs*.  What if it hasn&#39;t
been started in the first place?  What if I stop it in the
[debugger](/blog/zipcpu/2017/08/25/hw-debugging.html)?
What if [the CPU](/about/zipcpu.html)
is in [sleep mode waiting for an
interrupt](/zipcpu/2018/01/01/zipcpu-isa.html)?

I needed to adjust the counter just slightly to avoid these cases.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Now the [scope](/blog/2017/06/08/simple-scope.html) will trigger after 2048 clocks of
[the CPU](/about/zipcpu.html)
not updating the
[program counter](https://en.wikipedia.org/wiki/Program_counter).

But would this trigger on the bug?

## The Trace Result

Yes, the [scope](/blog/2017/06/08/simple-scope.html)
triggered!  The next time I ran
the [simple_ping](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
program on [the CPU](/about/zipcpu.html) it hung as I hoped
and expected.  As a result, I could check the trace capability and see that,
yes, the [scope](/blog/2017/06/08/simple-scope.html) had
triggered and there was a trace waiting for me.  (Yes, I&#39;m skipping over
writing the software to read from the
[scope](/blog/2017/06/08/simple-scope.html) and to decode
its results--[we&#39;ve already discussed that
before](/blog/2017/07/08/getting-started-with-wbscope.html).)

Since we are working with text, and not
[VCD files](/blog/2017/07/31/vcd.html), every line shows one
more clock step of what&#39;s going on.  The lines will start with the location
within the [scope](/blog/2017/06/08/simple-scope.html)&#39;s
buffer, followed by the 32&#39;bit word located there.  After that, the line
follows a custom ad-hoc decoding script.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6059 04012512:      R1 &amp;lt;- 0x.0012512
     6060 0c7b3cd9:      R3 &amp;lt;- 0x.07b3cd9
     6061 0c7b3cda:      R3 &amp;lt;- 0x.07b3cda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

We&#39;ll pick it up at line 6059 out of 8191.  While it can be annoying to page
through thousands of lines of output just looking for the bug, in this case,
the bug was at the bottom of the trace.  Further, once
[the CPU](/about/zipcpu.html)
halted, all the trace words were identical--making it easy to quickly scan
about two pages of information from the bottom of the trace to find the
bug.

At line 6059, the trace looks fairly normal.
[The CPU](/about/zipcpu.html)
simply writes to registers `R1`, then `R3`, and then `R3` again.

Then there is a cycle where nothing is written to the registers.  This is
likely the result of a `CMP` (compare) instruction.  Such an instruction
consumes one clock, but doesn&#39;t write to any register values.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6062 5885b440:      FLAGS 5885b440 CE[DOA ] V[PDO ] MCE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 9: Pipeline stages of the ZipCPU&lt;/caption&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG src=&quot;/img/zipcpu.svg&quot; ALT=&quot;Pipeline steps of the ZipCPU&quot; width=&quot;360&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

This `FLAGS` response contains a large bit-field.  To help understand it,
I&#39;ve shown a model of the
[ZipCPU pipeline](/zipcpu/2017/08/23/cpu-pipeline.html) in
Fig. 9 on the right.

I&#39;ve tried to break out some of the trace fields in the line above.
For example, the `V[*]` section tells me which pipeline stages have [valid
entries within them: the prefetch, decode, and read-operands
stage](/zipcpu/2017/08/23/cpu-pipeline.html).  It also tells
me that the master CE (`MCE`) signal, the signal that controls whether any
instruction transitions from the read operands stage to the execution units,
is high.  Given that we have valid instructions, and `MCE` is high, [the
CPU](/about/zipcpu.html) is running at this trace point.
Finally, the trace line shows me [which pipeline stages are advancing.  These
are the ones with their respective `*_ce` flags
high](/zipcpu/2017/08/23/cpu-pipeline.html).

[As we discussed
before](/zipcpu/2017/08/23/cpu-pipeline.html), the
basic pipeline operation follows as,

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prior_stage_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Copy data from the previous pipeline
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// stage to this stage, operating on it as
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// necessary
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

If the stage&#39;s `CE` line is high, the instruction moves from the previous
stage into the current stage stage.

In this case, instructions will be advancing from the `P`refetch to the
`D`ecode stage, from the `D`ecode stage to the read `O`perands stage, and
from the read `O`perands stage to the `A`LU stage.  That&#39;s the meaning of
the cryptic `CE[DOA ]` field.  This is all good: the
[pipeline](/zipcpu/2017/08/23/cpu-pipeline.html) is full,
and [the CPU](/about/zipcpu.html)
is operating normally--it just so happens that it is not writing to any
register values on this cycle.  Again, this is normal.

Following the compare (`CMP`) instruction, there&#39;s a
[branch instruction](https://en.wikipedia.org/wiki/Branch_(computer_science)).
This shows up as taking two clocks.  The first one is where the
[program counter](https://en.wikipedia.org/wiki/Program_counter)
is given a new value.  This is the same register write format we discussed
above in Fig. 6.  The second line shows where
[the CPU](/about/zipcpu.html)
actually sets the
[program counter](https://en.wikipedia.org/wiki/Program_counter) and
[clears the pipeline](/zipcpu/2017/08/23/cpu-pipeline.html).
This is the same format we showed in Fig. 7 above.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6063 3e801814:      PC &amp;lt;- 0x.2801814
     6064 41a00605:      JMP 0x06801814&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

At this point, we can finally identify where in the program code we are at.
By examining the disassembly of our
[simple_ping](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
program, we find that we are in a tight loop waiting for a network packet to be
received, or for the seconds-hand on the
[real-time clock](https://github.com/ZipCPU/rtcclock) to advance.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;	while(((_netp-&amp;gt;n_rxcmd &amp;amp; ENET_RXAVAIL)==0)
				&amp;amp;&amp;amp;(_rtc-&amp;gt;r_clock == rtc))
			user_heartbeats++;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Here you can see where I set one of those [global
variables](https://en.wikipedia.org/wiki/Global_variable), `user_heartbeats`.
This allowed me to tell, when using the 
[global variable](https://en.wikipedia.org/wiki/Global_variable)
debugging approach, when the program was hung, since this value would stop
changing.

Following the conditional
[branch](https://en.wikipedia.org/wiki/Branch_(computer_science)),
[the CPU](/about/zipcpu.html)
needed to [clear its
pipeline](/zipcpu/2017/08/23/cpu-pipeline.html).  This
required a couple of clock cycles, which are shown in the trace lines below.
As before, the `CE[]` block shows which pipeline stages, `D`ecode, `O`perands,
or `A`LU are accepting data, whereas the `V`alid block shows which stages
actually have valid instructions within them.  Hence, we are now watching
a new instruction stream move into the
[pipeline](/zipcpu/2017/08/23/cpu-pipeline.html).
The first of these new instructions will eventually write to the `R2` register,
as shown below.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6065 58810000:      FLAGS 58810000 CE[D   ] V[    ] MCE
     6066 58850000:      FLAGS 58850000 CE[D   ] V[P   ] MCE
     6067 5885a000:      FLAGS 5885a000 CE[DO  ] V[PD  ] MCE
     6068 5885b400:      FLAGS 5885b400 CE[DOA ] V[PDO ] MCE
     6069 087b3cda:      R2 &amp;lt;- 0x.07b3cda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

The next instruction is a
[load word instruction](/zipcpu/2018/01/01/zipcpu-isa.html).
This instruction issues a
[bus](/zipcpu/2017/11/07/wb-formal.html)
transaction to read from location `0x03800000` in memory.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6070 70e00000:      MEM-R[0x.3800000] -&amp;gt; (Not Givn) (GBL)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

While the [scope](/blog/2017/06/08/simple-scope.html)
hasn&#39;t captured all 32-bits of that address, I can infer it from the fact
that my design doesn&#39;t have more than 27-bits of address space,
and so the number of bits is sufficient.

This read polls the [network
interface](https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v),
to query if any packets have been read.

The `(GBL)` flag indicates that this read is from the global address space,
rather than the processor&#39;s local peripheral address space.

As you might imagine, reading a value from the
[bus](/zipcpu/2017/11/07/wb-formal.html) stalls the
processor.  While there are waiting instructions in the prefetch, decode,
and read operands stages, nothing moves forward until this result comes
back--lest [the CPU](/about/zipcpu.html) need to undo and
re-perform any instructions.  (The
[ZipCPU](/about/zipcpu.html) is not an
&quot;[out-of-order](https://en.wikipedia.org/wiki/Out-of-order_execution)&quot;
machine.)

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6071 5884d00c:      FLAGS 5884d00c CE[    ] V[PDO ] MCE DCD-STALL MEM-BUSY&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

While it is waiting, we get another flags trace line.  In this case, we can see
that the memory unit is busy, `MEM-BUSY`.  `DCD-STALL` is an indication that
there is an instruction in the decode stage of our
[pipeline](/zipcpu/2017/08/23/cpu-pipeline.html)
that is stalled.  We&#39;ll come back to this later.

The memory instruction takes about five clock cycles.  During this
time, nothing changes within [the CPU](/about/zipcpu.html),
and so the [wishbone
scope](/blog/2017/07/08/getting-started-with-wbscope.html)
[control program](https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/cpuscope.cpp)
outputs the line `**** ****` so we can tell that nothing is changing.

Once the memory read operation is complete, the result is written to `R1`.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; **** ****
     6076 04020000:      R1 &amp;lt;- 0x.0020000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

So far this all looks good.  We haven&#39;t hit the bug yet.

[The CPU](/about/zipcpu.html)
then issues an
[AND instruction](/zipcpu/2018/01/01/zipcpu-isa.html),
to check whether or not the [network
interface](https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v)
has received any packets.
The result of this instruction is zero: there are no pending packets waiting.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6077 04000000:      R1 &amp;lt;- 0x.0000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Based upon the zero flag, we then hit a conditional
[branch](https://en.wikipedia.org/wiki/Branch_(computer_science)),
and so we need to clear and load the
[pipeline](/zipcpu/2017/08/23/cpu-pipeline.html) again.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6078 3e80182c:      PC &amp;lt;- 0x.280182c
     6079 41a0060b:      JMP 0x0680182c
     6080 58810000:      FLAGS 58810000 CE[D   ] V[    ] MCE
     6081 58850000:      FLAGS 58850000 CE[D   ] V[P   ] MCE
     6082 5885a000:      FLAGS 5885a000 CE[DO  ] V[PD  ] MCE
     6083 5885b020:      FLAGS 5885b020 CE[DO M] V[PDO ] MCE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

This time, we&#39;re going to read from address `0x05800060`: the
[real-time clock](https://github.com/ZipCPU/rtcclock) register.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6084 71600018:      MEM-R[0x.5800060] -&amp;gt; (Not Givn) (GBL)
     6085 5884d00c:      FLAGS 5884d00c CE[    ] V[PDO ] MCE DCD-STALL MEM-BUSY
 **** ****
     6090 04012512:      R1 &amp;lt;- 0x.0012512&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

The result, `0x012512`, from the
[clock](https://github.com/ZipCPU/rtcclock)
is in [Binary Coded Decimal, or
BCD](https://en.wikipedia.org/wiki/Binary-coded_decomal).  You might
read it as `1:25:12`.  It indicates that it has now been one hour, twenty five
minutes, and twelve seconds since this design was initially loaded.  (No,
I never set the clock to real time--I was more focused on debugging all
this time.)

Again, so far this looks normal.

Then something different happens.  The trace ends.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6091 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL
 **** ****
     8127 d884d000: TRIG FLAGS d884d000 CE[    ] V[PDO ] MCE DCD-STALL &amp;lt;--- TRIGGER
     8128 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL
 **** ****
     8191 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Notice the trace location values: 6091, 8127, 8128, and then 8191.  These are
key.  `6091` is expected--that&#39;s the next clock cycle.  `8127` is unexpected.
That means that we just spent 2036 cycles *doing nothing*.

Wait, I thought we set
[the CPU](/about/zipcpu.html)
to count 2048 cycles before setting the trigger on our
[scope](/blog/2017/06/08/simple-scope.html)?
How did the count end up at 2036?

It ended up at 2036 because we only counted
[ALU](/2017/08/11/simple-alu.html)
results, not results from the memory unit.  Our last valid
[ALU](/2017/08/11/simple-alu.html)
result was on cycle 6078, we we&#39;re still good here.

Or rather, we&#39;re not good here:
[the CPU](/about/zipcpu.html)
just stopped.

The good news is that we know what instruction we were executing.  If you run
`objdump` on our executable, you can see an assembly listing showing the
instruction we just completed, and the context around it.  To generate a
listing, just type,

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;zip-objdump -S -D simple_ping &amp;gt; simple_ping.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Indeed, I find listings of this type so valuable when debugging, that I have a
special [make](https://www.gnu.org/software/make) target just to create
listings.  The target looks like:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;%.txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(OBJDUMP)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -S -D $^ &amp;gt; $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

This will get turned into the command above any time I type

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make simple_ping.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

[Make](https://www.gnu.org/software/make) is smart enough to recognize, when I
type this, that if the source code for `simple_ping` has changed then it needs
to be rebuilt before dumping the assembly to `simple_ping.txt`.

Sadly, I&#39;ve recompiled this routine since capturing my trace.  As a result,
the assembly below that matches the loop in question doesn&#39;t quite match
the trace.  Still, this was roughly the instruction we halted on.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 7001808:	84 a8 97 88 	LW         (R5),R0        | MOV        R1,R2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

The critical piece of this disassembly is that we were trying to execute a
two-instruction word, containing both a [load word
instruction (`LW`)](/zipcpu/2018/01/01/zipcpu-isa.html)
followed by a [register copy
(`MOV`) instruction](/zipcpu/2018/01/01/zipcpu-isa.html).
([ZipCPU](/about/zipcpu.html)
[assembly](/zipcpu/2018/01/01/zipcpu-isa.html)
reads left to right, hence the `MOV` instruction copies `R1` into `R2`.)

&lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 10: ZipCPU ISA Quick Reference Sheet&lt;/caption&gt;&lt;TR&gt;&lt;TD&gt;&lt;A HREF=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/nextgen.png&quot;&gt;&lt;IMG src=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/nextgen.png&quot; ALT=&quot;&quot; width=&quot;360&quot;&gt;&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

When I introduced the [ZipCPU
ISA](/zipcpu/2018/01/01/zipcpu-isa.html),
I didn&#39;t say much about compressed instructions.  Now, however, you need
to know a little bit about them to know what&#39;s going on.  Fig. 10 at the right
shows my quick reference sheet of
[ZipCPU](/about/zipcpu.html)
instructions.  The first line shows the basic format of most instructions.
The second line shows the format of a compressed instruction.  It starts with
a `1` in the MSB, followed by fifteen bits containing the first instruction,
an unused bit, then fifteen bits containing the second instruction.  The
opcodes for these compressed instructions are shown in the top half of the
third column: `SUB`, `AND`, `ADD`, `CMP`, `LW`, `SW`, `LDI`, and `MOV`.

[ZipCPU](/about/zipcpu.html) compressed instructions are
a little different from other architectures, because you cannot jump halfway
into a word.  All instruction words, whether compressed or not, are all word
aligned.  The assembler handles the compression, making certain for example that
[branch](https://en.wikipedia.org/wiki/Branch_(computer_science))
targets never get compressed into the middle of a compressed instruction word.

Further, the 
[ZipCPU](/about/zipcpu.html) disassembler displays both
instructions within a compressed instruction word on the same line, using
a `|` to separate them--as shown above.

This will all come into play in a moment.

From the trace we know that we executed the `LW` instruction, but that the
`MOV` instruction never made it into the execution unit(s).

Why not?  What happened?

## Moving from trace to bug

When I finally got to this point, I had no idea why
[the CPU](/about/zipcpu.html)
might stall like that.

Yes, it is
[my CPU](/about/zipcpu.html).  Yes, I did write [the code
for it](https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v).  Yes,
the [stall logic](/zipcpu/2017/08/23/cpu-pipeline.html)
is all my own handiwork.  Yes, I did just create this trace.  However,
when a design gets over 2500 lines, when you wrote it years ago, when
it has multiple options it can be built with ...  it can become difficult
to remember all the details.  Worse, even if you do remember them, do
you know why this happened?

So I turned to
[formal methods](/blog/2017/10/19/formal-intro.html).

Instead of proving that [the CPU](/about/zipcpu.html)
&quot;worked&quot;, I wanted to prove that [the CPU](/about/zipcpu.html)
would never stall like this.  Hence, I wanted to say that: if there&#39;s an
instruction in the read-operands stage,
[the CPU](/about/zipcpu.html)
should always proceed to the
[execution stage](/2017/08/11/simple-alu.html).

So how might we write such an assertion?

Well, if there&#39;s a valid instruction in the read-operands stage, then it should
proceed to the execution stage, right?

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Here `adf_ce_unconditional` says the instruction will move forward into the
`ALU`, `DIV`ide or (not-yet-written) `FPU` (floating point unit), whereas
`mem_ce` says the instruction will move into the memory unit.

Only, that&#39;s not quite right.  We don&#39;t want to move forward if the
[debugging unit](/blog/zipcpu/2017/08/25/hw-debugging.html)
has requested that we halt.  In that case, `master_ce` will be low.
We also don&#39;t want to move forward on a reset, or anytime the
[pipeline](/zipcpu/2017/08/23/cpu-pipeline.html)
is cleared.  Further, we don&#39;t want to move to the execution stage
if any of the execution units is busy and its result might affect one
of our operands.

So, let&#39;s adjust our assertion.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

This assertion fails.

It has?  Aha!  Have I found my bug?

I pulled up the trace to look.  This time, it&#39;s a
[VCD file](/blog/2017/07/31/vcd.html)
created by [SymbiYosys](https://symbiyosys.readthedocs.io/en).  No, this
assertion hasn&#39;t found the bug.  Instead, all I found were examples of
other reasons why the instruction shouldn&#39;t move forward.

The execution units shouldn&#39;t accept any more instructions if ...

- If this is a `BREAK` instruction, `op_break`, the pipeline needs to stop just
  before the instruction gets to the execution unit.

- If [the CPU](/about/zipcpu.html)
  has halted on an error, `o_break` will be true and we&#39;ll need to
  make sure we are halted.

- If we just retired an illegal instruction, we need to halt.  Similarly, if
  the last memory instruction returned a bus error then we need to halt as
  well.

- If there&#39;s an interrupt pending or a trap was just executed,
  `w_switch_to_interrupt` will be true and we&#39;ll need to switch to
  [supervisor mode](/zipcpu/2018/01/01/zipcpu-isa.html).
  In this case, the instruction in the read operands stage won&#39;t move forward
  into any of the execution units either.

The list goes on.  In the end, I was surprised at how long it was.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_switch_to_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_illegal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ibus_err_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ill_err_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idiv_err_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

At this point, however,
[SymbiYosys](https://symbiyosys.readthedocs.io/en)
had found my bug for me.

The problem was specific to the compressed instruction word.  In the
[ZipCPU](/about/zipcpu.html)
[ISA](/zipcpu/2018/01/01/zipcpu-isa.html),
two instruction words may optionally be packed into one, and the
[ZipCPU](/about/zipcpu.html) has no ability
to restart any instructions mid-word (currently).  I may need to come back
and &quot;fix&quot; this later, but the approach was chosen to simplify the
instruction decoder: all instruction words start on word boundaries, some
instruction words contain two instructions.

This was why the
[debugger](/blog/zipcpu/2017/08/25/hw-debugging.html) failed:
it had to wait for the second part of the compressed instruction word to
complete before
[the CPU](/about/zipcpu.html)
would halt, since there is (currently) no way to restart
[the CPU](/about/zipcpu.html)
mid-instruction word.

This also means that I cannot jump into an interrupt mid-word.
The internal flag, `w_switch_to_interrupt` properly captures this logic.
The stall signal, however, did not.  That meant that any time the interrupt
signal went high in the middle of a two-instruction word, the interrupt logic
would wait for the second instruction to complete while the stall logic would
prevent the second instruction from starting.

The conflicting logic lead to the [deadlock](https://en.wikipedia.org/wiki/Deadlock) causing
[the CPU](/about/zipcpu.html)
to hang.

The fix was simple: add a check to the stall logic so that we only stall
if an interrupt is pending *and* we are on a single-instruction word or the
second instruction of a double-instruction word.

Once fixed, my
[network ping program](https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c)
worked as intended again.

## Wasn&#39;t the CPU Formally Verified?

Some time ago, I wrote about [all of the bugs I found when formally verifying
this CPU](/blog/2018/04/02/formal-cpu-bugs.html).
I even went to [ORCONF 2018 to discuss all of the lessons I learned
while going through this process](https://www.youtube.com/watch?v=7DHV_rJKSgo).

Shouldn&#39;t
[formal verification](/blog/2017/10/19/formal-intro.html)
have caught this bug?

Yes, I suppose it should have.

Why didn&#39;t it?

Because I never created a property asserting that
[the CPU](/about/zipcpu.html)
would never stall indefinitely.

I&#39;ve now gone back to the proof and added a similar property to ensure that
[the CPU](/about/zipcpu.html)
will never stall in the decode stage either.

This wasn&#39;t the first time I found a bug in my now
[formally verified](/blog/2018/04/02/formal-cpu-bugs.html)
[CPU](/about/zipcpu.html).
The first time was when I tried setting the [program
counter](https://en.wikipedia.org/wiki/Program_counter) from the
[debugging port](/blog/zipcpu/2017/08/25/hw-debugging.html).
You may recall, I mentioned fixing this bug above.  This oversight happened
for the same reason: My initial set of formal properties was incomplete.

[The CPU](/about/zipcpu.html) now has a set of debugging
interface properties, &quot;proving&quot; that the
[debugger](/blog/zipcpu/2017/08/25/hw-debugging.html)
can set and adjust the [CPU](/about/zipcpu.html)&#39;s state.

## What about simulation?

What about
[simulation](/blog/2018/08/22/what-is-simulation.html)?
Could this bug have been caught during
[simulation](/blog/2018/08/22/what-is-simulation.html)?
Why wasn&#39;t it?

I suppose this bug could have been caught in
[simulation](/blog/2018/08/22/what-is-simulation.html).

However, my current network packet simulator implements a loop-back mode only.
This isn&#39;t sufficient for testing the complex interaction of
[ARP requests](https://en.wikipedia.org/wiki/Address_Resolution_Protocol),
[ARP replies](https://en.wikipedia.org/wiki/Address_Resolution_Protocol),
and [ping requests and
replies](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol).

An online friend has recommended I try building a network simulator that
integrates into the Linux Kernel, so that other computers can actually interact
with my design while it is running in the simulator.  This would be a truly
awesome idea, and might well have caught this bug.  I might just need to update
my network simulation for this purpose.

## Conclusions

So what are some of the lessons we can learn from this whole exercise?

First, your current bug may not be in the last place you looked.  I had just
worked on the [flash controller](https://opencores.org/project/qspiflash).
Mentally, my mind was in a bug hunting mode within the
[flash controller](https://opencores.org/project/qspiflash).
Instead, the bug was somewhere else within my design--somewhere where I least
expected it.

Second, the more things you change within a design, the more painful it is
to find and fix the bugs within it.  In many ways, I set myself up for problems
with the shear number of things I had changed to get here.  Understand, just
because I presented one or two of these problems above, doesn&#39;t mean that these
were the only problems I had.

Third, did you notice how many tools I was using to debug the design?
Besides the tools for debugging [the CPU](/about/zipcpu.html)
listed above, I was also using [Wireshark](https://www.wireshark.org)
for debugging
[the network](https://en.wikipedia.org/wiki/Ethernet) as well.

Finally, [debugging a
CPU](/blog/zipcpu/2017/08/25/hw-debugging.html)
really crosses several disciplines.  While this is a &quot;hardware&quot; task,
look at what we needed to do in terms of support software along the way:
We needed a [debugging
port](/blog/zipcpu/2017/08/25/hw-debugging.html) to
[the CPU](/about/zipcpu.html)
(S/W+H/W), a [scope](/blog/2017/06/08/simple-scope.html) to
gather a trace from within [the CPU](/about/zipcpu.html)
(H/W), software to interpret that trace (S/W), a disassembly of the failing
program (compiler S/W), an understanding of the
[ZipCPU](/about/zipcpu.html) [instruction set (assembly
S/W)](/zipcpu/2018/01/01/zipcpu-isa.html),
and finally [formal
methods](/blog/2017/10/19/formal-intro.html)
to finally catch the bug in the end.

That&#39;s quite the cross-disciplinary task!

This also means that, if you are interested in learning hardware design, there
are several prerequisites before you dive into CPU design.  The other way of
looking at it is that CPU design is a wonderful field of study where you will
be forced to learn all kinds of details of how CPUs work that you would never
learn otherwise.
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And he informed me, and talked with me, and said, O Daniel, I am now come forth to give thee skill and understanding.&lt;/em&gt;</description>
        <pubDate>Mon, 04 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/02/04/debugging-that-cpu.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/02/04/debugging-that-cpu.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Building a custom yet functional AXI-lite slave</title>
        <description>&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The AXI4 bus requires five independent channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;Illustration, showing the five separate channels of the AXI4 bus&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Last year, we discussed &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;how to verify an AXI-lite slave
peripheral&lt;/a&gt;.  To do
this, we asked Vivado to generate an example &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite
peripheral&lt;/a&gt;
and then added a reference to an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite property
file&lt;/a&gt;
and about 20 more lines of code to our design.  Much to my surprise, Vivado’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite peripheral&lt;/a&gt;
didn’t pass &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;The core&lt;/a&gt;
failed because it didn’t properly drop the ready lines to prevent an incoming
transaction in the case where the outgoing acknowledgement channel was stalled.&lt;/p&gt;

&lt;p&gt;We also noticed that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx’s demonstration
core&lt;/a&gt;
as designed could only ever ever process a single
transaction for every two clocks ticks, limiting its maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.  No
simple code adjustment would fix this.&lt;/p&gt;

&lt;p&gt;That post referenced &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;a core generated by Vivado
2016.3&lt;/a&gt;.
Since that time, I’ve also had a chance to
download and examine Vivado’s 2018.3 AXI-lite demonstration core.  While
superficial changes have been made to this example core, it still suffers
from the same basic design flaws: unless the outgoing ready signals on the two
acknowledgment channels, both for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, are
dependably held high &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
will drop acknowledgments.  This is fundamentally bad, since it could cause a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to lock up hard.  Worse, since it would be caused by the vendor’s
demonstration code, no one would think twice to examine it for an error.&lt;/p&gt;

&lt;p&gt;For the sake of those who wish to work with an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; slave peripheral,
let’s take a moment and examine how we might build a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;better AXI-slave&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;goals-for-any-bus-component&quot;&gt;Goals for any Bus Component&lt;/h2&gt;

&lt;p&gt;Whenever I build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component, whether it be a slave or a master, I start with three basic design
criteria.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component must maintain the rules of the road for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
it is on.  In the case of an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
bus&lt;/a&gt;, that means we need
to examine the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt; to determine how our
code must behave.&lt;/p&gt;

    &lt;table style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/fpropfile.png&quot; alt=&quot;What is a formal property file?&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;Once we’ve done that once, we can then capture this behavior in a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal
property file&lt;/a&gt;
that can then be used later to verify any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; component.
Such property files are great timesavers, since they typically only need
to be built once, and yet they can then be used to verify any number of
design components.&lt;/p&gt;

    &lt;p&gt;A common question I often get from corporate clients new to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
is, where do I start?  My answer is often, “Start by building property
files for the interfaces you support,” for this very reason: for a small
amount of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
work, you can get a tremendous return on your investment.&lt;/p&gt;

    &lt;p&gt;Today, we’ll be reaping a return on our &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;last AXI-lite
investment&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My next two goals are performance related.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Once the component obeys the rules of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
my next priority is maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.  A
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component must support the highest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
possible.  Think of it this way, the speed of the entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU portion of the
design&lt;/a&gt;
depends upon the speed of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
High performance is achieved by pipelining multiple transactions to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
in a group.  The higher the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; is, the faster the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
(or whatever
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master) can perform its functions.&lt;/p&gt;

    &lt;p&gt;Several individuals have posted both on
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s forum&lt;/a&gt; and
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent’s forum&lt;/a&gt;
about the MicroBlaze computer being horrendously slow
[&lt;a href=&quot;https://forum.digilentinc.com/topic/4930-arty-microblaze-speed-question&quot;&gt;1&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Evaulation-Boards/AXI_GPIO-too-slow/td-p/725431&quot;&gt;2&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/Why-microblaze-loop-speed-is-40-times-slower-than-I-expected/td-p/111342&quot;&gt;3&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/7-Series-FPGAs/SDK-GPIO-implementation/td-p/784626&quot;&gt;4&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/AXI-GPIO-max-rate/td-p/484496&quot;&gt;5&lt;/a&gt;].
The measurement is typically made by examining how fast the processor can
toggle a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;general purpose
output&lt;/a&gt;
fed into an &lt;a href=&quot;https://en.wikikpedia.org/wiki/Oscilloscope&quot;&gt;oscilloscope&lt;/a&gt;.
While I’ll admit this isn’t a great measure of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
performance, it is a somewhat decent measure of peripheral
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
performance.&lt;/p&gt;

    &lt;p&gt;There is no reason why a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt; driver,
as an example, needs two clocks for every transaction.&lt;/p&gt;

    &lt;p&gt;We’ll create a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component in a moment that can handle one transaction
on every clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Minimum &lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;By &lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
I mean the number of clock cycles it takes from when the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
makes a request until the response comes back from the peripheral.  Most
of the clock cycles used during the request will be
consumed by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
first and then the interconnect, meaning that there isn’t all
that much that a peripheral designer can do to affect the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
associated with accessing his component.&lt;/p&gt;

    &lt;p&gt;What he can do, however, is make certain that he doesn’t increase that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt; by how he
processes the request.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; requires that all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
signals must be registered on the clock edge.  This means that the minimum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
through any &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification compliant&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-slave
peripheral&lt;/a&gt;
can never be better than a single clock cycle.  The
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;core&lt;/a&gt;
presented below will achieve this minimum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My last criteria, &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum
area&lt;/a&gt;,
is often lost after meeting the first three.  In general, a design that
meets the first three criteria is often so constrained that there’s not
much more you can do to achieve &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum
area&lt;/a&gt;.  This is why
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;choice of a bus
standard&lt;/a&gt; is so
important to anyone designing for &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;low area/minimum
cost&lt;/a&gt;: design
choices have consequences.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall system performance depends upon the first three design goals.  High
performance is fairly easy to meet using the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;–which is
one of the reasons why I like it so much.  With
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
however, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus requirements&lt;/a&gt; and
maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; goal can seem
contradictory.  It’s certainly not obvious, and so it’s worth illustrating
how to make this happen.&lt;/p&gt;

&lt;p&gt;Therefore let’s examine how to make an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite
slave&lt;/a&gt;.  I’ll
focus on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
based design.  Indeed, if we do this write, then our design should be able
to map into block &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;.&lt;br /&gt;
(My first draft didn’t meet this criteria.)  Either way the design approach
will be quite appropriate for a typical
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;register-based&lt;/a&gt;
slave peripheral.&lt;/p&gt;

&lt;p&gt;Finally, before beginning to look at how we’d do this, let’s just note that
of the two types of transactions, read and write, the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
read channel is simplest to implement.  Unlike the write channel, there’s only
the one request channel called the read address channel going into a read
transaction.  The write channel, on the other hand, requires both an address
and a data channel feeding it, as shown in Fig. 1 above.  Therefore let’s
examine the read channel first, and then apply the lessons we learn from the
read channel to the write channel in the following section.&lt;/p&gt;

&lt;h2 id=&quot;read-channel-processing&quot;&gt;Read Channel Processing&lt;/h2&gt;

&lt;p&gt;Sometimes I like to sprint into code and just see how far I can get.  In this
case, such a sprint into the read channel implementation appears easy:
every time we get an &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY &amp;amp;&amp;amp; S_AXI_ARVALID&lt;/code&gt; we want to set
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; on the next clock.  As long as &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; remains true, this
is sufficient for high speed interaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that we’re following Vivado’s notation here, and using &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt; to
describe any external signals, whereas we’ll use both the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_*&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt; prefixes to describe any internally generated
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. AXI-lite read transactions with S_AXI_RREADY high&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-rready.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, all with ARREADY held high&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 2 on the right illustrates how this scheme might work.  Following any
clock period where both &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt; are true,
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is set with the appropriate result on the next clock.  So far,
this is about as easy as
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone&lt;/a&gt;
was.&lt;/p&gt;

&lt;p&gt;The problem with the approach outlined above is easily discovered
when we attempt to
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;verify its functionality&lt;/a&gt;.
It’s also the same basic logic the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Vivado generated
core&lt;/a&gt;
was been using: if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; were always true, this would pass as working
code.  Nothing in the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt;,
however, requires that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; be guaranteed to be true.  Indeed, I
have to believe the authors of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
were quite proud of creating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interface that might respond to “&lt;a href=&quot;https://en.wikipedia.org/wiki/Backpressure_routing&quot;&gt;back
pressure&lt;/a&gt;”
as a stall on an outgoing channel is called.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 3. AXI-lite read transactions with S_AXI_RREADY high&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-rfails.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, with two lost due to RREADY being low&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 3 on the left shows what this naive implementation might lead to when
the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; line not held high.&lt;/p&gt;

&lt;p&gt;In particular, we are required to hold the outgoing data constant any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid &amp;amp;&amp;amp; !S_AXI_RREADY&lt;/code&gt;.  Did you notice how the blue transaction in this
figure got lost?  This would be a catastrophic bug in our code.  Notice also
how there’s an empty clock cycle in the return channel between the brown return
and the white return, precisely where the blue return should be?&lt;/p&gt;

&lt;p&gt;Two realities lead to this bug.  The first is that we need to stall, i.e. lower,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; line when the response ready, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, is low and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is high.  (The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt;
is very clear that setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; line cannot depend up
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; being set initially.)  A straightforward implementation might
look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This implementation, however, would cause the bug shown above in Fig. 3 above:
the ready signal is only dropped &lt;em&gt;after&lt;/em&gt; a transaction is lost!  This is a
catastrophic bug.&lt;/p&gt;

&lt;p&gt;We could try to simplify this approach and just state that,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this would meet our
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus requirements&lt;/a&gt;, it would violate
our maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; goal.&lt;/p&gt;

&lt;p&gt;Another simple fix would be to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; signal combinatorially,
so that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Result of combinatorial axi_arready logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-rcomb.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, where the AXI_ARREADY line is generated combinatorially&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This appears as though it might solve all of our problems.  A trace built upon
this logic is shown in Fig. 4 on the right.&lt;/p&gt;

&lt;p&gt;Only it doesn’t solve our problems.  It violates our first goal, since the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
is quite clear: all signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; included, must be registered.  That
is, they must all be  set on a clock edge.  Adjusting &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; to meet
this standard will force a single clock delay in processing.&lt;/p&gt;

&lt;p&gt;If we try to register &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; while maintaining a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
of one transaction per clock, then we are forced to deal
with accepting a transaction before we realize we should’ve been stalled.
Such a transaction will need to be
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;
within our core.&lt;/p&gt;

&lt;p&gt;We &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;studied how to do this back in 2017, under the name of a “buffered
handshake.”&lt;/a&gt;.
&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;Eric LaForest has recently posted a similar description, only they
called it a “Skid Buffer”&lt;/a&gt;.
However, I have yet to present code that will perform this handshake here on
this blog.  Until now.&lt;/p&gt;

&lt;p&gt;Sadly, the design is not trivial.
&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;LaForest&lt;/a&gt;
makes it look easy, although I tend to get confused every time I try this.
Traces just don’t do it justice.  Therefore,
let’s examine how this might work through a series of figures.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. The master requests a read&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-1.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll start with Fig. 5 on the right.  This figure shows the beginning of the
transaction, as the master creates a read request to send to the
slave.  We’ll assume that all of the ready signals are true initially, so this
request is immediately accepted by the slave.&lt;/p&gt;

&lt;p&gt;This is the way we want things to work.&lt;/p&gt;

&lt;p&gt;Some might even argue that this is how slaves are normally accessed: one
cycle at a time separated by idle cycles on both sides.
This was something I discussed in &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf.pdf&quot;&gt;my 2016 ORCONF presentation as well&lt;/a&gt; (see slides 26-27), since
the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone classic bus&lt;/a&gt; can never
handle more than one transaction every three clocks as a result.
We’ll reflect for a moment on the reality that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is more than capable of issuing multiple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
requests on adjacent clocks, and then we’ll ignore this piece of advice and
continue with a second access following immediately after the first one.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. The slave returns its first response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-2.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 6 illustrates the slave returning the initial request as a response to
the master.  This is on the next clock, so we are still meeting our maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
requirement of a single clock.  During this time, the master
sends a second request to the slave.&lt;/p&gt;

&lt;p&gt;Again, this is the way things are supposed to work.  We’re just pushing
data through at high speed, one transaction on every clock and meeting our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
requirements.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. The master stalls the response channel before the second response is accepted&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-3.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 7 shows the beginning of our problems.  In Fig. 7, the master
lowers his &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; signal (now shown in red), stalling the return
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
It will now take the slave another clock period, i.e. until Fig. 8, before
the slave can lower &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; since &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is required
to be a clocked signal.  This means that the slave must accept a second
request, the request marked number three in Fig. 7, while still waiting
for its second response to the master to be accepted.&lt;/p&gt;

&lt;p&gt;There’s no other way to do handle this new request than to
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt; this
transaction within the slave.  This means that that the slave will need to
hold on to two separate transactions any time the read address channel is
busy while the read response channel is stalled.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. The slave now needs to stall the address channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-4.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the next clock, shown in Fig. 8, the slave can finally lower the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; line to stall the input.  As we noted above, the slave is
required to hold onto both request number three and the second response as
long as the input ready line, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is stalling our whole system.
Failing to do this means that a transaction would get lost in this shuffle.&lt;/p&gt;

&lt;p&gt;Now that both request and response channels have stalled, the system can remain
in this state indefinitely.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. The master releases the response channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-5.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Eventually, the master will raise the ready line, as shown in Fig. 9 on
the right.  Once this happens, the second response can cross the channel.&lt;/p&gt;

&lt;p&gt;Further, the third request can move from the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;internal
buffer&lt;/a&gt;
to the output position on the next clock.&lt;/p&gt;

&lt;p&gt;Because it takes a clock edge to lower the stall signal, request number four
will remain stalled this cycle.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. The slave can now release the request channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-6.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now when we get to Fig. 10, the slave has finally raised its ready signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;, meaning request number four can proceed to the response
channel finishing our example.&lt;/p&gt;

&lt;p&gt;This is the concept we are going to try to implement below.&lt;/p&gt;

&lt;p&gt;Usually when I start to implement something like this, I create a buffer
is-valid signal to indicate that there’s valid information in the buffer.
However, if you look back over the last several charts, you can see that any
time &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is low, there’s data in the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;.
Hence, we’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_ARREADY&lt;/code&gt; as our signal that we have something in
this extra
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
position.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. The read address stall lin doesn&#39;t go low until the buffer is full&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-7.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 11 illustrates the other situation that often confuses me, since I will
catch myself trying to stall the upstream channel anytime the downstream
channel is stalled.&lt;/p&gt;

&lt;p&gt;That’s not how this &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;
works, however.  To do this right,
the upstream channel should only stall if the downstream channel is stalled
&lt;em&gt;and&lt;/em&gt; if there’s an item in the buffer.  Both criteria need to be true.&lt;/p&gt;

&lt;p&gt;We’ll need this tidbit as we move forward.&lt;/p&gt;

&lt;p&gt;So let’s work through our downstream implementation first.&lt;/p&gt;

&lt;p&gt;The downstream response will be invalid following a reset (obviously), but
valid following any incoming request, stalled or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise if the response was valid before and the downstream response channel
was stalled, then we need to maintain the response on the output channel until
it has been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are the straightforward parts of this logic.&lt;/p&gt;

&lt;p&gt;The piece that isn’t quite as straight forward is that if the downstream channel
isn’t stalled, but yet there’s an item in our buffer and so &lt;code class=&quot;highlighter-rouge&quot;&gt;!axi_arready&lt;/code&gt;,
then we also want to set the output response channel as valid.  This was the
situation shown in Fig. 9 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In all other cases, we’ll release the response channel and lower our valid
signal, since all transactions have by now been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what about the data content of this channel?&lt;/p&gt;

&lt;p&gt;First, I’m going to keep this simple.  Our slave will never return
any type of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;.
You can read about what I dislike about allowing slaves to create
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; in my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
properties post&lt;/a&gt; if you
are interested.  Not returning any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; means the response
type is constant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rresp&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OKAY&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was too easy.&lt;/p&gt;

&lt;p&gt;The response data payload is just a touch harder, although we can split into
three basic steps.&lt;/p&gt;

&lt;p&gt;First, on any valid read address transaction, we’ll set the address for
our &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;.
If our 
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
doesn’t contain a valid read request, then this will just be a don’t care
address.  Even better, as long as the buffer isn’t already full, then we can
set the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
address independent of whether there’s a request we are accepting or not.
This helps to satisfy our minimum logic goal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dly_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second step is to determine which address to read from.  If our
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
has valid data in it, then we’ll want to read from this
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;
address, &lt;code class=&quot;highlighter-rouge&quot;&gt;dly_addr&lt;/code&gt;.  In all other cases we can read directly from the
address provided on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The third step is to do the actual read.  In the case of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;,
extraneous reads never hurt.  Therefore we can read any time the outgoing
channel isn’t stalled–regardless
of whether we have an active read request or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If the outgoing channel is not stalled (above)
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// then read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you were implementing any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;hardware registers&lt;/a&gt;
instead of a block &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;,
this is where you would implement the read
from those &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;registers&lt;/a&gt;.
You might also to adjust this logic as well: sometimes read transactions have
side effects, such as in my
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V&lt;/a&gt; design.
In that case, you’d want to add a bit more logic, perhaps even the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If 1. the outgoing channel is not stalled (above)
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// and 2. there&#39;s an outstanding or incoming read request,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// then perform the read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That sets our response data.  Now for the upstream &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; which, as
I mentioned above, also determines when or if we have an item in our buffer.&lt;/p&gt;

&lt;p&gt;The logic here starts by looking downstream.  If we have something in our
buffer, that is if &lt;code class=&quot;highlighter-rouge&quot;&gt;!axi_arready&lt;/code&gt; is true, then as long as the downstream
channel remains stalled with &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; !S_AXI_RREADY&lt;/code&gt; the upstream
channel needs to remain stalled as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Outgoing channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If something is already in the buffer,
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// axi_arready needs to stay low
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the difficult part: If the downstream channel is stalled,
and the upstream channel is passing us data, then we need to accept the
request into our buffer and then immediately stall the upstream channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we didn’t stall the upstream channel &lt;em&gt;until&lt;/em&gt; there was a valid item
in our buffer.  This is the detail I always get confused by which I illustrated
in Fig. 11 above.&lt;/p&gt;

&lt;p&gt;Finally, if the outgoing response channel isn’t stalled, then we can set
the read address ready line to be ready for the next transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all there is to it, although I personally find the pictures above
easier to understand than the code above.  Indeed, if it weren’t for the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
tools, I might’ve gotten this code quite wrong.&lt;/p&gt;

&lt;p&gt;One last figure in this section will illustrate how this logic works.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12. A demonstration of how reads work with this core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-read.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 12 shows the results from a rather complex cover statement found at the
end of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;the file&lt;/a&gt;.
Here you can see that, yes, we did meet our requirements for both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;.
The next piece of good news is that this logic passes our
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
test–but I’ll have more to say on that further down.  Finally, let me say
that I found Figs. 5-11 more instructive about what was going on that
the trace shown in Fig. 12 on the right.&lt;/p&gt;

&lt;p&gt;For now, let’s turn our attention to the more difficult transaction: the
write transaction.&lt;/p&gt;

&lt;h2 id=&quot;write-processing&quot;&gt;Write processing&lt;/h2&gt;

&lt;p&gt;We now need to apply the lessons we just learned from the read channel to the
write channel.  The first lesson is that we’ll need a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;,
and the second lesson is that the return ready signals will also indicate
negatively whether or not buffer is full.&lt;/p&gt;

&lt;p&gt;That’s the easy part.&lt;/p&gt;

&lt;p&gt;If only the write channel were as easy as the read channel.  Indeed, it would
be, if we were able to guarantee that the write address and write data would
both arrive at our slave at the same time.  Sadly, this is not the case.  The
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;two channels, write address and write data, may be separated by up to two
clocks&lt;/a&gt;.  We’ll need to
synchronize those two channels here, however, since we can’t perform the
write transaction internal to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;our slave&lt;/a&gt;
without having both the required address and the required data.  That
then will be the challenge of this section.&lt;/p&gt;

&lt;p&gt;Let’s think this through for a moment before sprinting ahead this time.  We
can complete a write transaction any time the following three conditions hold.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The outgoing response channel must not be stalled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We must have the address of where we need to write.  This can be
either in our buffer, or coming directly from &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWADDR&lt;/code&gt;.  Yes, we’ll
need to buffer the address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We must have the data of what we wish to write as well.  This also includes
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;the write strobes&lt;/a&gt;,
indicating which bytes in our data word need to be written.  This channel
will also need to be buffered, just like the write address channel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As before, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_AWREADY&lt;/code&gt; to indicate that we have a value in
our address buffer, and &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_WREADY&lt;/code&gt; to indicate that we have a value in our
data buffer.&lt;/p&gt;

&lt;p&gt;That’s going to be our basic approach.  Now let’s just work through the
various signals.&lt;/p&gt;

&lt;p&gt;Let’s start with the write address channel ready signal, and the logic that
would be appropriate if there were no write data channel.  That is, set the
ready on reset, then deal with the case where the outgoing buffer is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now when I say that the outgoing buffer is stalled, I mean that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;
is true and so there’s a value waiting to be returned.  I also mean that
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; is false, meaning that this value can’t go any where.  This
leaves us with two conditions to check, as shown in Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Stall conditions if the response channel is already stalled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-1.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If the output channel is stalled and our buffer already full, then we need
to remain stalled.  This is the case shown on the right above.  Likewise if
the output channel is stalled and we just accepted a value, then we need to
lower the ready line of &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt;.  This is shown on the left above.
In either case, we need to drop the ready signal for this channel.  However,
if there’s nothing in our buffer and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; is low (not shown),
then we can just leave our buffer empty.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// The output channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If our buffer is full, remain stalled
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If the buffer is empty, accept one transaction
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// to fill it and then stall
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That wasn’t too bad, and it was roughly identical to what we did before.&lt;/p&gt;

&lt;p&gt;Now let’s look at the case where the output isn’t stalled, as shown in Fig. 14
below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. Two conditions preceeding a write address channel being ready&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-2.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left side of Fig. 14 shows the case where a write data is coming into our
core, and the right side shows the case where the write data is already within
our core and stalled.  In both cases, we’ll want to make certain that the write
address channel is ready to accept an associated address.&lt;/p&gt;

&lt;p&gt;But what’s happening on the write address channel?  It doesn’t matter.  Either
an address is coming in or it isn’t.  If no address comes in, then the
&lt;em&gt;write data&lt;/em&gt; channel will have to stall–not the &lt;em&gt;write address&lt;/em&gt; channel.
We are working through the write address channel, so that doesn’t impact
us here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is clear, and write data
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// are available
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one final condition, shown below in Fig. 15.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15. What happens when the response channel is ready, but the address shows up before the data&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-3.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What happens when there’s no data available from the data channel and a valid
address shows up?  There’d be no data to go with it!  We’ll have to then stall
until there’s data ready.  Two examples of this are shown above in Fig. 15.
If neither example is fits, then we can set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; otherwise we’ll
need to stall.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we were ready before, then remain ready unless an
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// address unaccompanied by data shows up
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you get all that?&lt;/p&gt;

&lt;p&gt;The write data ready signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt;, has the same identical logic as
that of the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; signal save that the write data and address channel
information are reversed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is clear, and a write address
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// is available
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// if we were ready before, and there&#39;s no new data avaialble
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to cause us to stall, remain ready
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What does it mean to buffer the transaction in this context?  For the write
address channel, it means capturing the incoming address.  Remember,
our buffer is valid any time &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; is low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Buffer the address
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same applies to the write data channel.  We’ll want to make a copy of it
any time we accept a value.  Then, if we end up accepting a value while the
output is stalled or likewise if we have no address, this will become the
buffered value waiting to be written to the address that hasn’t yet been given.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Buffer the data
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a moment we’ll do our write and move the operation to the output buffer.
But not until the address and data are synchronized.  Here, we pick between
either the buffered address or the incoming address for that write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read the write address from our &quot;buffer&quot;
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_waddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, we need to pick between the buffered data and the incoming data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read the write data from our &quot;buffer&quot;
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is finally time to write to our &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;slaves
registers&lt;/a&gt;.
Remember our three conditions for writing that we presented above?  Here
they are again: We can write if there’s a place available in the outgoing
channel, if we have a valid address, and if we have valid data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// If the output channel isn&#39;t stalled, and
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we have a valid address, and
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we have valid data
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s been a while since &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;I’ve discussed byte enable or select
lines&lt;/a&gt;.  The basic
idea is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt; signal contains which of the various octets
on the bus should be written by the given value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Vivado’s auto-generated slave core&lt;/a&gt;
uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop to walk through the various select lines and their associated
bytes.  While this works, I find it harder to read than the code above.
Further, since &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx requires&lt;/a&gt;
that the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite bus&lt;/a&gt;
be only ever 32-bits wide, the code above should be widely applicable.&lt;/p&gt;

&lt;p&gt;That leaves only one step left: adjusting &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bvalid&lt;/code&gt; to acknowledge
that a write has taken place.  The code below almost follows our three
conditions above, though it skips the first one.  As it turns out, it doesn’t
matter if the output is valid but the bus master isn’t ready:
we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; high either way using the logic below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The outgoing response channel should indicate a valid write if ...
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 1. We have a valid address, and
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 2. We had valid data
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// It doesn&#39;t matter here if we are stalled or not
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// We can keep setting ready as often as we want
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oops, I forgot one: as with the read channel, our write response won’t return
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OKAY&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s what it takes to write to an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI slave
peripheral&lt;/a&gt;
tuned for high
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.
I hope the pictures along the way helped.  I know I tend to struggle getting
the logic right for a basic &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;
as we’ve done above.  Without the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verification component&lt;/a&gt;,
I’m not sure I’d have much confidence doing this.&lt;/p&gt;

&lt;p&gt;Fig. 16 below shows an example trace drawn from the logic of this core.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16.  Write demonstration through an improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left side of this trace shows several examples of how the logic might stall.
The right side, on the other hand, shows that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
truly can handle one transaction per clock.&lt;/p&gt;

&lt;p&gt;Shall we discuss what it takes to verify
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this design&lt;/a&gt;?
It’s actually &lt;em&gt;really&lt;/em&gt; easy to do now that we have a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
list&lt;/a&gt;
put together for the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite bus&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Verifying&lt;/a&gt;
this design isn’t all that much more difficult than &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;the last design
we verified&lt;/a&gt;.  Really,
it isn’t.&lt;/p&gt;

&lt;p&gt;The first step is to instantiate our set of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite bus
properties&lt;/a&gt;.
This big ugly block of code only looks that way because there are so many
signals associated with this protocol.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Allow a maximum of 2^4-1 or 15 transactions to be in flight at
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// any given time
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If I wasn’t interested in passing
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
I might be willing to stop right here.  However,
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
is a powerful tool and I’ve learned to depend on its ability to prove that
a design will maintain a set of properties for all time.&lt;/p&gt;

&lt;p&gt;So let’s look at the few properties that are necessary for passing the
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
step.&lt;/p&gt;

&lt;p&gt;Let’s start by examining three read properties.  First, if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is
low, then there shouldn’t be any outstanding read transactions at all.  Our
code should match the counter from within our
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;property set&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, if the output is valid but stalled, then we may have accepted either
one or two read requests.  If we have something in our buffer, then
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; will be low and we will have accepted two requests.  In all other
examples, we’ll have only accepted one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those same properties can now be applied to our write channel, but with one
subtle difference.  The write channel contains two separate channels whose
counts must be checked.&lt;/p&gt;

&lt;p&gt;First, if the output is valid then each channel, address and data, must have
accepted at least one request.  The two channels may have accepted a second
request as well, but only if they currently have one
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if no output is valid, then each channel must either have
nothing outstanding, or it must have one valid and be waiting on the other
channel.  These two options are shown in Fig. 17 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 17. A demonstration of how reads work with this core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-4.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;They are described in properties below.  Note that it is an error for both
buffers to contain a value if &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bvalid&lt;/code&gt; is false.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/demoaxi.sby&quot;&gt;script
for this core here&lt;/a&gt;.
Only twenty six steps are necessary to prove that we meet all of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;bus
properties&lt;/a&gt;
I presented in our &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;last AXI-lite
article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cover-properties&quot;&gt;Cover properties&lt;/h2&gt;

&lt;p&gt;Only one requirement remains to be shown from our initial goals above.  We’ve
shown that we can meet our
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus interface requirements&lt;/a&gt;, but can
we truly accomplish maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
as we wanted?&lt;/p&gt;

&lt;p&gt;Let’s see if we can push four values through this slave, retiring one read
on each of four clocks.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RREADY&lt;/code&gt; will be true any time
a return value is accepted, than if this value is high for four clocks in
a row we’ll know
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;our core&lt;/a&gt;
has the ability to as fast as &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the
specification&lt;/a&gt;
will allow it to go.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why four clocks though?  Because I wanted some confidence that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
could truly handle retiring one request per clock without requiring it
be stalled while the pipeline filled up.&lt;/p&gt;

&lt;p&gt;The same approach applies to the return path.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That concludes our examination of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve now not only built an interface with a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;,
but we’ve also managed to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt;
that it works.  Indeed, I would have no
confidence that this worked were it not for the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me share another secret with you: Often, while writing articles like this
one, I’ll find something I want to tweak in the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;example code I’m presenting&lt;/a&gt;.
Usually
this is to make the code easier to read and explain, although sometimes I
touch things up to remove extraneous logic as well.  However,
I also want to make certain that the slightly changed code still works.  As a
result, every time I make a change I’m re-running the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification
proof&lt;/a&gt; to
make certain I haven’t introduced changes in the process.  Usually this means
I can greatly simplify a design for presentation.  In this case, the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools also caught a check for &lt;code class=&quot;highlighter-rouge&quot;&gt;if (ready &amp;amp;&amp;amp; ready)&lt;/code&gt; instead of
&lt;code class=&quot;highlighter-rouge&quot;&gt;if (valid &amp;amp;&amp;amp; ready)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I might argue that
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
designs is really easy when
using &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;!  If you haven’t
tried it yourself, let me encourage you to do
so.  Just the ability to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;verify an AXI-lite
core&lt;/a&gt; alone and find bugs
that Xilinx’s VIP wasn’t able to find should give you some confidence when using
the tool.  Wait, did I just say their VIP couldn’t find these bugs?  While I
really don’t know that to be the case, I am drawn to such a conclusion.  I mean,
why would they publish a broken code generator unless they had tried to verify
it only to receive a false positive suggesting that it worked when it didn’t?&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is now the second article in a short series about the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite
bus&lt;/a&gt;.  The
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;first article&lt;/a&gt;
discusses how I created the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite property
file&lt;/a&gt;
which was used to verify &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;the slave
implementation&lt;/a&gt;
we discussed above.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;repository containing&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
also contains several bridge cores to include an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;AXI-lite to
wishbone core&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axilite.v&quot;&gt;wishbone to AXI-lite
bridge&lt;/a&gt; and
even a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to full AXI
bridge&lt;/a&gt;.  If you
look around, you might also notice that I have a similar property files posted
there for both the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fwb_slave.v&quot;&gt;Wishbone&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d like to come back to this topic in the future and discuss a &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full
AXI&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
bridge as well as the properties necessary to verify it.  That
project and post, however, will need to wait for another day.&lt;/p&gt;

&lt;p&gt;Another possibility future post would be to discuss how easy it can be to build
the complex cover statements used to demonstrate
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
above.  This approach offers an alternative to the &lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;s that SVA
supports but which the free version of
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;
does not.  That will also need to wait for another day as well.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Judgment also will I lay to the line, and righteousness to the plummet: and the hail shall sweep away the refuge of lies, and the waters shall overflow the hiding place. (Is 28:17)&lt;/em&gt;</description>
        <pubDate>Sat, 12 Jan 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2019/01/12/demoaxilite.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/01/12/demoaxilite.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ZipCPU highlights from 2018</title>
        <description>&lt;p&gt;It’s hard to believe that the first full year of the &lt;a href=&quot;&quot;&gt;ZipCPU
blog&lt;/a&gt; has now come and gone.  Last year I only blogged
for a half a year, starting in May of 2017.  2018, however,
contained a full year of blogging.  The pace of the blog has settled down
a touch, adjusting from moving quickly early on, when I had nothing
better to do and a lot of designs to discuss, to the current pace
as I’ve had to spend my time building new designs to blog about
and even managing to make a touch of money along the way.&lt;/p&gt;

&lt;p&gt;Shall we look together across the last year and take stock in what has taken
place?&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 1.  My design methodology changed, once I experienced formal methods&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-with-formal.png&quot;&gt;&lt;img src=&quot;/img/2018-with-formal.png&quot; alt=&quot;&quot; width=&quot;463&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Towards the end of 2017, I &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;tried my hand at formal verification for the very
first time&lt;/a&gt;.
This was at the request of the &lt;a href=&quot;https://twitter.com/ico_TC/&quot;&gt;SymbiYosys
developers&lt;/a&gt;.  Since I was a poor contractor
with no contract at the time, I figured I had nothing to lose.  Much
to my surprise, I quickly discovered I wasn’t the awesome Verilog developer
I imagined myself to be.  Working my way &lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;from core to core within the
ZipCPU&lt;/a&gt;,
I found and fixed bug after bug in components that I had thought were
“working”.&lt;/p&gt;

&lt;p&gt;I would’ve never found these bugs without using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2.  First formal methods course&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-formal-course.png&quot;&gt;&lt;img src=&quot;/img/2018-formal-course.png&quot; alt=&quot;&quot; width=&quot;463&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As a result, I became a &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;fast believer in formal
methods&lt;/a&gt;.  I
moved quickly, and even created a
&lt;a href=&quot;/projects.html&quot;&gt;formal verification course&lt;/a&gt;
which I was pleased to teach both at multiple corporate
facilities, and to several individuals online.  If this is something that
interests you, I’m currently charging $4,000 plus travel expenses to come to
your facility and teach formal verification to up to six individuals at
a time.  Alternatively, I have been known to teach one or two individuals
at a time via video chat.&lt;/p&gt;

&lt;p&gt;Perhaps what surprises me the most about my new-found love for
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
is that I’ve earned a bit of a reputation for being a formal verification
evangelist.  While others may see me this way, this is not how I envision
either myself or my own journey.  My goal has
never been formal verification as an end in itself.  My goal has always been
to earn a wage by producing working designs.  To date, I know of no better
method to do this than to use formal verification along the way.
It’s fast.  It’s easy.  It will lead you right to any bugs.&lt;/p&gt;

&lt;p&gt;This is also why the blog has shifted over the last year to placing so much
emphasis on formal verification: it works, it works well, and I also find
it to be a lot of fun.&lt;/p&gt;

&lt;h2 id=&quot;zipcpu-development&quot;&gt;ZipCPU Development&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 3. The ZipCPU&#39;s Structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.svg&quot; alt=&quot;&quot; width=&quot;463&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU’s ISA&lt;/a&gt;
has remained constant over the last year, that doesn’t
mean that there’s been no work done on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  The biggest news on this
front is that I was able to spend some time to &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verify the
ZipCPU as a whole&lt;/a&gt;,
and then present some of the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf2018.pdf&quot;&gt;lessons I’d learned at
ORCONF2018&lt;/a&gt;.  Perhaps
you’ve seen &lt;a href=&quot;https://www.youtube.com/watch?v=7DHV_rJKSgo&quot;&gt;the video of my
presentation&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Since that time, I’ve had the opportunity to go back and rework the proof
of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  The proof is
now faster, cleaner, and “cheaper” (fewer clock cycles) than ever before.&lt;/p&gt;

&lt;p&gt;That’s not all, though.  The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
now runs on its first &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;iCE40 board–the ICO
board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other big improvements include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; now has a &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/core/dcache.v&quot;&gt;(formally
verified) data cache&lt;/a&gt;!&lt;/p&gt;

    &lt;p&gt;This is one of the first of several rather complex cores I’ve built where
I started with formal.  In hind sight, I’m not sure I could’ve built &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/core/dcache.v&quot;&gt;this
data cache&lt;/a&gt;
without &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.  If the
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord wills&lt;/a&gt;,
I’ll have the opportunity to present &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/core/dcache.v&quot;&gt;this cache
implementation&lt;/a&gt;
here on this blog.&lt;/p&gt;

    &lt;p&gt;I later came back to &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/core/dcache.v&quot;&gt;this
data cache&lt;/a&gt;
and optimized it for single cycle reads and writes, although peripheral
writes are still multicycle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;CPU proof now uses SymbiYosys
throughout&lt;/a&gt;.  The
result is faster and cleaner, and easier to verify multiple separate
configurations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I finally fixed the bug in the CPU that was preventing the simulation
script from starting the CPU at any location other than the reset address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I found a way to optimize both the divide, and a regular &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/slowmpy.v&quot;&gt;shift and add
multiply&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/slowmpy.v&quot;&gt;optimized
multiply&lt;/a&gt;
uses less than 50% of the original logic,
whereas the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;(now optimized)
divide&lt;/a&gt;
uses about 20% less than before.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipCPU toolchain&lt;/a&gt;
now supports soft floating point via the &lt;a href=&quot;https://wiki.osdev.org/libgcc&quot;&gt;libgcc
library&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; remains a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/spec.pdf&quot;&gt;highly
configurable CPU&lt;/a&gt;.  Over this
last year, configuration options have been carefully changed from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpudefs.v&quot;&gt;internal
macros&lt;/a&gt; to
parameters.  Such parameters are easier to control from the &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;external
environment&lt;/a&gt;,
meaning that the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpudefs.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpudefs.v&lt;/code&gt;
file&lt;/a&gt;
now only sets the CPU default options–the
&lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;environment&lt;/a&gt;
may still override them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All of the proofs have been rebuilt so that only the multiple clock
domain cores (not found internal to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;) use the (now
superseded) &lt;a href=&quot;https://www.clifford.at/yosys/cmd_clk2fflogic.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clk2fflogic&lt;/code&gt;
yosys option&lt;/a&gt; option,
or its &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html#options-section&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multiclock on&lt;/code&gt; SymbiYosys replacement&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If nothing else, I’d like to think that &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verifying a
CPU&lt;/a&gt; now ranks
me among the category of those who know how to do
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ri5cy&quot;&gt;Ri5cy!&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://www.symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt;, I’ve now had the
opportunity to formally verify a CPU that wasn’t one of my own designs.
Using &lt;a href=&quot;https://github.com/SymbioticEDA/riscv-formal&quot;&gt;riscv-formal&lt;/a&gt;, I
verified the &lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;Ri5cy soft core CPU&lt;/a&gt;.
Yes, I did find discrepancies between the operation of the
&lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;Ri5cy core&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/SymbioticEDA/riscv-formal&quot;&gt;riscv-formal&lt;/a&gt; formal
property list.  Those have been delivered to the
&lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;Ri5cy&lt;/a&gt; team,
and hopefully they have been fixed by now.  (I haven’t checked.)&lt;/p&gt;

&lt;p&gt;It still floors me that I’ve managed to go from knowing nothing about
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
to &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verifying not only my own
CPU&lt;/a&gt;,
but also &lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;someone else’s CPU&lt;/a&gt;
in my first year of working with &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Three thoughts come to mind.  First, I’m just getting started.  Second, this
has been a &lt;em&gt;lot&lt;/em&gt; of fun.  Third, if a beginning FPGA developer can do it,
so can a more experienced one.&lt;/p&gt;

&lt;h2 id=&quot;autofpga&quot;&gt;AutoFPGA&lt;/h2&gt;

&lt;p&gt;If you aren’t familiar with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
then just remember: this is the tool I use to compose designs together.
It is designed to make it easy to reconfigure a design, by adding or removing
a peripheral.  Unlike its Vivado or Platform Designer counterparts,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is open source, generates an open source interconnect, and does this
in a way where you can examine the source code of the process at every
step of the way.&lt;/p&gt;

&lt;p&gt;While I use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
religiously within &lt;a href=&quot;/projects.html&quot;&gt;my own projects&lt;/a&gt;,
I’ll also be the first to admit that
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;the project&lt;/a&gt;
isn’t all that mature.  It works well once a
project is set up that uses it, and it works well for pipelined
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone buses&lt;/a&gt;.
It does not (yet) work well for any other types of buses,
and I already know that the interconnect it generates would not pass &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification (yet)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
has seen quite a few upgrades over 2018.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I recently &lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;blogged about the AutoFPGA linker script generation
upgrade&lt;/a&gt;,
allowing it to create and support multiple types of linker scripts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
was designed from the beginning to allow a sort of script-inheritance,
I only started playing with it recently in my
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt;
project.  I like it!  It makes creating &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;WB
scope&lt;/a&gt;
scripts as simple as referencing the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/wbscope.txt&quot;&gt;prior
script&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/flashscope.txt&quot;&gt;only overriding the parts you need
to&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Constraint insertions&lt;/p&gt;

    &lt;p&gt;In &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;one of my designs&lt;/a&gt;, the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/enetpackets.v&quot;&gt;ethernet
core&lt;/a&gt;
runs at one clock speed and the core system clock speed at another.  This
has required the addition of many false paths into the constraint file
in order to support the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;Wishbone
Scope&lt;/a&gt; that &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crosses
both clock domains&lt;/a&gt;.
Even though the &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/wbscope.v&quot;&gt;Wishbone
Scope&lt;/a&gt;
handles all of the &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock-domain
crossings&lt;/a&gt; properly,
Vivado complains about them.  These false paths keep Vivado from
complaining.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can now copy false path constraints from a configuration file to the
constraint file when the core is inserted into the design, or remove
them from the constraint file when the core is removed from the design.
This keeps Vivado from complaining, and makes it easier to reconfigure
the design with a &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross-clock&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multiclock support&lt;/p&gt;

    &lt;p&gt;Some time ago, &lt;a href=&quot;/blog/2018/09/06/tbclock.html&quot;&gt;we discussed what it took to get multi-clock support from
Verilator&lt;/a&gt;.  This
technique is now working very nicely with 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
in more than one design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
work has involved the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus, version B4 in its simple pipelined mode&lt;/a&gt;.
Currently,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
only really supports this
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That said, &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;I’ve had to work with other bus structures as
well&lt;/a&gt;.  As I’m sure
you will reflect, there is &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;nothing more painful to debug than a broken bus
structure: it can take down the entire design, to include any debug structures
you have for finding and catching
bugs&lt;/a&gt;.  Therefore,
my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;bus bag of tricks&lt;/a&gt; now includes
formal properties for not only WB, but also the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt;
and &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite buses&lt;/a&gt;.
This also includes &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/rtl&quot;&gt;various formally verified
bridges&lt;/a&gt; between these
buses.&lt;/p&gt;

&lt;p&gt;Perhaps you recall &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;how easy it was to verify an AXI-lite peripheral, and to
find bugs within Xilinx’s demonstration
design&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;If the &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord is willing&lt;/a&gt;, I
hope to add the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI bus&lt;/a&gt; to my
repertoire of buses I can formally verify with confidence.&lt;/p&gt;

&lt;p&gt;I’d also like to build a set of formal properties that can be used to
formally verify my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
bus interconnect.  I’m aware that there are some
subtle bugs within the interconnect as built, and I’d love to build a better
interconnect that could be formally verified to be bug free.  Specifically,
if you access more than one peripheral in the same bus cycle, you might
get your acknowledgments mixed or lost upon return.  If done properly,
this would place
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
one step above its competitors which can compose designs together, but cannot
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
that the sum of the parts even works in the end.&lt;/p&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;

&lt;p&gt;I’ve now counseled quite a few individuals on-line as they’ve worked
through their bachelor or even graduate theses.  Of those who have taken the
time to join me learning &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal
Verification&lt;/a&gt;,
none have been disappointed.  Here’s a quote from one particular
individual who was building first just a
&lt;a href=&quot;https://uknowledge.uky.edu/cgi/viewcontent.cgi?article=1250&amp;amp;context=gradschool_theses&quot;&gt;line-associative register set&lt;/a&gt;, and then a full-blown
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. A thankful student&#39;s experience&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/fl4shk-on-formal.png&quot;&gt;&lt;img src=&quot;/img/tweets/fl4shk-on-formal.png&quot; alt=&quot;&quot; width=&quot;954&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;There’s always a reason for &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; in
digital design.  This person was the lucky one.
His design worked when he handed it in.&lt;/p&gt;

&lt;p&gt;One other individual I remember started his journey on IRC and asked what
language he should learn.  I counseled him to learn Verilog, since the free
version of &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
works with Verilog.  He chose VHDL instead, since “Europeans
use VHDL more than Verilog”.  (Really??)  Two days after he started, he came
back on-line asking what was wrong with his design.  I then told him, had
he chosen to use the free
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
tools with Verilog, he would have had his answer right now.&lt;/p&gt;

&lt;p&gt;What do you think?  Do you think I might be a bit biased?  Perhaps.  But my
bias is towards what has worked for me, and I’ve now found more bugs in
my own designs using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
than I found with any of my prior testing approaches.&lt;/p&gt;

&lt;h2 id=&quot;beginners-tutorial&quot;&gt;Beginners Tutorial&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. A slide from the FSM tutorial&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/tutorial&quot;&gt;&lt;img src=&quot;/img/2018-tutorial-ledsequence.png&quot; alt=&quot;&quot; width=&quot;462&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this remains a work in progress, I have put together the
&lt;a href=&quot;/tutorial/&quot;&gt;first six of what I hope will be about ten lessons for beginning digital
designers&lt;/a&gt;.  These lessons tie
beginning level Verilog lessons together with
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;Verilator simulation and
co-simulation&lt;/a&gt;
lessons and even introduce the topic of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
as well.&lt;/p&gt;

&lt;p&gt;My thesis behind this work has been that too many students take a course
in Verilog that teaches them only the semantics of the language and nothing
about the skills they actually need to do design.  Worse, the new student
spends too many hours learning Verilog, and as a result learns the Verilog
syntax to describe simulation as well.  On top of that, the student then
gets the two confused when he comes to building his first
complex design.  So rather than taking separate courses in Verilog,
simulation, formal verification, and then (finally) FPGA design, the
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; I’m working on mixes
lessons from all four of these topics together in order to teach
FPGA design.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 6.  The tutorial remains a work in progress&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/work-in-progress.png&quot; alt=&quot;&quot; width=&quot;134&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While I haven’t had that much feedback from the
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;, those who have
contacted me have either said it was wonderful, or they’ve
given me the feedback necessary to make it better.&lt;/p&gt;

&lt;p&gt;I’m looking forward to completing
&lt;a href=&quot;/tutorial&quot;&gt;this tutorial&lt;/a&gt;
in the new year, should the
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord be willing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;top-ten&quot;&gt;Top Ten&lt;/h2&gt;

&lt;p&gt;It’s now time to present the top ten articles on the ZipCPU blog from 2018!&lt;/p&gt;

&lt;p&gt;The fact that this is my second year with the blog means there
are now two different measures I can use to determine what the top ten
articles are.  I could list the top ten articles written this year by their
number of hits, or I  could list the top ten articles by number of hits
regardless of when they were written.  Even better, can’t we do both?&lt;/p&gt;

&lt;p&gt;So let’s start with the top ten articles written in 2018.  Along the way,
I’ll share how many hits each article has had, and how the article fairs
under a web-search for it.  I’ll use &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;
for this purpose, since I’m afraid
&lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; knows me well enough to tailor the results
and so show the &lt;a href=&quot;&quot;&gt;ZipCPU blog&lt;/a&gt; articles at the top of its
list.  Starting with number ten then:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Cyclone-V design structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/de10-design.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Debugging a Cyclone-V&lt;/a&gt;, with 935 hits&lt;/p&gt;

    &lt;p&gt;This year marked my first work with a Cyclone-V SoC+FPGA design.
I’m sure it will surprise no one to learn that it took a little more
creativity than normal to debug the design.  Having done that, there was
quite a surprise I found along the way.&lt;/p&gt;

    &lt;p&gt;Searching
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “cyclonev debugging”
yielded this article as the number one result.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. Interpolation by Superposition&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/interpolation-superposition.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2018/01/16/interpolation-is-convolution.html&quot;&gt;Interpolation is just a special type of convolution&lt;/a&gt;, with 940 hits&lt;/p&gt;

    &lt;p&gt;This was one of my big &lt;a href=&quot;/dsp/dsp.html&quot;&gt;DSP&lt;/a&gt; hits for
the year, proving that a signal
processing interpolator was nothing more than a convolution.  This is a
really big result for anyone into signal processing, simply because it
means that you can study your interpolation method in terms of the
Fourier transform of the filter representation of your interpolator.&lt;/p&gt;

    &lt;p&gt;Searching
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “interpolation convolution”
yielded this article as the number one result.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer: A simple countdown timer&lt;/a&gt;, with 1,091 hits&lt;/p&gt;

    &lt;p&gt;While I know I dig into some deep, difficult, and complex topics from time
to time, blogging about the ZipTimer was light and fun.  This article
followed the development of a counter all the way from being a simple
count-down counter, to an interval timer, to a programmable interrupt
timer peripheral.  As such, it has something for everyone from the
beginning designer on up to the SoC designer.&lt;/p&gt;

    &lt;p&gt;Oh, and yes, I even went so far as to show how you might formally verify
the timer peripheral as well.&lt;/p&gt;

    &lt;p&gt;This article was harder to find on 
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;.  It didn’t show up on either the
first or second page after searching for either
“FPGA interrupt timer” or
“programmable FPGA interrupt timer”.  It did show up as the number one
hit for “ZipTimer”, but that’s kind of cheating, so we won’t count that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/04/sim-mismatch.html&quot;&gt;Reasons why Synthesis might not match Simulation&lt;/a&gt;, with 1,143 hits&lt;/p&gt;

    &lt;p&gt;Those who’ve followed the blog know that I’ve dedicated it to keeping
digital design engineers out of &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;.  One of the more frustrating
positions to find yourself in is the one where everything works in the
simulation, but nothing works on the hardware.&lt;/p&gt;

    &lt;p&gt;I’ll admit, writing about this article today feels like DeJa Vu all over
again, simply because I’m struggling with this problem even today on a
design I’m working with.&lt;/p&gt;

    &lt;p&gt;A &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;
search for “Synthesis simulation mismatch” yield’s this article as number
eleven.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9: ZipCPU Instructions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-insns.png&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;A Quick Introduction to the ZipCPU Instruction
Set&lt;/a&gt;, with 1,326
hits&lt;/p&gt;

    &lt;p&gt;Thank you to all who have indicated an interest in the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU’s ISA&lt;/a&gt;!  This
article presents a basic introduction to that ISA, explaining the basics
of how it is laid out.&lt;/p&gt;

    &lt;p&gt;Unlike many RISC-based CPUs, the ZipCPU only has a 5-bit opcode space.
This limits the number of possible instructions to roughly 32. Of course,
a CPU is more than just its opcodes, so the article also presents the
register set of the ZipCPU, the basic form of an instruction’s operands,
how most instructions can be executed conditionally, and much more.&lt;/p&gt;

    &lt;p&gt;It should come as no surprise that this is the top article returned
following a &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; search for
“ZipCPU instruction set.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. Basic Flash I/O chip pins&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-io-pins.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;How to build a SPI Flash Controller for an
FPGA&lt;/a&gt;, with 1,378 hits&lt;/p&gt;

    &lt;p&gt;Although it doesn’t show it on the hits for this page, this article really
starts out with a description of &lt;a href=&quot;/formal/2018/07/14/dev-cycle.html&quot;&gt;what formal development looks like in
practice&lt;/a&gt;.  That
description goes over the development of this &lt;a href=&quot;/2018/08/16/spiflash.html&quot;&gt;SPI flash
driver&lt;/a&gt;.  It was only some
time later, after I’d worked with the driver for a bit, that I wrote up
&lt;a href=&quot;/2018/08/16/spiflash.html&quot;&gt;this essay describing the SPI flash
driver&lt;/a&gt;, and what the
important parts to it are.&lt;/p&gt;

    &lt;p&gt;In many ways, I’m rather surprised and flattered that this article was
so well received.&lt;/p&gt;

    &lt;p&gt;Searching &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “spi flash controller”
yielded a touch of a surprise.  Their number one article referenced
my &lt;a href=&quot;https://opencores.org/projects/qspiflash&quot;&gt;Quad SPI Flash Controller on
OpenCores&lt;/a&gt;.  The number five
reference was this article.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. In an Asynchronous FIFO, the pointers need to cross clock domains&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/afifo-internals.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;Crossing clock domains with an Asynchronous FIFO&lt;/a&gt;, with 1,434 hits&lt;/p&gt;

    &lt;p&gt;To me, this &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO
article&lt;/a&gt; was
or at least should have been one of the big hits of the year.  In many
ways, I’m surprised this article didn’t take off with more hits than
a fourth place finisher.  An &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFO&lt;/a&gt; is just so useful
in so many designs, that any digital designer should really understand
how one is built.  Further, unlike &lt;a href=&quot;http://www.sunburst-design.com/papers/CummingsSNUG2002SJ_FIFO1.pdf&quot;&gt;other presentations you might come
across&lt;/a&gt;,
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;this presentation&lt;/a&gt; also
includes properties that can be
used to formally verify that an asychronous FIFO even works in the first
place.&lt;/p&gt;

    &lt;p&gt;If you’ve ever needed to move lots of data across a clock domain boundary,
and eventually we all need to do it, then you will want to read and
understand this article.&lt;/p&gt;

    &lt;p&gt;Searching &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “asynchronous FIFO”
yielded this article as number twelve on its list.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12. Spectral representation of speech&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-echoes-burning-bush.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;An Open Source Pipelined FFT Generator&lt;/a&gt;, with 2,288 hits&lt;/p&gt;

    &lt;p&gt;Some of the readers of this blog had indicated that it felt like I was only
writing for hobbyists.  Because the focus of the blog has been on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, a design
built for low logic implementations, they felt that the tools and
techniques discussed here didn’t really apply well to the more
industrial applications they had come across in their experience.&lt;/p&gt;

    &lt;p&gt;While this is far from true, I can understand how they came to this
conclusion.  One of my difficulties, as an author, is to present
a complete topic in each article.  This limits the things I might post
about to things that can fit, from beginning to end, within a single
article.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;This FFT article&lt;/a&gt;
pushed those limits.  While I didn’t discuss the FFT implementation in
its full gory detail, I did point out that 1) it had been formally
verified, 2) many of the pieces weren’t all that hard to do,
3) one or two were very hard, and 4) it discussed at a broad level how
I went about solving these issues.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; apparently thought this article
was a hit, since it comes up as number two following a search for
“FFT generator.”  I’m not sure this is a good or bad thing, since I have
to imagine that most folks looking for an “FFT generator” are looking
for something like FFTW.  Still, I’m flattered.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tutorial&quot;&gt;Verilog Beginner’s Tutorial&lt;/a&gt;, with 2,706
hits.&lt;/p&gt;

    &lt;p&gt;In many ways, this isn’t a fair comparison: this web-page isn’t really
an blog or article on it’s own, but rather a tree node pointing to several
tutorial PDFs.  Unlike the blog pages, someone might visit this tutorial
page many times over.  However, I’m including it here because the number
of hits on this page was relatively high compared to all of my other
blog articles.&lt;/p&gt;

    &lt;p&gt;Looking for this page by searching on “verilog tutorial”
on &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; found nothing.  On the other hand,
a search for “beginning Verilog tutorial” found this tutorial as number
seven on their search results.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord wills&lt;/a&gt;,
we’ll bump this result higher next year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;About the ZipCPU&lt;/a&gt;, with 12,710 hits&lt;/p&gt;

    &lt;p&gt;Like the &lt;a href=&quot;/tutorial&quot;&gt;Verilog Beginner’s Tutorial&lt;/a&gt;,
this isn’t really a blog post.  However, it did go viral this year after
someone posted it to Hacker News.  Because it got so much attention,
it only makes sense to list it here.&lt;/p&gt;

    &lt;p&gt;How viral did this page become?  Well, you can see in Fig. 13 below.
Fig. 13 shows the distribution of &lt;a href=&quot;&quot;&gt;ZipCPU.com&lt;/a&gt;
page views across all of 2018.  The hits for this &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU about
page&lt;/a&gt; form the largest spike
in page views over the course of the entire year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13.  2018 Page Views of the ZipCPU blog&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-yearly-pageviews.png&quot;&gt;&lt;img src=&quot;/img/2018-yearly-pageviews.png&quot; alt=&quot;&quot; width=&quot;961&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It should come as no surprise that a search for “ZipCPU” using
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; yield’s the &lt;a href=&quot;&quot;&gt;blog&lt;/a&gt;
first, and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;about page for the
ZipCPU&lt;/a&gt; second.&lt;/p&gt;

&lt;p&gt;Let’s now look at our top hits overall for the year, this time including
articles written in 2017 as well as those written in 2018.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14: A Generic Filter Implementation structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-form.svg&quot; alt=&quot;Generic FIR implementation structure&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;Implementing the Moving Average (Boxcar)
filter&lt;/a&gt;, with 3,653 hits&lt;/p&gt;

    &lt;p&gt;As you may recall, a 
&lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;boxcar filter&lt;/a&gt; is a
very basic filter that just averages values together.  It’s a very basic
filtering component, one that is easy to build and easy to use.  This
article describes that component, and was apparently well received last
year.&lt;/p&gt;

    &lt;p&gt;If you search &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “Moving average
filter, verilog”, this comes up as the number two answer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;Minimizing FPGA Resource Utilization&lt;/a&gt;, with 3,658 hits&lt;/p&gt;

    &lt;p&gt;This article traces many of the design choices I needed to make in order
to get a multi-processing system running on a Spartan 6/LX9.  It’s a fun
article, explaining the basics of what LUTs are and how to count LUTs
when reading your code.&lt;/p&gt;

    &lt;p&gt;As I understand things, I think this particular article went viral last
year before I was counting page views.  By the time I started counting
page views, it was no longer the highest hitting page.  This year, it
comes back again as number nine.&lt;/p&gt;

    &lt;p&gt;A quick search on “minimizing LUTs” using
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; turns this up this article as its
number one search result.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 15: The CORDIC problem description&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cordic-problem-setup.svg&quot; alt=&quot;Setting up a CORDIC&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;Using a CORDIC to calculate sines and cosines in an FPGA&lt;/a&gt;, with 3,967 hits&lt;/p&gt;

    &lt;p&gt;If you are doing DSP, you need a sine wave.  The standard
“textbook” way of generating a sine wave is to use a CORDIC.
In 2017, I spent a lot of time developing both what a CORDIC was,
&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;how to use it to generate a sine or cosine
wave&lt;/a&gt;, &lt;a href=&quot;/dsp/2017/09/01/topolar.html&quot;&gt;how to use it to
evaluate an arctangent&lt;/a&gt;,
and even &lt;a href=&quot;/dsp/2017/10/02/cordic-tb.html&quot;&gt;how to verify it through
simulation&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’m looking forward to demonstrating next year,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord willing&lt;/a&gt;,
that there’s a &lt;a href=&quot;https://github.com/ZipCPU/cordic/blob/master/rtl/quadtbl.v&quot;&gt;better, lower logic
approach&lt;/a&gt;
that you can use that just requires two FPGA DSP elements (i.e.
multiplies).&lt;/p&gt;

    &lt;p&gt;This is the nineteenth search result for “CORDIC” using
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;.  The fact that the &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;github
repository containing the CORDIC code presented
here&lt;/a&gt; is number
twelve was a bit of a surprise.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 16: FPGA designers start further along in the design process than ASIC designers&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;&lt;img src=&quot;/img/fpga-v-asic.svg&quot; alt=&quot;FPGA vs ASIC internals&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;FPGAs vs ASICs&lt;/a&gt;, with 4,536 hits&lt;/p&gt;

    &lt;p&gt;Every now and then I like to thump my chest and think that I’m doing
the same things ASIC designers do.  Then I have to come back and review
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;this article&lt;/a&gt; to get
put back in my place.  This article is popular enough that I have to
believe there are others out there who are sharing my delusions.&lt;/p&gt;

    &lt;p&gt;Searching for “FPGA ASIC” on
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; yielded this article as number
seven.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Taking a New Look at Verilator&lt;/a&gt;, with 4,622 hits&lt;/p&gt;

    &lt;p&gt;This is my basic introduction to Verilator article.  I reference it a lot.
It’s also referenced from the Verilator web-site, so that might explain
the number of page views here.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; surprised me with this one too.
Searching for “Verilator” yielded this article as number seventeen in
its list.  The surprise was that number 16 was &lt;a href=&quot;/blog/2018/09/06/tbclock.html&quot;&gt;my article on how
to handle multiple clocks using
Verilator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;The simplest sinewave generator within an FPGA&lt;/a&gt;, with 4.850 hits&lt;/p&gt;

    &lt;p&gt;Didn’t I say generating sinewaves was a fundamental DSP task?  This article
looks at the easy ways of doing that.  These aren’t necessarily the best
ways, but that depends upon your application.&lt;/p&gt;

    &lt;p&gt;Searching
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “simple sinewave” yielded this
article as number seven.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 17: FIFO with data&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fifo-rdwr.svg&quot; alt=&quot;Example FIFO read/write pointers&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;Getting the basic FIFO right&lt;/a&gt;, with 5,613 hits&lt;/p&gt;

    &lt;p&gt;I really need to revisit this article.  While I think it’s basically a good
article, it presents a FIFO with &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N&lt;/code&gt; storage elements as having
&lt;code class=&quot;highlighter-rouge&quot;&gt;(2^N)-1&lt;/code&gt; usable elements.  The
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;
article shows how to get that last item into the FIFO for a minimal cost.
This is another item on my to-do list–but not on my list of new year’s
resolutions.&lt;/p&gt;

    &lt;p&gt;I’m sure there’s a better
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; search term, but neither “FIFO”
nor even “FPGA FIFO” are turning up a reference to this page.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 18. The Max 1000&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/max1k-picture.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;Arrow’s Max-1000: A gem for all the wrong reasons&lt;/a&gt;, with 5,850 hits&lt;/p&gt;

    &lt;p&gt;I’d like to think that this article was written before Trenz and Arrow
got their act together with the Max-1000 FPGA development board.  I’m
looking forward to coming back to my &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;Max-1000
project&lt;/a&gt; and running the ZipCPU on this
board.  It hasn’t happened yet.  This article shares my frustrations with
the board.&lt;/p&gt;

    &lt;p&gt;Perhaps I should be concerned that this article is listed as number three
overall for the year?&lt;/p&gt;

    &lt;p&gt;If you search for “max-1000 fpga review” on
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;, this article comes up as the number
seven search result.  Strangely enough, my &lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX
review&lt;/a&gt;
comes up as result number eight.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 19: The Two Flip-flop CDC solution&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-dbl-clock.svg&quot; alt=&quot;Crossing clock domains via two flip-flops&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;Some Simple Clock-Domain Crossing Solutions&lt;/a&gt;, with 7,074 hits&lt;/p&gt;

    &lt;p&gt;Every FPGA designer needs to learn about clock-domain crossings.  This
article is my entry article into describing the basics of and the problems
with clock domain crossings.  I’m honored that it shows this favorably.&lt;/p&gt;

    &lt;p&gt;This one makes the number eleven search result position, following a
search of
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “clock domain crossing”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;About the ZipCPU&lt;/a&gt;, with 12,710 hits&lt;/p&gt;

    &lt;p&gt;The about page for the ZipCPU remains the number one hit for the year
overall.  Thank you to everyone who made that possible!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-audience&quot;&gt;The Audience&lt;/h2&gt;

&lt;p&gt;Let me share one other fascinating chart with you before closing.  Fig. 20
below shows the number of page views in December 2018 against the number of
page views in December 2017.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 20. A comparison of web hits in December 2018 with December 2017&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-yearly-comparison.png&quot;&gt;&lt;img src=&quot;/img/2018-yearly-comparison.png&quot; alt=&quot;&quot; width=&quot;961&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first obvious conclusion is that web hits are up.  The actual number
reflects a 60% increase in web hits over last year.  Thank you.&lt;/p&gt;

&lt;p&gt;The next very fascinating conclusion is that the number of hits is very
cyclic on a weekly basis.  The blog gets many more hits Monday through
Friday than it does on Saturday or Sunday.  This tells me that the majority
of individuals looking at the &lt;a href=&quot;&quot;&gt;ZipCPU blog&lt;/a&gt;
are professional developers, and not so much the hobbyists.  Thank you
again.  This is encouraging, although it wasn’t at all what I was expecting.&lt;/p&gt;

&lt;h2 id=&quot;happy-new-year&quot;&gt;Happy New Year&lt;/h2&gt;

&lt;p&gt;To all of have chosen to read and share this blog, and to all who have been
encouraged by it, let me wish you a hearty, “Thank You” and a “Happy New
Year”!  I’m looking forward to the year coming, and to continuing my
blogging work here.  Let me also wish you success in your chosen FPGA
endeavors this year.  I pray that your work would be blessed by the
Lord as well, lest you find yourself stuck and wasting time in &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The blessing of the LORD, it maketh rich, and he addeth no sorrow with it.
(Prov 10:22)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;May God bless you and your efforts.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Rejoice in the Lord alway: and again I say, Rejoice.  (Phil 4:4)&lt;/em&gt;</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2019/01/01/top-ten.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/01/01/top-ten.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Using a formal property file to verify an AXI-lite peripheral</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A &lt;a href=&quot;http://zedboard.org/product/microzed&quot;&gt;MicroZed Board&lt;/a&gt;&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://zedboard.org/product/microzed&quot;&gt;&lt;img src=&quot;/img/microzed.png&quot; alt=&quot;&quot; width=&quot;319&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt; has become prominent as a
defacto standard for working with either
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; or
&lt;a href=&quot;https://www.intel.com/content/www/us/en/fpga/devices.html&quot;&gt;Intel&lt;/a&gt; supplied &lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;IP
cores&lt;/a&gt;.
This common standard is intended to make it easy to interface a design to one
of a variety of System on a Chip cores,
such as Xilinx’s MicroBlaze or &lt;a href=&quot;https://www.altera.com/literature/hb/nios2/n2cpu_nii5v1.pdf&quot;&gt;Intel’s
NiosII&lt;/a&gt;.
The bus is also used by &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;,
and so it is a natural fit for both
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
and &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc.html&quot;&gt;Soc+FPGA&lt;/a&gt;
products.&lt;/p&gt;

&lt;p&gt;While this is all well and good,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; is a beast to work with.
Achieving both correct performance, as well as high speed performance, can
be a challenge.  Today, we’ll limit ourselves to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite bus&lt;/a&gt;: a version of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; that
supports neither bursts, nor locking, nor transaction ID’s, nor varying
quality of service guarantees.
While I’d like to imagine that these simplifications have made it easy enough
for a beginner to be able to work with it, I would have to imagine that
most beginners who have tried to work with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
used by either the
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
or &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc.html&quot;&gt;Soc+FPGA&lt;/a&gt;
chips haven’t found it to be the simple protocol they were hoping for.&lt;/p&gt;

&lt;p&gt;It has certainly been anything but simple for me.&lt;/p&gt;

&lt;p&gt;Today, let’s take a look at how you can use a set of formal properties to
work with an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt; slave–both to
verify that it works as well as to query how well it works.  Along the way,
I’ll demonstrate how easy it us to use this set of formal properties
to find the problems in an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;AXI-lite slave
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-axi-lite-bus&quot;&gt;The AXI-lite Bus&lt;/h2&gt;

&lt;p&gt;Some time ago, I wrote &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;an article describing how to build a simple
wishbone peripheral&lt;/a&gt;.&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;A simple wishbone
peripheral&lt;/a&gt;
only needed to respond to a request,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;an acknowledgment,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;some returned data,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a (never) stall signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  That’s all the signaling required for a &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;basic Wishbone
peripheral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If only &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; were as easy.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. The AXI bus is composed of five separate channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Instead of one read-write request channel, and one acknowledgment-response
channel, &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; has five such channels.  For writing values to the bus, there’s
the write address channel, the write data channel, and the write response
channel.  For reading values from the bus, there’s a read address-request
channel and a read response channel.&lt;/p&gt;

&lt;p&gt;For today, let’s just discuss the AXI-lite version of this interface.  Unlike
the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI specification&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt; removes a lot of capability from this
interaction.  Perhaps the biggest differences are that, with
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;, any
read and write request can only reference one piece of data at a time,
and that there is no need to provide unique identifiers for each transaction.
There are other more minor differences as well.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
has no requirement to
implement locking, quality of service, or any cache protocols.
Once these differences are accounted for,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
becomes almost as &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;easy to verify as a Wishbone (WB)
transaction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, building an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite peripheral&lt;/a&gt; is still a challenge,
but verifying an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
peripheral?  Not so much.&lt;/p&gt;

&lt;p&gt;The key to these transactions are the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals.
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; is used to signal a &lt;em&gt;valid&lt;/em&gt; request or acknowledgment.  The two
signals together form a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;.
One side of the channel will set a
&lt;em&gt;valid&lt;/em&gt; signal when it has information to send, whether request or
acknowledgment, while the other side controls a &lt;em&gt;ready&lt;/em&gt; signal.  You
may recognize this from our prior discussion of the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;simple handshake method
of pipeline control&lt;/a&gt;.
The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
also contains a very specific requirement: asserting the
&lt;em&gt;valid&lt;/em&gt; signal can never be dependent upon the &lt;em&gt;ready&lt;/em&gt; signal for the same
channel.&lt;/p&gt;

&lt;p&gt;Perhaps you may remember with the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;WB specification&lt;/a&gt;
that it takes a hand shake to make a bus request.  Both &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt;
(from the master) and &lt;code class=&quot;highlighter-rouge&quot;&gt;!STALL&lt;/code&gt; (from the slave) must be true in order for a
request to be accepted.  The same is basically true of 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; only the names have changed:
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; must be true for a bus request to be accepted by the
slave.  This &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signal is similar to the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; signal, while &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; is similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;!STALL&lt;/code&gt; signal.&lt;/p&gt;

&lt;p&gt;However, unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
has separate channels for reading and writing, and each of these channels
has its own &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt; signal set.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; also requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt;
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
on acknowledgments, both for read and separately for write acknowledgments.&lt;/p&gt;

&lt;h4 id=&quot;axi-lite-read&quot;&gt;AXI-lite Read&lt;/h4&gt;

&lt;p&gt;Perhaps it might make sense to walk through an example or two.  Fig. 2
therefore shows several example
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
read transactions from the perspective of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;.
In this example, I’ve chosen to use &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
convention where the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals are in all capitals, although this loses the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_*&lt;/code&gt; prefix
that I enjoy using to indicate which signals are inputs and which are outputs.
(We’ll switch back later, when we get to the
formal property set.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Several AXI-lite read transactions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-read.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Each request starts with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
master raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal,
signaling that it wants to initiate a read transaction.  Together with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal, the master will also place the address of the desired
read on the bus.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;The slave&lt;/a&gt;
will respond to this request by raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; signal,
although
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the specification&lt;/a&gt;
sets forth several comments about this.  For example, the slave can
set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; before or in response to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal.  Further, all the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
outputs are not allowed to be dependent combinatorially on the inputs,
but must instead be registered.
Beyond that, the slave can stall the bus as required by the implementation.&lt;/p&gt;

&lt;p&gt;A read transaction request takes place when both
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; are true on the same clock.&lt;/p&gt;

&lt;p&gt;Looking back at Fig 2, you can see four such read transaction requests being
made.&lt;/p&gt;

&lt;p&gt;As with the transaction requests, the acknowledgments also only take place when
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, the signals from the acknowledgment channel,
are both true.  Because responses must be registered, the earliest the slave
can acknowledge a signal is on the clock following the request.&lt;/p&gt;

&lt;p&gt;Let’s now turn our attention to the acknowledgments shown in Fig 2.  In
this example,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
acknowledge the request on the clock after the request is made.  Since
the master holds &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; high, the acknowledgment only needs to be high
for one transaction.  Further, in addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
will also set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt;, the result of the read, and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt;, an
indicator of any potential error conditions.  As with the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt;
signal above, these two signals are part of the acknowledgment transaction
as well.&lt;/p&gt;

&lt;p&gt;The more interesting transaction may be the high speed transaction shown
at the end of the trace in Fig 2.  Judging from this transaction, if the
master wishes to transmit at its fastest speed, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this particular
core&lt;/a&gt;
will only ever support a rate of one request every other clock.&lt;/p&gt;

&lt;p&gt;Working from
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the spec&lt;/a&gt;,
just a couple of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal verification
properties&lt;/a&gt;
will help keep us from running into problems.  From what we’ve learned
examining the figures above, the following basic properties would seem prudent.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is raised, it must remain high until
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is true but the slave hasn’t yet raised
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt; must remain constant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Similarly, once the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; reply acknowledgment request is raised,
it must also remain high until &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RRESP&lt;/code&gt; are both true.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As with the read address channel, while &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is true and the
master has yet to raise &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, both
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; must remain constant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For every request with &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt;, there must follow
one clock period sometime later where &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;our development of the WB
properties&lt;/a&gt;, there is
no bus abort capability in the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus
protocol&lt;/a&gt;.  As a result, following
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus error&lt;/a&gt;,
you’ll still need to deal with any remaining acknowledgments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Just to keep things moving, we’ll also want to insist that after some
implementation defined minimum number of clock ticks waiting the slave
must raise &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The same applies to the reverse link: the master should not be allowed to
hold &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; low indefinitely while &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is high.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll add a couple more
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;properties&lt;/a&gt;
beyond these below, but for now these should suffice to capture most of what
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
requires.&lt;/p&gt;

&lt;p&gt;That’s how reads work, so let’s now go on and examine the write path.&lt;/p&gt;

&lt;h4 id=&quot;axi-lite-write-example&quot;&gt;AXI-lite Write Example&lt;/h4&gt;

&lt;p&gt;While the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; read channel above may appear to be straightforward, the write
channel is anything but.  The write address channel is designed to allow a
single “burst” request to indicate a desire to write to multiple addresses,
closely followed by a burst of data on the write data channel.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;,
unlike the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt;,
has no burst write support.  Every
address request must be accompanied by a single piece of associated write data.
To make matters worse, the two channels are only loosely synchronized, forcing
the slave to synchronize to them internally.&lt;/p&gt;

&lt;p&gt;Were &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; tied to &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; tied to
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt;, the slave’s write channel logic would collapse into the basic
read problem discussed above.  Alas, this is not so.  The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
slave is thus forced to try to synchronize these two channels in order to
make sense of the transaction.&lt;/p&gt;

&lt;p&gt;Fig. 3 shows a basic set of write transactions illustrating this problem.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Some example write transactions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first three transactions within Fig. 3 shows the bounds set on the
synchronization of the channels.  Note that I found these bounds within
Xilinx’s documentation.  They are not present in
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the specification itself&lt;/a&gt;,
as far as I can tell.  Since they simplify the problem
significantly, I’ve chosen to &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;implement them as part of this property
set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at and discuss each of the transactions shown in Fig. 3 above.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first transaction is as simple as one might like.  Both write address
and write data requests show up at the same time.  On the following clock
the respective &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; signals are set, and then the acknowledgment
takes place on the third clock where &lt;code class=&quot;highlighter-rouge&quot;&gt;*BVALID&lt;/code&gt; is set.&lt;/p&gt;

    &lt;p&gt;Let’s note two things about this picture.  First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; signals
are kept low until the request is made.  This is not required of the bus
and in general slows the bus down.  Second, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; signal is
held high.  The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;particular core we are demonstrating&lt;/a&gt;
will fail if this is not the case.  We’ll come back to that in a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second transaction illustrates one of the bounds on the write channels:
Xilinx’s rules allow the write address valid signal to show up no more than
two clocks before the write data.  In this example, the slave holds the two
&lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; lines low until the clock after both are valid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The third transaction illustrates the other bound: the write data channel
may arrive up to one clock before the write address channel.  As with the
previous example, this slave holds the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; lines low until
both are present.  The acknowledgment then takes place on the next clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final three transactions are part of a speed test measuring how fast
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
can handle subsequent transactions.  In the case of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this slave&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
waits until both &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt; signals are high
before raising the ready signal.  This wait period limits the
speed of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this slave core&lt;/a&gt;
to one transaction every two clocks.&lt;/p&gt;

    &lt;p&gt;If the Lord wills, I’d like to also present &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;another AXI-slave
core&lt;/a&gt; with
much better throughput performance, but that will need to remain for another
day.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;This protocol&lt;/a&gt; suggests a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;couple formal
properties&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals should remain high until their respective
&lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; signal is also high.  This applies to both the write address
channel, the write data channel, as well as the acknowledgment channel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The data associated with each channel should be constant from when the
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signal is set until both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are set together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also discussed the two Xilinx imposed limits above as well.&lt;/p&gt;

    &lt;p&gt;– The write data channel may become active no more than one clock before
   the write address channel, and&lt;/p&gt;

    &lt;p&gt;– The write address channel may become active no more than two clocks before
   the write data channel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, there should be no more than one acknowledgment per write
request.  Well, it’s a bit more complex than that.  Both write address
and write data channels will need to be checked, so that there is never
any write acknowledgment until a request has previously been received
on both of those two channels.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;using-a-formal-property-set&quot;&gt;Using a Formal Property Set&lt;/h2&gt;

&lt;p&gt;Further on in this article, we’ll dive into the weeds of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;how to express the
formal properties necessary to specify an AXI-lite bus
interaction&lt;/a&gt;.  For now,
I’d like to discuss what you can do with such a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I currently have Vivado 2016.3 installed on my computer.  Is it out of date?
Yes.  However, it works for me.  Xilinx has had problems breaking things when
they make updates, so I hesitate to update Vivado lest I break something that
is already working.&lt;/p&gt;

&lt;p&gt;That said, &lt;a href=&quot;https://www.xilinx.com/video/hardware/creating-an-axi-peripheral-in-vivado.html&quot;&gt;this
video&lt;/a&gt;
from Xilinx describes how to create an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;peripheral core&lt;/a&gt;.
I followed similar instructions, and received a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;default demonstration AXI-lite peripheral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then added a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal property section&lt;/a&gt;
to the bottom of this core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////////////
//
// Formal Verification section begins here.
//
// The following code was not part of the original Xilinx demo.
//
////////////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important part of this property section is the reference to our
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal AXI-lite property
file&lt;/a&gt;.
Since the properties require some counters in order to make certain that
exactly one response is given to every transaction, let’s set a width for
those counters and declare them here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this particular design&lt;/a&gt;,
a four bit counter is really overkill, but it will work for us.&lt;/p&gt;

&lt;p&gt;Then, we connect the various signals associated with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;our core&lt;/a&gt;.
The parameters have fairly well defined meanings.  The data width
is the number of data bits in the bus.  The address width is the number of
bits required to describe a single octet in the data stream.  This is different
from
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
which has only the number of bits necessary to describe a word address.
We’ll ignore the extra bits for now, since they are fairly irrelevant here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Connect our slave to the AXI-lite property set
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we wanted to stop here and only run a bounded model check, we could do
that.  However, with just a couple of more
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;properties&lt;/a&gt;
we can make certain &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this
design&lt;/a&gt;
will pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
as well–or not, as we’ll see in a moment.&lt;/p&gt;

&lt;p&gt;For example,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
will only ever allow a single transaction.  Further, once that transaction
request has been made, but before the acknowledgment, the appropriate
acknowledgment valid flag will be high.  Not only that, but when the
acknowledgment valid flag is high is the only time we’ll have one pending
transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
does not allow the number of outstanding requests on the write address channel
to differ at all from those on the write data channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, we create a very simple &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.sby&quot;&gt;SymbiYosys
script&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
cvr
prf

[options]
cvr: mode cover
cvr: depth 60
prf: mode prove
prf: depth 40

[engines]
smtbmc

[script]
read -formal xlnxdemo.v
read -formal faxil_slave.v
prep -top xlnxdemo

[files]
xlnxdemo.v
faxil_slave.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.sby&quot;&gt;This script&lt;/a&gt;
describes
&lt;a href=&quot;/formal/2018/12/20/sby-makefile.html&quot;&gt;two tasks&lt;/a&gt;.  One task,
named &lt;code class=&quot;highlighter-rouge&quot;&gt;cvr&lt;/code&gt;, will check the cover properties in this core.  Since we haven’t
introduced any yet, we’ll come back to this task in a moment.  The second
task, &lt;code class=&quot;highlighter-rouge&quot;&gt;prf&lt;/code&gt;, will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
meets &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;all of the
properties&lt;/a&gt;
required of any
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
core–basically all of the properties mentioned above.&lt;/p&gt;

&lt;p&gt;Now, when we run
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to check the safety properties (i.e. the assertions),&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% sby -f xlnxdemo.sby prf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The proof fails almost immediately.&lt;/p&gt;

&lt;p&gt;This first problem comes from the fact that none of the various signal
registers are given appropriate initial values.  While I personally consider
this to be a bug, many individuals will consider this irrelevant in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
that depends upon a reset like this one does.  Therefore, let’s just quietly
fix &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
with some initial statements and go on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// The following lines are only questionable a bug
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And again the design fails.  This time it fails with the trace shown in Fig.
4 to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 4.  Xilinx&#39;s demonstration code drops a write acknowledgment&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-write-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this image, you can see two write transactions.  I’ve colored them with
two different colors, to help separate the two and make this example easier
to follow.  The image differs, however,
from our previous write example in Fig 3 above simply because the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; signal is not held high.  As a result, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;
transaction is not immediately acknowledged until &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; has been
valid for a whole clock.  By that time, however, the logic within &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
has lost the reality that there is a second transaction that needs to be
acknowledged as well.  Hence, once &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
drops the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; line, a transaction has been lost.&lt;/p&gt;

&lt;p&gt;If we want to move on and look for other problems, we could bandage over this
bug with an assumption.  While you’d never want to do this in production
code, sometimes it is helpful to move on in order to find some other problem.
In this case, a simple assumption causes this error to go away.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, when we run the tools again the design still fails.  Looking at the
trace reveals that it is failing for the same basic bug again, only now the
problem is found within the read channel, as shown in Fig 5.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5.  Xilinx&#39;s demonstration code drops a read acknowledgment&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-read-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is always high, just like we did with
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, this failure also vanishes and now &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
can be
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified for all time&lt;/a&gt;
using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a little looking, and a quick trace capability, it
doesn’t take long to chase down the bug.  You can see the problem below
as it exists for the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; signal.  Basically, the core allowed
this signal to go high before it knew that the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; signal would
be acknowledged.&lt;/p&gt;

&lt;p&gt;If you page through the code, you’ll find the always block, shown below,
that sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; signal.  It starts with a basic, almost
boilerplate, reset function to clear &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;7&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Early on in the operation, though, we find the bug.  In particular,
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; is set irrespective of whether the result channel is stalled
and there’s no place to hold the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// indicates that the slave has acceped the valid read address
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Read address latching
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just a touch of extra logic will fix this for us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// indicates that the slave has acceped the valid read address
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Read address latching
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A similar fix to the write channel and the design should pass nicely.&lt;/p&gt;

&lt;h3 id=&quot;cover&quot;&gt;Cover&lt;/h3&gt;

&lt;p&gt;The check above encourages us that this design will not violate any of our
safety properties, but will it work?  Or, rather, how well can it be made
to work?  To answer that question, let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Cover properties are known as &lt;em&gt;liveness&lt;/em&gt; properties, versus the assertion
properties which are known as &lt;em&gt;safety&lt;/em&gt; properties.  When a &lt;em&gt;safety&lt;/em&gt; property
fails, a trace is created showing how the property may be made to fail.
However, when a &lt;em&gt;safety&lt;/em&gt; property succeeds you know the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; will always
be valid and so no trace is created.  Cover properties are the opposite.  A
cover property succeeds if there is at least one way to make the statement
true.  In that case, a trace is generated.  More generally, one trace is
generated for &lt;em&gt;every&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement within a design, or the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
check will fail.&lt;/p&gt;

&lt;p&gt;Within the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;,
there are two cover properties just to make certain the design is able to
function.  These properties verify that both a read and write operation are
able to succeed using the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What I want to do now is to check performance, and we can use a cover
property for that purpose.&lt;/p&gt;

&lt;p&gt;Let’s see if we can retire four write instructions in four clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s also test whether we can retire four read requests in four clocks
as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two tests would be easier to express with concurrent assertions,
such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Writes
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Reads
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wow, those are nice to work with!&lt;/p&gt;

&lt;p&gt;I personally like the four clock test, because sometimes there is a single
stage within the design somewhere that can queue up an answer and so succeed
on a two clock test.  A four clock test on a design this simple will only
succeed if the core can truly retire one instruction on every clock.&lt;/p&gt;

&lt;p&gt;Not surprisingly, this test fails.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;This particular
core&lt;/a&gt;
is &lt;em&gt;unable&lt;/em&gt; to handle a one transaction per clock throughput.&lt;/p&gt;

&lt;p&gt;If high speed were your goal, then, you would say the core is &lt;em&gt;crippled&lt;/em&gt;.
(Yes, I have an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;alternative
core&lt;/a&gt;
if you want something that uses
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
and yet has better performance.)&lt;/p&gt;

&lt;p&gt;We could adjust the two tests and make them check for one instruction retiring
on every other clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// First a write check
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Now a read check
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This test now succeeds.&lt;/p&gt;

&lt;p&gt;If you choose to examine &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;the formal properties within the
core&lt;/a&gt;,
you’ll notice there is also a very large set of code at the bottom to
set up two rather complicated cover traces.  We’ve already reviewed the
results of those complex cover statements in Figs. 2 and 3 above.&lt;/p&gt;

&lt;h3 id=&quot;exhaustive-coverage-exponential-complexity&quot;&gt;Exhaustive Coverage, Exponential Complexity&lt;/h3&gt;

&lt;p&gt;The first lesson of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
is that it is &lt;em&gt;exhaustive&lt;/em&gt;.  Every possible input, output, and register
combination are checked to determine whether a property holds or not.  As
you might imagine, this creates an exponential
explosion in complexity that can be hard to manage.  This can often discourage
a learner from trying
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
in the first place.&lt;/p&gt;

&lt;p&gt;To put that whole argument into perspective, know this: I have a series of
not one or two but twelve separate
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
proofs in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;Wishbone to AXI
bridge(s) repository&lt;/a&gt;.  It takes me less
than two minutes to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
&lt;em&gt;all&lt;/em&gt; of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;cores&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, consider what we’ve done: for the price of a small insertion of
code into our design, referencing a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;pre-written property set&lt;/a&gt;,
and for the cost of only a handful of other core-specific properties,
we’ve managed to find, fix, and then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
core.  After you’ve done this once or twice, you’ll find that the whole
verification process takes only minutes to set up, and less than that
to get your first trace.
This makes it very easy for me, when I want to reply to someone’s request for
help on either
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s or
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent’s forum&lt;/a&gt;s, to quickly review their
code and provide a comment on it.&lt;/p&gt;

&lt;p&gt;Fixing the code?  Well, that can take more time.&lt;/p&gt;

&lt;p&gt;So just what does &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property
set&lt;/a&gt;
look like?&lt;/p&gt;

&lt;h2 id=&quot;axi-lite-properties&quot;&gt;AXI-lite Properties&lt;/h2&gt;

&lt;p&gt;We’ve already discussed most of the properties above, all that remains
now is to lay out the details and write the immediate assertions to accomplish
these tasks.  The basic properties were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Requests must wait to be accepted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Acknowledgments can only follow requests&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All responses must return in a known number of cycles&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Waiting requests should not be held waiting more than some maximum delay&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step in writing
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property set&lt;/a&gt;
will be to create several configuration parameters that can be used to
configure &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;the properties&lt;/a&gt;
to match the needs of our design.  Shown below is the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite slave property set&lt;/a&gt;,
and the various configuration parameters within it.&lt;/p&gt;

&lt;p&gt;The first configuration parameter is the width of the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// The width of the data bus
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fixed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While most of my work is done with a 32-bit bus, the property set should
be generic enough to allow bus widths of other sizes, such as 8, 16, 64, or
128 bits.  Why might you want 128 bits?  Because
&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;many designs&lt;/a&gt;
including
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR SDRAM&lt;/a&gt;’s
can transfer 128-bits or more per clock.&lt;/p&gt;

&lt;p&gt;Following the number of data bits, &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH&lt;/code&gt; controls the number
of bits used to describe an address within the peripheral.  This needs to be
a sufficient number of bits necessary to access every octet within the address
space of the slave, even though we are going to ignore the sub-word address
bits for now.  (There’s only one requirement of them, associated with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt; signal, and I haven’t coded that up yet.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, since I find &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_DATA_WIDTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH&lt;/code&gt; rather
cumbersome to type, I’m going to create two short-cut names: DW for the
data bus width, and AW for the address width.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some implementations add
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
cache flags to the address request.
These flags indicate whether the transaction is to be bufferable,
non-bufferable, cachable, non-cachable, or more.  I’m not personally using
these flags.  However, to handle both cores with and without these bits,
we’ll use the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_HAS_CACHE&lt;/code&gt;.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_HAS_CACHE&lt;/code&gt; is set,
the slave will assume particular values for &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_awcache&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_arcache&lt;/code&gt;, indicating
that the write is to be done to the cache or through the cache.  This is
probably more important for an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
master than the slave, but since the two are mirrors of each other, we’ll
keep it in here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_HAS_CACHE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometimes I need to verify a write-only
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI interface&lt;/a&gt;, such as in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilwr2wbsp.v&quot;&gt;this AXI-lite
write-channel to wishbone
bridge&lt;/a&gt;.  In
that case, I’ll want to assume the read channel is idle and remove the read
channel cover check.  &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_READS&lt;/code&gt; can be set to make this happen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_NO_READS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_WRITES&lt;/code&gt; is the analog to &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_READS&lt;/code&gt;.  If
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_WRITES&lt;/code&gt; is set, then the proof will assume the write channel
is idle, and remove the write channel cover check.  This is used by my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilrd2wbsp.v&quot;&gt;AXI-lite read-channel to wishbone
bridge core&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_NO_WRITES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
defines three separate possible responses: an OK response,
a slave produced an error response, or an interconnect produced
an error response.  If a particular slave cannot produce any
form of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus error&lt;/a&gt;,
it makes sense to disallow it.  Clearing
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_BRESP&lt;/code&gt; to zero will disallow any form of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; on the write channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//  The same is true for F_OPT_RRESP for the read channel
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx’s AXI reference
guide&lt;/a&gt;
requires a rather lengthy reset of 16 clock periods.  If the slave
(or master) being verified isn’t creating that reset, then it makes sense
to just assume the reset is present.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_ASSUME_RESET&lt;/code&gt; configures
the core to do just that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to insure that there is only one acknowledgment for every
request received, we’ll need to count requests and acknowledgments
and compare our signals to these counters.  &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt; specifies
the number of bits to be used for those counters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re going to insist that no transaction remains stalled for more
than some maximum number of clock cycles, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt;.  This also
keeps the design and traces moving during our proof.  While the constraint
placed upon the design as a result is somewhat artificial, you can adjust
it to match what you would expect within your design environment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our last parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt;, is used to make certain that,
following a request, the result will be returned to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt;
master within a given number of clock cycles.  The number of cycles to wait
is very implementation dependent, so it needs to be a configuration parameter.
We set it here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY=12&lt;/code&gt; is overkill for the demonstration designs
in the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;wishbone to AXI bridge repository&lt;/a&gt;
we are taking our examples from.
However, &lt;a href=&quot;/blob/2018/08/16/spiflash.html&quot;&gt;other designs&lt;/a&gt;
have needed delays of &lt;code class=&quot;highlighter-rouge&quot;&gt;65&lt;/code&gt; clocks or more, so this is an appropriate
configuration parameter.&lt;/p&gt;

&lt;p&gt;Let me add one other note on these two clock durations: the shorter
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt; are, the faster your proof will complete.&lt;/p&gt;

&lt;p&gt;Let’s now move on from the parameters within the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
file&lt;/a&gt;
to the inputs and outputs of the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;module&lt;/a&gt;
itself.  Since this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;
is my own code rather than Xilinx’s,
I’m also going to switch notations to one I am familiar with.  Inputs
to any core in my notation start with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_&lt;/code&gt;, outputs begin with an &lt;code class=&quot;highlighter-rouge&quot;&gt;o_&lt;/code&gt;.
Further, only constant values such as parameter or macros will use all
capitals.  Finally, since the core we will be writing is a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;,
all of the interface wires will be inputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// System clock
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// AXI write address channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Slave is ready to accept
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write address
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write Cache type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write Protection type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write address valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI write data channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Write data ready
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write data
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write strobes
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI write response channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write response
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Write reponse valid
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Response ready
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI read address channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address ready
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read Cache type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read Protection type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI read data channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Read response
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Read reponse valid
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Read data
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, almost.  We’re also going to create
three outputs, as shown below, so that assertions may be
connected to our various counters to constrain them to the implementation
using them.  Such constraints are &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;necessary in order to pass induction, as
we’ve discussed before&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since checking for transactions can be somewhat tedious below, I’ll declare
some simple transaction abbreviations here.  These are basically abbreviations
for when both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are true indicating that either a
transaction or or an acknowledgment
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
completes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// wire	w_fifo_full;
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rd_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_ard_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wr_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_ard_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wr_req&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rd_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m also trying something new with this property set.  Since bus slave
properties are very similar to those for the master, save only that the
assumptions and assertions are swapped, I’m going to create two macros:
&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSUME&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSERT&lt;/code&gt;.  These are defined from the perspective of
the slave to be &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; respectively.  Within the master,
these definitions will naturally swap.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SLAVE_ASSUME&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	SLAVE_ASSERT	assert&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using a macro like this makes it easier to run
&lt;a href=&quot;http://meldmerge.org&quot;&gt;meld&lt;/a&gt;
on both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;slave&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master&lt;/a&gt;
property files when making updates.  This way the actual logic differences
stand out more.  Interested in seeing how well this works?  Just install
&lt;a href=&quot;http://meldmerge.org&quot;&gt;meld&lt;/a&gt;, download the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;wb2axip&lt;/a&gt; repository, then &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/bench/formal&quot;&gt;bench/formal&lt;/a&gt;
directory and run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;meld faxil_slave.v faxil_master.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to see how easy it is to spot differences between the two cores.&lt;/p&gt;

&lt;h4 id=&quot;reset-properties&quot;&gt;Reset Properties&lt;/h4&gt;

&lt;p&gt;I’ve struggled a bit with the &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;reset properties for
AXI&lt;/a&gt;.
Specifically, what
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
is it that actually creates the reset that needs to be verified here?
That core should have the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;assertions&lt;/a&gt;
applied to it.  However, the reset is often defined by some other module
within the design.  Hence, we’ll either
assert or assume the reset is initially set based instead on the
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_ASSUME_RESET&lt;/code&gt; parameter from above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME_INIITAL_RESET&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_INIITAL_RESET&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx requires that the AXI reset be asserted for a minimum of 16 clock
cycles&lt;/a&gt;.
Our first step is to count the number of cycles the reset signal is active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If ever the reset is released, &quot;reset&quot; the reset-length
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// counter back to zero.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Otherwise, just quietly increment the counter until we get
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to 15
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then make (assumptions) or assertions about the reset signal to make
certain it is held long enough.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME_RESET&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_RESET&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, now that we know our design meets its reset requirements, we can
create some properties regarding what must happen as a result of a reset.
Specifically, we’ll require that following any reset, the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt;
flags should be set to zero.&lt;/p&gt;

&lt;p&gt;We’re also going to apply this to the very first clock cycle of the design, by
also checking for &lt;code class=&quot;highlighter-rouge&quot;&gt;!f_past_valid&lt;/code&gt; and by applying these properties through
&lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; statements.  As you may recall, this was the issue
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/xlnxdemo.v&quot;&gt;Xilinx core&lt;/a&gt;
had above with its (missing) initial statements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Nothing should be returned or requested on the first clock
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Same thing, but following any reset as well
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moving on to the response signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BRESP&lt;/code&gt; for the write channel and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; for the read channel, we’ll note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b01&lt;/code&gt; pattern is
the only pattern disallowed by the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
specification&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Exclusive access not allowed
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exclusive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;stability-properties&quot;&gt;Stability Properties&lt;/h4&gt;

&lt;p&gt;The rule we discussed above was that the signals that are coupled with
any transaction should be held constant as long as the transaction remains
outstanding (i.e. valid but not ready).  This is a basic
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
that we also required when building our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
properties.  Let’s capture that
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
property here in this context.&lt;/p&gt;

&lt;p&gt;Simply put using concurrent assertions, we could express this as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternately, in order to use the immediate assertions supported by the free
version of &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;, we’ll
need to put a little more work into this.
First, we want to avoid the first clock period and any clock period following
a reset.  This is to make sure our properties deal with valid data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, for each channel, we’ll write out the properties in question.  Basically
if the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; was true on the previous cycle but the &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; was false,
then the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; should remain true and the associated data should be stable.&lt;/p&gt;

&lt;p&gt;For the write address channel, the first of five, this property looks like
the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Write address channel
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply to all other incoming channels
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The other channel properties are nearly identical, so we’ll skip them for
brevity here.  The important part to remember is that we will &lt;em&gt;assume&lt;/em&gt;
properties of the input, and &lt;em&gt;assert&lt;/em&gt; properties of our local state and any
outputs.  Hence, in this case we’ll assume the properties of the write address
channel, the write data channel, and the read address channel, but &lt;em&gt;assert&lt;/em&gt;
properties of the two acknowledgment channels.&lt;/p&gt;

&lt;h4 id=&quot;maximum-delay&quot;&gt;Maximum Delay&lt;/h4&gt;

&lt;p&gt;We said above that no channel should remain stalled for more than a finite
number of clock cycles.  Such a stall would be defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID &amp;amp;&amp;amp; !*READY&lt;/code&gt;.
Let’s check that property for each channel here, but only if we were given
an &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt; value greater than zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_STALL_COUNT&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_wstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_arstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_bstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_rstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To create a check constraining how many clock cycles a design may be allowed
to stall a channel, we’re going to have to first count the number of stalls.&lt;/p&gt;

&lt;p&gt;I’ll show the write address channel stall count here, and skip the others
for brevity again.&lt;/p&gt;

&lt;p&gt;I should also mention, it took me several rounds to get this count just right.
So, here’s the basic logic:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Anytime we either reset the core, or anytime there’s no pending write
request, or the write address request is accepted, the write address
bus isn’t stalled and we set the counter back to zero.  This much was
straightforward, and matches my first draft.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Likewise any time we are waiting for the other write channel, in this case
the write data channel, to request a transaction we also set the counter to
zero.  This allows the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/xlnxdemo.v&quot;&gt;Xilinx AXI-lite demo
code&lt;/a&gt; to stall
the bus as long as it wants while waiting for the other channel to
synchronize.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If we are waiting for the write channel to be valid
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// then don&#39;t count stalls
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Here’s the part that caught me by surprise though: we only want to accumulate
stalls on this request channel if the back end isn’t stalled.  Hence if
there’s no waiting acknowledgment, or likewise if the acknowledgment that
is waiting has just been accepted, then and only then do we count a stall
against the write address channel for not being ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Finally, &lt;em&gt;assert&lt;/em&gt; that the number of stalls is within our limit.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;very&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;similar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why would we &lt;em&gt;assert&lt;/em&gt; this?  Because the stall signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt;, is
an output of the slave core, and we always place assertions on outputs and
assumptions on inputs.&lt;/p&gt;

&lt;p&gt;Hence, if you look down through the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;property
file&lt;/a&gt;
a bit further, you’ll see an assumption made for the read acknowledgment
channel.  Why is this an assumption?  Because it is dependent upon the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; &lt;em&gt;input&lt;/em&gt; to the core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, all of these assumptions will swap with their assertion counterparts
when we go to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;AXI-lite master property
set&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;xilinx-constraints&quot;&gt;Xilinx Constraints&lt;/h4&gt;

&lt;p&gt;Remember the two Xilinx constraints?  The additional rules to make things work?
Here they are written out.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The address line will never be more than two clocks ahead of
 the write data channel, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The write data channel will never be more than one clock
ahead of the address channel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I found these rules in a DDR3 IP core module usage guide, though I can’t seem
to find that guide right now.  However, since they’ve helped make
the various proofs complete, I’ve chosen to include these rules here.&lt;/p&gt;

&lt;p&gt;Let’s express these as
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal properties&lt;/a&gt;.
First, if there was a write address request two clocks ago, and no
intervening write data request, then we want to assume a write data request now.&lt;/p&gt;

&lt;p&gt;Ok, not quite, that’s missing a key detail: it is possible that the write
address request of two clocks ago &lt;em&gt;followed&lt;/em&gt; a write data request.  That means
we’ll also have to check that the number of write data and write
address requests were equal two clocks ago, or there had been more write
address requests.&lt;/p&gt;

&lt;p&gt;This is another one of those properties where a concurrent assertion would
make the most sense,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We could also express this same property as an immediate assertion.  It’s
uglier and harder to read, but it still works well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second rule is simpler since it only covers two clock periods instead of
three.  It’s the same basic thing, just with the channels reversed and one less
clock period.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together these two properties will keep the two channels roughly synchronized
with one another.  Making the actual synchronization work within the peripheral
code will still remain a challenge.&lt;/p&gt;

&lt;h4 id=&quot;compare-the-number-of-acknowledgments-to-requests&quot;&gt;Compare the number of acknowledgments to requests&lt;/h4&gt;

&lt;p&gt;The next rule we want to check is that for every acknowledgment,
there must have been one and only one request.&lt;/p&gt;

&lt;p&gt;No matter how we do this, we’ll need to start by counting the number of
outstanding requests.  This count goes as follows: following any reset,
the number of outstanding requests must be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise anytime we have accepted a request, or had an acknowledgment
on the return channel accepted, but not both, the count will adjust.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please notice that I didn’t use a pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements here, such as
if there’s been a write address channel request then increment the counter,
else if there’s been a write response then decrement the counter.  I’ve tried
that approach several times in the past, but I always seem to get burned
by it.  Why?  Because of the cases the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements don’t cover, usually
the case where there’s both a request and an acknowledgment on the same clock
cycle.&lt;/p&gt;

&lt;p&gt;Two other counters, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_axi_wr_outstanding&lt;/code&gt; based upon the write data channel
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_axi_rd_outstanding&lt;/code&gt; based upon the read channel, are defined similarly.&lt;/p&gt;

&lt;p&gt;We can now start creating some properties using these count values.  First,
we want to make certain our counters never overflow.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, in order to guarantee that the counters never overflow, we’ll
need to insist that the channel stops making a request one clock earlier.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might notice that these are all a series of assertions–for both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;slave&lt;/a&gt;.
They are not &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSERT()&lt;/code&gt;ions, but rather regular assertions.
This somewhat violates our
rule, that we only make assertions of local state and outputs.  However,
if an assumption is required to keep this number lower, that assumption
should really exist within the implementation defined code.  Hence we’ll just
use regular assertions here.&lt;/p&gt;

&lt;p&gt;Finally, to make certain that acknowledgments do follow requests, we can make
a couple of assertions.  The three counters above make these assertions
really easy.&lt;/p&gt;

&lt;p&gt;First, on any write acknowledgment, there must be at least one outstanding
write address request that needs to be acknowledged.  Likewise, there also
needs to be one write data request that needs to be acknowledged.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that I’m applying the test every time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_bvalid&lt;/code&gt; is true,
not every time &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wr_ack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awr_ack&lt;/code&gt;, nor every time
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID &amp;amp;&amp;amp; S_AXI_BREADY&lt;/code&gt;.  In other words, before even attempting
an acknowledgment, the respective counter should be greater than one.&lt;/p&gt;

&lt;p&gt;A second thing to notice is that I’m not excepting the case where a request
is being made on the same cycle.  Such an acknowledgment, dependent only on
a combinatorial expression of the inputs, is specifically disallowed by the
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;AXI specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The assertion for the read channel is nearly identical to those for the write
channel above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This guarantees we’ll never respond to the bus unless a prior request has
been made.&lt;/p&gt;

&lt;p&gt;We haven’t yet guaranteed that every request will get a response.  For that, we
need to count the number of clock cycles following a request to when a response
should taken place.&lt;/p&gt;

&lt;h4 id=&quot;maximum-response-delay-check&quot;&gt;Maximum Response Delay Check&lt;/h4&gt;

&lt;p&gt;The maximum response delay check is just that: checking that every request
gets a response within a maximum number of clock periods.  This number of clock
periods is captured by the configuration parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt;.  Setting
this parameter to zero will disable this check.&lt;/p&gt;

&lt;p&gt;As with the other tests, we’ll start by counting how long a request remains
unacknowledged or outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_MAX_DELAY&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_wr_ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This count is very similar to the stall count above.  We’ll examine the
read portion below, although the write count portion is similar.  For a read,
we’ll only count up if the reset is inactive, no acknowledgment is pending,
and there exists an outstanding read that has not been acknowledged.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then assert that the counter must remain less than the maximum
acknowledgment delay.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the last of the safety properties necessary to determine that a core
abides by the rules of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I originally started working with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;, I would
stop once I’d finished writing my assertions and assumptions.
I’ve since been burned multiply times by believing that a core worked when I’d
somehow missed something internally, or perhaps assumed one property too many.
For that reason, let’s add in some &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; properties.&lt;/p&gt;

&lt;h4 id=&quot;cover-properties&quot;&gt;Cover Properties&lt;/h4&gt;

&lt;p&gt;As a final property category, it’s important to have some assurance that a
given
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;slave core&lt;/a&gt;
can handle a write request,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_NO_WRITES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a read request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_NO_READS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, upon any
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
run in cover mode, the formal solver will find
some path from reset, through either read or write request, through whatever
operation the slave needs to do within its implementation, all the way to the
acknowledgment being accepted.  In many cases, this will also showcase the
logic within the slave, giving you a trace you can use when debugging so
that you can make sure you are implementing your logic properly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’d like to say that it only took me one weekend to build &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;.
That’s roughly true.  Interface property lists such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this
one&lt;/a&gt;
really aren’t that hard or difficult to build for a given application.  Even
better, the basic properties tend to remain the same from one application to
the next.  For example, we’re still using the same basic
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
properties here that we used for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus&lt;/a&gt;, only now we are
using different names for the signals.&lt;/p&gt;

&lt;p&gt;However, it has taken some work on my part to build some example &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/rtl&quot;&gt;bus
bridges&lt;/a&gt; and a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;demonstration
AXI-lite slave core&lt;/a&gt;
to give &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property
list&lt;/a&gt;
some good exercise.  Further, I’ve been using
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;
to check the
functionality of other AXI-slaves that I’ve found on-line, so I have some
decent confidence that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;
work.&lt;/p&gt;

&lt;p&gt;As we’ve seen above, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
can be used to diagnose and then fix any &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite
core&lt;/a&gt;, such as the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;one produced
by Vivado that we discussed above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even better, I’ve been able to use &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
to create &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;a core&lt;/a&gt;
that outperforms &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;Xilinx’s AXI-lite demonstration
core&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;This
new example core&lt;/a&gt;
can handle one read or write transaction request and thus acknowledgment
on every clock, and it can keep this speed up indefinitely.  Now, if only
the interconnect would maintain that speed, you’d have a peripheral that runs
a full twice as fast.&lt;/p&gt;

&lt;p&gt;Just to give you a hint for what this core might do, here’s an example
write trace from this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;new core&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 6.  Write demonstration through an improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 7.  Read demonstration through the improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-read.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s an example read trace in Fig. 7 on the right.&lt;/p&gt;

&lt;p&gt;Want to know how to build an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
with this kind of throughput?  Check out the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered handshake approach to
pipeline signaling&lt;/a&gt;
and then stay tuned.  That will likely be my next post on the topic of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what about the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt;?  While I have a
full &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to full AXI bridge&lt;/a&gt;,
I have yet to build a property file that would describe the 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt; properly.  Worse,
I’ve put a lot of time into trying to build such a file.
Too much time, in fact, so I really can’t afford to put much more time into it.&lt;/p&gt;

&lt;p&gt;I’m sure I’ll get it soon enough, but given the amount of work it has taken
me so far, it’s not very likely to be an open source core in the near
future.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And it came to pass, when the king had heard the words of the book of the law, that he rent his clothes. (2Kings 22:11)&lt;/em&gt;</description>
        <pubDate>Fri, 28 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2018/12/28/axilite.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/12/28/axilite.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>AutoFPGA&#39;s linker script support gets an update</title>
        <description>&lt;p&gt;It’s been a while since &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;I’ve discussed
AutoFPGA&lt;/a&gt;.  If you
remember from &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;my introduction to
it&lt;/a&gt;, it’s a System on
a Chip composition tool designed to compose a design together from multiple
components.  While most of the work it does consists of copying tags from a
configuration file to one of several output files, it will also assign
addresses to peripherals on a bus and create an interconnect to connect
those peripherals together.&lt;/p&gt;

&lt;p&gt;I’ve now used &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; on several of &lt;a href=&quot;/projects.html&quot;&gt;my projects&lt;/a&gt;.  I used it
first on my &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip&lt;/a&gt;
&lt;a href=&quot;/projects.html&quot;&gt;project&lt;/a&gt;.  I maintain a
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;ZipCPU simulation test capability in ZBasic&lt;/a&gt;,
another project that uses &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  My iCE40 designs, both
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;ICOZip&lt;/a&gt; for the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;icoboard&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;TinyZip&lt;/a&gt; for the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt;, both use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  Even
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; is slowly getting an
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;upgrade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why?  Because (when done right) it makes it &lt;em&gt;easy&lt;/em&gt; to compose systems from
other components.  Components may be added to or removed from a design simply
by adding or removing them from the 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line and rebuilding.&lt;/p&gt;

&lt;p&gt;Why not other tools?  Because I really didn’t want to learn another language
besides the &lt;a href=&quot;/tutorial&quot;&gt;Verilog&lt;/a&gt;,
&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial&quot;&gt;C++&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;,
and so forth that I already work with.  But aren’t
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
scripts a new language in themselves?
To some extent this is true, although the purpose of 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
remains being a tool that does its job and gets out of the way.&lt;/p&gt;

&lt;p&gt;However, when I went to build a design for the
&lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, I
discovered a big hole in
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s
capabilities.  While it has always created linker scripts,
the script it has created hasn’t had the flexibility required to handle
such diverse designs as the very spartan
&lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;
as well as the more full featured &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys
Video&lt;/a&gt;
board from &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-problem&quot;&gt;Understanding the problem&lt;/h2&gt;

&lt;p&gt;To understand the problem, we’ll need to take a look at how memory is used
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
design.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
within an &lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
needs access to memory for several purposes.  It needs
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;place to store its instructions&lt;/a&gt;,
another space for &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;global data
structures&lt;/a&gt;,
another space for allocable data structures commonly called a
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and finally
a &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack space&lt;/a&gt;
to support local variables.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A common address space layout&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-segments.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One common arrangement of the address space to support these &lt;a href=&quot;https://wikipedia.org/wiki/Memory_segmentation&quot;&gt;various
purposes&lt;/a&gt;
contains a keep out region near
zero, followed by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;code instructions&lt;/a&gt;,
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;data structures&lt;/a&gt;,
the &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and then a
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack&lt;/a&gt;
in that order, as shown in Fig 1.  The
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack&lt;/a&gt;
typically starts at the
end of memory and grows upwards with each subroutine call, whereas the
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;
typically starts at the end of global variable memory and grows downwards
with each &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;However, &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
systems tend not to have one monolithic type of memory.  They
typically have several memory types within any design.  These basic
memories include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash memory&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is a slow non-volatile memory.  It is great for initial instructions
to get a program off the ground.  Since it is slow to access, it may not
be ideal to execute programs from, although small designs may need to do
just that.&lt;/p&gt;

    &lt;p&gt;The two big details you need to know are that
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;
is slow, and it is very difficult to write to as part of a program.
This makes it really good as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt; memory, but not so
great for other purposes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;Block RAM&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is the ideal type of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
you’d want to use in any system.  It is fast.  It’s simple to use and
create.  The cost to access one part of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
is the same as the cost to access any other part of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The big downside of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;?
You only have a limited amount of it.  For
example, the iCE40HX8k FPGA typically has only about 8kB of usable
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Yes, the data sheet will claim 16kB of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Realistically, some of that 16kB will be used &lt;a href=&quot;/2018/07/21/zipcpu-icoboard.html&quot;&gt;elsewhere in the
design&lt;/a&gt;, so the most
you are likely to get is probably going to be about 8kB of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;Static RAM (SRAM)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is similar to
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
but not quite as fast or as simple to work with.  Like
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
it is volatile.  However, it tends to be off chip, slower to access,
fairly easy to build &lt;a href=&quot;https://github.com/zipCPU/icozip/blob/master/rtl/icozip/sramdev.v&quot;&gt;a
controller&lt;/a&gt; for,
and it also cheap enough that you can have more memory than
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
The drawback is the technology within:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
tends to use more power and take more room than the &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;dynamic types of
RAM&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;One cool feature of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
is that if you ignore it, and don’t cut the power,
the memory doesn’t change.  As a result,
&lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;
once had a &lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;Nexys board design&lt;/a&gt;
that allowed you to load the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
with one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
configuration, and then swap
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
configurations.  Sadly, the &lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;board with this
capability&lt;/a&gt;
is no longer actively marketed and there may only be a small number of
&lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;these boards&lt;/a&gt;
left.  As I understand the story, &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;
struggled to get the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt; chips they
needed to continue manufacturing the boards, and so they were forced to
switch to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;Synchronous, Dynamic Random Access Memory (SDRAM)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The big grandaddy of all RAM devices tend to be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s.&lt;/p&gt;

    &lt;p&gt;By this I’m going to include not only the simpler
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s,
but also the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR_SDRAM&quot;&gt;DDR&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR2_SDRAM&quot;&gt;DDR2&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;s.
Since these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
devices are built out of capacitors,
the memory can be made compact, and so they are inexpensive to manufacture,
and therefore some of the cheapest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; devices
to purchase.  The
biggest drawbacks to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
are that the controllers tend to be complex,
and the access latency tends to be high.  How hard are the controllers?  Well,
let’s just say that I have yet to complete my first working
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
&lt;a href=&quot;https://opencores.org/projects/wbddr3&quot;&gt;controller&lt;/a&gt;.  I know it’s possible,
since &lt;a href=&quot;https://www.librecores.org/enjoy-digital/litedram&quot;&gt;LiteDRAM&lt;/a&gt; has
built some awesome
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
controllers.
Other than that,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s
tend to be high volume low cost devices.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;Hyperram&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A newcomer to the digital design space are the
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;Hyperram chips&lt;/a&gt;.
These really belong in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
category above, since they tend to be built from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s
internally.  The big difference is that
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;s
have a simpler interface that is easy to build a controller for.  Likewise,
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;s
tend to have lower latencies than many other DDR
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
solutions, since the complex
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
array control is handled within the
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;
chip itself.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, so that’s what we have to play with.  What might an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_space&quot;&gt;address space&lt;/a&gt;
look like with these various types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;s?&lt;/p&gt;

&lt;h4 id=&quot;block-ram-only&quot;&gt;Block RAM Only&lt;/h4&gt;

&lt;p&gt;The simplest memory configuration we might build would be a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; only
configuration.  This configuration would be built as though there were no
other memories in the system.  It would typically consist of a keep-out
address range near zero, addresses for the various peripherals, then the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
address itself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Block RAM and peripherals only&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-bkram.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, the problem with this configuration is that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
is both limited and volatile:
it won’t have the values we need within it when we power up our new design, or
later when we reset our design.  Still, this is a great memory model if you
are first bringing up your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
and you haven’t yet debugged any other types of memory.&lt;/p&gt;

&lt;p&gt;I’ll admit I’ve even thought about segmenting the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
into both a read only component, or block ROM if you will, and a volatile
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
component.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Block RAM and Block ROM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-bkrom.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Why would I do this?  Because it seems like few processors measure their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;
performance in the absence of their bus.  Were I to build a system
like this, I might be able to measure the speed of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set&lt;/a&gt;
independent of the bus implementation.&lt;/p&gt;

&lt;p&gt;Of course, the problem with both of these designs is that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; is scarce.
What else might we use?&lt;/p&gt;

&lt;h4 id=&quot;block-ram-and-flash-rom-together&quot;&gt;Block RAM and Flash ROM together&lt;/h4&gt;

&lt;p&gt;Most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s,
have a &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;SPI flash&lt;/a&gt;
of some type which can be used as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; itself exists for the
purpose of storing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
power up configuration, but typically there’s 75% of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
left over once that is done.  Hence, you get this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM memory&lt;/a&gt;.
for “free” with the price of your board.&lt;/p&gt;

&lt;p&gt;When
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
isn’t enough, or alternatively when you want your program to
run from non-volatile memory, this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is available to you.  Indeed, some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
boards don’t really have much more than
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
devices to act as memories as discussed above.  Examples of these boards
include the &lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, the
&lt;a href=&quot;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&quot;&gt;iCEBreaker board&lt;/a&gt;,
and the &lt;a href=&quot;https://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod
S6&lt;/a&gt;.
This leads to a memory space such as Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Flash (ROM) and Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The original linker script I used for &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;my CMod S6
design&lt;/a&gt; placed all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;CPU instructions&lt;/a&gt;
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; following the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
configuration, and all the
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;data memory&lt;/a&gt; into the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
This configuration is shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Flash based instruction layout&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash-loaded.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, the ‘D’ below the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; represents
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;global data&lt;/a&gt;,
‘H’ represents the &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and
the ‘S’ represents the 
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;Stack&lt;/a&gt; memory.
Likewise the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
memory area would start following the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
configuration data, shown here as &lt;code class=&quot;highlighter-rouge&quot;&gt;FPGA&lt;/code&gt;.
This would then be followed by a bootloader ‘B’, traditional instructions
&lt;code class=&quot;highlighter-rouge&quot;&gt;Insns&lt;/code&gt; and any constant program data &lt;code class=&quot;highlighter-rouge&quot;&gt;Const&lt;/code&gt;.  The purpose of the bootloader
was to move any pre-initialized global data, shown here as &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;, to
the beginning of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the design failed to meet my real-time speed requirements, driven by the
need for an audio output, I then came back and placed certain instructions,
those in critical sections of my code that needed to run at high speed, into the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;–copying
them from their original location
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  This new configuration
is shown in Fig 6 below, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; section denoting these high speed
instructions that needed to be copied to
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
by the bootloader &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Placing critical instructions in Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash-kernel.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While I managed to solve this challenge, it was a challenge that needed to be
solved and the solution I found won’t necessarily work for all designs.
Imagine, for example, if I wanted to load the C-library into 
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.  It’s not
going to fit no matter how you try to squeeze it.  (It’s not a pair of Levi’s)
Therefore, given that &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is slow, you might wish to move up to a faster
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; type:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;flash-and-sdram&quot;&gt;Flash and SDRAM&lt;/h4&gt;

&lt;p&gt;Some of my larger devices, such as my
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty A7&lt;/a&gt;
or my
&lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video&lt;/a&gt;
boards, have a
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
as well.  The &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA2-LX25 SoC&lt;/a&gt;
I have also works with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
just not a &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;.
Either way, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
chip provides a lot of memory, allowing programs to copy themselves from the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash device&lt;/a&gt;
to the
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM device&lt;/a&gt;.
This could easily fit the model above, only we would now replace the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
Not only that, for speed we could copy our instructions from the extremely slow
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
onto the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Copying all data to the SDRAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-sdram.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But what about that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;?
How might we use it now?&lt;/p&gt;

&lt;p&gt;The classic answer would be to use all of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
on your device as caches for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
This would mitigate the latency found within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;flash-block-ram-and-sdram&quot;&gt;Flash, Block RAM, and SDRAM&lt;/h4&gt;

&lt;p&gt;Alternatively, we could place certain memories, at our discretion, within the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
I’ve often done this with the stack memory, but you could also do
this with any kernel memory that needed to be low-latency as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. Placing the stack and critical instructions into Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-sdram-kernel.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id=&quot;flash-block-ram-and-hyperram&quot;&gt;Flash, Block RAM, and HyperRAM&lt;/h4&gt;

&lt;p&gt;Now, just when you think you have everything figured out, someone will give you
an auxiliary memory chip, such as this
&lt;a href=&quot;https://1bitsquared.com/products/pmod-hyperram&quot;&gt;Hyperram from one bit-squared&lt;/a&gt;,
and you’ll wonder how to integrate it with the rest of your system.
It may never be a permanent fixture to any given design, or it may be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
the &lt;a href=&quot;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&quot;&gt;iCEBreaker&lt;/a&gt; was
was lacking.  Either way, you now need to quickly and easily
reconfigure the design you once had working.&lt;/p&gt;

&lt;p&gt;My whole point is that, in the realm of reconfigurable memory spaces, the
place where you want to keep all the various parts of your software programs
will likely keep changing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
was just given an upgrade to handle just that issue.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-linker-script-file&quot;&gt;The basic Linker Script File&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
that I build tend to have four parts to them.  First, the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;script&lt;/a&gt;
describes a pointer to the first instruction the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
will execute.  The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html&quot;&gt;second block declares the various
memories&lt;/a&gt;
on board.
The third part declares some fixed pointers that can then be referenced
from within my code.  Finally, the &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/SECTIONS.html&quot;&gt;fourth part describes how the various
components of my design will be laid out in
memory&lt;/a&gt;.  Let’s take a
look at what this might look like.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;following&lt;/a&gt;
is an &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;generated script&lt;/a&gt;
to handle a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; only
configuration on the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt; platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;Binutils&lt;/a&gt;
supports &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Script-Format.html&quot;&gt;script comments delimited by &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;*/&lt;/code&gt;&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;The generated
script&lt;/a&gt;
therefore begins with a block of legalese comments, followed by
the entry point for your program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*******************************************************************************
*
* Filename:	./bkram.ld
*
* Project:	OpenArty, an entirely open SoC based upon the Arty platform
*
*---- Skipped comments
/*******************************************************************************
*/
ENTRY(_start)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important part of this section is the &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRY()&lt;/code&gt; command, which 
specifies that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
entry point will be &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt;.  This label will be set
by the linker to point to the entry point in your code.  For the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
this is always the first instruction in the instruction address space.&lt;/p&gt;

&lt;p&gt;As for the legalese, if you don’t like my legalese then feel free to replace it
with your own.  The legalese in the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; output
files is copied from a file I typically call
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/legalgen.txt&quot;&gt;legalgen.txt&lt;/a&gt;,
and introduced through
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
via a &lt;code class=&quot;highlighter-rouge&quot;&gt;@LEGAL=&lt;/code&gt; tag in the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/global.txt&quot;&gt;global.txt&lt;/a&gt;
file.  Further, as the owner of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, I assert
no ownership rights over the designs you create with it, just over the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
code itself–which is released under
&lt;a href=&quot;https://www.gnu.org/licenses/lgpl-3.0.en.html&quot;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second section is the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section.  This section lists the address
location and length of every physical memory component within the system.
The comment you see in this section below was added by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
It is one of many throughout the various
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated files to help guide you through the process of creating and updating
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MEMORY
{
	/* To be listed here, a slave must be of type MEMORY.  If the slave
	* has a defined name in its @LD.NAME tag, it will be listed here
	* under that name.  The permissions are given by the @LD.PERM tag.
	* If no permission tag exists, a permission of &#39;r&#39; will be assumed.
	*/
	   bkram(wx) : ORIGIN = 0x05000000, LENGTH = 0x00020000
	   flash(rx) : ORIGIN = 0x06000000, LENGTH = 0x01000000
	   sdram(wx) : ORIGIN = 0x08000000, LENGTH = 0x08000000
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section contains a list of all peripherals that contained
a &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE&lt;/code&gt; key with a &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; value.  If you recall,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
works off of configuration files containing
&lt;code class=&quot;highlighter-rouge&quot;&gt;@KEY=VALUE&lt;/code&gt; statements.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE&lt;/code&gt; key currently supports one of
four types of peripherals: &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OTHER&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt;.
What makes &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; peripherals different is that they are included in the
linker script &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section above.  You can read more about this in my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/autofpga/blob/master/doc/icd.txt&quot;&gt;icd.txt&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ORIGIN&lt;/code&gt; value is assigned by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; when
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; assigns
addresses.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH&lt;/code&gt; value, indicating the
size of the peripheral, is given by the &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR&lt;/code&gt; tag times the byte-width
of the bus the peripheral is on.  Hence an &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8000&lt;/code&gt; will create
a &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20000&lt;/code&gt; as shown above for a 32-bit wide bus.&lt;/p&gt;

&lt;p&gt;The names given above come from either the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.NAME&lt;/code&gt; tag within the peripheral,
or the peripheral’s name itself as found within its &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;The point is that as your design is composed, and the memories given addresses,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
supports this reconfiguration by creating and populating the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section
of the linker script.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Simple-Assignments.html&quot;&gt;next section contains a variety of symbol declarations and
assignments&lt;/a&gt;.
These symbol names, if defined and used within your C/C++ code, will be
replaced with the values given below.&lt;/p&gt;

&lt;p&gt;First, all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; peripherals are given names and values pointing
to the beginning of their memory regions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* For each defined memory peripheral, we also define a pointer to that
* memory.  The name of this pointer is given by the @LD.NAME tag within
* the memory peripheral&#39;s configuration
*/
_bkram    = ORIGIN(bkram);
_flash    = ORIGIN(flash);
_sdram    = ORIGIN(sdram);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, if there is an &lt;code class=&quot;highlighter-rouge&quot;&gt;LD.DEFNS&lt;/code&gt; tag within the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; script,
its value will be copied into this section as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* LD.DEFNS */
_kram  = 0; /* No high-speed kernel RAM */
_ram   = ORIGIN(bkram);
_rom   = 0;
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together, the sections above tell the linker that we have three types of
memories,
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
It identifies the origins of those memories, their lengths, and then
creates symbols so that your code can access these values.&lt;/p&gt;

&lt;p&gt;Next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;_kram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_ram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_rom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_stack&lt;/code&gt; symbols are used by
the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;ZipCPU’s
bootloader&lt;/a&gt;
to load items from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;
into a high-speed kernel
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; (i.e. 
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;, if used)
or otherwise into regular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
(i.e. an &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;).
Finally, the top of the
&lt;a href=&quot;https://wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt;
is set to be the end of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; section
in this design.&lt;/p&gt;

&lt;p&gt;These are just symbols assigned to values.  We haven’t described any real
linking yet.  Those instructions are found in the next section.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/SECTIONS.html&quot;&gt;last section describes where the various segments of your program
need to be placed into
memory&lt;/a&gt;.  In &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;this
example&lt;/a&gt;,
I define a new memory section starting at the origin of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
aligned on units of 4 octets, and filled with a series of segments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* LD.SCRIPT */
SECTIONS
{
       .ramcode ORIGIN(bkram) : ALIGN(4) {
               _boot_address = .;
               _kram_start = .;
               _kram_end = .;
       		_ram_image_start = . ;
               *(.start) *(.boot)
               *(.kernel)
               *(.text.startup)
               *(.text*)
               *(.rodata*) *(.strings)
               *(.data) *(COMMON)
               }&amp;gt; bkram
       _ram_image_end = . ;
       .bss : ALIGN_WITH_INPUT {
               *(.bss)
               _bss_image_end = . ;
               } &amp;gt; bkram
       _top_of_heap = .;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are also a series of assignments in this section as well.  These define
both values that will be used by the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;,
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;_ram_image_start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_bss_image_end&lt;/code&gt;, as well as an ending value
which will then be the pointer to the beginning of the heap, &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/bootloader.h&quot;&gt;simple pair of lines within your C++
code&lt;/a&gt;,
such as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will allow you to get the value of this &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt; value, and to initialize
the &lt;code class=&quot;highlighter-rouge&quot;&gt;heap&lt;/code&gt; pointer with it.&lt;/p&gt;

&lt;p&gt;But what about those sections?  Here are some of their basic meanings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start) *(.boot)&lt;/code&gt;: These two segments are
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 specific segments.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start)&lt;/code&gt; segment is used by the
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 to make certain the startup code is the first set of instructions
 following the reset address–which is typically the beginning of
 the &lt;code class=&quot;highlighter-rouge&quot;&gt;SECTIONS&lt;/code&gt; area although not in this case.  The most important part of
 this startup code is that it sets the
 &lt;a href=&quot;https://wikipedia.org/wiki/Call_stack&quot;&gt;stack pointer&lt;/a&gt; that everything
 else will depend upon, and then jumps to the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;.
 When the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 returns, it then jumps to your &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function.  When &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; returns,
 it halts the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.boot)&lt;/code&gt; code is another &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 section where I place the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 instructions.&lt;/p&gt;

    &lt;p&gt;Both of these need to come early in the code order, primarily for the times
 when I need to copy instructions from
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
 to
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;–although
 they aren’t necessarily used in this example.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.kernel)&lt;/code&gt;: I created this
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; specific section to support my
 &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;S6SoC project&lt;/a&gt;.  Any code
 placed in this section will be copied to the fastest
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
 in the project (&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
 RAM&lt;/a&gt;), in case the
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
 has code that must run at high speed.&lt;/p&gt;

    &lt;p&gt;Both the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.kernel)&lt;/code&gt; section as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.boot)&lt;/code&gt;
 sections are unknown to the
 &lt;a href=&quot;https://www.gnu.org/software/binutils&quot;&gt;binutils linker&lt;/a&gt;
 or &lt;a href=&quot;https://www.gcc.org&quot;&gt;GCC&lt;/a&gt;.  The code to be placed
 in these sections must specifically be marked as such.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.text*)&lt;/code&gt;: These sections contain the instructions for the program in
 question.  Now that we have all the nastiness above out of the way, we can
 actually place these sections, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.text.startup)&lt;/code&gt; section among
 these placed into memory first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.rodata*) *(.strings) *(.data) *(COMMON)&lt;/code&gt;: These sections contain the
 read-only (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;) data used by my program, any strings within the
 program, and finally any global data structures with initial values.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 needs to copy these sections into their places, but nothing else is required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.bss)&lt;/code&gt;: The final section is the
 &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;.
 Unlike the other segments above, where the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 just needs to copy them into place, the
 &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;
 needs to be cleared to all zeros.  This is where any uninitialized
 global variables within your program will be placed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s one other thing you need to know about this section, the &lt;code class=&quot;highlighter-rouge&quot;&gt;}&amp;gt; bkram&lt;/code&gt;
notation.  This means that the section just described should be allocated
a place in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt; device.  Something else you might see is
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&amp;gt; bkram AT&amp;gt;flash&lt;/code&gt;.  This means that the section needs to be placed into
&lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;, and that your code needs to be linked as though the section were
placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;.  However, it is first placed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt; memory
area, and left there for your
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
to copy it into &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that you know what the various sections of this file are, and how the
segments within your program will be allocated among them, what happens if
we want to do something else?&lt;/p&gt;

&lt;h4 id=&quot;multiple-linker-configurations&quot;&gt;Multiple Linker Configurations&lt;/h4&gt;

&lt;p&gt;Originally, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
created one linker script, called &lt;code class=&quot;highlighter-rouge&quot;&gt;board.ld&lt;/code&gt;, and adjusted it based upon
the peripherals available to it.  For example, it could handle designs with
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
but couldn’t really do much with
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;s.
This worked great for some designs, such as those with a massive amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
as shown in Fig. 7 or 8 above, but horrible for others, such as Fig. 2
through 6 above.&lt;/p&gt;

&lt;p&gt;As an example, if I wanted a design to run from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; alone,
such as to test the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
itself apart from its memory peripherals with
the form in Fig. 2 above, this one size fits all
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
would have be inadequate.  Likewise, if I had a design that didn’t have enough
room in &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
to copy the various program segments into (imagine the C-library here), the
stock linker script wouldn’t work either.  While I could create a script by
hand for each of these scenarios, such as I was &lt;a href=&quot;https://github.com/ZipCPU/tinyzip/blob/master/sw/board/boardram.ld&quot;&gt;starting to
do&lt;/a&gt;
in my &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;TinyZip design&lt;/a&gt;, that script would
then need to be updated by hand every time the addresses in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; region changed.&lt;/p&gt;

&lt;p&gt;This was getting annoying.&lt;/p&gt;

&lt;p&gt;To deal with this, I just recently created some new
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; tags for
creating &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt;: If present in a given configuration file,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
will create a 
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
and write it out to the named file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt;: If present, these definitions will be added to the definitions
section of the new linker script.&lt;/p&gt;

    &lt;p&gt;Well, sort of.  What if a design has multiple linker script configuration
files?  In this case, the components that have no &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tags will have
their &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt; tags copied to all linker scripts, while the components
with an &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tag will have their &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt; tag copied
into the linker script defined by that component only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.SCRIPT&lt;/code&gt;: This tag, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;SECTION&lt;/code&gt; component above,
will be copied into the linker script associated with the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tag
in the same component verbatim, although with variable substitution
applied.  So, for example, if our design creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;RESET_ADDRESS&lt;/code&gt;
tag within the peripheral named &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; (i.e. having a &lt;code class=&quot;highlighter-rouge&quot;&gt;PREFIX&lt;/code&gt; tag
of &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;, then we might reference &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(zip.RESET_ADDRESS)&lt;/code&gt; to get a
copy of what that address was here in this location.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several former linker tags have kept their functionality, but now have new
names.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.NAME&lt;/code&gt;: This is the name of the memory component, as found in the
linker script.  In the example above, we had names of &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;sdram&lt;/code&gt;.  This tag used to be called &lt;code class=&quot;highlighter-rouge&quot;&gt;@LDSCRIPT.NAME&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.PERM&lt;/code&gt;: The &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section of a linker script requires a permission
string.  The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html#MEMORY&quot;&gt;binutils
documentation&lt;/a&gt;
calls this a set of attributes.  So far, I’ve only used &lt;code class=&quot;highlighter-rouge&quot;&gt;rx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wx&lt;/code&gt; for
executable &lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;
and executable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
respectively.  &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html#MEMORY&quot;&gt;Other possible attributes are defined can be
found in the binutils
documentation&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; does
nothing more than copy then from your design file to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section of the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Remember, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;  is primarily a copy-paste tool with the ability to compose bus interconnects,
and a limited variable substitution and expression evaluation capability
sprinkled within.  Similarly, another of the goals of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; was
that when it’s work was done, the computer generated files would be
comprehensible, rather than your more typical computerese.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.ENTRY&lt;/code&gt;: If present, this will define the entry symbol for a given
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.
If not specified, this will default to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt; symbol as above.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This updated method of generating custom
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
has now worked so well for me that I have several
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
defined for the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; upgrade to
my &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/&quot;&gt;OpenArty&lt;/a&gt; project:
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/mem_bkram_only.txt&quot;&gt;one for block RAM
only&lt;/a&gt;,
another for &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/mem_flash_bkram.txt&quot;&gt;flash plus block
RAM&lt;/a&gt;,
and I’ll be adding a third for flash, block RAM, and SDRAM support.
Even better, using this approach, adding
support for a
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM controller&lt;/a&gt;
should be just as simple as copying the controller components to my
RTL directory (or a subdirectory of it) and
adding the
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
linker script configuration to my design.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Working with one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
design across many different hardware components and
capabilities can be a challenge.  It can be difficult to take a basic
design and rapidly configure it for a new set of hardware, or to maintain
support across several different hardware implementations.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can handle many of these reconfiguration needs, to make reconfiguring
designs from one hardware configuration to another easier.&lt;/p&gt;

&lt;p&gt;Even better,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
generation just got an upgrade to help it deal with the need for multiple
different memory configurations–either between designs or even within the
same design.&lt;/p&gt;

&lt;p&gt;Of course, the unwritten reality of this article is that I don’t really want to
spend my time writing
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  I would
rather be spending my time getting my new
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM&lt;/a&gt;
to work.  This is just my way of trying to simplify the massive configuration
challenges I have along the way.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Let him that stole steal no more: but rather let him labour, working with his hands the thing which is good, that he may have to give to him that needeth. (Eph 4:28)&lt;/em&gt;</description>
        <pubDate>Sat, 22 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2018/12/22/autofpga-ld.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2018/12/22/autofpga-ld.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Makefiles for formal proofs with SymbiYosys</title>
        <description>&lt;p&gt;It seems that the more I work with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, the more options it accumulates.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. &lt;a href=&quot;/about/zipcpu.html&quot;&gt;A CPU&lt;/a&gt; with lots of options&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/zipcpu-config.png&quot;&gt;&lt;img src=&quot;/img/zipcpu-config.png&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I simplified the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU options&lt;/a&gt;
somewhat to present Fig. 1, but you can see &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;all the CPU options and their
settings&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/&quot;&gt;ZipCPU GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First it was the prefetch: I built a &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;basic
prefetch&lt;/a&gt;, then &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;one
that can issue two bus requests at
once&lt;/a&gt;, then &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;one with
a fullly integrated
I-cache&lt;/a&gt;.  In
each case, I wanted more performance but didn’t want to give up the ability of
building the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in an extremely
low logic configuration.&lt;/p&gt;

&lt;p&gt;Then it was &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;the
multiplies&lt;/a&gt;:
not every board I worked with had the embedded DSP elements required for
hardware accelerated multiplies.  Indeed, some that had embedded
DSP elements couldn’t handle a 32x32 bit multiply within a single clock
(Spartan 6).  This forced me into two separate multiplication implementations.
Then, the fact that the iCE40 has &lt;em&gt;no&lt;/em&gt; DSPs lead to an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/slowmpy.v&quot;&gt;additional
multiplication
implementation&lt;/a&gt;
just to handle that environment.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. The pipeline structure of the ZipCPU&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.png&quot; alt=&quot;&quot; width=&quot;531&quot; /&gt;&amp;gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;initial memory
subsystem&lt;/a&gt;,
while working, was cripplingly slow.  A &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;faster memory subsystem was written to
replace it&lt;/a&gt;,
and then a proper &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;
was written to replace that.  On top of that, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can optionally support a
&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html&quot;&gt;lock instruction for atomic
access&lt;/a&gt;,
a compressed instruction set, a set of CPU-local peripherals, and more.&lt;/p&gt;

&lt;p&gt;If those weren’t enough changes, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/idecode.v&quot;&gt;instruction
decoder&lt;/a&gt; needs to
support all of the various instruction set extensions.  Lock instructions need
to be honored by the memory module, unless no lock instruction is implemented.
Multiplication instructions need to be honored if enabled, while creating
illegal instruction exceptions if not.  Some of the options need special
decoding, such as the simulation instructions or the early
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branching&lt;/a&gt;
instructions.&lt;/p&gt;

&lt;p&gt;This leaves me with an ongoing and growing problem: how do you
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;a core&lt;/a&gt;
that has so many options associated with it?&lt;/p&gt;

&lt;p&gt;Let’s look at this problem from both the standpoint of the
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
script file, as well as a supporting
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;symbiyosys-tasks&quot;&gt;SymbiYosys Tasks&lt;/h2&gt;

&lt;p&gt;While the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is highly
configurable, it doesn’t make sense to test every permutation of the various
configurations.  Therefore, let’s look over some of the more common
configuration settings used by the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  More than that, we’ll give
each of these configurations names.  These names will us remember the
configuration set, as well as helping to make our
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
configuration simpler in a moment.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;dcache&lt;/p&gt;

    &lt;p&gt;This new option describes a configuration that uses the brand new
(&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;,
Xilinx Series-7 proven) &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;.  If
you want performance from the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
this is no-holds barred attempt at high speed and full features.&lt;/p&gt;

    &lt;p&gt;This is the configuration I am testing within my
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; project, in case you want to
see it in action.  (You may need to check out the &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;autoarty
branch&lt;/a&gt; where it exists
today.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;piped&lt;/p&gt;

    &lt;p&gt;Prior to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;, this
configuration was the no-holds barred high speed, full
featured &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; version.  It
describes a fully pipelined implementation containing an
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;multiplies&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divides&lt;/a&gt;,
compressed instruction set, and early branching capability.  (The
early branching capability allows you to branch from the decode stage,
without waiting for the later stages.  It applies only to unconditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branches&lt;/a&gt;.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nopipe&lt;/p&gt;

    &lt;p&gt;This is the same thing, only we shut down everything we don’t need: no
pipeline CPU (forcing a minimum of 3 clocks per instruction), no
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;multiplies&lt;/a&gt;,
no &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divide
instructions&lt;/a&gt;,
but still supports the compressed instruction set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lowlogic&lt;/p&gt;

    &lt;p&gt;Much to my surprise, the no-pipelined option wasn’t as small as I needed to
get for some implementations, so this version drops the compressed
instruction set support.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ice40&lt;/p&gt;

    &lt;p&gt;Didn’t we get rid of enough stuff yet?&lt;/p&gt;

    &lt;p&gt;Apparently not.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/formal/2017/07/21/zipcpu-icoboard.html&quot;&gt;iCE40 doesn’t support distributed
RAM&lt;/a&gt;.  All reads
from the register file need to go directly into a register first, and only
on the next clock can we do anything with them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
we can declare different “tasks” to verify each of these
configurations.  The following code declares five such “tasks”, one on
each line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
dcache		full_proof      dcache
piped		full_proof      no_dcache
nopipe		nopipe          no_dcache
lowlogic	nopipe		no_dcache
ice40		nopipe          no_dcache	nobkram&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the format of this section.  It starts with a &lt;code class=&quot;highlighter-rouge&quot;&gt;[tasks]&lt;/code&gt; line.  Every
line thereafter begins with the name of a task.  In our case, these represent
the various configurations we just outlined above.  The second half of the line
is more interesting.  This consists of a series of labels which will also be
accepted as task names later.  That way, we can specify &lt;code class=&quot;highlighter-rouge&quot;&gt;ice40&lt;/code&gt; and get
all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;nopipe&lt;/code&gt; (non-pipelined) options, together with the &lt;code class=&quot;highlighter-rouge&quot;&gt;no_dcache&lt;/code&gt;
option and the more critical &lt;code class=&quot;highlighter-rouge&quot;&gt;nobkram&lt;/code&gt; option.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. One command per line&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/sby-taskcmd.svg&quot; alt=&quot;taskname: yosys-cmd&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;How might we use this?  There are two basic approaches.  First, we can begin
any line following in our
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
script with a task name followed by a colon.  Once done, everything
following is only executed if that given task name is the active
task.  This applies to the aliased names as well, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;full_proof&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;no_dcache&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[options]
mode prove
depth 18
dcache:   depth  9
piped:    depth 14
nopipe:   depth 11
lowlogic: depth 10
ice40:    depth 11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far, this is kind of interesting but not all that useful.&lt;/p&gt;

&lt;p&gt;Let’s consider some other things &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; offers.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;,
you can set a macro.  You might recognize macros by their Verilog usage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Define a macro, NO_DISTRIBUTED_RAM
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	NO_DISTRIBUTED_RAM&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NO_DISTRIBUTED_RAM&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Code that only gets executed if `NO_DISTRIBUTED_RAM` is defined
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Code that only gets executed if `NO_DISTRIBUTED_RAM` is not defined
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One problem with this sort of declaration is that it isn’t clear whether the
macro defined in one file will remain active in another.&lt;/p&gt;

&lt;p&gt;Alternatively, we could use a
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_read.html&quot;&gt;command to set this macro&lt;/a&gt;
but only for some configurations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[script]
nobkram: read -define -DNO_DISTRIBUTED_RAM
read -define -DZIPCPU
#
# ... files the ZipCPU depends upon have been skipped here
# for brevity
#
read -formal zipcpu.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This defines the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_DISTRIBUTED_RAM&lt;/code&gt; across all input files, but only
if &lt;code class=&quot;highlighter-rouge&quot;&gt;nobkram&lt;/code&gt; is the active task.  Likewise, &lt;code class=&quot;highlighter-rouge&quot;&gt;ZIPCPU&lt;/code&gt; is defined for all
tasks.  This latter definition is how I handle &lt;a href=&quot;/formal/2018/12/18/skynet.html&quot;&gt;telling submodules if they
are being verified as separate modules or as submodules
instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another very useful &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
command is the &lt;a href=&quot;http://www.clifford.at/yosys/cmd_chparam.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chparam&lt;/code&gt;
command&lt;/a&gt;.  You can use this to change
the value of any parameter within your logic.  As examples, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has several high
level parameters.  Perhaps you may have noticed some of them in Fig 1. above.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;IMPLEMENT_FPU&lt;/code&gt; is a single bit parameter
that controls whether the (still not yet existent) floating point unit (FPU)
is included.  As a more relevant example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LGDCACHE&lt;/code&gt; controls the size
of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
and whether the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
is included at all.  If this value is set to zero, no
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;
will be included in the build, whereas if it is non-zero it sets the size
of the cache.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Associating multiple lines with a given script&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/sby-taskcmd-set.svg&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For this, we’ll use the second approach for specifying task-configurations,
as shown in Fig. 4 on the right.  In this case, we can start a set of
task-specific commands using the task name and a colon on a line by itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;chparam -set IMPLEMENT_FPU    0 zipcpu

dcache:
chparam -set OPT_LGDCACHE    10 zipcpu

no_dcache:
chparam -set OPT_LGDCACHE     0 zipcpu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This process is continued until either another task name, or
until a line containing two &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;s by themselves.  Hence, the definition of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;full_proof&lt;/code&gt; &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; configuration shown
below, as well as the minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;nopipe&lt;/code&gt;-lined option and the even more
minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;lowlogic&lt;/code&gt; option.  When done, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; line specifies that all the
tasks join together again for the lines following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;full_proof:
chparam -set IMPLEMENT_MPY    1 zipcpu
chparam -set IMPLEMENT_DIVIDE 1 zipcpu
chparam -set EARLY_BRANCHING  1 zipcpu
chparam -set OPT_CIS          1 zipcpu
chparam -set OPT_PIPELINED    1 zipcpu

nopipe:
chparam -set IMPLEMENT_MPY    0 zipcpu
chparam -set IMPLEMENT_DIVIDE 0 zipcpu
chparam -set EARLY_BRANCHING  0 zipcpu
chparam -set OPT_CIS          1 zipcpu
chparam -set OPT_PIPELINED    0 zipcpu

lowlogic:
chparam -set OPT_CIS 0 zipcpu
--

prep -top zipcpu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, just the one command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;sby -f zipcpu.sby&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
the entire
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in &lt;em&gt;all&lt;/em&gt; of these various
configurations.  For each configuration,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will create a directory,
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_dcache&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_full&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_lowlogic&lt;/code&gt;.  Within this
directory, you’ll find the &lt;code class=&quot;highlighter-rouge&quot;&gt;logfile.txt&lt;/code&gt; containing the standard output from
the run.  You can use this to find out whether your design passed that proof,
or if not what assertion or cover statement failed.  You’ll also find an
&lt;code class=&quot;highlighter-rouge&quot;&gt;engine_0&lt;/code&gt; directory with any trace files within it.  (Why &lt;code class=&quot;highlighter-rouge&quot;&gt;engine_0&lt;/code&gt;?
Because I tend to only ever use one
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
engine.  Otherwise you might have other engines as well.)&lt;/p&gt;

&lt;h2 id=&quot;using-make-to-drive-symbiyosys&quot;&gt;Using Make to drive SymbiYosys&lt;/h2&gt;

&lt;p&gt;There’s one other thing
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
provides that is very valuable from a scripting standpoint.  Upon
completion,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will create an empty file in the newly created results
directory indicating the results of the run.  Example files include
&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FAIL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UNKNOWN&lt;/code&gt;.  This file makes it easy to create a
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.
to support several
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
runs, and we only need use the &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file to do it.&lt;/p&gt;

&lt;p&gt;Let’s pick an example component to verify, such as the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer
that we discussed earlier&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;timer itself&lt;/a&gt;
has no real configuration options, so to verify it we could just place the
following two lines into our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
however, will make a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; upon every run.
Once this directory exists, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will no longer run our proof.  However, if
we tell &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; is just a
name of something to do and not a file, we can create the functionality we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/bench/formal/Makefile&quot;&gt;This Makefile&lt;/a&gt;
will now command a
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
proof everytime we try to &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;But what if the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;
hasn’t changed?  Why should we re-verify it if &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;the code within
it&lt;/a&gt;
hasn’t changed, and if it passed the last time?&lt;/p&gt;

&lt;p&gt;Here is where &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; starts to shine.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer/PASS&lt;/code&gt; is a file, created
upon successful completion of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
pass, we can tell
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;
that this file is created from the files the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;.
depends upon.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer/PASS&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;../../rtl/peripherals/ziptimer.v&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, anytime the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;ziptimer.v file&lt;/a&gt;
changes, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
it again.  Further, should the proof fail, the &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file will not get
created, and so the next time we call
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; it will attempt to create this
file again until our proof passes.&lt;/p&gt;

&lt;p&gt;What if we wanted to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt;
a lot of things?  Rather than running 
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; many times, once per target, we might
instead start our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;
with a list of proofs, containing both the components as well as larger proofs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;TESTS &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TESTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; zipcpu
&lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TESTS)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; is the default &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target,
as defined by being the first target within our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;,
then all of the tests named in &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TESTS)&lt;/code&gt; will get built, er … verified.&lt;/p&gt;

&lt;p&gt;Let’s clean this up a little more with some definitions.  Since I like to keep
my &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/bench/formal&quot;&gt;scripts&lt;/a&gt;
separate from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/rtl&quot;&gt;my Verilog
files&lt;/a&gt;, it might help
to use a name for that path to simplify it.  Here, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;RTL&lt;/code&gt;.  Once
defined, this value will get substituted anytime we reference &lt;code class=&quot;highlighter-rouge&quot;&gt;$(RTL)&lt;/code&gt;.
Likewise we’ll shorten the name of our target &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;RTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; ../../rtl

&lt;span class=&quot;nv&quot;&gt;TMR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; ziptimer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also define the names of our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal wishbone
property sets&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;MASTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/fwb_master.v
&lt;span class=&quot;nv&quot;&gt;SLAVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/ex/fwb_slave.v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Putting all this together, the script now says that …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt; is a “phony” target that doesn’t build a file.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;To build &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt; we need to first build &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt;.  Why the extra step?
Just so that we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;make ziptimer&lt;/code&gt; later, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;make
ziptimer/PASS&lt;/code&gt; or worse &lt;code class=&quot;highlighter-rouge&quot;&gt;make ziptimer_timerconfiguration/PASS&lt;/code&gt; for
every
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
configuration we might have.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(TMR)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR)/PASS&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Finally, we can call
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
our &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;.
This proof is dependent upon not only the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;code for the timer
itself&lt;/a&gt;,
but also a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;list of formal wishbone
properties&lt;/a&gt;.
These are called dependency files, or sometimes just dependencies
for short, because the validity of our proof &lt;em&gt;depends&lt;/em&gt; upon these files.
By listing these dependencies to the right of the &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will only
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
our &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
if either the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt; file is missing, or if one of the
dependency files is newer than the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(TMR)/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR).sby $(RTL)/peripherals/$(TMR).v $(SLAVE)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(TMR)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is exactly what we want from a
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;!
Running  &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will run all of our &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; proofs,
but once all the logic is
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified&lt;/a&gt;,
running
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will just return a message telling
us it has nothing to do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
make: Nothing to be &lt;span class=&quot;k&quot;&gt;done for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;all&#39;&lt;/span&gt;.
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But how shall we handle the multiple configurations we discussed earlier?&lt;/p&gt;

&lt;p&gt;Why not set up one proof per configuration?&lt;/p&gt;

&lt;p&gt;Let’s examine the proof of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;core&lt;/a&gt;
itself.  Remember how we had so many configurations above?  What if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file associated with each configuration was a
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; zipcpu
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Proofs to build
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$(CPU)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)_dcache/PASS $(CPU)_piped/PASS&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;$(CPU)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)_nopipe/PASS $(CPU)_lowlogic/PASS $(CPU)_ice40/PASS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Files the proofs depend upon
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPUDEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/&lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/cpuops.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/idecode.v &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/pipemem.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/memops.v			  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/wbdblpriarb.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/fwb_counter.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/cpudefs.v  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	f_idecode.v abs_div.v abs_prefetch.v abs_mpy.v &lt;span class=&quot;nv&quot;&gt;$(MASTER)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(SLAVE)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby
&lt;span class=&quot;c&quot;&gt;# Now one line for each proof, to build the respective &amp;lt;sbydir&amp;gt;/PASS files
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$(CPU)_dcache/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby dcache

&lt;span class=&quot;nl&quot;&gt;$(CPU)_piped/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby piped

&lt;span class=&quot;nl&quot;&gt;$(CPU)_nopipe/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby nopipe

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;idea&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;point&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once accomplished, one simple command,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will run all of the proofs we have described within our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.
This includes calling &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt; every one of
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s various configurations.&lt;/p&gt;

&lt;p&gt;Once completed, or even before, you can run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make -n&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to see what proofs have yet to be completed, or equivalently which proofs have
failed–assuming in the latter case that
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; has completed.&lt;/p&gt;

&lt;p&gt;Of course, the problem with using &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n&lt;/code&gt; to determine which proofs have
failed is what happens after only one proof fails.  After the first proof
fails, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will give you no
information about whether or not the remaining proofs might pass.
Alternatively, if you don’t want
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; to stop on the first failed proof,
you can instead run,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make -k&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Want to use all of your host processors multiple cores?  You could specify
&lt;code class=&quot;highlighter-rouge&quot;&gt;make -k -j &amp;lt;ncpus&amp;gt;&lt;/code&gt; to use all &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ncpus&amp;gt;&lt;/code&gt; of them.  However, this might
leave some of your build cores overloaded during induction.  For
this reason, I’ve considered running &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n -j &amp;lt;ncpus/2&amp;gt;&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;What’s all this good for?  Well, for me this means I can verify my brand new
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;instruction cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/idecode.v&quot;&gt;instruction decoder&lt;/a&gt;,
several arbiters, … and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
itself
from one &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command.  If the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command fails, I can go back and
examine the respective &lt;code class=&quot;highlighter-rouge&quot;&gt;logfile.txt&lt;/code&gt;s to see why.  Likewise, if I want
to know what proofs need to be re-accomplished, I can just type &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n&lt;/code&gt;
to see what &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; would try to build if you ran it again.&lt;/p&gt;

&lt;p&gt;With a little more work, I could split the list of Verilog files, &lt;code class=&quot;highlighter-rouge&quot;&gt;$(CPUDEPS)&lt;/code&gt;,
into a more finer grained list, so that all of the CPU configurations
don’t need to be re-verified every time one file, used only by some
configurations, changes.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;When I first started using this approach of testing multiple configurations
automatically using
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;,
I immediately found several errors within code that I had assumed was working.
The first bug was in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/memops.v&quot;&gt;memory
component&lt;/a&gt;,
where it wasn’t properly handling a misaligned address exception (an option
that wasn’t checked by default).  The second bug was within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;I-cache&lt;/a&gt;,
that I am hoping to blog about soon.  Since I had only verified the safety
properties within it, that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;s given the assumptions, I hadn’t
noticed that certain assumptions rendered the &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;proof
vacuous&lt;/a&gt;.
Now, using these multiple configurations, I can both prove the assertions
and run cover to be even more certain that the various
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; components work.&lt;/p&gt;

&lt;p&gt;So even though I’ve only started using this approach in the most recent
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu&quot;&gt;release of the ZipCPU&lt;/a&gt;, because of the
bugs I’ve found with it using this new approach, I now like it so much that
I’m likely to slowly modify all of the
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;s
within my &lt;a href=&quot;/projects.html&quot;&gt;various projects&lt;/a&gt; to use this
approach as I have opportunity.  Even if the core in question isn’t
configurable, I’m going to make certain I do this in order to guarantee that
the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; checks run automatically.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Then I saw, and considered it well: I looked upon it, and received instruction. (Prov 24:32)&lt;/em&gt;</description>
        <pubDate>Thu, 20 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2018/12/20/sby-makefile.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2018/12/20/sby-makefile.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Swapping assumptions and assertions doesn&#39;t work</title>
        <description>&lt;p&gt;If there’s one thing I hate, it’s admitting I’m wrong.  Today, I need to do
that.&lt;/p&gt;

&lt;p&gt;One of the very real and practical difficulties of working with
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
is managing the complexity.
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal methods&lt;/a&gt;
are roughly exponential in their complexity.  Practically, this means that
there is a limit to the complexity of any design that you wish to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;.
This means that the engineer using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;formal tools&lt;/a&gt;
needs to carefully consider what parts of the design to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;,
and how to carefully break the entire design into smaller pieces that can
verified individually.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;I discussed one possible way of doing this
before&lt;/a&gt;,
as part of aggregating
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
modules together.  The basic approach I used was to
verify the smaller “leaf” sub-modules, and then to aggregate up to larger
modules.  When aggregating up, I used an approach suggested to me by
&lt;a href=&quot;https://www.onespin.com&quot;&gt;another&lt;/a&gt;:
swap the assumptions with the assertions of the submodule.  That way, you
verify that the assumptions made within the submodule hold as part of verifying
the parent module.&lt;/p&gt;

&lt;p&gt;Pictorially, I explained this concept using Fig 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 1. Invariants applied to a parent/leaf module hierarchy&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/invariance-external.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This picture shows the verification process in two parts.  The first part,
on the left,
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifies&lt;/a&gt;
the submodule(s).  These are verified as independent modules from the parent.&lt;/p&gt;

&lt;p&gt;For the second part of the verification shown in Fig. 1, the parent modules
are verified, with the submodules beneath them.  In this case, the assumptions
about the submodules inputs are transformed into assertions, and the assertions
within the submodule are then transformed into assumptions.  The idea is that
if you’ve already proven that the assertions of the submodule hold given the
assumptions, then all you need do is to verify the assumptions of the submodule
and you then know that the assertions will pass.&lt;/p&gt;

&lt;p&gt;I’ve now used this logic within many of my designs, and I’ve been very pleased
with it.&lt;/p&gt;

&lt;p&gt;The only problem with it?  It doesn’t work.  It can lead to false negatives,
where you believe your design works when in actuality it does not.&lt;/p&gt;

&lt;h2 id=&quot;skynet&quot;&gt;Skynet&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. &lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt;, the fictional AI system created by Cyberdyne Systems that tried to destroy all of humanity&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skynet.jpg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/oe1cxw&quot;&gt;Clifford Wolf&lt;/a&gt; was kind enough to provide the
necessary counter example, framed in terms of 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt;, the fictional
defense machine that decided to kill all humans as part of the back story
for &lt;a href=&quot;https://en.wikipedia.org/wiki/Terminator_(franchise)&quot;&gt;Terminator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It goes like this, suppose we have a simple design that determines whether
or not all humanity should be destroyed.  The designers of this system were
smart enough to formally verify it, and so they had a strong confidence that
humanity would never be destroyed.&lt;/p&gt;

&lt;p&gt;Because of the logic flaw we’ll be discussing today, their confidence was
a false confidence.&lt;/p&gt;

&lt;p&gt;Imagine their logic was something as simple as logic below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;skynet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we obviously don’t want to kill everyone, we add a formal section to this
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet logic&lt;/a&gt;
to make certain &lt;code class=&quot;highlighter-rouge&quot;&gt;o_kill_all_humans&lt;/code&gt; will never be asserted,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
on &lt;a href=&quot;/examples/skynet.v&quot;&gt;this logic&lt;/a&gt; will assure us that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
will never decide to destroy all of humanity.&lt;/p&gt;

&lt;p&gt;If only the story stopped there.&lt;/p&gt;

&lt;h2 id=&quot;placing-skynet-in-within-cyberdyne-systems&quot;&gt;Placing Skynet in within Cyberdyne Systems&lt;/h2&gt;

&lt;p&gt;The problem lies in the next step.  Using the approach we discussed before,
we’ll replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; statements with macros.  These
macros are defined depending upon whether or not we are
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
the &lt;a href=&quot;/examples/skynet.v&quot;&gt;submodule (skynet)&lt;/a&gt;,
or its parent–&lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Cyberdyne
Systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do this, we’ll start by creating the various macros, depending upon whether
or not &lt;code class=&quot;highlighter-rouge&quot;&gt;SUBMODULE&lt;/code&gt; is defined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SUBMODULE&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assume&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	ASSERT	assert&lt;span class=&quot;cp&quot;&gt;
`else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assert&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	ASSERT	assume&lt;span class=&quot;cp&quot;&gt;
`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using these macros, we can then rewrite our two formal properties:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, as long as SUBMODULE remains defined, we can still prove that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
will not destroy all humans.&lt;/p&gt;

&lt;p&gt;Let’s add
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;’s &lt;a href=&quot;/examples/skynet.v&quot;&gt;parent module, Cyberdyne
Systems&lt;/a&gt;.  We’ll keep
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt;
simple: there’s no logic within it at all.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyberdyne_systems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;skynet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;determine_fate_of_humanity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, nothing in the logic of
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt; prevents
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
from being corrupted and killing all humans.&lt;/p&gt;

&lt;p&gt;By design this proof should fail, alerting us to the possibility that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt; was never properly constrained.&lt;/p&gt;

&lt;p&gt;It does not fail.  Instead, &lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt;
releases a monster.  Why wasn’t it caught during
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;what-went-wrong&quot;&gt;What went wrong?&lt;/h2&gt;

&lt;p&gt;We did everything right so far: We
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt; that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
would never
kill all humans as long as the input was never equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;.  We
even asserted that the input would never equal &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;, and this
assertion passed.  We then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
both components together, proving that humanity was safe.  However, you
can see from inspection that &lt;em&gt;nothing&lt;/em&gt; keeps the input from being
&lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happened?  Why didn’t this proof fail when it should have?&lt;/p&gt;

&lt;p&gt;The problem is simple: the critical assertion, that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_kill_all_humans&lt;/code&gt;, 
would never be true was converted into an assumption.  Assumptions, if you will
recall, limit the space of what the solver examines.  They take precedence
over assertions.  In this case, the assertion turned assumption
prevented &lt;code class=&quot;highlighter-rouge&quot;&gt;i_input&lt;/code&gt; from becoming &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt; within the solver since
this would’ve caused the assumption to be violated.&lt;/p&gt;

&lt;h2 id=&quot;rescuing-this-logic&quot;&gt;Rescuing this logic&lt;/h2&gt;

&lt;p&gt;There are a couple of things we can do to try to “rescue” this method, none
of them are truly as nice as the initial method appeared to be in the first
place.  We can:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Remove all of the logic within
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;,
leaving only the formal properties behind.&lt;/p&gt;

    &lt;p&gt;Because there’s no logic between the input assumptions, now turned into
assertions, and the output assertions, now turned into assumptions, the
output could be anything depending upon the choice of the solver.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep the logic within
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;,
replace the original submodule assumptions
with an assertion, and then remove all of the local assertions.&lt;/p&gt;

    &lt;p&gt;Sadly, this approach doesn’t work with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
as it can leave the local registers within a module unconstrained.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace the assumptions with assertions, but leave the original assertions
untouched.  Hence we would have only &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; properties within the
submodule design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ASSERT&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SUBMODULE&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assume&lt;span class=&quot;cp&quot;&gt;
`else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assert&lt;span class=&quot;cp&quot;&gt;
`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how I am personally going to move forward when aggregating modules.
   It is simple and robust.  The only problem is that the complexity only
   increases upon aggregation.&lt;/p&gt;

&lt;p&gt;Indeed, if you apply this method to
   &lt;a href=&quot;/examples/skynet.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skynet.v&lt;/code&gt;&lt;/a&gt;,
   you’ll find that the
   parent proof fails (as desired), revealing that nothing is keeping
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt; from killing
   all humans.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;If we could adjust the formal engine, there would be another approach.&lt;/p&gt;

    &lt;p&gt;Normally, during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
all of the assertions are treated as assumptions
until the last step.  This allows these assertions to constrain the design
until the last step, helping the design enter into a valid state during the
run-up to the final stage of the proof.  Then, in that final state, the
assertions are applied and the design succeeds or fails.&lt;/p&gt;

    &lt;p&gt;If we could create a third type of assertion, let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert&lt;/code&gt; for
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
assertion, another approach might work.  &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert()&lt;/code&gt;
would be ignored during the base case prior to the induction.  During the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;inductive&lt;/a&gt;
step, &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert()&lt;/code&gt;
would apply as an assumption for the first &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; steps of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
and then get ignored on the last step leaving behind all of the other
assertions.&lt;/p&gt;

    &lt;p&gt;Of course, this would only work if the first pass (submodule) verification
evaluated &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert&lt;/code&gt; as though it were a true assertion.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps you are wondering how likely it is that this flawed approach,
discussed above, would result in a false alarm.  While I haven’t been keeping
score, I’ve seen problems in many of my proofs that had used this approach.
The rate may even be as high as thirty percent or more, depending upon the
design.  It’s high enough that you cannot ignore it.  Indeed, the proof I
was working on this morning passed until I “fixed” it with one of the
approaches above, revealing a false alarm due to this approach.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The bottom line is that the &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;approach to formal aggregation that I presented
earlier&lt;/a&gt; doesn’t work,
leading instead to a false confidence that your “formally verified” design
works.&lt;/p&gt;

&lt;p&gt;I’m slowly converting my own logic to use approach 3 above, and recommend
that if you’ve been using this approach that you consider doing so as well.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;A little leaven leaveneth the whole lump.  (Gal 5:9)&lt;/em&gt;</description>
        <pubDate>Tue, 18 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2018/12/18/skynet.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/12/18/skynet.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Building a video controller: it&#39;s just a pair of counters</title>
        <description>&lt;p&gt;When I first started working with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s on my
own, the board I started with was a
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board.
As a new student of &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design, and particularly one on a budget, I wanted to create a series of
designs that would eventually use all of the hardware ports of that board.
You know, get the most for your money?  Hence the question, how best should I
use the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; port?&lt;/p&gt;

&lt;p&gt;My original thought was to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;
port was to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;screen buffer&lt;/a&gt;, and then
to display that buffer.  The only problem was that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;screen buffer&lt;/a&gt;
big enough to hold a &lt;code class=&quot;highlighter-rouge&quot;&gt;640*480&lt;/code&gt; screen requires 307kB of buffer space, and the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board didn’t have any external RAM memory, and the Artix-735T
sold on the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board didn’t have enough block RAM for such a buffer.&lt;/p&gt;

&lt;p&gt;How to solve this?&lt;/p&gt;

&lt;p&gt;Eventually, I settled on an approach that used a 25MHz pixel clock and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.  Of course, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
wasn’t fast enough to drive the 25MHz
pixel clock, so I instead run-length encoded the image data and dropped the
bits per pixel down to a four bit value that could then used in a color table
lookup to get full 12’bit color which was all that the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board supported.&lt;/p&gt;

&lt;p&gt;If you’ve worked with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
for a while, you’ll quickly recognize that every step in this increasingly
complex processing chain is an opportunity for things to break.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; controller
needs to work perfectly, the memory reader that feeds the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
needs to work perfectly, and then the decoder needs to work perfectly.
One missed pixel and the entire decompression chain will produce a garbage
output for the rest of the frame.&lt;/p&gt;

&lt;p&gt;Oh, and did I mention the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
was also trying to use the memory on this little board at the same time?&lt;/p&gt;

&lt;p&gt;The traditional way I’ve seen others decode things like this in the past is to
use some form of scope applied to the horizontal and vertical sync’s of the
video image.  This would confirm that the video sync signals were being
properly sent to the screen.  The problem with this approach is that you’ll
never have enough fingers to get a trace from all of the video wires and,
worse, even if you did you’d struggle to decipher the traces without any other
context.&lt;/p&gt;

&lt;p&gt;As I’m sure you can imagine, this approach didn’t work for me.&lt;/p&gt;

&lt;p&gt;The reason it didn’t work is that the image might decode nicely for half the
screen, and then somehow get off cut and then it would degrade into
decompressed chaos.  Well, that and I didn’t own an oscilloscope until much
later.&lt;/p&gt;

&lt;p&gt;Instead, I chose a different approach:
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based video simulation.  Using a video simulator, I could slow things down and
even stop the simulation anytime something “wrong” showed up on the screen and
go back and debug whatever the problem was.&lt;/p&gt;

&lt;p&gt;Today, let’s talk about how &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;the simulator
works&lt;/a&gt;, and then walk through a
demonstration design that will draw some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;color bars&lt;/a&gt;
onto a simulated video screen.&lt;/p&gt;

&lt;h2 id=&quot;the-vga-simulator&quot;&gt;The VGA Simulator&lt;/h2&gt;

&lt;p&gt;If you’ve never tried &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;this VGA simulator&lt;/a&gt;
before, you can &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;find it on
github&lt;/a&gt;, separated into its own repository.
The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;simulator&lt;/a&gt; depends upon the gtkmm-3.0
library, and so on the libgtkmm-3.0-dev Ubuntu package.  (It might even run
on Windows under &lt;a href=&quot;/blog/2017/07/28/cygwin-fpga.html&quot;&gt;Cygwin&lt;/a&gt;,
I just haven’t tried it.)  If you have both
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
and this library installed, you should be able to run the demo by typing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;git clone https://github.com/ZipCPU/vgasim
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vgasim
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;bench/cpp
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./main_tb -g 640x480&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. VGA Simulation Test Color Bars&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-testimg.png&quot;&gt;&lt;img src=&quot;/img/llvga-testimg.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If all goes well, you should see the image at the right within a window on your
screen.  You can kill the program by either typing control-C in your bash
window, or by clicking on the close box of the window it creates.&lt;/p&gt;

&lt;p&gt;Let’s examine this image for a moment.&lt;/p&gt;

&lt;p&gt;First, the image in Figure 1 very carefully has a white box around the border
of the image.  This box denotes the first and last pixel of every line,
as well as the first and last line of every frame.  It’s an important test for
this reason first: it shows if you’ve lost any pixels due to timing, as these
will otherwise fall off the screen.&lt;/p&gt;

&lt;p&gt;Second, the image explores the color space of your video output.  Notice the
many shades of red, green, blue, and gray at the bottom of the image.&lt;/p&gt;

&lt;p&gt;Third, but perhaps not so obvious, no image would be possible without creating
a proper &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; signal.  This means
that behind the scenes, there needed to be horizontal and vertical sync channels
as well as three serial streams of data that all had to line up properly
together.&lt;/p&gt;

&lt;p&gt;Finally, it just &lt;em&gt;looks&lt;/em&gt; like an &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;old fashioned TV test
image&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Framebuffer Demo&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-fulldemo.png&quot;&gt;&lt;img src=&quot;/img/llvga-fulldemo.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If this isn’t enough to get your interest, then let me offer some other
capabilities found within the repository.  First, if you have the screen space
to run the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;simulator&lt;/a&gt; with a sub-window of
1280x1024 (&lt;code class=&quot;highlighter-rouge&quot;&gt;main_tb&lt;/code&gt; with no arguments), you can see the results of a more
typical &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt;
implementation, shown (shrunken) in Fig. 2 on the left.&lt;/p&gt;

&lt;p&gt;The third demonstration within the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA
simulation&lt;/a&gt; repository is that of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; input
simulator, such as might come from a camera.  This simulation is built as the
&lt;code class=&quot;highlighter-rouge&quot;&gt;simcheck&lt;/code&gt; executable within the same &lt;code class=&quot;highlighter-rouge&quot;&gt;bench/cpp&lt;/code&gt; directory.  To run it,
simply type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;simcheck&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before, you can kill this simulation by either Ctrl-C or clicking the close
button on the window.&lt;/p&gt;

&lt;p&gt;What does this input/camera simulator do?  It creates a
&lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; inputs to a design.  It
creates these inputs from a input image obtained from the top left corner
of your screen.  You can then process that input within your
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilated&lt;/a&gt;
Verilog design to your hearts content.
Alternatively, you can send the inputs from the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; input simulator directly
into the regular &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulator&lt;/a&gt; to
see it on the screen.&lt;/p&gt;

&lt;p&gt;What’s really fun about this camera simulator is when you overlap the output
window with the camera “input” area, you can get some really neat effects,
such as are shown in Fig 3. below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. The output from the VGA input simulator fed directly into the simulation window&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-camsim.png&quot;&gt;&lt;img src=&quot;/img/llvga-camsim.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this image, the window at the top left is the same
&lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulation&lt;/a&gt; output display program
shown in Fig. 1.  What’s different is the second window just to the right and
below it.  This is the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulation&lt;/a&gt;
output that just reflects the source information to the simulated output.
The third “window” showing further to the right is the recursive effect
I was just mentioning.  In reality, there’s no “window” there, but just a
recreation of the top left 640x480 pixels of the image.&lt;/p&gt;

&lt;p&gt;Shall we dig into the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;simulator&lt;/a&gt; a bit
and see how to use it?&lt;/p&gt;

&lt;h2 id=&quot;the-wiring&quot;&gt;The Wiring&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulator&lt;/a&gt; is based around the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; signaling standard.  Yes, I know this
is an older standard, but it’s also an easy one to learn from.  I do have an
HDMI simulator lying around that is very likely to eventually join this
repository …&lt;/p&gt;

&lt;p&gt;But back to &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; standard consists of five signals.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_vsync&lt;/code&gt;, the Vertical sync (pronounced “sink”), 1’bit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_hsync&lt;/code&gt;, the Horizontal sync (pronounced “sink”), 1’bit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_red&lt;/code&gt;, Red pixel component, up to 8’bits&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_grn&lt;/code&gt;, Green, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_blu&lt;/code&gt;, Blue, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The simulator accepts any color depth up to 8-bits per pixel.  Anything over 8-bits,
and it just pays attention to the top 8-bits.&lt;/p&gt;

&lt;p&gt;To use the simulator with your design, you need to build a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/main_tb.cpp&quot;&gt;test-bench wrapper&lt;/a&gt; around the design, tell the test bench what resolution
you want the window to have, and then call the video subsystem to pay attention
to video events while running your design.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;verilated.h&amp;gt;
#include &quot;Vyourdesign.h&quot;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;testb.h&quot;
#include &quot;vgasim.h&quot;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// ....
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;main_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Verilated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;test_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hres&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1280&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vres&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TESTBENCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// tb-&amp;gt;opentrace(&quot;vga.vcd&quot;);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, within the &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method of this test
bench&lt;/a&gt;,
the simulator is called with the output values from your
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt; core:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_grn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_blu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vyourdesign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s how you hook up your design, but what do those various signals
carry?&lt;/p&gt;

&lt;p&gt;Let’s consider the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_hsync&lt;/code&gt;, or horizontal sync, signal first.  In an old
fashioned cathode ray-tube monitor, this &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; signal would tell the underlying
ray subsystem when to quickly move back from the right side to the left side
of the screen.&lt;/p&gt;

&lt;p&gt;The signal itself is an active low signal, as shown in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. The Horizontal Synch Signal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-hsync.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The signal should be high at all times except during the Horizontal Synch
pulse, where it is low.  Between the sync pulse and the data is the “back
porch”, and then again on the other side between the data and the sync is
a “front porch”.  While these may seem to be just idle clock periods, they
are actually carefully timed and required by the video subsystem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;The simulator&lt;/a&gt; needs to be told what these
time periods are.  This is done within the
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/videomode.h&quot;&gt;videomode.h&lt;/a&gt;
file, a portion of which is shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;VIDEOMODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 640 664 736 760 480 482 488 525
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;640 656 752 800&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;480 490 492 521&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;720 760 816 856&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;480 482 488 525&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;483&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;768 808 864 912&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;483 485 491 525&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here you’ll see that, internal to the simple WIDTHxHEIGHT video mode call,
horizontal and vertical video mode lines are set according to the old &lt;a href=&quot;https://en.wikipedia.org/wiki/XFree86_Modeline&quot;&gt;XFree86
modeline&lt;/a&gt; “standard”,
as illustrated in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. The four numbers within a mode line&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-counter.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first number is the number of valid pixels in the line, it counts from the
left to the width of the line.  Don’t be confused by Fig. 5 trying to show
the relationship of the sync line to the valid pixel data, the sync line
is high during this period.  The second number includes the additional
width of the front porch, but remains measured from the left edge.  The
third number adds the width of the sync, while the fourth number
is the total number of pixel clock intervals before the pattern repeats.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. A basic video image, showing both horizontal and vertical sync regions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-twin-syncs.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The vertical sync mode is similar.  It also consists of the same intervals:
valid pixel (line) data, back porch, sync, and front porch.
The big difference is that instead of counting pixel clocks, the vertical mode
line counts horizontal lines.  Further, these horizontal lines are counted
from the beginning of the horizontal sync interval.  This yields to the
apparent discontinuity shown in Fig 6. on the right.  This discontinuity only
exists, however, because we’ve chosen to place the image at the top-left
of our coordinate system.  Had we started at the beginning of the horizontal
and video sync joint intervals, there would be no apparent discontinuity.&lt;/p&gt;

&lt;p&gt;Fig. 6 should also give you a good idea of how to start building a basic video
system: with horizontal and vertical position counters.  Let’s try that,
and see how far we can get!&lt;/p&gt;

&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/design.v&quot;&gt;demonstration
design&lt;/a&gt;
within this &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA
simulation repository&lt;/a&gt; consists of
a couple basic components, as shown in Fig. 7.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Demonstration Video Design Components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-demofiles.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s quickly walk through the pieces of this design, and then spend some
time digging into the
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;llvga.v&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;vgatestsrc.v&lt;/a&gt;
components.&lt;/p&gt;

&lt;p&gt;The overall design consists of both a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/memdev.v&quot;&gt;memory
device&lt;/a&gt;
and a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;video frame
controller&lt;/a&gt;.
We’ve &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;discussed this memory device
before&lt;/a&gt;, so we need not
discuss it again here.  The
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;
is controlled by a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;master&lt;/a&gt;
and video controller,
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;wbvgaframe.v&lt;/a&gt;.
Within this controller, there’s
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;a component&lt;/a&gt;
to read frame-data from the memory using the memory/bus clock,
and then to cross clocks via an
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;
to the pixel clock domain.  Once in the pixel clock domain, pixels
are then fed to the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;low level VGA signal
generator&lt;/a&gt;.
Internal to this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower level VGA signal
generator&lt;/a&gt;
is the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test-source
generator&lt;/a&gt;
that produced the image shown in Fig 1 above.&lt;/p&gt;

&lt;p&gt;While we’ve discussed many of these components on the blog before,
such as the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;, the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone bus&lt;/a&gt;,
and the
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;,
there are several components of this design that we haven’t discussed before.
Today, let’s examine the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower-level VGA
generator&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test-bar signal
generator&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8: Lower Level VGA Controller Ports&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-ports.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower-level VGA signal
generator&lt;/a&gt;
is designed to interact with the pixel generation subsystem
(&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;wbvgaframe.v&lt;/a&gt;),
and to produce the necessary video signal outputs in order to generate the
images above.  Here you can see in Fig. 8 the ports necessary to do this.
We’ve already discussed the ports on the right above, albeit under slightly
different names.  The new ports are those on the left.  While the reset
port might be obvious, the others might need a bit more explaining.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_pixclk&lt;/code&gt;  I normally name all my incoming clock signals &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;.  This
has become habit forming to me.  Not so with this module.  In the case
of many video signals, the pixel clock runs at a different rate from the
main system clock.  Hence, I’ve reserved &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt; for other parts of my
design.  This component acts upon the pixel clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_pixclk&lt;/code&gt;, alone.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_test&lt;/code&gt; is a flag that I use to tell the controller to produce the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;test bars output&lt;/a&gt;
I demonstrated in Fig 1. above.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;i_test&lt;/code&gt; is not set, the controller
will source its pixels externally from &lt;code class=&quot;highlighter-rouge&quot;&gt;i_rgb_pix&lt;/code&gt;, otherwise it will
source the pixels from the internal &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;VGA test source
generator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is the first of three pipeline control signals used to help the
pixel generator, either
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;imgfifo.v&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;vgatestsrc.v&lt;/a&gt;
in this design, know when to generate to pixels.
It functions very much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;!stall&lt;/code&gt; signal in the “simple
handshake” &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline strategy we presented
earlier&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Only, this signal is a little trickier than a negated stall signal.  The
pixel generator is expected to set up a pipeline filled with pixels
and then wait for this signal to go high.  Once this signal goes high,
pixel data will flow.  The pixel generator needs to be careful to &lt;em&gt;never&lt;/em&gt;
let the pixel feed buffer empty, or catestrophic things may happen.
(i.e., the display won’t show the image we want)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal is used to indicate that the last pixel in the
row has been consumed, and the pixel generator is free to flush any
line buffers and start over if it wishes to.&lt;/p&gt;

    &lt;p&gt;In this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/demo.v&quot;&gt;demonstration
design&lt;/a&gt;,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal is only used by the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test image
generator&lt;/a&gt;.
We’ll look at that further down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last pipeline indication signal is the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal.  This
signal is very much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal, save that it indicates the
end of the frame as well as the end of the line.  This signal is to be
true on the last pixel of the frame, and then only.  The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;demonstration frame
buffer&lt;/a&gt;
uses this signal to flush its buffers and start reading from the top of the
image.&lt;/p&gt;

    &lt;p&gt;In the old arcade days, this signal might create a “vertical refresh”
interrupt to signal the start of the vertical refresh period.  This
was a time when screen memory was not being read and so software
could quickly draw to the screen in a way that wouldn’t flicker.
Such “&lt;a href=&quot;https://en.wikipedia.org/wiki/Flicker_(screen)#Software_artifacts&quot;&gt;Flickering&lt;/a&gt;”
can be caused by a software update to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame
buffer&lt;/a&gt;, typically consisting
of both an erase operation and a redraw, taking place during the active
portion of the image, so that the user sees alternately the “erased”
portion and the newly drawn portion.  This can be fixed by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_buffering#Double_buffering_in_computer_graphics&quot;&gt;double
buffering&lt;/a&gt;,
so that the partially drawn image never ends up in the
live &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt;.
Doing so requires knowing when to swap buffers, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt;
signal will facilitate that request.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower-level VGA
generator&lt;/a&gt; may be
the simplest component of the entire display system:  &lt;em&gt;It’s just a pair of
counters!&lt;/em&gt;  So, let’s see how much this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;low-level VGA
controller&lt;/a&gt;
can accomplish from two separate counters.&lt;/p&gt;

&lt;p&gt;First, let’s accept as inputs all of the various components of the two
&lt;a href=&quot;https://en.wikipedia.org/wiki/XFree86_Modeline&quot;&gt;video mode lines&lt;/a&gt;.
These are simply passed through from the top-level
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/main_tb.cpp&quot;&gt;simulation&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hporch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vporch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as inputs to the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/demo.v&quot;&gt;top level
design&lt;/a&gt;, and
then down on to this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower level
controller&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we are going to allow these values to be practically anything within
this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower level
controller&lt;/a&gt;,
they do require a particular order between them.  Specifically, they need
to be strictly increasing,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;i_hm_width  &amp;lt; i_hm_porch &amp;lt; i_hm_synch &amp;lt; i_hm_raw, and
i_vm_height &amp;lt; i_vm_porch &amp;lt; i_vm_synch &amp;lt; i_vm_raw&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and there is a minimum width and height.  When we get to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;,
we can use the following assumption to capture this required ordering.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;12&#39;h10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;12&#39;h10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will force the width to be at least ten pixels wide, likewise for
vertical.  The other three numbers of each mode line are also required
to be in strict increasing order.&lt;/p&gt;

&lt;p&gt;This allows us to create a simple counter to keep track of our horizontal
position.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A similar counter can be used to keep track of our vertical position.&lt;/p&gt;

&lt;p&gt;Well, it’s not quite that simple.  We also need to generate the horizontal
sync signal as well as our pipeline control signals.  The obvious signal
we could set within this same loop is the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal.  As discussed
above, this signal is true for one-clock only at the very last pixel of any
line.&lt;/p&gt;

&lt;p&gt;The next item to create in this block is a little less obvious.  This is the
&lt;code class=&quot;highlighter-rouge&quot;&gt;hrd&lt;/code&gt; signal.  We’ll use this in a bit to indicate a valid pixel, but we’ll
need to couple it with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;vrd&lt;/code&gt; signal from the vertical direction first.&lt;/p&gt;

&lt;p&gt;Put together, this expands our logic a bit more, but it’s still fundamentally
a counter–we just set two other signals within this block as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// First pixel is always valid
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can you still see the basic &lt;code class=&quot;highlighter-rouge&quot;&gt;hpos&lt;/code&gt; counter within there?&lt;/p&gt;

&lt;p&gt;Fig. 9 below shows a trace of this simple logic, focused at the end of the line.
For this trace, the line width was set to 640 pixels, hence &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt;
is true on pixel &lt;code class=&quot;highlighter-rouge&quot;&gt;639&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; drops on the first non-pixel: &lt;code class=&quot;highlighter-rouge&quot;&gt;640&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 9: End-of-line logic trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-hpostrace1.png&quot;&gt;&lt;img src=&quot;/img/llvga-hpostrace1.png&quot; alt=&quot;&quot; width=&quot;954&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In a similar fashion, Fig. 10 below shows the same trace, but zoomed out far
enough so that you can see a full between-line interval.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 10: Horizontal Sync trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-hpostrace2.png&quot;&gt;&lt;img src=&quot;/img/llvga-hpostrace2.png&quot; alt=&quot;&quot; width=&quot;956&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;During this interval,
you may notice that our valid pixel signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;, goes low before the
horizontal sync becomes active (low), and stays low for some period after
the sync becomes inactive again but before the valid pixels start up again.&lt;/p&gt;

&lt;p&gt;The vertical counter is similar.  The biggest difference is that the
vertical counter changes at the end of the horizontal front porch, just as
the horizontal sync signal becomes active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Realistically, the new frame begins at the top
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// of the next frame.  Here, we define it as the end
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// last valid row.  That gives any software depending
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// upon this the entire time of the front and back
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// porches, together with the sync pulse width time,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to prepare to actually draw on this new frame before
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// the first pixel clock is valid.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps you noticed that we didn’t set &lt;code class=&quot;highlighter-rouge&quot;&gt;vrd&lt;/code&gt; above.  Since this signal is
so simple, it can quietly fit into its own block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;vrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;vrd &amp;amp;&amp;amp; hrd&lt;/code&gt; will always be true one clock before a valid pixel, as marked
by &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;.  We’ll call this pre-signal &lt;code class=&quot;highlighter-rouge&quot;&gt;w_rd&lt;/code&gt;, to indicate that we are using
combinatorial logic (i.e. a wire) for this purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll except the very &lt;code class=&quot;highlighter-rouge&quot;&gt;first frame&lt;/code&gt; from this calculation, just to make
certain we’ve given the pixel generator a chance to see the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt;
signal before starting.  Creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; signal is then just as simple
as registering this &lt;code class=&quot;highlighter-rouge&quot;&gt;w_rd&lt;/code&gt; signal on the next pixel clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a fashion similar to our &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal, we’ll create an
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal in case our pixel generation logic needs to do some
work to prepare for the next frame.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see these vertical signals together with our horizontal signals in
Fig. 11 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 11: Vertical Sync trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-vpostrace1.png&quot;&gt;&lt;img src=&quot;/img/llvga-vpostrace1.png&quot; alt=&quot;&quot; width=&quot;954&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; will only ever be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; is also
true: both are true on the last pixel of a line.  The difference, of course,
is that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; is only true on the last pixel of the last line.
We’ll use this property later to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally constrain&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Likewise, Fig 12 shows the same trace, but only zoomed out so that we can
see many lines at once.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 12: Vertical Sync trace, showing many lines&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-vpostrace2.png&quot;&gt;&lt;img src=&quot;/img/llvga-vpostrace2.png&quot; alt=&quot;&quot; width=&quot;956&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Not only can we see many lines at once, but Fig 12 also shows a full vertical
blanking interval, including the front porch, sync, and back porch.  You can
recognize these by noticing the relationship of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vsync&lt;/code&gt; to the valid data
marked by &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;.  You can also see where the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal is placed
relative to the rest of the intervals: right at the last pixel of the entire
frame.&lt;/p&gt;

&lt;p&gt;If you’ve never dealt with video before, it really is just this simple: the
synchronization portion is nothing more than a pair of counters!  We’ve
added additional signals to indicate when line endings and frame endings
take place, but that’s really all there is to it.&lt;/p&gt;

&lt;p&gt;Since this is just that simple, verifying this component is also very simple.
Let’s discuss that next.&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-our-counters&quot;&gt;Formally Verifying our Counters&lt;/h2&gt;

&lt;p&gt;When I
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
a module, I like to think of that module in terms
of a “contract”.  This “contract” is sort of a black box description of
what I expect from the module.  In many ways the study of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
then becomes the study of how to answer the question, “what sort of &lt;em&gt;contract&lt;/em&gt;
is appropriate for what I’m building”?&lt;/p&gt;

&lt;p&gt;In this case, I’d first want to verify that I am creating the synchronization
signals as required.&lt;/p&gt;

&lt;p&gt;We can start with the horizontal sync.  Before the end of the front porch,
the sync should be inactive (high).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then between the end of the front porch and the end of the synchronization
section, the horizontal sync should be active (low).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, between the end of the synchronization period and the end of the
line period, the synchronization should be inactive (high).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This exact same logic applies to the vertical synchronization period as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Same thing for vertical
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wow, how simple could that be?&lt;/p&gt;

&lt;p&gt;Have we fully constrained our video controller?  Not quite.&lt;/p&gt;

&lt;p&gt;We still need to make certain that the horizontal position is properly
incrementing.  (But the code says it is …)  For this, let’s just check the
past value and contrain the current one based upon that.  If the past value
is at or beyond the last pixel of the line, then we should be starting on
a new line on this clock.  Otherwise, we should be incrementing our horizontal
pointer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The vertical counter is similar, save that it only increments at the beginning
edge of the horizontal sync period, otherwise it should be the same in all
cases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two constraints, however, aren’t enough to keep the two counters within
their limits.  To do that, we need to insist that they are less than the
proper raw widths.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Without these last two assertions, the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction step&lt;/a&gt;
might start our design way out of bounds.  Indeed, you should always
assert that any state variables are within bounds!  That’s the purpose of
these last two assertions.&lt;/p&gt;

&lt;p&gt;At this point, we’ve created enough assertions to guarantee that a monitor
capable of synchronizing to this signal will do so.&lt;/p&gt;

&lt;p&gt;Everything else is icing on the cake.&lt;/p&gt;

&lt;p&gt;We first have our &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; value which will signal to the part of the design
that sends us pixels that we just accepted a pixel.  This value should be
true during any valid pixel period.  We can check this simply with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves two other signals: the newline signal and the new frame
signal.  The newline signal is true on the last clock period of any line.
We can assert that here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal needs to be true at the same time as
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt;, but only on the last valid line.  Otherwise this should be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is one catch in all of this simplicity: our assertions above will
fail if the video mode is changed.  This I found annoying, since I had
written the code above to be self correcting upon any mode changes, yet I
struggled to find a way to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
this code as self correcting–the
solver just kept changing the mode line every chance it could.  As a
compromise, I only check the above properties if the video frame is
stable.  To do that, I capture the video mode for the last clock, both
horizontal and vertical mode signals,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_last_vmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_hmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_last_vmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_last_hmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I know these are stable when their values are the same as they were one clock
ago.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_stable_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_stable_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_vmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_hmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While I could assume that the mode was always stable, I would like to make
this design able to change modes.  (The simulator cannot change modes, but
this portion of the design can.)  For this, I just insist that the modes
are identical unless the reset line is high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_stable_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can also hear some of you asking, why did I create &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_hmode&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_vmode&lt;/code&gt;?  Why not just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; operator?  Even better, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt; operator, short hand for &lt;code class=&quot;highlighter-rouge&quot;&gt;X == $past(X)&lt;/code&gt;, would perfectly describe
our situation.  Why not just say instead,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The answer is subtle, and reveals a bit about how
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; works.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(X)&lt;/code&gt; operator, though, requires
a clock.  Because of that, it isn’t evaluated until the next clock edge.
(This is why assertion failures for clocked blocks appear at the penultimate
clock edge.)&lt;/p&gt;

&lt;p&gt;Where this becomes a problem is when the design fails at the final clock
edge, because the assumption hasn’t taken effect yet.  By creating our own
version of &lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt; above using &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_hmode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_vmode&lt;/code&gt;, we can
force the mode to be stable on the last cycle–even before the rising edge
would evaluate a &lt;code class=&quot;highlighter-rouge&quot;&gt;$stable(X)&lt;/code&gt; operator.&lt;/p&gt;

&lt;h2 id=&quot;the-test-pattern-generator&quot;&gt;The Test Pattern Generator&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 13: Calculating a best color&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-srcmux.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s now turn our attention to creating the test pattern.  This
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;generator&lt;/a&gt;
works by calculating a color for each line, and then selecting the right
color from among all of the line colors as shown in Fig. 13 on the right.&lt;/p&gt;

&lt;p&gt;Well, not quite.  Selecting from among 480+ line colors might be more logic
than I’d want to use for a simple &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test pattern
generator&lt;/a&gt;.
Here’s the secret: colors are generated in bands.&lt;/p&gt;

&lt;p&gt;What may not be obvious is that the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test pattern
generator&lt;/a&gt;
segments the
screen into 16x16 sections.  Determining what color to generate is mostly
just a matter of determining which 16x16 location the current pixel is within.
Note that these may not have been the proportions of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;original test
cards&lt;/a&gt;
from which these images are (loosely) drawn–but they make the math easy for us
and so we use them here.&lt;/p&gt;

&lt;p&gt;Calculating the section at issue comes back to the same issue of counters
again.  The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test pattern
generator&lt;/a&gt;
uses one counter for horizontal position, and another for vertical–just like
the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;low-level
controller&lt;/a&gt;
we just examined above.&lt;/p&gt;

&lt;p&gt;Let’s start by following the horizontal counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;hpos&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On every new line, this counter resets to zero.  Further, on every valid
pixel, the counter moves forward.  There’s no checking whether or not the
counter has reached the full width, since that is done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_newline&lt;/code&gt;
flag.&lt;/p&gt;

&lt;p&gt;What may be curious, though, are the two values &lt;code class=&quot;highlighter-rouge&quot;&gt;hbar&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hedge&lt;/code&gt;.
These variables are associated with dividing the screen into sixteen horizontal
regions.  Specifically, the idea is that &lt;code class=&quot;highlighter-rouge&quot;&gt;hbar&lt;/code&gt; is the current horizontal pixel
location times 16 and divided by the width.&lt;/p&gt;

&lt;p&gt;The problem is division within an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; is hard.  How can it be avoided?&lt;/p&gt;

&lt;p&gt;The first step towards avoiding this is to divide the width by sixteen.
This is easily done by right shifting the screen width by four.  We can
then count bins across the screen, where &lt;code class=&quot;highlighter-rouge&quot;&gt;hedge&lt;/code&gt; is the end of the next bin.&lt;/p&gt;

&lt;p&gt;If you look at Fig. 14 below, you can see how well our division matched
the screen.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig. 14: Dividing the image width into 16&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-testhdiva.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We can now calculate the colors for the long top bars using a basic case
statment.  If we are in the first position, output a black, otherwise if
we are in the second position, etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_yellow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_yellow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The actual colors are defined as constants earlier in the file.&lt;/p&gt;

&lt;p&gt;After the main bars at the top,
the alternate colored bars beneath them and lining up with them,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as well as the thicker and wider bars underneath those.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purplish_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purplish_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purplish_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkest_gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dark_gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkest_gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logic for all three sections is identical at this point.&lt;/p&gt;

&lt;p&gt;You may also wish to note that, just like we did with the ALU, we are
calculating color bars even when we’ll be outputting the color from a
different bar.  We’ll do a downselect in a moment to get the right color
for each row.&lt;/p&gt;

&lt;p&gt;Indeed, when it comes to generating row information, the logic is very
similar to the horizontal logic above.  We divide the screen by sixteen,
and keep track of which sixteenth of the screen we are within at any
given time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;1&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The biggest difference between this logic and the horizontal logic is the
&lt;code class=&quot;highlighter-rouge&quot;&gt;dline&lt;/code&gt; item.  This is used to keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_newline&lt;/code&gt; signals following the
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_newframe&lt;/code&gt;, but before the first line of the image, from adjusting our
counter.  Perhaps you’ll recall from Fig. 12 above that the horizontal sync’s,
and so the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal, continued even during the vertical blanking
period.  &lt;code class=&quot;highlighter-rouge&quot;&gt;dline&lt;/code&gt; above helps us avoid counting lines during this period.&lt;/p&gt;

&lt;p&gt;You can see how well we did this in Fig. 15 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15: Dividing the image vertically into 16 parts&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-testvdiv.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We can then determine the final outgoing pixel by selecting on which sixteenth
of the image vertically we are on.  This is captured by the &lt;code class=&quot;highlighter-rouge&quot;&gt;yline&lt;/code&gt; value
we just calculated above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Long top bar
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Narrow mid bar
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Thick/wide bars
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Gradient line
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a final step, we place a white border around our image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&#39;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That just about explains everything!  The only thing we’ve left out is the
gradient sections.&lt;/p&gt;

&lt;p&gt;The gradient sections were a bit more challenging.  To do them properly, the
image needed to be fully divided, so that a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; would smoothly
go from zero to overflow as it crossed from one edge of the image to another.
This means that we need to add to &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; a value equal to one divided by the
image width on every clock tick.  Well call this the step size, &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we knew what &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt; was, the logic would be as simple as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;FRACB&lt;/code&gt; bits in width, then &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt; needs to be
set to &lt;code class=&quot;highlighter-rouge&quot;&gt;2^FRACB / width&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ouch!  Divides are hard in digital logic.  Do we really have to do a divide?&lt;/p&gt;

&lt;p&gt;Can we cheat instead?  In this case, we certainly can!&lt;/p&gt;

&lt;p&gt;Let’s check at the end of every line how close we came.  If we went too far,
then let’s lower &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;, otherwise if &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; didn’t go far enough, we’ll
increase &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;.  It’s a basic control loop solution, and it will take
roughly &lt;code class=&quot;highlighter-rouge&quot;&gt;2^FRACB/width&lt;/code&gt; lines to converge (remember, there are &lt;code class=&quot;highlighter-rouge&quot;&gt;FRACB&lt;/code&gt; bits
in our &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;.  In other words, we’ll converge within about a
hundred lines for 640x480 resolution, or about 64 lines for a 1280x1024
resolution..  This is usually enough to hide the fact that the divide hasn’t
converged until the time that the value is needed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16: Dividing the image horizontally in 16&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-testhdivb.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, here’s the code for the divide:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Start over if the width changes
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// On the newline, our hfrac value is whatever it ended up
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// getting to at the end of the last line
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If we didn&#39;t get far enough to the other side,
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// go faster next time.
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If we went too far, and so wrapped around
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// then don&#39;t go as far next time
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how we just increment or decrement &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt; based upon how close
we got to the right answer at the end of the line.&lt;/p&gt;

&lt;p&gt;Now that we have this fractional counter that wraps at the line width,
we can calculate gradient values for our gradient sections.  We’ll set the
output (again) depending upon which sixteenth of the horizontal we are in.
Only this time, we’ll use the top four bits of this fractional counter
to determine the section.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you get past this &lt;code class=&quot;highlighter-rouge&quot;&gt;FRACB-4&lt;/code&gt; bit, everything should be incrementing
nicely from the left of the interval to the right.&lt;/p&gt;

&lt;p&gt;Our first actual section is red.  For this color, we want red pixels ranging
from zero to maximum, and then no blue or grean.  (&lt;code class=&quot;highlighter-rouge&quot;&gt;mid_off&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h0&lt;/code&gt;).
During this section, we also know that &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac[FRACB-5:0]&lt;/code&gt; will be slowly
counting from zero to overflow as well.  If we add a higher order bit,
we can get this gradual counter to gently cross two intervals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Red
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// First gradient starts with a 1&#39;b0
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Second repeats, but starting with a 1&#39;b1
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;BPC&lt;/code&gt; here is the number of “bits-per-pixel”)&lt;/p&gt;

&lt;p&gt;A black section, one sixteenth width in length, separates the gradient
sections.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Green is roughly the same as red, save only that the first color (red) and the
last color (blue) are set to zero.  Blue is set similarly.  Indeed, if you
understand how we did red above, these last two colors are really just the
same thing repeated for a different color.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Green
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Blue
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final section is the gray gradient.  This one follows the same logic,
only we wish to spread it across four regions instead of two.  Hence, we’ll
force the top two bits to increment across four steps, and use what’s
left of the fractional counter to gradually increment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Gray
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it for the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test
design&lt;/a&gt;.
Did you notice the format of the logic?
In general, everything but the &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; cordinate based variables reset on an
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_newline&lt;/code&gt;.  Colors were then chosen for each horizontal region, and then a
(nearly final) color choice was made by examining which vertical region
we were in.  The last step was to add a white border around the screen,
just to make certain we have our timing right.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Success with video really depends upon your ability to debug your logic.
The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulator&lt;/a&gt; can make that easier,
by allowing you to “see” how your logic actually creates images.  Not only
that, but because it is a simulation, you can get access to every wire
and every flip-flop within it.  Want to see how fast the division
converges?  Want to see what the various video signals look like in
practice?  Or stop halt a simulation on an error?  The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA
simulator&lt;/a&gt; can do all that and more.&lt;/p&gt;

&lt;p&gt;We also walked through several pieces of a demonstration video design.
We discussed the generation of the various video signals, and even
walked through how they could be used to create a video test-signal.
That said, in many ways we didn’t walk through the critical piece of code
required for any &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt; based
design–&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;the code&lt;/a&gt;
that reads from the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt; in memory
and sends a valid pixel to our low level controller.  This, however,
we’ll need to leave for next time.&lt;/p&gt;

&lt;p&gt;I know that some have said that
&lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; is an outdated standard.
Everything is moving to &lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt; and beyond.
Unlike &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt; is a bit more difficult
to generate and work with.  There are more steps to it and more protocol
missteps that can be made.  That said, when I get to the point where I’m ready
to post the HDMI simulator, you’ll see that it isn’t all that much more
complicated than the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;
simulator we’ve just looked through.  Indeed, the same could be
said of the MIPI based CSI-2 simulator I have …&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For now we see through a glass, darkly; but then face to face: now I know in part; but then shall I know even as also I am known. (1Cor 13:12)&lt;/em&gt;</description>
        <pubDate>Thu, 29 Nov 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2018/11/29/llvga.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/11/29/llvga.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Accessing the registers of a SoC+FPGA</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A DE-10 Nano&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/de10-deskpic.jpg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;I wrote about my experiences with Terasic’s
DE10-Nano&lt;/a&gt;, a design
based around Intel (formerly Altera)’s &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;SoC+FPGA
Cyclone-V&lt;/a&gt;
design.  If you’ve never worked with designs like this, the terminology
typically separates the SoC
(i.e. an &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;) from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
with the terms Processing System (PS, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;)
and the Programming Logic (PL, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;These combined SoC+FPGA designs are an attempt to gain the best of both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
worlds.  By combining the two together, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can control the logic taking place on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
This control includes being able to load designs onto the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
and to then control those designs from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory-mapped I/O register&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is in an ideal position to control peripherals and their timing in detail.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is also in an ideal position to be a data accelerator.
Both of these applications require that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
be able to communicate with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
at high speed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 24px&quot;&gt;&lt;caption&gt;Fig 2. Communications channels between ARM and FPGA&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-axi-interconnects.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;Cyclone-V&lt;/a&gt;
chip on the &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;DE-10&lt;/a&gt;,
like other SoC+FPGA designs, has a high speed data path directly from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
and again in the reverse direction as shown in Fig 2.
These will form the topic of this article.&lt;/p&gt;

&lt;p&gt;Today, I’d like to focus on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
side of this connection–the side where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; is
controlled by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
We’ll ignore, and postpone for a later day, all of the details
associated with building the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
half of this connection, and focus solely on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
side of this connection.  For now, I’ll only say of that connection that
I &lt;em&gt;highly&lt;/em&gt; recommend you
&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formally verify&lt;/a&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
side since it can be &lt;em&gt;so&lt;/em&gt; difficult to debug.&lt;/p&gt;

&lt;p&gt;Further, I’m going to walk through two examples that can be used
for this purpose.  The first should work well on any generic &lt;a href=&quot;https://en.wikipedia.org/wiki/Microcontroller&quot;&gt;microcontroller&lt;/a&gt;
with no &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management_unit&quot;&gt;memory management unit
(MMU)&lt;/a&gt; support,
and the second should work not only for the
&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;DE-10&lt;/a&gt;,
but also for any &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
memory mapped interface including
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
designs, the
&lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;,
the &lt;a href=&quot;https://beagleboard.org/bone&quot;&gt;Beagle Bone&lt;/a&gt;, and even other
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
based &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory-mapped I/O
register&lt;/a&gt; designs.&lt;/p&gt;

&lt;p&gt;I should pause to note that there’s a discussion to be had regarding whether
or not this code should be done within user space at all rather than in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_System&quot;&gt;Operating System&lt;/a&gt;.
There are strong arguments for both, so I’ll just leave that
discussion for another day.&lt;/p&gt;

&lt;p&gt;So, without further ado, shall we discuss how to get access to fixed-address
registers from within a design?&lt;/p&gt;

&lt;h2 id=&quot;fixed-addressing&quot;&gt;Fixed Addressing&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Fixed address&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-paddr.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For your simpler non-&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Microcontroller&quot;&gt;microcontroller&lt;/a&gt;
based designs, the interface is very straightforward and simple, though it
requires knowing about a part of the C language that isn’t usually used
outside of hardware programming: the
&lt;a href=&quot;http://www.drdobbs.com/cpp/volatile-the-mutithreaded-programmers-b/184403766/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;&lt;/a&gt;
keyword.&lt;/p&gt;

&lt;p&gt;Suppose you have an interface at a known address, &lt;code class=&quot;highlighter-rouge&quot;&gt;0xc045010&lt;/code&gt;, shown as the
“user pointer” in Fig 3. on the right.  Let’s pretend
that it’s a reference to a device controller that occupies four 32-bit words
in our address space.  A good example of this might be the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;WBUART&lt;/a&gt; serial port.  That peripheral has
four word-length registers controlling it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;WBUART_S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;u_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;u_fifo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;u_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WBUART&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d like to be able to read from these registers within your own code.
To do that, you need a pointer to them.  The way to create a pointer
to a fixed address in C++ is,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WBUART&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WBUART&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc045010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s parse this line.&lt;/p&gt;

&lt;p&gt;At the most basic level, we have just described a pointer to a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART&lt;/code&gt;&lt;/a&gt;
structure in memory, and we’ve named this pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;uart&lt;/code&gt; and given
it an initial address of &lt;code class=&quot;highlighter-rouge&quot;&gt;0xc045010&lt;/code&gt; to point at.&lt;/p&gt;

&lt;p&gt;Peeling the onion back one further, the &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; dictates that this pointer
references a constant location in the address space.  It cannot
change.  This is appropriate if ever the device in question will always have
the same address space location.  Hence, we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART *const uart&lt;/code&gt;.  In
this declaration, order matters.  &lt;code class=&quot;highlighter-rouge&quot;&gt;const WBUART *uart&lt;/code&gt; would have declared a
pointer to a constant &lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART uart&lt;/code&gt; structure.  That’s not what we want.  We
want &lt;em&gt;constant pointer&lt;/em&gt; to a structure of elements that isn’t necessarily
constant.&lt;/p&gt;

&lt;p&gt;The next part of this definition is the
&lt;a href=&quot;http://www.drdobbs.com/cpp/volatile-the-mutithreaded-programmers-b/184403766/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;&lt;/a&gt;
part.  This instructs the compiler that the value at this location in memory
might change apart from the program it is compiling changing it.&lt;/p&gt;

&lt;p&gt;To explain this, imagine you want to transmit a character.  In the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART&lt;/code&gt;&lt;/a&gt;
interface, the &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0100&lt;/code&gt; bit of the transmit register returns a status field
indicating whether or not the register is busy.  If this bit is set, the
transmitter is busy or the transmit queue is non-empty.  If this bit is clear,
then the interface is idle.  For this task, let’s wait until the interface
is idle and then write a byte out of the serial port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Wait for the transmit port to become available
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the character out the transmitter
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This sort of loop, waiting for something to happen, is called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;polling&lt;/a&gt;.
It is one of several ways to wait for an event within a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
In this case, we are waiting for the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART&lt;/code&gt;&lt;/a&gt;
transmitter to become idle.&lt;/p&gt;

&lt;p&gt;A compiler might look at this code an notice that nothing within this
function is modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;uart-&amp;gt;u_tx&lt;/code&gt;.  It might then consider itself justified
in treating this value as a constant, and pulling it out of the loop.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the character out the transmitter
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This “optimized” implementation will only read from the peripheral register
once, and then either hang forever (if the interface is initially busy),
or move in.  This is clearly not what we want, since with this “optimized”
implementation we’ll never know when &lt;code class=&quot;highlighter-rouge&quot;&gt;uart-&amp;gt;u_tx&lt;/code&gt; changes!&lt;/p&gt;

&lt;p&gt;From the compiler’s standpoint, this optimization makes sense: you read the
value, and it doesn’t see anything changing it, so it only reads the value
from memory once.&lt;/p&gt;

&lt;p&gt;The compiler needs to be told that this value can change for reasons other
than the instructions it can examine within your code.  This is the purpose
of the
&lt;a href=&quot;http://www.drdobbs.com/cpp/volatile-the-mutithreaded-programmers-b/184403766/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;&lt;/a&gt;
keyword in our definition above.&lt;/p&gt;

&lt;p&gt;What about the &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; term?  This tells the compiler that only the code in
the current file will reference this value.  This keeps the compiler from
placing this constant value in global memory somewhere.  The address can
then be compiled into the object code as a fixed immediate value.&lt;/p&gt;

&lt;p&gt;For designing interfaces to match most simple SoC design components, this is
enough.  If on the other hand the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
has a &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management_unit&quot;&gt;MMU&lt;/a&gt;, like most
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/X86&quot;&gt;x86&lt;/a&gt; processors
(and more), then the fixed address may not be accessable to the program,
or it may be accessable at a different &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual
address&lt;/a&gt;.  In these cases,
the above approach will not work and you will need to get some help from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_System&quot;&gt;Operating System&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dealing-with-the-mmu---designing-the-interface&quot;&gt;Dealing with the MMU - Designing the Interface&lt;/h2&gt;

&lt;p&gt;Declaring a constant pointer value, such as we did in the last section, isn’t
sufficient to access memory in a system that permits a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual address
space&lt;/a&gt;.
In that case, every process might reference the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address&lt;/a&gt;
using
a different pointer value (&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual
address&lt;/a&gt;).&lt;br /&gt;
The trick in this case is
determining how to get a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual
address&lt;/a&gt;
that will map to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical addresses&lt;/a&gt; of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;peripheral registers&lt;/a&gt;
in question.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 24x&quot;&gt;&lt;caption&gt;Fig 4. I/O operations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-operations.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;we built our debugging
bus&lt;/a&gt;, we used the
routines &lt;code class=&quot;highlighter-rouge&quot;&gt;readio(addr)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;writeio(addr,value)&lt;/code&gt; to access registers within
a traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
see Fig 4.  To read a register, one might write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a similar fashion, you could write to a register controlled by a &lt;a href=&quot;/blog/2017/05/22/a-vision-for-controlling-fpgas.html&quot;&gt;debugging
bus&lt;/a&gt;
by writing,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m going to try to maintain this interface (somewhat), although that’s
really more than is required when interacting with a SoC+FPGA.&lt;/p&gt;

&lt;p&gt;In the Intel SoC+FPGA design, there are a couple of memory regions that can
be mapped like this.  For the purpose of this example, let’s focus on the
light-weight interface, although aside from changing a couple of constants
in the design below, the result would be the same for any other shared
memory region, such as the heavy weight interface or the fixed
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
internal peripheral registers.&lt;/p&gt;

&lt;p&gt;So let’s design the C++ header file necessary to work with such an interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef	LWMAP_H
#define	LWMAP_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;assert.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &quot;hps.h&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll call our interface &lt;code class=&quot;highlighter-rouge&quot;&gt;LWMAP&lt;/code&gt;, since it is going to map the lightweight
memory region of the
&lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;Cyclone-V SoC&lt;/a&gt;
on the
&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;DE-10 Nano&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;LWMAP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can look up in the
&lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;Cyclone-V&lt;/a&gt;
&lt;a href=&quot;https://www.intel.com/content/www/us/en/programmable/documentation/sfo1410143707420.html&quot;&gt;device handbook&lt;/a&gt;, HPS-FPGA Bridges chapter,
the region of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical addresses&lt;/a&gt;
assigned to this lightweight
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory map&lt;/a&gt;.
This region ranges from &lt;code class=&quot;highlighter-rouge&quot;&gt;0xff200000&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0xff400000&lt;/code&gt;.  It references an
area within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
side of the design that the SoC portion of the chip can interact
with.  We’ll label the first address of this range the &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt; address,
and the number of addresses within this range the &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_SPAN&lt;/code&gt;.  We’ll also
define a third value, &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_MASK&lt;/code&gt;, that we can use to force an address to
be in this range–even if it is outside of the range.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LW_REGS_BASE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;LW_REGS_MASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step will be to get a pointer that we can then later use to address
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address&lt;/a&gt; range.
We’ll place this pointer into the &lt;code class=&quot;highlighter-rouge&quot;&gt;m_base&lt;/code&gt; value above, and we’ll do it when
we instantiate or LWMAP object.  We’ll come back to the details of this in
a moment, since in many ways these details are the critical piece of this
whole post.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Fixed address terms&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-terms.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We’ll use the name &lt;code class=&quot;highlighter-rouge&quot;&gt;APPCODE_BASE&lt;/code&gt; to reference the location of our user
peripherals within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
address space.  In general &lt;code class=&quot;highlighter-rouge&quot;&gt;APPCODE_BASE&lt;/code&gt; will
lie between &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE+LW_REGS_SPAN&lt;/code&gt;.  This is one
of those values provided to my design from the &lt;a href=&quot;https://www.intel.com/content/www/us/en/programmable/products/design-software/fpga-design/quartus-prime/features/qts-platform-designer.html&quot;&gt;Intel Platform
Designer&lt;/a&gt;.
Since I chose the name AppCode for my design, short for the very generic
“application code”, the name of my application design is &lt;code class=&quot;highlighter-rouge&quot;&gt;APPCODE_BASE&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPCODE_BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first function will be to write to this &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory mapped I/O
region&lt;/a&gt;.
Given an address within this space and a value, let’s write the value to our
address.  Since &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; generates octet
addresses, we’ll need to shift our address right by two in order to get the
address of 32-bit word.  (&lt;a href=&quot;https://www.gcc.org&quot;&gt;GCC&lt;/a&gt; will optimize this
away.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The process of reading from a register within this &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory mapped I/O
region&lt;/a&gt; is nearly identical.
However, instead of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; to the register, we’ll just return the
value at that address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It might be nice to just simply write &lt;code class=&quot;highlighter-rouge&quot;&gt;pic_value = lwmap[R_PIC]&lt;/code&gt;.  This
requires a fairly trivial overload of the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, these &lt;code class=&quot;highlighter-rouge&quot;&gt;writeio&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;readio&lt;/code&gt; operations are only so useful.  In many
ways they don’t feal like the natural way of accessing an interface.  For this
purpose, &lt;code class=&quot;highlighter-rouge&quot;&gt;lea(addr)&lt;/code&gt; calculates and returns the effective address of &lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt; so
it can be used without &lt;code class=&quot;highlighter-rouge&quot;&gt;writeio&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;readio&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPCODE_BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif	// LWMAP_H&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How would we use this interface?  In just about the same way we did before
when we were working with the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt;.
First, at the beginning of any application, we’d create an object
of class &lt;code class=&quot;highlighter-rouge&quot;&gt;LWMAP&lt;/code&gt;.  Then we could repeatedly read a register
from the interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txuart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// While busy
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_UART_TX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_UART_TX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, if we wanted to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;lea&lt;/code&gt; approach, we could simplify this code
further.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txuart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_UART_TX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;R_UART_TX&lt;/code&gt; peripheral register is used here for illustration
purposes only.  Your design may, or may not, have an &lt;code class=&quot;highlighter-rouge&quot;&gt;R_UART_TX&lt;/code&gt; register
depending on whether or not you put one in there.&lt;/p&gt;

&lt;p&gt;Of these two approaches, &lt;code class=&quot;highlighter-rouge&quot;&gt;readio(addr)&lt;/code&gt; vs using &lt;code class=&quot;highlighter-rouge&quot;&gt;lea(addr)&lt;/code&gt;, I’m torn between
which I like more.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;lea(addr)&lt;/code&gt; approach is simpler to read, while the
&lt;code class=&quot;highlighter-rouge&quot;&gt;readio(addr)&lt;/code&gt; is easier to use if you want to run your software on a design
within a Verilator simulation.&lt;/p&gt;

&lt;p&gt;This is what we want to accomplish: the ability to read or write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory mapped I/O&lt;/a&gt;
registers from within a process running in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual address space&lt;/a&gt;.
The only question remaining is, how do we set this up in the first place?
That’s the topic of the next section.&lt;/p&gt;

&lt;h2 id=&quot;implementing-the-interface&quot;&gt;Implementing the interface&lt;/h2&gt;

&lt;p&gt;The secret sauce to making this entire design work lies in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;LWMAP&lt;/code&gt; constructor that we just glossed over above.  Let’s take a moment
to look through and understand it now.&lt;/p&gt;

&lt;p&gt;We’ll skip past some useful header includes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;assert.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// hps.h is built by Intel&#39;s sopc-create-header-files program
// It defines some of our constants for us.  You may or may not
// need it in your design.
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;hps.h&quot;
#include &amp;lt;time.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;lwmap.h&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that out of the way, we can build our constructor method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This constructor will depend upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mem&lt;/code&gt; interface within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt; system.  This interface will
give us access to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;raw physical address
space&lt;/a&gt;.  Hence,
we’ll start by opening it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/dev/mem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_SYNC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ERROR: could not open &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/dev/mem&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Accessing a memory mapped peripheral using a virtual address&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-vaddr.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Our next and critical step will be to map this “file”, that is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address space&lt;/a&gt;
device of the system, into a region of memory within our
process.  In our case, that memory starts at &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt;
and continues for &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_SPAN&lt;/code&gt; addresses.  We’re creating a shared memory
map, so other processes can use this memory as well (watch out for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrent_computing&quot;&gt;concurrency issues&lt;/a&gt;!),
and we’re mapping our file (i.e. the memory) based upon the file descriptor
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_fd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is done with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mmap&lt;/code&gt; system call&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROT_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROT_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;MAP_SHARED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This gives us an address, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_base&lt;/code&gt;, that we can then use to reference the
&lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical
address&lt;/a&gt;.
Offsets from that address, up to &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_SPAN&lt;/code&gt; in
distance, will continue to map to this space.&lt;/p&gt;

&lt;p&gt;The last step is to check for errors, and exit if this operation failed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_FAILED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ERROR: mmap() failed, &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you are all done with this interface and no longer need access to any
of the peripheral registers from within your application, you can release
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;memory mapped region&lt;/a&gt;.
and close the file descriptor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;munmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ERROR: munmap() failed, &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the basic concept: &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;map&lt;/a&gt; a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;peripheral&lt;/a&gt;
residing at a &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address&lt;/a&gt;
onto a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual page&lt;/a&gt;
within your processes address space, and then access it like
you would any other variable.  Writes to that address will write to the
peripheral, and reads will read from it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Normally, I focus on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
issues when designing in Verilog.  Today’s post has been a bit different.  It
represents the other half of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
processing world.  If you want to access an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
core via a &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory-mapped I/O
register&lt;/a&gt; from C or C++,
you’ll need one of the techniques mentioned above.&lt;/p&gt;

&lt;p&gt;While I’d like to say that this process is simply and easy, I originally learned
it by word of mouth, and then later struggled to find this information when
I looked for it.  Since this information is so important for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
designs, I’ve chosen to include it here.&lt;/p&gt;

&lt;p&gt;Before we leave this topic, though, let me just ask: Did you catch the
reference to how software could be written to run on both the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
connected to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
as well as from
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;?
That will be important if you ever need to work with a design like this.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Salt is good: but if the salt have lost his savour, wherewith shall it be seasoned?  It is neither fit for the land, nor yet for the dunghill; but men cast it out. He that hath ears to hear, let him hear.  (Luke 14:34-35)&lt;/em&gt;</description>
        <pubDate>Sat, 03 Nov 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/11/03/soc-fpga.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/11/03/soc-fpga.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Taking a look at the TinyFPGA BX</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The TinyFPGA BX&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/TinyFPGA-BX.png&quot; alt=&quot;&quot; width=&quot;202&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, I wrote a &lt;a href=&quot;/blog/2017-12/16/max1k.html&quot;&gt;review of the MAX-1000 FPGA board&lt;/a&gt; sold by
&lt;a href=&quot;https://www.trenz-electronic.de/en&quot;&gt;Trenz&lt;/a&gt;.  Today, I’d like to share my thoughts on another small &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
development board: the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; board.&lt;/p&gt;

&lt;p&gt;If you’ve paid attention to the boards I like to purchase, I have a particular
love for the smaller &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards.  Examples include the
&lt;a href=&quot;http://www.xess.com/shop/product/xula2-lx25&quot;&gt;XuLA2-LX25&lt;/a&gt;,
&lt;a href=&quot;http://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod S6&lt;/a&gt;,
and the &lt;a href=&quot;/blog/2017-12/16/max1k.html&quot;&gt;MAX-1000&lt;/a&gt;.
These boards have all pin-holes for connections, running around the edges of
the board.  As a result, they either have very few peripherals, or these
boards are rife with possibilities and just waiting for a fun electronics
project.  Your choice.&lt;/p&gt;

&lt;p&gt;That said, this is probably a character flaw on my own part, because I’ve
never been comfortable with a soldering iron.  In reality, I shouldn’t be
so concerned.  At the extremely low cost of these small boards–and
particularly the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA
BX&lt;/a&gt;, I can afford a soldering failure,
or two, or perhaps even twenty, and I would quickly learn to be a better
engineer as a result.&lt;/p&gt;

&lt;p&gt;But let’s dig into the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, and
see what we can do with something like this special board.&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-bx&quot;&gt;TinyFPGA BX&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; is a bare bones
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
board.  And, when I say bare bones, that’s
exactly what you have.  The board contains:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;a href=&quot;http://ww1.microchip.com/downloads/en/DeviceDoc/20005625B.pdf&quot;&gt;ultra low power 16MHz clock MEMs
oscillator&lt;/a&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;http://www.adestotech.com/wp-content/uploads/DS-AT25SF081_45.pdf&quot;&gt;1MB SPI flash, capable of QSPI
mode&lt;/a&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A power LED and a user controlled LED, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A reset button to reload the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; from &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A USB connection for programming the board&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An iCE40 LP8k FPGA.  This FPGA has 7680 4-LUTs, and is supported by a fully
open source toolchain consisting of &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;, &lt;a href=&quot;http://www.clifford.at/icestorm&quot;&gt;ice-storm&lt;/a&gt;, and now &lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;NextPNR&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This iCE40 also has 16kB of block RAM.&lt;/p&gt;

    &lt;p&gt;When I tried to place the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on this board, I quickly discovered I’d
never be able to use all of that blockRAM for &lt;a href=&quot;/about/zipcpu.html&quot;&gt;my CPU&lt;/a&gt;.  Since the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
uses block RAM for more than one purpose (RAM, CPU registers, serial port
FIFO, etc.), this effectively limited the size of the block
RAM device available for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to 8kB.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;Oh, I almost forgot, one of the great strengths of the board is that it has
24 digital I/O’s with which you can do whatever with.  These I/O’s are brought
out to pins on the edge of the board.  Indeed, the strength of the board, as
in other boards of this minimalist variety, lies in what you can do with these
I/O’s.&lt;/p&gt;

&lt;p&gt;What really sets the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; apart,
though, is how it handles the USB port.&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-usb&quot;&gt;TinyFPGA USB&lt;/h2&gt;

&lt;p&gt;Most of the programmable &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards I have include an &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf&quot;&gt;FTDI
FT2232H&lt;/a&gt;
chip connected to the USB port.  This chip contains all the hardware necessary
to both program the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, and to connect a basic serial port from your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design to your host computer.&lt;/p&gt;

&lt;p&gt;Not so with the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;.  This is perhaps the biggest thing that sets the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; apart from other &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; solutions: &lt;em&gt;it has no auxilliary chip for
dealing with the USB&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Instead, the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; requires &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design logic to communicate over the USB
port–if at all.&lt;/p&gt;

&lt;p&gt;I’ll be honest, before I discovered the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;, I thought it was impossible
to program an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; to communicate over the USB in a raw fashion like that.
The &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt; proves me wrong.&lt;/p&gt;

&lt;p&gt;Here’s how this works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When you power up the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;, it immediately loads
an initial “&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;”
design onto the board–much like a lot of microcontrollers, such as the PIC.
This is not your user design.  Instead, this is a design that will either
load your design, or communicate with the board over USB, and so allow you
to write a user design to the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Fig 2. on the right shows the basic
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory segregation.
The first 165kB is used by this USB enabled boot-loader, the next 165kB
is used  by the user design, and the rest of the flash is available to your
design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. Flash Memory by the Section&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tinyfpga-flash-layout.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Using the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-B-Series/tree/master/programmer&quot;&gt;TinyFPGA BX python
tools&lt;/a&gt;,
you can communicate with this &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;
and load your design into the next 165kB of
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, when you are ready and with the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;
plugged in, a USB command can be sent to the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; to cause it to switch to the user design.
This uses the iCE40 WARMBOOT primitive to cause the iCE40 to load a
new design from a non-zero address within &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory.&lt;/p&gt;

    &lt;p&gt;Once complete, your user design starts running.  If your design doesn’t
have USB capability within it, then you won’t have USB connectivity again
until you restart the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ever after, the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; will load your design after waiting a second or
two on startup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To return to the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; mode, you either need to press the reset button,
pull power from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, or
issue your own command to the WARMBOOT
primitive from within your own design to cause the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; to
reload itself from the zero address.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this is to say that the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; doesn’t really
provide the same functionality that the &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf&quot;&gt;FTDI
chip&lt;/a&gt;
did.  Under this design concept, you cannot load a design onto the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; without also loading it onto the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; first.
There is no usable JTAG port to directly load the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; apart from
loading it into the &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;,
or to debug the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
using vendor tools.  Further, if you want a USB console port to your board,
then you may need to design and and add it yourself.&lt;/p&gt;

&lt;p&gt;It’s a pretty neat design concept.  Better yet, it’s all open source!  You can
look up how the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;does
it&lt;/a&gt;, and then modify
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;that design&lt;/a&gt;
for your own purposes.&lt;/p&gt;

&lt;h2 id=&quot;practical-consequences&quot;&gt;Practical Consequences&lt;/h2&gt;

&lt;p&gt;There are, however, some practical consequences of both the design concept
and the hardware on the board.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Because loading your design onto the board requires a design already loaded
onto the board, you’ll need to be careful not to erase, overwrite, or
otherwise damage the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; design.&lt;/p&gt;

    &lt;p&gt;If you do, you haven’t quite bricked your board.  However, you will then
be stuck trying to reload the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; design back onto the board using
the SPI pads (not pins, nor pin holes, but pads) on the back of the board.&lt;/p&gt;

    &lt;p&gt;While this may sound scary, the reality is that if you are going to be
soldering or otherwise wiring this board into your own project somewhere,
then you already have the skills to do this–even if it is a hassle.
Indeed, if you look at the underside of the board, you’ll be able to see
small pin-prick indents in the pads there, showing you where pins were used
to connect to the design to load the &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; initially.&lt;/p&gt;

    &lt;p&gt;If this is still more than you bargained for, then &lt;a href=&quot;https://www.tindie.com&quot;&gt;Tindie&lt;/a&gt; sells a &lt;a href=&quot;https://www.tindie.com/products/loglow/tinyfpga-bx-breakout-revision-a&quot;&gt;breakout
board&lt;/a&gt;
for the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; for only $11 that should give you access to these
SPI pins for this purpose as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to USB enable your own design, there are some consequences.
First, the USB &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; requires about 1k LUTs out of a board containing
only 7.6k LUTs in the first place.  Placing this &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;, or other USB
design, into your &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design will limit what you can do with your own
design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The really ugly part of this setup is that neither
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;nextpnr&lt;/a&gt; nor
&lt;a href=&quot;https://github.com/YosysHQ/arachne-pnr&quot;&gt;arachne-pnr&lt;/a&gt;
support multiple clock timing-driven placement (yet), nor does the
&lt;a href=&quot;https://github.com/cliffordwolf/icestorm/tree/main/icetime&quot;&gt;icetime timing checker&lt;/a&gt; within the
&lt;a href=&quot;https://www.clifford.at/icestorm&quot;&gt;icestorm toolkit&lt;/a&gt;.  Think this through.
The USB design used by the bootloader runs at 48MHz.  It is very much wed
to this speed, and it would be difficult to change it.  If your user design
doesn’t run at 48MHz, you’ll be stuck either using the proprietary
tool-chain or waiting for dual-clock support in
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;nextpnr&lt;/a&gt;.
(&lt;a href=&quot;https://github.com/YosysHQ/arachne-pnr&quot;&gt;Arachne-pnr&lt;/a&gt;, though maintained,
is no longer under active development.)&lt;/p&gt;

    &lt;p&gt;Just to give you a feel for timing, my own
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; runs at 100MHz on a Xilinx
Artix-7.  &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;It runs at 80MHz on a
Spartan 6&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;It runs at 50MHz on
an iCE40 HX8k&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;It runs at 25 MHz on
the iCE40 LP8k&lt;/a&gt; found within the
&lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;.
(&lt;a href=&quot;https://github.com/cliffordwolf/icestorm/tree/main/icetime&quot;&gt;icetime&lt;/a&gt;
gives the design a 30MHz maximum clock speed.)  Without being able to route
my design for two separate clocks, my design will not have USB support.&lt;/p&gt;

    &lt;p&gt;Or would they?  The ice40 boards do have an &lt;code class=&quot;highlighter-rouge&quot;&gt;SB_IO&lt;/code&gt; primitive that provides
support for a DDR capability …&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What does this mean for me?&lt;/p&gt;

&lt;p&gt;First, the small block RAM space on the chip is too small to hold the
&lt;a href=&quot;https://sourceware.org/newlib&quot;&gt;newlib&lt;/a&gt; C-library.  Hence, if I want to run
&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt; I’ll need
to store as much library code as I can in the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.  I’ll need to be
extra careful that, in this process, I don’t affect the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;.  In addition, 
&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;
will need 2 wires dedicated to my &lt;a href=&quot;https://store.digilentinc.com/pmod-usbuart-usb-to-uart-interface/&quot;&gt;USB-UART PMod&lt;/a&gt;, just so I can see the result
and interact with my design–assuming that I can’t get a USB console to work.&lt;/p&gt;

&lt;p&gt;I’m also very thankful that the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA
BX&lt;/a&gt; (now) supports all the wires
necessary for &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;QSPI flash&lt;/a&gt;!
That will help to help keep the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;CPU speed up
there&lt;/a&gt;, in spite
of the non-pipelined CPU configuration (the only one that would fit).&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-and-fpga-hell&quot;&gt;TinyFPGA and FPGA Hell&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; has a USB protocol driver.  This was one of the things
that surprised me and caught my attention when I first discovered this board.
In particular, I was curious to know how Luke Valenty built it.  The USB
specification is rather large and complex.  I had to ask: What design method
did Valenty use to get this interaction up and running?&lt;/p&gt;

&lt;p&gt;So I asked.  Valenty was more than happy to share how he had (or rather hadn’t)
avoided &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt; during his design
process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I notice the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;
design includes a USB capability.  Can you tell my readers anything about
how you went about building it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards use a dedicated USB interface chip to enable programming
and communication between the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; and a host computer.  The most popular
choice is an &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf&quot;&gt;FTDI chip&lt;/a&gt;.
This chip costs as much as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; itself!  I
had a goal of developing a small and cost-effective &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board and I
really wanted to deliver.  I have a lot of experience with USB, so I
decided to implement the USB interface fully on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; itself.
The ICE40 FPGAs have a multiboot capability that allows for multiple
configuration bitstreams to be stored in the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;SPI flash&lt;/a&gt; and loaded at will
by the design.  This allowed me to develop a USB &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; in a similar
way that microcontrollers can bootload themselves over serial or  USB
interfaces.&lt;/p&gt;

  &lt;p&gt;The plan was to test the design on the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; hardware against a real
USB host.  I had no testbench for simulation nor did I have any 
&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formal assertions or assumptions&lt;/a&gt;.  This was a terrible idea and I
spent a lot of time debugging issues on real hardware and implementing
workarounds in the original programmer software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I’m not a board designer myself, so I have the advantage of examining a
  canned &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design for the board I’m working with before I ever start.
  Even better, I can return to that design if I think there might be a
  hardware problem with the board I am working with.&lt;/p&gt;

&lt;p&gt;As a board supplier, can you share anything about what it took to get a
  first initial design running on the board?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because I didn’t have any simulation or &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; environment,
I had to do all my testing and debugging on the real hardware.  This
involved running tests on the board while connected to a USB host and
spying out internal signals to extenal pins so I can capture them on my
logic analyzer.  Debugging issues required me to make educated guesses
about what signals might help me to debug an issue and rerunning the test multiple times while capturing different groups of signals until the issue could be identified and fixed.&lt;/p&gt;

  &lt;p&gt;This was a long turnaround between seeing an issue, root-causing it, and
verifying a fix.  It took quite some time and long nights to get the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; working reliably on all platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Did you ever find yourself stuck in &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA
  Hell&lt;/a&gt; while designing and
  building the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, in fact, any time I go back to the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; I have
to be very careful how I make changes.  I have since added a simulation
test bench and suite of tests, but making changes is still quite difficult.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Did you use any simulation or &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; techniques?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nope, and this was a major folly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Would you recommend this approach to others?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is pretty much the worst way to go about developing a digital design.
In the end I was able to get the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; to work
very well, but I spent a substantial amount of time working through issues
that would have been trivial to find with a simulation testbench and/or
with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; techniques.&lt;/p&gt;

  &lt;p&gt;I am currently working on a rewrite of the USB core and
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; using
&lt;a href=&quot;http://m-labs.hk/migen/index.html&quot;&gt;Migen&lt;/a&gt; and a unit test methodology.
The design is broken down into small
and simple components that are then unit tested individually to ensure
they behave as expected.  This process is proving to be far easier, less
time-consuming, and is creating a more robust design.  If
&lt;a href=&quot;http://m-labs.hk/migen/index.html&quot;&gt;Migen&lt;/a&gt; ever
gets support for &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formal assertions and assumptions&lt;/a&gt; I would be very
interested in trying them out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Finally, what do you see as the biggest selling point of the
  &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; over and above other
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
  boards that may be out there today?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; board is great to
me because it’s completely open and very small.  You have a lot of freedom
to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
in any way in which you feel without paying extra money for components or
peripherals you are not using.  It’s a great way to create new and unique
projects that take advantage of the power of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.  The
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://discourse.tinyfpga.com&quot;&gt;Discourse server&lt;/a&gt;
has some excellent examples of projects the community has come up with:
&lt;a href=&quot;https://discourse.tinyfpga.com/c/tinyfpga-projects&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;h2 id=&quot;using-the-tinyfgpa&quot;&gt;Using the TinyFGPA&lt;/h2&gt;

&lt;p&gt;I hope I haven’t given you the wrong idea about the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; above.  It is designed to be a very minimalist
iCE40 FPGA board.  It fills that role quite nicely.  Even better,
it is supported by an entirely open source &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; tool chain.&lt;/p&gt;

&lt;p&gt;If this is your first project, then do be prepared to do some hand wiring
to connect your favorite devices/peripherals to the board.&lt;/p&gt;

&lt;p&gt;Others have already been very successful with this board.  These users have
proved that you can play pong, pac man, or even space invaders on the board.
Still others have ported the picoSoC project including a picoRV RISC-V CPU to
the board.  In other words, it’s not so spare that you can’t do anything with
it, but it might test your creativity.  Hopefully that’s why you are in the
market for a board like this in the first place.&lt;/p&gt;

&lt;p&gt;Me?  Well, it shouldn’t surprise you to know that I’m more interested in
placing a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; onto the board.&lt;/p&gt;

&lt;p&gt;Will the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; fit?  Yes.  With a
special hardware multiply unit, the normal divide unit, together with the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;pipelined fetch unit&lt;/a&gt;
and compressed instruction support, a &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;minimum ZipCPU
build&lt;/a&gt; uses 5437 logic elements out of 7680,
or about 70%.  Yes, I rewrote both the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/slowmpy.v&quot;&gt;multiply&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divide&lt;/a&gt; units
to get the &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;logic
count&lt;/a&gt; this low.  I
could go lower if I wanted by removing some of these extra features.  My goal,
however, was to leave enough room at the end so that I could incorporate a USB
based serial port.  Sadly, I might end up waiting a while on that.&lt;/p&gt;

&lt;p&gt;Perhaps I’ll just &lt;a href=&quot;https://store.digilentinc.com/pmod-gps-gps-receiver&quot;&gt;GPS enable my
device&lt;/a&gt; instead.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Seest thou a man diligent in his busines?  He shall stand before kings; he shall not stand before mean men.  (Prov 22:29)&lt;/em&gt;</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/10/05/tinyfpga.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/10/05/tinyfpga.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
