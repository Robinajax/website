<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 17 Jul 2019 17:11:12 -0400</pubDate>
    <lastBuildDate>Wed, 17 Jul 2019 17:11:12 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Lessons learned while building crossbar interconnects</title>
        <description>&lt;p&gt;Okay, I’ll admit it, I’ve never used
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
for anything other than accessing
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt; memory.  Even for that
I tend to use a &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone (WB) to AXI
bridge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have, however, looked for posts on both
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;’s and now
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s forums
that I might be able to answer.  It seems that
Xilinx’s
answer to most design problems is to create either a
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze CPU&lt;/a&gt; or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM CPU&lt;/a&gt; (within a Zynq),
that you then connect to the rest of your design using their
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1.  Xilinx Tech Support&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/xiltech-support.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s interconnect&lt;/a&gt;
is a general &lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;cross bar switch&lt;/a&gt;.
It “connects one or more &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
memory-mapped master devices to one or more memory-mapped slave devices.”
In general, a &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar switch&lt;/a&gt;
allows any number of bus masters to access any number of bus slaves with the
(general) rule that only one master can talk to any given slave at a time.&lt;/p&gt;

&lt;p&gt;This is all fine and dandy, but what happens when you want to simulate a design
that has an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; within it?  &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s
crossbar&lt;/a&gt;
is proprietary.  It won’t run in
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.
Of course, &lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;their
CPU&lt;/a&gt;
is also proprietary, but we’ll leave that as a topic for a different discussion.&lt;/p&gt;

&lt;p&gt;I recently had the opportunity to investigate how to build a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar switch&lt;/a&gt;
of my own.  I built three of them: a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone
crossbar&lt;/a&gt;, an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;,
and a full-up &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI4
crossbar&lt;/a&gt;.  Today,
I thought I might share several of the more important points of these designs,
and perhaps even some lessons I learned while building them.&lt;/p&gt;

&lt;h2 id=&quot;crossbars-and-autofpga&quot;&gt;Crossbars and AutoFPGA&lt;/h2&gt;

&lt;p&gt;My own interest in building a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
stems from my work with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; takes
a series of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components, and connects them all together–much like either Vivado or Quartus
does but without the graphical user interface.  Each component is given its own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;, a set of
dedicated &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
connection wires, and then connected to a user-selected
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This works great … when it works.&lt;/p&gt;

&lt;p&gt;Sadly, I’ve had to work through some times when it hasn’t worked for me.
Often, I’ve mis-connected a slave to the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;–perhaps not ANDing the address selection wire with the strobe, perhaps swapping
the stall and acknowledgment signals, whatever it is I’ve often ended up needing
to debug a piece of a design where the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt; core
meets some “&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;verified-by-simulation&lt;/a&gt;”
logic.&lt;/p&gt;

&lt;p&gt;My ultimate goal is to avoid these problems by &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verifying&lt;/a&gt;
all of the parts and pieces of any design I create, to include those parts
that &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generates.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2.  Crossing slaves mid-request&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/double-ack-bug.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of my first problems is that &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;my favorite interconnect
design&lt;/a&gt;,
the same basic interconnect
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
builds, has a couple of limitations.  First, it can only handle a single bus
master at a time.  Multiple bus masters need to go through an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
first
before they can get access to the bus.  We’ll come back to this again
in a moment.  Second, &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;that
interconnect&lt;/a&gt;
offers no protection against the case where a
bus master
crosses from one slave to another during a single bus interaction, as Fig. 2
illustrates on the left.  In this illustration, the first bus slave responds
two cycles after the strobe while the second slave responds one cycle later.
The responses might end up colliding, as shown in the figure, or even out of
order.  Worse, the third problem has to do with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.
If a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
is generated as I have things set up, the
bus master
will never know &lt;em&gt;which&lt;/em&gt; request generated the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
and which request(s) have completed.&lt;/p&gt;

&lt;p&gt;I was curious to know if I could do better.&lt;/p&gt;

&lt;p&gt;At least, that was my first reason for being interested.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. A Formal Property File can be the easiest way to start with formal verification&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/fpropfile.png&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Eventually, a second reason came into play as well:
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;Interconnects&lt;/a&gt;,
like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
bridges in general, make ideal tests of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal bus property
files&lt;/a&gt;.
Because you need the properties for both the slave and the master, you
essentially have to verify your properties back to back.  Are the master
bus property assumptions sufficient to drive the slave?  Are the slave
bus assumptions sufficient to satisfy the master’s assertions?&lt;/p&gt;

&lt;p&gt;Finally, my last basic reason was that this
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
work was a lot of fun.  Indeed, I found them building these
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;, and particularly
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
them, to be a rather addictive challenge–even if it’s quite a time consuming
one.  Hey, we all have our hobbies, right?&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-crossbar&quot;&gt;What is a Crossbar?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;Wikipedia describes a crossbar&lt;/a&gt;
as a two-dimensional electrical structure where the source
comes in from one direction, and the outgoing connections go out a second.
While there’s &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;no picture offered currently on
wikipedia&lt;/a&gt;, I’m going to use
Fig. 4 as my attempt to capture and explain this concept.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4.  The Concept of a Crossbar Switch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/crossbar-switch.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see a set of incoming electrical connections at the top,
and a set of outgoing electrical connections on the right.  At every crossing,
there’s a switch which may be closed to create a connection between any given
master and slave combination.&lt;/p&gt;

&lt;p&gt;There’s two other things to note from this figure.  First, note that any
of the incoming signals can be connected to any of the outputs.  Second, note
that for an &lt;code class=&quot;highlighter-rouge&quot;&gt;NxN&lt;/code&gt; array, all &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; sources can be connected to a different
sink.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;Bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;
are very similar conceptually.  A series of
bus masters
are available as sources to drive one of several
bus slaves.  The biggest difference is that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt; typically have
many wires associated with them, and some of those wires are driven
with return values by the slave.  For example, a 32-bit
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; requires roughly 164
separate wires to drive the slave, whereas the slave will respond with another
50 wires returned in response.  The
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; is both much simpler, and
not nearly so full featured.  Wishbone transactions, therefore, can be
accomplished with only 106 separate wires, of which 71 are used to drive the
slave and 35 are returned in response.&lt;/p&gt;

&lt;p&gt;As for how you might use one of these, consider as an example that the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;typical ZipCPU design&lt;/a&gt;
that has at least four separate
bus masters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;instruction
fetch&lt;/a&gt; unit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;data memory port&lt;/a&gt;, handling any load or store instructions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt; data transfer port&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;A debug port&lt;/a&gt;,
through which the CPU can be &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;stopped, stepped, or reset and its registers
may be read&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of my
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; designs have more
masters as well, for example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;A Video display controller&lt;/a&gt;
that needs to read from memory in order to create a pixel stream&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;A spectrogram raster, that writes FFT results from captured data to the
memory&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As I’ve currently built most of my &lt;a href=&quot;/about/zipcpu.md&quot;&gt;ZipCPU&lt;/a&gt;
designs, I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;2:1&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiters&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;such as this
one&lt;/a&gt;
followed by a &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1:N&lt;/code&gt; interconnect&lt;/a&gt;, as illustrated by Fig. 5.  (I did build a &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/master/rtl/wbquadarbiter.v&quot;&gt;4:1
arbiter&lt;/a&gt;
once, but as I recall I’ve yet to use it.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. The ZBasic bus structure only allows a single master to ever drive the bus&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/zipcpu-nocrossbar.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sadly, that means that any
bus master
can starve another by simply hogging the port.&lt;/p&gt;

&lt;p&gt;To see how this might happen, consider an example from one of my first FPGA
projects what it would take to drive a video stream from a &lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users/&quot;&gt;Basys3
board&lt;/a&gt;.
The &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video driver&lt;/a&gt; needed access
to the &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; to read
(and then decompress) pixels so that they could be displayed on
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;VGA&lt;/a&gt; output.
(There wasn’t enough RAM on or off chip for a proper screen buffer.)  Now
imagine that at the same time, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
wants to &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;read
instructions&lt;/a&gt; from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;: the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video controller&lt;/a&gt; needs the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;, and &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; needs the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
By going through an N:1
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
first, or rather several &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;2:1
arbiters&lt;/a&gt;
as I had actually implemented it, any time
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
request would get through the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;arbiter&lt;/a&gt;
it would then force any
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
requests to stall.  Worse, they might need to wait so long that the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
can’t read its pixel memory fast enough to display it.&lt;/p&gt;

&lt;p&gt;This particular design was from before
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
The solution I eventually chose, shown in Fig. 6 below, was to place the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
memory controller &lt;em&gt;after&lt;/em&gt; the main
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
in order to disconnect &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; from
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
memory if it didn’t need it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Placing the arbiter after the interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/flash-v-video.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, this will only ever work as long as the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video controller&lt;/a&gt;
only ever needs access to a single peripheral–in this case the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If, on the other hand,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
could access the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
at the same time the video controller could access
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;, then you have a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;—or at least that’s the
idea.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;my new flash
controller&lt;/a&gt;,
this might no longer be an issue–but it certainly
was back then with the older controller.  On the other hand, with the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;old flash controller&lt;/a&gt;,
I could only ever control a 640x480 screen–with the newer
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash controller&lt;/a&gt;
I might be able to handle some better screen resolutions if I ever returned
to the project.&lt;/p&gt;

&lt;h2 id=&quot;the-key-an-nxm-arbiter&quot;&gt;The key: an NxM Arbiter&lt;/h2&gt;

&lt;p&gt;When building a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;, everything
comes down to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
has &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; ports for &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; masters, and &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; ports for &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; slaves.  Somehow, then,
a slave needs to get its data from one of the masters.  But which master?
That’s the task of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;arbiter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are several rules to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt; in a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; The bus protocol must be obeyed.&lt;/p&gt;

    &lt;p&gt;This is easily checked: all it requires is attaching a set of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal bus
properties&lt;/a&gt;
to every incoming or outgoing connection.  Since I have bus properties for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;, and even
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;,
I could easily verify that each of my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt;
maintained these properties for each connection.&lt;/p&gt;

    &lt;p&gt;Having &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt; identical master connections and &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; identical slave connections
naturally lent itself to a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops within the design.  Normally I
avoid &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops within digital design like the plague.  In this case, there
was no way around it if I wanted the interconnects to have a programmable
number of master and slave connections.&lt;/p&gt;

    &lt;p&gt;To help deal with this, I used either the &lt;code class=&quot;highlighter-rouge&quot;&gt;genvar&lt;/code&gt; index &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; or equivalently
the integer index &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt; to refer to a connection to a bus master, while I
used either &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; to refer to a connection to a bus slave.  I’ll
refer to these indexes often later, so remember &lt;code class=&quot;highlighter-rouge&quot;&gt;NxM&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; will reference
one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; connections from the &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt;
bus masters,
whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; references one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; outgoing connections to
bus slaves.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7.  One master connection, one slave connection&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/arbiter-rule-1.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; No more than one master can be connected to any particular slave.&lt;/p&gt;

    &lt;p&gt;I used a 2-dimensional &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; variable to help express this.  This is
most easily understood by examining Fig. 7 on the right.  Imagine that
each switch’s status was represented by a single bit in this array.
In my terminology, &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N]&lt;/code&gt; represents all of the connections associated
with all of the slaves that might connect to master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, shown in Fig. 7
as a vertical bar.  Fig. 7 shows what would happen if &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[0][2]&lt;/code&gt; were
set, connecting master numbered &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to slave number &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Using this 2-D &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; array, I could easily express this property that
no more than one master could ever be connected to more than one slave as
&lt;code class=&quot;highlighter-rouge&quot;&gt;assert($onehot0(grant[iN]));&lt;/code&gt; for every value of the master index, &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;In the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt; I’ve built,
whether the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;full AXI4
interconnect&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite interconnect&lt;/a&gt;,
I used two grant variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;wgrant&lt;/code&gt; for writes and &lt;code class=&quot;highlighter-rouge&quot;&gt;rgrant&lt;/code&gt; for reads,
since the &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
protocol allows both writes and reads at the same time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px;&quot;&gt;&lt;caption&gt;Fig 8. Quick loop up functions, master&#39;s perspective&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/mgrant.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This wasn’t enough to keep the &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;synthesized logic simple and low
   cost&lt;/a&gt;,
   so I created two other structures.  The first of these,  &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt;, was
   true if a particular master had been granted access to a slave–any slave.
   Essentially, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was equivalent to the “OR” of all of the elements
   in the grant array for a particular master, &lt;code class=&quot;highlighter-rouge&quot;&gt;|grant[iN]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second structure was &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[iN]&lt;/code&gt;, which contained the index of the slave
   that master &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt; was connected to.  Hence, if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was true,
   then it must also be true that &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[iN][mindex[iN]]&lt;/code&gt; was also true.
   Perhaps you may recall &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;the post discussing why this approach was so
   necessary&lt;/a&gt; from
   some time ago.  This index-based reference was my solution to that problem.&lt;/p&gt;

&lt;p&gt;This “solution” naturally led to another problem, what if you only have for
   example 5 slaves?  How many bits should be used for each &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex&lt;/code&gt; value?
   Well, three obviously.  However, that also meant that any time a value was
   referenced using the index, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;slave_ack[mindex[N]]&lt;/code&gt;, that a full 8
   values needed to be defined–even if I knew that only the lower 5 would be
   used.&lt;/p&gt;

&lt;p&gt;All of these various data structures are tightly connected.  As I mentioned
   above, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN] |-&amp;gt; (grant[iN] == 1&amp;lt;&amp;lt; mindex[iN])&lt;/code&gt;.  There was also the
   corollary, that &lt;code class=&quot;highlighter-rouge&quot;&gt;!mgrant[iN] |-&amp;gt; (grant[iN] == 0)&lt;/code&gt;.  This helped to make
   certain that any logic I created kept these values properly synchronized.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Quick loop up functions, slave&#39;s perspective&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/sgrant.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; No more than one slave can be connected to any master.  Any unconnected
slave should neither receive requests nor send replies.&lt;/p&gt;

    &lt;p&gt;To capture this, I created two new values: &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt;, which would be true
if slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; had been assigned to a master.  Remember how &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was
true if any switch in the columns of Fig. 2 above was closed?  &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt;
is the same thing, only acting across the rows.  &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[iM]&lt;/code&gt; was the
slave side corollary for the master index, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[iN]&lt;/code&gt;, so that any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt; was true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[sindex[iM]][iM]&lt;/code&gt; must also be true.
(That’s what the &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; is intending to express in Fig. 9–evaluated
across all masters.  No, this is not valid syntax in any language I am
familiar with, but it fit in the figure.)&lt;/p&gt;

    &lt;p&gt;Put together, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N][M]&lt;/code&gt; was true, then master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; was connected
to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.  In that case, both &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[N]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[M]&lt;/code&gt; would be true.
Further, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[N]&lt;/code&gt; would be &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[M]&lt;/code&gt; would be &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Yes, keeping track of all of these values, &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex&lt;/code&gt; took a lot of accounting.  As I mentioned above,
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
really helped.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 10. Pseudo-slaves to handle bus errors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/buserr.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; If a master requests an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
that doesn’t belong to any slave, the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; must send a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
in response.  Further, it must not send the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
response until any other valid responses have been returned, so enforcing
a strict ordering of operations on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;–something I
didn’t have before.&lt;/p&gt;

    &lt;p&gt;This necessitated the creation of a special set of slaves, internal to the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;, which would
respond to any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.  That meant
that the slave index, &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; wouldn’t just go from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;NS-1&lt;/code&gt;, but rather
to &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; in order to reference the “no-peripheral mapped to this address”
slave.  You can see these extra slaves illustrated in Fig. 10 on the left.&lt;/p&gt;

    &lt;p&gt;This special slave ID was unusual, since every master could connect to
the error slave &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; at the same time.  It’s as though there really were
&lt;code class=&quot;highlighter-rouge&quot;&gt;NS+NM&lt;/code&gt; slaves, such as are shown in Fig. 10, rather than just the &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;
slaves connected to the right of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;.  That way two
masters can be receiving &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
responses at the same time without needing to wait for access to the special
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; slave.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
can’t change the grant for a given master while that master is waiting
for a response from a slave.&lt;/p&gt;

    &lt;p&gt;This requires counters.  Every request accepted into the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
needs to increase that counter by one, whereas every response needs to
decrease the counter by one.  Once the counter reaches zero, the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
can tear down a given connection and set up a new one.&lt;/p&gt;

    &lt;p&gt;Checking for whether or not the counter is empty is quite straightforward,
and I kept a set of flags I called &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N]&lt;/code&gt;, one for every master, to
indicate that there were no outstanding returns pending for that master.&lt;/p&gt;

    &lt;p&gt;Before we leave this topic, though, let me ask: have you thought
about what would happen when the counter overflows?  I think we can all
agree that would be bad, but how should it be prevented?&lt;/p&gt;

    &lt;p&gt;The easy answer would be to just add more bits to the counter to prevent
this from ever happening in the first place.  I mean, realistically, what’s
the likelihood that that a 32-bit counter of outstanding transactions would
ever overflow?  How about a 64-bit counter overflowing?&lt;/p&gt;

    &lt;p&gt;I chose a different answer.  I chose instead to keep track of when the
counter was full, which I kept track of in another array &lt;code class=&quot;highlighter-rouge&quot;&gt;mfull[N]&lt;/code&gt;,  and
to stall a given master if accepting another
transaction would cause the counter to overflow.  This wasn’t as easy as it
sounds, since it took a clock to stop things before I made the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt; external.
That meant checking for when the counter was near overflow, and stalling if
there was already something in the pipeline at that time.  Once I made the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt; external,
this all got much easier.&lt;/p&gt;

    &lt;p&gt;There’s also an unfortunate consequence of this rule: if ever a slave
misbehaves and doesn’t return a response, both the master granted access
to that slave and any other master attempting to access that slave will be
locked until a design reset.  Perhaps you’ll remember when I discussed having
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;that problem in a DE-10 Nano
board&lt;/a&gt;.  Finding a
bug is a challenge when the only way to get the board to respond to you
again is to reset it knowing that doing so will wipe away the information
you need to find the bug.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. A Broken slave can break the interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/broken-slave.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;(&lt;strong&gt;Implementation Option&lt;/strong&gt;:) A bus
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; may generate an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
if ever a slave doesn’t respond to a request within a given amount of time.&lt;/p&gt;

    &lt;p&gt;This follows from some ugly lessons I’ve had in the past when building
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components.  Because I use a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;bus based
“scope”&lt;/a&gt;
to debug my design, if ever a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component didn’t respond to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
the master might get stuck waiting for a response–and so I’d never be able
to access my “scope” to know what was going wrong.&lt;/p&gt;

    &lt;p&gt;To deal with this, every
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
structure I’ve built includes a counter with a timeout.  That way, if an
errant slave refused to respond to a request (this was pretty common
before I started working with
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;),
the design wouldn’t freeze and I could still use the design to discover
what the fault was.&lt;/p&gt;

    &lt;p&gt;Sadly, the way the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
protocol&lt;/a&gt; is structured,
this is really hard to do.  Eventually, I created &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;a separate AXI bus
component&lt;/a&gt;
that I could use to bridge between the “trusted” bus master side and any
untrusted slave, returning a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
on any violation of the bus protocol by the slave.  Unfortunately, as
currently built, this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt; also
limits the throughput of the bus–although not nearly as bad as &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s
demo implementations do&lt;/a&gt;.
Perhaps I’ll be able to come back later to fix this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Basic Processing Steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/cbar-channel.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; Every connection that can stall needs to be connected to a &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;, as shown in
Fig. 12 above.  All of my
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; have an incoming
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;, while
only the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
and &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; have return channel
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s as well.&lt;/p&gt;

    &lt;p&gt;Sadly, these sub-module &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s weren’t part of
my initial design approach.  In hind sight, they should’ve been.&lt;/p&gt;

    &lt;p&gt;Initially, I instantiated every one of the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffers&lt;/a&gt;
by hand within each
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
I created.  I then verified each
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
from the standpoint of the external connections.  This threw all of my
counters off, since I had to create an equation mapping the number of
outstanding transactions from the perspective of each master, to the
number of outstanding transactions from the perspective of each slave,
and the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
got in the middle of that.  If I failed to do so, the design would fail
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This book-keeping was quite painful.&lt;/p&gt;

    &lt;p&gt;On the other hand, once I created and verified a separate 
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
module, I went back and tore apart all of those painful
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties and rewrote them for simplicity.  Now, when verifying the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;,
the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s have been
removed and replaced with simple pass-through logic.  The proof, I’ve
judged, is just as valid–since the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s have
already been verified separately.&lt;/p&gt;

    &lt;p&gt;This almost worked, too.  There was one problem: The
bus abort capability I’ve written into all of my
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; implementations.
Eventually, I convinced myself with a bit of bounded model checking that
this was working, although I haven’t come back to simulate these
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt;
(yet) to see how they work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structures have more or less requirements than others.  For
example, &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;the way I implement
WB&lt;/a&gt;, I insist that the
cycle line be dropped following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
This then implements a bus &lt;em&gt;abort&lt;/em&gt;, forcing any pending upstream
requests to be aborted and leaving any pending transactions in an uncertain
state.  Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; doesn’t support any
aborts.  However, &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
also has &lt;em&gt;two&lt;/em&gt; write channels that need to be synchronized: an
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; write address
channel and an &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
write data channel–something
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; doesn’t
need to deal with.  The
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI arbiter&lt;/a&gt;,
whether &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;full&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;lite&lt;/a&gt;,
needs to stall any write data channels in order to wait for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
to be given before it knows what slave to connect the write data channel to.&lt;/p&gt;

&lt;p&gt;Still, most of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
code is the same across all three of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.  Care to take a peek?&lt;/p&gt;

&lt;h2 id=&quot;examining-the-arbitration-code&quot;&gt;Examining the Arbitration Code&lt;/h2&gt;

&lt;p&gt;Let’s look at the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone
crossbar&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/wbxbar.v#L356-L471&quot;&gt;arbiter&lt;/a&gt;
and see how it’s done.  Both the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/axixbar.v#L754-L981&quot;&gt;AXI&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/axilxbar.v#L558-L799&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s
have similar structures and logic, although in those cases the logic is
duplicated in order to handle the separate read and write channels.&lt;/p&gt;

&lt;p&gt;The first step is to find out what master is requesting which slave.  Since this
code is common to all three
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;s,
it has been separated &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;into its own
file, &lt;code class=&quot;highlighter-rouge&quot;&gt;addrdecode.v&lt;/code&gt;&lt;/a&gt;.
The entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
decode operation is driven by the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/addrdecode.v#L44-L55&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ADDR&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_MASK&lt;/code&gt; parameters&lt;/a&gt;.
These two parameters are each one-dimensional implementations of what
should properly be a 2d array.  There’s one entry of &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; (address width) bits
per slave.  In order to match an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;,
the master’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
request must match the slave’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
in &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ADDR&lt;/code&gt; for every bit where &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_MASK&lt;/code&gt; is true.&lt;/p&gt;

&lt;p&gt;We’ll start first with the &lt;code class=&quot;highlighter-rouge&quot;&gt;none_sel&lt;/code&gt; flag though.  This flag is used to 
indicate that the requested
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
doesn’t match any slave’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
range.  To do this, we’ll run a check through a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, checking
whether or not the requested
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
matches any of the possible
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
requests.  We’ll start by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;none_sel&lt;/code&gt; high if ever there’s a valid
request, indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt;, and then clear it if any slave is found who’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; matches.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Let&#39;s assume nothing&#39;s been selected, and then check
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to prove ourselves wrong.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Note that none_sel will be considered an error condition
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// in the follow-on processing.  Therefore it&#39;s important
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to clear it if no request is pending.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then populate a &lt;code class=&quot;highlighter-rouge&quot;&gt;request[M]&lt;/code&gt; array structure, so that
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[M]&lt;/code&gt; will be true if and only if the address of the transaction
we are examining is requesting access to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// request[NS] indicates a request forr a non-existent
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// slave.  A request that should (eventually) return a bus
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// error
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all of the hard address decoding work.  The rest of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
just handles how these values are to be returned–whether they are to be
registered, or held at zero when nothing is requested, or both.&lt;/p&gt;

&lt;p&gt;Once the addresses have been decoded to determine which slave is requested,
the next step is to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitrate&lt;/a&gt;
among potentially multiple masters all wanting access to the same slave.
For my implementations, I chose to do
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
on a priority basis.  In other words, if a
master &lt;code class=&quot;highlighter-rouge&quot;&gt;N2&lt;/code&gt; requests a slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, the request will not be granted if some
other higher priority master, we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;N1&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;N1 &amp;lt; N2&lt;/code&gt;, has also
requested the same slave at the same time.  The array of &lt;code class=&quot;highlighter-rouge&quot;&gt;requested&lt;/code&gt; values,
defined below, captures this idea.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;requested[N][M]&lt;/code&gt; is true, then some
other master with a higher priority than master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has requested access to
slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// For each slave
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// This slave has been requested if a prior
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// master has requested it
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// This includes any master before the last one
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// As well as if the last master has requested
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// this slave.  Only count this request, though,
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// if this master could act upon it.
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that I cross-checked the request against those masters that could
properly respond to it.  That way if a master &lt;code class=&quot;highlighter-rouge&quot;&gt;N1&lt;/code&gt; requests slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M1&lt;/code&gt;,
but hasn’t yet finished getting the responses from slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M2&lt;/code&gt; that it is
already connected to (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N1]&lt;/code&gt; is clear), then a lower priority
master such as &lt;code class=&quot;highlighter-rouge&quot;&gt;N2&lt;/code&gt; will not be prohibited from connecting to &lt;code class=&quot;highlighter-rouge&quot;&gt;M1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have our address decoding and basic book-keeping out of the way,
we can look into what the actual
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
requires.  In this design,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
is done on a master by master basis using a variety of different
variables, some of which I’ve already highlighted and defined above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Arbitrate among masters to determine who gets to access a given
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// channel
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARBITRATE_REQUESTS&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// This is done using a couple of variables.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// request[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is true if master N is requesting to access slave
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	M.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// requested[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if some other master, prior to N, has requested
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	channel M.  This creates a basic priority arbiter,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	such that lower numbered masters get access before
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	a greater numbered master
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// grant[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if a grant has been made for master N to access
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	slave channel M
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// mgrant[N]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if master N has been granted access to some slave
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	channel, any channel.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// mindex[N]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is the number of the slave channel that master
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	N has been given access to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sgrant[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if there exists some master, N, that has been
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 	granted access to this slave, hence grant[N][M] must
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	also be true
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sindex[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is the index of the master that has access to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	slave M, assuming sgrant[M].  Hence, if sgrant[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	then grant[sindex[M]][M] must be true
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before assigning any slaves to a given master, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
needs to know whether any current connection needs to remain connected and
unchanged.  In other words, if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has already been granted
access to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, has master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; finished its business with that slave?
For that, we’ll check if this master is making additional requests of
the same slave that it has already been assigned to.  In the simple check below,
we check every master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and every slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;.  If a grant has already been
made between master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, and a new transaction request from
that same master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is being made to the same slave slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, then we want
to maintain this connection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s only the first reason why we might wish to stay on the channel and
maintain a given grant.  The other reason why we’d want to maintain a given
grant is if we are still expecting returns from it.&lt;/p&gt;

&lt;p&gt;Handling this requires counting the number of transactions that have been
issued, minus the number of acknowledgments that have been returned.  A
variable &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N]&lt;/code&gt;, set from the master’s perspective, contains whether
this count is zero or not.  Hence if this master has never been granted
access to a slave, or if a grant has been made but we’re still waiting
for responses, then we need to &lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to determine if the requested channel is even available.
In this case, if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is requesting channel &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, that is if
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[N][iM]&lt;/code&gt; is true, and no other master has currently been granted access
to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt; is false, and no other (prior) masters
are also requesting this channel, indicated when &lt;code class=&quot;highlighter-rouge&quot;&gt;requested[N][iM]&lt;/code&gt; is low,
then this channel is available for reassignment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgrant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// The bus error channel is always available
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all of this background work, we are now ready to make a channel grant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll only ever adjust any grant given to a particular master if that master
doesn’t need to &lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;.  In that case, the master can be granted
access to any channel that is available, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;requested_channel_is_available&lt;/code&gt;
is true.  Finally, if the master is attempting to make a request of another
channel, then we’ll release the channel grant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Master is requesting access to another
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// slave, one that isn&#39;t yet available.
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// Release the grant so another master
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// can use it.
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The new variable introduced here, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[N]&lt;/code&gt;, is simply the strobe signal
output coming from the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
shown in Fig. 12.&lt;/p&gt;

&lt;p&gt;Since we’ve assigned slave number &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; to reference the “no slave at that
address” channel, this simple logic above handles that grant as well.&lt;/p&gt;

&lt;p&gt;I should also point out, getting this right took several iterations, and a
bit of learning along the way.  Earlier versions of this logic, such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/c9821fe23abf19a077afe56a9ad61942ab599c4f/rtl/wbxbar.v#L260-L306&quot;&gt;this
one for example&lt;/a&gt;,
were horrendous to follow and/or maintain.  Getting the design to be
properly simple–that’s taken some work.&lt;/p&gt;

&lt;p&gt;From here on out, the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;’s
work is book-keeping.&lt;/p&gt;

&lt;p&gt;Well, not quite.  Did you notice how many clocks were required for that
processing?  One.  We calculated quite a few pieces of logic from &lt;code class=&quot;highlighter-rouge&quot;&gt;requested&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;requested_channel_is_available&lt;/code&gt;, all the way to
&lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant&lt;/code&gt; all on the same clock cycle.  Did  you catch that?
That’s a &lt;em&gt;lot&lt;/em&gt; of processing for a single clock.  As a result, the more
slaves and the more masters get connected to this
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;,
the slower it will become.  To keep this from ballooning out of control, both
the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
and the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
have configuration options to add clock cycles in order to break up the
any paths leading into to this critical path.&lt;/p&gt;

&lt;p&gt;There’s also a big difference at this point between
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
has separate channels for write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
and write data.
According to the specification, the data in these channels may arrive at any
time and in any order.  The write data, for example, might arrive first
and then the write &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
or vice versa.  However, the data cannot be routed to the correct slave until
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; is known and has
been properly decoded.  Therefore the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
must stall the write data channel, should it arrive at the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; early, until the write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
is provided, decoded, and a grant is given.  Once a grant has been provided,
it must remain active until all of the write data associated with that grant
has been accepted.  With
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;,
that means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
must wait until the &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; signal has been received before
any write grants referencing this master-slave combination may change.  With
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;,
that also means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
must wait until the write data channel has caught up to the write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
channel before adjusting any write grants.&lt;/p&gt;

&lt;h2 id=&quot;setting-the-slave-outputs&quot;&gt;Setting the slave outputs&lt;/h2&gt;

&lt;p&gt;At this point, all the difficult processing has been done.  All that remains
is to reap the rewards from this hard work.&lt;/p&gt;

&lt;p&gt;For example, we can now set our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
outputs to drive the various slaves.  To do this, we’ll loop through
every slave channel, and adjust the associated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
information any time the channel isn’t stalled.  Further, we’ll use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[N]&lt;/code&gt;, the slave’s index array indicating which master is associated
with this slave, to set these values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Values can change any time the slave isn&#39;t stalled
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_swe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_saddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_sdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_ssel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These particular values, however, are the easy ones: they aren’t the control
signal values, but rather the values that are qualified by the control signal
values themselves.  As a result, if the valid signal (&lt;code class=&quot;highlighter-rouge&quot;&gt;o_sstb[M]&lt;/code&gt; for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; for
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;)
is low, these become don’t care values.&lt;/p&gt;

&lt;p&gt;The control signals are a touch more complicated.&lt;/p&gt;

&lt;p&gt;First, in order to support a bus abort capability, we abort any transaction
following either a reset or a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
return from the slave.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step of implementing the bus abort is to drop the slave’s
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
cycle line any time the master drops his.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if we aren’t aborting a transaction and a grant has been made then
we must be in the middle of a valid transaction.  The slave’s cycle line
needs to be set to reflect that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The strobe signal is more complicated.&lt;/p&gt;

&lt;p&gt;As you may remember, the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
strobe signal indicates a transaction request, whether for read or write, and
that it is roughly analogous to the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;)
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; signals.  The first rule of any request is that the request cannot
change as long as another one is outstanding.  For this reason, we wrap the
control logic so that any time &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sstb[M] &amp;amp;&amp;amp; s_stall[M]&lt;/code&gt;, that is any time
the slaves strobe and stall signals are both high, nothing gets changed.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;(!o_sstb[M] || !s_stall[M])&lt;/code&gt; just reflects the opposite using
&lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&quot;&gt;De Morgan’s laws&lt;/a&gt;, such
that &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
values may legitimately be changed without dropping any requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was the easy part.&lt;/p&gt;

&lt;p&gt;The difficult part about the strobe signal is that we can’t just set it to
the master’s strobe input, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[sindex[M]]&lt;/code&gt;.  We have to first check that
the master is still requesting this particular slave, such that
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[sindex[M]][M]&lt;/code&gt; is still true.  Remember, one of the bugs we are hoping
to fix by creating this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
is associated with a master accessing a second
slave before the first has had a chance to respond.  In this case, we can
check both by simply checking &lt;code class=&quot;highlighter-rouge&quot;&gt;request[sindex[M]][M]&lt;/code&gt; since the request
signal will never be high unless &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[sindex[M]]&lt;/code&gt; is also high.&lt;/p&gt;

&lt;p&gt;The unusual requirement is that we also need to check that the channel isn’t
already too full.  Remember the comment about using counters to count
transactions, and the requirement that the counters cannot overflow?  If the
counter is about to overflow, then the channel is full.  We can’t issue
another transaction in that case, but rather need to wait for some returns
to come back first.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;					&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if there’s been no grant to this slave at all, then both cycle line
and strobe line’s can be cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve now decoded the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;,
and connected the slave to the master requesting
a connection.  We’ve even sent the details of the request to the slave.  What
we haven’t done is return any of the details from the slave back to the master.
That’s the next step.&lt;/p&gt;

&lt;h2 id=&quot;returning-values-to-the-master&quot;&gt;Returning values to the master&lt;/h2&gt;

&lt;p&gt;There are two types of values that need to be returned to the master.  The
first is are the acknowledgments and data returned from the slave.  With
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
these are easy.  We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[]&lt;/code&gt; as a pointer to just
copy the slave’s return values to the master.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_mdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The stall signal is a bit more involved, just because there are more reasons
why we might stall.  We default the stall signal to one, then allow it to be
cleared &lt;em&gt;if&lt;/em&gt; the we have an active grant to a given slave, &lt;em&gt;and&lt;/em&gt; a request to
that slave, &lt;em&gt;and&lt;/em&gt; if that slave isn’t also stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;// Possibly lower the stall signal
&lt;/span&gt;					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
					    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if the channel is full–that is if our counter is near rolling over,
then we need to stall this channel as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As with many things, there are exceptions.&lt;/p&gt;

&lt;p&gt;For example, if the master has requested a non-existent
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;, or if
the transaction has timed out, then we need clear the stall line, accept
a transaction, and return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, this timeout signal only works because of the bus &lt;em&gt;abort&lt;/em&gt; capability
implemented within the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB standard&lt;/a&gt;
I use.  It doesn’t work on the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Finally, if the master drops his cycle line, aborting any ongoing transactions,
then we need to make certain that nothing more gets returned.  Any ongoing
transactions will be left in an undetermined state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use this bus abort capability primarily for two reasons.  First, following
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the master will naturally want to abort any ongoing transactions.  This
implementation was chosen from the perspective of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
If a software program receives a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; doesn’t really
care what other transactions might succeed or fail–the software program has
already failed.  This simplifies the cleanup.  The same is true of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;:
following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the correct answer is to abort any efforts at further transactions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
however, doesn’t have a way of signaling a bus abort condition, nor does
it have a way of implementing one: every transaction request &lt;em&gt;must&lt;/em&gt; receive a
response.  This includes burst read responses as well–the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
bus is still required to return every beat of a burst read response even if all
of them will indicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;This lack of a bus abort makes implementing a timeout difficult.  Imagine, if
you will, that the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
detects a broken channel.  Perhaps the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave&lt;/a&gt;
has failed to return a response, or perhaps that response is to an
ID for which nothing is pending, or perhaps it sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;xLAST&lt;/code&gt; flag too early,
either way, there’s no way to recover since there’s no way to indicate to the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave&lt;/a&gt; that the master
wishes to discard anything it might still wish to respond to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; doesn’t have that
problem since all the master needs to do is to deassert the cycle line
for the slave to know to reset any transactions in progress.&lt;/p&gt;

&lt;p&gt;The way to handle this properly is to assign a timeout counter to every
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; burst.  Then, if the
slave fails to respond or responds inappropriately, &lt;em&gt;every response following&lt;/em&gt;
is to be held as an error.  This is how my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt;
worked initially.  The reason for this approach is simply that there’s no way
to know if a response, following an error of some type, is to be treated as a
valid response or a continuation of the fault.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that there’s no way to recover.&lt;/p&gt;

&lt;p&gt;This is why I went back and updated the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt;
to add to it the ability to reset the entire (broken) downstream core, using
the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; signal.  Once the downstream slave then comes back from
the reset condition, it is reattached to the bus.  Until that time, as long
as it is either in the fault condition or in the reset condition, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI
bus fault
isolator&lt;/a&gt;
simply returns &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s for every transaction
request.&lt;/p&gt;

&lt;h2 id=&quot;composing-slave-and-master-properties&quot;&gt;Composing slave and master properties&lt;/h2&gt;

&lt;p&gt;The last step of the &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
design process was to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; that the design
worked, or equivalently to verify that it still worked following any changes.
Changes?  Yes, I made a lot of changes along the way, especially as I learned
more and more about how to do this.&lt;/p&gt;

&lt;p&gt;The first and easy step in this process was to connect a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
bus property file to every connection coming in or going out of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;,
as shown in Fig. 13.  We’ve already discussed this property file for both
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; and
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; on the blog.
In general, having such a file makes it really easy to verify that a given
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component obeys the rules of the road.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 13.  Bus property files are connected to each of the input and output buses&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/composing-bus-properties.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The difficult part of this task is
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.  In
order to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
the internal state variables of each formal property file need to be
related to the registers within the design, and to the state variables found
in each of the other formal property files.&lt;/p&gt;

&lt;p&gt;For example, consider the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; bus.
The &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal property file&lt;/a&gt;
maintains a counter of outstanding transactions in order to be able to make
certain that 1) every request gets a response, and 2) that no responses are
issued without a prior request.  These counters need to be matched.  For
example, suppose master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is connected to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, so that &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N][M]&lt;/code&gt;
is true.  In that case, the number of outstanding transactions from the
perspective of the master must be matched to the outstanding transactions
counter within the slave.&lt;/p&gt;

&lt;p&gt;This isn’t as trivial as it sounds.&lt;/p&gt;

&lt;p&gt;Transactions issued by the master might be waiting in the decoder.  Similarly,
transactions in any
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
need to be counted.  In the end, you need to have an assertion that
one value, based upon the master’s transaction counter, equals a similar
value based upon the slave’s transaction counter.&lt;/p&gt;

&lt;p&gt;Let’s see if we can make any sense of how this is done.  Within
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;this design&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_moutstanding[N]&lt;/code&gt; is the counter containing the number of outstanding
transactions from the perspective of the master, and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_soutstanding[M]&lt;/code&gt;
contains the same counter from the perspective of the slave.&lt;/p&gt;

&lt;p&gt;The check itself is done across all masters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_OUTSTANDING&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step is to make certain that the master’s transaction count includes
at least enough to keep our arithmetic from overflowing.  This means that
if there’s a valid transaction coming out of the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;decoder&lt;/a&gt;,
and if the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;decoder&lt;/a&gt;
outputs were registered, then it must be accounted for in the master’s count.
Similarly, if the return response is being buffered, then there must be
a value in the master’s counter accounting for the valid value in that
buffer as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_moutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_BUFFER_DECODER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_DBLBUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now subtract these two values from the master’s counter to create
a new value, &lt;code class=&quot;highlighter-rouge&quot;&gt;n_outstanding&lt;/code&gt;, containing the number of transactions that have
been sent to the slave.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;n_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_moutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_BUFFER_DECODER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_DBLBUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step is to match this count to the slave’s count.  So, we’ll
loop through all possible slave connections.  For any bus master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
connected to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, this number of outstanding transactions is required
to match the number of outstanding slave transactions.  Well, almost.  The
slave hasn’t yet counted any transaction it hasn’t yet accepted.  It might
also be that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_scyc[iM]&lt;/code&gt; (the slave’s cycle line) is low, or an error
received and so the slave has aborted its transaction but the master hasn’t
yet aborted it, etc., etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_serr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_outstanding&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_soutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key here is that this assertion &lt;em&gt;must be an assertion of equality&lt;/em&gt;.
If the two counters are not related to each other &lt;em&gt;exactly&lt;/em&gt;, the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine is guaranteed to fail.  (I should know–I keep trying to use inequalities
for this check, and then getting corrected by the solver.)&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
this check is just a touch more involved.  Unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
there’s no bus abort.  Unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; which has only
the one counter, 
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; requires
counters for the number of outstanding read transactions, write address
and write data transactions.
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt; has even more state
to track, in order to make certain that the number of transactions with a
given ID, and the number of beats per burst, all match the data within the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;’s internal registers.&lt;/p&gt;

&lt;h2 id=&quot;crossbar-options&quot;&gt;Crossbar Options&lt;/h2&gt;

&lt;p&gt;One of the annoying realities of these separate
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s
is the options
they can be configured with.  Sure, there’s the easy options: the number of
masters, &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt;, and the number of slaves, &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;, are both configurable.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; ranges
of the various slaves are configurable as well.  Further, as you’ve gathered
from above, the size of the counters used to determine how many transactions
are outstanding is also adjustable.  The size of this counter is controlled
by the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;LGMAXBURST&lt;/code&gt;.  After that, though, I started to get greedy.&lt;/p&gt;

&lt;p&gt;The first option I created was the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; option.  This option is
common to all three of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.  The jury is still
out regarding whether this is useful or not (I haven’t measured it), however
many bus lines can travel long distances on a chip.  If the lines can be held
at zero any time they are not in use, that is any time &lt;code class=&quot;highlighter-rouge&quot;&gt;cyc&lt;/code&gt; is zero for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; is zero
for &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;, then no energy
needs to be spent to charge those
lines.  This comes at the cost of extra required logic, but I still think it
might help lower the overall power required.  I’m looking forward to measuring
if this has any effect.&lt;/p&gt;

&lt;p&gt;For the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB
crossbar&lt;/a&gt;,
there’s also an option to register the return values from the
slave, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DBLBUFFER&lt;/code&gt;.  There’s also the option of setting a timeout,
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_TIMEOUT&lt;/code&gt;, so that any return
that doesn’t come back in time for the timeout can be turned into an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
and a subsequent bus abort.  Here, I got greedy again.  I added an additional
register to control whether or not a request should timeout &lt;em&gt;before&lt;/em&gt; it even
gets to the slave.  This I call a starvation timeout, and its an indication
that a particular master isn’t getting access to the slave fast enough.
Perhaps another master is hogging the slave.  Perhaps it’s a well used slave
and this master doesn’t have enough of a priority.  Either way, with the
starvation timeout parameter set, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_STARVATION_TIMEOUT=1&#39;b1&lt;/code&gt;, each master
will be guaranteed a return in a fixed and known number of time-steps.&lt;/p&gt;

&lt;p&gt;If only I could do that with
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.
Although I haven’t done that with the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite
crossbar&lt;/a&gt;,
that might be easy enough to be doable still.&lt;/p&gt;

&lt;p&gt;One of the parameters the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; share that the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;
doesn’t have is a linger option, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LINGER&lt;/code&gt;.  The idea behind this option is
that if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has just finished talking to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, then that connection
is likely to be needed again in the near future.  Once the channel becomes
idle, therefore, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
will wait &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LINGER&lt;/code&gt; clocks before removing the grant.  If master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; wants
to talk to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; again, the grant is already there waiting for him and
he won’t have to wait for it.  Of course, it will
only linger if no other master wants access to this particular slave.  This is
therefore a useful, though optional, configuration parameter which might
impact performance.&lt;/p&gt;

&lt;p&gt;Of course, the sad reality of any of these options is that the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; really needs to be
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified&lt;/a&gt;
for every possible parameter setting.  Hence verifying the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;
requires 48 proofs (36 assertion based, 12 cover based), whereas the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;
requires 12 proofs (6 assertion based, 6 cover based).  The full
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI crossbar&lt;/a&gt;,
as currently configured, requires 8 assertion based proofs.  This is really
incomplete, since it doesn’t (yet) have a set of cover-based proofs
to show that not only will it not violate any properties, but that it can
actually properly complete transactions in the first place.  For now, though,
you can just consider this last piece a work in progress–even though I’ve
done enough testing with various &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; checks to be confident that
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt;,
would work.&lt;/p&gt;

&lt;h2 id=&quot;xilinxs-interconnect&quot;&gt;Xilinx’s Interconnect&lt;/h2&gt;

&lt;p&gt;Once I had formally verified my own
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;, I became curious
about how hard it might be to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s AXI
interconnect&lt;/a&gt;.
If you check out Vivado’s IP Catalog, you’ll find an entry for a
&lt;code class=&quot;highlighter-rouge&quot;&gt;AXI interconnect RTL&lt;/code&gt; which, when instantiated, will create a Verilog copy
of their &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;their
interconnect&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Xilinx offers an interconnect in their IP catalog&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/xilinx-intercon-ip.png&quot; alt=&quot;&quot; width=&quot;781&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I spent some time looking through this (after I’d built &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my
own&lt;/a&gt;)
and I’ve learned a lot from it.&lt;/p&gt;

&lt;p&gt;First, they have two different types of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;
implemented.  The first type offers grants to slaves based upon read or write
requests.  This is different from my own grants above which are based upon
either write requests or read requests.  In other words, if you request
to read from a peripheral from this first type of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;, you’ll get a
write grant as well.  It’s not yet clear to me what will happen if you request
both read and write grants at the same time, though.  This particular
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; ignores the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt;
values when routing–much like &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my
own&lt;/a&gt;.  Not only
that, this version of Xilinx’s
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; might easily
mask the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt; bugs found
in their demonstration slave core.&lt;/p&gt;

&lt;p&gt;The other type of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
they support grants access to both read and write requests separately, and
uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt; field to route the returns back to the slave that requested
the transaction.  This was how I had always thought an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
interconnect&lt;/a&gt; would
be created–that is, until I tried building my own.  The reason why I don’t
route bus returns based upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;RID&lt;/code&gt; fields is simply because you’d
need another
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;–this
time for the return channel.  The first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
already costs a minimum of two clock cycles of latency.  This second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
would need to consume a similar amount of resources on the return.  Adding
four clocks to every transaction seems excessive.  So, while it’s doable,
I didn’t find it worth the performance cost.&lt;/p&gt;

&lt;p&gt;The other thing I found while browsing Xilinx’s
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; code, were a large
number of translators that could bridge from one bus type to another.  Their
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
it seems is capable of instantiating &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain
crossing&lt;/a&gt; bridges, bridging from
AXI3 to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; with one size
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt; values to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; with
another, and so on.  It’s quite configurable, although the small budget
hobbyist should beware: each of these translations costs resources within
your design.&lt;/p&gt;

&lt;p&gt;Of those bridges, the one that surprised me was the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; to
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; bridge.
Whereas &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; is a
very capable protocol, capable of high speed operation just as fast if not
faster than the full &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;
protocol, Xilinx’s bridge code crippled the
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; generated
transactions so that no more than one read or one write would ever be
outstanding at any given time.  The bridge also cost several clock cycles,
which is unusual since an
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; transaction can be
created from an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
transaction by &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;fixing and ignoring the unused
fields&lt;/a&gt;.
No matter how I looked it over, I couldn’t see any reason for building their
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; to
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; bridge in this
fashion.&lt;/p&gt;

&lt;p&gt;Perhaps this explains why the bugs in their
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
demonstration core have gone unnoticed for so long?&lt;/p&gt;

&lt;p&gt;The sad reality, however, of both of these observations is that some day
Xilinx will update &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;their
interconnect&lt;/a&gt;,
and all of a sudden a lot of &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
slaves&lt;/a&gt;, written based upon
their &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;demonstration code&lt;/a&gt;,
will start failing.&lt;/p&gt;

&lt;p&gt;I guess that means that if you haven’t started
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
your
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components, you should start doing so now.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Building your own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar interconnect&lt;/a&gt;
may be intense, but it is certainly possible to do.  I will say this, though,
I’m not sure I could’ve done it without the formal property files for either
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
or the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; protocols.&lt;/p&gt;

&lt;p&gt;I should also mention that the proofs themselves aren’t necessarily all that
fast to accomplish.  While the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools can often find bugs quickly, proving that there are no bugs can be much
harder.  As a result, my initial development on each of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbars&lt;/a&gt; was
pretty quick.  It then slowed down.  At one point, it took over 50 hours
to verify the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt; in one
of its configurations.  Creating submodules to contain the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s really helped,
dropping the maximum proof time down to 22 minutes.  Sure, it takes time, but
it’s quite doable.&lt;/p&gt;

&lt;p&gt;The biggest thing I haven’t discussed about full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar interconnects&lt;/a&gt;
is their logic cost.  That full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar&lt;/a&gt;
doesn’t come cheap, and certainly not for any sizable number of masters or
slaves.  Worse, the cost doesn’t scale linearly as the number of masters or
slaves increases.  Instead of opening that discussion now, let me simply invite
you to take any of the arbiters discussed here and to build it using
&lt;a href=&quot;&quot;&gt;Yosys&lt;/a&gt;
to see how much it will cost as you vary the parameters.&lt;/p&gt;

&lt;p&gt;Finally, I would still like to come back to this topic and walk through some
of my brand new &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
cores: the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;AXI to AXI-lite bridge&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;AXI-lite to AXI bridge&lt;/a&gt;, or perhaps even the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to AXI&lt;/a&gt;
bridge that I use to get high speed access to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt; memory.  These we’ll do
&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/6/3&quot;&gt;if the Lord permits&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Thus saith the LORD, Stand ye in the ways, and see, and ask for the old paths, where is the good way, and walk therein, and ye shall find rest for your souls. But they said, We will not walk therein.  (Jer 6:16)&lt;/em&gt;</description>
        <pubDate>Wed, 17 Jul 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/07/17/crossbar.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/07/17/crossbar.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Breaking all the rules to create an arbitrary clock signal</title>
        <description>&lt;p&gt;Have you ever needed a clock speed that wasn’t easy to generate?
What if you wanted to build and run your own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;?
Within an FPGA??&lt;/p&gt;

&lt;p&gt;As an example, many of my favorite FPGA boards have 100MHz clocks coming into
them.  What if you wanted to output an audio signal via
&lt;a href=&quot;https://en.wikipedia.org/wiki/I2S&quot;&gt;I2S&lt;/a&gt; at 48kHz?  48kHz is a common
audio sample rate associated with broadcast audio, sort of like
&lt;a href=&quot;https://en.wikipedia.org/wiki/44,100_Hz&quot;&gt;44.1kHz&lt;/a&gt; is associated with &lt;a href=&quot;https://en.wikipedia.org/wiki/Compact_Disc_Digital_Audio&quot;&gt;CD
audio&lt;/a&gt;.  I have an
&lt;a href=&quot;https://www.analog.com/media/en/technical-documentation/data-sheets/ADAU1761.pdf&quot;&gt;ADAU1761 24-bit Audio Codec&lt;/a&gt;
available to me on my &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video
board&lt;/a&gt;,
so I should be able to use it to generate quality sound.  This
chip, however, requires an incoming clock signal of 49.152MHz in order to
produce samples at 48kHz.  Any suggestions on how you might multiply a
100MHz signal up to somewhere between 800 and 1600 MHz, and then divide it
down in order to get 49.152MHz?&lt;/p&gt;

&lt;p&gt;There’s no way to do it.&lt;/p&gt;

&lt;p&gt;Worse, what if you had to create a clock that &lt;em&gt;tracked&lt;/em&gt; the audio sample rate
of an incoming signal–but only when it was present?&lt;/p&gt;

&lt;p&gt;As another example, I can use a &lt;a href=&quot;https://store.digilentinc.com/pmod-gps-gps-receiver&quot;&gt;PMod
GPS&lt;/a&gt; to measure the
clock rate of the board I’m using.  I should be possible to use this signal
to create a true 49.152MHz clock–true enough to be used as an audio frequency
standard.&lt;/p&gt;

&lt;p&gt;That’s audio, but what about video?  Another common example of when you might
need to create a clock at an arbitrary frequency would be when trying to
generate a &lt;a href=&quot;http://monitorinsider.com/cable_bandwidth.html&quot;&gt;pixel clock for
video&lt;/a&gt;.  With modern monitors,
the video driver is expected to query what video modes the monitor is capable
of accepting via an &lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID
protocol&lt;/a&gt;
transaction (a form of &lt;a href=&quot;https://www.i2c-bus.org&quot;&gt;I2C bus&lt;/a&gt;.  The video driver
is then expected to generate a pixel clock based upon what the monitor is
capable of receiving.  Without external clock generation hardware, how
can you create an arbitrary pixel clock?&lt;/p&gt;

&lt;p&gt;Yes, I know you can often get away with being “close enough” in many of these
examples.  For example, if you wanted to feed a monitor wanting a 25.172MHz
pixel clock you might still be able to drive it with a 25MHz pixel clock
instead.  (I’ve done it.)  But what about 88.75MHz?  How might you generate
that signal?&lt;/p&gt;

&lt;p&gt;Given that there’s a reason to need something like this, let’s discuss today
how you might generate a clock at an arbitrary frequency when using an FPGA.&lt;/p&gt;

&lt;h2 id=&quot;breaking-all-the-rules&quot;&gt;Breaking all the rules&lt;/h2&gt;

&lt;p&gt;In order to generate a clock at an arbitrary rate, we’re going to need to
&lt;em&gt;break all of the rules&lt;/em&gt;.  Specifically, I wrote in my &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;rules for new FPGA
designers&lt;/a&gt;:
&lt;em&gt;never use a logic generated clock&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Build your design with only one clock.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; transition on the positive (rising) edge of anything other than
your system clock.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I discourage anyone from using a logic generated clock for a few basic reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Logic generated clocks tend not to be placed onto the system clock backbone&lt;/p&gt;

    &lt;p&gt;This will cause significant skew in your clock from one end of the chip to
another.  This skew can easily be bad enough to make your design fail for
seemingly inexplicable reasons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Beginners tend not to realize that you still need to use a proper &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock
domain crossing&lt;/a&gt; from the
clock domain that generated the clock and the generated clock domain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most FPGA tool chains don’t know how to handle logic clocks, assuming that
they are recognized at all.&lt;/p&gt;

    &lt;p&gt;This leads to logic that isn’t properly constrained to guarantee operation
at the clock rate of interest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your clock isn’t generated via a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;,
there might be glitches on it&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My rule has always been: Clocks should only ever be created or adjusted within
an FPGA using a hardware device clock management resource, such as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, we’re going to break this rule.&lt;/p&gt;

&lt;p&gt;We also want to break it “safely”, so that this step won’t keep our logic
from acting “normally”.&lt;/p&gt;

&lt;p&gt;To do this, I built and experimented with the architecture shown in Fig. 1
below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Arbitrary clock generation, hardware setup&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/genclk/blockdiag-basic.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s walk through the steps of how this might work.&lt;/p&gt;

&lt;p&gt;The first step is to generate a new clock.  I used a &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;basic fractional clock
divider&lt;/a&gt;
for this purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite, but that’s the basics of the ideal initially.  We’ll come
back and improve upon this in a moment.&lt;/p&gt;

&lt;p&gt;There are several problems with using a &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;basic fractional clock divider
divider&lt;/a&gt;
such as this
one.  One of the worst problems is the phase noise.  Imagine you wanted to
divide your clock by three.  You would add to your counter some number on
every clock tick in an effort to get a divide by three.  If your clock
was &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits wide, then clearly after &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N&lt;/code&gt; clock ticks, this pseudo clock
generator would have wrapped some integer number of times.  If we make this
integer close to &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N/3&lt;/code&gt;, we can get close to a division by three.&lt;/p&gt;

&lt;p&gt;Perhaps a picture would help.  Suppose we used a &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; bit counter, to which
we add a delay value of &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; to it–in order to get close to 1/3, while also
picking off the top bit for our new clock.  If you plotted this out, you might
see a trace similar to Fig. 2 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. A Fractionally Generated Clock Signal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/genclk/trace.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you ignore the fact, for a moment, that this may be about the ugliest clock
signal you’ve ever seen, you’ll notice that this clock signal is high for
five periods out of 16, which is a rough divide by three.&lt;/p&gt;

&lt;p&gt;If we add more bits to our counter and step, we’ll be able to represent more
frequencies For example, if we had used a &lt;code class=&quot;highlighter-rouge&quot;&gt;32&lt;/code&gt;-bit counter, we might step
by &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h55555555&lt;/code&gt;.  No, that’s still not quite &lt;code class=&quot;highlighter-rouge&quot;&gt;1/3&lt;/code&gt;rd, but its much closer
than we were before.&lt;/p&gt;

&lt;p&gt;While that’s better, the clock still looks awful–it just looks awful about
a frequency closer to the one we want.&lt;/p&gt;

&lt;p&gt;We need a way to clean this up.&lt;/p&gt;

&lt;p&gt;Enter the reason for using an &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDES&lt;/code&gt; in Fig. 1.  By using an &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDES&lt;/code&gt;, we
can get closer to the clean clock we wanted.  For example, the same clock from
Fig. 2 above, now upsampled by a factor of 8, would produce a waveform looking
closer to Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Upsampling the fractionally generated clock&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/genclk/hires-trace.png&quot;&gt;&lt;img src=&quot;/img/genclk/hires-trace.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That is starting to look like a clock signal.&lt;/p&gt;

&lt;p&gt;Of course, we’ll still have jitter on even this upsampled clock signal.  While
our upsampling helped, it could only do so much.  We’ll always have a signal
that’s going to be within a “sample” of the right value.  This rounding to the
nearest sample will always create phase noise on our clock.  Fixing this is
the purpose of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
in Fig. 1 above.&lt;/p&gt;

&lt;p&gt;That leaves only a couple of key details remaining.&lt;/p&gt;

&lt;p&gt;For example, why did we leave the FPGA on a clock capable pin only to
immediately come back in again?  I did this for a couple
of reasons.  First, we needed the OSERDES, that 8:1 serializer, in order
to create the cleaner clock signal.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDES&lt;/code&gt; components are only
found connected to the I/O pins going directly off-chip.  Second, many FPGA’s
require that you must enter the chip from a clock-capable pin in order to get
into the clock infrastructure within the FPGA.  Doing otherwise will result
in a design error on many architectures.&lt;/p&gt;

&lt;p&gt;The last question is, what clock rate do we tell the tools this input has since
we can vary it as often as we want?  For this, we’ll use the maximum clock
rate it can have.  I’ll leave the decision of what this maximum rate is to you.
I’ve used 200MHz, 100MHz, and 50MHz successfully.&lt;/p&gt;

&lt;p&gt;Finally, let’s return to our reasons never to use a logic generated clock.
Have we dealt with all of the reasons “why not” so that we now can?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Logic generated clocks tend not to be placed onto the system clock backbone&lt;/p&gt;

    &lt;p&gt;By starting with a clock capable pin, we go directly into the clock
infrastructure on the chip.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Beginners tend not to realize that you still need to use a proper &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock
domain crossing&lt;/a&gt; from the
clock domain that generated the clock and the generated clock domain.&lt;/p&gt;

    &lt;p&gt;We’ll be smart and use proper
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt;
techniques, right?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most FPGA tool chains don’t know how to handle logic generated clocks&lt;/p&gt;

    &lt;p&gt;In this case, the tools will treat this as an externally generated clock,
at the maximum rate it can produce, so we’re good here too.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your clock isn’t generated via a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;,
there might be glitches on it&lt;/p&gt;

    &lt;p&gt;We’ve solved this by generating our clock using (several)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s,
and the OSERDES helps as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Really, the only issue left is whether or not this clock will be “clean enough”.
For that, we’ll need to build it and test it.&lt;/p&gt;

&lt;h2 id=&quot;building-the-81-fractional-divider&quot;&gt;Building the 8:1 Fractional Divider&lt;/h2&gt;

&lt;p&gt;Building this divider is &lt;em&gt;really&lt;/em&gt; easy.  It’s basically,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that each of these counters is created by adding an offset to a single
counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;counter[0]&lt;/code&gt;.  That keeps them all synchronized with each other.&lt;/p&gt;

&lt;p&gt;Finally, the MSB from each counter is used as the outgoing clock signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s really not much more to it than that.  We’ll still do a walk through
the actual code below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;genclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// The bus width
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Upsample factor
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the things we haven’t discussed is how you might synchronize this clock
with operations carried out on the current clock.  For this, I’ve envisioned
using a strobe signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_stb&lt;/code&gt; shown below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;o_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how I would normally handle generating an internal signal at a different
rate–something I could use without ever needing a
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While there will be a fairly uncontrolled delay between &lt;code class=&quot;highlighter-rouge&quot;&gt;o_stb&lt;/code&gt; and the
outgoing clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_stb&lt;/code&gt; will at least maintain the proper clock to clock
relationship.&lt;/p&gt;

&lt;p&gt;Coming back to the basic implementation above, perhaps you’ve noticed that
the big problem with this implementation is the requirement for the
multipliers.  Let’s see if we can get rid of them.  Multiplication by 1, 2,
4, and 8 is easy–they can be accomplished with a simple left shift.  What about
multiplication by &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt;?  Those will be harder.  Six is easy, though,
if we can already multiply by three.&lt;/p&gt;

&lt;p&gt;In this case, we’ll cheat since all of these values can be created with
some creative addition–sparing us the multiply.&lt;/p&gt;

&lt;p&gt;Multiplying &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; times three, for example, is just a matter of adding it
to itself times two.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;times_three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Multiplying &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; times five is the same as adding it to a copy of itself
times four.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;times_five&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For seven, we can subtract &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; times eight.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;times_seven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, it will take a clock in order for these values to be valid.  To
keep things consistent, let’s also delay &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; by one clock tick as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest is just book keeping.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Times one
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Times two
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times three
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_three&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times four
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times five
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_five&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_seven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times eight---and generating the next clk wrd
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our final result is just the collection of all of the most-significant bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// High order bit is &quot;first&quot;
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// First bit
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Last bit in order
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How wide should &lt;code class=&quot;highlighter-rouge&quot;&gt;BW&lt;/code&gt; be?  I’ve chosen to make it 32-bits wide.  Why?  Well,
because my Wishbone bus implementation is 32-bits wide.  It’s kind of an
arbitrary choice.  You’ll get more frequency accuracy (relative to the
system clock) the more bits you have, although I tend to think &lt;code class=&quot;highlighter-rouge&quot;&gt;32&lt;/code&gt; bits
is enough.  With a 32-bit counter, you can
generate an arbitrary clock with frequency control in steps of
&lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_CLOCK_FREQUENCY / 2^32&lt;/code&gt;, or about &lt;code class=&quot;highlighter-rouge&quot;&gt;23 mHz&lt;/code&gt; for a system clock of 100MHz.
(Yes, that is &lt;em&gt;milli&lt;/em&gt;Hertz!) I figure that’s good enough.&lt;/p&gt;

&lt;h2 id=&quot;xilinx-specific-io&quot;&gt;Xilinx Specific I/O&lt;/h2&gt;

&lt;p&gt;In general, I try to keep this blog hardware agnostic, while just discussing
Verilog design and verification.  This particular design, however, needs some
help from the hardware, so let’s take a look at how we might handle the
I/O architecture for a Xilinx 7-series device.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/zipcpu/2017/10/06/autofpga-dataword.html&quot;&gt;first rule is to separate anything that is vendor specific into its
own section of the
design&lt;/a&gt;.
This will allow us to keep using
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
on the rest of the design.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;xgenclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hsclk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;USE_PLL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_hsclk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;inout&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ignored_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;slave_to_master&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pll_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high_z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;USE_PLL&lt;/code&gt; parameter above.  Since this clock generator can generate
anything up to the system clock rate in sub Hz resolution, it can generate
clocks so slow that Xilinx’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;s
can’t lock
onto them.  For this reason, I have a flag to select whether or not to use a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
or not.  I suppose it’s not strictly necessary, but there will be a bit
of jitter on the resulting clock.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt; itself is something of a black box, present only on Xilinx
7-series parts.  If you are working on another part, check your documentation.
You’re likely to find other &lt;code class=&quot;highlighter-rouge&quot;&gt;SERDES&lt;/code&gt; capabilities on other FPGAs, although 
they are likely to go by different names and have different interfaces.
Most of the setup below is fairly boiler plate.  (You’ll find other &lt;code class=&quot;highlighter-rouge&quot;&gt;SERDES&lt;/code&gt;
capabilities on other FPGAs.) Even so, it’s possible to get it wrong.  Perhaps
you remember when &lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;I was struggling to get this design to
work&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Sadly, the only way I know how to debug output primitives like this &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt;
is to read the fine manual, use an oscilloscope, read the manual again, fiddle
with the setup, check the oscilloscope, read the manual some more, and finally
fiddle with the setup until it works.  There is one other way that I know of,
and that is to find an online example (such as this one) and to compare it
to your design to see what you might be missing.&lt;/p&gt;

&lt;p&gt;So let’s look at how this is configured.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Verilator lint_off PINCONNECTEMPTY
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OSERDESE2&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first noteworthy item is that &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt; needs to be set up for &lt;code class=&quot;highlighter-rouge&quot;&gt;DDR&lt;/code&gt;
output mode.  While we might use &lt;code class=&quot;highlighter-rouge&quot;&gt;SDR&lt;/code&gt; mode, we’d be limited to a high speed
clock of only &lt;code class=&quot;highlighter-rouge&quot;&gt;600MHz&lt;/code&gt;, whereas when using the &lt;code class=&quot;highlighter-rouge&quot;&gt;DDR&lt;/code&gt; mode you can go up to
&lt;code class=&quot;highlighter-rouge&quot;&gt;950MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also means that our high-speed clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_hsclk&lt;/code&gt;, need only be 4x the
speed of the our system clock.  Of course, the two clocks, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_hsclk&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;, must also be generated by the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;.
This creates a bit of a hassle
when working with Xilinx’s Memory Interface Generator (MIG) generated cores,
since they produce a system clock for you to use and applying any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
to this clock will require a
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt; to
move between the MIG clock and the newly generated one.  This is in spite of
the reality that the MIG uses an internally generated &lt;code class=&quot;highlighter-rouge&quot;&gt;4x&lt;/code&gt; clock that would
be perfect for our purposes here–it’s just not an output of the MIG core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_RATE_OQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DDR goes up to 950MHz, SDR only to 600
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_RATE_TQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERDES_MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MASTER&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRISTATE_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Really ... this is unused
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowserdes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TFB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hsclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// HS clock
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKDIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Divided clock input (lowspeed clock)
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Data path to IOB *only*
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISERDESE2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ODELAYE2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next big confusing question is over which bit gets transmitted first.  I’ll
admit, I got this wrong at first.  The fact that the Xilinx xSERDESE2
components swap which bit is first between them only makes things more
confusing.  I was able to generate the following ordering using an Oscilloscope.
In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;D1&lt;/code&gt; goes “first”, then &lt;code class=&quot;highlighter-rouge&quot;&gt;D2&lt;/code&gt;, etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TBYTEIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TBYTEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTIN1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTIN2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTOUT1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTOUT2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verilator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lint_on&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;PINCONNECTEMPTY&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes, many of these pins are not used.  I’ve kept these unused pins within my
own code more to remind myself of them than anything else.&lt;/p&gt;

&lt;p&gt;What about that &lt;code class=&quot;highlighter-rouge&quot;&gt;// Verilator lint_on  PINCONNECTEMPTY&lt;/code&gt; comment?  Yes, I have
tried to
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilate&lt;/a&gt;
this code.  No, I don’t have a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
model for an &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt;, but I was hoping to use
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;’s
linting capabilities to find bugs when things weren’t going well.&lt;/p&gt;

&lt;p&gt;The last item to notice of this &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt; configuration is that the output
is placed into a &lt;code class=&quot;highlighter-rouge&quot;&gt;w_pin&lt;/code&gt; wire.  This wire now needs to be placed through a
bi-directional I/O buffer, while holding the high-impedence flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;, low.
This makes certain that the output of this pin will always come back in on
the input.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;IOBUF&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;genclkio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we can use a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
clock resource to clean up any mess we’ve left behind.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USE_PLL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pll_fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_fb_unbuffered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Verilator lint_off  PINCONNECTEMPTY
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;PLLE2_BASE&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BANDWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LOW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBOUT_MULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 800 MHz
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBOUT_PHASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKIN1_PERIOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//  40 MHz
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT0_DIVIDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REF_JITTER1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Sim only parameter
&lt;/span&gt;				&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// .CLKOUT5_DIVIDE(1),
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKIN1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// .CLKIN1(io_pin),
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWRDWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Verilator lint_on  PINCONNECTEMPTY
&lt;/span&gt;	
		
		&lt;span class=&quot;n&quot;&gt;BUFG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pllbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Success for my experiments with this core was indicated when this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
locked.  I used that as a binary indicator that the quality of result was
“good enough”.&lt;/p&gt;

&lt;p&gt;Finally, if the clock frequency needs to be so low that we cannot use the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;,
then we’ll just place the I/O pin as in input directly into a clock buffer
and move on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BUFG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clkbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I might come back and update this core later to optionally remove the
&lt;code class=&quot;highlighter-rouge&quot;&gt;BUFG&lt;/code&gt; elements with a parameter setting.  These elements are important in
order to place your newly generated clock into the clock circuitry of the FPGA.
Without them, you should be able to skip the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
and instead go into a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
you configure external to this module.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;No, this design has never been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;.  Sorry.
Were I to run this through the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tools&lt;/a&gt;,
I’m sure I would discover the lack of a whole lot of initial statements–but
this will still work without those.  It will just have a bit of a glitch on
start-up.&lt;/p&gt;

&lt;p&gt;Instead, this design was verified using a &lt;a href=&quot;https://store.digilentinc.com/digital-discovery-portable-logic-analyzer-and-digital-pattern-generator&quot;&gt;Digital Discovery logic
analyzer&lt;/a&gt;,
a &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video board&lt;/a&gt;,
and a lot of patience.  Further, the “clock capable pin”
that I used was the output bit used to control the fan.
(My board has a heat sink and no no fan, so this pin is otherwise unused.)&lt;/p&gt;

&lt;p&gt;A better test might’ve measured the quality of this clock using dedicated
clock measurement hardware.  I haven’t done this.  I only know that I can
generate a clock within an FPGA and then run this same clock through a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
locks, and I can then use the new clock within my design.&lt;/p&gt;

&lt;p&gt;I personally draw two conclusions from this work:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes you need to use an oscilloscope.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes you can break all the rules–and still get away with it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Whoso keepeth the commandment shall feel no evil thing: and a wise man's heart discerneth both time and judgment. (Eccl 8:5)&lt;/em&gt;</description>
        <pubDate>Fri, 28 Jun 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/06/28/genclk.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/06/28/genclk.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Building the perfect AXI4 slave</title>
        <description>&lt;p&gt;I’ve now already shared the story of the contract I was on some time ago,
where &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;I failed to achieve the performance I promised because I placed too
many bus bridges&lt;/a&gt;
between the &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;ARM and the
FPGA&lt;/a&gt;
that shared the same die.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Too many bus transformations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-too-many-bridges.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The easy way around this problem would be to design an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI interface&lt;/a&gt;
to my data FIFO.  At the time of the project,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
was too complicated for me to understand.  I had tried to build an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
slave controller several times over, and failed every time.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Reading from a data FIFO&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-dsp2net.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I recently returned to the task, but this time using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.
My first step was to build a formal property file to describe an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;
interaction, similar to the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;one we built for AXI-lite
together&lt;/a&gt;.  I
learned several things along the way, too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;According to the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;,
“On master and slave interfaces there must be no combinatorial paths
between input and output signals.”&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Reading from a data FIFO&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/axi-spec-registered.png&quot; alt=&quot;&quot; width=&quot;614&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;If you aren’t &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;following me on twitter&lt;/a&gt;,
then &lt;a href=&quot;https://twitter.com/zipcpu/status/1130436872021434368&quot;&gt;you’ve missed the discussion regarding the meaning of this
sentence&lt;/a&gt;.
I have taken it to mean that all
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;
signals must be registered.  Others have
since pointed out that this reading is probably too strict.  Perhaps a better
reading is just that “combinatorial paths between input and output
signals” are disallowed.&lt;/p&gt;

    &lt;p&gt;Since I already started with the interpretation that all
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; signals must
be registered, I’ll stick with it here.  Indeed, registering all I/O’s is not
a bad thing as &lt;a href=&quot;https://twitter.com/elaforest&quot;&gt;Eric LaForest&lt;/a&gt;
of &lt;a href=&quot;http://fpgacpu.ca/gateforge/index.html&quot;&gt;GateForge Consulting&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/elaforest/status/1130667685984055296&quot;&gt;wrote&lt;/a&gt;,&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Although having a combinatorial path will work (I have seen it on some
Xilinx AXI IP), the resulting round-trip time on a ready/valid handshake
worsens designs: Shaving a cycle here is not worth the reduced Fmax and
harder P&amp;amp;R.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;So there are good reasons to do this, even if I was mistaken that the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification&lt;/a&gt; required it.&lt;/p&gt;

    &lt;p&gt;This is then unlike the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
designs I’ve done where the stall signal isn’t supposed to be registered.
This also means that it will be really hard to touch any
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; signal
without losing a clock due to delay.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also discovered the problem I had been suffering from: write transactions
don’t return one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; per element written, but rather one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;
response per &lt;em&gt;burst&lt;/em&gt; transaction.  In other words, for every
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt; or equivalently for every &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;
there should be one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.  I had thought, erroneously, that it was
supposed to be one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; per &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; behavior is very different from write-acknowledgments under
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
It’s also different from the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
read channel.  In the case of the read channel, there is one
&lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID &amp;amp; RREADY&lt;/code&gt; for every requested beat in any transaction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also discovered that in spite of all of
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s training material,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;their own example core can’t handle high
throughput&lt;/a&gt;: 1) reads take
a minimum of two clocks per beat of data, 2) the core will crash if multiple
subsequent requests are made, 3) it can’t handle any significant
back pressure, and 4) their core won’t handle reads and writes at the
same time.&lt;/p&gt;

    &lt;p&gt;This is crazy poor performance.&lt;/p&gt;

    &lt;p&gt;We’ll do better today.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also read several other blog articles about how to build
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slaves.
Most of these articles focus on building a state machine to handle one
transaction at a time.  While this kind of performance might be better
than &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s, designing an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slave from a
state-machine standpoint tends to introduce unnecessary stall
signals.  My application needed throughput.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I needed to do better.  I needed something that worked, and worked well.&lt;/p&gt;

&lt;p&gt;So let’s take a look today at &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;what I managed to come up
with&lt;/a&gt; and why.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demofull/demofull-design-goals.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I had four primary goals in this exercise.  The first was that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;my new AXI
slave core&lt;/a&gt;
needed to be &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
compliant.  Realistically, that should be a given.  However, we’ve already
discussed how even &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s example code wasn’t truly AXI
compliant&lt;/a&gt;,
so I needed something new.  My next goal was that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this new
core&lt;/a&gt;
had to have maximum throughput.  This second goal was so important to me that
my third and fourth goals were identical: I wanted throughput!&lt;/p&gt;

&lt;p&gt;High throughput!&lt;/p&gt;

&lt;p&gt;For me, high throughput means that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;the core&lt;/a&gt;
can handle one data beat per clock in both directions at the same time.
Further, I also wanted to make certain that this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;high
throughput core&lt;/a&gt;
would never stall any input requests unless it was already processing
a transaction on the same channel.&lt;/p&gt;

&lt;p&gt;Is it possible?&lt;/p&gt;

&lt;p&gt;Somewhere around the bottom of my page of goals, I actually had another
interface goal.  &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;My previous example/demonstration AXI-lite
core&lt;/a&gt; wasn’t very easy
to integrate into other parts of my design.  Instead, I wanted something that
was easier to integrate with other logic.  So, for this design, I wanted to use
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this AXI core&lt;/a&gt;
as a bridge to a simpler interface that would be kept in another file–the
one that actually had my logic within it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig. 4: Bridging to a Simpler Interface&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demofull/demofull-simple-interface.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That meant I needed an interface that looked like Fig. 4.&lt;/p&gt;

&lt;p&gt;This interface was designed to support a very simple slave that could
handle every bus transaction in a single clock cycle, but had no capability
of stalling.&lt;/p&gt;

&lt;p&gt;How does this simplify the logic of the downstream non-AXI slave?
Consider the simplest slave write logic I can think of,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and similarly for a read,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Could this get any simpler?&lt;/p&gt;

&lt;p&gt;Indeed, there’s a &lt;em&gt;large&lt;/em&gt; class of slaves that could handle an interface
like this.  Some examples include my &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD card
controller&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/wbpwmaudio&quot;&gt;PWM
audio controller&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO controller&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wbi2c&quot;&gt;I2C controller&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/spio.v&quot;&gt;button/switch
controller&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt controller&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;,
and much more.&lt;/p&gt;

&lt;p&gt;However, most buses include &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write
strobes&lt;/a&gt; as well and
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
is no different.  It would be a shame not to support them.  So we’ll add
support for the &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write
strobes&lt;/a&gt;
to our slave interface as well.  To support these, the slave will need to
update its logic to look something like the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not all slave devices support
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write strobes&lt;/a&gt;,
but we’ll leave that decision up to the downstream implementation and simply
include them here.&lt;/p&gt;

&lt;p&gt;Of course, the illustration above only demonstrates this interface applied to
a &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
In actuality, I’d would expect to drive a series of control register
and/or buffers instead of this example &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
RAM&lt;/a&gt;,
but that’s a discussion to be had whenever we build whatever interface we’ll
connect this to.&lt;/p&gt;

&lt;p&gt;What &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;
doesn’t support are stalls on the downstream interface, nor does it support
responses that take longer than a single cycle to determine.  Those extra
features would require &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
support within the channel, and that’s going to be part of a different
development, perhaps even an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; implementation.&lt;/p&gt;

&lt;p&gt;So how shall we design this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;high speed AXI slave
core&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;designing-the-waveform&quot;&gt;Designing the waveform&lt;/h2&gt;

&lt;p&gt;As &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;we’ve discussed before&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
consists of five channels implementing between
them both a write interface (3 channels) and a read interface.  Unlike
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
the logic for the two interfaces can be written and processed separately.
For now, we’ll start by looking at the read interface, just because it’s
the simpler of the two.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Basic AXI read transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-basic.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-basic.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 5 on the right shows an example of a single basic
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; read transaction
that we can use for discussion.&lt;/p&gt;

&lt;p&gt;The first key requirement of any high performance
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slave is that
the &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; line must be high when the slave isn’t busy.
This keeps us from suffering from a stall signal when a read request is made.
Indeed, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
recommends leaving &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; (and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;) high while waiting for a
request.  This will also be our first departure from &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demo AXI
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The transaction then starts with the request on the read address channel,
as indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;.  This will tell us the address
we want to read, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARADDR&lt;/code&gt;, and the number of items to be read, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN+1&lt;/code&gt;.
Each of these items will take at least a separate clock period, and so
they are often called “beats”.  Further, since combinatorial paths are
forbidden between inputs and outputs, we can’t start responding before
the next clock.  However, we can respond as early as the next clock
tick.  Then, after &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARLEN&lt;/code&gt; clock ticks, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST&lt;/code&gt;
and return our last item.&lt;/p&gt;

&lt;p&gt;Don’t miss this key fact: &lt;em&gt;there are &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN+1&lt;/code&gt; beats in a read transaction,
and likewise &lt;code class=&quot;highlighter-rouge&quot;&gt;AWLEN+1&lt;/code&gt; beats in a write transaction&lt;/em&gt;.  It’s not &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWLEN&lt;/code&gt;.  That extra &lt;code class=&quot;highlighter-rouge&quot;&gt;+1&lt;/code&gt; is important, and &lt;a href=&quot;https://twitter.com/zipcpu/status/1129083967242723329&quot;&gt;more than one individual
missed this key detail on one of my weekly formal verification
quizes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we drew this read transaction out into a state machine diagram, we
might get something looking like Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. An Initial Read Finite State Machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-fsm-initial.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-fsm-initial.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this diagram, the read channel starts in the idle state where the &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;
in the bottom corner of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle&lt;/code&gt; box indicates that &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; is true.  Upon
receiving a burst read request, we’d move to either the middle state, &lt;code class=&quot;highlighter-rouge&quot;&gt;Mid&lt;/code&gt;,
or the end state, &lt;code class=&quot;highlighter-rouge&quot;&gt;End&lt;/code&gt;, depending upon whether or not
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN==0&lt;/code&gt;.  In both of these states, the &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; in the lower right corner
indicates that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is true.  From the middle state, once the next to
the last item has been transferred, we’d move to the end state where &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;
indicates that &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; is also true.  From the final ending state we can
return to idle.  Further, the design cannot advance from either the middle
or the ending state unless &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is also high as noted by the &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; on
the transition.&lt;/p&gt;

&lt;p&gt;The neat thing about this design, as I’ve just outlined by the notes in the
corners of the states, is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state machine (FSM)&lt;/a&gt;
signals &lt;em&gt;are&lt;/em&gt; the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; output signals.
(See &lt;a href=&quot;/tutorial/&quot;&gt;my tutorial&lt;/a&gt; if you would like more
information on &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state
machines&lt;/a&gt;.)
This allows us to register the output signals without needing a separate
set of state registers.  Likewise the incoming signals from the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; master are shown on the transitions.&lt;/p&gt;

&lt;p&gt;Now let’s see if we can pack these operations together so that we can
do a read with 100% return path utilization.  What might that look like?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 7. Two burst reads, back to back&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-double.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-double.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It would look like two of these read bursts jammed together until their
various data beats are just touching with no overlaps, just like Fig. 7
on the left.&lt;/p&gt;

&lt;p&gt;From an &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
point of view, 100% throughput requires a couple of changes.
First, we’ll need to be able to loop from the end state back to the end
state any time we receive a request where &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN==0&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is set.&lt;/p&gt;

&lt;p&gt;This risks the problem of what to do if the &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; input from the master
isn’t set, since we can’t change our &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; signal &lt;em&gt;after&lt;/em&gt; we notice
&lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is low without making an output, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; combinatorially dependent
upon an input, &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt;.  In order to solve this problem, we’ll create a holding
state where &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is high but &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; is low in order to deal with
this possibility.  Other than this new &lt;code class=&quot;highlighter-rouge&quot;&gt;Hold&lt;/code&gt; state, our updated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
diagram in Fig. 8 is (roughly) the same as Fig. 6 above.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. The Read Finite State Machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-fsm.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-fsm.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll know we’ve been successful if we can get our design to pass a cover
check describing this transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Accept a burst request for 4 beats
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The first three beats
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The last read beat, where we accept the next request
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The next three beats of data, and
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The final beat of the transaction
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The return to idle
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For those not familiar with the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html&quot;&gt;SystemVerilog Assertion (SVA)
notation&lt;/a&gt;, this
states that we want to find some way to make the given sequence pass–to
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; it as it’s called.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;disable iff (!S_AXI_ARESETN)&lt;/code&gt; on the
second line means that if, at any time during
the following sequence, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; becomes active (low), then the sequence
is disabled and any result doesn’t count.  Following the &lt;code class=&quot;highlighter-rouge&quot;&gt;disable iff&lt;/code&gt; you
have a series of expressions, looking like &lt;code class=&quot;highlighter-rouge&quot;&gt;A ##1 B ##1 C&lt;/code&gt; etc.
This means that we want to see a clock cycle when &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is true, followed by
one when &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; is true, followed by one where &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; is true.  But what about that
strange &lt;code class=&quot;highlighter-rouge&quot;&gt;[*3]&lt;/code&gt;, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;A ##1 B [*3] ##1 C&lt;/code&gt;?  That refers to a repetition of &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.
In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; gets repeated &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; times before &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; becomes true on the next
clock.  So we’re asking the tool to find a time when &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; is
true starting on the next cycle but for three separate clocks, and finally &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;
is true.&lt;/p&gt;

&lt;p&gt;That should very much match our diagram in Fig. 7 above.  Hence, when we can
make this cover statement true, while still matching all of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal properties&lt;/a&gt;
required by the bus, then we’ll know we can run at high speed.&lt;/p&gt;

&lt;p&gt;Even better, we can trace these steps through the states and transitions in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
diagram, shown in Fig. 8 above.  Did you notice that the cover
statement didn’t check that the design could properly enter (and leave)
every state?  Indeed, this cover statement is now starting to appear
inadequate.  A better cover statement should check every state and transition.&lt;/p&gt;

&lt;p&gt;We may have to come back to that later.&lt;/p&gt;

&lt;p&gt;We could also trust the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal property
checker&lt;/a&gt;
to check all of these paths instead.&lt;/p&gt;

&lt;p&gt;For now, let’s turn our attention to the write channel.  A basic
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
write transaction looks like Fig. 9 on the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. A basic write transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-basic.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-basic.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;There are four important sections of logic in this figure.  First, when the
design is idle we’ll want &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; to be high.  That way we won’t need to wait
an extra cycle after &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; goes high before &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY &amp;amp; AWVALID&lt;/code&gt; are high
together like &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s design
did&lt;/a&gt;.  Second, there’s the
write address transaction, where &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt;.  Third, there’s a series
of “beats” where &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; is true and valid data are sent across the channel.
Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is set to true on the clock cycle after
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may notice from Fig. 9 that I’ve kept the &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; line low until after
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt;.  That just simplified the design below.  If I need to
press for lower latency later, I may need to come back and adjust this later.&lt;/p&gt;

&lt;p&gt;If you were to place these states into an initial
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;,
you might get something looking like Fig. 10 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. Initial Write FSM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-fsm-initial.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-fsm-initial.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see all of the four stages of the transaction we just
discussed above.  Sadly, however, this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;,
diagram is far from complete.&lt;/p&gt;

&lt;p&gt;Let’s work through some of the problems.  First, my entire goal was
throughput.  Fig. 9 illustrates a transaction that takes &lt;code class=&quot;highlighter-rouge&quot;&gt;N+2&lt;/code&gt; clock periods,
and our state machine in Fig. 10 doesn’t allow back to back transactions.  So
let’s start adding some more states and transitions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In order to avoid stalls, we’ll need to make sure to raise &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; on the
same clock that &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; is true.  Worse, in order to register
everything, we’ll need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; on the clock before
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; are true.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 11. Registered to Combinatorial Skid buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/skidbuffer-blockdiag.svg&quot;&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-blockdiag.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What should we do, though, if &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY &amp;amp; WREADY &amp;amp; !WVALID&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;To solve this problem, I chose to use a &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
   buffer&lt;/a&gt;.  The
   &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
   shown in Fig. 11 on the left,
   will take a registered interface and produce a combinatorial interface.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;That still leaves us with the condition where we’ll need to transition
from &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; WVALID &amp;amp; WLAST&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; BVALID&lt;/code&gt; (and possibly
&lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST&lt;/code&gt;).  This will require two more states, one for
&lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY &amp;amp; BVALID&lt;/code&gt; and another for &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY &amp;amp; WLAST &amp;amp; BVALID&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;This last state, however, gives us another problem.  What happens when
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; !BREADY&lt;/code&gt;?  In that case, we’ll need to store our new response
in a skid buffer, drop &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;, and wait for &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I then tried to diagram out this state machine for you, to help you understand
all the various parts and pieces of such a transaction.  What I came up with
was Fig. 12 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Full write FSM diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-fsm.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-fsm.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sadly, it’s not very understandable, much less complete.  Even worse,
this state diagram wasn’t helping me.  Instead, I gave up in frustration.
There are just too many states and transitions to make this understandable,
much less correct.&lt;/p&gt;

&lt;p&gt;It’s certainly not simple enough to understand from examination.&lt;/p&gt;

&lt;p&gt;So, let me let you in on a secret: I didn’t use a state diagram to build &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What??  Why not?&lt;/p&gt;

&lt;p&gt;Because, in my mind, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
core&lt;/a&gt; was never
an &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;.  It didn’t
have the typical &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
structure.  In my mind, it was always a series of &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline
stages&lt;/a&gt;,
together with the logic necessary to handle the transitions from one stage
to the next.  As I designed &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
core&lt;/a&gt;,
I envisioned three write stages, separated by a clock, as shown in
Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. The three write stages&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-pipeline.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-pipeline.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first stage was the &lt;code class=&quot;highlighter-rouge&quot;&gt;AW*&lt;/code&gt; stage where the &lt;code class=&quot;highlighter-rouge&quot;&gt;AW*&lt;/code&gt; signals would (or wouldn’t)
be valid.  In Fig. 13, you can see how this stage will either take a clock
cycle or not, as provided by the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
The second stage was the
&lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; stage, ending in the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; internal
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
Timing was driven by this write-data stage, and no more than one request was
ever allowed to be within it.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; were true, the response
would either go into the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
called &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; in Fig. 13, or directly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; output stage.
Further, a request could always be accepted any time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If both &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; stages were empty, a request could always
be accepted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Otherwise, accepting a request required several other conditions to be
true together:&lt;/p&gt;

    &lt;p&gt;a. Either &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; was false, or &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; was true, indicating that nothing
   was blocking at the final stage, and …&lt;/p&gt;

    &lt;p&gt;b. If something was in the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage, versus in the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;
   &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
   then &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WLAST&lt;/code&gt; must both be before accepting a new request.&lt;/p&gt;

    &lt;p&gt;Note that, in this design, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; will never be true unless
&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is also true.  This is a common
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
property, but we can still use a &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
assertion&lt;/a&gt;
if we aren’t confident this will be true.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, instead of using the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
in Fig. 12 that left me more confused, I chose
to focus instead on a signal trace diagram to understand what needed to be
done.  My goal, as you recall, was to pack all of these parts and pieces
of a write transaction together as tightly as possible, so that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;
could
support &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; being true without interruption across multiple bursts.  The
result should look something like Fig. 14 on the left.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 14. Two burst write transactions, back to back&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-double.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-double.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Building &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
design&lt;/a&gt;
required two tricks.  The first we’ve already discussed,
and that’s the two &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffers&lt;/a&gt;–both on the
&lt;code class=&quot;highlighter-rouge&quot;&gt;AW*&lt;/code&gt; request side and again on the &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; side.&lt;/p&gt;

&lt;p&gt;The second trick, which has already separated our approach today from many
other approaches to building an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
slave, is that we’ve chosen to use the various output signals in place of
any separate &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
state.  This will keep us from making the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;same mistakes Xilinx
made&lt;/a&gt;, when their logic
checked for &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID &amp;amp; AxREADY &amp;amp; something_else&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Above all else, we’re going to lean very heavily on the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
properties to convince ourselves that this works.&lt;/p&gt;

&lt;h2 id=&quot;the-skid-buffers&quot;&gt;The Skid Buffers&lt;/h2&gt;

&lt;p&gt;The key to high throughput when using the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt;
is really the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;.
If you are going to do anything with
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;,
whether the full
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; standard,
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
or even &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt;, you &lt;em&gt;need&lt;/em&gt; to
understand &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why are
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
so important?  Because unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; output signals must not depend upon
any combinatorial paths from the inputs according to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification&lt;/a&gt;.  This is great for
maintaining high speed signaling when using high fanout signals, but it
becomes a challenge for the designer and they can be an ugly challenge
as well for the engineer who wants to verify his design with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve now discussed
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
on &lt;a href=&quot;https://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;
several times.  First, under the name of
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;“double buffers” when discussing pipeline
strategies&lt;/a&gt;,
and then again when we discussed &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;building a functioning AXI-lite
slave&lt;/a&gt;.
More recently, I devoted &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;a whole article to the
topic&lt;/a&gt;.
&lt;a href=&quot;http://fpgacpu.ca&quot;&gt;Eric LaForest&lt;/a&gt; also has posted a &lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;wonderful article
describing them under the name
“skid buffers”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For these reasons, I won’t discuss
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
further here, but I will encourage you to go back and examine one or more of
these articles before reading further.&lt;/p&gt;

&lt;h2 id=&quot;the-write-channel&quot;&gt;The write channel&lt;/h2&gt;

&lt;p&gt;Are you ready to dive into the code?&lt;/p&gt;

&lt;p&gt;The first thing I do when building something to process
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals is to rename the parameters
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; provides.  This isn’t because I dislike their
naming convention, on the contrary, I like it: with the exception of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_S_&lt;/code&gt;
their convention is quite descriptive.  I understand therefore that
&lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/code&gt; is the number of address bits associated with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;em&gt;slave&lt;/em&gt; port to my design.  It’s just that using this long identifier means
that either I need to extend the width of my text editor and thus lose the
monitor size gains of the last decade, or I need to abbreviate these values.&lt;/p&gt;

&lt;p&gt;Here are my chosen abbreviations: &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; for address width, &lt;code class=&quot;highlighter-rouge&quot;&gt;DW&lt;/code&gt; for data width,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt; for transaction ID width.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_S_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These shorthand parameters are defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s, so Vivado
should still be able to recognize this file.&lt;/p&gt;

&lt;p&gt;Further, you may remember that
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI addresses&lt;/a&gt;
are not like
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; addresses.  In
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;,
the address doesn’t reference a &lt;em&gt;word&lt;/em&gt; of memory, but rather an &lt;a href=&quot;https://en.wikipedia.org/wiki/Octet_(computing)&quot;&gt;octet
of memory&lt;/a&gt;.  This means
that there will almost always be some number of low order address bits that
aren’t really necessary to any word-level transaction.  This is the purpose
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;LSB&lt;/code&gt; short-hand above.  When we send our address
to our downstream non-AXI port, we’ll only send the &lt;code class=&quot;highlighter-rouge&quot;&gt;[AW-1:LSB]&lt;/code&gt; bits to
simplify the processing there.  Sub-word handling by the external slave
will be done using the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wstrb&lt;/code&gt; signals.&lt;/p&gt;

&lt;p&gt;The next step is to handle the incoming write address
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
I’m going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;m_aw&lt;/code&gt; prefix to reference the values coming out of
and going into this &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AW*&lt;/code&gt;
signals going into the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt; will maintain
their names, and denote a separate stage of processing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Skid buffer
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;skidbuffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;awbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWBURST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;S_AXI_AWLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_awvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awburst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These &lt;code class=&quot;highlighter-rouge&quot;&gt;m_aw*&lt;/code&gt; signals are the equivalent of their &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AW*&lt;/code&gt; counterparts,
with the exception being that &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; is combinatorially determined.
Similarly, there’s combinatorial logic within the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
to generate the other &lt;code class=&quot;highlighter-rouge&quot;&gt;m_aw*&lt;/code&gt; signals.  That way this
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
won’t cost us any clock delays.&lt;/p&gt;

&lt;p&gt;The next piece of logic is, in many ways, the key to understanding the write
logic.  This is where we’ll control the ready lines for both the write address
and the write data channel.&lt;/p&gt;

&lt;p&gt;As mentioned above, we’ll idle with &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; high and &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Following Xilinx’s convention, I’m using the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_*&lt;/code&gt; as a prefix to
describe registered values that will then drive the outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt;
signals.  The exception to this rule is &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; will be the &lt;em&gt;registered&lt;/em&gt; component of the ready signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;, going into the combinatorial side of the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
above.  Therefore, imagine, as you go through this, that we are setting
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; anytime we set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;, but remember that we may also
override this registered value to set &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; high when accepting
subsequent packed bursts across the channel.&lt;/p&gt;

&lt;p&gt;From there, the basic starting logic is simple: once &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;
are true, move to the write data stage of our burst processor.  That means
we’ll drop &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; until the the packet clears the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Do you remember the &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;post about the most common AXI
mistake&lt;/a&gt;?
It’s a &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;common mistake&lt;/a&gt;
to check for anything other than &lt;code class=&quot;highlighter-rouge&quot;&gt;*valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*ready&lt;/code&gt; at the step above.
Were we to do that, we might miss and therefore drop an incoming request.&lt;/p&gt;

&lt;p&gt;Next, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; is set so we can accept another packet if this is the
last data value in the burst and if there’s an open position in our outgoing
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
We don’t need to check for two positions, just one.  However,
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt; will consume one of the two positions.
Similarly, we’ll drop &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt; and leave this processing stage once we
the last data value is accepted.&lt;/p&gt;

&lt;p&gt;This gets a bit more interesting, though, in the next step.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; below
only looks like it is checking for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID &amp;amp; S_AXI_WREADY&lt;/code&gt;.  Remember,
this is the second &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; in a cascaded &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block.  Therefore, we are now
checking &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID &amp;amp;&amp;amp; S_AXI_WREADY&lt;/code&gt; &lt;em&gt;and&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;!m_awvalid || !m_awready&lt;/code&gt;.  How is this not violating &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;the basic rule of AXI
handshaking&lt;/a&gt;?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Originally, when I wrote this code, it didn’t violate the rule because I
guaranteed that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; would be false during the data stage of this
transaction.  That was arranged by the code above.  This worked well, but it
cost me a clock of throughput on every burst.&lt;/p&gt;

&lt;p&gt;Now, and we’ll get to this in a moment, there’s the possibility that
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; might be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID &amp;amp;&amp;amp; S_AXI_WREADY&lt;/code&gt;.  In particular,
it may be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;, and so we’d be ready at that
time to accept another burst.  Hence, I’m not violating the rule, rather
I’m combining two possibilities in the first part of this cascaded if.&lt;/p&gt;

&lt;p&gt;We can now move on to the rest of this key logic block.  At this point, though,
most of the critical work has been done.  All that’s left is to make
cerain that &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;, once lowered to deal with the write data, is
properly raised again once done.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Specifically, we’ll want to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; clear as long as we are in the
write data stage (the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage) of our processing or if the
outgoing &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is full, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; is true.  &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; will only be true, however, if
then the outgoing &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt; is stalled.
Remember, if the outgoing
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is full, that is if the internal buffer within it has valid data within it,
then the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; signal at the output must also be true, so we
don’t need to check for it here.&lt;/p&gt;

&lt;p&gt;In all other cases, we’ll clear the stall condition so we can accept another
write address request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also need to copy and cache the values we’ll need to calculate
subsequent &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;write
addresses&lt;/a&gt; within
the burst: the burst type, virtual bus width, &lt;code class=&quot;highlighter-rouge&quot;&gt;wsize&lt;/code&gt;, and the burst length.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wburst&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awburst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wsize&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wlen&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wr_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this logic, &lt;code class=&quot;highlighter-rouge&quot;&gt;next_wr_addr&lt;/code&gt; is created  by applying our
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI address logic to the current write address
to get the next address&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;write address
calculation&lt;/a&gt;
itself now becomes really simple, given the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_addr&lt;/code&gt;
module &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;we built earlier&lt;/a&gt;.
On &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid &amp;amp; m_awready&lt;/code&gt;, we set &lt;code class=&quot;highlighter-rouge&quot;&gt;waddr&lt;/code&gt; according to the incoming address.
Then, on every accepted write value, it gets set to &lt;code class=&quot;highlighter-rouge&quot;&gt;next_wr_addr&lt;/code&gt; above.&lt;/p&gt;

&lt;p&gt;All that’s left is to call &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_addr&lt;/code&gt; to get that next write address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;axi_addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;get_next_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wburst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;next_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before we move on to the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
for the return channel, let’s not forget to write this
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; data to our external slave interface.
The neat thing about this is that, by this point in our processing, 
this last bit is easy.  We can just set these outputs to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; inputs and our registered address,
&lt;code class=&quot;highlighter-rouge&quot;&gt;waddr&lt;/code&gt;, and use one little piece of combinatorial logic, &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY&lt;/code&gt;,
to indicate that it is time to write.&lt;/p&gt;

&lt;p&gt;This should give our external AXI-unaware slave component plenty of slack to
actually process this request.  Indeed, by this point, we’ve removed all of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
complexity from what this external core needs to process.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_we&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s now time to start looking at the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
for the return response.&lt;/p&gt;

&lt;p&gt;Unlike the earlier
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
I share the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bid&lt;/code&gt; signal with the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage, which forces this
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
to have a bit of a different structure–enough so that I’ve written this
write return &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
into the module’s logic rather than referencing a submodule.&lt;/p&gt;

&lt;p&gt;The critical part of this
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is the valid signal, indicating whether or not something is within it.
In this case, we’re calling this signal &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;.
As might be expected, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; is cleared on any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; is set, however, if two conditions are true, as shown in
Fig. 13 above.  To follow, consider that any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt; we want to set the outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.  The only time
when we cannot set &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is if &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is already set, but &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; is
clear (indicating a stall condition).  In that case, we still need to note
that we are ready for a second response somewhere else–i.e. in the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.  Hence, the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is only activated any time a value would be placed into the outgoing
position, but when the outgoing position is already full and stalled..&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the stall is clear, the contents of the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
will always move forward to the outgoing position, so we can then clear the
internal valid line, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I broke the basic mold of the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;
with the transaction ID.  We need to record the transaction ID anytime
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid &amp;amp; m_awready&lt;/code&gt; are both true.  Since we are guaranteeing that there
will always be a place for any accepted write transaction in either the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt; at the end
or the return response position, we can then just copy the ID from &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awid&lt;/code&gt;
to the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;’s
data store.  If the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;
isn’t valid yet, its data is at least still allocated as part of our scheme
to keep from needing to drop &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; mid-transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_bid&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can even simplify this somewhat by only checking &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; instead of both
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, anytime the return transaction position is idle we can forward this
transaction identifier to our return register, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bid&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_bid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_bid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is one of those cases where the logic cannot be simplified further.
(I know, I tried.)  What we want is to forward to the outgoing response
position any time &lt;code class=&quot;highlighter-rouge&quot;&gt;!(S_AXI_BVALID &amp;amp;&amp;amp; !S_AXI_BREADY)&lt;/code&gt;.  If we only check for
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, however, the bus master isn’t required to keep this ready
while waiting for a response.  We might find that &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; then never gets set
properly.&lt;/p&gt;

&lt;p&gt;You may also note that this handling of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; requires a minimum of two
three clock periods.  On the first clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid &amp;amp; m_awready&lt;/code&gt; will be
true qualifying &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awid&lt;/code&gt;.  On the second clock period, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bid&lt;/code&gt; will contain
the current transaction ID.  This is also the earliest
period where &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; will be true for this transaction.  It may also be
the last period of the transaction, were &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; to be true as well.
Then, on the third clock period, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bid&lt;/code&gt; would contain the correct
write burst identifier.&lt;/p&gt;

&lt;p&gt;Now that we have the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
in please, we can discuss the return &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll want to set this signal true any time &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; were already true, then setting it again–even if the
channel were stalled–won’t hurt.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; is true, we can move the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
valid signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;, into the output position.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves one big piece of write logic we haven’t yet addressed, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;.
As I mentioned above, this piece of logic is built combinatorially off of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The one piece of combinatorial logic is required in order to be able to
accept a new write address on the last clock cycle of the write data–especially
because we can only do so if there is, or is about to be, an open position
in the outgoing
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we know that if &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; is true, then there’s at least one position
in the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;–the
one for the write data once it completes.  That was
one of the design rules we’ve chosen–one I tried to illustrate in Fig. 13
above.&lt;/p&gt;

&lt;p&gt;We’ll now need to make certain, if we set the ready line for the write address
channel, that a second output position is also available.  Since our outgoing
buffer only holds only one position and that’s already taken,
the final outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; position must be clear or clearing in order to
accept a new transaction.  Hence, we’ll need to check that the
current write transaction can fit in the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; output stage on the
next cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that’s left of the write channel side is to clean up.  Specifically,
following Xilinx’s convention, we’ve set register values &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_*&lt;/code&gt; but the
actual I/O values are named &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt;.  We’ll need to copy our values to
the actual I/O ones.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BID&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_bid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also need to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRESP&lt;/code&gt; return code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
offers four return code possibilities: OKAY, EXOKAY, SLVERR, and DECERR.
Since this simple slave doesn’t produce any errors, neither SLVERR nor DECERR
make sense to return.  EXOKAY is only allowed if this slave supports exclusive
access, which we don’t.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
exclusive access protocol is rather complex.  It involves a first
request to read a value with &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; set.  If the slave responds with &lt;code class=&quot;highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt;,
the slave then needs to record the
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;address details&lt;/a&gt;
of the transaction.  If
at some time later, the same register is written to with &lt;code class=&quot;highlighter-rouge&quot;&gt;AWLOCK&lt;/code&gt; high and
no intervening writes, then the slave may return &lt;code class=&quot;highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt; and adjust the
register.  If the slave returns &lt;code class=&quot;highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; instead, the register is not allowed to
be modified.&lt;/p&gt;

&lt;p&gt;Since we aren’t supporting this exclusive access portion of the protocol,
we’ll set the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRESP&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b00&lt;/code&gt; to indicate an &lt;code class=&quot;highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; response.  I may need
to come back and add exclusive access support later, but that will be as part
of a separate blog article.&lt;/p&gt;

&lt;p&gt;Therefore, since this doesn’t produce any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;,
nor does it support exclusive access, 2’b00 will always be the correct
response.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the write channel, and a high speed one at that!  Remember, we managed
to get 100% throughput (one write burst per clock) once fully loaded.  That’s
a bit of performance &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demo code never
achieved&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this is performance you want in your design, you can find &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this AXI slave
core here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-read-channel&quot;&gt;The Read Channel&lt;/h2&gt;

&lt;p&gt;Our basic approach to handling any read request will be to aggressively
read any time and as often as we can, pushing as much logic to the left
in this operation as we can.  That also means we’ll issue a slave read
request &lt;em&gt;on the same clock that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is true&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We’ll start with &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;.  As with the write address ready, this one
also idles high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then on any request, we’ll drop &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite.  If we did that, then we would require a minimum of two
clocks for every one-burst read: One clock for &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt; and a second
where &lt;code class=&quot;highlighter-rouge&quot;&gt;!ARREADY&lt;/code&gt;.  This would prevent us from being able to do back-to-back
reads for short bursts.&lt;/p&gt;

&lt;p&gt;So let’s adjust this so that on any read address request, we drop &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;
if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;, our outgoing sub-slave read signal, is also true.
This sub-slave read signal is a combinatorial signal that will only be true
if the outgoing read data channel isn’t stalled.  To support burst
transactions, we’ll need to only let &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; stay high if the burst
length is one, or equivalently if &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN==0&lt;/code&gt;.  Remember, in
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;,
the burst length is always one more than &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt;, so we’ll go high
immediately on any single item burst request where &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is also high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, any time the output channel is not stalled, we can check whether we
are about to place the last value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This really doesn’t make much sense without knowing what &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is.
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is the name of a counter I’m using to store the number of items
currently remaining in this burst.  It is initially set to &lt;code class=&quot;highlighter-rouge&quot;&gt;AXI_ARLEN+1&lt;/code&gt;.
Ever after, on any read, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is decremented.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; reaches
zero, the read is complete and &lt;code class=&quot;highlighter-rouge&quot;&gt;AXI_RVALID&lt;/code&gt; should be low.&lt;/p&gt;

&lt;p&gt;That’s why we can check for &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen == 2&lt;/code&gt; above.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen == 2&lt;/code&gt;, then
on the next cycle, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; will be one and &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; will then be set.  We
then need to be able to accept a new read request, as shown in Fig. 7 above,
or we won’t be able to continue our high speed transaction.&lt;/p&gt;

&lt;p&gt;Here’s what the logic for &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; looks like.  Because we are using this
to know our position in a read burst, it must idle at zero.  That way
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen == 0&lt;/code&gt; can also be used as an indication that we are no longer within
a burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On any read request, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; to the number of items remaining to
be returned, or &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARLEN+1&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, that’s the basic idea.  That’s not quite it though.  The problem is
that, if there’s already an item stalled in the return channel path, then
we still need to return that item too.  We’ll
therefore merge that last value, the one that is waiting for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;,
into our “to-be-returned” &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; counter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works because the value that’s stalled in the return position has already
been read.  It won’t get updated by this new read address request.&lt;/p&gt;

&lt;p&gt;Any time a read value is returned, we’ll then simply decrement our counter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we didn’t check whether &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; was greater than zero or not.
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen &amp;gt; 0&lt;/code&gt;, and a basic assertion (below)
proves that to be the case.  Hence we only need to check &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How about our &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;read address&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;This one’s a little tricky.  Because we stuffed our first read operation into
the same clock cycle as &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt;, the
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;address&lt;/a&gt;
we record needs to be not the address given, but rather the
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;next address&lt;/a&gt;–assuming
we read on the same cycle.  This also means that the values we feed to our
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_addr&lt;/code&gt; next-address
module&lt;/a&gt; will need to
depend upon whether the read address is sourced from
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARADDR&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;raddr&lt;/code&gt; below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Calculate the next read address
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_rd_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Actually &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;calculating the next address requires registering and keeping track
of several values from the AXI address
packet&lt;/a&gt;:
the burst type, the transfer size per beat, and the total number of  beats.
While we’re at it, we’ll copy the read ID as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rburst&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rlen&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we have all these values, we can then &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;calculate the next read
address&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;axi_addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;get_next_rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARSIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;next_rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This may be one of the more delicate parts of this operation.  A quick
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; check,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;yosys -p &lt;span class=&quot;s1&quot;&gt;&#39;read -sv axi_addr; synth_xilinx; show&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;reveals an image showing that the logic is four levels deep.  Adding this
address check, therefore, might make it difficult to meet timing.  That means
that I might need to revisit this step later if/when I ever run into timing
problems here.&lt;/p&gt;

&lt;p&gt;By the way, if you’ve never tried the
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_show.html&quot;&gt;yosys &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; command&lt;/a&gt;,
it can be very instructive to see and learn how
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
is choosing to synthesize your code.&lt;/p&gt;

&lt;p&gt;But I digress.&lt;/p&gt;

&lt;p&gt;Now that we know
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;the address&lt;/a&gt;,
we’re able to drive the read ports of our (simplified) external slave.  These
include &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;, the flag that indicates when to read, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_raddr&lt;/code&gt; to indicate the address to read from.&lt;/p&gt;

&lt;p&gt;We’ll want to read on the same clock as any incoming request, or equivalently
any time &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; is false, indicating that we are still working through
the middle of a burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if the read return channel is ever stalled, such as when
&lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_RVALID || S_AXI_RREADY&lt;/code&gt; then we cannot perform our read lest
we cause our outgoing data to change before it has been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve also discussed generating the read address above.  On any given clock
cycle, this address will be given by &lt;code class=&quot;highlighter-rouge&quot;&gt;raddr&lt;/code&gt; if we are in the middle of a
burst, such as when &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_ARREADY&lt;/code&gt;, and then by &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt; on the first
beat of any burst.  We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; to tell the difference between
these two choices.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice also that we’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;LSB&lt;/code&gt; above to drop the subword addressing.
I’ve done this for the simple reason that I don’t have any modules that
would use the subword address.&lt;/p&gt;

&lt;p&gt;That gets us past accepting the read request from the address channel,
storing the details of that request and updating those details from one beat
to the next.  We’ve also issued the read request from our external peripheral.
We just haven’t set the read output return values yet.&lt;/p&gt;

&lt;p&gt;Let’s do that now.&lt;/p&gt;

&lt;p&gt;Typically, the most difficult part of any of these channels is either the valid
or the ready signal–whichever one you have control over, whether master or
slave.  These signals are just the type of signals that you can’t afford to
mess up.  If you mess up the data, the bus will still work.  If you mess up
the response, your program might fail but the bus won’t lock up.  On the other
hand, if you mess up the valid/ready signals, the return ID signal, or even
the last signal, you might well lock everything up hard.&lt;/p&gt;

&lt;p&gt;So let’s keep this simple.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any time we read from memory, we’ll set the outgoing valid signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Keep in mind, this isn’t quite as simple as it looks since we’ve already put
a some combinatorial logic into the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; signal.  One of the critical pieces
of logic there is the piece that forces &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; to be zero any time the bus is
stalled.&lt;/p&gt;

&lt;p&gt;Next, if &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is low, then we can clear the return valid signal any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now turn our attention to the return ID signal next.  This particular
signal can &lt;em&gt;only&lt;/em&gt; change if the return channel isn’t stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, the new ID can either be the ID from a newly accepted burst,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or alternatively the ID we saved in our buffer when the new burst was
accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, the &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; signal uses the same logic as the return ID.  As
with the ID signal, it cannot change if the return channel is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The return channel will be stalled anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; !RREADY&lt;/code&gt;.  The
above expression is just this stall logic negated according to &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan&#39;s_laws&quot;&gt;De Morgen’s
laws&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the return channel is not stalled, then we have a couple of cases to deal
with.  The first is if we just accepted a request, indicated by
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt;.  In that case, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast&lt;/code&gt; if the burst
only had a single beat to it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise we need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast == (axi_rlen == 1)&lt;/code&gt;.
Ideally, we’d just set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast &amp;lt;= (axi_rlen == 1)&lt;/code&gt; but this ignores the
possibility of &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; changing on this clock as well due to a return
value being accepted.  Hence, we set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is about
to become one, or if the interface is stalled then we simply set it based
upon the current value of &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As for setting &lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt;, the external sub-slave did that for us.  Remember
how we insisted that it have the following read logic?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_rd&lt;/code&gt; signal is key!  This allows us to just set the
&lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; output combinatorially based upon this &lt;code class=&quot;highlighter-rouge&quot;&gt;i_rdata&lt;/code&gt; input.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_rdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the slave were to set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rdata&lt;/code&gt; on any other criteria, then it might
possibly change &lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; while the output channel was stalled, as indicated
by &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp; S_AXI_RREADY&lt;/code&gt;.  This would be a protocol violation, so it
is important that the slave only set &lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is also
true.&lt;/p&gt;

&lt;p&gt;The rest of the design simply involves setting our various output signals to
their internally registered counterparts.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RID&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all it takes to create a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;high throughput AXI slave
design&lt;/a&gt;.
Feel free to check it out
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, yes, but the key question is, does it work?
We’ve already seen that there were &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;both several bugs in Xilinx’s design,
as well as noting that it couldn’t handle any significant
throughput&lt;/a&gt;.  How
can we be sure that this design is any better?&lt;/p&gt;

&lt;p&gt;For that we’ll turn to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;The majority of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
work we need will be done by a formal property checker.  That will
make a lot of this verification work easy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxi_slave&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXSTALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_slave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Address write channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;m_awid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;m_awlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awqos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Write Data Channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Write Data
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Response ID tag. This signal is the ID tag of the
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// write response.
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;S_AXI_BID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Read address channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;S_AXI_ARID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARCACHE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arqos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;S_AXI_ARQOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Read data return channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Formal outputs
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Including the property file by itself is usually enough to find errors
within the design.  Indeed, just adding the property file alone to someone
else’s core, with whatever strange logic within it that I’m not familiar with,
has been all I’ve done to find most of the errors I’ve shared on
&lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s not enough to &lt;em&gt;prove&lt;/em&gt; that the design has no errors.&lt;/p&gt;

&lt;p&gt;For that, we need to turn to
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
Further, when using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
we need to add constraints to tie the state found within the
formal property file to the state of our design.&lt;/p&gt;

&lt;p&gt;The following are several examples of the properties I’ve used to do this.&lt;/p&gt;

&lt;p&gt;We’ll start with the write side.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write induction properties
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The formal property file counts the number of outstanding address write
requests.  In the case of this design, there will never be more than
two outstanding burst writes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s look at each of those three possibilities, whether zero, one,
or two outstanding write bursts.&lt;/p&gt;

&lt;p&gt;If there are two outstanding requests, then one of them must be in the
return position, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if only one request is outstanding, then it must be in
either the return &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; pipeline stage or in the &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; accepting
data pipeline stage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if nothing is outstanding on the write channel, then neither &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;
nor &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; should be true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This same logic is then repeated to check burst IDs.
We’ll skip that here and move on.&lt;/p&gt;

&lt;p&gt;I mentioned above that any time a value was in the outgoing write
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
that is any time &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; was true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; must also be true.
Let’s double check that here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also need to check the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; signal.  As you may recall, this
was the registered component of &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;, the incoming
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
read signal.  Specifically, we want to make absolute certain that we’ll
be ready to read any new write address any time there’s nothing in the
write data stage, where &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt;, or in the outgoing &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;,
as marked by &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;.  Indeed, this property is so strong, it’s a two
sided implication that we’ll want to check both ways.  For that reason,
I’m using an equality assertion to check it below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the neat parts of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
formal property set is that one of the outputs
from it is the current write address.  You can use this to double check
your own address computation.  We’ll do that here, and so double check that
our outgoing address truly does match the address it should be.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_addr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that, we can now turn our attention to verifying the read side.  As
before, we’ll focus on those properties that are necessary to validate that
this works when using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
since the basic &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties will take care of the rest.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read induction properties
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As with the write half, there will never be more than two outstanding read
requests when using this core.  Within the formal property set, there’s a
counter capturing the number of read bursts–just like the counter for writes
above.  Here, we’ll just double check that this number is never out of bounds
with the logic above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have to define what that means within our core.  In this case, and
for this core, if the number of outstanding bursts is ever more than one,
then there must be a value in the output position waiting to be returned.
Not only that, it must be the last item from the previous burst.  Further,
our &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; signal must be low because we’ll only end up in this situation
if the response path were stalled on the last cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not only will the formal property set count the number of bursts that are
outstanding, it will count the total number of outstanding values that need
to be returned.  This number should match the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; value within our core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since the external sub-slave core will never stall in this design, we also
know that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; must be true any time any request is outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, if there’s anything outstanding, then either &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is
low blocking any incoming requests, or &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp; S_AXI_RLAST&lt;/code&gt; are high
indicating that we are on the last beat of the burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, if nothing is outstanding, then we want to make certain that
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is set so that we’ll be ready for the next burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The property set also provides for some return ID checking, which I’ll skip
here.  There’s also a read address check, which we can use to make certain
that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_raddr&lt;/code&gt; is properly set.  That check requires tracking the address
from &lt;code class=&quot;highlighter-rouge&quot;&gt;o_raddr&lt;/code&gt; to the return position where it would be checked.&lt;/p&gt;

&lt;p&gt;Instead of working through those two tests, and for the sake of keeping things
short, I’d like to share one final read property.  Specifically, any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST&lt;/code&gt; becomes true, that is if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST &amp;amp; !$past(S_AXI_RLAST)&lt;/code&gt;,
then we want &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; to be high as well.  We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;$rose()&lt;/code&gt; for
this purpose to check this transition.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While I initially wanted to check for more than that, such as when
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is false when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST&lt;/code&gt; is true, that much has
already been captured above.&lt;/p&gt;

&lt;p&gt;Finally, we need one basic assumption, beyond those provided by the AXI
property set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Assumptions necessary to pass a formal check
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need to assume that the external sub-slave will behave properly.  That is,
it won’t change its value unless we’ve requested a read from it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;`
That should give you a basic, yet brief, overview of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal proof&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cover&quot;&gt;Cover&lt;/h2&gt;

&lt;p&gt;Normally I spend a section discussing cover properties.  In this case,
we’ve discussed one such cover property above.  I figured it was important
to point out that 
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
generated a trace demonstrating that this cover point could be hit.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15. The basic write cover trace, generated by the cover above&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-write-cover-trace.png&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-write-cover-trace.png&quot; alt=&quot;A trace, showing that the AXI GPIO core requires six clocks per write&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&quot;gpio&quot;&gt;GPIO&lt;/h2&gt;

&lt;p&gt;For some strange reason, it seems like I’m always fielding questions on
whatever forum about the
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;AXI-GPIO&lt;/a&gt;
core provided by
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;.  In
particular, there’s a lot of individuals complaining on-line about how slow
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;this core&lt;/a&gt; is.&lt;/p&gt;

&lt;p&gt;Consider for example, the trace shown in Fig. 16 below, drawn from a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
property placed external to &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;the GPIO
core&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16. Cover trace from Xilinx&#39;s AXI GPIO v2 core, as provided by Vivado 2018.3&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/axi-gpio-writes.svg&quot;&gt;&lt;img src=&quot;/img/tweets/axi-gpio-writes.svg&quot; alt=&quot;A trace, showing that the AXI GPIO core requires six clocks per write&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, consider this: if all you did was connect &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;your own basic I/O
core&lt;/a&gt; to the output of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;,
you could create &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;your own GPIO
controller&lt;/a&gt;
running six times faster than &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;this
one&lt;/a&gt;.
Even better, your new &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO
controller&lt;/a&gt;
could then even handle &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;both reads and writes at the same
time&lt;/a&gt;.
That’s not all.  If you used
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;,
you wouldn’t need to waste more clocks going through Xilinx’s
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; bridge.&lt;/p&gt;

&lt;p&gt;That is, it would be 6x+ faster if only Xilinx’s interconnect supported
such a speed.  We’ll save that discussion for another day.  Until then,
it’s worth knowing that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;faster AXI
interconnect&lt;/a&gt;s
exist.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We’ve just worked through a basic
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;slave core&lt;/a&gt;.
Not only that, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this slave
core&lt;/a&gt;
has the performance I’d expect from a high quality product–up to 100%
sustained throughput.&lt;/p&gt;

&lt;p&gt;Sadly, very few of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;slave cores I’ve examined&lt;/a&gt;
can handle this kind of throughput.
It’s a shame, too, since most people purchase
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
in order to get high speed performance for their own special
application–whatever it is.  On the other hand, if the logic
you use within your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is going to cripple your performance, then why purchase such
an expensive component or go through the pain of digital design?&lt;/p&gt;

&lt;p&gt;Perhaps the difference is the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
software, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; as
provided by &lt;a href=&quot;https://www.symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt;.  Because of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tool&lt;/a&gt;,
and more specifically because of the formal AXI property file, I was
able to build this design with confidence–even though I couldn’t
figure out how to build a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
state transition diagram for it.&lt;/p&gt;

&lt;p&gt;Yes, &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
truly make digital design a lot easier.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For wisdom is a defence, and money is a defence: but the excellency of knowledge is, that wisdom giveth life to them that have it.  (Ecc 7:12)&lt;/em&gt;</description>
        <pubDate>Wed, 29 May 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/05/29/demoaxi.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/05/29/demoaxi.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Building a Skid Buffer for AXI processing</title>
        <description>&lt;p&gt;I’m currently in the process of building and verifying several
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; cores,
primarily for the purpose of proving that my
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;em&gt;formal&lt;/em&gt; Verification IP core works.  Some examples of these cores include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demonstration core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;My own AXI slave core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;My own AXI crossbar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;A Bus Fault Isolator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;A WB to AXI converter&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;An AXI to WB converter.  This latter one will actually be two converters,
AXI-write to WB bridge and AXI read to WB bridge just like the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;AXI-lite to WB
converter&lt;/a&gt;
was also split into an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilwr2wbsp.v&quot;&gt;AXI-lite (write) to WB
converter&lt;/a&gt;
and an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilrd2wbsp.v&quot;&gt;AXI-lite (read) to WB
converter&lt;/a&gt;.
The two will then be connected together with a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbarbiter.v&quot;&gt;WB
arbiter&lt;/a&gt;,
just like it was with the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;AXI-lite to WB
converter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;these cores&lt;/a&gt; have already passed a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
check.  None of these, however, have passed the FPGA check save perhaps the
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx
core&lt;/a&gt;–which I’m assuming
others have used although I haven’t used it myself.&lt;/p&gt;

&lt;p&gt;These cores are all currently kept in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;Wishbone to AXI
bridge&lt;/a&gt; repository.  They aren’t there
because they really belong there, but rather for a lack of a better place.&lt;/p&gt;

&lt;p&gt;I’ve already blogged about &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;formally verifying Xilinx’s AXI demonstration
core&lt;/a&gt;.
I’ve even blogged about &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formally verifying Xilinx’s AXI-lite demonstration
core&lt;/a&gt;, as well as
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;demonstrating how to build a bug free AXI-lite
core&lt;/a&gt;.  I’d like to
do the same for my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI (full) slave
core&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Indeed, I’d like to blog about some or all of these other cores.  They each
have some very fascinating and useful features.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For example, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI slave
core&lt;/a&gt; is designed
to be able to sustain 100% throughput on both read and write channels.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s core&lt;/a&gt;,
for comparison, was only able to achieve just less than a 50% read throughput,
and something close to 100% on the write channel, although it didn’t quite
get there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt; is
unusual in several respects.  First, it is unusual in that it is a public,
open source, &lt;em&gt;formally verified&lt;/em&gt;
&lt;em&gt;&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;&lt;/em&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;.  Every tried
to simulate both halves of a design, both the master and the slave side of
Xilinx’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;?
An &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;open source AXI
crossbar&lt;/a&gt;,
capable of being
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilated&lt;/a&gt;,
would be very powerful for this purpose.&lt;/p&gt;

    &lt;p&gt;Further, if either &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s AXI demo
core&lt;/a&gt;, or their &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
demo core&lt;/a&gt; is any
indication, then this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;crossbar&lt;/a&gt;
will have over twice the throughput.  Similarly, both of these cores had
latent bugs within them, having not been
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;.
Xilinx’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;crossbar&lt;/a&gt;
may have similar latent bugs or limitations within it.  While I’d
love to know, I don’t have access to the logic within their
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;crossbar&lt;/a&gt;
to find out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, my brand new &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;
will allow you to connect an unverified 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; design to a larger system,
knowing that the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;
will identify any descrepancies between your core’s
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
interface and the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties we’ve discussed that can be used to verify
and arbitrary slave, and return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
in the case of any error.&lt;/p&gt;

    &lt;p&gt;Just think about that for a moment.  When I worked with the
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V&lt;/a&gt;, I had
a bug in my own design where two &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt; responses got
collapsed into one.  The ARM on the Cyclone-V then &lt;em&gt;hung&lt;/em&gt; waiting for that
response.  It never came.  No matter what I tried, I couldn’t get access
into the design to see what had happened.  Had I had this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;,
the fault in my broken design would have been detected and a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; returned.  I &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;could have
then used logic&lt;/a&gt; to
dig into what was going wrong to find the bug.  Even better, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;
now has a recovery mode, allowing access to the slave after a reset period.&lt;/p&gt;

    &lt;p&gt;Does this sound like a “get out to
&lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA-Hell&lt;/a&gt; for free” card at all?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is one key component, however, in all of these designs.  Without this
key, I wouldn’t be able to make any high performance
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; designs.  That key
component is the &lt;em&gt;skid buffer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I know, &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;I called these “double buffers” some time
ago&lt;/a&gt;,
but I am really starting to like the term “&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;skid
buffer&lt;/a&gt;”.  It captures the idea much
better, and so I’m going to switch terminology and start calling these things
“&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;skid buffer&lt;/a&gt;” from now on.&lt;/p&gt;

&lt;p&gt;If you are going to build or otherwise work with an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; design, you really
need to understand a basic
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;.
Indeed, that’s really the whole occasion for this post: I was going to post
about my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI slave
core&lt;/a&gt;,
and I realized that I was either going to need to spend a long section
explaining &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffers&lt;/a&gt;,
or I would need to separate that material into its own post.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-concept-of-the-skid-buffer&quot;&gt;The basic concept of the skid buffer&lt;/h2&gt;

&lt;p&gt;So, just what is a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;?
A &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;
arises from the need to create a stall signal in a &lt;em&gt;registered data only&lt;/em&gt;
context.&lt;/p&gt;

&lt;p&gt;Just to illustrate with an example, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; doesn’t use
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffers&lt;/a&gt;.
As a result, if the
CPU
needs to wait on a long instruction, such as a memory load or a divide, then the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;read-operands stage&lt;/a&gt;
needs to stall lest an instruction be lost.  If the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;read-operands stage&lt;/a&gt;
stalls, then the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;decode stage&lt;/a&gt;
needs to stall.  If the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;decode stage&lt;/a&gt;
needs to stall, the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;prefetch&lt;/a&gt;
needs to stall and so on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;div_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;op_stall&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu_halt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// other things
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dcd_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline_hazard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pf_stall&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;///
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; uses
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;&lt;em&gt;combinatorial&lt;/em&gt; stall
signals&lt;/a&gt; internally,
by the time the stall signal gets to the
&lt;a href=&quot;/blob/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt; stage
there’s not much slack left in the signal before the next clock edge.
Indeed, this was one of the problems I had when I tried to run the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
at higher clock rates.  (It wasn’t the only problem …)&lt;/p&gt;

&lt;p&gt;If I had used &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffers&lt;/a&gt;
instead, the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;stall signal&lt;/a&gt;
could have then been
&lt;em&gt;registered&lt;/em&gt;, breaking the timing accumulation.&lt;/p&gt;

&lt;p&gt;The problem is that if the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;stall signal&lt;/a&gt;
is registered, then the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;previous processing stage in the
pipeline&lt;/a&gt;
doesn’t know about the stall until it finishes its processing and registers
its values at the next set of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;.
At this point, the data needs to go somewhere or get dropped.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A basic skid buffer block diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-blockdiag.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Enter a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;,
such as the one shown in Fig. 1 at the right.&lt;/p&gt;

&lt;p&gt;The goal of the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;
in Fig. 1 is to bridge the divide between combinatorial logic on the one side
and the registered logic on the other–given that the outgoing stall signal
(i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_ready&lt;/code&gt;) can only be a registered signal.&lt;/p&gt;

&lt;p&gt;In this case, I’ve used the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signaling convention, so this &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;
has &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt; signals on both incoming and outgoing interfaces.&lt;/p&gt;

&lt;p&gt;There are two big criteria this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
must meet.  First, if ever
&lt;code class=&quot;highlighter-rouge&quot;&gt;VALID &amp;amp; !READY&lt;/code&gt;, the respective data values must remain constant into
the next clock cycle.  Second, no piece of data may be lost along the way.&lt;/p&gt;

&lt;p&gt;The first of these is very easy to express
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// First, we assume this property of the input
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Then we assert it when describing the output
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In all of my &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; cores, I
have wanted to use the data as soon as possible.  This means that I
don’t want to add any more buffers or path logic to my incoming data
than necessary.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. With no stalls, the buffer acts like a pass through device&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-passthrough.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hence, when all is going well and nothing is stalled, then the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffer&lt;/a&gt;
needs to operate like a pass through device, as illustrated in Fig. 2.&lt;/p&gt;

&lt;p&gt;In this case, both the incoming valid and data signals pass through
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;the core&lt;/a&gt;
and go directly to the output.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Copying the incoming data to an internal buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-copy.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If the output port is stalled however, then we need to copy everything to an
internal buffer, i.e. the “skid” buffer, lest the input data values get lost
on the next cycle.  This is the meaning of Fig. 3 on the right.  In this
figure, the incoming valid and data lines are copied directly to the buffer.
This gives the buffer its own internal valid and data lines.  Further down,
when we start discussing &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;the implementation of this
core&lt;/a&gt;
we’ll name these &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; respectively–but I’m getting ahead of
myself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4. The stall signal propagates upstream&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-active.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the next clock cycle, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;the
core&lt;/a&gt;
can output the incoming values from the last
cycle–the ones it just buffered.  Further, the incoming interface may
move on to its next value, but by now the incoming &lt;code class=&quot;highlighter-rouge&quot;&gt;o_ready&lt;/code&gt; signal has
fallen, so the module feeding this one now knows that it needs to wait.
This is shown in Fig. 4 on the left.&lt;/p&gt;

&lt;p&gt;The neat thing about all of this is that the logic necessary to implement a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffer&lt;/a&gt;
is fairly straightforward, so let’s take a peek at what it takes build one
of these today.&lt;/p&gt;

&lt;h2 id=&quot;optional-enhancements&quot;&gt;Optional Enhancements&lt;/h2&gt;

&lt;p&gt;After building this first skid buffer, I quickly realized there was a need
for a similar skid buffer, but with the output sides reversed.  That is,
could a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
be created where the incoming side was combinatorial
and the outgoing side was registered?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 5. The Skid buffer can be made to register outputs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-blockdiag-outreg.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Our
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
might then look like Fig. 5.&lt;/p&gt;

&lt;p&gt;In this case, the biggest difference are the set of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;
used to register the outputs.&lt;/p&gt;

&lt;p&gt;That sounds simple enough.  But what if I wanted both?  What if I could use
combinatorial logic to create the outgoing interface whenever the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
was used on an incoming &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
channel, and combinatorial logic on the incoming interface whenever the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
was used to drive an outgoing &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
channel?  To support both purposes, I created a parameter which could be used
to select between them, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt;.  When this parameter is set, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
will register all outputs.  When it isn’t set, the outputs can
then be combinatorially driven.  In all cases, the upstream stall signal
will be registered.&lt;/p&gt;

&lt;p&gt;Surely that’s simple enough to build, right?&lt;/p&gt;

&lt;p&gt;Not quite.  I wanted more.&lt;/p&gt;

&lt;p&gt;I’ve noticed that with a lot of my
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
designs, that the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; signals
have a very high fan out.  They send data all across the chip.  When such
high fanout signals get set in a manner so as to minimize LUTs, they might
end up transitioning often–even when the valid signal (&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; for 
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;)
is low and so no reader is listening on the other end.
Further, every one of these high-fanout transitions takes power.&lt;/p&gt;

&lt;p&gt;What if I instead wanted to force any unused data lines to be zero when the
valid signal indicated the output was inactive?  This might prevent unnecessary
transitions, and perhaps even lower the power usage of my designs.  (This
remains to be determined, but this design is part of my preparation for
an experiment or two to see if this is so.)&lt;/p&gt;

&lt;p&gt;For this, I assigned another options, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is
really defined by a set of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set, then anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_valid&lt;/code&gt; is true then
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; should be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Supporting both of these options also means that we’ll be essentially
designing four separate
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
designs, depending upon the options chosen.  These options will be
aintermingled throughout the design to control logic generation as well.
Therefore, when it comes to verification we’ll also need to make certain that
we verify all four of the designs found within
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;this code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verilog-code&quot;&gt;Verilog code&lt;/h2&gt;

&lt;p&gt;As is my normal practice, I’ll skip most of the introductory code, and jump
right into the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer
example&lt;/a&gt; itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skidbuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or perhaps we’ll just mostly skip this introductory code.&lt;/p&gt;

&lt;p&gt;I would like to point out that both &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt; are
single bit parameters, making true/false logical tests simpler and keeping
us from accidentally trying to set a value to something other than true (1)
or false (0).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// We&#39;ll start with skid buffer itself
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The internal skid buffer
itself is captured by two signals.  The first, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;, just
indicates that the internal buffer has valid data within it.  This is shown
in Fig. 3 above, which shows data going into the internal buffer, as well as
in Fig. 4 above, which shows data coming out of the internal buffer.&lt;/p&gt;

&lt;p&gt;The basic logic for this &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; signal is that we want it to go high any
time there’s a valid incoming signal but the outgoing path is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// We have incoming data, but the output is stalled
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then return to normal operation once the incoming ready signal returns
to normal, acting again as a pass through device.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The data logic is even simpler.  Any time the outgoing combinatorial side is
ready, we’ll just quietly copy the incoming value into our buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this doesn’t preserve our &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; property that any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is true &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; should be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To implement this low power logic, we’ll need to make certain that &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt;
starts at zero.  Not only that, but any time the design is reset then &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;
will be reset to zero, and so we’ll need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; to zero in both of
those cases–but only if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also means that any time the outgoing side &lt;em&gt;isn’t&lt;/em&gt; stalled we’ll need
to hold &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; at zero as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we can copy the data any time the outgoing/upstream side isn’t
stalled, just like before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or rather, we can’t because that’s not quite right.  If we are in both
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; mode, and we are registering our output, then we need to make
certain we &lt;em&gt;only&lt;/em&gt; set this value when &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt; is true.  Otherwise if
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is true, the input and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; properties would force the
output to be zero.&lt;/p&gt;

&lt;p&gt;While I could write this as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I prefer expanding the logic out using &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan&#39;s_laws&quot;&gt;De Morgan’s
laws&lt;/a&gt;.  The condition below,
therefore, captures the same logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s also one very profound key feature to a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffer&lt;/a&gt;
implementation that I missed for the first several years I used them: the
output stall signal is given by the internal buffer’s valid signal.  The
two are signals completely equivalent.  Ok, I’ll admit I didn’t believe
it myself until I ran the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
proof, but that’s beside the point.  In this case, since we are using
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
READY/VALID notation, this means that the outgoing READY (not stalled)
signal is the opposite of our VALID signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I built and implemented many &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;s
before realizing this.  Even once I first saw this equivalency, it still
took some time (and
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
proofs) to believe it.  That said, it nicely simplifies any implementation.&lt;/p&gt;

&lt;p&gt;Now that we’ve dealt with the internal buffer, we can move on to the outgoing
interface.  We’ll need to split this logic into two sections, though: One
section for the simpler case where the outgoing registers are not buffered,
and another for the case where they are.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the unregistered case, we’ll want our output port to be valid
any time either the input port is valid, or if there’s data in our &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is also the combinatorial side of the interface, so you may note the use
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for our output data, we’ll want that to come from the buffer any time the
buffer is active, or be a pass through otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, almost.  What if the incoming &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; didn’t observe the low-power
property?  In that case we’d need to only set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; to the incoming
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; value if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt; were also set, otherwise we’d want to force the
output to be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise the outgoing interface logic seems simple enough.  But what
about the case where we register the outgoing data?&lt;/p&gt;

&lt;p&gt;That one is just a touch trickier.&lt;/p&gt;

&lt;p&gt;Perhaps the valid line isn’t any different, save for the reality that it
can be reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That said, I’ve been burned by this kind of logic before, so I’ve gotten to
the point where I always build it with the structure above.  Notice the
&lt;code class=&quot;highlighter-rouge&quot;&gt;if (!o_valid || i_ready)&lt;/code&gt; condition.  This is the piece that’s caught me up
a couple of times.  It’s basically the same as saying
&lt;code class=&quot;highlighter-rouge&quot;&gt;if (!(o_valid &amp;amp;&amp;amp; i_ready))&lt;/code&gt; but rewritten using &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan&#39;s_laws&quot;&gt;De Morgan’s
laws&lt;/a&gt;, and so it describes
any time the outgoing interface is not stalled.&lt;/p&gt;

&lt;p&gt;My problem is that I keep wanting to add other logic to channels like this,
much like we discussed in the &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;article about the most common AXI
mistake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be forwarned: if you play with registered signals using this basic handshake,
you will want to use this pattern and no more!  How do I know this?  Because
every time I do something different, the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools correct me.  This seems to be the only valid approach to signals
subject to the rules of this type of
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Does that mean that this format will apply to the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; signal as well?
Absolutely!&lt;/p&gt;

&lt;p&gt;We start with resetting &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set, and then
we refuse any further logic if the output is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key to making this work in a registered context is now found within the
next tidbit of logic.  First, if there’s something in the buffer, then that
needs to move to the output port.  If not, but if something is coming in on
the input port, then we’ll set to that output instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before, though, there’s an optimization we can take, but not if we are
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; mode.&lt;/p&gt;

&lt;p&gt;Before I leave this topic, notice the key feature of how I’ve used
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;: If it &lt;em&gt;isn’t&lt;/em&gt; set, then all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; logic
(save the initial statement) just goes away.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is a
constant, the synthesizer can handle optimizing this logic away
if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is ever clear.  The same is also basically
true of &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt;, but there’s more going on with that signal.&lt;/p&gt;

&lt;p&gt;That’s all there is to the implementation of a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;.
As you can see, the logic is &lt;em&gt;really&lt;/em&gt; simple, and there are really only two
internal registers associated with it: &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt;.  If the outputs
are registered as well, then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; will also be registered.&lt;/p&gt;

&lt;p&gt;That leads us to the next step: proving that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;this
implementation&lt;/a&gt;
works and that it does what it is supposed to.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;We’ve already seen several of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties above.  I’ll repeat those again below in a moment.  For now, let’s
start with the reset properties.&lt;/p&gt;

&lt;p&gt;Following any reset, all of the valid lines need to be cleared.  We can assume
this of our input signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset properties
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RESET_CLEARS_IVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endproperty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, I declared this as a named property–a feature of the
SystemVerilog Assertion language.  I’ll come back to this in
a moment and either assert or assume it.&lt;/p&gt;

&lt;p&gt;We’ll also want to assume that any time the incoming interface is stalled,
that is any time there’s valid data at the input but &lt;code class=&quot;highlighter-rouge&quot;&gt;o_ready&lt;/code&gt; is low, the
valid signal needs to continue into the next clock cycle and the data isn’t
allowed to change.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDATA_HELD_WHEN_NOT_READY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endproperty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now here’s why I’m declaring these as named properties: when I went to verify
my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI slave
core&lt;/a&gt; using
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;this buffer&lt;/a&gt;,
I realized that the &lt;a href=&quot;/formal/2018/12/18/skynet.html&quot;&gt;assumptions might void the
proof&lt;/a&gt;.  They had
to be converted to assertions for that proof, while left as assumptions within.&lt;/p&gt;

&lt;p&gt;To handle this, I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;SKIDBUFFER&lt;/code&gt; macro to determine if the properties
should be assumed or asserted.  Using this macro, I can choose to assume
or assert as necessary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SKIDBUFFER&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESET_CLEARS_IVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDATA_HELD_WHEN_NOT_READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;RESET_CLEARS_IVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IDATA_HELD_WHEN_NOT_READY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are the only two assumptions describing the incoming interface.&lt;/p&gt;

&lt;p&gt;On the outgoing side, we’ll quickly repeat the reset property: following any
reset, both valid signals need to be cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now start walking through both our internal and output signals.&lt;/p&gt;

&lt;p&gt;The big rule we want to preserve is that any time there’s an outstanding
request on the output port that’s stalled, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid &amp;amp;&amp;amp; !i_ready&lt;/code&gt;,
then the request must remain the same on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #1:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	Once o_valid goes high, the data cannot change until the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	clock after i_ready
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;disable iff (i_reset)&lt;/code&gt; just means that we won’t check this test if the
reset is ever high.  Personally, I think this goes without saying, however,
the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools have been known to disagree with me from time to time.&lt;/p&gt;

&lt;p&gt;The second rule tries to capture the “no data shall be dropped” policy.
Specifically, if there’s data on the incoming port, then it either needs
to go to the output or it needs to be buffered.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #2:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	All incoming data must either go directly to the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	output port, or into the skid buffer
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What about the other cases?  Well, if either &lt;code class=&quot;highlighter-rouge&quot;&gt;!i_valid&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid &amp;amp;&amp;amp; !o_ready&lt;/code&gt;, then nothing happens on the input port that we need
to worry about.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_ready&lt;/code&gt;, we know that
the only interesting case is the one in which &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is low.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;
is low and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is high, the core is a simple pass through and a quick
code inspection will prove that works.  That leaves the case where &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is
low and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is also low–the case we covered above.&lt;/p&gt;

&lt;p&gt;This doesn’t quite capture everything, though.  We’ve now discussed how
information should flow through this design, but not how the design should
return to idle.  That’s important, and I’ve been burned by not checking
the return to idle before.  Hence we want to make certain that the design
will return to idle.&lt;/p&gt;

&lt;p&gt;So any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is true on the outgoing interface then everything should
be cleared.  On the next clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; should only be true if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt; is
also true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #3:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	After the last transaction, o_valid should become idle
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what if we are registering the ports on our outgoing interface?&lt;/p&gt;

&lt;p&gt;In that case two rules shall apply.  First, any time an input is accepted,
then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; should be high on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is true and there’s nothing on either the input
or in the buffer, then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; should clear on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That checks both the rise and the fall of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;.  Seems simple enough.&lt;/p&gt;

&lt;p&gt;But what about &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well, if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is ever true while the outgoing port is &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt;, then
the skid buffer gets copied to the outgoing port and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; must be
deasserted on the next clock.  This is the case from Fig. 4 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #4
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	Same thing, but this time for r_valid
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What if something was also coming in on the incoming interface?  It won’t
happen.  Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_ready = !r_valid&lt;/code&gt;.  Therefore if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is high,
the incoming interface is stalled and so we can ignore it.&lt;/p&gt;

&lt;p&gt;That leaves the two special low power properties that we discussed above.  We
only want to enforce those if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set, and we want to ignore
them otherwise.  Therefore, we’ll use a generate block to capture these
checks.  That means that if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; isn’t set, the synthesis tool
(i.e. &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;) won’t even create the
logic to support these checks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// If OPT_LOWPOWER is set, o_data and r_data both need
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to be zero any time !o_valid or !r_valid respectively
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// else
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	if OPT_LOWPOWER isn&#39;t set, we can lower our logic
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	count by not forcing these values to zero.
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are all of the properties we need to know this works, but does it
really work?&lt;/p&gt;

&lt;p&gt;For that, we’ll turn to cover.&lt;/p&gt;

&lt;h2 id=&quot;cover&quot;&gt;Cover&lt;/h2&gt;

&lt;p&gt;Unlike the safety (assert/assume) properties above which can be proved true
if no trace can be found that makes an assert false while keeping all of
the assumes true, cover only succeeds if at least one trace can be found.
Cover is very useful for finding faults in your assumptions, proving that
particular operations can take place and more.&lt;/p&gt;

&lt;p&gt;It’s also very valuable when you just want a trace showing that the design
works.&lt;/p&gt;

&lt;p&gt;So let’s build such a trace that starts and ends with the core idle.
In the middle, we’ll insist that the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; line toggle from high to low
twice before settling back on high.&lt;/p&gt;

&lt;p&gt;Oh, and did I mention that we only want to check cover if this unit is
verified in isolation?  Otherwise it may be that the parent module doesn’t
ever make this &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement true–something that wouldn’t be a fault.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SKIDBUFFER&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Cover test
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Wait for the design to clear
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resulting trace is interesting, but it could be better.  In particular, the
incoming data is all zeros.  While that’s valid, it’s not very revealing.
I’d rather be able to “see” from the trace that the various data lines were
properly progressing.  Perhaps if we cound insist that the incoming data
be a counter?&lt;/p&gt;

&lt;p&gt;The easy way to do this is to add another register, and some logic associated
with it.  Let’s call this &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt;, and use it to indicate that our
data “properly” changes throughout the cover trace.  That is, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt;
will capture if the incoming data counts up–just so we can visualize
the trace and what is going on easier.&lt;/p&gt;

&lt;p&gt;In many ways, this isn’t your typical “formal” property.  It doesn’t use any
of the formal language features (except &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt;).  However, if the whole
world starts to look like a Verilog problem, then the solution is easily a
simple piece of Verilog logic.&lt;/p&gt;

&lt;p&gt;We’ll start by setting this &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt; flag to true, and the clear the
flag if any rule of what we want to see for our cover statement changes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; is only allowed to change on the clock following
&lt;code class=&quot;highlighter-rouge&quot;&gt;!i_valid || o_ready&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, we’ll just clear &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt; any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; doesn’t
increment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, we want clear this value any time the input hasn’t been valid
constantly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. A cover trace from this skid buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-example.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Voila!  We now have a wonderful trace in Fig. 6 showing how this core works.&lt;/p&gt;

&lt;p&gt;Yes, this trace has been edited, but only minimally.&lt;/p&gt;

&lt;h2 id=&quot;symbiyosys-script&quot;&gt;SymbiYosys Script&lt;/h2&gt;

&lt;p&gt;In most cases the &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html&quot;&gt;SymbiYosys
script&lt;/a&gt;
used to drive a proof like this is very basic.  In this case, however, there
are a couple of key features of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/skidbuffer.sby&quot;&gt;the
script&lt;/a&gt;
that are worth discussing.&lt;/p&gt;

&lt;p&gt;First, you may recall above that I mentioned we would need to do four separate
proofs in order to try all of the combinations of our &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWLOGIC&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt; parameters.  Each of these can be separated into its own
proof using the &lt;code class=&quot;highlighter-rouge&quot;&gt;[tasks]&lt;/code&gt; section of the &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html&quot;&gt;SymbiYosys configuration
file&lt;/a&gt;.  We’ll
also create a single task for our cover proof.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
prfc prf
prfo prf              opt_outreg
lpc  prf opt_lowpower
lpo  prf opt_lowpower opt_outreg
cvr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’ve never seen a &lt;code class=&quot;highlighter-rouge&quot;&gt;[tasks]&lt;/code&gt; section of a &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html&quot;&gt;SymbiYosys
file&lt;/a&gt;
before, then you are in for a treat.  Each line within this section
defines a separate
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
run.  The first identifier on the line gives the name of the run, and the
subsequent identifiers are tags that are then applied to the run and useful
when configuring it.&lt;/p&gt;

&lt;p&gt;The second section, the &lt;code class=&quot;highlighter-rouge&quot;&gt;[options]&lt;/code&gt; section, shows the first reason to use
tasks: All of our induction proofs can be accomplished within 3 steps, whereas
the cover pass will take 20.  Here you’ll notice that every task above had
either the &lt;code class=&quot;highlighter-rouge&quot;&gt;prf&lt;/code&gt; tag or the &lt;code class=&quot;highlighter-rouge&quot;&gt;cvr&lt;/code&gt; name (also a tag).  This allows us to
set different depths for each of the passes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[options]
prf: mode prove
prf: depth 3
cvr: mode cover
cvr: depth 20&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This design is simple enough that it doesn’t really matter what engine we
use, so we’ll use the default.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[engines]
smtbmc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The real action, however, is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;[script]&lt;/code&gt; section.  This section contains
a series of commands to be given to &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
to control how the design is processed.  That also means that you can use the
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; command if you come across
anything confusing.&lt;/p&gt;

&lt;p&gt;We’ll start the script off by defining the &lt;code class=&quot;highlighter-rouge&quot;&gt;SKIDBUFFER&lt;/code&gt; macro, and then
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_read.html&quot;&gt;reading&lt;/a&gt;
our code into &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[script]
read -define SKIDBUFFER
read -formal skidbuffer.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Often my designs consist of many parts.  For these designs, I’d spend one
line here reading in each of the input files.&lt;/p&gt;

&lt;p&gt;The next step, however, is to control the parameters externally.
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; has a new extension to the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt;
command to make this easier.
Basically, the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; command finds the top level module and instantiates
all of the logic below it.  In our case, we want to instantiate specific
logic depending upon the proof.  Therefore we are going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;chparam&lt;/code&gt;
option to &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; to set these parameters.&lt;/p&gt;

&lt;p&gt;This is different from the &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;approach I discussed
before&lt;/a&gt;.  Before,
I would have written,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;opt_outreg:    chparam -set OPT_OUTREG 1   skidbuffer
~opt_outreg:   chparam -set OPT_OUTREG 0   skidbuffer
opt_lowpower:  chparam -set OPT_LOWPOWER 1 skidbuffer
~opt_lowpower: chparam -set OPT_LOWPOWER 0 skidbuffer&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This usage had some problems, and so it has now been deprecated.  One of those
problems was that &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; would re-elaborate
the module with every call to &lt;code class=&quot;highlighter-rouge&quot;&gt;chparam&lt;/code&gt;.  Any elaboration errors due to
incompatible parameter settings along the way might cause the whole process
to halt.&lt;/p&gt;

&lt;p&gt;Instead, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; command, every parameter is set at once.  Hence
we might want to use,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;prfc: hierarchy -top skidbuffer -chparam OPT_LOWPOWER 0 -chparam OPT_OUTREG 0
prfo: hierarchy -top skidbuffer -chparam OPT_LOWPOWER 0 -chparam OPT_OUTREG 1
lpc:  hierarchy -top skidbuffer -chparam OPT_LOWPOWER 1 -chparam OPT_OUTREG 0
lpo:  hierarchy -top skidbuffer -chparam OPT_LOWPOWER 1 -chparam OPT_OUTREG 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with this approach is simple: what if you have twenty different
tasks, all with different repeats of the same options?&lt;/p&gt;

&lt;p&gt;In this case, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html#pycode-blocks&quot;&gt;SymbiYosys’ python
interface&lt;/a&gt;
can come to our rescue.&lt;/p&gt;

&lt;p&gt;The following script will check our two parameters independently, and create
a string variable, called &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; line with the
appropriate values in it.  Then, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;output(cmd);&lt;/code&gt; call is issued at
the end, the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; string will be written into the individual
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; scripts driving each of their
respective proofs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--pycode-begin--
cmd = &quot;hierarchy -top skidbuffer&quot;
cmd += &quot; -chparam OPT_LOWPOWER %d&quot; % (1 if &quot;opt_lowpower&quot; in tags else 0)
cmd += &quot; -chparam OPT_OUTREG   %d&quot; % (1 if &quot;opt_outreg&quot;   in tags else 0)
output(cmd);
--pycode-end--
prep -top skidbuffer&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final &lt;code class=&quot;highlighter-rouge&quot;&gt;[files]&lt;/code&gt; section is fairly unremarkable.  It just lists the files
used in this proof.  In this case, it is only the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skidbuffer.v&lt;/a&gt;
file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[files]
skidbuffer.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will copy this file into its processing directory prior to running the proof.&lt;/p&gt;

&lt;p&gt;The whole proof can now be run using,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% sby -f skidbuffer.sby&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you can integrate it into your
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;Makefile&lt;/a&gt;, and just run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Feel free to take a loot at the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/Makefile&quot;&gt;Makefile&lt;/a&gt;
I’m using for these
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
projects should you need an example.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Skid buffers are very powerful, and very useful, especially when using
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;.  Indeed, I’m using skid buffers
throughout almost all of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/rtl&quot;&gt;my various AXI
designs&lt;/a&gt;.  Over and over
it’s the same logic, so it makes sense to create a single file to capture this
logic and simplify the design.  They really are just that useful.&lt;/p&gt;

&lt;p&gt;I just wish I’d separated this logic into its own module earlier, since
now I have many, many copies of the same logic that need to be maintained.
To this end, I’d like to thank &lt;a href=&quot;https://twitter.com/elaforest&quot;&gt;Eric LaForest&lt;/a&gt;
for setting a better example for me to follow.  I would also commend &lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;his blog
article on skid buffers&lt;/a&gt; to you
for further reading.&lt;/p&gt;

&lt;p&gt;For those of you who are not familiar with the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html&quot;&gt;SystemVerilog’s concurrent
assertion language&lt;/a&gt;,
or who do not have access to the commercial
&lt;a href=&quot;https://www.symbioticeda.com/seda-suite&quot;&gt;SymbioticEDA Suite&lt;/a&gt;, you might find
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;this discussion of alternatives and equivalents to concurrent assertions
valuable&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The desire accomplished is sweet to the soul: but it is abomination to fools to depart from evil. (Prov 13:19)&lt;/em&gt;</description>
        <pubDate>Wed, 22 May 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/05/22/skidbuffer.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/05/22/skidbuffer.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Examining Xilinx&#39;s AXI demonstration core</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Universal Software Radio Peripheral&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/usrp-b205-mini.png&quot; alt=&quot;USRP B205-Mini&quot; width=&quot;284&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Years ago, I remember sitting next to an engineer who was working with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
device on a &lt;a href=&quot;https://www.ettus.com&quot;&gt;Universal Software Radio Peripheral
(USRP)&lt;/a&gt;.  His job that day was to place his design
on that device and then to interact with it.&lt;/p&gt;

&lt;p&gt;That alone shouldn’t be very remarkable.&lt;/p&gt;

&lt;p&gt;The remarkable part was that I remember him struggling to get his design to
reliably interact with the host computer.  He’d run the script to start it and
it wouldn’t start, or to reconfigure it and it wouldn’t reconfigure.  I
remember his emotion, frustration, and even his expanded vocabulary as he
cycled power, and then later needed to cycle power again.&lt;/p&gt;

&lt;p&gt;I left before he ever found the bug, if he ever found it at all.&lt;/p&gt;

&lt;p&gt;More recently, I’ve been exploring the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; protocol, trying to create
a &lt;em&gt;formal&lt;/em&gt; verification IP core which can then be used to verify any
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slave peripheral, or bus master.&lt;/p&gt;

&lt;p&gt;When I applied my these new properties to &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s example/demonstration slave
core&lt;/a&gt;,
I was left wondering how much of my teammates frustrations from just a couple
of years earlier were do to a “vendor” supplied yet broken IP core.&lt;/p&gt;

&lt;p&gt;So let’s examine &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s example/demonstration slave
core&lt;/a&gt; today.
Perhaps we might even shine some light on those frustrations from just a couple
years ago?  What do you think, will a formal property check will find any bugs
in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s code&lt;/a&gt;?
The same code that &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; recommends you start with
in all of their &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; training materials?&lt;/p&gt;

&lt;p&gt;Let’s find out.&lt;/p&gt;

&lt;h2 id=&quot;generating-the-test-core&quot;&gt;Generating the Test Core&lt;/h2&gt;

&lt;p&gt;The obvious way to go about generating formal verification IP (VIP), would be
to read the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt; and
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;write properties&lt;/a&gt;.
Having done that, I’ll admit, there were many parts of &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the
specification&lt;/a&gt; that left me quite
confused.  So I drafted my own verification IP, and then went looking for
something to test it upon.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt; software.
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
has the wonderful capability to generate skeleton IP cores which you can use
within your design(s).  These are designed to get you up and running quickly,
without needing to learn all of the details of the protocol along the way.&lt;/p&gt;

&lt;p&gt;In a moment, I’ll show you how to use
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
to generate an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;AXI4 slave
core&lt;/a&gt;.
We’ll then spend the rest of this post illustrating and discussing the bugs
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
has left within that core.&lt;/p&gt;

&lt;p&gt;For now, let me point out that this was the same approach I used when
developing my &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal properties for
AXI-lite&lt;/a&gt;.  Why?  Well, much
to my surprise, despite &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;linking to Xilinx’s AXI-lite
core&lt;/a&gt;
within that article, &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s field engineer asked
me for both a copy of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;buggy AXI-lite
code&lt;/a&gt;
that &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
had generated, as well as to tell him how I had generated &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this buggy
code&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You mentioned in a few posts about an issue with Xilinx provided AXI4-lite
code.  I wanted to ask what that Xilinx code is that you are referring to.
If you have an example design that I could look at, that would be greatly
appreciated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let’s leave nothing for granted this time.  We’ll start by walking through
the process I used to generate the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;example
code&lt;/a&gt;
I’m going to be examining today.  It all starts with Vivado 2018.3.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: Vivado 2018.3 version&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-gen-version.png&quot;&gt;&lt;img src=&quot;/img/axifull-gen-version.png&quot; alt=&quot;Vivado Version&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While using &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
2018.3, I went to the menu, and selected “Create and Package IP”.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3: Create and Package IP&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-gen1.png&quot;&gt;&lt;img src=&quot;/img/axifull-gen1.png&quot; alt=&quot;Click on the Vivado menu option to create and package new IP&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
then brings up a dialog box, shown in Fig. 4, and I clicked through it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: Click through the first dialog box&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-gen2.png&quot;&gt;&lt;img src=&quot;/img/axifull-gen2.png&quot; alt=&quot;Click through the first dialog box&quot; width=&quot;903&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The second dialog box asks me what what type of IP I wish to create, shown in
Fig. 5.  I selected “Create a new AXI4 Peripheral.”&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Select Create a new AXI4 Peripheral&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-gen3.png&quot;&gt;&lt;img src=&quot;/img/axifull-gen3.png&quot; alt=&quot;Click through the first dialog box&quot; width=&quot;900&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The following dialog box asks me for a name and location for where this IP
should be placed.  If you do this, take careful note of the location–I’ve
been surprised more than once that the location of the new IP isn’t within
the current project and directory I’m working with.  If you get stuck, just
go back and re-create your IP, but noting the directory along the way.  You
can stop mid-way through this second time if you need to–once you know where
the last IP got stored.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6: Pick a name and file location for your new IP&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-gen4.png&quot;&gt;&lt;img src=&quot;/img/axifull-gen4.png&quot; alt=&quot;Click through the first dialog box&quot; width=&quot;862&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After this, you’ll finally come to an interesting dialog box, the one where you
actually set up the parameters for and configure your core.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7: Configure the core to be an AXI &quot;full&quot; &quot;slave&quot; core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-gen5.png&quot;&gt;&lt;img src=&quot;/img/axifull-gen5.png&quot; alt=&quot;Click through the first dialog box&quot; width=&quot;862&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For the code we’ll be discussing today, I created a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;&lt;em&gt;full&lt;/em&gt; AXI &lt;em&gt;Slave&lt;/em&gt;
peripheral&lt;/a&gt;
with a 32-bit data bus and a memory size of 64-bytes (i.e. 6 address bits).&lt;/p&gt;

&lt;p&gt;There’s then another dialog or two with information in them, and then
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
actually generates the core we’ve requested.  In my case, it generated a
directory of information, having subdirectories for &lt;code class=&quot;highlighter-rouge&quot;&gt;bd&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;drivers&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;example_designs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hdl&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;xgui&lt;/code&gt;.  There’s even a &lt;code class=&quot;highlighter-rouge&quot;&gt;component.xml&lt;/code&gt;
file with a bunch of properties in it that look GUI related.&lt;/p&gt;

&lt;p&gt;Looking around the rest of the directories, I found a lot of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Tcl&quot;&gt;TCL&lt;/a&gt; files, some verification scripts,
and even a C program which I assume would be used for verifying that this
peripheral works.&lt;/p&gt;

&lt;p&gt;Not finding any formal property files, I took these with a grain of salt.&lt;/p&gt;

&lt;p&gt;I then discarded everything but the &lt;code class=&quot;highlighter-rouge&quot;&gt;hdl&lt;/code&gt; directory.  Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;hdl&lt;/code&gt;
directory, I found two files, of which only one has any significant logic
within it.  I renamed this file, and then placed it within a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;github
repository&lt;/a&gt; where I could both work with
it and share my results with all of you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;This was then the
core&lt;/a&gt;
that I started working with, and that will form the basis for our discussion
below.  With the exception of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ifdef FORMAL&lt;/code&gt; section and the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v#L609-L629&quot;&gt;initial statements&lt;/a&gt;
just preceding it, I’ve kept it identical to what
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
first created.&lt;/p&gt;

&lt;h2 id=&quot;verification-ip-status&quot;&gt;Verification IP Status&lt;/h2&gt;

&lt;p&gt;My current &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt; verification IP (not
posted) looks nothing like my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/0a349a3c9a77666a8917e3532bf93ba46f0e47d6/bench/formal/faxi_slave.v&quot;&gt;previous
attempt&lt;/a&gt;,
or even &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blame/0a349a3c9a77666a8917e3532bf93ba46f0e47d6/bench/formal/faxi_slave.v&quot;&gt;those before it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The list below is a sampling of some of the checks found within it.  In
this list, I’m going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; as a wildcard, so &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; might refer to any
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; signals.
I will also use the convention, found within the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
specification&lt;/a&gt;, of using &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, as in
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt;, to refer to either write or read channel.  Hence &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt; could be
either &lt;code class=&quot;highlighter-rouge&quot;&gt;AWLEN&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN&lt;/code&gt; signals.  That said, here’s a sampling of
some of the checks within this new formal property core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;All &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals must be low initially&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s slave
core&lt;/a&gt;
didn’t meet this property, since it didn’t initialize any of the registers
within the core.  I quietly added initial statements and moved on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals must be low following a reset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any time &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!*READY&lt;/code&gt;, all associated properties
must remain stable into the next clock cycle&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read and write bursts must each be &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN+1&lt;/code&gt; beats long, and end with an
&lt;code class=&quot;highlighter-rouge&quot;&gt;xLAST&lt;/code&gt; signal&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; shall not go high unless first preceded by an
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt; and then by a &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Similarly, &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; may not go high with a given &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; unless preceded
by an &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;AWID&lt;/code&gt; matching that &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt;, as well
as all of the data associated with that burst.&lt;/p&gt;

    &lt;p&gt;Put simply for every &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt; with ID &lt;code class=&quot;highlighter-rouge&quot;&gt;AWID&lt;/code&gt;, there should be one
and only one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID &amp;amp; BREADY&lt;/code&gt; response with &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; equal to that &lt;code class=&quot;highlighter-rouge&quot;&gt;AWID&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; may not go high unless first preceded by an
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Similarly, &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; may not go high with a given &lt;code class=&quot;highlighter-rouge&quot;&gt;RID&lt;/code&gt; unless, much
like the &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; criteria above, there has also been an
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt; with that same &lt;code class=&quot;highlighter-rouge&quot;&gt;ARID&lt;/code&gt; on the clock prior.&lt;/p&gt;

    &lt;p&gt;This is one of the more difficult specifications to meet, particularly when
using &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
The particularly challenging piece is that a &lt;em&gt;good&lt;/em&gt; interconnect or other
master should be able to have multiple bursts outstanding at any given time.
Worse, without
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
there’s no way to prove that a core won’t break between receiving its
second &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN=255&lt;/code&gt; transaction request.
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
is therefore practically &lt;em&gt;required&lt;/em&gt; in order to prove that something works.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bursts may not cross 4kB boundaries&lt;/p&gt;

    &lt;p&gt;Passing &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
with this criteria, but also without being able to use any multipliers
(formal tools struggle with multiplies) can also be a challenge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; cannot be high for all of the bits of an &lt;em&gt;unaligned&lt;/em&gt; access.
Depending upon the unaligned portion of the address, some of the bottom
&lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; must be zero.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No more than &lt;code class=&quot;highlighter-rouge&quot;&gt;1&amp;lt;&amp;lt;AWSIZE&lt;/code&gt; bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; are ever allowed to be high&lt;/p&gt;

    &lt;p&gt;While this property will not impact today’s verification requirements,
it has caught a variety of bugs in some of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;s
I’ve verified.  In particular, I’ve caught mis-routed write packets
with this property.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AxBURST&lt;/code&gt; values may only be FIXED (2’b00), INCREMENT (2’b01) or
WRAP (2’b10).  The reserved mapping of 2’b11 is disallowed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WRAP transactions:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;WRAP transactions must begin with an aligned address&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Bursts of type WRAP must have lengths of 2,4,8, or 16&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; description of a transfer may not exceed the width of
the interface.  Since this design is for a 32-bit interface, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; may
never be more than &lt;code class=&quot;highlighter-rouge&quot;&gt;3&#39;b010&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;In today’s example, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s demonstration AXI slave
core&lt;/a&gt;
can’t handle an &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; that doesn’t match the bus size,
&lt;code class=&quot;highlighter-rouge&quot;&gt;(1&amp;lt;&amp;lt;(AxSIZE+3)) == C_S_AXI_DATA_WIDTH&lt;/code&gt;, even though the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI protocol&lt;/a&gt; specifically supports it.&lt;/p&gt;

    &lt;p&gt;If you want to support &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt;s other then the one matching
&lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/code&gt;, you’ll need a core that has what’s known as “narrow
burst” support, such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/demofull.v&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;You might find you require this support if you ever find yourself needing to
support buses from multiple native sizes, with bridges between them.  As an
example, the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
implementations I’ve worked with have been natively either 64 or 128 bits
wide, even though the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is
natively 32 bits wide.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The slave shall not respond with a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;RID&lt;/code&gt;) that doesn’t
correspond to a value previously given to it.&lt;/p&gt;

    &lt;p&gt;This is the second very challenging specification to meet when using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The formal verification properties also support a configurable number of
maximum stall cycles.  If set, the slave may not leave it’s associated
&lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; line low for more than this many cycles if the respective
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; line is high.  There are similar stall counters for both address
channels as well as the write channel.&lt;/p&gt;

    &lt;p&gt;These counters need to be tempered by back pressure.  Hence, if
&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; !BREADY&lt;/code&gt; for example, then the stall count on &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; is paused.&lt;/p&gt;

    &lt;p&gt;These counters are all from the slave’s perspective, insisting that the
slave stall the bus no more than the given number of cycles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The core also supports two other types of counters.  One set determines the
maximum number of clock cycles the slave can take from request to response,
while the second set constrains the amount of time the master can stall the
return channel.&lt;/p&gt;

    &lt;p&gt;In each case, the limit can be set to zero to disable this logic.&lt;/p&gt;

    &lt;p&gt;These counters are important, since they can catch things like dropped
packets–which we’ll see in a moment.  They can also be a challenge, since
they often force the number of steps in the proof to be at least as many
steps as are in the counter.&lt;/p&gt;

    &lt;p&gt;As an example of when you might wish to disable the timers, consider my own
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI interconnect&lt;/a&gt;.
In that case, if two masters each tried to request a maximum length burst
from the same slave, one of them would’ve needed to wait more than 256
cycles.  Keeping the proof within 5 clock cycles meant that I needed to
disable this check.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The verification IP also offers
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;address&lt;/a&gt;
outputs, which can be used with either write or read data channels to
verify that the responses are associated with the given address.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To support
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;demonstration core&lt;/a&gt;,
I also needed to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_NARROW_BURST&lt;/code&gt; option to my formal VIP.  If
this parameter is set, the VIP will insist that &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; corresponds to
&lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/code&gt;, no more and no less.  While this isn’t part of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt; per se, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s
demonstration
core&lt;/a&gt;
doesn’t have the logic within it to process bursts of any other &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt;.
Given that the &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;difference between narrow burst support and no narrow burst
support is only about 36
LUTs&lt;/a&gt;, though, were this
my own core I would’ve probably sided with providing full bus support.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_NARROW_BURST&lt;/code&gt;: Narrow burst support (&lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_DATA_WIDTH == (1&amp;lt;&amp;lt;(AxSIZE+3))&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The VIP core also has an option that can be set to indicate that the core
supports &lt;em&gt;exclusive mode&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EXCLUSIVE&lt;/code&gt;.  This mode is associated with
the various &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLOCK&lt;/code&gt; flags.  The idea, from an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; point of view, is that a read
transaction might set &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt;.  The peripheral core may then return &lt;code class=&quot;highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt;
indicating that it supports exclusive access.  Some time later, the bus
master may issue a write transaction to the same address.  At that time, the
core is to respond with &lt;code class=&quot;highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt; if no one else has written to that address
between the read and write requests, or &lt;code class=&quot;highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; if the address has been written
to between the read lock and the write lock.  In the case of an &lt;code class=&quot;highlighter-rouge&quot;&gt;OKAY&lt;/code&gt;
response, the slave is required not to write to the value, but rather to leave
it alone.&lt;/p&gt;

&lt;p&gt;I haven’t yet fully implemented the properties to check these exclusive access
transactions.  On the other hand, I don’t yet have a core that uses them,
so this isn’t much of a problem yet, although the exclusive access features
don’t appear to be all that hard to build.  Certainly &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this demonstration
core&lt;/a&gt;
doesn’t support exclusive access, so it’s a moot point for this discussion.&lt;/p&gt;

&lt;p&gt;Instead, I’ve implemented the following properties for cores that don’t
support exclusive access:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unless &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EXCLUSIVE&lt;/code&gt; mode is set&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Slaves may not return a response of &lt;code class=&quot;highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Masters may not raise &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID &amp;amp; AxLOCK&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moving on, I made one rather controversial choice having to do with &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;.
I chose to set up the core so that &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; &lt;em&gt;may not&lt;/em&gt; be asserted before
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;.  The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4 protocol&lt;/a&gt; doesn’t
require this, although &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;peripheral&lt;/a&gt;
enforces this internally.  This rule just made the VIP easier to write: it
kept me from needing to verifying skid buffers for write address and write
data channels.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;WVALID may not be asserted before AWVALID&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;If writes are pending, to include when &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt;, AWREADY must be low&lt;/li&gt;
      &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; are asserted on the same clock cycle, then
&lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; may not go high before &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since this requirement goes beyond what
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; requires, and (worse) risks
false positives, I will likely need to go back and revisit this requirement
in the future.&lt;/p&gt;

&lt;p&gt;Now, using all these properties, shall we spend a moment to take a look at
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;demonstration core&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;read-and-write-traces&quot;&gt;Read and Write Traces&lt;/h2&gt;

&lt;p&gt;Let me start out presenting their core by presenting read and write traces
generated using the properties above.  My purpose is to show an example of how
the core is supposed to work.  Be aware, however, that this is backwards of
how I actually examined &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the
core&lt;/a&gt;,
but it makes for a good overview.  I personally started examining this core by
examining whether my assertions and assumptions held, but we’ll get to those
in a moment.&lt;/p&gt;

&lt;p&gt;I often think of an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; read
transaction as the simpler of the two, so let’s start with a read transaction
and consider the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; transaction in
Fig. 8 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8: A Read Transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-rd.svg&quot;&gt;&lt;img src=&quot;/img/axifull-rd.svg&quot; alt=&quot;A read transaction from Xilinx&#39;s demonstration AXI4 core&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Notice in this trace that &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; waits until after &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt; goes high
to go high.  Then, once the address has been accepted, the core returns one
value every other clock.  As a result, any burst of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; items will take a
minimum of &lt;code class=&quot;highlighter-rouge&quot;&gt;2+2N&lt;/code&gt; clocks to complete.&lt;/p&gt;

&lt;p&gt;I was actually expecting much better performance than this from a [Full AXI
slave core](his core](https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v).
Isn’t the whole point of using burst transactions the ability to perform
transactions at high speed without the connection overhead?  Indeed, the
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite slave core&lt;/a&gt;
I built could perform better than &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this full AXI slave
core&lt;/a&gt;,
and for much less logic as well!  Of course, this doesn’t mean that
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; could’ve driven
my &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite slave core&lt;/a&gt;
any faster, it just means that the peripheral could’ve operated much faster.
For all I know at this time, &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s core might
have the same 2-clocks per beat requirement, or it might actually operate
at one beat per clock.  I haven’t gotten that far in my investigations.  I do
know that my own &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/axixbar.v&quot;&gt;AXI
interconnect&lt;/a&gt; can
handle one beat per clock, although it does pay for this capability in
logic usage.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9: A Write Transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-wr.svg&quot;&gt;&lt;img src=&quot;/img/axifull-wr.svg&quot; alt=&quot;A write transaction from Xilinx&#39;s demonstration AXI4 core&quot; width=&quot;530&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 9 on the right shows a burst write transaction.&lt;/p&gt;

&lt;p&gt;Here, you’ll notice that, as before, &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; idles low and doesn’t go
high until after &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; is raised.  While this is valid according to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;, the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification&lt;/a&gt; also recommends idling
with &lt;code class=&quot;highlighter-rouge&quot;&gt;AxREADY&lt;/code&gt; high rather than low.  However, once &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt;
are both true, &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; will go high on the next cycle.  From that time forward,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the core&lt;/a&gt;
is able to handle one write beat per clock.  Once the last write data value
has been received, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the
core&lt;/a&gt;
raises &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.  In total, this requires &lt;code class=&quot;highlighter-rouge&quot;&gt;3+N&lt;/code&gt; clocks per burst of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
beats.  This is actually somewhat decent performance, primarily driven by
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI requirement&lt;/a&gt; that all signals must be
registered.&lt;/p&gt;

&lt;p&gt;At issue in our next section is the simple question of whether or not this
core will reliably follow the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
protocol&lt;/a&gt;.  As we shall see, there are
some serious flaws in its performance.&lt;/p&gt;

&lt;h2 id=&quot;bugs-in-vivados-axi-demonstration-core&quot;&gt;Bugs in Vivado’s AXI demonstration core&lt;/h2&gt;

&lt;p&gt;By my count, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this core&lt;/a&gt;
has three significant bugs within it, and one ridiculous eye-brow raising
example of a plain old stupid piece of unnecessary and crippling logic.&lt;/p&gt;

&lt;h3 id=&quot;the-core-might-return-the-wrong-id&quot;&gt;1. The core might return the wrong ID&lt;/h3&gt;

&lt;p&gt;The first bug is associated with the ID logic.&lt;/p&gt;

&lt;p&gt;In an effort to make packet routing simpler when using
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;, each request
and response can be given an identifier, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt;.  Then later, when the
slave responds, it is required to respond with the identifier found within
the request.  Further, the slave is required to preserve packet ordering within
a given ID.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;As an example of how this might be used, consider the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM
protocol&lt;/a&gt;.  It costs several
clocks to switch from accessing one row of memory to another.
Similarly, it takes several clocks to switch from reads to writes.  On the
other hand, if the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
controller could return responses out of order, it might be able to pack
more accesses from a given row together before switching rows.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; IDs make it possible to return
values out of order.  The only rule is that, within a given ID, they must
be returned in order.&lt;/p&gt;

    &lt;p&gt;At one time I used this property within my own &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/95a432b92792738002a17d8772ba2abe5ac7b887/rtl/wbm2axisp.v&quot;&gt;WB to AXI
bridge&lt;/a&gt;.
I assigned each &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
transaction to an address within a buffer, and then used this
address as the transaction ID.  This allowed me to interleave read and write
transactions, to adjust transaction widths, and to receive transactions
out of order on return.  I’m now in the process of tearing this extra
code back out, for the simple reason that it made
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;the core&lt;/a&gt;
way more complex than it needed to be.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The other example of where ID’s might be used is within the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;.  The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI protocol&lt;/a&gt; is designed so that an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; might give
all of the bursts from a given master a particular ID.  Then, when the
slave returns the response, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; can then use
the returned ID as part of a routing scheme so that the response from the
slave is returned to the proper master.&lt;/p&gt;

    &lt;p&gt;That’s the theory at least.&lt;/p&gt;

    &lt;p&gt;I should note that when I built &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my own AXI crossbar
interconnect&lt;/a&gt;,
I was disappointed to learn that this feature wasn’t very useful.  Allowing
two separate masters to access the same slave already required a clock lost
while arbitrating between the two of them.  If I granted access to a
particular master, and kept that grant active, I could optimize accesses
from that master while all other masters would be forced to wait.  Had I
supported IDs, I’d need to suffer that clock lost to arbitration on
every new request.&lt;/p&gt;

    &lt;p&gt;The problem is even worse than that.  Not only would a clock be lost due
to arbitration on every address channel request, there would be another
clock lost due to arbitration on the return channel as well.&lt;/p&gt;

    &lt;p&gt;If that’s not enough, the necessary &lt;em&gt;back pressure&lt;/em&gt; might have broken &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the
core&lt;/a&gt;
we are studying today–as I’ll explain shortly.&lt;/p&gt;

    &lt;p&gt;For all of these reasons, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my own AXI
interconnect&lt;/a&gt;
supports IDs, but doesn’t use them during routing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ID’s are also one of the special features present in
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; that are not present in
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;.
They’re one of the things that make the full
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI protocol&lt;/a&gt; special.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10: Transaction responses did not guarantee the proper transaction ID&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-rdid.svg&quot;&gt;&lt;img src=&quot;/img/axifull-rdid.svg&quot; alt=&quot;An AXI transaction returning the wrong ID&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the case of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s demonstration
core&lt;/a&gt;,
the formal tools returned a trace showing that transaction IDs were not
properly preserved from request to response, as shown in Fig. 10 on the right.&lt;/p&gt;

&lt;p&gt;With a little bit of digging, I found the bug.  In this case,
the response ID wasn’t registered with &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID &amp;amp; AxREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is wrong on a couple of levels.  First, once &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID &amp;amp; AxREADY&lt;/code&gt; are
true, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ax*&lt;/code&gt; lines can be anything–such as a request for a second
transaction.  Nothing requires the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt; values to remain constant.  Indeed,
this bug might cause the response from the core to be misrouted to a master
that hadn’t requested it, while causing the rest of the design to hang waiting
for a request that would never come!&lt;/p&gt;

&lt;p&gt;This is also one of those bugs that you wouldn’t likely find using the
traditional test bench methodology, where you interact with a core as much
as your imagination allows.  For me, that was never more than one request
at a time, or even one ID at a time.  I know that I personally &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;struggled to
identify all of the possible failure modes in my own cores prior to using
formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The fix, at least in this case, is really easy: register the return ID’s.
Here’s the logic necessary for the write channel, the read logic would be
similar.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;s_axi_bid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;s_axi_bid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_axi_bid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;logic-depending-on-wlast-wasnt-guarded-by-wvalid&quot;&gt;2. Logic depending on WLAST wasn’t guarded by WVALID&lt;/h3&gt;

&lt;p&gt;Consecutive &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; data bursts are
separated from one another by the &lt;code class=&quot;highlighter-rouge&quot;&gt;xLAST&lt;/code&gt;
signal.  Hence, as you saw in Figs. 8 and 9 above, the last data item was
marked by &lt;code class=&quot;highlighter-rouge&quot;&gt;xLAST&lt;/code&gt;.  Ideally, this would mean that the next burst might
start immediately on the next clock cycle, had the core been optimized
for throughput.&lt;/p&gt;

&lt;p&gt;However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;xLAST&lt;/code&gt; signal is only relevant if the &lt;code class=&quot;highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; signal is also
true.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; is false for a given channel, then &lt;em&gt;all&lt;/em&gt; of the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals on that channel are don’t cares and irrelevant.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11: What happens when you check for WLAST, without also checking for WVALID&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-wlast.svg&quot;&gt;&lt;img src=&quot;/img/axifull-wlast.svg&quot; alt=&quot;Failing to check WLAST &amp;amp; WVALID terminated this burst early&quot; width=&quot;455&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this may not be the &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;most common AXI
mistake&lt;/a&gt; out there,
it certainly ranks up there: All &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals are undefined unless the associated &lt;code class=&quot;highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; line is high.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s core&lt;/a&gt;
didn’t follow this rule, as shown in Fig. 11 on the right.&lt;/p&gt;

&lt;p&gt;In particular, several signals depended upon the presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST&lt;/code&gt; while
&lt;em&gt;assuming&lt;/em&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; would also be true at the same time.  In this case,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the core&lt;/a&gt;
went into an invalid state, dropping both &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; and raising &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; for
the next burst, without ever returning a &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; response.  As a result,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the core&lt;/a&gt;
never finished reading the write data for this transaction.&lt;/p&gt;

&lt;p&gt;If you look through &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the source code&lt;/a&gt;,
you find some incomplete cascaded ifs.  Here’s one example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// slave can accept the write data
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;c1&quot;&gt;//else if (~axi_awv_awr_flag)
&lt;/span&gt;	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(The comments above are not mine, but rather are provided with the generated
code.)&lt;/p&gt;

&lt;p&gt;Notice the first bug: the logic depends upon &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY&lt;/code&gt; &lt;em&gt;and something
else&lt;/em&gt;!  In a prior post, I declared this to be &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;the most common AXI bug I’ve
come across&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second bug is that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;the core&lt;/a&gt;
checks for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WLAST &amp;amp;&amp;amp; axi_wready&lt;/code&gt;, rather than also checking for
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt; as well.  Had the logic block been written instead as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// slave can accept the write data
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;it would’ve fixed the problem with this particular block.  That would
leave &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v#L247-L274&quot;&gt;one remaining block&lt;/a&gt;
still needing a similar fix.&lt;/p&gt;

&lt;p&gt;As with the last error, the bus would come to a screeching halt if this
ever happened in practice, with the bus master waiting forever for the
response to its burst.  Worse, if a second address request were made at this
time, the original data would get written to the address associated with the
second burst and … it just goes downhill from there.&lt;/p&gt;

&lt;p&gt;I can only guess that &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;,
the code of which I don’t have access to currently, doesn’t set &lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST&lt;/code&gt;
unless it also sets &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;.  I shudder to think of what might happen
if it didn’t guarantee this, or similarly if a “working” design were taken
from where it was working with one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
(&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s), and placed into another environment,
such as an &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;
environment, which didn’t maintain this property.&lt;/p&gt;

&lt;h3 id=&quot;any-backpressure-on-bready-and-the-core-will-drop-responses&quot;&gt;3. Any backpressure on BREADY and the core will drop responses&lt;/h3&gt;

&lt;p&gt;The first rule of bus transactions is that every request gets a response.
The second rule is that stalled requests are not allowed to change until
they are accepted.  In the case of &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
that applies to stalled responses as well–a condition referred to as back
pressure.&lt;/p&gt;

&lt;p&gt;What might cause back pressure?  There might be back pressure if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; ever needs
to arbitrate between multiple competing return responses to a given master.
Another possible cause of back pressure might be an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; that issued
two transaction requests to different slaves, and is still waiting for the
first slave to respond.  A third reason might be a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA controller&lt;/a&gt; that,
having issued a read request of one peripheral, had also issued a write
request to a second peripheral and is still waiting on second peripheral
to accept the write data.&lt;/p&gt;

&lt;p&gt;Back pressure, however, can be a challenge to deal with.&lt;/p&gt;

&lt;p&gt;One of the difficult problems with back pressure is that with enough
back pressure, the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxREADY&lt;/code&gt; signals need to drop for the associated
address channels as well.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s
core&lt;/a&gt;
in this case attempts to deal with back pressure by only raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxREADY&lt;/code&gt;
lines once the last transaction completes.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12: Xilinx&#39;s core can&#39;t handle back pressure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-bvalid-fail.svg&quot;&gt;&lt;img src=&quot;/img/axifull-bvalid-fail.svg&quot; alt=&quot;Xilinx&#39;s core drops a write response if BREADY isn&#39;t high in time for the second return&quot; width=&quot;490&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Or rather, I think that was the designers intent.  That’s not what the code
actually does.  In the case of the write channel, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s example
core&lt;/a&gt;
only waits until &lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST&lt;/code&gt; is high, then it will both set &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; and
consider accepting a second burst.  The problem is what happens if
&lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; isn’t also high at the same time, as shown in Fig. 12 on the right.&lt;/p&gt;

&lt;p&gt;In this example, &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; is low long enough that the second burst’s
write response to overwrite the response from the first burst.  This could
easily halt a design depending upon this peripheral so hard it would take
a power cycle to fix.&lt;/p&gt;

&lt;p&gt;Incidentally, &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
core had this same problem.  While &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this
core&lt;/a&gt;
only suffers the problem on the write return channel,
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite core&lt;/a&gt;
suffered from this same problem on both read and write return channels.&lt;/p&gt;

&lt;p&gt;Their field engineer asked me about my
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; conclusion.  He
pointed to an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
trace that was very similar to the one shown in Fig. 12 above, and then pointed
out (correctly) that there was no protocol error shown in the figure.  A slave
might validly send write responses any time it wants, and so perhaps there’s a
write response still waiting.&lt;/p&gt;

&lt;p&gt;Here’s the critical piece of missing information: the final state shown in
Fig. 12 is a &lt;em&gt;STEADY STATE&lt;/em&gt;!  The core &lt;em&gt;never&lt;/em&gt; returns the second response.&lt;/p&gt;

&lt;p&gt;What happened?&lt;/p&gt;

&lt;p&gt;Let’s take a look at the logic block that sets &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; to see.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arv_arr_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// slave is ready to accept an address and
&lt;/span&gt;	          &lt;span class=&quot;c1&quot;&gt;// associated control signals
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
	          &lt;span class=&quot;c1&quot;&gt;// used for generation of bresp() and bvalid
&lt;/span&gt;	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          
	      &lt;span class=&quot;c1&quot;&gt;// preparing to accept next address after current write burst tx completion
&lt;/span&gt;	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you see the bug?  There’s actually a couple of bugs here.  Let me give
the rest of the block here for reference, but the bug is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;
statement(s) above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first bug is that this core checks for &lt;code class=&quot;highlighter-rouge&quot;&gt;~axi_awready &amp;amp;&amp;amp; S_AXI_AWVALID&lt;/code&gt;
and &lt;em&gt;something else&lt;/em&gt;.  This is a &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;common AXI
mistake&lt;/a&gt;,
probably created by the engineer wanting to make certain the other flags
are also true.  The consequence of this bug, though, is that if the &lt;em&gt;something
else&lt;/em&gt; wasn’t also true, then an address request just got dropped.&lt;/p&gt;

&lt;p&gt;But that’s not the bug that caused the trace in Fig. 12 above.&lt;/p&gt;

&lt;p&gt;The second bug is the check for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WLAST &amp;amp;&amp;amp; axi_wready&lt;/code&gt;.  In this case,
we’ve already discussed the problem of referencing &lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST&lt;/code&gt; without also checking
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s still not the bug that caused the trace in Fig. 12 above.&lt;/p&gt;

&lt;p&gt;The bug in the trace above centers around the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awv_awr_flag&lt;/code&gt;
to determine whether or not the core is currently processing a burst, or if
it can accept the next burst for processing.  In this case, once
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WLAST &amp;amp;&amp;amp; wready&lt;/code&gt; were true the burst was marked complete and ready
for the next address.  If the designer had instead checked for
&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; BREADY&lt;/code&gt;, it might have fixed this issue.  However, in the designer’s
zeal to lower the latency of this core, they allowed &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awv_awr_flag&lt;/code&gt;
(the write address valid flag) to drop one clock cycle too early.&lt;/p&gt;

&lt;p&gt;The rest follows from Fig. 12 above: the having dropped the write address valid
flag, the core now accepts the next write request.  It accepts and writes a
value to the core’s internal data structure, and then sets &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.  Only …
&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is &lt;em&gt;already&lt;/em&gt; set.  Hence a return response is dropped.&lt;/p&gt;

&lt;p&gt;Many pieces of hardware, ARM included, will wait for a missing burst return
forever.  As a result, this would mark the end of any fault-tolerant design–and
the bug was in &lt;em&gt;vendor&lt;/em&gt; code!&lt;/p&gt;

&lt;p&gt;Lesson learned: never trust vendor code.&lt;/p&gt;

&lt;p&gt;When I built &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/demofull.v&quot;&gt;my own AXI
core&lt;/a&gt;, I chose
instead to stall the &lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST&lt;/code&gt; cycle if &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; !BREADY&lt;/code&gt; were true.  That
little bit of overlap also allowed &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/demofull.v&quot;&gt;my
design&lt;/a&gt; to fully
process an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; write transaction at
one beat per clock across multiple bursts.  That’s better performance than
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this core&lt;/a&gt;
achieves, while also passing a formal verification check which
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this core&lt;/a&gt;
doesn’t.&lt;/p&gt;

&lt;h3 id=&quot;this-core-wont-handle-concurrent-reads-and-writes&quot;&gt;4. This core won’t handle concurrent reads and writes&lt;/h3&gt;

&lt;p&gt;Did you notice from the last piece of code that &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; depended upon not only
the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awv_awr_flag&lt;/code&gt; (the write address valid flag, indicating a write burst
is active), but also the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arv_arr_flag&lt;/code&gt; (the read address valid flag)?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arv_arr_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means that the core will not accept any read transactions while
a write transaction is ongoing.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13: Write&#39;s wait on read completion&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-rdwr.svg&quot;&gt;&lt;img src=&quot;/img/axifull-rdwr.svg&quot; alt=&quot;Xilinx&#39;s core won&#39;t start a read while there&#39;s an ongoing read&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This one I don’t get.  Indeed, this doesn’t make any sense to me.  One of the
key features of the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI protocol&lt;/a&gt;,
a key selling point if you will, is that it can handle both reads and
writes at the same time.&lt;/p&gt;

&lt;p&gt;Not &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;I tweeted&lt;/a&gt; about this bug,
&lt;a href=&quot;https://twitter.com/Qermitos&quot;&gt;Piotr&lt;/a&gt;
suggested the reason for this was that the core was implementing a single
port RAM.  Indeed, if your only information was the trace above that would
make sense.  However, if you look through the logic of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this core&lt;/a&gt;
you’ll discover a couple of things.  First, the registers within the core are
implemented with either &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
RAMs&lt;/a&gt;
or &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;.
Given the size of this core, at only 64-bytes, it would probably be implemented
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;.
Either way, both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;
and &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAMs&lt;/a&gt;
can handle both reads and writes on the same clock in
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; devices.  Then, just to make this
more crazy, the core &lt;em&gt;will&lt;/em&gt; allow both a read and write at the same time
&lt;em&gt;if&lt;/em&gt; the two requests show up at the same time.  Similarly, if a read
request shows up during a write request the core will process it.&lt;/p&gt;

&lt;p&gt;The only justification I can possibly think of for this “feature” is that
this was an unintentional oversight.&lt;/p&gt;

&lt;p&gt;Removing the test for the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arv_arr_flag&lt;/code&gt; “fixes” this particular problem.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is now the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;second of Xilinx’s demonstration
designs&lt;/a&gt; that I’ve
applied &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt; to.  Let’s just
say that I’m not going to recommend either of these two
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
designs, and I’m certainly not going to recommend them to any beginners!
I can’t really think of a worse nightmare, as a beginner, than to be
struggling with non-functioning vendor code.  I’d be looking every place
&lt;em&gt;other&lt;/em&gt; than the one with the bug!  Worse, I wouldn’t know how to verify
if any of my “fixes” worked–especially since
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
own verification procedures failed to find any of the bugs illustrated above.&lt;/p&gt;

&lt;p&gt;If you would like a basic &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;
design that you can start from and work with, you might wish to consider
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/demofull.v&quot;&gt;this design instead&lt;/a&gt;.
Unlike my &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;demonstration AXI-lite
design&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/demofull.v&quot;&gt;this AXI full core&lt;/a&gt;
requires connectivity to a second (external) core with the actual read/write
logic within.  I chose this approach to make it easier to integrate this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/demofull.v&quot;&gt;demonstration design&lt;/a&gt;
into another of my designs that &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;desperately needs the AXI
performance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If all goes well, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/demofull.v&quot;&gt;this demonstration
core&lt;/a&gt;
may well be the next &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
core I blog about.&lt;/p&gt;

&lt;p&gt;As for the formal properties that I used to find the bugs in
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this core&lt;/a&gt;,
those are currently available for purchase as part of the
&lt;a href=&quot;https://www.symbioticeda.com/seda-suite/&quot;&gt;SymbioticEDA Suite&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Now all these things happened unto them for ensamples: and they are written for our admonition, upon whom the ends of the world are come. (1 Cor 10:11)&lt;/em&gt;</description>
        <pubDate>Mon, 13 May 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2019/05/13/axifull.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/05/13/axifull.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Understanding AXI Addressing</title>
        <description>&lt;p&gt;For those who’ve been &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;following me on twitter&lt;/a&gt;,
you’ll know that I’ve been slowing working through understanding the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
standard&lt;/a&gt;.  My goal has been to create
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
IP for either an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
peripheral or an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; master.  I’ve
made a lot of progress, and so I’d like to share some of that with you today.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1: A Signal Collection Application&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-dsp2net.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My journey with &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; actually started
some time ago, under a government contract.  I needed to move data from the
DSP code I had written within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; side of an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
chip onto the Ethernet.  I had software running on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt; processor side
that read from a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; logic,
as shown in Fig. 1 above.  Since it was easy to do, I connected to the
low-speed interconnect of the
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V&lt;/a&gt;,
and then converted that to an Avalon bus, then to a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB
bus&lt;/a&gt;, and finally to a
64-bit &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus&lt;/a&gt; in order
to get to my peripheral.  I was later surprised that my design wasn’t working
nearly as fast as I wanted.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: Too many bus transformations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-too-many-bridges.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once I finally managed to put a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;
into the design to probe the bus interaction, I realized that every
time a transformation took place from one bus protocol to another, another clock
cycle was consumed to do it.  Reading from &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;my
FIFO&lt;/a&gt;
therefore took a clock to convert from
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; to Avalon, another one to convert
from Avalon to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
and then four to convert from my 32-bit
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; bus to
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; with a 64-bit data
width.  The return path was similarly slow.  I lost a clock within my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; generated
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;,
another clock clock converting from
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
back to Avalon, and then another clock converting from Avalon back to
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;.  Or rather, I assume there was a
clock lost between &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; and Avalon and
back, but I never had access to that part of the design in order to probe it.
Either way, my code couldn’t meet the real-time requirements I had given it and
I was wasting precious clock cycles in useless bus transformations.&lt;/p&gt;

&lt;p&gt;Normally I don’t pay much attention to bus latency.  What’s a clock or two
between bus components, right?  Usually, this doesn’t hurt me.  Since I use
pipelining on the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus&lt;/a&gt;,
I can send up to one request per clock cycle, and a two-clock latency on an
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; item burst brings the total time to &lt;code class=&quot;highlighter-rouge&quot;&gt;N+2&lt;/code&gt; clocks.  This works nicely
for most applications.&lt;/p&gt;

&lt;p&gt;Not this one.&lt;/p&gt;

&lt;p&gt;In this case, the &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM
processor&lt;/a&gt; was only ever
reading one item at a time.  Nothing was pipelined.  Every read therefore
took the full latency of about ten clocks to process.&lt;/p&gt;

&lt;p&gt;No wonder I wasn’t meeting my real time requirements.&lt;/p&gt;

&lt;p&gt;The easy way to solve this problem would be to get rid of all the bus bridges,
and to switch to the low speed to the high speed
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; bus connection.&lt;/p&gt;

&lt;p&gt;The high speed bus on the
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V&lt;/a&gt;, however,
uses &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;.  It doesn’t use
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;, it
uses &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;.  If I wanted to use
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;, I’d need another
bus translator.&lt;/p&gt;

&lt;p&gt;Prior to that project, I had tried to create an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slave myself.  I spent several weeks
on it, ending up unsuccessful.  So, with government dollars paying for my
time, I tried again.  I never even made it through the design process, much
less verification and simulation.  Eventually I gave up rather than to impact
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Critical_path_method&quot;&gt;critical path&lt;/a&gt;
of the project.  Several weeks after giving up in frustration,
I realized my confusion, but by then it was too late.&lt;/p&gt;

&lt;p&gt;In the end, I never met my real-time promises to my customer.&lt;/p&gt;

&lt;p&gt;Ever had something like that that just burns you up?  Where you made a promise
to deliver something to someone and then didn’t deliver?&lt;/p&gt;

&lt;p&gt;So now I’m re-examining &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; again.
Perhaps if I had a formal property file this time, it would help me through
the design process?&lt;/p&gt;

&lt;p&gt;So that’s what I’m working on, and that’s what led me to today’s post.&lt;/p&gt;

&lt;p&gt;To test whether the property file “works” or not, I’m also building a variety
of &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; peripherals.  Perhaps you’ve
read my ramblings &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;on twitter&lt;/a&gt; about all of the
bugs found in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s example AXI
slave&lt;/a&gt;?
Perhaps you’ve seen the
(&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;)
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI demonstration
slave&lt;/a&gt; I’ve
been able to put together?  Or the
(&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;)
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;,
which can be used with a (possibly) faulty slave to keep from needing breaking
the bus so badly that only a power cycle can rescue a design?
These have been my early successes.&lt;/p&gt;

&lt;p&gt;I’m still working on an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; bridge, as well
as an example (open-source, and
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;)
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI crossbar interconnect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all of this work, I’ve managed to get far enough along in my understanding
of the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; protocol to be able to
discuss a piece of it with you today.&lt;/p&gt;

&lt;p&gt;Specifically, I’d like to discuss how addressing works in
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; burst transactions.&lt;/p&gt;

&lt;h2 id=&quot;addressing-made-simple&quot;&gt;Addressing made simple&lt;/h2&gt;

&lt;p&gt;If you know nothing more about &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
addressing, you need to know this:  The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; address represents the address of
the byte, not the word.  This is unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
where the address represents the word and not the byte within it.
To convert from
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
to &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;, add zero bits.  To convert from
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; to
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
drop the low order bits.&lt;/p&gt;

&lt;p&gt;That’ll get you past any
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; issues.  It
will also get you past any single-address transactions using
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rest of the full &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; protocol isn’t
quite that easy.&lt;/p&gt;

&lt;p&gt;Let’s start at the top.  an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; transaction begins on the
address write/read channel.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: An AXI Write transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-write.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A write transaction begins when the bus master describes the burst of
information to be written on the write address channel.  This includes the
starting address of the transaction, the length of the transaction, and more.
The master then sends the data associated with the transaction to the slave.
Once accomplished, the slave will return a single acknowledgment.  You can see
an example of this, drawn from a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement in the proof of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
slave&lt;/a&gt; in Fig. 3.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding=15px;&quot;&gt;&lt;caption&gt;Fig 4: An AXI Read transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-read.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Reads are similar, as shown in Fig. 4–also drawn from a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement
applied to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;same
core&lt;/a&gt;, in that
they also begin on the read address channel.  However, instead of being
followed by a channel of data from the master to the slave, the slave
responds instead by returning the data it has read.  The last item of data
from the returned by the slave is marked with an &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; flag and it concludes
the transaction.&lt;/p&gt;

&lt;p&gt;Since both the write address and read address packets are very similar, I’ll
describe both together and just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ax&lt;/code&gt; prefix to refer to an address
signal that could be on one or the other of the two channels.  When &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt;
is true, a transaction request has been placed on the channel.  Several other
values associated with this request will tell you the size and length of
the requested transaction.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AxADDR&lt;/code&gt;.  We just discussed this above.  The AxADDR lines reference the byte
within the burst.&lt;/p&gt;

    &lt;p&gt;Just for a fun reference here, I grew up thinking that the word “byte” meant
8-bits of data.  It’s not.  That’s the word “octet”.  A “byte” is the smallest
addressable unit of data on a bus.  For POSIX compliant CPUs, that’s 8-bits.
Other CPUs, to include the original ZipCPU, can have different sized bytes.
In my case, I started out supported 32-bit bytes.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; bus supports 8-bit bytes, and each byte can be read or written
separately using the &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; signal–but we’re now getting ahead of ourselves.
The key takeaway here is that bytes and octets aren’t necessarily the same
thing, but we can use them interchangably when discussing the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; protocol.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt;.  When I first examined &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt; field appeared to be the biggest reason to use it.  With a
single request on the address channel, you can request anywhere between one
and 256 values by just setting &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt; to 0-255 respectively.&lt;/p&gt;

    &lt;p&gt;But how should the address of each of those values be calculated?  That’s the
purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxBURST&lt;/code&gt; value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AxBURST&lt;/code&gt; is a two-bit value.  It describes whether the address is to be
fixed (&lt;code class=&quot;highlighter-rouge&quot;&gt;AxBURST == 2&#39;b00&lt;/code&gt;), incremented (&lt;code class=&quot;highlighter-rouge&quot;&gt;AxBurst == 2&#39;b01&lt;/code&gt;), or wrapping
(&lt;code class=&quot;highlighter-rouge&quot;&gt;AxBurst == 2&#39;b10&lt;/code&gt;).&lt;/p&gt;

    &lt;p&gt;In general, the address of each beat of the burst will increment by the
number of bytes in a bus word.  Only … it’s never that simple.  Let’s come
back to this in a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE &lt;/code&gt;is a three bit value referencing the size of the data transfer.
The size can be anywhere between an octet, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE == 3&#39;b000&lt;/code&gt;, two octets,
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE == 3&#39;b001&lt;/code&gt;, four octets, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE==3&#39;b010&lt;/code&gt;, all the way up to 128
octets when &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE == 3&#39;b111&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;The rule is that &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; can only ever be less than or equal to your bus
size.  Since I tend to work with 32-bit busses, that means any &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; must
be less than or equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;3&#39;b010&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the four addressing signals we’ll look at today: &lt;code class=&quot;highlighter-rouge&quot;&gt;AxADDR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxBURST&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt;.  Let’s walk through how to use these as a function
of the burst type.&lt;/p&gt;

&lt;h2 id=&quot;types-of-burst-addressing&quot;&gt;Types of Burst Addressing&lt;/h2&gt;

&lt;p&gt;As we mentioned above, there are three basic types of burst addressing: FIXED,
INCREMENT, and WRAP.  An &lt;code class=&quot;highlighter-rouge&quot;&gt;AxBURST&lt;/code&gt; value of &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b11&lt;/code&gt; is reserved, and so illegal.&lt;/p&gt;

&lt;p&gt;Let’s look at each of these in turn.&lt;/p&gt;

&lt;h3 id=&quot;fixed-addressing&quot;&gt;Fixed Addressing&lt;/h3&gt;

&lt;p&gt;This is perhaps the simplest of all of the addressing modes.  The first address
in the burst is given by &lt;code class=&quot;highlighter-rouge&quot;&gt;AxADDR&lt;/code&gt;, and it never changes from there.  This
means that, within a burst, we can calculate the next address, we’ll call this
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_next_address&lt;/code&gt;, from the last address, we’ll call that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_last_addr&lt;/code&gt; and the
burst type, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_burst&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s pretty easy.&lt;/p&gt;

&lt;p&gt;This would be the perfect addressing mode for reading from a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
as I described above.  Since a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
can be represented with a single address, this is perfect.&lt;/p&gt;

&lt;p&gt;If I ever get a chance to do a similar contract again, this is how I’d do it.&lt;/p&gt;

&lt;p&gt;Today, though, I’m working on &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;
properties.  That kind of forces me to support every mode, so I’m not yet done.&lt;/p&gt;

&lt;h3 id=&quot;increment-addresses&quot;&gt;Increment Addresses&lt;/h3&gt;

&lt;p&gt;Increment addressing is the kind of addressing you may be more familiar
with.  It’s the type you’d use when doing a
&lt;a href=&quot;http://www.cplusplus.com/reference/cstring/memcpy/&quot;&gt;memcpy&lt;/a&gt;.
In its simplest form, we might write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only that’s not quite right.  &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
allows you to transfer multiple bytes per transaction, and the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; address references the first
byte in each burst.  Hence, if we have a 32-bit data bus, we’d want to
increment our address by four bytes at a time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even this isn’t quite right.  While &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
doesn’t require &lt;code class=&quot;highlighter-rouge&quot;&gt;AxADDR&lt;/code&gt; to be an aligned address, all of the subsequent
addresses must be aligned.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Incremental burst addressing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-increment.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Aligning the addresses isn’t all that hard for a 32-bit bus.  Indeed, we
might simply write,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Force subsequent alignment
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_next_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we’re making good progress, it’s still not this simple.  Remember the
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; parameter?  &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; determines our increment, not our bus size.
When &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE==0&lt;/code&gt;, the increment is one.  When it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;3&#39;b001&lt;/code&gt;, we increment by
two.  When &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE==3&#39;b010&lt;/code&gt; we increment by four and so on.&lt;/p&gt;

&lt;p&gt;We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt; to represent &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; in our pseudocode.  We can then write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That handles our increment.  The problem now is that alignment is more painful,
since our ultimate alignment depends upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; of the transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Force subsequent alignment
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 16-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 32-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 64-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 128-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 256-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 512-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 1024-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  We’ve enforced the alignment we need, and so we can now calculate
the next address during an increment.&lt;/p&gt;

&lt;p&gt;I discovered the problem with this approach when I tried to verify the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; example code from Vivado.
I built a slave with only 5 bits of address.  In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_next_addr[6:5]&lt;/code&gt;
weren’t defined.  So I added in a test of the address width.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Force subsequent alignment
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 16-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 32-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 64-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 128-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 256-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 512-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 1024-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code now no longer referenced any undefined addresses, since the &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&amp;gt;x&lt;/code&gt;
check found and fixed that.&lt;/p&gt;

&lt;p&gt;Only … one of my favorite (unnamed) simulation tools couldn’t handle this.
Perhaps this is because I’m using a very old version of the tool.  For whatever
reason, I had to do something to keep this design from referencing bits I didn’t
have.  I chose the following solution, therefore.  It’s not pretty, but it
worked for &lt;code class=&quot;highlighter-rouge&quot;&gt;AW = 6&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Force subsequent alignment
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 16-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 32-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 64-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 128-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 256-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 512-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 1024-bit alignment
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s at least good enough that we can move on.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-addresses&quot;&gt;Wrapping Addresses&lt;/h3&gt;

&lt;p&gt;Many memories support address wrapping, and the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; bus even has a burst type
which will support wrapping addresses.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6: Wrap burst addressing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-wrap.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The idea behind address wrapping usually comes from
&lt;a href=&quot;https://en.wikipedia.org/wiki/CPU_cache&quot;&gt;cache&lt;/a&gt;
accesses.  An address request from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
might land anywhere within a given
&lt;a href=&quot;https://en.wikipedia.org/wiki/CPU_cache&quot;&gt;cache&lt;/a&gt;
line.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
needs to invalidate and then fill the whole
&lt;a href=&quot;https://en.wikipedia.org/wiki/CPU_cache&quot;&gt;cache&lt;/a&gt;
line.  During this time, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
will be stalled until the value it needs is returned from memory.  If the
value lands towards the middle of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/CPU_cache&quot;&gt;cache&lt;/a&gt;
line, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
would have to be stalled during the entire read.  On the other hand, if the
memory can return the middle value of the burst first and then wrap around to
return the first part of the burst, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
doesn’t need to be stalled nearly as long.&lt;/p&gt;

&lt;p&gt;This is why address wrapping is so important.  Indeed, many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
chips will support address wrapping of some type.&lt;/p&gt;

&lt;p&gt;Faster &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
is a good thing, right?&lt;/p&gt;

&lt;p&gt;Well … that may be true, but it certainly makes the bus more complicated.&lt;/p&gt;

&lt;p&gt;The basic idea of wrapping is that the address bits act as though only some
bits increment, and others don’t.  We can capture this with a bit-wise mask
I’m going to call &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_mask&lt;/code&gt;.  Using this mask, we can write our address
wrapping code as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the only trick is to figure out how to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_mask&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are also a couple of rules associated with address wrapping that play
into this as well.  For example, when using address wrapping the first burst
must be aligned.  Similarly, only burst lengths of 2, 4, 8, and 16 are
supported, corresponding to &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt; values of 1, 3, 7, and 15 respectively.
We’ll write these rules out in a moment later.&lt;/p&gt;

&lt;p&gt;For now, we can calculate our wrap address via,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;all-put-together&quot;&gt;All put together&lt;/h2&gt;

&lt;p&gt;We’ve now learned how to calculate the next address of an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; transaction from the last one.  If
you put &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;all of this code
together&lt;/a&gt;,
you’ll get something looking like the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`default_nettype&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//
//
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxi_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1b, 2b, 4b, 8b, etc
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fixed, incr, wrap, reserved
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// verilator lint_off WIDTH
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// verilator lint_on WIDTH
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Align any subsequent address
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// verilator lint_off SELRANGE
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// verilator lint_on  SELRANGE
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// WRAP!
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_incr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with this code, however, is that it takes up way too much logic.
You can see this by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yosys -p &lt;span class=&quot;s1&quot;&gt;&#39;read_verilog axi_addr.v; synth_xilinx; stat&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look at the tail end of the output, you’ll find that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;this
design&lt;/a&gt;
requires the following logic elements:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   Number of cells:                392
     LUT1                            5
     LUT2                           52
     LUT3                           15
     LUT4                           27
     LUT5                            3
     LUT6                           89
     MUXCY                          74
     MUXF7                          43
     MUXF8                           4
     XORCY                          80&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can do better.  Indeed, we can do &lt;em&gt;much&lt;/em&gt; better.&lt;/p&gt;

&lt;h2 id=&quot;formal-properties&quot;&gt;Formal properties&lt;/h2&gt;

&lt;p&gt;So, while preparing this article, I spent some time trying to optimize &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;this
address calculator&lt;/a&gt;
to both make it simpler, and to lower the amount of logic it uses.  Along the
way, I made some amazing optimizations and managed to get
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;this core&lt;/a&gt;
down to fewer than 67 elements.  After beating my chest for way to long, I went
back back to try to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt;
some of my cores that used &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;this address
calculator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;This one failed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I was stuck.  Which optimization failed, and how do I roll back just the
right ones?&lt;/p&gt;

&lt;p&gt;It was time to turn to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7: A basic miter circuit, to prove two cores are equivalent&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-miter.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal verification&lt;/a&gt;
in this context was a bit different from many of the other proofs I’ve done,
primarily because what I wanted to do was to make sure that when I optimized
my work, the result doesn’t change.  Ideally, what I’d like to be able to do
is something like comparing two cores,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;one optimized&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;one not&lt;/a&gt;,
to prove that the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;optimized
one&lt;/a&gt;
still does the same thing as the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;reference
design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; can do this too.&lt;/p&gt;

&lt;p&gt;The basic setup is shown in Fig. 7 on the right.  First, I created a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/axi_addr_miter.v&quot;&gt;miter
circuit&lt;/a&gt;–one
with both the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;reference address calculation code&lt;/a&gt; as well as the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;optimized code
I was testing&lt;/a&gt;.
We’ll call these &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; for &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;reference address
calculator&lt;/a&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;uut&lt;/code&gt; for the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;unit under
test&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_addr_miter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1b, 2b, 4b, 8b, etc
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fixed, incr, wrap, reserved
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me pause here for a moment, since &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; is going to become a very important
part of our logic in a moment.&lt;/p&gt;

&lt;p&gt;If you ever look through a piece of
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
generated &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
code like &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;this
one&lt;/a&gt;,
you’ll see things like &lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/code&gt;.  You
might read these as the address width and data width respectively associated
with the slave interface.  I personally try to avoid these parameter names
if I can, just because I try to fit my logic on an 80-column display and these
long names make my task more difficult.  So, instead of using very expressive
terms like these, I regularly use &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; for address width and &lt;code class=&quot;highlighter-rouge&quot;&gt;DW&lt;/code&gt; for data
width.  In this case, the two are the same.  (Normally I’d using &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; to
reference a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
address width, which as we’ve discussed above doesn’t include the
subword address bits.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; is a value derived from the data width.  It’s designed so that a
&lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; of 0 is equivalent to a &lt;code class=&quot;highlighter-rouge&quot;&gt;DW==8&lt;/code&gt;, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ==1&lt;/code&gt; is equivalent to a
&lt;code class=&quot;highlighter-rouge&quot;&gt;DW==16&lt;/code&gt; and so forth.  It has the same representation as &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt;, but rather
describes the maximum &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt; the bus can hold.  Two &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; values that will
be of high interest to me are &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ==2&lt;/code&gt;, corresponding to a bus width of
32-bits, and &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ==3&lt;/code&gt;, corresponding to a bus width of 64-bits.&lt;/p&gt;

&lt;p&gt;You’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; often in the discussion that follows.&lt;/p&gt;

&lt;p&gt;Now we can return to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/axi_addr_miter.v&quot;&gt;miter
circuit&lt;/a&gt;,
and show the instantiations of our two designs, both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;reference&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The reference address calculator
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;ref_incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ref_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;faxi_addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref_incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and our &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;uut, or unit under
test&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The optimized address calculator, our &quot;unit-under-test&quot;
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;uut_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;axi_addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;uut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uut_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, I could’ve created my two assertions and been done.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uut_incr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uut_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only problem with this quick approach is that the inputs need to be
constrained.  Many of the possible input values are disallowed by the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; specification.  What we really want
to do is to assert that the two circuits produce identical results for &lt;em&gt;valid&lt;/em&gt;
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; burst transactions values.&lt;/p&gt;

&lt;p&gt;Let’s work through some possible restrictions.&lt;/p&gt;

&lt;p&gt;We already known that bursts may be fixed, incrementing or wrapped.  An
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_burst&lt;/code&gt; value of &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b11&lt;/code&gt;, the third possibility, is illegal as per the spec.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a similar fashion, the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt; input can only ever specify a transaction
width equal to or smaller than the current bus size.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also know that, for wrapping bursts, the length of the burst may only ever
be 2, 4, 8, or 16 beats.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt; is one less than the total number of
transfers, this turns into a restriction that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_len&lt;/code&gt; must be 1, 3, 7, or 15.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The specification also says that wrapped bursts must be aligned.  So lets
check for alignment on the incoming address.  Remember the master rule of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;:
&lt;em&gt;assume&lt;/em&gt; inputs, &lt;em&gt;assert&lt;/em&gt; any local state and outputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Determine if the incoming address is aligned
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;3&#39;b111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we can tell whether or not the address is aligned, we can assume that
any wrapped addresses are properly aligned on entry.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aligned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one final bit of tweaking required.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; addresses are not allowed to wrap
over 4kB boundaries.  That means that only the bottom twelve bits will ever be
allowed to change.&lt;/p&gt;

&lt;p&gt;This suggests a quick and valuable simplification, one that would force any
address bits above 12 to be constant across a burst:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with doing this is that my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;reference address
calculator&lt;/a&gt;
doesn’t have this code.&lt;/p&gt;

&lt;p&gt;The reason why the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;reference&lt;/a&gt;
doesn’t make certain that the top addresses are
constant is that I’d like to use an assertion in my new
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;
formal property file to make certain the address pointer never wraps across
a 4kB.  In other words, my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxi_addr.v&quot;&gt;reference&lt;/a&gt;
requires that addresses be able to cross 4kB boundaries so I can detect
a problem, whereas my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;optimized
code&lt;/a&gt;
won’t let things wrap.&lt;/p&gt;

&lt;p&gt;A basic simplifying assumption will keep us from testing the 4kB wrap.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we’ve written it, our address calculator is highly parameterizable across
a wide variety of bus widths, &lt;code class=&quot;highlighter-rouge&quot;&gt;DW&lt;/code&gt;.  To capture this, we’ll define a series
of tasks within our &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
prf8
prf16
prf32
prf64
prf128
prf256
prf512
prf1024&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each task corresponds to a different bus width, which we can set using the
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_chparam.html&quot;&gt;chparam&lt;/a&gt; command within the
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt; script section of our
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; configuration file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[script]
read -formal axi_addr.v
read -formal faxi_addr.v
read -formal axi_addr_miter.v
prf8:    chparam -set DW    8 axi_addr_miter
prf16:   chparam -set DW   16 axi_addr_miter
prf32:   chparam -set DW   32 axi_addr_miter
prf64:   chparam -set DW   64 axi_addr_miter
prf128:  chparam -set DW  128 axi_addr_miter
prf256:  chparam -set DW  256 axi_addr_miter
prf512:  chparam -set DW  512 axi_addr_miter
prf1024: chparam -set DW 1024 axi_addr_miter

prep -top axi_addr_miter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re now ready to test any optimizations.  So let’s take a new look at the
code above to se if we can optimize the basic address calculator to use fewer
than 392 logic cells, while maintaining the same logic.&lt;/p&gt;

&lt;h2 id=&quot;making-optimizations&quot;&gt;Making Optimizations&lt;/h2&gt;

&lt;p&gt;Back at ORCONF 2017 in Hebden Bridge, I had the wonderful opportunity to meet
&lt;a href=&quot;https://twitter.com/jangray&quot;&gt;Jan Gray&lt;/a&gt;, an individual who had &lt;a href=&quot;http://fpga.org/2017/12/01/grvi-phalanx-update-presentation-at-the-7th-risc-v-workshop/&quot;&gt;managed to place
many&lt;/a&gt;
600?-&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;LUT&lt;/a&gt;
RISC-V &lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-cores&lt;/a&gt;
inside a &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.  I asked
him about how he managed to get his
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-cores&lt;/a&gt;
so small.  Among other pieces of advice he gave, one which we’ll work with
today is to, “Make every
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;LUT&lt;/a&gt; within your
design justify its existence.”&lt;/p&gt;

&lt;p&gt;So let’s apply that attitude to our code today, to see what or how we might
optimize it.&lt;/p&gt;

&lt;p&gt;Let’s start with the increment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What if we knew that, in a valid transaction, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt; would be less than
&lt;code class=&quot;highlighter-rouge&quot;&gt;3&#39;h2&lt;/code&gt; for a 32-bit bus?
Why examine all three bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt;, when you know the top bit will always
be zero?  Similarly, if the bus size is already 8-bits, then you already know
the increment can only ever be one.&lt;/p&gt;

&lt;p&gt;The following code captures some of these assumptions.  While it takes more
lines and appears more complex, the logic it generates may well be smaller.&lt;/p&gt;

&lt;p&gt;Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;$clog2(DW)-3&lt;/code&gt;–essentially our current bus size
but in the units of &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt;.  Further, as per the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI spec&lt;/a&gt;, we know that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size &amp;lt;= DSZ&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that if &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ[2]&lt;/code&gt; is high then we use the same logic we had before.&lt;/p&gt;

&lt;p&gt;Now let’s turn our attention to the wrap mask.&lt;/p&gt;

&lt;p&gt;Since we’re only going to use this value if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_burst == 2&#39;b10&lt;/code&gt;, and ignore
it otherwise, we can set it for all cases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Start with the default, minimum mask
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My initial approach to set the lower mask bits, &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_mask[i_size:0] = -1&lt;/code&gt;,
didn’t work with all of the Verilog parsers I use, so I decided to try using
a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;I normally discourage the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops within Verilog.  Most beginning
designers who use them treat them like they would a piece of C/C++ code,
when in actuality the &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;synthesis tool will unroll every loop creating more
logic with each
iteration.&lt;/a&gt;
When used poorly, loops end up creating much more
hardware logic than a good design would in practice.&lt;/p&gt;

&lt;p&gt;In this case, I wanted to create a different piece of logic to describe
each bit.  Therefore, I tried using a for loop to define each of the bits in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_mask&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After staring at this for a while, I realized there was no optimizations
within it for the maximum possible &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt; value.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; is a parameter,
and since the loop index value, &lt;code class=&quot;highlighter-rouge&quot;&gt;iB&lt;/code&gt;, is essentially a constant once the loop
logic is implemented, I could add a check into the for loop.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This check, &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ &amp;gt; iB&lt;/code&gt;, would allow the synthesis tool to remove any of the
unused possibilities, leaving &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_mask&lt;/code&gt; unchanged in this case.&lt;/p&gt;

&lt;p&gt;We still need to add in the next three bits to the mask, those dependent upon
the length of the burst.  When I did this before, I used a series of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;s.
If you look a bit closer, though, you’ll notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_len[3]&lt;/code&gt; will only
be high if all of the other &lt;code class=&quot;highlighter-rouge&quot;&gt;i_len[2:0]&lt;/code&gt; bits are already ones.  Similarly,
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_len[2]&lt;/code&gt; will only be high if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_len[1:0]&lt;/code&gt; is high, and so on down.  That
means we can calculate the next several bits of the &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_mask&lt;/code&gt; by simply
shifting &lt;code class=&quot;highlighter-rouge&quot;&gt;i_len[3:1]&lt;/code&gt; up to the right location.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;29&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why not check all of &lt;code class=&quot;highlighter-rouge&quot;&gt;i_len[3:0]&lt;/code&gt;?  Because we already know that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_len[0]&lt;/code&gt;
will be true for all possible wrap bursts.&lt;/p&gt;

&lt;p&gt;I also know that the addresses within a burst can never cross a 4kB boundary.
These upper address bits must be constant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I got to thinking … I already know that the initial address of any
burst with wrap addressing must be aligned from start to finish, so it really
doesn’t matter what the lower bits of this value are set to.&lt;/p&gt;

&lt;p&gt;This allowed me to back up and remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop entirely.  I then replaced
the shift line with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice throughout these optimizations that we’re primarily using logic based
upon constant values.  This helps to keep us from increasing the amount
of necessary logic, rather than decreasing it.&lt;/p&gt;

&lt;p&gt;The next block actually calculates the next address, as we’ve discussed above.
The first step, shown below, has really already been optimized.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This brings us to our alignment code, where we force the next address to be
word aligned based upon both &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My first attempt to align the next address was to switch our &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;cascaded if
statement to a case
statement&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Align any subsequent address
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3&#39;b001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3&#39;b011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3&#39;b100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3&#39;b101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3&#39;b110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;3&#39;b111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This helped, and performed okay, but I thought I might be able to do better.&lt;/p&gt;

&lt;p&gt;Remembering that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt; must always be &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size &amp;lt;= DSZ&lt;/code&gt;, I optimized this
for each of the possible ranges of bits in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt;.  For example, if
&lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ==0&lt;/code&gt;, the bus is then only &lt;code class=&quot;highlighter-rouge&quot;&gt;DW=8&lt;/code&gt;-bits wide, and nothing needs to be
done to align an address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Align any subsequent address
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, if &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ&lt;/code&gt; is less than two, then our bus size must be either
&lt;code class=&quot;highlighter-rouge&quot;&gt;DW=8&lt;/code&gt; bits or &lt;code class=&quot;highlighter-rouge&quot;&gt;DW=16&lt;/code&gt; bits.  In that case, alignment requires only checking
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_size[0]&lt;/code&gt; and clearing &lt;code class=&quot;highlighter-rouge&quot;&gt;o_next_addr[0]&lt;/code&gt; or leaving it alone.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we’ll get to a point of diminishing returns soon, we can still apply this
optimization to both &lt;code class=&quot;highlighter-rouge&quot;&gt;DSZ &amp;lt; 4&lt;/code&gt; and then just leave things as they were
otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;3&#39;b001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;3&#39;b011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;3&#39;b100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;3&#39;b101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;3&#39;b110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;mb&quot;&gt;3&#39;b111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;highlight&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-verilog&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;verilog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;The&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;couple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;are&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nearly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unchanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;The&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whether&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;==&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;err&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;err&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;since&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;know&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`i_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;==&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;err&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;already&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_burst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// WRAP!
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With each change, we can now run both &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;,
to &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;see if the change reduced the amount of
logic&lt;/a&gt;, as well as
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; to see if our change
broke our design or not.&lt;/p&gt;

&lt;p&gt;What about the logic count?  After all of this work tweaking and adjusting
things, how did we do?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   Number of cells:                 49
     LUT2                            1
     LUT3                           11
     LUT4                            5
     LUT5                            1
     LUT6                            7
     MUXCY                          11
     MUXF7                           1
     XORCY                          12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Given that we started with 392 cells, 49 is a tremendous improvement.&lt;/p&gt;

&lt;p&gt;But how many &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;LUTs&lt;/a&gt;
does this logic consume?  A 7-series
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
has 6 input &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;LUTs&lt;/a&gt;,
not &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT1&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT2&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT3&lt;/code&gt;s, and so on.  To make scoring logic usage a touch
more difficult, two &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT5&lt;/code&gt;s can be combined into a &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT6&lt;/code&gt;–provided that they
share the same five bit inputs.  Therefore, I’ll often summarize a logic count
by adding the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT6&lt;/code&gt;s to the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT5&lt;/code&gt;s, to the maximum of
the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT4&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT1&lt;/code&gt;s, to the maximum of the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT3&lt;/code&gt;s
and &lt;code class=&quot;highlighter-rouge&quot;&gt;LUT2&lt;/code&gt;s.  While this most certainly
overestimates the score, it does manage to capture some of the effects of
packing into our metric.&lt;/p&gt;

&lt;p&gt;Here’s the final logic score, therefore: before optimization we needed 171
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
6-&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;LUTs&lt;/a&gt;.  After
optimization, our new design can perform an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; addresses calculation using only 24
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;LUTs&lt;/a&gt; on a bus
having 32-data bits and 32-address bits.  That’s a reduction of over 7x,
so it was definitely worth our time.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; is certainly one of the most
complicated buses I’ve ever worked with.  It’s so complicated that I’m only
discussing &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; addressing today.
However, in order to properly respond to a bus request from an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; master, a slave core will need to
properly generate the addresses of any transaction it is responding to.&lt;/p&gt;

&lt;p&gt;One fascinating discovery I made along the way is that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s example AXI
slave&lt;/a&gt;
doesn’t even implement all of this logic.  Instead, it only implements
a 32-bit bus width and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size == 3&#39;b010&lt;/code&gt; addressing.  You’d think for the cost
of only 14 &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;LUTs&lt;/a&gt;,
the cost of implementing all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_size&lt;/code&gt; options, they might have included
the rest.&lt;/p&gt;

&lt;p&gt;Of course, since &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; is so complicated,
there’s still plenty more to discuss.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord
wills&lt;/a&gt;,
I’d like to return and present the bugs I’ve found in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s example AXI
slave&lt;/a&gt;
core, the formal property file’s I’ve managed to create in order to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
a (full) &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt; slave core, as well
as some of the other cores that became easy to build once I had the property
files to work with.&lt;/p&gt;

&lt;p&gt;These topics, however, will all need to wait for another day.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Remember now thy Creator in the days of thy youth, while the evil days come not, nor the years draw nigh, when thou shalt say, I have no pleasure in them (Ecc 12:1)&lt;/em&gt;</description>
        <pubDate>Sat, 27 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/04/27/axi-addr.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/04/27/axi-addr.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Project Ideas: PMod AMP2</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1.  Digilent&#39;s PMod AMP2&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;&lt;img src=&quot;/img/pmod-amp2.png&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Someone recently contacted me to ask how to build a design for their &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod
AMP2&lt;/a&gt;.
My response to him was to provide a list of projects, from very simple to
complex, of things he could do with his &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod
AMP2&lt;/a&gt;.
Indeed, I thought this list was so valuable and useful as a set of beginner
projects, that I thought I might share it here.&lt;/p&gt;

&lt;p&gt;Before starting, however, if you haven’t yet gone through &lt;a href=&quot;/tutorial&quot;&gt;my
tutorial&lt;/a&gt; to learn how to use buttons and
serial ports, and likewise how to
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulate&lt;/a&gt; and use
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;, you
should do that first.  You’ll need that background in a moment to keep things
from going wrong.&lt;/p&gt;

&lt;h2 id=&quot;preliminary-steps&quot;&gt;0. Preliminary Steps&lt;/h2&gt;

&lt;p&gt;Before starting any project with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, or
any other digital electronics project for that matter, there’s always a
first step: gather the information you need.  I usually create a project
directory, and a subdirectory of that directory that contains these reference
files.  Specific files you will want to gather include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The schematic for your board(s).  This includes not only the schematic for
your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
base or development board, but also the schematic for any
peripheral boards you might wish to use.&lt;/p&gt;

    &lt;p&gt;In this case, you would want a copy of the &lt;a href=&quot;https://reference.digilentinc.com/_media/reference/pmod/pmodamp2/pmodamp2_sch.pdf&quot;&gt;schematic for the PMod
AMP2&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The data sheets for all of the parts on the board.&lt;/p&gt;

    &lt;p&gt;For this, you can usually work your way through the schematic to find the
part IDs.  On a good schematic, these will be listed–often next to the
the various chips on the schematic.  You can usually take the cryptic
number and google it to get the data sheet.&lt;/p&gt;

    &lt;p&gt;In the case of the &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod
AMP2&lt;/a&gt;, there’s only
one IC on the board.  This IC is marked with “IC1” (integrated circuit chip
number one) and “SSM2377”.  A &lt;a href=&quot;https://www.google.com/search?q=ssm2377&quot;&gt;quick google search for SSM2377&lt;/a&gt; yields &lt;a href=&quot;https://www.analog.com/media/en/technical-documentation/data-sheets/ssm2377.pdf&quot;&gt;this
data sheet for the Analog Devices Filterless, High Efficiency, Mono 2.5W
class D audio amplifier&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any other documentation for your board(s): user guides, reference manuals
and so forth.&lt;/p&gt;

    &lt;p&gt;Over time, I have found &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; to be
really good with their documentation.  Every device I have purchased from
them has had a reference page, and the &lt;a href=&quot;https://reference.digilentinc.com/reference/pmod/pmodamp2/start&quot;&gt;PMod AMP2 is no
different&lt;/a&gt;.
The page often has links to tutorials and example project code as well.
There’s even a &lt;a href=&quot;https://refernce.digilentinc.com/reference/pmod/pmodamp2/reference-manual&quot;&gt;reference sheet&lt;/a&gt;,
that you’ll want to print (to a file) for your records as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll need these items during your subsequent design, and once your board gets
old enough they’ll become hard to find.  Projects vanish, links move, etc.
Worse, if your board eventually gets replaced with another board, you may
grab the reference material for the new board and not notice the difference.
By grabbing this information first, before anything else, and by keeping a copy
with your project, you’ll keep yourself from having this problem.&lt;/p&gt;

&lt;h2 id=&quot;pin-discovery&quot;&gt;1. Pin Discovery&lt;/h2&gt;

&lt;p&gt;If you know your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
or if you are an old hand at digital circuitry, you may be able to breeze
through this step.  For me, I’m always struggling to figure out which I/O pin
on my board connects to which pin on an external
peripheral.  Mapping these together can be tedious, but it needs to be
done carefully and done right to avoid any potential short circuits.&lt;/p&gt;

&lt;p&gt;Often, a board will come with a master constraint file.  (You did copy this
in the first step when you bought your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
board, right?)  This will work for all of the on-board peripherals–except
things with bidirectional names.  For example, which
direction does the “TX” wire go between your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
and another chip, such as an &lt;a href=&quot;https://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf&quot;&gt;FTDI USB-UART&lt;/a&gt; chip?  Does it “transmit” from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
to the &lt;a href=&quot;https://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf&quot;&gt;FTDI&lt;/a&gt;, or is it the “transmit” pin from the &lt;a href=&quot;https://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf&quot;&gt;FTDI
USB-UART&lt;/a&gt;
chip to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;This problem can be compounded by the Pmod you are working with, if the pins
on the PMod aren’t well labeled.&lt;/p&gt;

&lt;p&gt;Often, you can find a particular pin with a square pad.  This is pin one,
and it should help you figure out which schematic pin names map to which
physical &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
I/O pad.&lt;/p&gt;

&lt;p&gt;From this, create/adjust your master constraint file.  (Don’t forget to keep
a copy of the original!)&lt;/p&gt;

&lt;p&gt;You can do this the hard way too.  Set a pin to be an output, and then drive
the pin high.  Use your voltmeter to then figure out which pin (or pins) is
at the right voltage.  You can then set the pin low and see which pin changes.&lt;/p&gt;

&lt;p&gt;Or, you can do what &lt;a href=&quot;https://twitter.com/oe1cxw&quot;&gt;one person&lt;/a&gt; did: Force each
pin to be a &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;serial port
transmitter&lt;/a&gt;
with a different message, and then take another board and read off the pin
mapping from there.&lt;/p&gt;

&lt;h2 id=&quot;your-first-design-a-voltage-controller-with-no-audio&quot;&gt;2. Your first design: a voltage controller with no audio&lt;/h2&gt;

&lt;p&gt;We’ve &lt;a href=&quot;/dsp/2017/09/04/pwm-reinvention.html&quot;&gt;discussed the PModAMP2
before&lt;/a&gt;.  Perhaps you
might remember that this was the design I &lt;a href=&quot;/dsp/2017/09/16/pwm-demo.html&quot;&gt;demonstrated my “improved” PWM
approach with&lt;/a&gt;.  The board
itself offers an analog lowpass filter, followed by an amplifier.  The basic
approach to sending “audio” to the board involves sending a high
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequency&lt;/a&gt;
signal whose proportion of 1’s to 0’s roughly matches the value of the audio
sample you are trying to send.&lt;/p&gt;

&lt;p&gt;For your very first design, skip the &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod
AMP2&lt;/a&gt;, and just
send your (would be) audio to the audio input pin of (what would be) the
&lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod AMP2&lt;/a&gt;s audio
input port.&lt;/p&gt;

&lt;p&gt;For example, you could set this port based upon a counter and a threshold.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THRESHOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THRESHOLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Set the threshold to 0, and then use your voltmeter.  You should be able to
read zero volts.  You can often find a suitable ground for your voltmeter
from the shield on the USB port.  Sometimes the screws for any standoffs are
connected to board ground.  If all else fails, there’s a ground pin on the
PMod connector itself–just don’t accidentally fumble finger your probe and
cross-connect that pin with the power pin right that’s next to it.  I’ve often
found that sticking a wire (or wires) inside the PMod port itself gives me
better access to the pins when making measurements like these.&lt;/p&gt;

&lt;p&gt;Now try setting the threshold to &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;hff&lt;/code&gt;.  You should be able to read something
close to 3.3V.  Now try &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h80&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h20&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;hc0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;an-adjustable-controller-but-still-no-audio-yet&quot;&gt;3. An adjustable controller, but still no audio yet&lt;/h2&gt;

&lt;p&gt;Before trying this next step, make certain you have a solid understanding of
&lt;a href=&quot;/blog/2017/08/04/debouncing.html&quot;&gt;debouncing&lt;/a&gt; and &lt;a href=&quot;/blog/2017/08/02/debounce-teaser.html&quot;&gt;why
it’s necessary&lt;/a&gt;.
I’m going to assume you have four switches to your board, and that their
outputs have been suitably
&lt;a href=&quot;/blog/2017/08/04/debouncing.html&quot;&gt;debounced&lt;/a&gt;
and &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;synchronized&lt;/a&gt;
to your system clock.  Buttons would work as well, if you have enough fingers
to push them and hold your voltmeter.&lt;/p&gt;

&lt;p&gt;If you have enough switches/buttons, why not adjust your design so that the
threshold from the last step is now variable?  We’ll test the design using
the voltmeter here again.&lt;/p&gt;

&lt;p&gt;For example, your design might now contain something that looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posedgde&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b1???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h44&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b01??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h88&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b001?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b0001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that, to do the last comparison right, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_audio&lt;/code&gt; must be declared as
an &lt;code class=&quot;highlighter-rouge&quot;&gt;output reg o_audio&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;output wire o_audio&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;your-first-sound&quot;&gt;4. Your first sound&lt;/h2&gt;

&lt;p&gt;If you’ve gotten this far, then it’s time to try a sound to see if it works.&lt;/p&gt;

&lt;p&gt;Are you ready to plug in your board?  Don’t forget to hold the &lt;code class=&quot;highlighter-rouge&quot;&gt;SHUTDOWN&lt;/code&gt; pin
high (inactive).  You might want to leave the gain low initially, or even
control it from a button.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_shutdown_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_gain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debounced_button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s send &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;a
tone&lt;/a&gt; to
this board.  It won’t be a nice tone, it won’t be a pretty tone, but it will at
least let you know that your &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod
AMP2&lt;/a&gt;
works and that you have the PMod pins wired correctly.&lt;/p&gt;

&lt;p&gt;To do this, we’ll go back to the counter, and adjust its step size based upon
your board’s &lt;code class=&quot;highlighter-rouge&quot;&gt;CLOCK_FREQUENCY_HZ&lt;/code&gt; and your desired &lt;code class=&quot;highlighter-rouge&quot;&gt;TONE_FREQUENCY_HZ&lt;/code&gt;.
(You’ll need to look these up and set them appropriately yourself.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;COUNTER_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNTER_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COUNTER_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TONE_FREQUENCY_HZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCK_FREQUENCY_HZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COUNTER_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what &lt;code class=&quot;highlighter-rouge&quot;&gt;TONE_FREQUENCY_HZ&lt;/code&gt; to start with?  &lt;a href=&quot;https://en.wikipedia.org/wiki/A440_(pitch_standard)&quot;&gt;How about &lt;code class=&quot;highlighter-rouge&quot;&gt;440.0Hz&lt;/code&gt;?  This is the
frequency of the basic tuning &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; in the first octave above middle C that
many instrumentalists will use to tune their instruments
with&lt;/a&gt;.  Want to go up an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Octave&quot;&gt;octave&lt;/a&gt;?
Double the &lt;code class=&quot;highlighter-rouge&quot;&gt;TONE_FREQUENCY_HZ&lt;/code&gt;.  Want to go down an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Octave&quot;&gt;octave&lt;/a&gt;?
Halve it.&lt;/p&gt;

&lt;p&gt;If you haven’t been
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulating&lt;/a&gt;
your designs, now is a good time to start.
The problem you’ll have is that you might struggle to “see” the output waveform.
Not a problem, take a &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;box car
filter&lt;/a&gt; and filter your
signal until it &lt;a href=&quot;/dsp/2017/07/24/dsp-debugging.html&quot;&gt;looks reasonable in
GTKWave&lt;/a&gt;.  You may
need to filter it several times over.&lt;/p&gt;

&lt;h2 id=&quot;a-prettier-sound&quot;&gt;5. A prettier sound&lt;/h2&gt;

&lt;p&gt;The problem is that a square wave just doesn’t sound all that pretty on the
ear.  Can we do any better?&lt;/p&gt;

&lt;p&gt;Sure we can!  Let’s use a &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;table lookup based sine
wave&lt;/a&gt;.
A basic 8-pt table shouldn’t be too difficult.  You can find a discussion
about &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;how to build one of these
here&lt;/a&gt;,
and an &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;example program that does this and more
here&lt;/a&gt;.  Once you have the table, your
audio logic will now look something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sintable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To get a nice quality 8-bit sample output, lets run it through the &lt;a href=&quot;/dsp/2017/09/04/pwm-reinvention.html&quot;&gt;“improved
PWM” method we’ve already
discussed&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;offset_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pwmcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;brevcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pwmcounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwmcounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;brevcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwmcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brevcounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should now have a nice quality sounding tone coming out of your device.&lt;/p&gt;

&lt;p&gt;You may find it to be obnoxiously loud, however, and this design gives you
no control of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;amplitude (volume)&lt;/a&gt;.
So, let’s adjust the &lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;amplitude&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;adjustable-volume&quot;&gt;5. Adjustable Volume&lt;/h2&gt;

&lt;p&gt;If you have hardware that will support multiplies (Xilinx, Intel, ECP5, some
ice40s, etc), then &lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;volume&lt;/a&gt;
adjustment is easy.  Simply multiply by the chosen volume, and shift right.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VOLUME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h1f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VOLUME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can even use the buttons / switches as before to adjust the volume, just
as we did when adjusting the voltage earlier.&lt;/p&gt;

&lt;p&gt;But what if you have an iCE40 hx8k, or 1k
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
with no internal hardware multiplies?  How will you then adjust the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;volume&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;In this case, the easy way is to shift your sample by some power of two.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Set your volume register somehow ...
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Then,
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;3&#39;b111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinesample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila, coarse grained &lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;volume&lt;/a&gt; control!&lt;/p&gt;

&lt;h2 id=&quot;swept-tone&quot;&gt;5. Swept Tone&lt;/h2&gt;

&lt;p&gt;Did you know that if you adjust the phase step on every sample, the tone will
sweep up or down?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The curious thing about this design is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequency&lt;/a&gt;
will sweep up, much like you expect, but then it will start
&lt;em&gt;sweeping back down&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Try it!  Can you explain why?&lt;/p&gt;

&lt;h2 id=&quot;adjustable-frequency&quot;&gt;6. Adjustable Frequency&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. An Octave on the Piano&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/piano-octave.png&quot; alt=&quot;&quot; width=&quot;233&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With a little bit of work, and some table lookups, we can adjust the
output &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequency&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;For example, there are eight notes in a scale.  If you check &lt;a href=&quot;https://en.wikipedia.org/wiki/Piano_key_frequencies&quot;&gt;Wikipedia’s
piano key frequency&lt;/a&gt;
page, you’ll discover the &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequencies&lt;/a&gt;
of a scale in the key of C are: &lt;code class=&quot;highlighter-rouge&quot;&gt;261.6&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;293.6&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;329.6&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;349.2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;391.9&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;440.0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;493.9&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;523.25&lt;/code&gt;.  Why not
create a design that steps through these output frequencies at two per second?&lt;/p&gt;

&lt;p&gt;You’d need a &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;half second
timer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HALF_SECOND_STEP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCK_FREQUENCY_HZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;half_second_timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;half_second_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;half_second_timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;half_second_timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HALF_SECOND_STEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll also need a state machine, running from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; and back again to
capture the pitch number of interest:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;half_second_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll then need a table lookup, to get the values you want:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COUNTER_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;261.6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCK_FREQUENCY_HZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COUNTER_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;293.6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCK_FREQUENCY_HZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_OCTAVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP_OCTAVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that you have various states, it’s a good time to make certain you are
both
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
and
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulating&lt;/a&gt;
your design before it goes onto your board.  Your ears will thank you.&lt;/p&gt;

&lt;h2 id=&quot;playing-a-simple-song&quot;&gt;7. Playing a simple song&lt;/h2&gt;

&lt;p&gt;We now know all of the parts necessary to play a simple song: You can play
notes, coarsely adjust their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;volume&lt;/a&gt;, adjust their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequency&lt;/a&gt;,
and more.  Why not turn this into a song?&lt;/p&gt;

&lt;p&gt;You can, if you use a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM memory&lt;/a&gt;.
Remember using &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memories&lt;/a&gt;
from our &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;?
Let’s create a &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM
memory&lt;/a&gt; describing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;volume&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pitch_(music)&quot;&gt;pitch&lt;/a&gt;
of every point in this song.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;half_second_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;readmemh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;song.hex&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;songmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;songmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, I’m sure you will find anything and everything going wrong as
you try to create your &lt;code class=&quot;highlighter-rouge&quot;&gt;songmem&lt;/code&gt; memory.  You are testing everything in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt; first,
right?  You should be able to generate an audio file and “listen” to your
song before you place it on your board–or you might never figure out why your
board is or isn’t working.  If you aren’t familiar with
&lt;a href=&quot;https://sox.sourceforge.net&quot;&gt;SoX&lt;/a&gt;
it could easily be your good friend during this process.&lt;/p&gt;

&lt;h2 id=&quot;playing-some-harmony&quot;&gt;8. Playing some harmony&lt;/h2&gt;

&lt;p&gt;Now that you can play one audio file, why not two?  Why not two, three, or even
&lt;a href=&quot;https://en.wikipedia.org/wiki/Four-part_harmony&quot;&gt;four-part harmony&lt;/a&gt;?
To create &lt;a href=&quot;https://en.wikipedia.org/wiki/Four-part_harmony&quot;&gt;four-part harmony&lt;/a&gt;,
you’ll need four phase
counters, and varying step sizes according to the frequency of each.  (Be
careful not to place two notes at the same frequency!  You might not hear one
or the other.)&lt;/p&gt;

&lt;p&gt;Each of these phase counters will then go into the &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;sine wave lookup
table&lt;/a&gt;,
just like before.&lt;/p&gt;

&lt;p&gt;The next big difference is that we’ll take the outputs of the &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;sine wave
lookup&lt;/a&gt;
and create our final sample from their sum.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;uppers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soprano&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;lowers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tenor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uppers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with the above approach is &lt;a href=&quot;/dsp/2017/07/21/bit-growth.html&quot;&gt;bit
accumulation&lt;/a&gt;.  The sum of
two 8-bit numbers requires 9-bits, and the sum of two 9-bit numbers requires
10 bits.  You’ll want to make certain that you don’t “clip”, or distort
your sound, as you add these voices together.  Of course, this might also
adjust your audio when only one voice is output, so that’s another thing
to adjust.&lt;/p&gt;

&lt;h2 id=&quot;playing-a-sampled-audio-file&quot;&gt;9. Playing a sampled audio file&lt;/h2&gt;

&lt;p&gt;All of the above is great if you want to play sounds that come across like
computerized beeps, squeeks, chirps, and mary had a little lamb, but somehow
our &lt;a href=&quot;https://en.wikipedia.org/wiki/Four-part_harmony&quot;&gt;four-part harmony&lt;/a&gt;,
just didn’t quite sound right.&lt;/p&gt;

&lt;p&gt;What went wrong?&lt;/p&gt;

&lt;p&gt;The list is numerous.  Human voices don’t hold constant
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pitch_(music)&quot;&gt;pitches&lt;/a&gt;, they
vibrate in &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequency&lt;/a&gt;
near the right one.  When they move from one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequency&lt;/a&gt; to another, they do so
gradually.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;Volume&lt;/a&gt; comes in many
shades, crescendos and decrescendos are gradual, and I could go on.&lt;/p&gt;

&lt;p&gt;You might try &lt;a href=&quot;/dsp/2017/07/29/series-linear-interpolation.html&quot;&gt;interpolating&lt;/a&gt;
between &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequencies&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;volumes&lt;/a&gt;.
How about &lt;a href=&quot;/dsp/2018/03/30/quadratic.html&quot;&gt;quadratic&lt;/a&gt;?
You might find that &lt;a href=&quot;/dsp/2017/07/29/series-linear-interpolation.html&quot;&gt;interpolation&lt;/a&gt;
helps, but you might also want to do so at a faster step size than 2Hz.&lt;/p&gt;

&lt;p&gt;While I would challenge and encourage anyone to continue this thread,
I’d also like to offer some other ideas.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/homer-doh.png&quot; alt=&quot;&quot; width=&quot;408&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
often have on-board block RAM, such as the iCE40 hx8k which has 8kB
of RAM.  If we filled that RAM with 8-bit sampled audio values, we could
move from one sample to the next at 8kHz and play about a second of any sound.&lt;/p&gt;

&lt;p&gt;That’s enough for some recognizable doorbell’s, and perhaps even for
Homer to shout, Doh!&lt;/p&gt;

&lt;p&gt;How about using the &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash device found on most
FPGAs&lt;/a&gt; to hold your audio
samples?  We discussed &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;how to build a basic controller for a flash
device&lt;/a&gt; some time
ago.  If you chose to write audio samples to that device, reading those samples
from that device later should allow you to play any sound you want.  Even
better, since your typical flash device holds about 16MB, that should be enough
to hold a &lt;em&gt;half an hour&lt;/em&gt; of sampled audio.&lt;/p&gt;

&lt;p&gt;The only thing is … once you get this far, the project becomes a big enough
challenge that I can’t tell you how to do all of the pieces in the few lines
we have left below.&lt;/p&gt;

&lt;h2 id=&quot;cpu-audio&quot;&gt;10. CPU audio&lt;/h2&gt;

&lt;p&gt;If you have any interest at all in using a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core CPU&lt;/a&gt; on your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
this may be the time to try it.  There’s many ways to do
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
based audio, but I’ll warn you: It’s not as easy as it looks.&lt;/p&gt;

&lt;p&gt;You’ll need to build an audio device with a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus interface&lt;/a&gt;.
You can control each sample, by having the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
write a sample value to this device.  You may also wish to place a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; in your audio device
as well.&lt;/p&gt;

&lt;p&gt;Here are some of the approaches you can try:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Have the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;poll&lt;/a&gt; the audio
device.  Wait in a tight loop, reading from the audio device’s control
register(s), until you read from the audio device’s control register a
value telling you it needs a new sample, and then feed it one.
Repeat while you have samples left, then set the device to zero.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;Interrupt&lt;/a&gt; driven audio.  By this
I’m referring to something very similar to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;polled approach&lt;/a&gt;
above, only this time don’t wait in the tight loop.  Either put the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to sleep waiting on an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
or go on and do something else.  Then when an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; occurs, reset the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; line and feed the
audio device a new sample.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is &lt;em&gt;so&lt;/em&gt; much to be learned in this exercise.  For example,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; driven audio at
8kHz while doing something else might require more cycles than your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; has.  One way
to deal with this is to place a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; into your audio
driver, and only &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; when
the &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; is half empty.
You can then send a
half-&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;s
worth of information to the audio driver and go back to what you were doing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may find that &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
driven audio is still too slow for what you need to do.  In that case, why
not use a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA
engine&lt;/a&gt;,
and teach the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
engine to fill the audio driver with samples every time the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
gets below some watermark?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of my earlier &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;ZipCPU projects&lt;/a&gt; involved
“ringing a doorbell” from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
by having it play a &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/dev/samples.c&quot;&gt;sampled&lt;/a&gt; doorbell audio sound through the
&lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod AMP2&lt;/a&gt;.
In my case, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
was &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;running from flash&lt;/a&gt;,
and really struggled to keep up with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; driven sample by sample
audio.  I learned a lot by learning how to place some of my software in flash,
other parts in block RAM, and then how to create a basic &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/zipos/syspipe.c&quot;&gt;software
“pipe”&lt;/a&gt;
so the audio “program” didn’t need to perpetually fill the (software) FIFO.&lt;/p&gt;

&lt;p&gt;It was a fun exercise for me, and a &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;challenge for a Spartan 6
LX4&lt;/a&gt; of all devices.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you’ve never worked with an audio peripheral before, there’s a lot you can
learn about by doing so.  I/O connectivity, &lt;a href=&quot;/dsp/2017/09/04/pwm-reinvention.html&quot;&gt;Pulse-Width
Modulation&lt;/a&gt;, &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;sinewave
table lookups&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency&quot;&gt;frequency&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude&quot;&gt;volume&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Harmony&quot;&gt;harmony&lt;/a&gt;,
&lt;a href=&quot;/dsp/2018/01/16/interpolation-is-convolution.html&quot;&gt;interpolation&lt;/a&gt;, and more–the list
just goes on.  There’s lots of stuff to learn here, and the example projects
suggested above are just the bare beginnings of what you might do.&lt;/p&gt;

&lt;p&gt;I’ll admit, this article doesn’t follow my usual style.  Usually, I like to
write articles about how to perform some task, or build some element.  I
describe the task, walk through an outline of it, then through the code
and
&lt;a href=&quot;/formal/formal.html&quot;&gt;formal properties&lt;/a&gt;.  While I’ve
tackled some fairly complex problems in this fashion on the
&lt;a href=&quot;&quot;&gt;ZipCPU blog&lt;/a&gt;, it often leaves beginners wondering
where to start to try things myself.  So, I thought a list of baby steps from
nothing to something significant, like the steps above, might be useful.&lt;/p&gt;

&lt;p&gt;Let me know what you think.  (I also recommend &lt;a href=&quot;https://www.fpga4fun.com&quot;&gt;fpga4fun.com&lt;/a&gt; for picking up fun/sample projects.)&lt;/p&gt;

&lt;p&gt;The one big thing missing from the discussion above is the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.
I personally struggle to build designs at all without some form of
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
allowing me access into the registers within a given design.  This is how
I go about programming Flash devices, loading programs into the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;,
and more.  It’s also how I &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;normally go about
debugging&lt;/a&gt;
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
projects I’m working on that pass &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; and
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
but still don’t quite do what I want.&lt;/p&gt;

&lt;p&gt;I skipped the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
however, since the individual who originally asked the question of me had a
&lt;a href=&quot;https://nandland.com/goboard/introduction.html&quot;&gt;GO board&lt;/a&gt;.  The
&lt;a href=&quot;https://nandland.com/goboard/introduction.html&quot;&gt;GO board&lt;/a&gt;
only has a rough 1k LUTs, and you may find it a challenge to place a
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
into 1k LUTs.  It’s not impossible, but it’s not going to be easy either.&lt;/p&gt;

&lt;p&gt;I look forward to hearing from you: would you like more of these project
lists, going from scratch to a simple capability with a particular piece of
hardware?&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Also I heard the voice of the Lord, saying, Whom shall I send, and who will go for us? Then said I, Here am I; send me. (Is 6:8)&lt;/em&gt;</description>
        <pubDate>Wed, 24 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/04/24/pl-pmodamp2.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/04/24/pl-pmodamp2.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Applying Formal Methods to the Events of the Resurrection</title>
        <description>&lt;p&gt;In honor of &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;Resurrection
Day&lt;/a&gt; this year,
let’s take a moment to apply formal methods in reverse, as though we were
detectives, in order to back out the timeline of the week when Christ
was crucified.&lt;/p&gt;

&lt;p&gt;Specifically, I’d like to investigate the timing of a couple of events
that took place leading up to Resurrection day.  These events include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The last supper,&lt;/li&gt;
  &lt;li&gt;The night of prayer in Gethsemane,&lt;/li&gt;
  &lt;li&gt;The crucifixion,&lt;/li&gt;
  &lt;li&gt;The time He spent in the tomb, and&lt;/li&gt;
  &lt;li&gt;The visit to the tomb early on Sunday morning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can express these events as inputs to a design, so we’ll constrain them
using assumptions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;resurrection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_prepare_spices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_request_guards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_resurrection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may notice that I’ve added a couple other items into the timeline as well,
such as when the chief priests requested guards for the temple and when the
women prepared the spices they then later brought to the tomb.  We’ll discuss
these more as we go along.  I’ve also added in inputs for the preparation
days and the Sabbath(s), because those will become important in this discussion
as well.&lt;/p&gt;

&lt;p&gt;Our goal will be to let the formal tool, in this case
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt; as a front-end for
the &lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;yices&lt;/a&gt; engine, solve for the timing of these
events, subject to the formal constraints we’ll discuss below.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-framework-for-our-events&quot;&gt;Creating a framework for our events&lt;/h2&gt;

&lt;p&gt;Part of the goal here is to determine when events took place.  This means
that we need a structure we can use to describe the events of interest.&lt;/p&gt;

&lt;p&gt;We’ll also use synchronous logic, and so that means that we’ll start with the
clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;.  Let’s assume that it has a period of twice
per day, with the rising edge at both dawn and dusk.  While I understand
that this will cause the duty cycle to vary somewhat, I’m not really
expecting any struggles to meet timing if we run the clock this slowly.&lt;/p&gt;

&lt;p&gt;This clock speed will also allow us to reason about whether an event happened
during the day or during the night.  To get there, we’ll use a counter to
describe time for us–to include which day of the week, Sunday, Monday,
Tuesday, etc., an event is taking place on.  We can do all of this with
a 14-state counter, such as the counter below that goes from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; on Sunday
to &lt;code class=&quot;highlighter-rouge&quot;&gt;13&lt;/code&gt; on Saturday and back again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, in Jewish fashion dating back to the beginning,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And God called the light Day, and the darkness he called Night.
And the evening and the morning were the first day.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/1/5&quot;&gt;Gen 1:5&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we’ll count days that begin and end at sundown.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also assign days to counter values, so we can later make sense of the
trace &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;
will generate for us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sunday&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;monday&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tuesday&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wednesday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;thursday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;friday&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;saturday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_of_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fig. 1 below should give you an idea of what this might look like.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1.  Weekdays and daytimes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-weekdays.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now we can now couple this counter with inferences from the Bible.  For
example, we know that the Sabbath &lt;a href=&quot;https://www.blueletterbible.org/kjv/ex/20/9&quot;&gt;takes place on
Saturday&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saturday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also know that the Sabbath begins or ends at nighttime.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s see where this all leads us.&lt;/p&gt;

&lt;h2 id=&quot;it-all-starts-with-the-last-supper&quot;&gt;It all starts with the last supper&lt;/h2&gt;

&lt;p&gt;While I suppose we might start with the triumphal entry, I’d rather start our
reasoning off with the Last Supper:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now before the feast of the passover, when Jesus knew that his hour was
come that he should depart out of this world unto the Father, having
loved his own which were in the world, he loved them unto the end.  And
supper being ended, the devil having now put into the heart of Judas
Iscariot, Simon’s son, to betray him;
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/13/1&quot;&gt;John 13:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those not familiar with the Last Supper, this was the night when,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… he took bread, and gave thanks, and brake it, and gave unto them,
saying, This is my body which is given for you: this do in remembrance of me.
Likewise also the cup after supper, saying, This cup is the new testament in
my blood, which is shed for you.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/22/19&quot;&gt;Luke 22:19-20&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that’s not my point today.  Today, I just want to work through the order
of events.&lt;/p&gt;

&lt;p&gt;The Last Supper is then followed by an evening in the Garden of Gethsemane.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When Jesus had spoken these words, he went forth with his disciples over the brook Cedron, where was a garden, into the which he entered, and his disciples.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/18/1&quot;&gt;John 18:1&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this, we know that the last supper occurred in the day time,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and that it was followed by the night in Gethsemane.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This isn’t quite enough of a constraint to force the night in Gethsemane to
immediately (and only ever) follow &lt;code class=&quot;highlighter-rouge&quot;&gt;i_last_supper&lt;/code&gt;.  We also need to tell the
formal tool that the night in Gethsemane &lt;em&gt;only&lt;/em&gt; occurs following the
last supper, and never at any other time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_last_supper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-night-in-the-garden&quot;&gt;The night in the Garden&lt;/h2&gt;

&lt;p&gt;After the Last Supper, Jesus went to pray in the Garden of Gethsemane.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then cometh Jesus with them unto a place called Gethsemane, and saith unto the disciples, Sit ye here, while I go and pray yonder.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/26/36&quot;&gt;Matt 26:36&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was here, in the garden, that Luke, the &lt;a href=&quot;https://www.blueletterbible.org/kjv/col/4/14&quot;&gt;beloved
physician&lt;/a&gt;, records that
his prayers were so agonizing that He sweat blood.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And being in an agony he prayed more earnestly: and his sweat was as it were
great drops of blood falling down to the ground.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/22/44&quot;&gt;Luke 22:44&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We know this took place at night because, among other things, his disciples
were struggling to stay awake.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And he came and found them asleep again: for their eyes were heavy.
And he left them, and went away again, and prayed the third time, saying
the same words.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/26/43-44&quot;&gt;Matt 26:43-44&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence, we can assume that the night in Gethsemane, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_gethsemane&lt;/code&gt;, only
took place during &lt;code class=&quot;highlighter-rouge&quot;&gt;nighttime&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may perhaps be wondering why I have chosen this backwards notation.
Could I not have instead said that, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_gethsemane |-&amp;gt; nighttime&lt;/code&gt;?
Probably.  However, I’m trying to capture the idea that the signal
I am assuming should be on the right hand of the implication.  Therefore, the
backwards notation is primarily to make plain which value I’m intending to
constrain with the assumption.&lt;/p&gt;

&lt;p&gt;Returning to the timeline, it was in Gethsemane that Jesus was betrayed and
arrested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then cometh he to his disciples, and saith unto them, Sleep on now,
and take your rest: behold, the hour is at hand, and the Son of man is betrayed into the hands of sinners.
Rise, let us be going: behold, he is at hand that doth betray me.&lt;/p&gt;

  &lt;p&gt;And while he yet spake, lo, Judas, one of the twelve, came, and with him a
great multitude with swords and staves, from the chief priests and elders
of the people.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/26/45-47&quot;&gt;Matt 26:45-47&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the next day, after a sham trial, the chief priests and elders led
Jesus to Pilate.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the morning was come, all the chief priests and elders of the people
took counsel against Jesus to put him to death: And when they had bound
him, they led him away, and delivered him to Pontius Pilate the
governor.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/27/1-2&quot;&gt;Matt 27:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I’m sure they would’ve loved to murder Him themselves, the Romans had
a law prohibiting the Jews from executing those they chose.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then said Pilate unto them, Take ye him, and judge him according to your
law. The Jews therefore said unto him, It is not lawful for us to put any
man to death:
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/18/31&quot;&gt;John 18:31&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, we might write that the day of the Crucifixion follows the
arrest in the Garden of Gethsemane.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_gethsemane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-day-of-the-crucifixion&quot;&gt;The Day of the Crucifixion&lt;/h2&gt;

&lt;p&gt;We know Jesus was crucified in the day time, for it is written that,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now from the sixth hour there was darkness over all the land unto the ninth
hour.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/27/45&quot;&gt;Matt 27:45&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the custom of the time, the time of day was measured from dawn,
rather than as we do today from midnight.  Therefore, this took place between
high noon and 3pm in the afternoon.&lt;/p&gt;

&lt;p&gt;We can capture this with the assumption that,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we know from the record that the next day was the Sabbath, primarily
because those who buried Him had to press to get Him into the tomb before the
Sabbath, lest His body remain on the cross all the next day.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And now when the even was come, because it was the preparation, that is,
the day before the sabbath, Joseph of Arimathaea, an honourable counsellor,
which also waited for the kingdom of God, came, and went in boldly unto
Pilate, and craved the body of Jesus.  And Pilate marvelled if he were
already dead: and calling unto him the centurion, he asked him whether
he had been any while dead.  And when he knew it of the centurion, he gave
the body to Joseph.&lt;/p&gt;

  &lt;p&gt;And he bought fine linen, and took him down, and wrapped him in the linen,
and laid him in a sepulchre which was hewn out of a rock, and rolled a
stone unto the door of the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/15/42-46&quot;&gt;Mark 15:42-46&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this we might conclude not only that the crucifixion didn’t take place
on a Sabbath,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but also that the day of the crucifixion was immediately followed by a Sabbath.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2.  Preparation day&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-preparation.svg&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We also know from this description that, in the language of the time, the
day prior to the Sabbath was called the “preparation day”.  Let’s assume
that this preparation day describes the &lt;em&gt;daylight&lt;/em&gt; portion of the day as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also know that the day following the preparation day is a Sabbath.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, no Sabbath shall take place unless it is preceded by a preparation
day.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the extra requirement here that this criteria only applies to the daytime.
Since the preparation day cannot take place at nighttime, based upon our
assumption above, without this extra condition there could be no Sabbaths.&lt;/p&gt;

&lt;p&gt;At one time I was going to declare the preparation day to be the day of the
Crucifixion.  I think I’ll just assert this instead, and so let the solver
do the proof for me.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, since there are things that happen after the crucifixion, let’s keep
track of those in two ways.  First, once the crucifixion has passed, then
Jesus had been crucified.  We can write this as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also know that He was only crucified once.  While this might seem
obvious to you and I, the formal tool does require this information.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;three-days-and-three-nights&quot;&gt;Three Days and Three Nights&lt;/h2&gt;

&lt;p&gt;Perhaps the most controversial part of all of this is including the prophecy
that Jesus was going to spend three days and three nights in the tomb.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For as Jonas was three days and three nights in the whale’s belly; so shall
the Son of man be three days and three nights in the heart of the earth.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/12/40&quot;&gt;Matt 12:40&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let’s count these out.  First, He enters the tomb following the crucifixion,
and then leaves it after three days and three nights.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The check is off by one from six, for the simple reason that we are reasoning
about the &lt;em&gt;next&lt;/em&gt; clock cycle, but more on that in a bit.&lt;/p&gt;

&lt;p&gt;For now, let’s count the days,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the nights when He is in the tomb.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_crucifixion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll know He was in the tomb for three days and three nights when these
two counters equal three.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;three_days&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buried_days&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;three_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buried_nights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can put our test together: If He’s been crucified, yet is no longer
in the tomb, then He must’ve been in the tomb for three days and three nights:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three_nights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This trace might therefore look like Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Jesus was in the tomb for three days and three nights&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-3days.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, why did we transition on &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; above?  Because we counted &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;
as our first time-step.  Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; are six steps.  If you examine the
trace in Fig. 3 at the right, you can see that,
yes, we did count three days and three nights as desired, until He was out
of the tomb.&lt;/p&gt;

&lt;p&gt;Yes, I’ve heard the arguments for fewer days.  The problem is that if He was
crucified on a Friday (the commonly proposed theory), then he would have been
in the ground for one day and two nights, not three days and three nights.  The
answer I’ve been given, that the ancient Greeks didn’t know how to count
properly just doesn’t hold water for me.  The historical record tells us
that people were &lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/7/24&quot;&gt;counting days as early as the
flood&lt;/a&gt;, and that by the time of
Christ they knew how to &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/25/27&quot;&gt;calculate
interest&lt;/a&gt;.
So, I don’t buy the argument that the ancient Greeks didn’t know how to count.&lt;/p&gt;

&lt;p&gt;Three days and three nights, therefore, must mean three days and three nights.&lt;/p&gt;

&lt;h2 id=&quot;the-spices-and-the-soldiers&quot;&gt;The Spices and the Soldiers&lt;/h2&gt;

&lt;p&gt;After Jesus was buried, certain women which came from Galilee went and prepared
spices, and then rested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And that day was the preparation, and the sabbath drew on.
And the women also, which came with him from Galilee,
followed after, and beheld the sepulchre, and how his body was laid.  And
they returned, and prepared spices and ointments; and rested the sabbath
day according to the commandment.  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/23/54-56&quot;&gt;Luke 23:54-56&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tells us that these women were devout in their faith, and so they wouldn’t
have prepared any spices on the sabbath.  We can also draw from this that
Jesus was in the tomb when they prepared the spices.  We also know that,
without artificial light, the spices would’ve been very difficult to prepare
anything, so they didn’t do this at night.  That leaves us with the following
assumption:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sabbath&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nighttime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_prepare_spices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, in order to check whether, on the Resurrection day, these spices had
been prepared or not, we’ll register a value to keep track that they had been
prepared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;spices_prepared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_prepare_spices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;spices_prepared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Preparing the spices&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-spices.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, while Jesus was in the tomb, the chief priests and Pharisees came to ask
for a guard to be posted,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now the next day, that followed the day of the preparation, the chief
priests and Pharisees came together unto Pilate,&lt;/p&gt;

  &lt;p&gt;Saying, Sir, we remember that that deceiver said, while he was yet alive,
 After three days I will rise again.
Command therefore that the sepulchre be made sure until the third day, lest
 his disciples come by night, and steal him away, and say unto the people,
 He is risen from the dead: so the last error shall be worse than the first.
Pilate said unto them, Ye have a watch: go your way, make it as sure as ye
 can.
So they went, and made the sepulchre sure, sealing the stone, and setting
 a watch.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/27/62-66&quot;&gt;Matt 27:62-66&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note here that, again, the three day prophecy is confirmed–even by those
who didn’t believe Him.  But I digress.&lt;/p&gt;

&lt;p&gt;While the following logic captures this idea of the day following the day
of preparation, it is perhaps more complicated than it needs to be.  The
reason for the extra complication is that the “preparation day” was the
day of the crucifixion, and the day after is not one time step later, but
rather two.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_preparation_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_after_preparation_day&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_request_guards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Guarding the Tomb&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/resurrection-guarded.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Following this request, we know the tomb was guarded, as shown in Fig. 5 on the
right.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_request_guards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this places the request on the Sabbath day.  In many ways,
I find it strange that the chief priests would go to Pilate on the Sabbath
day, but perhaps it’s no stranger than the rest of their actions that week.
For example, trying Jesus at night was already a violation of Jewish law.
If the chief priests were willing to violate one law in such a gross manner,
why should they be expected to hold to the rest of Jewish laws and customs?&lt;/p&gt;

&lt;h2 id=&quot;constraining-the-resurrection&quot;&gt;Constraining the Resurrection&lt;/h2&gt;

&lt;p&gt;We’d also like to determine when Jesus was resurrected.  Since this is
one of those things we want to determine, we want to make absolute certain
that it is only minimally constrained.  One obvious constraint would be
that He can’t be resurrected until He’s been crucified.  I’m going to
add one more, though: He can’t be resurrected unless He’s no longer in
the tomb.  Therefore,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crucified&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_resurrection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll go one step more, though, and add yet another constraint.
This one will pin down the exact time of the resurrection–to within the
structure of our timeline.  Specifically, let’s define &lt;code class=&quot;highlighter-rouge&quot;&gt;i_resurrection&lt;/code&gt;
as the first clock period when He’s no longer in the tomb.  Hence,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_resurrection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should be a sufficient constraint for the solver to match what
we might expect.&lt;/p&gt;

&lt;h2 id=&quot;resurrection-day&quot;&gt;Resurrection Day&lt;/h2&gt;

&lt;p&gt;This leaves us with one final set of constraints–the first day of the week
when the women come to the tomb to find Him gone.  This is well attested
by every one of the Gospels.&lt;/p&gt;

&lt;p&gt;Matthew:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the end of the sabbath, as it began to dawn toward the first day of the week, came Mary Magdalene and the other Mary to see the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/1&quot;&gt;Matt 28:1&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mark:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And when the sabbath was past, Mary Magdalene, and Mary the mother of James, and Salome, had bought sweet spices, that they might come and anoint him.
And very early in the morning the first day of the week, they came unto the sepulchre at the rising of the sun.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/16/1-2&quot;&gt;Mark 16:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luke:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now upon the first day of the week, very early in the morning, they came
unto the sepulchre, bringing the spices which they had prepared, and
certain others with them.
And they found the stone rolled away from the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/24/1-2&quot;&gt;Luke 24:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;John:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first day of the week cometh Mary Magdalene early, when it was yet dark,
unto the sepulchre, and seeth the stone taken away from the sepulchre.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/20/1&quot;&gt;John 20:1&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence, the morning visit to the tomb must have taken place on Sunday.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sunday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why was the &lt;em&gt;first&lt;/em&gt; day a Sunday, as opposed to any other day?  Because, it is
recorded in Exodus that,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Six days shalt thou labour, and do all thy work:
But the seventh day is the sabbath of the LORD thy God: in it thou shalt not
do any work, thou, nor thy son, nor thy daughter, thy manservant, nor thy
maidservant, nor thy cattle, nor thy stranger that is within thy gates:
For in six days the LORD made heaven and earth, the sea, and all that in
them is, and rested the seventh day: wherefore the LORD blessed the sabbath
day, and hallowed it.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/ex/20/9-11&quot;&gt;Ex 20:9-11&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever since the commandment, and perhaps even before as well, the seventh
day of the week has been maintained as the Jewish Sabbath.
We know today that this seventh day is Saturday, therefore the “first day
of the week” must be a Sunday.&lt;/p&gt;

&lt;p&gt;This isn’t all of it either.  We also know that when the women visited the tomb,
they found it empty.&lt;/p&gt;

&lt;p&gt;Matthew:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And, behold, there was a great earthquake: for the angel of the Lord descended from heaven, and came and rolled back the stone from the door, and sat upon it.
His countenance was like lightning, and his raiment white as snow:
And for fear of him the keepers did shake, and became as dead men.&lt;/p&gt;

  &lt;p&gt;And the angel answered and said unto the women, Fear not ye: for I know that ye seek Jesus, which was crucified.
He is not here: for he is risen, as he said. Come, see the place where the Lord lay.
And go quickly, and tell his disciples that he is risen from the dead; and, behold, he goeth before you into Galilee; there shall ye see him: lo, I have told you.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/2-7&quot;&gt;Matt 28:2-7&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mark:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And they said among themselves, Who shall roll us away the stone from the door of the sepulchre?&lt;/p&gt;

  &lt;p&gt;And when they looked, they saw that the stone was rolled away: for it was very great.&lt;/p&gt;

  &lt;p&gt;And entering into the sepulchre, they saw a young man sitting on the right side, clothed in a long white garment; and they were affrighted.
And he saith unto them, Be not affrighted: Ye seek Jesus of Nazareth, which was crucified: he is risen; he is not here: behold the place where they laid him.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/16/3-6&quot;&gt;Mark 16:3-6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luke:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And they found the stone rolled away from the sepulchre.
And they entered in, and found not the body of the Lord Jesus.&lt;/p&gt;

  &lt;p&gt;And it came to pass, as they were much perplexed thereabout, behold, two men stood by them in shining garments:
And as they were afraid, and bowed down their faces to the earth, they said unto them, Why seek ye the living among the dead?
He is not here, but is risen: remember how he spake unto you when he was yet in Galilee,
Saying, The Son of man must be delivered into the hands of sinful men, and be crucified, and the third day rise again.&lt;/p&gt;

  &lt;p&gt;And they remembered his words,
And returned from the sepulchre, and told all these things unto the eleven, and to all the rest.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/24/2-9&quot;&gt;Luke 24:2-9&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;John:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So they ran both together: and the other disciple did outrun Peter, and came
 first to the sepulchre.
And he stooping down, and looking in, saw the linen clothes lying; yet went
 he not in.&lt;/p&gt;

  &lt;p&gt;Then cometh Simon Peter following him, and went into the sepulchre, and seeth the linen clothes lie,
And the napkin, that was about his head, not lying with the linen clothes, but wrapped together in a place by itself.&lt;/p&gt;

  &lt;p&gt;Then went in also that other disciple, which came first to the sepulchre,
and he saw, and believed.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/20/4-8&quot;&gt;John 20:4-8&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, what do we know from the accounts of these witnesses?  We know
that the tomb was empty, that the women had prepared spices, that they came
to the tomb after dawn on a Sunday, and that the guards were still there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spices_prepared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sunday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daytime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_the_tomb&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tomb_guarded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_tomb_visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-resurrection-putting-it-all-together&quot;&gt;The Resurrection: Putting it all together&lt;/h2&gt;

&lt;p&gt;So what do you get when you put all of this together?&lt;/p&gt;

&lt;p&gt;Well first, if you don’t get your properties right, you’ll get a contradiction.
Worse, since most of our properties are assumptions, the contradiction will
end without a trace, you’ll simply see,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SBY 16:09:47 [resurrection_prf] engine_0.basecase: ##   0:00:00  Warmup failed!
SBY 16:09:47 [resurrection_prf] engine_0.basecase: ##   0:00:00  Status: FAILED&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That doesn’t help.&lt;/p&gt;

&lt;p&gt;However, if you bisect your assumptions, you’ll often find the problem.
The properties discussed above have been checked, so there are no (more)
contradictions within them.  Indeed, you can &lt;a href=&quot;https://github.com/ZipCPU/website/blob/master/examples/resurrection.sv&quot;&gt;check them out here if you would
like&lt;/a&gt;.
I’ve even posted the &lt;a href=&quot;https://github.com/ZipCPU/website/blob/master/examples/resurrection.sby&quot;&gt;SymbiYosys script for
reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, since we’re primarily running a cover proof, if the cover fails,
you might wish to back up and cover all of the steps leading up to the final
one.  When you find the point that fails, you can again bisect the assumptions
to find the one that is contradictory.  (Yes, I needed to do this too, although
I’ve since cleaned up these extraneous cover statements.)&lt;/p&gt;

&lt;p&gt;As an example of a contradictory property, if you assume that the Crucifixion
took place on a Friday, you would find no solution to these properties.&lt;/p&gt;

&lt;p&gt;When you put it all together, you’ll get something like Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6.  A formally generated timeline leading up to the Resurrection&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/resurrection-week.svg&quot;&gt;&lt;img src=&quot;/img/resurrection-week.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You’ll notice some very fascinating things about this figure that go contrary
to popular belief.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Jesus wasn’t crucified on a Friday.  A Friday crucifixion would’ve violated
several properties of the Biblical account.  First, no matter how you
count it, a Friday crucifixion would not have left him in the ground for
three days and three nights.  Second, had He been crucified on a Friday,
there would’ve been no time for the women to purchase and prepare their
spices–something that cannot be done on the Sabbath day.  Third, even the
chief priests expected something to happen on the &lt;em&gt;third&lt;/em&gt; day.&lt;/p&gt;

    &lt;p&gt;On the other hand, you might choose to find that this conclusion says a lot
about me.  For example, you might notice that I &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/15/3&quot;&gt;don’t much care what any
church says&lt;/a&gt; or teaches about
“Good Friday”–I care only about what the Bible teaches.  As a result, I
don’t suffer from any crisis of faith when I come across information
that might contradict what the Bible teaches: I just choose to believe
what the Bible says.&lt;/p&gt;

    &lt;p&gt;Incidentally, this is also the meaning of the word “epanorthosis” used in
&lt;a href=&quot;https://www.blueletterbible.org/kjv/2ti/3/16&quot;&gt;2Tim 3:16&lt;/a&gt;,
and translated as “correction”, when Paul uses it to describe the nature
of God’s words:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;All scripture is given by inspiration of God, and is profitable for
doctrine, for reproof, for correction, for instruction in righteousness:
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2ti/3/16&quot;&gt;2Tim 3:16&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Indeed, the &lt;a href=&quot;https://www.biblestudytools.com/lexicons/greek/nas/epanorthosis.html&quot;&gt;Greek Lexicon defines epanorthosis&lt;/a&gt; as: 1. Restoration
to an upright or right state, 2. Correction, improvement of life
or character.&lt;/p&gt;

    &lt;p&gt;In this case, we can &lt;em&gt;correct&lt;/em&gt; our understanding of the Resurrection by
simply paying attention to the Bible itself–as
&lt;a href=&quot;https://www.blueletterbible.org/kjv/2ti/3/16&quot;&gt;2Tim 3:16&lt;/a&gt;
suggests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jesus wasn’t in the tomb when the angel rolled the stone away.  Therefore
the actual resurrection must have occurred beforehand.&lt;/p&gt;

    &lt;p&gt;This actually corresponds to the Gospel accounts: when the angel rolled
the stone away, the women were invited to look into the tomb to verify
that it was indeed and already empty.&lt;/p&gt;

    &lt;p&gt;But then how did He get out?  Good question.  Let me answer that by
asking how He got into the upper room later that day:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Then the same day at evening, being the first day of the week,
when the doors were shut where the disciples were assembled for
fear of the Jews, came Jesus and stood in the midst, and saith unto
them, Peace be unto you.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/20/19&quot;&gt;John 20:19&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Personally, I judge walking through walls to be easier than rising from
the dead in the first place, so this theory of being able to walk through
the tomb walls doesn’t really bother me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There were two Sabbath days on crucifixion week.&lt;/p&gt;

    &lt;p&gt;Wait, what?  Saturday is the Sabbath!  How could there be two Sabbath days?!&lt;/p&gt;

    &lt;p&gt;As it turns out, Sabbath’s take place on more than just Saturdays.  Consider
this passage of Leviticus describing the Passover feast:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;In the fourteenth day of the first month at even is the LORD’s passover.
And on the fifteenth day of the same month is the feast of unleavened bread unto the LORD: seven days ye must eat unleavened bread.
In the first day ye shall have an holy convocation: ye shall do no servile work therein.
But ye shall offer an offering made by fire unto the LORD seven days: in the seventh day is an holy convocation: ye shall do no servile work therein.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/lev/23/5-8&quot;&gt;Lev 23:5-8&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;While I’m no expert in ancient Jewish customs, I will note that during this
week of the Passover, there are two specific days where no work is to be
done.  These would be rest days, also known as Sabbaths.  I would also note
that no enduring calendar is based upon weeks, nor could it be, since as
you and I both know there are 365 days in a year, which is just a touch
longer than 52 weeks per year.  Hence, in order to keep the year matching
the seasons, the 14th day of the first month would by necessity need to
wander through which day of the week it landed upon–forcing a Sabbath
rest on days other than Saturday alone.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;What conclusion should be drawn from this discussion of the Resurrection?
First, that the Resurrection happened.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/15/5-8&quot;&gt;Over 500 people saw and witnessed
the resurrected Christ&lt;/a&gt;.
Indeed, &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;Christianity would make no sense if there was no
Resurrection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second relevant point of the Resurrection follows Jesus’ explanation of
its importance:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There was a certain rich man, which was clothed in purple and fine linen,
  and fared sumptuously every day:
And there was a certain beggar named Lazarus, which was laid at his gate,
  full of sores,
And desiring to be fed with the crumbs which fell from the rich man’s table:
  moreover the dogs came and licked his sores.&lt;/p&gt;

  &lt;p&gt;And it came to pass, that the beggar died, and was carried by the angels
  into Abraham’s bosom: the rich man also died, and was buried;&lt;/p&gt;

  &lt;p&gt;And in hell he lift up his eyes, being in torments, and seeth Abraham afar
  off, and Lazarus in his bosom.
And he cried and said, Father Abraham, have mercy on me, and send Lazarus,
  that he may dip the tip of his finger in water, and cool my tongue; for I
  am tormented in this flame.&lt;/p&gt;

  &lt;p&gt;But Abraham said, Son, remember that thou in thy lifetime receivedst thy
  good things, and likewise Lazarus evil things: but now he is comforted,
  and thou art tormented.
And beside all this, between us and you there is a great gulf fixed: so that
  they which would pass from hence to you cannot; neither can they pass to
  us, that would come from thence.&lt;/p&gt;

  &lt;p&gt;Then he said, I pray thee therefore, father, that thou wouldest send him to
  my father’s house:
For I have five brethren; that he may testify unto them, lest they also come
  into this place of torment.&lt;/p&gt;

  &lt;p&gt;Abraham saith unto him, They have Moses and the prophets; let them hear them.&lt;/p&gt;

  &lt;p&gt;And he said, Nay, father Abraham: but if one went unto them from the dead,
  they will repent.&lt;/p&gt;

  &lt;p&gt;And he said unto him, If they hear not Moses and the prophets, neither will
they be persuaded, though one rose from the dead.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/16/19-31&quot;&gt;Luke 16:19-31&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rich man &lt;em&gt;begged&lt;/em&gt; for someone to come back from the dead to warn of
the torment waiting for those who have not believed.  God was kind enough to
grant the rich man’s wish.  As a result, we can now say that someone &lt;em&gt;has&lt;/em&gt;
come back from the dead.&lt;/p&gt;

&lt;p&gt;Tell me, was Abraham right?  Or will you hear hear the words of Jesus today?&lt;/p&gt;

&lt;p&gt;My third point is more personal: I know the Resurrection is true, because of
the change that has taken place in my own life once I chose to trust the
only Christ.  I was once a sinner, a liar, thief, and worse.  Once I chose
to trust the Lord, He transformed my life and I am now no longer the wicked
man I once was.&lt;/p&gt;

&lt;p&gt;Hallelujah!  Thank you, Lord Jesus, for changing my life.&lt;/p&gt;

&lt;p&gt;This change could be yours as well, if you chose to trust Him as I have done.
Will you hear his words today?&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;He is not here: for he is risen, as he said. Come, see the place where the Lord lay.  (Matthew 28:6)&lt;/em&gt;</description>
        <pubDate>Thu, 18 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/04/18/formal-resurrection.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/04/18/formal-resurrection.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The most common AXI mistake</title>
        <description>&lt;p&gt;Some time ago, &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;I posted a set of formal properties which could be used to
verify any AXI-lite interface, slave or
master&lt;/a&gt;.  I then applied
these properties to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite slave
core&lt;/a&gt;
generated by &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Xilinx’s
Vivado&lt;/a&gt; and found
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;multiple errors within their
core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This wasn’t enough to convince me, however, to that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
could be used broadly across many projects and designs.  So &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;I built my own
AXI-lite slave core&lt;/a&gt;
using &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;.
Using &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; together with a
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;poor man’s cover sequence&lt;/a&gt;,
I could demonstrate that my core not only had less latency than
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx&lt;/a&gt;’s
(once the bugs were fixed), but I could also demonstrate that &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;my own
AXI-lite core&lt;/a&gt;
had twice the data throughput.&lt;/p&gt;

&lt;p&gt;So it works on two slave cores.  What about more complicated designs?&lt;/p&gt;

&lt;p&gt;On a whim, I recently built an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NxM&lt;/code&gt; AXI-lite
interconnect&lt;/a&gt;
that can connect any &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; AXI-lite masters to any &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; AXI-lite slaves, with up
to &lt;code class=&quot;highlighter-rouge&quot;&gt;min(N,M)&lt;/code&gt; active connections at any given time.  I used both my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite slave&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master property
sets&lt;/a&gt;
to prove that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;this
interconnect&lt;/a&gt;
would obey the rules of the road for the bus.  (It can also maintain the high
throughput rate of one transaction request or response per clock when using my
own &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite slave core&lt;/a&gt;,
but that’s another discussion for another day.)&lt;/p&gt;

&lt;p&gt;I then knew that my &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal property
set&lt;/a&gt; would work on not only
basic AXI-lite slaves with only one or two transactions ever outstanding, but
also on any number of arbitrary AXI-lite slaves driven by any
number of arbitrary AXI-lite masters.  The only rule for success was that the
slaves needed to follow &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;these formal
properties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But this was all my own code.  Would &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;these
properties&lt;/a&gt;
apply equally well to the designs of others?&lt;/p&gt;

&lt;p&gt;So, just for fun and to give &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;these
properties&lt;/a&gt; some exercise,
I’ve been wandering &lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s Forums&lt;/a&gt;, just looking
for an example AXI-lite core that can be &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formally
verified&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, this is a biased sample set, since no one submits their code to an
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;on-line forum&lt;/a&gt; unless they can’t get it
to work.  Sometimes this means the code is written by a hobbyist who doesn’t
care about whether or not his code gets released.  At other times, its
submitted by a (not always so) junior engineer who is so &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;frustrated by trying
to get a design to work&lt;/a&gt;
that he’s ready to do anything just to get some help.&lt;/p&gt;

&lt;p&gt;Personally, I think the problem is compounded by the prevalence of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
chips as well as the other &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
based architectures which force you to use such a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;complicated&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; interface to your design.
In many of the examples I’ve found, the poster is frustrated because
he feels like he is connecting his (working) code to a black box that he
doesn’t necessarily or completely understand, and worse to one that he
can’t examine.  What then would you conclude when it doesn’t work?&lt;/p&gt;

&lt;p&gt;So I thought I might share today the most common bug I’ve come across while
examining the AXI-lite designs of others.&lt;/p&gt;

&lt;h2 id=&quot;the-most-common-bug&quot;&gt;The most common bug&lt;/h2&gt;

&lt;p&gt;Let me get straight to the point: here’s the bug in Verilog form, as I found
it in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx’s AXI-lite example
core&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// reset the circuit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buggy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the same bug (again) in their (full) AXI example slave core, this one
taken from &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado
2018.3&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some reset code
&lt;/span&gt;	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awv_awr_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Address latching code
&lt;/span&gt;	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;broken&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I won’t continue either of these examples, because the code is already buggy
at this point.&lt;/p&gt;

&lt;p&gt;While the examples above are shown with respect to the write address and data
channels, it can be found on any channel.  This includes not only the read
address channel, but also the write acknowledgment and read return channels.
Specifically, this bug can often be found in any design using a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;basic
handshaking&lt;/a&gt;
protocol.&lt;/p&gt;

&lt;p&gt;Perhaps the reason why this bug is so common is because it’s prevalent in
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s example code.  For example, here it is
again in the example AXI-lite slave generated from &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado
2018.3&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Some reset code
&lt;/span&gt;	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Again&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;broken&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the problem: &lt;em&gt;the rest bus logic depends upon &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt;
alone!&lt;/em&gt;  Both the bus master and the interconnect will move on to the next
state in the bus transaction any time both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are true,
&lt;em&gt;irrespective of whether or not any other slave-imposed conditions are also
valid&lt;/em&gt;.  Hence, if you condition your response to
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
on anything other than &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt;, you code may easily miss
transactions.&lt;/p&gt;

&lt;p&gt;Yes, this has bit me too.&lt;/p&gt;

&lt;p&gt;Back when I was working on a &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V
design&lt;/a&gt;, I
discovered that missed or dropped transactions would lock up my design
so hard that there would be nothing to do but cycle the power.  (No, the
reset button didn’t work.)  While I can’t say the same would happen in a
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; design, I can safely say that the
consequences of these mistakes are &lt;em&gt;not&lt;/em&gt; benign.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-the-bug&quot;&gt;Avoiding the bug&lt;/h2&gt;

&lt;p&gt;The reason why this bug is common is that a designer will look at the
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; signals and say to himself, but I only want to act on
these signals if I’m not already busy, or only if some other operation is
complete.&lt;/p&gt;

&lt;p&gt;Adding conditions to the transaction test, such as what we’ve seen in the
examples above, is not the way to solve this problem.&lt;/p&gt;

&lt;p&gt;What you want to do instead is to make certain that any time you are not ready
for the next transaction, you are then holding the &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; line low.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;,
this is as easy as adding another property to your proof, or rather one
property for every condition you want to accept on.  For example, if we
were looking at the write address channel, and we wanted to condition on
&lt;code class=&quot;highlighter-rouge&quot;&gt;something_else&lt;/code&gt;, you’d then want to change your code from,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// reset the circuit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buggy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// reset the circuit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Design&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with the added formal property,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also express this same property using an immediate assertion, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how I’m not placing &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; in this check.  &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt;
is one of the incoming signals to your design–one you have no control over.
It makes more sense, therefore, to check against &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; alone since
this is the one signal in this group that you do have control over.&lt;/p&gt;

&lt;p&gt;If this property passes &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;, you
can then remove &lt;code class=&quot;highlighter-rouge&quot;&gt;something_else&lt;/code&gt; from your &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition with confidence,
knowing that &lt;code class=&quot;highlighter-rouge&quot;&gt;something_else&lt;/code&gt; will always be true anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; is true, and
so it no longer needs to be tested by your logic.  This will also simplify
your design, leaving more logic resources available for other tasks.&lt;/p&gt;

&lt;h2 id=&quot;the-second-form&quot;&gt;The Second Form&lt;/h2&gt;

&lt;p&gt;You may also see this same bug in another form.  Consider this following
snippet of code, also generated automatically by
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset code
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Accept a transaction
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buggy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case the question you need to ask yourself is, what will
your design do when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID &amp;amp;&amp;amp; S_AXI_AWREADY&lt;/code&gt;
are both true &lt;em&gt;at the same time&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID &amp;amp;&amp;amp; S_AXI_BREADY&lt;/code&gt; are true?&lt;/p&gt;

&lt;p&gt;There are two options to fix this form of the problem.  First, you could
use &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
to prove that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; would never be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; was true,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you could write your code to handle both conditions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset condition
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic when nothing happens
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic when a return is accepted
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic when a new request is made
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Logic for when both a new request is made
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// and the last one is accepted
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This bug is not specific to &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
peripherals by any means.  You might also find this bug within
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
slave peripherals](/zipcpu/2017/05/29/simple-wishbone.html).
Indeed, the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;basic handshake is a very common design
component&lt;/a&gt;
and it’s important to learn how to do it right.&lt;/p&gt;

&lt;p&gt;No, I’m not done discussing the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; just yet.
I’d like to come back and discuss &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
some more, &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;should the Lord
permit&lt;/a&gt;.  For example, I’ve just
recently managed to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt;
both Xilinx’s AXI (full, not lite) example core as well as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;my own brand-new
AXI (full) slave
core&lt;/a&gt;, and I
think it might be valuable to share this solution with others and to show
you how to do it.  Further, the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;solution
I’ve presented for Verilog
designs&lt;/a&gt; can also be
applied to VHDL designs using the &lt;a href=&quot;https://www.symbioticeda.com/seda-suite&quot;&gt;Symbiotic EDA
Suite&lt;/a&gt;, and I’d like to show
how to verify a VHDL design using the same tools as well.  Indeed, it’s really
not all that much harder, but there are a few interesting twists necessary
to make it happen.&lt;/p&gt;

&lt;p&gt;If these are topics you are interested in, please feel free to &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;contribute
to the ZipCPU blog on Patreon&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;There hath no temptation taken you but such as is common to man: but God is faithful, who will not suffer you to be tempted above that ye are able; but will with the temptation also make a way to escape, that ye may be able to bear it. (1 Cor 10:13)&lt;/em&gt;</description>
        <pubDate>Tue, 16 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2019/04/16/axi-mistakes.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/04/16/axi-mistakes.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>The ZipCPU&#39;s Interrupt Controller</title>
        <description>&lt;p&gt;For those unfamiliar with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
it was designed from the ground up to be a simple, low logic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;.  At every location
and opportunity, I have tried to cut logic from the design to make it simpler.
One of the places where I tried to keep the design simple was the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1: The ZipCPU Interrupt Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/interrupt-controller.svg&quot;&gt;&lt;img src=&quot;/img/interrupt-controller.svg&quot; alt=&quot;Multiple interrupts come in, one goes out&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Traditionally, when a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
receives an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
the hardware &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
logic then looks up an “&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt
vector&lt;/a&gt;” from a table
located at a known location in memory.  The index to the table is given by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; number.  This
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt vector&lt;/a&gt;
will contain the address of a software routine known as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt
handler&lt;/a&gt;.  Once the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; reads this value
from memory, it will then jump to that address in order to execute what is
known as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;“Interrupt Service Routine” or
ISR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a pseudo-assembly, these actions of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; might look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;	PUSH CC	; Push the condition codes to the stack
	PUSH PC	; Push the program counter to the stack
	; Read from the interrupt table, in the INTN entry, the value
	; to place into the program counter
	LW ITBL[INTN],PC&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, these instructions would never appear in any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
software.  Rather, they are implied by and executed within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; itself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2: A Generic Interrupt Vector Table&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/interrupt-vectors.svg&quot; alt=&quot;A table of function pointers at the end of memory&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Depending upon the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
other actions may take place as well.  The current
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
may be disabled, and some architectures will even disable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.  The old
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
is usually stored somewhere (as shown in pseudocode above), and sometimes
there’s even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;flag register&lt;/a&gt;
that needs to be stored as well (also shown in pseudocode above).  Modern
multitasking computers may also store the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;stack
register&lt;/a&gt; register itself,
and so on.  Where these registers get stored is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_System&quot;&gt;Operating System (O/S)&lt;/a&gt;
dependent.  Older &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
used to store these values in memory on the stack.  Many newer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
just place these values into special purpose registers.&lt;/p&gt;

&lt;p&gt;The size of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;vector table&lt;/a&gt; itself
is also &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
dependent.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Programmable_interrupt_controller&quot;&gt;Some
architectures&lt;/a&gt;
support 16 &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s.  Some support
more.  Each &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; gets its own 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt handler&lt;/a&gt; address in
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;table&lt;/a&gt;, and as a
result the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can have many &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service
routines (ISRs)&lt;/a&gt;.  This
allows the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; to jump
to a routine specific to the type of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; taking place.  Should the
keyboard &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; trigger, for
example, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
could transition straight to the software necessary for handling keyboard
input.  Other possible &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
sources include the display, mouse,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;,
hard drive, SD-card, and many more.&lt;/p&gt;

&lt;p&gt;One fascinating fact of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux O/S&lt;/a&gt;
is that it tends to set every &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt
address&lt;/a&gt;
to the same &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service
routine&lt;/a&gt;–regardless of the
peripheral that tripped it.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; uses a different approach,
somewhat inspired by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
approach of having only a single &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service
routine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; doesn’t look up an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;interrupt
address&lt;/a&gt; from memory.
Instead, it just clears the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;internal
pipeline&lt;/a&gt; and then
switches from the user to the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor&lt;/a&gt; register
sets.  It also has only one &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
input.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 3: ZipCPU Operating Modes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-modes.svg&quot; alt=&quot;Reset -&amp;gt; [ supervisor -&amp;gt; user ]*&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From the software standpoint, the 
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; doesn’t call the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt handler&lt;/a&gt; directly.
That’s not the entry point to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt
handler&lt;/a&gt;.  Instead, it just
looks like the return of a special &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_rtu()&lt;/code&gt; function call made from
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;.
As a quick background, if you will recall the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; starts
in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt; upon
any reset.  When it then hits an RTU (return to userspace)
instruction, i.e. when the software calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_rtu()&lt;/code&gt; function, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
switches from supervisor to user mode.  It will then run instructions from the
user register set until some time later following either a user trap
(system call request), an exception (something went wrong, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; for example), or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.  At this point in time,
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; switches to the supervisor
register set, and continues executing instructions from there.&lt;/p&gt;

&lt;p&gt;This often leads to a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
supervisor program that looks something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kernel_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... Setup the environment
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Set up the interrupt controller
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;zip_rtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read interrupt status from the controller
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_picv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ANY_INTERRUPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Handle any interrupt
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// ....
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_ucc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Handle any user exceptions
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_ucc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CC_TRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Handle any user traps
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Halt the CPU if we ever exit from the loop
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;zip_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with this approach is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
needs to know, once it switches to &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor
mode&lt;/a&gt;, which device
triggered the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.  This is
the purpose of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt controller&lt;/a&gt;
also handles enabling particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;–something
we’ll get to in a moment.&lt;/p&gt;

&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;/h2&gt;

&lt;p&gt;The basic concept of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Programmable_interrupt_controller&quot;&gt;interrupt
controller&lt;/a&gt;
is that it monitors several &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
lines or sources, and triggers an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; when any of the lines is
high.  If we consider a generic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; numbered &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;, we might
write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_interrupt_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4: Interrupt Register States&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/interrupt-bistate.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, this isn’t quite sufficient.  We also need a way to clear this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state once set.  We also need to insure that it starts in an idle state, and
only triggers after the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
has taken place, as shown in Fig. 4 on the right.&lt;/p&gt;

&lt;p&gt;So, let’s try this again.  We’ll initialize our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;’s
state to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, on an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
we’ll set the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Triggered&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if the user writes to our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
register, we’ll clear the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state.  To be specific to one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
we’ll clear the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state any time the user writes a ‘1’ to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state associated with this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state register, and ignore any write otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Turned off via a wishbone write command
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if we aggregate all of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
together, we can create a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
input for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Except … what if we don’t want to be interrupted?  Or, alternatively,
what if we don’t want to be interrupted by a particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Therefore, let’s create what’s known as an interrupt mask, so that only
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt; found identified by the
mask will &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are actually two parts to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;s
interrupt mask logic within its &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;.
First, an individual interrupt mask selects particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
to be enabled or disabled.  Second, there’s a master interrupt enable wire
that needs to be set in order for any interrupt wire to create an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; within that
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code for this “interrupt enable” register might now look something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// By default, upon reset no interrupts are enabled
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;int_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Set the enable bit based upon the hi-word of the write
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// together with bit 15 indicating whether to set or clear
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// the big
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;int_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also apply this same logic to the master interrupt enable or MIE
register within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;.
We’ll just use the MSB to control this value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Disable everything
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When put together, the logic for generating an outgoing interrupt will now
look something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not tripped
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interrupt_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a result, an outgoing &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
will be created any time one of several
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; source wires goes high,
provided that both that individual enable and the MIE bit is set.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
logic I’m presenting above is actually from a second generation
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;–one
that hasn’t (yet) propagated into all of &lt;a href=&quot;/projects.html&quot;&gt;my projects
yet&lt;/a&gt;.  The
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/peripherals/icontrol.v&quot;&gt;first generation controller&lt;/a&gt;
had a big problem with the lack of an ability to atomically set or clear
particular interrupt enable lines.  In this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/peripherals/icontrol.v&quot;&gt;first controller&lt;/a&gt;,
writing a word with the high order bit set high, that is with the MIE bit
set, would enable all &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
as well as those whose interrupt enable
lines were set.  However, if you were to wrote a word to the controller
with the high order bit clear, you could then disable any interrupt masks but
&lt;em&gt;you would also disable the MIE bit&lt;/em&gt;!  These two operations, in the original
design, &lt;em&gt;could not be decoupled&lt;/em&gt;.  As a result of that earlier approach,
disabling any &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
source within the controller also disabled the master
interrupt enable bit.  If you only wanted to disable a single
interrupt’s enable bit, you’d need to first disable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
as well as the single interrupt you wanted to disable, and then
you’d need to re-enable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt; in a second transaction.&lt;/p&gt;

&lt;p&gt;The newer, and updated logic above, avoids that problem.&lt;/p&gt;

&lt;p&gt;Let’s see how this works, shall we?&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The biggest difference between the outlined logic above, and the actual
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller as implemented&lt;/a&gt;,
is that the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;currently implemented
controller&lt;/a&gt;
uses word rather than bit operators.  Hence, for &lt;code class=&quot;highlighter-rouge&quot;&gt;IUSED&lt;/code&gt; possible
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
there’s a word of &lt;code class=&quot;highlighter-rouge&quot;&gt;IUSED&lt;/code&gt; bits in length that contains all of the bits in the
current
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and another one that contains a list of all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
sources that are currently enabled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The third state register controls whether this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
will generate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
at all.  Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt; to zero, will disable all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
generation from this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reads to this core will just read our status register, but writes can have
a couple of side effects.  In particular, we’ll want to support a basic write
to the peripheral, as well as writes that either enable or disable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now comes the fun parts!&lt;/p&gt;

&lt;p&gt;First, how shall we determine which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.
are active?  Remember, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
is active independent of whether or not it is enabled.  An
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
becomes “active” when the incoming
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line is high, and it gets deactivated when a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is written to its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state line.  We’ll keep the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state in our bottom 15 bits, giving us something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Deactivate any interrupts that may have tripped,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// but only if the interrupt source is also inactive
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Activate or trigger on any new interrupts
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next important piece of logic controls our interrupt enable lines.  These
will be controlled by bits &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[16 +: IUSED]&lt;/code&gt;.  If you’ve never used
this &lt;code class=&quot;highlighter-rouge&quot;&gt;A[X +: W]&lt;/code&gt; notation before, it’s equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;A[(X+W)-1:X]&lt;/code&gt;.  I
often find it much easier to read–especially since, like an old codger,
I try to make certain all of my code fits within an &lt;a href=&quot;https://en.wikipedia.org/wiki/Punched_card#IBM_80-column_punched_card_format_and_character_codes&quot;&gt;80 column screen&lt;/a&gt;,
using 8-character tabs.&lt;/p&gt;

&lt;p&gt;We’ll start out the interrupt enable logic by disabling all of
the enable bits on any synchronous reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if the user writes a word to our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
with bit &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[15]&lt;/code&gt; held high, then we’ll enable any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
whose enable bits are also set during the write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same is true for disabling
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.
Writing to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt controller&lt;/a&gt;
with bit &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[15]&lt;/code&gt; clear, will be used to clear any enable lines that
are set during the write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logic for the master enable bit for this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
is almost identical.  The big difference is that we aren’t using word logic
but rather bit logic to set it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the important part of this control design: the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt; bit is &lt;em&gt;only&lt;/em&gt;
adjusted when &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[DW-1]&lt;/code&gt; is also high.  This allows other bits to be
adjusted without adjusting this one–fixing the problem from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/peripherals/icontrol.v&quot;&gt;last controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ok, that handles most of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
state and enable controls.&lt;/p&gt;

&lt;p&gt;How can we now go about using them to generate our outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;First, we’ll set a helper bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;w_any&lt;/code&gt;, to capture whether any enabled bits
are also active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if &lt;code class=&quot;highlighter-rouge&quot;&gt;w_any&lt;/code&gt; is set, and if the master
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
enable is also set, then we can send an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt; is registered, or set on a clock edge.  That’s
important, since a &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
may have a lot of logic riding on this incoming signal.  By registering it
here and now, we avoid compounding any internal timing problems the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
might already have.  Indeed, &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
used to have a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/1786a8529d44157a22de3661c413559f8ba1ece4/rtl/core/zipcpu.v#L1669-L1693&quot;&gt;lot more
logic&lt;/a&gt;
dependent upon this one signal than &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/zipcpu.v#L1971-L1987&quot;&gt;it has
now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All that’s left, then, is to set our
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus outputs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first one is &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;.  In this case, we want to set bit &lt;code class=&quot;highlighter-rouge&quot;&gt;31&lt;/code&gt; to
reflect whether or not the master interrupt enable is set,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and bit &lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt; to reflect whether any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
would be currently triggering.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that,
the register is split into two halves.  The top half indicates which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
are enabled,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the bottom half indicates which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
are currently active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only there’s a tricky problem here: if we don’t set all of the bits, such
as if &lt;code class=&quot;highlighter-rouge&quot;&gt;IUSED&lt;/code&gt; is something less than the full width, then the synthesis
tools will complain at us about undefined bits–and rightly so.&lt;/p&gt;

&lt;p&gt;I used to get around this by setting part of the bits in the basic always
block, and using a generate block to set the rest.  Verilog, however, has
this wonderful feature where the “last assignment wins.”  Therefore, we can
start by assigning &lt;em&gt;all&lt;/em&gt; of the bits within &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; to zero,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;after which we can set the specific bits of interest as before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a result, any bit that isn’t set specifically, will be set by default
to zero.  Even better, the synthesizer can remove the logic surrounding any
of these bits which might get stuck at zero.&lt;/p&gt;

&lt;p&gt;This particular peripheral is also unique because it has only one address,
and hence there’s no logic that needs to take place on a read other than just
returning &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;.  Hence, we can set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; to be equal to
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt;, and set our stall line to zero as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  A functioning &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-the-interrupt-controller&quot;&gt;Formally Verifying the Interrupt Controller&lt;/h2&gt;

&lt;p&gt;What about &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verifying&lt;/a&gt;
something this simple?&lt;/p&gt;

&lt;p&gt;Let’s see if we can’t turn the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
section into a set of
rules that we will check, and then check at each point that our
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
works as intended.&lt;/p&gt;

&lt;p&gt;The first step, though, is a bit preliminary.  First, we want to create our
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; logic, so we can tell when any &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; values are properly
constrained and usable within any assertions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we want to make certain our design starts with an initial reset.  This
is really needed more for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
than anything else, but it often makes good practice anyway.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here are the values we want to make certain are responsive to a reset.
Notice that we also force them to be properly responsive to the first
or initial clock as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ok, let’s start walking through what this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
needs to do.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #1: Any incoming
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
should be able to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_state&lt;/code&gt; bits&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The word level logic here might be a touch confusing.  Basically,
we’re asserting that if a bit was high in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_brd_ints&lt;/code&gt; on the last
clock, that &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_state&lt;/code&gt; in the next clock should reflect that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #2: An
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
should be generated if received and enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_state&lt;/code&gt; captures an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
being received, and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_int_enable&lt;/code&gt; captures one being enabled.  If this is
true one clock ago, and if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt; was high, then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt; should now
be high as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #3: If the master
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
enable bit is off, then no outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
shall be asserted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is really the first part of the inverse of Rule #2 above, expressing when
the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line should be clear.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rule #4 is the other half of rule #3.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #4: If no active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
are enabled, then no outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
shall be asserted either&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, we are asserting when the outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; line should be
&lt;em&gt;clear&lt;/em&gt; (zero).  In this case, if there are no active and enabled
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;,
then neither should the outgoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line be high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, let’s switch from how the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
should deal with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;,
and look at how it should deal with transactions from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #5: It should be possible to disable one (or all)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
as a result of writing a word from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To put this another way, if it was set one clock ago within
&lt;code class=&quot;highlighter-rouge&quot;&gt;$past({i_wb_data[31],i_wb_data[16 +: IUSED]})&lt;/code&gt;, then the enables on the
current clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r_mie,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; should be zero.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #6: It should be possible to enable one (or more)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enable_ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #7: It should be possible to acknowledge an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
and so deactivate it&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_brd_ints&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IUSED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Rule #8: The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
enables should be stable without a write&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next big portion of our proof is to include our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus property
file&lt;/a&gt;,
to verify that, yes, we are properly responding to
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus requests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The tricky part here is that this slave doesn’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line coming
into it.  According to the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone
spec&lt;/a&gt;, it doesn’t need one.  It can (and
does) get by with just the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; signal.  Our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;interface properties&lt;/a&gt;,
however, require an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line.  Therefore, let’s imagine we had an
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line, and that our imagined &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; followed the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;rules of the
bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Allow the solver to pick an i_wb_cyc signal that
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// can change as often as the solver wants to whatever
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// the solver sets it to
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// If i_wb_stb is ever true, make sure the solver also sets
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// i_wb_cyc true at the same time
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Similarly, following a reset, i_wb_cyc should be low
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can include our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus
properties&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;fwb_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_STALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_ACK_DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_REQUESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_MINCLOCK_DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fwb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_nreqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_nacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may note that we set the width of the address bus to &lt;code class=&quot;highlighter-rouge&quot;&gt;.AW(1)&lt;/code&gt;.  It’s not.
It’s really zero.  I have yet, however, to learn how to remove bits
automatically based upon a parameter, so I instead set this to one and then set
the address bit(s) themselves to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack == i_wb_stb&lt;/code&gt;, we’ll never have any outstanding requests, so
asserting the proper value for the number of outstanding (not responded to)
requests becomes easy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then threw some odds and ends into the proof, just for good measure.&lt;/p&gt;

&lt;p&gt;For example, if there hasn’t been either a write or reset request, then any
previously active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
should remain active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s missing?  A big and important part of any proof: the proof that, in
spite of all of our constraints, our logic can still work.  So, let’s add some
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;The first and most obvious item to cover is, yes, it is possible to produce an
outgoing &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A good second example would be that, given a prior active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
it can be cleared by a write from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s also make certain our enables work, by covering a low &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt;,
but yet a high &lt;code class=&quot;highlighter-rouge&quot;&gt;w_any&lt;/code&gt; or similarly a low &lt;code class=&quot;highlighter-rouge&quot;&gt;o_interrupt&lt;/code&gt;, an active
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
line, and a high &lt;code class=&quot;highlighter-rouge&quot;&gt;r_mie&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_interrupt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_mie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_int_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should be (roughly) enough to convince ourselves that this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
is working.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But how to use it?  Well, the first step towards using an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
is to wire it up.  To do that, let’s invoke
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to make our connections for us.&lt;/p&gt;

&lt;h2 id=&quot;autofpga&quot;&gt;AutoFPGA&lt;/h2&gt;

&lt;p&gt;The first step to integrating &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;
into a design using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is to create an &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt; for this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;.
The second step will be using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; to connect
various &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; sources to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;.
So let’s start out by walking through an
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt;
for this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;,
and then walk through how to connect the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
from the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer peripheral that we discussed
previously&lt;/a&gt;
to our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;new interrupt
controller&lt;/a&gt;.
If you’d like, you can follow along as I work my way through the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;buspic&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt;
in my &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt;, and again through
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;the bus timer&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;configuration&lt;/a&gt;
to see how some simple
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
tags can be used to merge this into a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we get into this, let me remind you of two things about
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;: First,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is designed to be able to compose a design from multiple sources via a
copy-and-paste approach, with some amount of variable substitution.  Second,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can also attach
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slaves&lt;/a&gt; together,
assign addresses, and for our purposes today, it can assign
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt; to a bit-vector that
will then be the input to an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
like the one we’ve discussed above.&lt;/p&gt;

&lt;p&gt;We’ll start out by examining how to integrate this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
into the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; project.  In many of &lt;a href=&quot;/projects.html&quot;&gt;my
projects&lt;/a&gt;, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
is a part of the wrapper of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
that I call the
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipSystem&lt;/a&gt;.  Not so in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt;.  Sorry.  There wasn’t
room in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt; for the
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipSystem&lt;/a&gt;.  Instead, in
the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; design the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
is a proper
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;peripheral&lt;/a&gt; on the
main &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone bus&lt;/a&gt;
along with every other peripheral.&lt;/p&gt;

&lt;p&gt;As a result, we’ll be primarily just integrating a
&lt;a href=&quot;/zipcpu/2017/10/06/autofpga-dataword.html&quot;&gt;simple peripheral&lt;/a&gt;
into the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone bus&lt;/a&gt;
structure using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step, as always, is to pick a name for our peripheral.  I’m going to
use the name &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;, since this Programmable Interrupt Controller (PIC) is
attached to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; instead of the
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipSystem&lt;/a&gt;.
I’m also going to create the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;@DEVID&lt;/code&gt; for later substitution
and set it to the same name, but this time in all capitals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@PREFIX=buspic
@DEVID=BUSPIC&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case anything else depends upon the presence of the BUSPIC within the
design, we’ll also create an &lt;code class=&quot;highlighter-rouge&quot;&gt;@ACCESS&lt;/code&gt; tag.  This will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt;
macro in the top of the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
design element, that can then later be
commented out (if you’d like).  Other Verilog components within
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
that might depend upon the presence of this one can then use this macro
to determine whether this peripheral is present in the design or not.
Even better, a quick script within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/Makefile&quot;&gt;Makefile&lt;/a&gt;
of our
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip&quot;&gt;rtl directory&lt;/a&gt;
converts these defines into a &lt;code class=&quot;highlighter-rouge&quot;&gt;design.h&lt;/code&gt; file as well, which
can then be used within software components to determine what components
are and are not built into the design.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@ACCESS=BUSPIC_ACCESS&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
connection for this component.  The first step is to
tell &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
how many addresses this slave has.  In our case, it’s just the
one, so &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR=1&lt;/code&gt;.  We then want to connect to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
I’ve named &lt;code class=&quot;highlighter-rouge&quot;&gt;wb&lt;/code&gt;.  Further, since our output register is available to be
read at all times, and since this peripheral never stalls, we can tell
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; to
connect it up as a peripheral of type &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;, as in, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE=SINGLE&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@NADDR=1
@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That will create return wires for this peripheral to return to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; tag to determine their names.  It will also create another
value to determine when a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
operation is selecting this device, &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic_sel&lt;/code&gt;.  In total, this will looks
something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;c1&quot;&gt;// Wishbone slave definitions for bus wb(SIO), slave buspic
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;buspic_sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buspic_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buspic_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;buspic_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll use these various connections in a moment to actually connect &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;our
device&lt;/a&gt;
to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we do that, though, let’s tell
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; that this
particular device is a programmable interrupt  controller (PIC).  Specifically,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
accepts a number of tags associated with any PIC.  These are first the name of a
multi-element vector, in our case &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_int_vector&lt;/code&gt;, and second the number of
elements in that vector–which for us is 15 elements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@PIC.BUS= bus_int_vector
@PIC.MAX= 15&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when any peripheral wants to route its interrupt wire to the PIC named
&lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;, it will be assigned a bit within this &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_int_vector&lt;/code&gt; of bits.
We’ll get back to that in a bit.&lt;/p&gt;

&lt;p&gt;Our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
needs an output wire, to be fed to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Let’s call that
&lt;code class=&quot;highlighter-rouge&quot;&gt;bus_interrupt&lt;/code&gt;, and declare it at the top of our
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@MAIN.DEFNS=
	wire	bus_interrupt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.DEFNS&lt;/code&gt; describes one of those tags that’s just copied directly
into a given location within an output file–in this case
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another straight copy tag is &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.INSERT&lt;/code&gt;.  The value for this tag will
be copied directly into
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
after variable substitution.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@MAIN.INSERT=
	//
	// The BUS Interrupt controller
	//
	icontrol #(15)	@$(PREFIX)i(i_clk, 1&#39;b0,
			(wb_stb)&amp;amp;&amp;amp;(@$(PREFIX)_sel), wb_we, wb_data,
			@$(PREFIX)_ack, @$(PREFIX)_stall, @$(PREFIX)_data,
			bus_int_vector, bus_interrupt);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, the primary variable that we wish to substitute in, as we copy
this longer string into our
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
file, is the &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(PREFIX)&lt;/code&gt; tag.  As you may
recall, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
tags may be referenced by either a &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(*)&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;@$*&lt;/code&gt;.  Hence, we could
reference &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(PREFIX)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@$PREFIX&lt;/code&gt; equally.  Both will get substituted with
our prefix, &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;.  I personally like the &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(*)&lt;/code&gt; form better, because in
this case the underscore following the tag will not be confused with the
identifier for the tag itself.&lt;/p&gt;

&lt;p&gt;We can also specify some alternate logic, for if and when the &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; macro
at the top of
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
is commented out.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@MAIN.ALT=
	assign	bus_interrupt = 0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.ALT&lt;/code&gt; code will replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.INSERT&lt;/code&gt; code.&lt;/p&gt;

&lt;p&gt;Further, in this alternate “the buspic is not included” case, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
will provide default values for the bus returns: &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic_stall = 0&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;buspic_data = 0&lt;/code&gt;, and so on, so you can ignore them here.&lt;/p&gt;

&lt;p&gt;If you’ve followed this blog much, you know that I like to have command line
access to the peripherals within my designs using a command I call
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;wbregs&lt;/a&gt;.
This allows me access to memory mapped peripherals in roughly the same was
as the &lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;PEEK &amp;amp; POKE&lt;/a&gt; of
yesteryear.&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;PEEK &amp;amp; POKE&lt;/a&gt;,
though, &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; allows named values.&lt;/p&gt;

&lt;p&gt;In a similar manner, if you want access to this peripheral from the C++
bus interface, you’ll need to know the address of this peripheral.  This
is the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@REGS.*&lt;/code&gt; tags.  The first one, &lt;code class=&quot;highlighter-rouge&quot;&gt;@REGS.N=1&lt;/code&gt;, tells
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; that this
peripheral has only one named register.  The second line tells
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
that this register has a zero word offset from the base address
of this peripheral, that the C++ name for this register should be &lt;code class=&quot;highlighter-rouge&quot;&gt;R_PIC&lt;/code&gt;,
and that &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; should accept a name &lt;code class=&quot;highlighter-rouge&quot;&gt;PIC&lt;/code&gt; in order to access this register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@REGS.N=1
@REGS.0= 0 R_PIC PIC&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two lines affect the &lt;code class=&quot;highlighter-rouge&quot;&gt;regdefs.h&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;regdefs.cpp&lt;/code&gt; files generated
by &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’d also like to reference this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
from within a program for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, given an interrupt number, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;, it would be nice to know
how it maps to the various bit masks within our peripheral.  We can also
throw in macros to enable and disable interrupts using &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;’s
if we would like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.DEFN=
#define BUSPIC(X) (1&amp;lt;&amp;lt;X)
#define	BUSPIC_EN(X)	(0x80008000 | (X) | ((X)&amp;lt;&amp;lt;16))
#define	BUSPIC_DIS(X)	(0x00000000 | (X) | ((X)&amp;lt;&amp;lt;16))&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These macros will get copied to the top part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file, used to
describe peripherals for any CPU within the design.  The first one of these,
&lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC(X)&lt;/code&gt;, will also get called by the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated code to define values to describe each interrupt assignment.&lt;/p&gt;

&lt;p&gt;We’d also like to know, in that same file, the location of this peripheral
in address space.  We &lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;discussed some time ago how to access memory mapped
peripherals in general&lt;/a&gt;,
so here’s how it is done with &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we define the name that we want to reference this peripheral as from
within our &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; C code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.IONAME= _@$(PREFIX)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the type this value will point to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.IOTYPE= unsigned&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a macro that can be used to determine if the design (originally) had this
peripheral within it,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.OSDEF= _BOARD_HAS_@$(DEVID)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we can put these all together to define an constant address
pointer referencing this peripheral.  This final line, after variable
substitution, will be copied directly into the &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@BDEF.OSVAL= static volatile @$BDEF.IOTYPE *const @$BDEF.IONAME = ((@$BDEF.IOTYPE *)@$[0x%08x](REGBASE));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; will then place a line into the &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file looking something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_buspic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00600008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;configuration file&lt;/a&gt; contains one more group of
tags.  These are used to place information into a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/make.inc&quot;&gt;make include file&lt;/a&gt;, which
can then be used to determine which files to send to
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
(or any other synthesizer) and how to determine dependencies.&lt;/p&gt;

&lt;p&gt;For our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;,
we create a group of files within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/cpu&quot;&gt;cpu&lt;/a&gt;
subdirectory named &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC&lt;/code&gt;.  This file group contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;icontrol.v&lt;/code&gt; file
only in our case, since this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
implementation doesn’t have any submodules.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@RTL.MAKE.GROUP= BUSPIC
@RTL.MAKE.SUBD= cpu
@RTL.MAKE.FILES=icontrol.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;
has now been connected to the rest of the design.  The one remaining detail
is that the rest of the design hasn’t been connected to this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;.
So let’s take a look at how to connect the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; output to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; design contains a &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt; &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; configuration within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;configuration file, zipbones.txt&lt;/a&gt;.
Two particular lines within &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;this
configuration&lt;/a&gt;
need to be discussed.&lt;/p&gt;

&lt;p&gt;First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@INT.BUSTIMER.WIRE&lt;/code&gt; line defines a wire that will contain this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@INT.BUSTIMER.WIRE= @$(PREFIX)_int&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This alone will define the wire, &lt;code class=&quot;highlighter-rouge&quot;&gt;bustimer_int&lt;/code&gt;, pasting a line,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;	wire	bustimer_int;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;into the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
file.  That only defines it.&lt;/p&gt;

&lt;p&gt;To connect it up to a particular
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt controller&lt;/a&gt;,
just name the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
you want to connect to.  In
our case, that’s
the &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt; we just defined above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@INT.BUSTIMER.PIC= buspic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; will now pick a bit within &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_int_vector[14:0]&lt;/code&gt;, and assign
&lt;code class=&quot;highlighter-rouge&quot;&gt;bustimer_int&lt;/code&gt; to that vector, giving it the name &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSTIMER&lt;/code&gt; found within the
key name, &lt;code class=&quot;highlighter-rouge&quot;&gt;@INT.BUSTIMER.WIRE&lt;/code&gt;.  For example, if you look through the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;main.v&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated file within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip&lt;/a&gt; repository, you’ll find
the lines,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;       &lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;bus_int_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bustimer_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;spio_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rtc_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uartrx_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uarttx_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uartrxf_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uarttxf_int&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here you can see how the seven interrupts used within this design are
assigned.&lt;/p&gt;

&lt;p&gt;But how would you access these definitions within some C code, to know which
interrupts got assigned where?  For that, check out the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated &lt;code class=&quot;highlighter-rouge&quot;&gt;board.h&lt;/code&gt; file.  Towards the bottom, you’ll find these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
assignment statements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
// Interrupt assignments (1 PICs)
//
// PIC: buspic
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define BUSPIC_UARTTXF  BUSPIC(0)
#define BUSPIC_UARTRXF  BUSPIC(1)
#define BUSPIC_UARTTX   BUSPIC(2)
#define BUSPIC_UARTRX   BUSPIC(3)
#define BUSPIC_RTC      BUSPIC(4)
#define BUSPIC_SPIO     BUSPIC(5)
#define BUSPIC_BUSTIMER BUSPIC(6)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These lines are created by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
based upon the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
connected to the peripheral having the &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt;, and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;@PIC.WIRE&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;Looking over this code, you should now understand why we defined the
&lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC(X)&lt;/code&gt; macro earlier.  We can now reference these interrupt ID’s
by these macros.  In the case of our
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;,
we can now reference the &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSPIC_BUSTIMER&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
within our code.&lt;/p&gt;

&lt;p&gt;Alternatively,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
has defined a value for the &lt;code class=&quot;highlighter-rouge&quot;&gt;@INT.BUSTIMER.ID&lt;/code&gt; key that you can
use as well, to place this identifier as necessary wherever you need to within
your design.&lt;/p&gt;

&lt;p&gt;That’s all that’s necessary to connect a &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE.TYPE=SINGLE&lt;/code&gt; peripheral to the
bus, and then to fill out an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
(or other) vector register with values
composed from several other peripherals within the design.  Yes, this
capability is currently very flexible–I’ve even used it to compose system
reset wires from multiple independent sources.  It’s just that useful.&lt;/p&gt;

&lt;p&gt;What if you didn’t want to include this &lt;code class=&quot;highlighter-rouge&quot;&gt;buspic&lt;/code&gt; in your design?  You could
simply remove it from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line.  Sure, you’d then get some errors about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
that didn’t have corresponding &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controllers&lt;/a&gt;,
but that’s what you’d want, right?&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;At this point, we’ve now created (or rather updated) an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;interrupt
controller&lt;/a&gt;,
we’ve then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
it and connected it into our design.  The peripheral now has an address
on our bus, and the bus logic knows to check the results of this peripheral
for responses.  Similarly, we’ve also seen how to connect various
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
lines created from among our several peripherals to this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;controller&lt;/a&gt;
using &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
All that remains is to demonstrate &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;
within a design.&lt;/p&gt;

&lt;p&gt;At this point, though, I’m going to stop and break this article into pieces.
The next step in using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
isn’t really a Verilog or
FPGA
design problem.  Using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;
is more of an advanced software lesson, so it will have
somewhat of a different flavor to it.&lt;/p&gt;

&lt;p&gt;My hope is to use &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/icontrol.v&quot;&gt;this
controller&lt;/a&gt;
to demonstrate and discuss not only how to control
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timing delays&lt;/a&gt;
within an embedded
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
but also to demonstrate how to run multiple tasks within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;All of these will be if and &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;as the Lord
wills&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;While he was yet speaking, there came also another, and said, The fire of God is fallen from heaven, and hath burned up the sheep, and the servants, and consumed them; and I only am escaped alone to tell thee.  (Job 1:16)&lt;/em&gt;</description>
        <pubDate>Tue, 02 Apr 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/04/02/icontrol.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/04/02/icontrol.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
  </channel>
</rss>
