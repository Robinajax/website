<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 14 Mar 2020 20:51:05 -0400</pubDate>
    <lastBuildDate>Sat, 14 Mar 2020 20:51:05 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Locally resetting an AXI component</title>
        <description>&lt;p&gt;Earlier this week, I came across an &lt;a href=&quot;https://forums.xilinx.com/t5/PCIe-and-CPM/what-s-wrong-with-this-logic/m-p/1081578&quot;&gt;AXI component designed by a user who
was struggling to figure out why his component wasn’t
working&lt;/a&gt;.
In the end the first answer to why his core wasn’t working was that he was
neither
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulating&lt;/a&gt;, nor
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
his design.  The second answer was that he had a &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing
issue&lt;/a&gt; that wasn’t part of his
post.&lt;/p&gt;

&lt;p&gt;Looking through his logic, however, I found a third reason why he
might be struggling–his reset logic.  This reset code contained the following
logic,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* whatever else */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// rest of logic follows
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// State machine logic
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;read_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;read_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The design also contained an associated slave, also containing a
&lt;code class=&quot;highlighter-rouge&quot;&gt;LOCAL_RESET&lt;/code&gt; wire, although none of the logic within the slave
depended upon the same &lt;code class=&quot;highlighter-rouge&quot;&gt;LOCAL_RESET&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It shouldn’t be too hard to come up with a scenario that will cause such
a design to read results into the wrong address, or worse to hang the rest
of the design by dropping &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rready&lt;/code&gt; just before &lt;code class=&quot;highlighter-rouge&quot;&gt;M_AXI_RVALID&lt;/code&gt; gets
set.&lt;/p&gt;

&lt;p&gt;Although this didn’t turn out to be what the user was
struggling from in the end, it still brings up an interesting question: How
shall an AXI component be &lt;em&gt;locally&lt;/em&gt; reset?  By &lt;em&gt;locally&lt;/em&gt; reset, I’m referring
to resetting the component without pulling &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; low and resetting
every component on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s not as simple as it might sound.&lt;/p&gt;

&lt;h2 id=&quot;locally-resetting-an-axi-slave-component&quot;&gt;Locally resetting an AXI Slave component&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Resetting an AXI slave&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-reset/slave-reset.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Resetting an AXI Slave is the easier type of component to reset.
The key to resetting a slave with an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite interface&lt;/a&gt;
is to reset the registers within the design, rather than the entire design,
as shown in Fig. 1 on the right.&lt;/p&gt;

&lt;p&gt;As an example, in our &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;example AXI slave
design&lt;/a&gt;,
we included the following logic for updating an register in a design having
an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite interface&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This register logic is the only logic that needs to adjust in order
to implement a local reset for &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;an
AXI-Lite slave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we’d need a reset signal from somewhere.  Such a signal could come
from either an external input port (that was synchronous with the design clock),&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or it could come from one of the bus-accessible registers within the design,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RESET_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESET_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However you create your local reset signal, once the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOCAL_RESET&lt;/code&gt; signal
is available, the &lt;em&gt;registers within the design&lt;/em&gt; can be reset using it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that I’m not resetting any of the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI signals&lt;/a&gt;, but
just the various registers that would be set by them.  This is the key
to not hanging the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;returning-an-error-during-the-local-reset&quot;&gt;Returning an error during the local reset&lt;/h4&gt;

&lt;p&gt;If you want, you could also adjust the responses to various requests as well,
so that during a reset the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
would return an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
In this case, you’d change,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;into something where any write during a &lt;code class=&quot;highlighter-rouge&quot;&gt;LOCAL_RESET&lt;/code&gt; would produce an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
The key to this transformation, however, is making certain that the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BRESP&lt;/code&gt; signal still only every changes when the outgoing transaction
isn’t stalled.  This is then as simple as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Define the AXI response possibilities
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OKAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;SLVERR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCAL_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLVERR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OKAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A similar update to &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; could accomplish the same effect there as
well.&lt;/p&gt;

&lt;p&gt;The difficult part of this change, however, is that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
will tend to cause any user program to crash.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;Bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
handling is typically done by the operating system and, well, let me ask,
if you aren’t using an operating system then is your embedded software ready
to handle that challenge?&lt;/p&gt;

&lt;h4 id=&quot;retrofitting-an-existing-component&quot;&gt;Retrofitting an existing component&lt;/h4&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Using a firewall to locally reset an existing core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-reset/firewall-reset.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But what if your &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave component already
exists&lt;/a&gt;?  In this case, you
might need to retrofit a slave core with a local reset option.  Pulling the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; line low of that component only might look like a tempting
option, but what would this do to any ongoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; transactions?  It would
hang the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;, bringing down
the rest of the design.
This is unacceptable.&lt;/p&gt;

&lt;p&gt;However, if this is the sort of functionality you are looking for, just without
hanging the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;, then there is
a way to accomplish it.  Simply place an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI
firewall&lt;/a&gt;
between your component and the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
and then adjust the reset line to the core below the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;firewall&lt;/a&gt; as
you see fit.  Any ongoing slave transaction hiccups will be caught by the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI
firewall&lt;/a&gt;,
and used to prolong the reset of the component core–returning AXI &lt;code class=&quot;highlighter-rouge&quot;&gt;SLVERR&lt;/code&gt;s
(a type of AXI &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;)
until the core is fully re-integrated back into your system.&lt;/p&gt;

&lt;h4 id=&quot;an-example&quot;&gt;An Example&lt;/h4&gt;

&lt;p&gt;Perhaps an example might clarify this whole idea.  I used the register based
reset approach when resetting the &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/axilscope.v&quot;&gt;AXI-Lite version of my Wishbone
scope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you aren’t familiar with the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;(now possibly misnamed) Wishbone
Scope&lt;/a&gt;,
it’s a basic &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;bus-based internal logic
analyzer&lt;/a&gt;.  It’s a really
easy way to capture, record, and report back to you what’s going on within your
design with one caveat: &lt;em&gt;It will only work if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; never hangs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is one of those times and reasons why I like
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;: If you
just drop the cycle line, then everything resets.  I can then go back into
a design and (usually) find out what’s going on if I have to.&lt;/p&gt;

&lt;p&gt;Not so with AXI: the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus protocol&lt;/a&gt;
has no bus abort capability.  &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;Any misbehaving AXI bus component will hang the
bus&lt;/a&gt;.  This is why it’s
so important to
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formally verify&lt;/a&gt;
your AXI components–&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt; just doesn’t tend to be
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;thorough enough&lt;/a&gt;
to check all the functionality of an AXI based interaction.  Formal methods,
on the other hand, will check &lt;em&gt;every&lt;/em&gt; possibility.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Crossing clock domains with a reset request&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-reset/cdc-reset.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So how does the reset work in my 
&lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/axilscope.v&quot;&gt;AXI-Lite scope&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Well, first, it’s not quite so simple as we described above.  The
&lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/axilscope.v&quot;&gt;scope&lt;/a&gt;
is designed to be able to (optionally) handle inputs coming from a second &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock
domain&lt;/a&gt;–one associated with the
data source.  That means that the reset won’t be complete until it has crossed
from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain&lt;/a&gt; to the data
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain&lt;/a&gt; and back again.&lt;/p&gt;

&lt;p&gt;So let’s follow this through.  There are three parts to the internal reset
request logic.  First, if a reset has been requested, we clear it on any
completion–independent of any new request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus_clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset logic
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw_reset_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clear the reset on completion
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;bw_reset_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This implements the “clear request” logic of Fig. 3, above and to the right.&lt;/p&gt;

&lt;p&gt;Next, if a reset has been requested that hasn’t yet completed (logic above),
we keep the request going until it does complete.  This would be the case
in Fig. 3 between the reset request and the reset acknowledgment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw_reset_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// While the reset is ongoing, keep it going until its
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// cleared
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;bw_reset_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the core is responsive to a reset request from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;–both from the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; reset wire
&lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_ARESETN&lt;/code&gt; (called &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; below) as well as from a particular write
to the control register.  Specifically, if there’s ever a write to the control
register of &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/axilscope.v&quot;&gt;this
scope&lt;/a&gt;,
and the reset bit within that write is low, then we begin a local reset cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_to_control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_bus_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESET_BIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Initiate a new reset request
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//    Note that we won&#39;t initiate a new reset request
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//    while one is already pending.  Once the pending
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//    one completes, we&#39;ll be in the reset state anyway
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;bw_reset_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why check for if the reset bit of the control word is low rather than high?  It
just makes working with the core easier.  Normally, writes to the control
word contain &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;how long you want to wait from trigger to
capture&lt;/a&gt;.  This requires
resetting
&lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/axilscope.v&quot;&gt;the core&lt;/a&gt;,
so the reset request will naturally get set on any such write–even
without raising a bit to explicitly request it.&lt;/p&gt;

&lt;p&gt;This reset logic then &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crosses clock
domains&lt;/a&gt; via a handshaking
protocol, shown in Fig. 3 above–one we’ve
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;discussed the basics of before&lt;/a&gt;.
It’s not fast, but it works.  All of the capture logic is then reset from
a reset signal in the data clock domain, &lt;code class=&quot;highlighter-rouge&quot;&gt;dw_reset&lt;/code&gt;–that’s my equivalent
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOCAL_RESET&lt;/code&gt; signal we’ve been discussing above.&lt;/p&gt;

&lt;p&gt;Once complete, the return signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;bw_reset_complete&lt;/code&gt;, is set and the
logic above clears.  Until the reset completes, any read from the control
register will return with the reset bit set–indicating that the reset
is ongoing.  This is useful for those cases where the data clock isn’t
running for some reason.  In those cases, if you come back and read from the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;, using either
the CPU or the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt;), you’ll quickly
notice that the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
is still in reset–telling you exactly what’s going on.&lt;/p&gt;

&lt;p&gt;What about the rest of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;logic&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;It doesn’t change.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
still operates like it normally would, unless or until you reset the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;, which is just the way we
wanted &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/axilscope.v&quot;&gt;this
core&lt;/a&gt;
to work.  The approach is fairly easy to design and easy to implement, and
(so far) it’s worked quite well for me.&lt;/p&gt;

&lt;p&gt;That handles &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave
components&lt;/a&gt;,
but how would you locally reset an AXI master?&lt;/p&gt;

&lt;h2 id=&quot;locally-resetting-an-axi-master-component&quot;&gt;Locally resetting an AXI Master component&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4. Steps to resetting an AXI master&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-reset/master-reset.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Resetting an AXI master is a bit more challenging.  Basically, the master
has to wait for all outstanding transactions to complete in order to complete
a reset.  This requires something of a state machine.&lt;/p&gt;

&lt;p&gt;Let’s walk through the steps of how this might work.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, a reset is requested, the design then transitions from any WORKING
state to an INRESET state in order to wait for things to settle out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While in the INRESET state, no additional AXI transactions are initiated.
Existing transactions are allowed to complete.  This step itself requires
a couple of sub-steps.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; need to be set to one if they aren’t already&lt;/p&gt;

        &lt;p&gt;I personally like to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; high any
time a transaction is outstanding, and even if no transactions are
outstanding.  I consider this good practice, although I can &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixclk.v&quot;&gt;imagine
reasons&lt;/a&gt;
why a design might not be able to do this.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;As soon as &lt;code class=&quot;highlighter-rouge&quot;&gt;!AxVALID || AxREADY&lt;/code&gt; is true on any of the address request
channels, the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; line should to be dropped.  That way, no new
transaction requests are issued.&lt;/p&gt;

        &lt;p&gt;This assumes that you don’t set &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; high prior to its associated
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; signal.  While the specification allows you to do this, it
doesn’t typically buy you any better performance since the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt; won’t
know what to do with the data apart from the address
anyway.  Still, if you have chosen to allow &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; to be set prior
to &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;, then you’ll need to make sure to flush the &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;
lines as well, just like we’re about to flush the &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; signals below.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;As soon as &lt;code class=&quot;highlighter-rouge&quot;&gt;!WVALID || WREADY&lt;/code&gt;, you will want to set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt;
to zero.  This will prevent your core from actually writing any more
values following the reset request–assuming this was what you wanted.&lt;/p&gt;

        &lt;p&gt;You’ll also want to set &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; as long as you have write
transactions outstanding that need to be completed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The write channel signaling is a bit trickier.  You will need to
complete any ongoing write operations.  My recommendation would be to
set &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; as long as you have an outstanding
transaction to complete.  This works since you’re setting &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; to zero
at the same time, and so you don’t really care any more about &lt;em&gt;what&lt;/em&gt;
data you are sending, just that the data transactions clear through the
system.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Together, these steps will keep you from starting any new transactions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While in the &lt;code class=&quot;highlighter-rouge&quot;&gt;INRESET&lt;/code&gt; state, any and all existing transactions must be
allowed to complete.&lt;/p&gt;

    &lt;p&gt;You were keeping track of how many bursts requests you’ve initiated and
how many expected responses are still outstanding, right?&lt;/p&gt;

    &lt;p&gt;As long as transactions remain outstanding, you’ll need to stay in this
&lt;code class=&quot;highlighter-rouge&quot;&gt;INRESET&lt;/code&gt; state.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once all transactions have completed, your core may then leave the reset
state and return to &lt;code class=&quot;highlighter-rouge&quot;&gt;IDLE&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKING&lt;/code&gt;–depending upon your core’s
design requirements).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shall we take a look at an example AXI master to see how this might be done?&lt;/p&gt;

&lt;h4 id=&quot;axi-master-example&quot;&gt;AXI Master Example&lt;/h4&gt;

&lt;p&gt;All three of my AXI DMA algorithms have some capability for aborting
transactions.  This includes &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;my AXI stream to memory
core&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximm2s.v&quot;&gt;my AXI
memory to stream
core&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axidma.v&quot;&gt;my AXI
DMA core&lt;/a&gt;.
Unlike the major vendor cores, these three are all open source.  Each contains
an &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;AXI-Lite control port&lt;/a&gt;,
and a full memory mapped AXI4 master port.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. AXI Stream to Memory core components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-dma/s2mmblocks.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Since each core contains the same basic reset logic within them, let’s just
look at the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;S2MM
core&lt;/a&gt; as an
arbitrary example.  As illustrated in Fig. 5, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;this
core&lt;/a&gt;
is responsible for accepting stream data, possibly synchronizing to the
nearest packet start, and then writing this stream data to memory at a user
defined location.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;S2MM core&lt;/a&gt;
core has an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
interface&lt;/a&gt; for control.  If
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;
is busy, an abort command can be given to it through this interface which will
cause a form of reset.  Such an abort command will be issued if ever the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ABORT_KEY&lt;/code&gt; is written to the upper byte of the control register while &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the
core&lt;/a&gt; is in
operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;w_cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;w_cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_CONTROL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABORT_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This user-abort signal is then registered, and held high until
the user-commanded, local “reset” is complete and the design returns
to idle (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;!r_busy&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_cmd_abort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s also a similar signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_abort_pending&lt;/code&gt;.  This is set not only
based upon the user command, but it also gets set if
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;
ever encounters any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_abort_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_abort_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Abort on any bus error
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_abort_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_abort_pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once either of these signals are set, either &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd_abort&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_abort_pending&lt;/code&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;
begins a local reset sequence that will return it to its idle state.  This
includes aborting all current and ongoing transactions.&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;
needs to set &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; to one.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;This particular
core&lt;/a&gt; follows my
default philosophy of keeping &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; high in the first place,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;so no additional action is required there.&lt;/p&gt;

&lt;p&gt;Next, &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; needs to be dropped.  In &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;this particular
core&lt;/a&gt;,
a combinatorial register is used to determine when to set &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; in the
first place.  This register is called &lt;code class=&quot;highlighter-rouge&quot;&gt;w_phantom_start&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;w_phantom_start&lt;/code&gt;
is always cleared in the case of any pending abort.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// We start again if there&#39;s more information to transfer
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_phantom_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aw_none_remaining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// But not if the amount of information we need isn&#39;t (yet)
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// in the FIFO.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_fill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_max_burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_phantom_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Insist on a minimum of one clock between burst starts,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// since our burst length calculation takes a clock to do
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phantom_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_phantom_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// If we&#39;re still writing the last burst, then don&#39;t start
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// any new ones
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_phantom_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Finally, don&#39;t start any new bursts if we aren&#39;t already
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// busy transmitting, or if we are in the process of aborting
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// our transfer
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_abort_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_phantom_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This signal guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; is returned to zero as soon as possible
following any abort request.  Notice, in the actual logic block that sets
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; below, that this signal is only ever changed if
&lt;code class=&quot;highlighter-rouge&quot;&gt;!M_AXI_AWVALID || M_AXI_AWREADY&lt;/code&gt;.  This is key to following the protocol and
you’ll see this pattern often.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_phantom_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Clearing &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; on a reset takes a bit more work.  Or rather, the logic for
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; doesn’t really change.  It still gets set at the beginning of every
burst, and remains set until the burst is complete.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_phantom_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Admittedly, this arrangement is somewhat specific to how &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;this stream to
memory core&lt;/a&gt; works.
In particular,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;this core&lt;/a&gt;
only ever sets &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; if it has enough information to hold it high until any
burst that it is a part of is complete.  This is part of my philosophy of
either using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
or getting off the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
so someone else can use it.  While AXI doesn’t require this philosophy, this
design approach helps to minimize any required
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; resources, such as those
used by the &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;,
and so it helps keep everything else working without getting slowed
down by &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;this core&lt;/a&gt;
unless &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;this core&lt;/a&gt;
actually needs
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; to talk to
a peripheral.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; signal similarly straightforward: anytime the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
isn’t stalled, &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; is adjusted.  If there’s no abort pending, &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt;
is set to all ones.  (As currently written,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;
can only transfer aligned words of full size.  This may change in the future as
I have opportunity.)  Otherwise, we stop writing on either user abort or upon
receiving a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; as
soon as possible by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; to zero.  As before, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;!M_AXI_WVALID || M_AXI_WREADY&lt;/code&gt; condition is key here to following protocol.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_abort_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step is to know when we are done so we can know when to leave this
reset state.  This means that we need to know when there are no more requests
remaining to be made, and when the last outstanding request has been returned.
As we’ll see below, the return to idle logic has to be a part of the normal
return to idle logic–the task just returns to idle a bit earlier.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 6. The S2MM operation is like a double-hourglass&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-reset/s2mm-hourglass.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Getting there requires checking two counters.  You can think of this sort of
like the double hourglass shown in Fig. 6 on the left.  Initially, the first
counter is loaded by the user with the number of requests that need to be
made.  This is the &lt;code class=&quot;highlighter-rouge&quot;&gt;aw_requests_remaining&lt;/code&gt; counter.  Then, as write address
burst requests get accepted by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
the counter decrements and a second counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;aw_bursts_outstanding&lt;/code&gt;, gets
incremented.  (The units of the two counters aren’t quite the same–the first
counter counts beats, the second bursts–but we can ignore that for now.)
Finally, when a burst is complete, the &lt;code class=&quot;highlighter-rouge&quot;&gt;aw_bursts_outstanding&lt;/code&gt; counter gets
decremented.  Once both counters reach zero, the operation is complete.&lt;/p&gt;

&lt;p&gt;The way the local reset, a.k.a. abort, works is that it empties out the first
chamber of requests still to be issued, but then it lets the rest of the
operations proceed to completion.&lt;/p&gt;

&lt;p&gt;Let’s look at this in more detail.&lt;/p&gt;

&lt;p&gt;The first counter keeps track of the number of remaining bus word transactions.
When &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;,
isn’t busy, this number is set from the &lt;a href=&quot;/blog/2020/03/08/easyaxil.html&quot;&gt;AXI-Lite interface
registers&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;aw_none_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;aw_requests_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_requests_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd_length_w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_none_remaining&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It gets cleared on any local reset request, whether on a user abort or upon
receiving a returned
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_abort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_abort_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_requests_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_none_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, on the first beat of any &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;, possibly even before &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;,
we adjust the number of words remaining to be written.  That’s the meaning of
&lt;code class=&quot;highlighter-rouge&quot;&gt;phantom_start&lt;/code&gt; below–it’s true on the first clock cycle of
any new burst write request.  Unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;phantom_start&lt;/code&gt; is only ever
high for the first cycle.  It’s like what the &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; signal would be if
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; were always true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phantom_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_requests_remaining&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aw_requests_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_none_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aw_requests_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might also wish to notice the other flag associated with our counter:
&lt;code class=&quot;highlighter-rouge&quot;&gt;aw_none_remaining&lt;/code&gt;.  This flag is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;aw_requests_remaining == 0&lt;/code&gt;,
and it is used to &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;simplify the logic
following&lt;/a&gt; so
I don’t have to check every bit of the counter in order to know if it’s zero.&lt;/p&gt;

&lt;p&gt;We still need one other counter before we can know if we’ve completed our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; transactions, and that’s
the counter that keeps track of the number of outstanding burst transactions.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;This particular
core&lt;/a&gt;
maintains both a counter and a flag for this purpose–just like we did
above.  The counter keeps track of the number of outstanding bursts, whereas
the flag keeps track of whether only a single burst is outstanding or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;aw_last_outstanding&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The counter
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;aw_last_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The flag
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phantom_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_last_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;aw_last_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aw_bursts_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that these two counters and their associated flags have been defined,
we finally have enough information to determine if all of our outstanding
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transactions have completed or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;w_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// We are complete if nothing more is to be requested,
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aw_none_remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// *and* the last burst response has now been returned
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aw_last_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;w_complete&lt;/code&gt; flag is then used to send our state machine back to idle,
by clearing the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_busy&lt;/code&gt; flag.  Once cleared,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;
has finished any user commanded reset, and can return to its idle state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Core is idle, waiting for a command to start
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_cmd_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Any write to the control register will clear the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// completion flag
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_CONTROL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clear busy once the transaction is complete
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//  This includes clearing busy on any error
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key point here is that even though there are several steps required to
reset an AXI master, those steps actually fit in nicely with the logic of
building the AXI master in the first place.&lt;/p&gt;

&lt;p&gt;A second key point is simply this: plan ahead for any local reset
functionality you may wish to build into your own design.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Knowing how to reset a single user core in the context of a larger
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
is an important part of building any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component.  The task isn’t nearly as simple as it might sound, simply
because a local reset shouldn’t require a change in behavior from any of
the other cores attached to the same system
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.  Further, if you don’t do
it right, you risk locking up the entire system–something that is generally
considered quite bad.&lt;/p&gt;

&lt;p&gt;One specific worry includes usage counters found within any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnects&lt;/a&gt;.
Such counters are required to keep track of the number of outstanding
transactions, so that the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
can know when to adjust any channel assignments
without risking returns getting sent to the wrong
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
masters.&lt;/p&gt;

&lt;p&gt;The good news is that by following the steps outlined above, you can
rest assured that your core can still be reset separate from the rest of
the design–even in the presence of any ongoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; activity.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Therefore if any man be in Christ, he is a new creature: old things are passed away; behold, all things are become new. (2 Cor 5:17)&lt;/em&gt;</description>
        <pubDate>Sat, 14 Mar 2020 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2020/03/14/axi-reset.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/03/14/axi-reset.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Adjusting our logic PLL to handle I&amp;Q</title>
        <description>&lt;p&gt;Some time ago, I posted an article on &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;how to create a basic logic PLL
in Verilog&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/sdpll.v&quot;&gt;The
design&lt;/a&gt;
was simple, basic, and easy to implement in an FPGA.  It worked by tracking
the &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;most significant bit of any
sinewave&lt;/a&gt;
given to it, giving it a nice gain invariance which would make it useful
in a large variety of contexts.&lt;/p&gt;

&lt;p&gt;More recently, I was asked to build a &lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;demonstration design for a
software (gateware) defined radio&lt;/a&gt;.  Yes,
I call it a &lt;a href=&quot;https://en.wikipedia.org/wiki/Software-defined_radio&quot;&gt;“software” defined
radio&lt;/a&gt;, although in
actuality all of the processing within it is done by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.  There’s no
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
involved, so perhaps it is better termed as a “gateware” defined radio.  I’m
going to stick with the “software” label for now–under protest if I have to.
Why?  Because like a true &lt;em&gt;software&lt;/em&gt; defined radio, you really need to know
and understand the guts of this one in order to get it to work.  Further,
as with any FPGA design, &lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;this radio design&lt;/a&gt;
is fully reprogrammable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;The design&lt;/a&gt;
was to have both AM and FM examples within it.  When I went to build those
examples, I quickly realized that both the &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/3eb914db4175ecc3b5a9374825110d0b80435dca/rtl/amdemod.v#L212-L216&quot;&gt;AM
demodulator&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/3eb914db4175ecc3b5a9374825110d0b80435dca/rtl/fmdemod.v#L165-L169&quot;&gt;FM
demodulator&lt;/a&gt;
would require &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/quadpll.v&quot;&gt;a PLL that could track the incoming carrier
frequency&lt;/a&gt;.
An ideal candidate for this PLL was my &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;previous logic
PLL&lt;/a&gt;.
The only problem was simply that the
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;logic PLL&lt;/a&gt;
only worked on a single sinewave input, rather than the quadrature
input available on this board.&lt;/p&gt;

&lt;p&gt;Today, let’s take a look at why a quadrature demodulator is a good thing, and
then look over the difference between the two cores.  We can then compare
the performance between the two cores so you can see why a &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/quadpll.v&quot;&gt;quadrature
PLL&lt;/a&gt; is really
a good idea.&lt;/p&gt;

&lt;h2 id=&quot;what-is-quadrature&quot;&gt;What is Quadrature?&lt;/h2&gt;

&lt;p&gt;The word “quadrature” in today’s article is a reference to a transmit or
receive architecture that uses two “arms” or “rails” as they might be
called to either transmit,
or receive an incoming signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;th&gt;Fig 1. A quadrature transmit scheme&lt;/th&gt;&lt;th&gt;Fig 2. A quadrature receiver scheme&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/quadtx.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/quadrx.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Since each arm of a signal in such a scheme is controlled/represented by either
a real or an imaginary signal, depending on the arm, I think of “quadrature”
signals as a reference more to the complex nature of the signal than to the
structure used to create it.  In engineering, the two axes of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_plane&quot;&gt;complex
plane&lt;/a&gt; are often called
“in-phase” or I, referencing the “real” signal rail that is multiplied by
the cosine term, and “quadrature” or Q, which references the rail multiplied
by the imaginary sine term.  The &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/quadpll.v&quot;&gt;quadrature
PLL&lt;/a&gt; we are
discussing today is one that takes both I and Q inputs.&lt;/p&gt;

&lt;p&gt;But let’s back up a bit.  There’s a reason why imaginary numbers are
&lt;em&gt;imaginary&lt;/em&gt;.  The square root of negative one can’t really be produced in
any physical system, so what reality does this even pretend to represent?&lt;/p&gt;

&lt;p&gt;That’s a good question, so let’s start at the top and examine a radio
frequency (RF) receiver.&lt;/p&gt;

&lt;p&gt;From an engineering standpoint, a good RF front end consists of an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Antenna_(radio)&quot;&gt;antenna&lt;/a&gt;, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-noise_amplifier&quot;&gt;low-noise pre-amplifier&lt;/a&gt;,
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Band-pass_filter&quot;&gt;band-pass filter&lt;/a&gt;, an
optional adjustable or &lt;a href=&quot;https://en.wikipedia.org/wiki/Automatic_gain_control&quot;&gt;automatic gain&lt;/a&gt;, an &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_mixer&quot;&gt;RF mixer&lt;/a&gt;
followed by a &lt;a href=&quot;/dsp/2017/12/30/slowfil.html&quot;&gt;lowpass filter&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. A basic RF front end&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/receiver.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Mathematically, I like to cheat and just represent a receiver as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Heterdyne&quot;&gt;downconverter&lt;/a&gt; followed by a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_down_converter&quot;&gt;lowpass filter and then a
downsampler&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. A simplified receiver model&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/math-frontend.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It just makes the processing easier to understand.&lt;/p&gt;

&lt;p&gt;At issue in today’s discussion is the form of the RF mixer, whether the form
shown in Fig. 4 above or in Fig 2 above that.&lt;/p&gt;

&lt;p&gt;One common way of building a mixer is to simply multiply the incoming
signal by a
&lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;sinewave&lt;/a&gt;
above or below the signal of interest.  This is part
of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Superheterodyne_receiver&quot;&gt;super-heterodyne
receiver&lt;/a&gt;
architecture.  Assuming a signal frequency of &lt;code class=&quot;highlighter-rouge&quot;&gt;f_c&lt;/code&gt; and a local oscillator
frequency, within the receiver, of &lt;code class=&quot;highlighter-rouge&quot;&gt;f_LO&lt;/code&gt;, the resulting signal will be placed
at frequencies &lt;code class=&quot;highlighter-rouge&quot;&gt;f_c+f_LO&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_c-f_LO&lt;/code&gt;.  (We’ll see this in a moment.)  A
&lt;a href=&quot;/dsp/2017/12/30/slowfil.html&quot;&gt;lowpass filter&lt;/a&gt;
can then be used to select one of these two frequency bands, making it
possible to then work on the signal at a lower (and slower) frequency–perhaps
even in the digital domain.&lt;/p&gt;

&lt;p&gt;Not so with this receiver.&lt;/p&gt;

&lt;p&gt;No, the &lt;a href=&quot;https://github.com/xil-se/SX1257-PMOD&quot;&gt;SX1257 Radio PMod&lt;/a&gt; uses
a &lt;em&gt;quadrature&lt;/em&gt; mixer.  Within the
&lt;a href=&quot;https://www.semtech.com/products/wireless-rf/lora-gateways/SX1257&quot;&gt;SX1257&lt;/a&gt;,
the local oscillator consists of both sine and cosine components.  Together,
they &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_down_converter&quot;&gt;downconvert&lt;/a&gt;
a signal much like multiplying by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex
exponential&lt;/a&gt; would.  The nice
part of this setup is that the final signal can be placed near zero
frequency–rather than some &lt;a href=&quot;https://en.wikipedia.org/wiki/Intermediate_frequency&quot;&gt;intermediate
frequency&lt;/a&gt; offset from
zero.&lt;/p&gt;

&lt;p&gt;Mathematically, this can really simplify the analysis.  There is an
engineering cost, however, to making sure that the two “rails” are
properly balanced–but that’s not our topic today.&lt;/p&gt;

&lt;p&gt;So, imagine if we started with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude_modulation&quot;&gt;AM
signal&lt;/a&gt;.  This &lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude_modulation&quot;&gt;AM
signal&lt;/a&gt; is created from
some real (not imaginary or complex) information signal, we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;m(t)&lt;/code&gt;,
containing whatever it was we want to transmit and then recover.  Inside
the transmitter, &lt;code class=&quot;highlighter-rouge&quot;&gt;m(t)&lt;/code&gt; will be multiplied by a cosine wave to bring it up
to a radio frequency, just as we showed in Fig. 1 above.  After propagation
decays and delays this signal and noise gets added to it, it might then show
up to the receiver looking something like:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/eqn-amrx.png&quot; alt=&quot;x_RX(t)=A_RX[C+m(t-d_RX)cos(2pi f_c t+theta_RX)+n_RX(t)&quot; width=&quot;577&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/term-defns.png&quot; alt=&quot;Variables defined&quot; width=&quot;580&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Our goal will be to recover the message, &lt;code class=&quot;highlighter-rouge&quot;&gt;m(t)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may have noticed the colors in the expression above.  I like to do this
to help me understand what it is I have to work with.  In particular, I like
to write out all of my unknown values in red.  In general, the whole expression
is red save for the waveform we’ve measured.  We can argue about whether or not
the amount of carrier, &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;, is known or not–in the end it’s not all that
relevant since we’re just going to filter it out anyway.&lt;/p&gt;

&lt;p&gt;Several of these terms take a lot of work to track from the origin to the
receiver.  Particularly complex terms include the amplitude, A, the propagation
delay, delta, and the phase.  Each of these is related to how the waveform
propagated from the source to the receiver, so they cannot necessarily be
known when the waveform is received.  Worse, they are particularly difficult
to track and apply meaning to even in the receiver since so many components
of the receiver’s processing path adjust them along the way.&lt;/p&gt;

&lt;p&gt;For example, our first step in processing this signal will be to adjust
the frequency to “&lt;a href=&quot;https://en.wikipedia.org/wiki/Baseband&quot;&gt;baseband&lt;/a&gt;”–where
the frequency of the cosine term gets (approximately) zeroed out.  Let’s
suppose we know about what &lt;code class=&quot;highlighter-rouge&quot;&gt;fc&lt;/code&gt; is so that we can create a &lt;em&gt;local oscillator&lt;/em&gt;
(one generated in the receiver) at something close to &lt;code class=&quot;highlighter-rouge&quot;&gt;f_c&lt;/code&gt;–let’s call it
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_LO&lt;/code&gt; for the frequency of the local oscillator.  We might then multiply
&lt;code class=&quot;highlighter-rouge&quot;&gt;x(t)&lt;/code&gt; by this local oscillator to get a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baseband&quot;&gt;baseband&lt;/a&gt; signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/eqn-mixed.png&quot; alt=&quot;&quot; width=&quot;340&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we ignore the noise term for now, we can expand this out a bit to simplify
it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/eqn-mixed-simpler.png&quot; alt=&quot;&quot; width=&quot;672&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we then use a
&lt;a href=&quot;/dsp/2017/12/30/slowfil.html&quot;&gt;lowpass filter&lt;/a&gt; to remove the
term at &lt;code class=&quot;highlighter-rouge&quot;&gt;f_c+f_LO&lt;/code&gt;, we can then get a useful waveform to work with.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/eqn-ambblo.png&quot; alt=&quot;&quot; width=&quot;655&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Did you notice how the amplitude, frequency, and phase all changed during
this process?  Keeping track of all of these changes can be quite a
challenge.  It’s often much easier just to merge the details of the local
oscillator processing stage together with the values of the signal that
are already unknown.  Therefore, I will often create new frequency and
phase terms just to keep my notation simpler.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/eqn-ambb.png&quot; alt=&quot;&quot; width=&quot;499&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This newer, simpler, signal description is still the same thing that
we were just looking at.&lt;/p&gt;

&lt;h4 id=&quot;am-demodulation&quot;&gt;AM Demodulation&lt;/h4&gt;

&lt;p&gt;Let’s pause for a moment and consider what this &lt;code class=&quot;highlighter-rouge&quot;&gt;m(t)&lt;/code&gt; signal might “look”
like.&lt;/p&gt;

&lt;p&gt;First, we know that &lt;code class=&quot;highlighter-rouge&quot;&gt;m(t)&lt;/code&gt; was real.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Initial message signal in time&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/am-source-time.png&quot; alt=&quot;&quot; width=&quot;435&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we place rotate this figure so that time goes in and out of the page
(screen), &lt;code class=&quot;highlighter-rouge&quot;&gt;m(t)&lt;/code&gt; can then be plotted on a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_plane&quot;&gt;complex plane&lt;/a&gt;
and it would look like points along the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; axis as shown in Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. The initial message shown as a phasor&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/am-source-phasor.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we then add the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude_modulation&quot;&gt;AM&lt;/a&gt;
carrier offset &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; to it, the message points just shift to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. The initial message, but offset by the constant carrier&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/am-wcarrier.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once the message gets multiplied by a complex carrier, this diagram starts
spinning in circles at the carrier frequency.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. The transmitted waveform, spinning at RF frequency&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/am-atcarrier.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, only the &lt;em&gt;real&lt;/em&gt; component of this diagram will ever get
transmitted, so the picture over the airwaves will likely look like a more
traditional AM signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. The transmitted waveform, as viewed in time&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/am-atcarrier-time.png&quot; alt=&quot;&quot; width=&quot;436&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Inside our receiver, we’re going to try to de-spin this signal.  If we do
the task right, so that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_c == f_LO&lt;/code&gt;, the incoming signal will look something
like,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. The received waveform, once the carrier has been removed&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/am-baseband.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At this point, we don’t want just the real or imaginary portions.  Were we
to only grab the real component, as an example, there would be a worst case
where we might just happen to get so unlucky that we lose the entire
signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. The received waveform, once the carrier has been removed&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/am-baseband-diabolical.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We could’ve picked some &lt;a href=&quot;https://en.wikipedia.org/wiki/Intermediate_frequency&quot;&gt;intermediate
frequency&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_IF&lt;/code&gt;
 such that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_LO = f_c - f_IF&lt;/code&gt;.  Had we done that, our signal would’ve still
been spinning as it was in Fig. 8 above, just spinning slower.  We’d still
need to eventually remove the rotation, so we’re going to get to
Fig. 10 either way.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;f_LO&lt;/code&gt; is only approximately equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;f_c&lt;/code&gt;, such as would be the case in
real life, then this constellation plot would rotate slower.
Our goal, as part of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude_modulation&quot;&gt;AM&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/amdemod.v&quot;&gt;demodulator&lt;/a&gt;,
is going to be slowing and eventually stopping this rotation.  We’ll then
want to &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/3eb914db4175ecc3b5a9374825110d0b80435dca/rtl/amdemod.v#L211-L219&quot;&gt;rotate the constellation that results back to zero
phase&lt;/a&gt;, and to
&lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/3eb914db4175ecc3b5a9374825110d0b80435dca/rtl/amdemod.v#L221-L225&quot;&gt;remove the carrier offset&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/3eb914db4175ecc3b5a9374825110d0b80435dca/rtl/amdemod.v#L212-L216&quot;&gt;Tracking this rotation&lt;/a&gt;
is the purpose of &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;our quadrature
PLL&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;fm-demodulation&quot;&gt;FM Demodulation&lt;/h4&gt;

&lt;p&gt;If we were to start with &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;frequency
modulation (FM)&lt;/a&gt;, the signal
might not necessarily be real, but many of the same principles would still
apply.  In this case, the signal would start out slowly rotating back and
forth around the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_plane&quot;&gt;complex plane&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the frequency excursions were small enough, they could be approximated
as purely imaginary excursions from the right side of the unit circle,
as shown in Fig. 12 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. A narrowband FM signal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/fm-narrowband.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If they are larger, the approximation no longer applies, but it’s still
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;FM&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. A widerband FM signal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/fm-wideband.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;How big the frequency changes within the message are is a function of how
the system is set up.&lt;/p&gt;

&lt;p&gt;As before, the transmitter spins this signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. The transmitted waveform, spinning at RF frequency&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/fm-atcarrier.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unlike the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Amplitude_modulation&quot;&gt;AM&lt;/a&gt;
signal shown in Fig. 8, this signal has a constant amplitude, as shown by the
narrow line drawing the blue circle in Fig. 14.  The transmitter
then transmits only the real portion of it,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15. The FM waveform, as transmitted, but shown in time&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/fm-time.png&quot; alt=&quot;&quot; width=&quot;436&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;because imaginary signals are only &lt;em&gt;imaginary&lt;/em&gt;–right?&lt;/p&gt;

&lt;p&gt;Inside the receiver, our goal will be to first remove most of the spinning,
and then to capture the spin frequency as our resulting message.&lt;/p&gt;

&lt;p&gt;As with the
&lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/amdemod.v&quot;&gt;AM demodulator&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/fmdemod.v&quot;&gt;FM demodulator&lt;/a&gt;,
can be accomplished with a
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;PLL&lt;/a&gt;.
Likewise, the quadrature information helps to keep us from diabolical
cases.  In the end, our task is essentially to measure the speed of a point
as it spins around a circle in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_plane&quot;&gt;complex plane&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16. Demodulating FM is about determining the speed of rotation about the circle&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/fm-demod.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&quot;adjusting-the-phase-detector&quot;&gt;Adjusting the Phase Detector&lt;/h2&gt;

&lt;p&gt;When we &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;first built our PLL&lt;/a&gt;,
we had to do a lot of work to figure out whether or not the PLL phase was
ahead of or behind the incoming sinusoid.  This required &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/af052626172d6cfc156fc820d41dcfdc393f2f0d/rtl/sdpll.v#L74-L85&quot;&gt;finding when the two
inputs agreed with each other&lt;/a&gt;,
and then &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/af052626172d6cfc156fc820d41dcfdc393f2f0d/rtl/sdpll.v#L91-L100&quot;&gt;looking at which input changed
first&lt;/a&gt;
to know which of the two clocks was faster or slower.&lt;/p&gt;

&lt;p&gt;With quadrature signals, things are different.  The first change will be
admitting two input bits, one for I and one for Q, into our core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two incoming bits can be used to approximate the incoming phase
as either 45, 135, -135 or -45 degrees.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 17. Incoming IQ phase map&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/iq-map.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Similarly, the top two MSB of the phase counter internal to our PLL can
also be mapped to these same points.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 18. Phase as given by the top two MSB bits of the phase counter&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/counter-map.png&quot; alt=&quot;&quot; width=&quot;547&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The mapping isn’t quite the same, so we’ll need to watch out for this
difference as we go along.&lt;/p&gt;

&lt;p&gt;Our next goal is to determine whether or not a phase error exists.  Are these
two waveforms locked, or should we adjust the phase within our PLL?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b0000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No err
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b1001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No Err
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b1110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No err
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b0111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No err
&lt;/span&gt;	&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how the two coordinate systems, that of the &lt;code class=&quot;highlighter-rouge&quot;&gt;I,Q&lt;/code&gt; input and the phase
counter, are not the same.  You can use the figures above to help decode them.
(While it felt like I was counting on my fingers, I got so confused I had
to use similar figures to work out which quadrants of each represented an
error and which did not.)&lt;/p&gt;

&lt;p&gt;I also wanted a second bit as well–one that wound indicate whether or not the
PLL’s frequency should be increased or decreased.  A decrease in phase
(and frequency) would be warranted if the PLL’s counter was ever further
clockwise than the incoming phasor, otherwise an increase of each
would be appropriate.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 19. Lead vs Lag&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/lead-vs-lag.png&quot; alt=&quot;&quot; width=&quot;433&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But what if the two are in opposite quadrants?  That is, what if the &lt;code class=&quot;highlighter-rouge&quot;&gt;I,Q&lt;/code&gt;
input represents a 180 degree difference from the angle represented by the
PLL’s counter?  In this case, I chose to
go both ways–for two quadrants I judged the phase to be too far
forward, and for the other too far backwards.  The resulting table, including
the phase error from above, is shown below.  It should match Fig. 19 for the
first quadrant, and similarly for the other three.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Input {I,Q} (i.e. X,Y) will rotate: 00, 10, 11, 01
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The counter will rotate: 00, 01, 10, 11
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b0000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No err
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b0001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b0010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b0011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b1001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No Err
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b1010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b1011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b1100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b1101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b1110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No err
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b1111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;mb&quot;&gt;4&#39;b0100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b0101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b0110&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mb&quot;&gt;4&#39;b0111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// No err
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The fun part of this table is that despite its ugly form, it can be
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;implemented with nothing more than two
4-LUTs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what about that 180-degree out of phase measurement?  You could think
about it as an annoying offset to figure out lead and lag for, or you could
look at it as an opportunity.  If the phase measurement is ever so far out
of phase that we can’t tell which came first, then we are clearly out of lock.&lt;/p&gt;

&lt;p&gt;We can use this to generate a crude lock indication.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;quadpll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can set this lock indicator to be low any time we are off by 180 degrees,
and high otherwise.  True, it’s crude.  Any phase errors between -135 and 135
degrees will appear to be locked.  Worse, this lock indicator will appear
to glitch if it ever falls out of lock.  However, such glitches should be
easy to quickly identify on a trace, and so use to know if the
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;PLL&lt;/a&gt;
is properly locked or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;mb&quot;&gt;4&#39;b0010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;4&#39;b1011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;4&#39;b1100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;4&#39;b0101&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Everything else
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of the design, to include how we tracked both phase and frequency, &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;is
the same as our prior design&lt;/a&gt;.
That means our tracking loops should all have the same gains and transfer
functions.  In other words, they should perform the same … right?&lt;/p&gt;

&lt;p&gt;Let’s take a peek.&lt;/p&gt;

&lt;h2 id=&quot;performance-difference&quot;&gt;Performance difference&lt;/h2&gt;

&lt;p&gt;The good news with this new &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL
implementation&lt;/a&gt;
is that it is so similar to our last one that we can nearly use the
same Verilator script.  Indeed, a &lt;a href=&quot;http://meldmerge.org&quot;&gt;graphical diff&lt;/a&gt;,
shown in Fig. 20, shows how similar the two scripts actually are.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 20. Test script differences&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/quadpll/cppdiff.png&quot;&gt;&lt;img src=&quot;/img/quadpll/cppdiff.png&quot; alt=&quot;&quot; width=&quot;323&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The biggest difference between the two scripts is how the phase is sent to the
core.  In our &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/bench/cpp/sdpll_tb.cpp&quot;&gt;original test
script&lt;/a&gt;,
we defined the phase going into the PLL as nothing more than the MSB
of the phase counter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;                &lt;span class=&quot;n&quot;&gt;lclphase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lclstep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lclphase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s a little more involved for the quadrature PLL, since we need to convert
from the coordinates of the top two counter bits, as shown in Fig. 18 above,
to the IQ coordinates used by the core, as shown in Fig. 17 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;                &lt;span class=&quot;n&quot;&gt;lclphase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lclstep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lclphase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 00 10 11 01
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I say a “little more” involved, because this really isn’t that big of a
change.&lt;/p&gt;

&lt;p&gt;Surely this wouldn’t affect performance, right?&lt;/p&gt;

&lt;p&gt;Well, let’s take a look at the phase error outputs and compare the two
over time in Fig. 21.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 21. Absolute phase errors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/chart-abserr.png&quot; alt=&quot;&quot; width=&quot;464&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this chart, the error is a &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; if the PLL is leading the incoming signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; if the PLL is lagging behind and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; if the two match.  Unfortunately, this
2-bit error quantization approach hasn’t left this chart very readable.  Still,
we might stare at Fig. 21 long enough to imagine that after about 4k samples
the &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;
no longer had the error the
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;logic PLL&lt;/a&gt;
was struggling with.&lt;/p&gt;

&lt;p&gt;But are we only imagining this?&lt;/p&gt;

&lt;p&gt;Well, I suppose we could cheat and examine the various phase counters from
within the PLLs and compare them to the original counter used to generate
the signal itself.  If you do that, you’ll get something that looks like
Fig. 22.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 22. Instantaneous phase counter error&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/chart-perr.png&quot; alt=&quot;&quot; width=&quot;490&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As with the previous figure, there’s a lot of junky noise on the left side of
this chart.  This is due to frequency error, and marked by the phase wrapping
around the unit circle and back again.  The large units, +/- 2e9, are simply
the &lt;a href=&quot;/dsp/2017/06/15/no-pi-for-you.html&quot;&gt;units of the phase
counter&lt;/a&gt; that we are
using.  Even in this figure, however, it appears as though the
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;’s
phase error converges on a right answer much faster than the
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;logic PLL&lt;/a&gt;’s
error does.&lt;/p&gt;

&lt;p&gt;Is there a way to “see” though this junk, though, and get a better picture
of what’s going on?&lt;/p&gt;

&lt;p&gt;To find out, let’s average our phase error and see which one gets closer.
Using the same &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;boxcar filter&lt;/a&gt;
applied to the phase error output from both PLL’s, we see an averaged phase
error plotted in Fig. 23 on the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 23. Averaged phase errors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/chart-averr.png&quot; alt=&quot;&quot; width=&quot;476&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this chart, it appears as though the
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;
quickly ran up a phase error so large it wrapped around the unit
circle.  The
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;
then went from estimating a lead to estimating a lag.  However, before you draw
too much of a conclusion from that, you need to notice that it recovers very
quickly and that from a point of about 8k steps on there’s essentially no
averaged phase error in the
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;
whereas the
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;logic PLL&lt;/a&gt;
we built earlier still takes another 5k samples or so to lock.&lt;/p&gt;

&lt;p&gt;Are we really achieving a faster lock?&lt;/p&gt;

&lt;p&gt;Let’s peek inside the two cores and check their frequency steps.  As you may
recall, the &lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;frequency “step” is really a phase step that’s used to implement
a frequency&lt;/a&gt;.  As with our
&lt;a href=&quot;/dsp/2017/06/15/no-pi-for-you.html&quot;&gt;other phase units&lt;/a&gt;,
this step ranges from -2e9 to 2e9, although the chosen
“correct” answer is found somewhere near 8.25e8.  Both PLLs are started with
the same erroneous frequency, and then tasked with finding and tracking the
right one.  Fig. 24 shows the frequency steps of the two PLLs as they each
attempt to track the frequency of the incoming waveform.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 24. Frequency step vs time, showing frequency acquisition time&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/quadpll/chart-fstep.png&quot; alt=&quot;&quot; width=&quot;476&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;By this time, the result comes as no surprise.  The
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;
indeed acquires a phase lock much faster than the basic
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;logic PLL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps this shouldn’t come as such a surprise.  While both cores are using
the same tracking loop, the
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;
has a better phase estimator.
Better information going into the loop &lt;em&gt;should&lt;/em&gt; result in better performance,
which is what we’ve seen in these figures.  As far as whether the performance
is really 2x better, I’ll let the charts speak for themselves.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;With only a few minor modifications, we were able to transform our simple,
basic
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;logic PLL&lt;/a&gt;
into a full-blown
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature PLL&lt;/a&gt;
for &lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;software (gateware) defined&lt;/a&gt;
radio applications.&lt;/p&gt;

&lt;p&gt;How well does the
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;new PLL&lt;/a&gt;
work?  Judging from performance simulations, it works much better than the
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;prior PLL&lt;/a&gt;.
How about in actual practice?  Sadly, I have
yet to put the two radios together on my desk to measure how well either
the &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/amdemod.v&quot;&gt;AM demodulator&lt;/a&gt;
or the &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/fmdemod.v&quot;&gt;FM demodulator&lt;/a&gt;
actually performs.  Until then, I suppose these simulations will feel real good
while never quite being the same as the real thing.&lt;/p&gt;

&lt;p&gt;As it is, I’ve already got another discussion queued up regarding how I built
the downsampling filters for the two demodulators.  Those should form another
good discussion, since it’s an important part of digital filtering that we have
yet to discuss on this blog.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;But in those sacrifices there is a remembrance again made of sins every year.  For it is not possible that the blood of bulls and of goats should take away sins. (Heb 10:3-4)&lt;/em&gt;</description>
        <pubDate>Thu, 12 Mar 2020 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/dsp/2020/03/12/quadpll.html</link>
        <guid isPermaLink="true">https://zipcpu.com/dsp/2020/03/12/quadpll.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Buidilng an AXI-Lite slave the easy way</title>
        <description>&lt;p&gt;Since writing my first two articles on AXI-Lite, the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;first discussing how
to verify the an AXI-Lite
interface&lt;/a&gt; and the &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;second
how to build an AXI-Lite
slave&lt;/a&gt;, I’ve had the
opportunity to build not just one but several AXI-Lite slaves.
(&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximm2s.v&quot;&gt;1&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;2&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;3&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilsingle.v&quot;&gt;4&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;5&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;6&lt;/a&gt;, etc.)
The cool part is, I’ve come across some really easy ways to do it that I
thought might be worth sharing.&lt;/p&gt;

&lt;p&gt;Before we start, one warning:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are interested in building an AXI-Lite slave the easy way,
&lt;em&gt;don’t start with vendor IP!&lt;/em&gt;  It’s &lt;a href=&quot;/formal/2019/09/16/axi-story.html&quot;&gt;broken&lt;/a&gt;.
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;Xilinx’s AXI-Lite demo code
has been broken since at least
2016&lt;/a&gt;.  They’ve promised
fixes in 2020, but I haven’t seen them yet.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/doc/orconf2019.pdf&quot;&gt;Intel’s designs are also
broken&lt;/a&gt;
(as is their forum or I might’ve reported the bugs).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, the place to start is with a &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal property
file&lt;/a&gt;.  From there, you can
either use a &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
or not, your choice, depending upon the performance you want from your AXI-lite
slave.  In both cases, though, we’re going to look today at how &lt;em&gt;easy&lt;/em&gt; we can
make building an AXI-Lite slave.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. AXI Signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/axi-signals.png&quot; alt=&quot;&quot; width=&quot;375&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you follow along below, consider the chart showing the various AXI signal
names shown in Fig. 1 on the right.  The chart is organized into columns by
channel: there’s the write address channel with signals prefixed by &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt;,
the write data channel with signals prefixed by &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;, the write return
channel with signals prefixed by &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;, the read address channel with signals
prefixed by &lt;code class=&quot;highlighter-rouge&quot;&gt;AR&lt;/code&gt; and the read return channel with signals prefixed by &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;.
In our slave below, we’ll follow Xilinx’s example and add the additional
prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_&lt;/code&gt;.
The top row of this chart shows the pair of handshaking signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt;, required for controlling data flow on each channel.
The next row shows the AXI-Lite signals we’ll be working with today.  The
three rows below that show AXI signals that aren’t a part of the AXI-&lt;em&gt;lite&lt;/em&gt;
protocol.&lt;/p&gt;

&lt;p&gt;Our goal will be to control a set of internal registers to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;our core&lt;/a&gt;, while
also replying to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
via the various AXI-Lite signals shown in black in
Fig. 1.&lt;/p&gt;

&lt;h2 id=&quot;four-registers&quot;&gt;Four Registers&lt;/h2&gt;

&lt;p&gt;For the sake of today’s discussion, let’s allow our slave to have four
registers.  We’ll call them &lt;code class=&quot;highlighter-rouge&quot;&gt;r0, r1, r2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please, before we go further though, don’t embarrass me.  If you copy this logic
for your own designs (and I expect you might), &lt;em&gt;rename these registers!&lt;/em&gt;  I’ve
just seen too many folks starting with &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/bench/formal/xlnxdemo.v&quot;&gt;Xilinx’s AXI-Lite demonstration
design&lt;/a&gt;
that then leave their registers named
stupid things like &lt;code class=&quot;highlighter-rouge&quot;&gt;slv_reg0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;slv_reg1&lt;/code&gt;, etc.  While that might be great for
a demonstration design, it’s completely inappropriate for any practical designs.
Indeed, if you look at &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;some of my own
examples&lt;/a&gt;, you’ll see I’ve given &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;my own
registers names&lt;/a&gt;
that match closer to their meaning.  For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd_abort&lt;/code&gt; (user has
commanded an abort), &lt;code class=&quot;highlighter-rouge&quot;&gt;r_busy&lt;/code&gt; (the core is busy working), &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd_addr&lt;/code&gt; (the
address to write to), &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd_length_w&lt;/code&gt; (length command, in words), &lt;code class=&quot;highlighter-rouge&quot;&gt;r_increment&lt;/code&gt;
(whether or not to increment the address), etc.  Register values don’t
need to be 32-bits in length either.  In &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v#L681-L694&quot;&gt;one particular example, a register
word&lt;/a&gt;
is composed of many little bits of information, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_busy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_err&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_complete&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_continuous&lt;/code&gt;, and more.  These fields are then
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v#L681-L694&quot;&gt;all concatenated together&lt;/a&gt;
into a &lt;code class=&quot;highlighter-rouge&quot;&gt;w_status_word&lt;/code&gt;.  For now, just do yourself tomorrow a favor today, by
making your code more readable than my example below.&lt;/p&gt;

&lt;p&gt;The only reason why I’m using registers &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;r1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;r1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt; is because
I’m’ trying to create a generic example that will be applicable for all
purposes.  (Yeah, I know, do as I say not as I do … but trust me on this one.)&lt;/p&gt;

&lt;p&gt;Let’s give each of these four registers a default value of zero,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and allow them to be written to any time the signal &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt; is true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The registers you set in
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;your core&lt;/a&gt;
may have some other default values.  &lt;em&gt;That’s okay&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We’ll come back and discuss two separate ways of setting &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt;
further down.  This will be the signal we use internally to determine
when and if we actually want to write to one of our registers.&lt;/p&gt;

&lt;p&gt;For now, note that &lt;code class=&quot;highlighter-rouge&quot;&gt;wskd_data&lt;/code&gt; is the data we wish to write to the register.
We’ll discuss how to set that later as well.  For example, it might either be
the output of a &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;, or be the
same as &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WDATA&lt;/code&gt;–but we’ll get to that in a moment.  In a similar
fashion, &lt;code class=&quot;highlighter-rouge&quot;&gt;awskd_addr&lt;/code&gt; is that portion of the write address that can be
used to distinguish between write registers.&lt;/p&gt;

&lt;p&gt;You’ll might also note that we haven’t used the &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write
strobes&lt;/a&gt; yet,
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt;.  While I suppose we might ignore them, that’s probably not
the greatest idea, especially since &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the
specification&lt;/a&gt; states explicitly that
a master wishing to abort a transaction should set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt; to zero.
Hence, our implementation should really support these strobe signals.&lt;/p&gt;

&lt;p&gt;Sadly, the logic required to support a write strobe is … annoying.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/bench/formal/xlnxdemo.v#L309-L314&quot;&gt;Inside
Xilinx’s demo, for example, you find all this Verilog code &lt;em&gt;per
register&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slv_reg_wren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_MEM_ADDR_BITS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;mh&quot;&gt;5&#39;h00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Respective byte enables are asserted as per write strobes
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Slave register 0
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;slv_reg0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This just &lt;em&gt;looks&lt;/em&gt; complicated, and it’s certainly much harder to read.&lt;/p&gt;

&lt;p&gt;Let’s clean that up instead, shall we?&lt;/p&gt;

&lt;p&gt;Let’s instead create a Verilog function to apply our
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write strobes&lt;/a&gt;
to a prior piece of data, producing a new piece of data.  Remember, if
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB[0]&lt;/code&gt; is true, then we want to adjust bits &lt;code class=&quot;highlighter-rouge&quot;&gt;7:0&lt;/code&gt;, if
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB[1]&lt;/code&gt; is true, then we’d want to adjust bits &lt;code class=&quot;highlighter-rouge&quot;&gt;15:8&lt;/code&gt;, and so on.  If
none of the strobes are true, then nothing should be changed.&lt;/p&gt;

&lt;p&gt;This little function below captures all of that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;apply_wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;prior_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;apply_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prior_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/formal/2019/11/18/genuctrlr.html&quot;&gt;As I’ve mentioned before&lt;/a&gt;,
I don’t typically use Verilog functions.  As with most things in hardware,
&lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;functions in hardware don’t do the same things that they do in
software&lt;/a&gt;.
Just as loops in Verilog create more hardware, functions in Verilog specify
how to create more hardware.  Further, submodules can also be used for much the
same thing–so functions aren’t really all that useful in Verilog contexts.
They do have their place, and I think this one will help us quite nicely
while still keeping all of our logic within a single module.&lt;/p&gt;

&lt;p&gt;Once we have a function for updating our register available to us, applying the
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write strobes&lt;/a&gt; to a
lot of registers gets a whole lot easier.  Here, we’ll take a series of
32-bit registers, and apply the
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write strobes&lt;/a&gt;
to each.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// apply_wstrb(old_data, new_data, write_strobes)
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wskd_r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wskd_r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wskd_r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wskd_r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;wskd_rN&lt;/code&gt; registers now contain what would be the result of
applying the write strobe to &lt;code class=&quot;highlighter-rouge&quot;&gt;rN&lt;/code&gt; on every clock tick.  That means we can
now use &lt;code class=&quot;highlighter-rouge&quot;&gt;wskd_rN&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;wskd_data&lt;/code&gt; when setting our registers below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_r3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s a whole lot simpler to understand than &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/bench/formal/xlnxdemo.v#L305-L565&quot;&gt;Xilinx’s demonstration
code&lt;/a&gt;,
now isn’t it?  Admittedly, the comparison isn’t really all that fair, since &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/bench/formal/xlnxdemo.v&quot;&gt;my
copy of Xilinx’s example&lt;/a&gt;
implements 32 registers and the demonstration logic above only implements 4,
but I still think the example above is a lot easier to read.&lt;/p&gt;

&lt;p&gt;You may even find that this structure is too complex for your needs.  Don’t
be afraid to split this logic block up into one block per register, such as
the code for &lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt; below, if it’s appropriate to do so for your design.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, this only &lt;em&gt;mostly&lt;/em&gt; covers the task of setting registers.  You may still
have registers that can only be set if certain conditions hold.  For example,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v&quot;&gt;in one of my own cores&lt;/a&gt;,
I &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v#L594-L634&quot;&gt;set an &lt;code class=&quot;highlighter-rouge&quot;&gt;r_err&lt;/code&gt; register&lt;/a&gt;.
Since the register makes a good example of what could be done, and how
following the script above isn’t always the right thing to do, let’s take
a really quick look at how this &lt;code class=&quot;highlighter-rouge&quot;&gt;r_err&lt;/code&gt; value was set.  First, the
register is cleared on any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;r_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since this &lt;code class=&quot;highlighter-rouge&quot;&gt;r_err&lt;/code&gt; register was drawn from a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v&quot;&gt;stream data to memory copy
core&lt;/a&gt;,
I wanted to know if the FIFO within was ever overrun–even when
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v&quot;&gt;the core&lt;/a&gt;
isn’t busy.  Hence, we’ll set the error on any overflow.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_continuous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is the hidden
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
write–matching our example code above: If &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt;, the
write address matches the address of the control register, the &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write
strobe&lt;/a&gt;
data for the byte containing &lt;code class=&quot;highlighter-rouge&quot;&gt;r_err&lt;/code&gt; is set, and the user writes a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;
to that bit to clear the error, then the error flag can be cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_CONTROL&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_err&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v&quot;&gt;the
core&lt;/a&gt;
is actively copying data from a stream to memory, then any writes to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_err&lt;/code&gt; register are ignored.  Instead, the register is set if ever &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/rtl/axis2mm.v&quot;&gt;the
core&lt;/a&gt;
receives an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
return,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or if the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
is so slow that it can’t keep up with the stream and data gets dropped.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No, this isn’t part of today’s &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;easy AXI-Lite
core&lt;/a&gt;.  I’m
just showing this tidbit of complex AXI-Lite logic to illustrate that this
approach to setting and adjusting registers can be much more complex than
we are showing here–and it’s not all that hard to do.  Indeed, today’s basic
“easy logic” lesson applies to equally to the more complex cores.&lt;/p&gt;

&lt;p&gt;There’s one final step common to all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
slave components: reading from the
registers.  Now that we’ve written to our registers above, we can now read
from them.  Today, we’ll read from the register indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;arskd_addr&lt;/code&gt; any
time &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_read_ready&lt;/code&gt; is true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you notice that we didn’t use our &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_read_ready&lt;/code&gt; signal at all?  It’s
not really required when reading.  Instead, we adjusted our outgoing read
data any time the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
allowed us to.&lt;/p&gt;

&lt;p&gt;That’s not necessarily a low power solution.  Wires that toggle when they
don’t need to consume unnecessary power, so let’s adjust this logic again
so that the outgoing read data is zero any time we aren’t reading.  Further,
since not all designs need this sort of low-power treatment, we’ll create an
option, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;, which (if set) will then be used to control whether
or not the read data should be zero whenever there’s no data being read.&lt;/p&gt;

&lt;p&gt;This adjusted logic starts off a touch different, since we now need to clear
our read data register on any reset–something we didn’t have to do before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the reset, though, our logic looks familiar again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is, it looks familiar until we get to the end.&lt;/p&gt;

&lt;p&gt;Here, at the end, we’ll set our outgoing value to zero if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;
is true, and we aren’t currently reading (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;!axil_read_ready&lt;/code&gt;).  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; part of this is key.  Since it’s a 1-bit parameter, if the
parameter is ever set to zero, the synthesis tool will quietly remove this
logic from our design–making it a no-cost “feature” when it isn’t used.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How much did this little &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; excursion cost us?  About 96 logic
elements out of a 51 element design.  How much did it gain us?  Well, the
juries still out on that one–I’m just adding in these tests to my cores now,
and I haven’t gotten to the point yet where I can verify that doing so is
valuable (or not).&lt;/p&gt;

&lt;p&gt;We’ve now gotten to the point where we can write to and read from our four
registers, except that we didn’t really handle the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
signaling yet.  That’s next.&lt;/p&gt;

&lt;h2 id=&quot;common-signaling&quot;&gt;Common Signaling&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Common responses&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/common-sigs.svg&quot; alt=&quot;&quot; width=&quot;375&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s now turn our attention to that portion of a simple AXI-lite slave that
would be common between any of our implementations: &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BRESP&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RRESP&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The two &lt;code class=&quot;highlighter-rouge&quot;&gt;xRESP&lt;/code&gt; signals are easy:  we’ll just leave them at &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b00&lt;/code&gt;, indicating
an &lt;code class=&quot;highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; response.  That means that there will never be any errors when
attempting to interact with this simple core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, we’ll move on to the &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; signal.  This signal needs to be
set following any successful write to &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;our
core&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and it needs to remain set until &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID &amp;amp;&amp;amp; S_AXI_BREADY&lt;/code&gt; are both true
together.  We can simplify clearing this register to just checking if
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, which then gives us,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The read return handshaking logic is almost identical to the write logic.
There are only superficial changes here, so this should look really familiar
to what we just did above for the write return channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_read_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_read_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_read_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// We accomplished all of our S_AXI_RDATA logic above, so we just
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// set the bus return signal, S_AXI_RDATA, to it here.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all the easy work.  It’s also the signaling that would stay the
same no matter how you implemented the front-end of this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;AXI-Lite
core&lt;/a&gt;: with
or without &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s.
Now it’s time to dive into the part that would change depending upon how you
wanted to implement the front-end.&lt;/p&gt;

&lt;h2 id=&quot;without-skid-buffers&quot;&gt;Without Skid Buffers&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Ready generation&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/axready-sigs.svg&quot; alt=&quot;&quot; width=&quot;375&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s take a look at how we might handle the incoming valid/ready handshaking.
Specifically, this includes how to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;.  These are also the signals
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;Xilinx messed up when they built their demonstration core.
interface&lt;/a&gt;&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4. Backpressure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/backpressure.png&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The difficult part about these ready signals is backpressure.
If the master holds &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; low, the slave must know to lower &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt;.  This is also true if the master holds &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; low, then the slave
needs to know to lower &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;.  Because these aren’t cases people normally
think of, these signals are easy to get wrong when testing via simulation alone.
It’s just not a case you might think of when writing your simulation scripts.&lt;/p&gt;

&lt;p&gt;In general, there’s two ways to deal with the incoming channels–both with
and without &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s.
With &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s,
your slave will be able to achieve lower latency and higher throughput.
Without the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s,
your slave will have less logic and only 50% throughput, but it will still
be a valid AXI-Lite slave.&lt;/p&gt;

&lt;p&gt;In this section, we’ll examine how to handle these handshakes the easy
way–without using
any &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Let’s start with the write side again.  We’ll follow &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;(and fix) Xilinx’s
example&lt;/a&gt; here
and only raise &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; when both &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt;
are true.  This will synchronize the two channels together–an important part
of any AXI slave.&lt;/p&gt;

&lt;p&gt;A first draft of this logic might look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this might work most of the time, it won’t work all the time.&lt;br /&gt;
Indeed, if we were to leave this logic like this, then we’d be making the
same (rough) mistake that &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;Xilinx made with their
core&lt;/a&gt;.  The problem is that
we didn’t check for backpressure.  So, let’s add that check in to our logic,
and make certain that &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_awready&lt;/code&gt; is low if ever the output channel
is stalled.  That is, we aren’t ready if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is high while
&lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; is still low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this is closer to what we want, we’re still not there.
With this logic alone, it is still possible that &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_awready&lt;/code&gt; might be true
on the same cycle that &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; !BREADY&lt;/code&gt; were also true.  (Remember,
&lt;code class=&quot;highlighter-rouge&quot;&gt;axil_awready&lt;/code&gt; is &lt;em&gt;registered&lt;/em&gt;, and so it has to be set one clock earlier!)
Were &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_awready&lt;/code&gt; to ever be true while &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID &amp;amp;&amp;amp; !BREADY&lt;/code&gt;, a write
response would get lost and our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
would hang–much like
&lt;a href=&quot;/formal/2019/09/16/axi-story.html&quot;&gt;Xilinx’s demo will hang&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s fix this by throttling our writes down to one write every other clock
cycle.  We’ll also clear &lt;code class=&quot;highlighter-rouge&quot;&gt;awready&lt;/code&gt; following any reset for good measure.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now set both of our write ready signals to be equal to this one,
and know that they’ll be properly synchronized.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, in order to match our logic above and to be able to use the same
logic both with and without a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
we’ll rename some of our signals
below–specifically &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWADDR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WDATA&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me back up for a moment and discuss &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDRLSB&lt;/code&gt;.  This is &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/bench/formal/xlnxdemo.v#L129&quot;&gt;another one of
those values Xilinx got wrong&lt;/a&gt;.
It’s supposed to be equal to the lowest address bit of the word address.  So,
for a 32-bit word, this should be bit &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;–allowing bits &lt;code class=&quot;highlighter-rouge&quot;&gt;1:0&lt;/code&gt; to be used to
specify which byte within the word a read is supposed to start from.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI&lt;/a&gt; supports sub-word
accesses nicely &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;via the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt; signal&lt;/a&gt;.
Using that signal, we might be able to tell if a read or write was for 8-bits
(&lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE==3&#39;b000&lt;/code&gt;) or 16-bits (&lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE==3&#39;b001&lt;/code&gt;) instead of all 32-bits
(&lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE==3&#39;b010&lt;/code&gt;).  AXI-Lite doesn’t have this signal.  Instead, AXI-Lite only
has the &lt;code class=&quot;highlighter-rouge&quot;&gt;WSTRB&lt;/code&gt; signal and even that only applies to writes.  In other words,
these sub-32-bit address bits really aren’t that useful for us, so we can
simply drop them.&lt;/p&gt;

&lt;p&gt;How many bits should be dropped?  Given that AXI-Lite is only ever a 32-bit
data width, the answer is an easy 2-bits.  But what if you wanted a 16-bit
data width, or a 64-bit width?  Then you might consider writing &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/53dafe2d54e7a72304afe36e73875a940a351b70/bench/formal/xlnxdemo.v#L129&quot;&gt;something like
Xilinx tried&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only problem is that I’ve seen this code copied into
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI (full) cores&lt;/a&gt;.  That’s
right, into cores that don’t have a fixed 32-bit width where this calculation
doesn’t match reality.  (In one particular example, some one used this
calculation on a 128-bit bus, only to struggle with the fact that his core
only ever wrote every other word …)  The correct setting for &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDRLSB&lt;/code&gt;
should be,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will then evaluate to &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; for a 32’bit
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;, as we would want.&lt;/p&gt;

&lt;p&gt;The address bits above the &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDRLSB&lt;/code&gt; bit, bits &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH-1:ADDRLSB&lt;/code&gt;,
can now be used to specify which &lt;em&gt;word&lt;/em&gt; we wish to transfer–whether
&lt;code class=&quot;highlighter-rouge&quot;&gt;r0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;r1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;r2&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;r3&lt;/code&gt;.  These will be the address bits we focus on.&lt;/p&gt;

&lt;p&gt;Finally, we need to create a signal to indicate that a value is ready to
be written, &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_write_ready&lt;/code&gt;.  The easy answer here is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;axil_awready&lt;/code&gt;,
the same signal we are using to accept the write request into our core.
This can then be used by all of our write logic above to tell
us when to write a new value to one of our registers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometime after Vivado 2016.3, Xilinx fixed the write bug in their AXI-Lite
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;demonstration
core&lt;/a&gt;.
(As of this writing, they have yet to fix the read bug.)
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/doc/orconf2019.pdf&quot;&gt;Their updated core can handle one write every three
clocks&lt;/a&gt;.
You’ll find that logic above is much simpler, and it will even handle one write
every two clocks–a nice throughput improvement–as shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. 50% Write throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/writereg-stalled.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Simplicity is a good thing.&lt;/p&gt;

&lt;p&gt;Reads are even easier to accomplish that writes.  In this case, we can just
set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; to be the complement of &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt;.  This allows us
to hold &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; high until a read request comes in, and then
immediately drop it until the read response has gone out.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axil_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_arready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The neat part about complementing logic like this on a LUT-based architecture,
is that the complement can often (not always) be folded into the LUT that would
read this signal, and so this becomes a zero cost signal.&lt;/p&gt;

&lt;p&gt;You can see how well we can handle reads in Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. 50% Read throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/readreg-stalled.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finally, we’ll read from &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;this IP
core&lt;/a&gt;
any time &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt;
are true, and we’ll read from an address given in &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;arskd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s about as simple as AXI-Lite logic can be made to be.  It’s also only
51 LUTs, vs 69 for &lt;a href=&quot;/formal/2019/09/16/axi-story.html&quot;&gt;Xilinx’s
(broken)&lt;/a&gt;
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite demo&lt;/a&gt;
(adjusted for four registers each).&lt;/p&gt;

&lt;h2 id=&quot;with-skid-buffers&quot;&gt;With Skid Buffers&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Skid Buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-blockdiag.svg&quot; alt=&quot;&quot; width=&quot;375&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problem with the &lt;em&gt;really&lt;/em&gt; simple  AXI-Lite logic above is simply throughput
performance.  The most it will ever perform is one transfer every other clock
tick.  If you want performance from an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;AXI-Lite
core&lt;/a&gt;,
you’ll want to add
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
to your design.&lt;/p&gt;

&lt;p&gt;You should also realize, however, that you’ll be fighting an uphill battle.
Xilinx’s infrastructure isn’t built for AXI-Lite performance.  Just fixing your
AXI-Lite core won’t fix their crippling AXI to AXI-Lite bridge, but I still do
it as a matter of pride in my own workmanship.  That said, there are &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;AXI to
AXI-Lite bridges&lt;/a&gt;
that will preserve the 100% throughput of AXI, and there are &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI-Lite
crossbars&lt;/a&gt; if these are
things you are interested in.  You just have to know to &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;where to look for
and find them&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 8. Buffer all three incoming channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/skidslave.svg&quot; alt=&quot;&quot; width=&quot;375&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is a really simple piece of logic that converts a combinatorial ready signal
to a registered one, as shown in Fig. 7 above.&lt;/p&gt;

&lt;p&gt;The key to getting high performance from any AXI slave is to place a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
on all the incoming channels, &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, as shown in Fig. 8 on the
left.  As you may recall from &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;our earlier
skid buffer discussion&lt;/a&gt;,
this allows the various &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt; signals generated by
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;our core&lt;/a&gt;
to be registered, even though the ready logic we need is combinatorial.&lt;/p&gt;

&lt;p&gt;Here’s how easy this gets.  First, place a
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
on both the &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; channels.  They’ll need to have an appropriate
width for the write address, write data, and write strobes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;awskd_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;skidbuffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axilawskid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we have two channels, and two sets of handshaking signals (one for
each channel), we’ll need two
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;skidbuffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axilwskid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wskd_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_strb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll accept a write request (and unstall the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s above)
any time there’s both a write address and write data available.
That is, unless the outgoing interface is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_write_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awskd_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wskd_valid&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s that simple.&lt;/p&gt;

&lt;p&gt;Now we can just repeat the process for the read channel.  First, we’ll add the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;arskd_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;skidbuffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axilarskid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRLSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arskd_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we accept a read request any time one is present, &lt;em&gt;and&lt;/em&gt; the outgoing
&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; channel isn’t stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arskd_valid&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axil_read_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here in this context, the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s seem like
less work than without.  This isn’t quite the case.  The reality is instead
that the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
hide the complexity of the AXI channel signaling within them making things
look simple here.  As a result, instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;51&lt;/code&gt; logic elements, we’ll now be
using closer to &lt;code class=&quot;highlighter-rouge&quot;&gt;114&lt;/code&gt;.  It’s still small beans, but it is over twice the size
of what
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;the core&lt;/a&gt;
was before.&lt;/p&gt;

&lt;p&gt;How well does
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;this core&lt;/a&gt;
perform with the 
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
attached?  Check out the write  performance in Fig. 9, where 4 write beats
are accomplished in 9 clocks periods in spite of three stall clocks and
the write data being misaligned by a clock period.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. 100% Write throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/writeskd-stalled.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you look carefully at Fig. 9 above, you’ll notice that certain values
disappear for a time.  For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;A0&lt;/code&gt; (white) value vanished for a
clock period before the white &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; response was generated.  Similarly,
the brown &lt;code class=&quot;highlighter-rouge&quot;&gt;A2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;D2&lt;/code&gt; values vanished while the yellow &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; output
was stalled.  Those values were maintained for us within the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s–making
sure that we didn’t lose them in spite of the fact that the various
interfaces have stalled.&lt;/p&gt;

&lt;p&gt;The read performance, shown in Fig. 10, is also similar in that 4 read
requests are returned in 8 clock periods in spite of 3 stall cycles.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. 100% Read throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/easyaxil/readskd-stalled.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The write performance would have been as fast as this read performance, if I
had chosen to issue the write address and write data to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;the core&lt;/a&gt;
on the same clock cycle–something the master could easily choose to do.&lt;/p&gt;

&lt;h2 id=&quot;formal-properties&quot;&gt;Formal Properties&lt;/h2&gt;

&lt;p&gt;How about verifying
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;this core&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;We’ll, there’s the easy way to make certain we are following AXI-Lite
signaling: just connect the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal AXI-Lite property
file&lt;/a&gt; to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;your core&lt;/a&gt;
and be done!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_AXIL_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXIL_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXIL_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// See the property file for a description of
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// these parameters--what they are, how they work,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// and what they do.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXRSTALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_COVER_BURST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should now be able to pass a bounded model check of any length.&lt;/p&gt;

&lt;p&gt;How about an &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;unbounded model
check&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;In this case, all we need to do is to correlate the three counters,
1) the number of write address requests outstanding, &lt;code class=&quot;highlighter-rouge&quot;&gt;faxil_awr_outstanding&lt;/code&gt;,
2) the number of write data requests outstanding, &lt;code class=&quot;highlighter-rouge&quot;&gt;faxil_wr_outstanding&lt;/code&gt;, and
3) the number of read requests outstanding, &lt;code class=&quot;highlighter-rouge&quot;&gt;faxil_rd_outstanding&lt;/code&gt;,
against what our logic expects.&lt;/p&gt;

&lt;p&gt;For example, if we aren’t using the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s,
there should never be more than one item outstanding.  (We don’t have storage
for more …)  Not only that, but any time &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is true there should be
exactly one write address or write data item outstanding.  The same is true
for &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt;, making the proof easy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_SKIDBUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The proof is a bit harder for the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
case.  In this case, we need to count what’s in the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
against our number of counts.  Hence, if the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
ever drops the outgoing ready signal, then there’s an item sitting in the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
waiting to be accepted by
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;our core&lt;/a&gt;.
(Feel free to check out Figs. 9 and 10 above to see this in action.)
We can count these extra items with something like
&lt;code class=&quot;highlighter-rouge&quot;&gt;(S_AXI_AWREADY ? 0:1)&lt;/code&gt;–knowing that &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; will only ever be low if
there’s something in the buffer.  Other than that change,
the counter checks should look the same.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faxil_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, we’ve proven that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
works.  We haven’t really proven that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;our core&lt;/a&gt;
works, so you might want to consider adding some logic
to check that the design actually reads from your registers as you might like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axil_read_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arskd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, there’s one last check.  That is, we wanted to make certain that
&lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; was zero if there was nothing to return–but only if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;
was set.  This is easily checked and verified.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve put the whole proof together into &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/easyaxil.sby&quot;&gt;five
parts&lt;/a&gt;:
Two verify that the AXI-lite signaling is handled properly first without
and then with the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
The next two double check that we can actually write four values to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;the core&lt;/a&gt;,
and read four values from it–letting the solver pick
which four values.  This was the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_COVER_BURST&lt;/code&gt; option
above–specifying that we wanted to be able to check how fast four
values might be returned.  The last part checks &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It’s unfortunate that the &lt;a href=&quot;/formal/2019/09/16/axi-story.html&quot;&gt;vendor AXI-Lite examples are so
broken&lt;/a&gt;,
because building and verifying that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;this slave&lt;/a&gt;
was &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;protocol compliant&lt;/a&gt;
wasn’t really all that hard to do.  The trickiest parts involved handling
any potential backpressure and guaranteeing that all outgoing signals were
properly registered.&lt;/p&gt;

&lt;p&gt;I realize I haven’t really used all of the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite
signals&lt;/a&gt; in
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;this example&lt;/a&gt;.
For example, we haven’t used the low order address bits nor wave we used the
various &lt;code class=&quot;highlighter-rouge&quot;&gt;AxPROT&lt;/code&gt; signals.  The reason why not is simply because we didn’t
need to.  Indeed, there’s a strong argument to be made that AXI is &lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/egkrce/is_axi_too_complicated/&quot;&gt;way more
complicated than it needs to
be&lt;/a&gt;–but
we can leave that discussion for another day.&lt;/p&gt;

&lt;p&gt;Until then, feel free to modify &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/easyaxil.v&quot;&gt;this
core&lt;/a&gt;
for your own purposes.  Don’t forget to check out how easy it is to
formally verify that it works along the way.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Lo, this only have I found, that God hath made man upright; but they have sought out many inventions. (Eccl 7:29)&lt;/em&gt;</description>
        <pubDate>Sun, 08 Mar 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2020/03/08/easyaxil.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/03/08/easyaxil.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Faith of a Mustard Seed</title>
        <description>&lt;p&gt;Every so often I write about topics in either Bible or ethics on &lt;a href=&quot;https://zipcpu.com/&quot;&gt;this
blog&lt;/a&gt;.
Today I’d like to discuss the “faith of a mustard seed” simply because the
passage is so often misunderstood.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And the Lord said, If ye had faith as a grain of mustard seed, ye might say
  unto this sycamine tree, Be thou plucked up by the root, and be thou planted
  in the sea; and it should obey you.
  (&lt;a href=&quot;https://blueletterbible.org/kjv/luk/17/6&quot;&gt;Luke 17:6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bottom line is that the Lord isn’t saying that if you had the very least
amount of faith then you could command sycamore trees to replant themselves
into the ocean.  Rather, Jesus is giving us an amazing example of faith
that should be an encouragement to all who believe.  Then, together with this
example, he describes what can be done with this kind of faith.&lt;/p&gt;

&lt;h2 id=&quot;jesus-doesnt-belittle&quot;&gt;Jesus doesn’t Belittle&lt;/h2&gt;

&lt;p&gt;Let’s back up, though, and walk through the passage.  After Jesus teaches a
message on forgiveness, the disciples decide they are going to need more faith.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And the apostles said unto the Lord, Increase our faith.
  (&lt;a href=&quot;https://blueletterbible.org/kjv/luk/17/5&quot;&gt;Luke 17:5&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jesus replies with,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And the Lord said, If ye had faith as a grain of mustard seed, ye might say
unto this sycamine tree, Be thou plucked up by the root, and be thou planted
in the sea; and it should obey you.
  (&lt;a href=&quot;https://blueletterbible.org/kjv/luk/17/6&quot;&gt;Luke 17:6&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s rearrange this exchange into something that might be more familiar, just
so we can look at the structure of the logic taking place.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Is a mustard seeds faith a high bar of faith to meet?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mustard-seed/impossible-bar.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;First, the disciples ask for help.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Help us! [A bad paraphrase]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let me ask, which of the following two answers would you expect from
the Lord: is he an impossible task-master who would belittle his own disciples
and tell them there’s no hope to be had for them, since they can’t even pass
the minimum bar?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You are so pitiful, you don’t even have the smallest miniscule amount of
of faith to do anything useful [Not what Jesus said]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or is He instead a loving friend, who would rather encourage the disciples
he is training so that they would then be equipped for success?
That is, would he rather teach them how they might go about having
more faith?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here’s how to achieve the greater faith you have asked for
 … [another bad paraphrase]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m going to go with this latter possibility, since Jesus was known for the
love he had for his disciples.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now before the feast of the passover, when Jesus knew that his hour was
come that he should depart out of this world unto the Father, &lt;em&gt;having loved
his own which were in the world, he loved them unto the end&lt;/em&gt;.
(&lt;a href=&quot;https://blueletterbible.org/kjv/joh/13/1&quot;&gt;John 13:1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s go look at the rest of the evidence, and see if this reading holds.&lt;/p&gt;

&lt;h2 id=&quot;other-references-to-mustard-seeds&quot;&gt;Other References to Mustard Seeds&lt;/h2&gt;

&lt;p&gt;A quick search through the Gospels reveals that Jesus discusses mustard seeds
four other times.  Of these four other times, it is only in one of them that
he appears to be teaching the same lesson.  The other three appear on a first
glance to be part of a different lesson, but I think we’ll see below that
all five mustard seed passages form the same lesson of faith.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. Five passages discuss mustard seeds&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mustard-seed/five-passages.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the case of the one other verse that looks similar, Jesus had just come
down from the mount of transfiguration with
his inner circle only to find an impatient crowd waiting for him.  The crowd
centered around a man with a demon possessed son.  Apparently, &lt;a href=&quot;https://blueletterbible.org/kjv/mat/17/16&quot;&gt;his disciples
were unable to cast out the demon&lt;/a&gt;
&lt;a href=&quot;https://blueletterbible.org/kjv/luk/10/17&quot;&gt;this time&lt;/a&gt;.  After &lt;a href=&quot;https://blueletterbible.org/kjv/mat/17/18&quot;&gt;Jesus then
casts out the demon&lt;/a&gt;,
the disciples then ask him why they couldn’t cast out the demon.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then came the disciples to Jesus apart, and said, Why could not we cast
   him out?  (&lt;a href=&quot;https://blueletterbible.org/kjv/mat/17/19&quot;&gt;Matthew 17:19&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jesus answer appears very similar to the &lt;a href=&quot;https://blueletterbible.org/kjv/luk/17/6&quot;&gt;one we started from in
Luke&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And Jesus said unto them, Because of your unbelief: for verily I say
   unto you, If ye have faith as a grain of mustard seed, ye shall say unto
   this mountain, Remove hence to yonder place; and it shall remove; and
   nothing shall be impossible unto you.
   (&lt;a href=&quot;https://blueletterbible.org/kjv/mat/17/20&quot;&gt;Matthew 17:20&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that the same phrase appears to be repeated, &lt;em&gt;“If ye had faith as a grain
of mustard seed”&lt;/em&gt;, and in both cases the ability to do something apparently
impossible is promised.  It would seem to me that this message and concept
was so important to Jesus that he needed to repeat it to his disciples more
than once.
This is confirmed to us by the surrounding details of the passage: The
&lt;a href=&quot;https://blueletterbible.org/kjv/luk/17/6&quot;&gt;lesson in Luke&lt;/a&gt;
was taught as part of his many lessons to his disciples, whereas the
&lt;a href=&quot;https://blueletterbible.org/kjv/mat/17/20&quot;&gt;lesson in Matthew&lt;/a&gt;
was taught to only a few after He came down from the mountain.&lt;/p&gt;

&lt;p&gt;As for the other three times Jesus mentions mustard seeds,
they are all part of parables Jesus uses to describe the Kingdom of God.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another parable put he forth unto them, saying, The kingdom of heaven is
  like to a grain of mustard seed, which a man took, and sowed in his field: 
Which indeed is the least of all seeds: but when it is grown, it is the
  greatest among herbs, and becometh a tree, so that the birds of the air
  come and lodge in the branches thereof.
  (&lt;a href=&quot;https://blueletterbible.org/kjv/mat/13/31-32&quot;&gt;Matthew 13:31-32&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, a mustard seed is the &lt;em&gt;least&lt;/em&gt; among all seeds, but becomes the &lt;em&gt;greatest&lt;/em&gt;
of all herbs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And he said, Whereunto shall we liken the kingdom of God? or with what
  comparison shall we compare it? 
It is like a grain of mustard seed, which, when it is sown in the earth, is
  less than all the seeds that be in the earth: 
But when it is sown, it groweth up, and becometh greater than all herbs, and
  shooteth out great branches; so that the fowls of the air may lodge under
  the shadow of it.
  (&lt;a href=&quot;https://blueletterbible.org/kjv/mar/4/30-32&quot;&gt;Mark 4:30-32&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The comparison here is subtly different, but it has the same purpose.  I’ve
&lt;a href=&quot;/blog/2019/12/25/christmas-gospel.html&quot;&gt;argued in the past&lt;/a&gt;
that Jesus was known for teaching the same message from one place to
the next with only slight differences, and this fits into that same mold.  For
example, the &lt;a href=&quot;https://blueletterbible.org/kjv/mat/5&quot;&gt;sermon on the mount&lt;/a&gt; was
later &lt;a href=&quot;https://blueletterbible.org/kjv/luk/6/21&quot;&gt;repeated in the valley&lt;/a&gt;.
It shouldn’t be too surprising, then, to hear this same teaching more than once
in multiple contexts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then said he, Unto what is the kingdom of God like? and whereunto shall I
   resemble it? 
It is like a grain of mustard seed, which a man took, and cast into his
   garden; and it grew, and waxed a great tree; and the fowls of the air
   lodged in the branches of it.
   (&lt;a href=&quot;https://blueletterbible.org/kjv/luk/13/18-19&quot;&gt;Luke 13:18-19&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jesus disciples apparently felt that this teaching was so important that each
of Matthew, Mark, and Luke all wanted to record it.&lt;/p&gt;

&lt;p&gt;It’s also notable that Jesus emphasized both the small size of the mustard
seed, as well as the large size of the mustard tree that grew from the seed.
Another important detail, common to all three of these passages, is that the
resulting tree grows so big that it provides rest for the “fowls of the air.”&lt;/p&gt;

&lt;p&gt;What’s not quite so apparent is what these latter three passages have
to do with the other two passages on the faith of a mustard seed.  As we’ll
see in a moment, though, these extra three passages are really the key to
understanding the whole concept.&lt;/p&gt;

&lt;h2 id=&quot;what-is-faith&quot;&gt;What is Faith?&lt;/h2&gt;

&lt;p&gt;Before we can go any further, we need to back up for a moment and understand
what “faith” is in the first place.  The Greek word for faith, &lt;em&gt;pistis&lt;/em&gt;, is
translated into English as either “faith”, “believe” or “belief”, or “trust”.
The difference in word choice between these three is primarily based upon
which grammatical form the word is used within, more than it is the meaning.
“Trust” and “believe” are both verbs.  Faith is a noun describing someone who
trusts.  Indeed, biblical faith, trust, and belief are just three words that
each describe the same concept.&lt;/p&gt;

&lt;p&gt;This simple reality will help you dispel many of the false teachings of faith.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Faith without an object is meaningless&lt;/p&gt;

    &lt;p&gt;Perhaps you’ve heard people teach that, “You must have faith.”
Unfortunately, unless the object of that faith is apparent from the
context, such a statement is as meaningless as if they were to have said,
“You must trust.”  Trust what?  Trust whom?
Without answering the question of who or what you are supposed to trust in,
the word “faith” loses all of its meaning.&lt;/p&gt;

    &lt;p&gt;Perhaps these well meaning individuals have wished to imply providence,
as in “You must just trust that all things will somehow work themselves out”?
Even that’s a hard pill to swallow, given the number of folks for whom
providence hasn’t been very kind.  Consider, for example, the passengers
on board the Titanic.  How many of these individuals were saved by
providence?  Sure, history records that many individuals were saved
from the sinking Titanic, just not all.  Moreover, providence didn’t
seem to pick and choose among those it saved based upon who trusted
in it or not.&lt;/p&gt;

    &lt;p&gt;No, the object of your faith is just as important, if not more so, than the
existence of your faith in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is no “power” in faith&lt;/p&gt;

    &lt;p&gt;Just as trust has no power on its own, neither is there any power in faith.
The “power” that is often associated with faith actually comes from the one
who is trusted.&lt;/p&gt;

    &lt;p&gt;The God who holds the universe together, however, has a lot of power.
Any &lt;a href=&quot;https://blueletterbible.org/kjv/exo/20/11&quot;&gt;God who can create the world in six days, together with everything
within it&lt;/a&gt; is a powerful God.&lt;/p&gt;

    &lt;p&gt;How powerful is He?  He &lt;a href=&quot;https://blueletterbible.org/kjv/gen/1/14-19&quot;&gt;created the sun in a
day&lt;/a&gt;.  He flooded the entire
world, sparing only eight people.  He parted the &lt;a href=&quot;https://blueletterbible.org/kjv/exo/14/15-16&quot;&gt;red
sea&lt;/a&gt; so His people could
cross on dry ground.  He even &lt;a href=&quot;https://blueletterbible.org/kjv/mat/28/5-6&quot;&gt;raised Jesus from the
dead&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;That’s a powerful God.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Faith requires a promise&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mustard-seed/thepromise.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Faith isn’t blind&lt;/p&gt;

    &lt;p&gt;Our faith is built upon what we know of the individual we place our faith
in.  In general, there are a couple of questions you will want to ask
yourself when placing your faith in another.  1) Has the other person, the
one I wish to trust, promised me that he will do something that I wish to
trust him to do?  &lt;a href=&quot;https://blueletterbible.org/kjv/rom/10/17&quot;&gt;This usually requires some form of
promise&lt;/a&gt;.  2) Is the other
person capable of doing what I am trusting him to do?
3) Is he trustworthy?  That is, can I trust him for this purpose?&lt;/p&gt;

    &lt;p&gt;Notice how Paul puts it, when he describes how he has been &lt;em&gt;persuaded&lt;/em&gt;,&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;… for I know whom I have believed, and am persuaded that he is able to
keep that which I have committed unto him against that day.
(&lt;a href=&quot;https://blueletterbible.org/2ti/1/12&quot;&gt;2 Tim 1:12&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;This is not blind faith.  It is well reasoned faith.  It describes the man
who, upon examining God and His word and getting to know Him, is now so
persuaded by the evidence that he is willing to trust God with his very life.&lt;/p&gt;

    &lt;p&gt;Or, as Job puts it,&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Though he slay me, yet will I trust in Him. …
   (&lt;a href=&quot;https://blueletterbible.org/kjv/job/13/15&quot;&gt;Job 13:15&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Why, even Jesus instructs us to count the cost before making any commitments.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;For which of you, intending to build a tower, sitteth not down first, and
  counteth the cost, whether he have sufficient to finish it?
Lest haply, after he hath laid the foundation, and is not able to finish
  it, all that behold it begin to mock him,
  (&lt;a href=&quot;https://blueletterbible.org/kjv/luk/14/28-29&quot;&gt;Luke 14:28-29&lt;/a&gt;)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The misunderstanding common to the passages discussing faith and mustard seeds
is that “faith” cannot plant trees into the oceans any more than it can move
mountains.  Those things require an actor, rather than a vacuous “trust”.
Not only do they require an actor, but in these examples God is the
only actor capable of moving mountains or causing trees to pluck themselves
out of the ground and replant themselves into the ocean.  The first lesson
of Jesus teaching on mustard seeds, therefore, is that we must place our
“trust” in the one and only Almighty God.&lt;/p&gt;

&lt;h2 id=&quot;faith-is-evidenced-by-action&quot;&gt;Faith is Evidenced by Action&lt;/h2&gt;

&lt;p&gt;The second lesson of faith is that it is revealed by action.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yea, a man may say, Thou hast faith, and I have works: shew me thy
  faith without thy works, and I will shew thee my faith by my works. 
  (&lt;a href=&quot;https://blueletterbible.org/kjv/jam/2/18&quot;&gt;James 2:18&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4. Is a mustard seeds faith a high bar of faith to meet?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mustard-seed/works.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is the key to understanding the faith of a mustard seed: a mustard
seed’s faith is made known by what the mustard seed does.  This isn’t to
say that faith and works are the same thing, see for example Fig. 4, but
rather that a man’s works reveal who it is that he is choosing to trust.&lt;/p&gt;

&lt;p&gt;Okay, so what does a mustard seed do that reveals its faith?&lt;/p&gt;

&lt;p&gt;It becomes a tree.&lt;/p&gt;

&lt;p&gt;So what?  Isn’t that what all seeds do?&lt;/p&gt;

&lt;p&gt;Not quite.  Let’s go back and look at the lessons above a bit more.  Did you
notice how Jesus made a point that these mustard seeds were the “&lt;a href=&quot;https://blueletterbible.org/kjv/mat/13/31-32&quot;&gt;least of
all seeds&lt;/a&gt;”?  Why is
that important?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. True faith leads to, and is evidenced by action, but action does not create faith on its own&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mustard-seed/germination.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Like any seed, a mustard seed is called upon by God to put a root down into
the ground to find water and food within the soil, and then to send a shoot up
into the air to find sunlight.  If it cannot find food, water and sunlight
after breaking open its shell then it will die.  To make this possible,
seeds have a limited amount of energy stored within their seedpod.  The
bigger the seed, the more energy the seed has to find food, water, and light.&lt;/p&gt;

&lt;p&gt;The mustard seed, however, is the
“&lt;a href=&quot;https://blueletterbible.org/kjv/mat/13/31-32&quot;&gt;least of all seeds&lt;/a&gt;.”
It has less energy than any other seed to find food, water, and light
and live.&lt;/p&gt;

&lt;p&gt;With so little energy, it doesn’t have enough energy for a second chance.  It
gets one chance to find food, water, and light, and even
then it only has a bare minimum of resources to do it with.&lt;/p&gt;

&lt;p&gt;Now, place yourself in the position of such a seed.  &lt;a href=&quot;https://blueletterbible.org/kjv/luk/21/1-4&quot;&gt;You have barely any
money in your bank account–perhaps no more than a dollar to your name.  What
would you do with it&lt;/a&gt;?  Since
you only have the one dollar, you only have enough for one chance.  Who
would you trust to advise you on how to spend your only dollar?&lt;/p&gt;

&lt;p&gt;Now, and perhaps only now, does the faith of mustard seed come into play.&lt;/p&gt;

&lt;p&gt;The mustard seed is known for its faith because, having no other option, it
must choose to trust God and &lt;em&gt;give everything&lt;/em&gt; it has to either become a
tree or die trying.&lt;/p&gt;

&lt;p&gt;This is Jesus answer to the disciples request, “Lord, increase our faith.”
Instead of belittling his disciples, Jesus is encouraging both them and us
by giving us an example that describes the incredible faith of another.  If
a mustard seed can trust God with its life, then perhaps we can too.&lt;/p&gt;

&lt;p&gt;As Jesus explains in John,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Verily, verily, I say unto you, Except a corn of wheat fall into the ground
  and die, it abideth alone: but if it die, it bringeth forth much fruit. 
  (&lt;a href=&quot;https://blueletterbible.org/kjv/joh/12/24&quot;&gt;John 12:24&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jesus then truly took his own message to heart, and died on a cross only
to rise again three days later.  He gave everything at God’s command, trusting
God to take care of Him.&lt;/p&gt;

&lt;p&gt;Like the mustard seed and like Jesus, you and I have only one life to give.&lt;/p&gt;

&lt;h2 id=&quot;the-tares&quot;&gt;The Tares&lt;/h2&gt;

&lt;p&gt;There’s another very profound lesson for us in &lt;a href=&quot;https://blueletterbible.org/kjv/mat/13/24-30&quot;&gt;Matthew
13&lt;/a&gt;, just before Jesus
discusses mustard seeds, that fits importantly into this lesson.  In this
parable, Jesus tells of a man who sows “good seed” into his field, only to
watch as the field produced tares as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But while men slept, his enemy came and sowed tares among the wheat, and
  went his way. 
But when the blade was sprung up, and brought forth fruit, then appeared the
  tares also. 
So the servants of the householder came and said unto him, Sir, didst not
  thou sow good seed in thy field? from whence then hath it tares?
  (&lt;a href=&quot;https://blueletterbible.org/kjv/mat/13/25-27&quot;&gt;Matt 13:25-27&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The lesson I wish to draw here is so obvious that it shouldn’t need saying,
but sadly it does: Wheat seed produces wheat, not tares.  The householder’s
servants realized that tares would only grow from tare seeds, not wheat
seeds.  Forget what you were taught in evolution class, scientists can’t
repeat any of those theories in a lab anyway.  Apple seeds produce apple
trees.  They do not produce not cherry trees.  Mustard seeds produce
mustard trees, not pineapple trees.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And God said, Let the earth bring forth grass, the herb yielding seed,
   and the fruit tree yielding fruit after his kind, whose seed is in itself,
   upon the earth: and it was so. 
  (&lt;a href=&quot;https://blueletterbible.org/kjv/gen/1/11&quot;&gt;Gen 1:11&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Trees and herbs reproduce &lt;em&gt;after their kind&lt;/em&gt;.  This statement matches all
scientific observation to date, in spite of any Darwinian theories you may
have heard teaching otherwise.&lt;/p&gt;

&lt;p&gt;My point is simply this: When a mustard seed trusts God to break from its
shell and grow, it doesn’t get a choice of what it will become.  It will
either become a mustard tree or it will die trying.  That’s the only choice
God gives it.&lt;/p&gt;

&lt;p&gt;You and I are no different.  Only a young “&lt;a href=&quot;https://en.wikipedia.org/wiki/Jonathan_Edwards_(theologian)&quot;&gt;Jonathan
Edwards&lt;/a&gt;” will ever
grow up to be a mature “&lt;a href=&quot;https://www.blueletterbible.org/Comm/edwards_jonathan/Sermons/Sinners.cfm&quot;&gt;Jonathan
Edwards&lt;/a&gt;”.
Forget what all those motivational speakers tell you about growing up to
be whoever you want to be.  You will grow up to be you, just like a mustard
seed grows into a mustard tree and not an apple tree.&lt;/p&gt;

&lt;p&gt;What if you want to grow up and be someone else?&lt;/p&gt;

&lt;p&gt;Then you will lead a very frustrated life, since you will never be that someone
else you wish to grow into.  You will only ever grow up to be you, just as
wheat seeds only grow up to be wheat, and mustard seeds only grow into mustard
trees.  You are already the seed of who you will become.  It is up to you to
discover who that is going to be.&lt;/p&gt;

&lt;h2 id=&quot;replanting-trees-and-moving-mountains&quot;&gt;Replanting Trees and Moving Mountains&lt;/h2&gt;

&lt;p&gt;Of course, the obvious next question is, why doesn’t anyone have this kind of
faith?  Or, alternatively if they do, why haven’t we seen trees replanted into
the sea or &lt;a href=&quot;https://www.blueletterbible.org/kjv/psa/46/2&quot;&gt;mountains moved into the
sea&lt;/a&gt;?  If Jesus wasn’t
belittling our faith, then who can ever have this kind of faith?&lt;/p&gt;

&lt;p&gt;These are good questions, and they shouldn’t be dismissed.  They are also
why Jesus, once he finishes
discussing the faith of a mustard seed in Luke, immediately switches into
a following parable.  The two lessons go together.  If you separate them,
you’ll miss the meaning of the parable of the mustard seed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But which of you, having a servant plowing or feeding cattle, will say unto
  him by and by, when he is come from the field, Go and sit down to meat? 
And will not rather say unto him, Make ready wherewith I may sup, and gird
  thyself, and serve me, till I have eaten and drunken; and afterward thou
  shalt eat and drink? 
Doth he thank that servant because he did the things that were commanded
  him? I trow not. 
So likewise ye, when ye shall have done all those things which are commanded
  you, say, We are unprofitable servants: we have done that which was our
  duty to do.  (&lt;a href=&quot;https://blueletterbible.org/kjv/luk/17/7-10&quot;&gt;Luke 17:7-10&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This parable points out that the life of faith, that is to say, the life of
someone who trusts God, isn’t a life of service to self.  The person of trusts
God will do what God says, and so be His servant.&lt;/p&gt;

&lt;p&gt;As God’s servant, it is not your place to ask or worse to demand that God
move a mountain for you.  God is not your servant, slave, or puppet.  That
was never His purpose in calling you to be His servant.  &lt;a href=&quot;https://www.blueletterbible.org/kjv/tit/2/14&quot;&gt;His purpose was
instead to have you serve Him&lt;/a&gt;.
If He tells you to move a mountain, then go tell that mountain to move by
His authority knowing ahead of time that it will obey you.&lt;/p&gt;

&lt;p&gt;Personally, he hasn’t asked me to move any literal mountains … yet.  He
hasn’t asked me to tell trees to pluck themselves up and to replant themselves
into the ocean.  He has asked me to do some &lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/5/48&quot;&gt;other, less obvious,
impossibilities&lt;/a&gt;–but
those are all stories for another day.&lt;/p&gt;

&lt;p&gt;At this point, I need to point out that the Bible is filled with
examples of individuals who were asked, by God, to do the impossible.
Shall we take a look at just a few of them?&lt;/p&gt;

&lt;h2 id=&quot;the-dry-bones&quot;&gt;The Dry Bones&lt;/h2&gt;

&lt;p&gt;Have you ever read Ezekiel’s prophecy of the dry bones?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The hand of the LORD was upon me, and carried me out in the spirit of the
   LORD, and set me down in the midst of the valley which was full of bones, 
And caused me to pass by them round about: and, behold, there were very many
   in the open valley; and, lo, they were very dry.&lt;/p&gt;

  &lt;p&gt;And he said unto me, Son of man, can these bones live?&lt;/p&gt;

  &lt;p&gt;And I answered, O
   Lord GOD, thou knowest.&lt;/p&gt;

  &lt;p&gt;Again he said unto me, Prophesy upon these bones, and say unto them, O ye
   dry bones, hear the word of the LORD. 
Thus saith the Lord GOD unto these bones; Behold, I will cause breath to
   enter into you, and ye shall live: 
And I will lay sinews upon you, and will bring up flesh upon you, and cover
   you with skin, and put breath in you, and ye shall live; and ye shall
   know that I am the LORD.&lt;/p&gt;

  &lt;p&gt;So I prophesied as I was commanded: and as I prophesied, there was a noise,
   and behold a shaking, and the bones came together, bone to his bone. 
And when I beheld, lo, the sinews and the flesh came up upon them, and the
   skin covered them above: but there was no breath in them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The story goes on, but at this point the theme should be apparent.  First, God
presents an impossible situation to His prophet.  He then asks a question
about it, “Can these bones live?”  Personally, I’d be pretty certain the
answer would probably be no, but Ezekiel hedges his bet and figures the
Lord wouldn’t ask him this unless He already had something planned.  Instead,
Ezekiel answers, “O Lord God, thou knowest.”&lt;/p&gt;

&lt;p&gt;Then God tells Ezekiel to prophesy to the bones.  He gives Ezekiel a message
to give to them.  As a faithful messenger, Ezekiel speaks the message, and
the bones come to life.&lt;/p&gt;

&lt;p&gt;That’s the kind of faith a mustard seed has.&lt;/p&gt;

&lt;p&gt;Ezekiel had no power to raise the dead.  He had no power to cause dead bones
to take on flesh.  What he did have was the power to speak, and to speak as he
was told.  The rest was up to God.&lt;/p&gt;

&lt;h2 id=&quot;naaman-the-leper&quot;&gt;Naaman the Leper&lt;/h2&gt;

&lt;p&gt;Okay, I’ll admit that although the story of Ezekiel with the dry bones was
pretty amazing, it seemed kind of … ethereal?  I mean, didn’t he start out
the whole account by saying that it took place while he was “in the spirit”?
How about something more concrete?&lt;/p&gt;

&lt;p&gt;What about &lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/1&quot;&gt;Naaman then, the captain of Syria’s army who was also a
leper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Naaman found his way to the home of the prophet Elisha, asking for help.
(If you haven’t read how he ended up at Elisha’s residence, then I’ll
just point out that the full history is &lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/7&quot;&gt;quite
humorous&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Elisha then &lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/10&quot;&gt;told him to wash in the Jordan seven
times&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Much to Naaman’s surprise, Elisha didn’t even come to the door.  Elisha
didn’t accept any gifts, and only spoke to him through his servant.  Naaman
was &lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/11&quot;&gt;quite offended at this, and didn’t want to wash in the Jordan of all
rivers&lt;/a&gt;.
&lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/12&quot;&gt;Didn’t Syria have better rivers, he wondered out
loud&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Eventually, &lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/13&quot;&gt;Naaman’s servants convinced him to wash in the
Jordan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nothing happened after washing six times.  What good was there in washing
again?  But &lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/14&quot;&gt;after washing the seventh time, he was
cured &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here we see the faith of a mustard seed again.  Naaman was given a command.
He had only the choice to follow the command or not.  Like the mustard seed,
whose choice is to open up and send a root down and a shoot up, Naaman
chose to obey and was made whole.  &lt;a href=&quot;https://blueletterbible.org/kjv/2ki/5/17&quot;&gt;His life was never the same
again&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;jesus-rose-from-the-dead&quot;&gt;Jesus rose from the dead&lt;/h2&gt;

&lt;p&gt;Perhaps the most striking example of faith is the example provided by Jesus
Himself, who &lt;a href=&quot;https://blueletterbible.org/kjv/heb/12/2&quot;&gt;chose to endure the
cross&lt;/a&gt; knowing He would be
raised back from the dead following it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Therefore doth my Father love me, because I lay down my life, that
  I might take it again.
No man taketh it from me, but I lay it down of myself. I have power to
  lay it down, and I have power to take it again. This commandment have
  I received of my Father.
  (&lt;a href=&quot;https://blueletterbible.org/kjv/joh/10/17-18&quot;&gt;John 10:17-18&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My point here is simply that Jesus already had the command from His Father.
Before He stepped out onto His own leap of faith, that of dying on a cross,
He already had the commandment from the Almighty that He would be able to
raise Himself back up again from the dead.&lt;/p&gt;

&lt;p&gt;Let’s see, do we have all the elements of faith there?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Has the other person promised to perform something?&lt;/p&gt;

    &lt;p&gt;Yes.  God had given Jesus the command that Jesus had the power to both
lay down His own life and to raise it up again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is the other person capable of doing what I am trusting him to do?&lt;/p&gt;

    &lt;p&gt;Jesus certainly believed so.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is He trustworthy?&lt;/p&gt;

    &lt;p&gt;In this case, history teaches us that &lt;a href=&quot;https://blueletterbible.org/kjv/1co/15/4-8&quot;&gt;God did indeed raise Jesus from the
dead&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, if God told you that &lt;a href=&quot;https://blueletterbible.org/kjv/1co/15/22&quot;&gt;you could die and rise
again&lt;/a&gt;, would you believe Him?
What kind of faith would that require?  What kind of life would you then live?&lt;/p&gt;

&lt;h2 id=&quot;heroes-of-the-faith&quot;&gt;Heroes of the Faith&lt;/h2&gt;

&lt;p&gt;I could go on, since there are so many other examples prevalent in the
scriptures.  &lt;a href=&quot;https://blueletterbible.org/kjv/gen/12/1&quot;&gt;Abraham was asked to leave his home, to follow a God
who would lead him to a land he could call his own&lt;/a&gt;.
&lt;a href=&quot;https://blueletterbible.org/kjv/exo/14/15-16&quot;&gt;Moses was asked to lead the children of Israel
through the red sea&lt;/a&gt;.
&lt;a href=&quot;https://blueletterbible.org/kjv/1sa/16/1-12&quot;&gt;David was promised that he’d become the king&lt;/a&gt;, and on the strength of that promise
&lt;a href=&quot;https://blueletterbible.org/kjv/1sa/17/45-49&quot;&gt;challenged Goliath&lt;/a&gt;
knowing that he hadn’t been crowned king yet, and that God’s promise would hold.
&lt;a href=&quot;https://blueletterbible.org/kjv/1ki/17/1&quot;&gt;Elijah was told to tell Ahab, the king of
Israel, that it wouldn’t rain again until Elijah said so&lt;/a&gt; and then
&lt;a href=&quot;https://blueletterbible.org/kjv/1ki/17/2-3&quot;&gt;told by God to run&lt;/a&gt;.  It didn’t
rain for another
&lt;a href=&quot;https://blueletterbible.org/kjv/jam/5/17&quot;&gt;three and a half years&lt;/a&gt;,
until God told him to pray for rain.&lt;/p&gt;

&lt;p&gt;I’d love to go on, but &lt;a href=&quot;https://blueletterbible.org/kjv/heb/11/32&quot;&gt;space here will not permit much more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, remember this: the mustard seed’s faith was not defined by its small
size.  Rather, the faith of a mustard seed is revealed by what it does with
the little that it has.  You see, it is only the mustard seed that is willing
to give everything in obedience to God that will ever become a mustard tree.
The faith of a mustard seed therefore isn’t a put down.  On the contrary,
the mustard seed’s faith is a great example that should be an encouragement
for all of us to follow.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And the Lord said, If ye had faith as a grain of mustard seed, ye might say unto this sycamine tree, Be thou plucked up by the root, and be thou planted in the sea; and it should obey you. (Luke 17:6)&lt;/em&gt;</description>
        <pubDate>Mon, 17 Feb 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2020/02/17/mustard-seed.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/02/17/mustard-seed.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>A Histogram Gone Bad</title>
        <description>&lt;p&gt;We all like “true stories”.  Today’s tale is one of those “Doh!  It just
happened to me!” stories.&lt;/p&gt;

&lt;p&gt;If you’ve been following my blog, you’ll remember the comments I made late last
year about &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;how valuable a histogram can
be&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. An FPGA defined radio setup&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/radio-set.jpg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Well, Edmund from &lt;a href=&quot;https://symbioticeda.com&quot;&gt;Symbiotic EDA&lt;/a&gt; had asked me
to build an &lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;FPGA radio core&lt;/a&gt; for him–just
some simple demonstrator cores that could be used to help teach basic software
defined radio principles to new and young engineers.  The hardware I was given
to use was an &lt;a href=&quot;https://github.com/icebreaker-fpga/icebreaker&quot;&gt;icebreaker FPGA
board&lt;/a&gt;, and an &lt;a href=&quot;https://github.com/xil-se/SX1257-PMOD&quot;&gt;SX1257
radio PMod&lt;/a&gt;.
More specifically, I had two of each of these as shown in Fig. 1.&lt;/p&gt;

&lt;p&gt;My thought was to use one of these as a transmitter, and the other as a
receiver.  Even better, I had a &lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;PMod MIC3 microphone from
Digilent&lt;/a&gt;
that I could use to capture audio for the transmitter, and a &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier/&quot;&gt;PMod
AMP2&lt;/a&gt;
that I could use to drive a speaker.  I’d used both of these before.  They’re
both easy to use and require little logic.&lt;/p&gt;

&lt;p&gt;Put together, the entire system would look something like Fig. 2 below.  An
audio signal would enter the
&lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;microphone&lt;/a&gt;,
get &lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;encoded by the
FPGA&lt;/a&gt;, and transmitted via the &lt;a href=&quot;https://github.com/xil-se/SX1257-PMOD&quot;&gt;SX1257
PMod&lt;/a&gt;.
On the other half, the reverse would be true: it would be received by the
&lt;a href=&quot;https://github.com/xil-se/SX1257-PMOD&quot;&gt;SX1257 PMod&lt;/a&gt;,
demodulated by the &lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;FPGA design&lt;/a&gt;, amplified
and then played out using a set of speakers.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Design components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/radio-chain.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I also thought I’d get a jump start on the problem by using
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; and a
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;.  When
I didn’t have an &lt;a href=&quot;https://github.com/ZipCPU/wbi2c&quot;&gt;I2C controller suitable&lt;/a&gt;
for the I2C to SPI bridge on the part, I reflected that I could &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/sw/rfregs.cpp&quot;&gt;bit-bang
the configuration of the RF chip from an external CPU host&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My verification strategy was also very simple: I’d create four ports from within
the RTL design of each modulation component, for both transmitter or receiver.
These ports would output a stream of signal data from within the core to a
place where I could capture that data with either a
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.md&quot;&gt;Wishbone scope&lt;/a&gt;
or a &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;.
This would allow me to verify that the data were sufficiently
good before they ever got to the RF chip.&lt;/p&gt;

&lt;p&gt;I then quickly drafted some awesomely grand designs: I built an &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/amxmit.v&quot;&gt;AM transmitter
core&lt;/a&gt;, an &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/fmxmit.v&quot;&gt;FM
transmitter core&lt;/a&gt;,
and even a 16QAM transmitter.  I then built an
&lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/amdemod.v&quot;&gt;AM&lt;/a&gt; and an
&lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/fmdemod.v&quot;&gt;FM receiver&lt;/a&gt;.
(No, the 16QAM receiver isn’t done yet … which should come as
no surprise to anyone familiar with the challenge.)&lt;/p&gt;

&lt;p&gt;Of course, every good tragedy needs to start with a bit of hubris.  In my case,
I got sloppy.  I didn’t build a
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
(initially).  Why not?  I wanted the design done fast.  I had six days where
I could work hand-in-hand with the engineers from &lt;a href=&quot;https://symbioticeda.com&quot;&gt;Symbiotic
EDA&lt;/a&gt;, and I couldn’t wait to see how this looked
on a scope.  What about bugs?  I figured I could debug anything with my
brand-new, wonderful &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram
core&lt;/a&gt; together with my
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.md&quot;&gt;wishbone scope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Care to hazard a guess at what was going to happen next?&lt;/p&gt;

&lt;p&gt;Ok, now that you’ve ventured a guess, let’s see what actually happened.&lt;/p&gt;

&lt;h2 id=&quot;it-didnt-fit-on-the-device&quot;&gt;It didn’t fit on the device&lt;/h2&gt;

&lt;p&gt;The first problem I had was that my initial design
&lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;didn’t fit&lt;/a&gt;.  Worse,
it failed to fit in a way I wasn’t expecting: I’m used to working with
designs that &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;don’t have enough
LUTs&lt;/a&gt;.  If a DSP
algorithm runs out of LUTs, I just lower the various bit-widths in the
processing chain.  I also know how to work around not having enough
multiplies–by working at lower data rates and multiplexing the multiplies
across the algorithm.  You can also look to replace multiplies by shifts.
No, in this case the design didn’t have enough &lt;em&gt;block RAMs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How much block RAM did I need?&lt;/p&gt;

&lt;p&gt;I wanted 4kW (kilo-words) of 16-bit block RAM.  The
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;implementation&lt;/a&gt;
I had was going to double this into two areas of 4kW, so 8kW in total.
That’s 256 kilobits, or 16 kilobytes.&lt;/p&gt;

&lt;p&gt;Why did I want 256 kilobits?  Because I could then split the histogram address
space into a 6-bit X address and a 6-bit Y address.  This would then allow me to
generate a &lt;a href=&quot;https://en.wikipedia.org/wiki/Constellation_diagram&quot;&gt;constellation
diagram&lt;/a&gt; within the FPGA
that would allow me to debug some of the higher order modulations–like my
draft 16QAM transmitter.  While I could use 5x5 bits, 6x6 would give me a
clearer indication, in any 16QAM system, of what was working or not.&lt;/p&gt;

&lt;p&gt;Sadly, those 16kB (kilobytes) of memory weren’t fitting on the device.&lt;/p&gt;

&lt;p&gt;So I wandered over to &lt;a href=&quot;https://github.com/YosysHQ/yosys/blob/master/techlibs/ice40/cells_sim.v&quot;&gt;Yosys’ iCE40 cell simulation
library&lt;/a&gt;
to understand just how much RAM I actually had available to me.
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;NextPNR&lt;/a&gt; told me there
were only 20 RAM cells on this chip.  (There were actually 30, but I had
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;NextPNR&lt;/a&gt; configured for
the wrong chip at first.)  I then went and found the library for the
&lt;a href=&quot;https://github.com/YosysHQ/yosys/blob/89adef352fde57fa599d66fe404c3c2b9e607a7f/techlibs/ice40/cells_sim.v#L472-L641&quot;&gt;SiliconBlue RAM cell&lt;/a&gt; used by the
iCE40 UP5K.  With only a cursory glance, I discovered that this RAM required
&lt;a href=&quot;https://github.com/YosysHQ/yosys/blob/89adef352fde57fa599d66fe404c3c2b9e607a7f/techlibs/ice40/cells_sim.v#L478&quot;&gt;11-bits of read (or write) address&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/YosysHQ/yosys/blob/89adef352fde57fa599d66fe404c3c2b9e607a7f/techlibs/ice40/cells_sim.v#L476&quot;&gt;16-bits of data&lt;/a&gt;.  Perfect!  That
would make for 2kW of 16-bit RAM per block, so my design should fit in 8 blocks.&lt;/p&gt;

&lt;p&gt;Why was &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;yosys&lt;/a&gt; mapping my design to more
than 20 blocks?&lt;/p&gt;

&lt;p&gt;I decided to look deeper, and so I added a
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;yosys&lt;/a&gt; &lt;a href=&quot;http://www.clifford.at/yosys/cmd_write_verilog.html&quot;&gt;command to output the synthesized
netlist in Verilog&lt;/a&gt; form.
Much to my surprise, it was only ever using four bits of this RAM at any given
time.&lt;/p&gt;

&lt;p&gt;Huh?&lt;/p&gt;

&lt;p&gt;With some help from mwk, I learned that my cursory examination of the
&lt;a href=&quot;https://github.com/YosysHQ/yosys/blob/89adef352fde57fa599d66fe404c3c2b9e607a7f/techlibs/ice40/cells_sim.v#L472-L641&quot;&gt;SB_RAM40_4K&lt;/a&gt;
block was too cursory.  The
&lt;a href=&quot;https://github.com/YosysHQ/yosys/blob/89adef352fde57fa599d66fe404c3c2b9e607a7f/techlibs/ice40/cells_sim.v#L472-L641&quot;&gt;SB_RAM40_4K&lt;/a&gt;
block only offered four &lt;em&gt;kilobits&lt;/em&gt; of RAM.  This ram had several configurations.
It could be configured into 256 words of 16-bits each, requiring the 16-bit
data width.  It could also be configured into 2048 words of 2-bits each,
requiring the 11-bit address width.  Each of those configurations used exactly
four &lt;em&gt;kilobits&lt;/em&gt; of memory, and they were mutually exclusive.  There was no
configuration that used both 11 address bits and 16-data bits.&lt;/p&gt;

&lt;p&gt;Apparently, this is common among FPGA architectures: to have a block of RAM
that has multiple data and address width configurations.&lt;/p&gt;

&lt;p&gt;Worse, my
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;implementation&lt;/a&gt;
had two read ports.  Since the iCE40 doesn’t have RAMs with dual read ports,
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;
was doubling my RAM usage to create two read ports.  Each RAM was connected
to the same write port, so each RAM would have the same contents, I could
just read them from different places within my design.&lt;/p&gt;

&lt;p&gt;Ok, I can deal with that.  How hard can it be to adjust a design so that it
shares a single read port between two pieces of logic?  Just a couple changes
should be sufficient:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I set the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone stall
signal&lt;/a&gt;, so that on
any internal data read/update request within the
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt; logic, the
data request would get priority.&lt;/p&gt;

    &lt;p&gt;This shouldn’t slow down the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
at all: the debugging core I was using was the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus we’d built together
on this blog&lt;/a&gt;.  It’s
slow, but low logic.  Moreover, the audio samples weren’t likely to
generate constant valid signals into the
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;,
so this should at most stall the bus by a single clock cycle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I then added a new &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline
stage&lt;/a&gt;
to the &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;’s
to the processing chain–one where I
calculated the memory address.  While this didn’t seem to adjust the area
much at all, I judged it to be a good addition.  In my
&lt;a href=&quot;/tutorial&quot;&gt;beginner’s tutorial&lt;/a&gt;, I discuss several rules
of block RAM usage, one of which is that the address should always be
registered.  This change registered that address.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just so you can understand how simple this change was, compare the two
waveforms shown in Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 3. Design waveform before and after the change&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/badhist-before.svg&quot; alt=&quot;&quot; width=&quot;294&quot; /&gt;&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/badhist-after.svg&quot; alt=&quot;&quot; width=&quot;378&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Before&lt;/th&gt;&lt;th&gt;With Changes&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here you can see how the stall line becomes the equivalent of the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; line,
and how there’s now a new &lt;code class=&quot;highlighter-rouge&quot;&gt;read_addr&lt;/code&gt; register multiplexing the two read
requests together.  You can also see how the data takes another clock before
it can become valid.&lt;/p&gt;

&lt;h2 id=&quot;other-changes&quot;&gt;Other changes&lt;/h2&gt;

&lt;p&gt;I did need to make some other changes as well.  One in particular was needed for
the &lt;a href=&quot;https://github.com/ZipCPU/sdr/blob/master/rtl/amdemod.v&quot;&gt;AM demodulator&lt;/a&gt;.
For this project, I needed an &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/quadpll.v&quot;&gt;quadrature (complex I+Q)
PLL&lt;/a&gt;,
and the &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;one we built
together&lt;/a&gt; was only a
&lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/sdpll.v&quot;&gt;single wire PLL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was easily adjusted for quadrature, and the resulting (simulated)
performance appeared to be twice as good as the &lt;a href=&quot;https://github.com/ZipCPU/dpll/blob/master/rtl/sdpll.v&quot;&gt;similar, single channel
PLL implementation&lt;/a&gt;
for the same PLL gain.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4. Comparing the original PLL with the I+Q Quadrature PLL&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/quad-pll-comparison.png&quot; alt=&quot;&quot; width=&quot;496&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’m going to try to remember to come back to this to make it an article in
its own right–since the change was easy to do, and since I think it’d make
an awesome blog article.&lt;/p&gt;

&lt;h2 id=&quot;what-happened&quot;&gt;What happened?&lt;/h2&gt;

&lt;p&gt;Well, the updated design didn’t work.  (Surprise!)  Perhaps you figured out
that this was going to happen from the setup above.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first curious problem was that I was often not getting any data at
all into the &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;.
It would read all zeros.&lt;/p&gt;

    &lt;p&gt;This suggested that the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; signal was never getting set.  We’ll look
at what happened there in a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When I did get a
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
result, it just looked like junk.&lt;/p&gt;

    &lt;p&gt;Was it just that the
&lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;microphone&lt;/a&gt;
was returning junk in the first place?  That didn’t make sense, since I’d
used the &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;microphone SPI&lt;/a&gt; core
&lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;before&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Often, the &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
might read like it was all &lt;em&gt;large&lt;/em&gt; values.  For example, when taking a
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
of 16k samples, adding all the elements together might result in over
a million counts.&lt;/p&gt;

    &lt;p&gt;Ok, now that’s a clear bug.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What might the problem be?&lt;/p&gt;

&lt;p&gt;As it turns out, there were several.&lt;/p&gt;

&lt;p&gt;The first problem was associated with how I generated the sampling signal for
the &lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;microphone&lt;/a&gt;.
As is common with designs such as this, the signal processing
chain can use the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;“global CE” strategy for pipeline
signaling&lt;/a&gt;.
Key to this strategy is to set the time when a new sample would be generated.
For this I used a straight &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;fractional clock
divider&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_audio_en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mic_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mic_ce_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mic_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mic_ce_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mic_ce_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIC_STEP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps you may recall &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;discussing this
earlier&lt;/a&gt;?  Or again
when we discussed the &lt;a href=&quot;/dsp/2017/06/15/no-pi-for-you.html&quot;&gt;units of
phase&lt;/a&gt; in the
&lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;NCO article&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The entire downsample rate was governed by a simple equation,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIC_STEP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCK_RATE_HZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUDIO_SAMPLE_RATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, no, that didn’t work right.  Worse, it doesn’t pass the smell test.
(Remember studying units in science?)  In this case, as the &lt;code class=&quot;highlighter-rouge&quot;&gt;AUDIO_SAMPLE_RATE&lt;/code&gt;
increases, the step size should increase–not decrease.&lt;/p&gt;

&lt;p&gt;Let’s try that again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIC_STEP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUDIO_SAMPLE_RATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCK_RATE_HZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(This actually took me &lt;em&gt;hours&lt;/em&gt; to find, since I was looking all over in the
wrong places, but that’s another story.)&lt;/p&gt;

&lt;p&gt;This change made things better, but they still weren’t quite right.  Using
this formula, the &lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
would never  count any samples coming into it: &lt;code class=&quot;highlighter-rouge&quot;&gt;mic_ce&lt;/code&gt; was staying low.
Indeed, if you dug into the design, &lt;code class=&quot;highlighter-rouge&quot;&gt;mic_ce_counter&lt;/code&gt; was set to zero and never
updated.&lt;/p&gt;

&lt;p&gt;If you haven’t figured it yet, the hidden issue here is that all Verilog
integers are 32-bits in size by default.  In a 32-bit word, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&amp;lt;&amp;lt;32&lt;/code&gt; truncates
to zero.  This was not the desired effect I wanted.&lt;/p&gt;

&lt;p&gt;One way around this is to use floating point values, and then to round the
results to fixed point.  We’ll also insist that &lt;code class=&quot;highlighter-rouge&quot;&gt;1&amp;lt;&amp;lt;32&lt;/code&gt; be replaced with
something that won’t overflow, &lt;code class=&quot;highlighter-rouge&quot;&gt;4.0 * (1&amp;lt;&amp;lt;30)&lt;/code&gt; for example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIC_STEP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUDIO_SAMPLE_RATE&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCK_RATE_HZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. The histogram didn&#39;t look right&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/bad-histogram.png&quot; alt=&quot;&quot; width=&quot;478&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now I could see samples coming from the
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;, as shown
in Fig. 5.&lt;/p&gt;

&lt;p&gt;Well, I suppose that’s better than all zeros.  Only, it’s still not what I was
expecting at all.&lt;/p&gt;

&lt;p&gt;Were the incoming samples from the
&lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;microphone&lt;/a&gt;
really all that bad?  Was I over driving the
&lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;microphone&lt;/a&gt;?
Sure, there was a lot of talking in a busy room, but I could still hear myself
whisper.&lt;/p&gt;

&lt;p&gt;After desk checking my design again for the umpteenth time looking for a bug,
I decided to return to &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;
and formally verify my changes to my
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt; core.&lt;/p&gt;

&lt;p&gt;What were the changes?  Well, the biggest change was replacing the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;
signal,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with a signal that would only accept an request if the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; signal, indicating
a new incoming sample, was low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also replaced the read address to memory with a register that would select
between one of two read addresses–either the one read from the bus, or the
one to be written to in order to reflect the new data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read a count to update it with a new sample
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Bus read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The one block RAM read would then read from this new address one clock later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The outgoing data was also adjusted.  Instead of returning the value from
the memory straight to the bus,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I would now return this intermediate value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looking through these changes, I didn’t see any problems.  They all looked
good to me.  So, as I mentioned before, in a moment of frustration I turned
to formal methods.&lt;/p&gt;

&lt;p&gt;I also added my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone property
file&lt;/a&gt; to the formal proof.
Sure, the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
interaction was simple enough that I should’ve been able to verify it by eye,
but I still couldn’t find the bug and it made sense to check all possibilities,
and this was an easy one to check.&lt;/p&gt;

&lt;p&gt;Once the properties were in place, I found the following in a matter of
seconds.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This says that we’ll acknowledge a request immediately on the clock following
the request.  Notice how the acknowledgment isn’t dependent upon the stall
signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One of the basic rules of bus property files is that there should never be
any acknowledgments without prior requests.  In this case, the formal tool
held &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce &amp;amp;&amp;amp; i_wb_stb&lt;/code&gt; high long enough to get an &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt;–even without
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb &amp;amp;&amp;amp; !o_wb_stall&lt;/code&gt; ever having been true.&lt;/p&gt;

&lt;p&gt;Staring at this some more, I realized that it would also take two clock
cycles for any read, so I adjusted this ACK line for a two cycle read.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the acknowledgment would match Fig. 3 above!&lt;/p&gt;

&lt;p&gt;I was so excited!  I’d now found my bug–after midnight, after I’d left the
lab, etc.  I was very excited to go to the lab the next day to check out
how things had changed.  Indeed, I was so excited about finding this bug that
I started writing this article to share what had happened.&lt;/p&gt;

&lt;p&gt;The good news is that, once I got to the lab, I was now getting different
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;s.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 6. First fix, but still not right&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/bad-hist-multimode.png&quot; alt=&quot;&quot; width=&quot;490&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The bad news was that they still didn’t look right.  Fig. 6 shows one of the
traces I received after making the fix above.&lt;/p&gt;

&lt;p&gt;At this point I finally bit the bullet and built a proper
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt; of
the design.  In my
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
I would feed a swept tone into the &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/micnco.cpp&quot;&gt;emulated
microphone&lt;/a&gt;,
and watch how the design responded.  More specifically, I’d request a
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;,
and then look at the trace of what was happening.&lt;/p&gt;

&lt;p&gt;Sure enough, the &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;simulation
trace&lt;/a&gt;
showed the problem: The acknowledgment was set one clock before the data was
ready.&lt;/p&gt;

&lt;p&gt;Did you catch that in the logic above?  There was …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;One clock to accept the bus request and set the address&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One clock to read from memory (and set the acknowledgment), and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A third clock to return the results to the bus.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The third clock was simply added in because I didn’t quite think through
what was going on.  It would’ve helped if I had drawn out a design waveform,
similar to Fig. 3 above, but, No, I didn’t do that until I started writing
this article.  Here was the block at fault.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One simple change fixed this bug.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// &amp;lt;&amp;lt;---- The change
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Histogram, now fixed&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/good-histogram.png&quot; alt=&quot;&quot; width=&quot;490&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once I made this change, the
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt; started looking
more reasonable.  Fig. 7 on the right shows an example of the new
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt; output.
Indeed, this was very much what I was expecting.&lt;/p&gt;

&lt;p&gt;Notice that all of the data are centered around either zero or the maximum
value (i.e. -1, or in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;10&#39;h3ff&lt;/code&gt;).  This would be indicative of
an idle channel, where the
&lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;microphone&lt;/a&gt;
isn’t overloaded.&lt;/p&gt;

&lt;p&gt;Perfect!&lt;/p&gt;

&lt;p&gt;What about the fact that I was recording millions of counts from a 16k count
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;?  That was now
fixed.  What was happening was that the data being sent to the core was
routinely the most common value, causing the
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt;
to stall on a bus read, but then return the
&lt;a href=&quot;/dsp/2019/12/21/histogram.html&quot;&gt;histogram&lt;/a&gt; point for that
most common value rather than the point requested from the bus.&lt;/p&gt;

&lt;p&gt;Shouldn’t this have been caught using formal methods?  Indeed, it should
have been.  Then why didn’t my formal properties catch this?&lt;/p&gt;

&lt;p&gt;Because I had used a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement to capture the property that the
&lt;em&gt;right&lt;/em&gt; value would be returned from the bus, and not an &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statement.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// A read request, for our formally tracked value
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// The valid address cycle
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_ack&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// The returned data cycle
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes, it was &lt;em&gt;possible&lt;/em&gt; to return the right value to the bus, and so the
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement passed.  Had I expressed this in the form of an &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;
statement, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;
would’ve caught the bug.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So, what sorts of conclusions can we draw from this?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Even the “perfect” core might &lt;a href=&quot;/blog/2020/01/13/reuse.html&quot;&gt;need to be adjusted to fit the
hardware&lt;/a&gt; du jour.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sloppiness, whether by not formally verifying these changes or not building a
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
to check my work earlier, slowed me down.  It didn’t speed me up–in spite
of my best intentions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From the “Tau of Programming” and roughly quoted, “Though a piece of code
be but four lines long, someday it will need to be maintained.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/sdr&quot;&gt;entire design&lt;/a&gt; is now posted, although I’ll
be the first to say that only the AM and FM modulations work, and even then
they only work in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.
Chances are I would’ve made more progress if I’d immediately gone to formal
verification and then
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
rather than trying to jump straight to the hardware where debugging is just
that much more difficult.  For now, the design will wait again in its current
unfinished/limbo state until I have some more time to play with it.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;If the iron be blunt, and he do not whet the edge, then must he put to more strength: but wisdom is profitable to direct. (Eccl 10:10)&lt;/em&gt;</description>
        <pubDate>Fri, 07 Feb 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/dsp/2020/02/07/bad-histogram.html</link>
        <guid isPermaLink="true">https://zipcpu.com/dsp/2020/02/07/bad-histogram.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Quiz #11: Induction and clock enables</title>
        <description>&lt;p&gt;&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
can be very confusing to an HDL designer trying to use the formal verification
tools for the first time.  A common refrain that I’ve heard among those
I’ve mentored is, “but I set this value on reset!  How can it ever get into
this state?”&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
exercise in my &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification training
course&lt;/a&gt;
is also a place where I slow down, and take some time with the students to
learn and watch what happens.  We take examples, like the one above, and then
try several formal verification techniques to see what works and what doesn’t.
In many ways, it’s like trying out the various tools in your tool box.  That
way, when you need to use one, you’ll know which one is most suited for the
task at hand.&lt;/p&gt;

&lt;p&gt;In practice, the problem is never this simple.  It’s usually found buried
within a much more complex design, and it takes some work to recognize it.
The good news is that the solutions to the simple problems, such as the one
above, can often be applied to these more complex examples as well–so knowing
the tools in your toolbox is quite valuable.&lt;/p&gt;

&lt;p&gt;In this case, there are several ways around this bug.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2020/01/23/quiz11.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2020/01/23/quiz11.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Quiz #10: Checking stall conditions</title>
        <description>&lt;p&gt;This is actually a very common problem, although written in a simplified form
above.  You’ll find this property common across most formal bus interface
property files:
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt;,
AXI, &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;, AXI stream,
AHB, APB, and more.  Indeed, knowing how to get this right is important to
formally verifying any kind of hand-shaking interaction.&lt;/p&gt;

&lt;p&gt;Failing this property would be an indication that a transaction may have been
dropped.&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2020/01/17/quiz10.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2020/01/17/quiz10.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Lessons in Hardware Reuse</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Can hardware designs be recycled?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/recycle.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I first started doing digital design, I had a strong software background.
One of the first lessons you learn in software is to reuse your own code as
much as possible.  The sooner you learn this lesson, the faster you’ll be able
to finish your next homework problem.&lt;/p&gt;

&lt;p&gt;The lesson goes well beyond school, but into industry as well.  Consider the
various operating systems and how often they are reused.  Are you reading this
article from a device running Linux, MacOS, Windows, or something else?  Just
being able to list the number of major operating systems on one hand is a
testament itself to software reuse.&lt;/p&gt;

&lt;p&gt;The same lesson applies to compilers and system libraries.  How is it, for
example, that
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;,
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;,
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
or any other EDA tool can run on so many platforms?  Software reuse.
It’s real.  It works.&lt;/p&gt;

&lt;p&gt;But what about hardware?  Specifically, what about reusing digital design
components?&lt;/p&gt;

&lt;p&gt;Here, in this field, reuse becomes a bit more of a challenge.&lt;/p&gt;

&lt;p&gt;The first and biggest challenge are the hardware licenses.  The licenses that
worked so well for software don’t apply as well to hardware.  While I personally
love the &lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;GPLv3 license&lt;/a&gt;, conveying a
hardware design that uses a &lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;GPLv3&lt;/a&gt;
component to someone else requires also conveying to them the ability to
rebuild the rest of the &lt;em&gt;entire design&lt;/em&gt;.
This isn’t so easy, since many of the popular major design components, ARM
cores, SERDES cores, I/O components, and so forth, are still very proprietary.&lt;/p&gt;

&lt;p&gt;Within a company, however, design reuse shouldn’t be a problem.  The company
owns all of their own designs, so they should be able to use them freely from
one product to another, right?&lt;/p&gt;

&lt;p&gt;This is the case here, within &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology,
LLC&lt;/a&gt;, and yet even in
this optimal reuse environment hardware design reuse is still a long way from
achieving the goals that have been achieved by software reuse.&lt;/p&gt;

&lt;p&gt;Let’s take some time today to look at several experiences I’ve had with
design reuse since I started with digital design over a decade ago.
(Wow, has it actually been that long?)  We’ll start by looking over
standardization problems I’ve had across tools, and then work our way
from the bottom of a design all the way up through some components,
through bus slaves, and on to bus master interoperability.&lt;/p&gt;

&lt;h2 id=&quot;tools-arent-standard&quot;&gt;Tools aren’t standard&lt;/h2&gt;

&lt;p&gt;The first problem with design reuse is that the various tools tend to be
vendor and often even platform centric.  This makes it a challenge to reuse
designs from one platform to the next.  For example, design constraint files
(XDC, UCF, SDC, PCF, etc.) differ in format and content from one vendor to
the next.  This means that I/O timing constraints and false path constraints
all need to be rewritten when attempting to reuse a design across different
vendors.&lt;/p&gt;

&lt;p&gt;Well, at least the HDL languages are standard among vendors and tools, right?
How about just the subset of Verilog that I like to use?&lt;/p&gt;

&lt;p&gt;Well, no.  Not even Verilog is standard across vendor tools.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;One of the first things I teach anyone who will listen is to place a
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype none&lt;/code&gt; declaration at the top of every Verilog source file.
Doing this prevents the synthesis tool from turning a spelling mistake into
a new signal within your design.  It has helped me catch a lot of mistakes
over the years.&lt;/p&gt;

    &lt;p&gt;The problem is that placing this line in a
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
&lt;a href=&quot;/blog/2018/02/09/forst-cyclonev.html&quot;&gt;DE-10 Nano design&lt;/a&gt;
will cause
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
to fail to build the design.  Why?  Because the
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; setting isn’t applied across a single file, but rather
every design file following, if not the entire design.  Worse, it seems
as though the Altera’s engineers used this language “feature” to avoid
declaring signals within their designs.  Hence, what makes my design better
breaks their design components.&lt;/p&gt;

    &lt;p&gt;The problem isn’t limited to
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;.
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt; handles the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt;
statement on a file by file basis.  This means that if I change
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; back to its original &lt;code class=&quot;highlighter-rouge&quot;&gt;wire&lt;/code&gt; setting at the end of the
file, the design will now work with
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
but &lt;a href=&quot;https://github.com/YosysHQ/yosys/issues/684&quot;&gt;it will no longer get the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; benefit
from&lt;/a&gt;
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;There is one annoying detail associated with this command: &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; ports
need to be declared as &lt;code class=&quot;highlighter-rouge&quot;&gt;input wire&lt;/code&gt; rather than just &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; once you set
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt;.  The Verilog standard requires this, yet
neither &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt; nor
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
require it.  This means that designs that pass a
&lt;code class=&quot;highlighter-rouge&quot;&gt;verilator -Wall -cc topmodule.v&lt;/code&gt; check
might still fail to be built under another tool.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HDL designs don’t build without warnings&lt;/p&gt;

    &lt;p&gt;If there’s one thing that frustrates me, it’s the inconsistency of
warnings across tools.  Coming from the software world, I’m used to a
program that can be compiled without warnings.  Here in the hardware
world, this is a challenge.&lt;/p&gt;

    &lt;p&gt;Consider, for example, the following code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will generate a warning that a 32-bit number, the &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, is being added
   to a 5 bit number, and so there might be a loss of precision.  While I
   might rewrite this to get rid of the warning,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the warning will then return again whenever I change the width, &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;,
   to something other than five.&lt;/p&gt;

&lt;p&gt;If I then try to change the design to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then get rid of the warning when using &lt;a href=&quot;https://www.verific.com/products/&quot;&gt;Verific based front
   ends&lt;/a&gt;, only for it to return with
   &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My solution has been to build my designs so that they have no warnings when
   using &lt;code class=&quot;highlighter-rouge&quot;&gt;verilator -Wall&lt;/code&gt;, and then to ignore any of the warnings generated
   by the &lt;a href=&quot;https://www.verific.com/products/&quot;&gt;Verific&lt;/a&gt;, parser used by both
   &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;, ISE and
   &lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, its annoying to have a design build without warnings in one
   environment, but not in another.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Unused values&lt;/p&gt;

    &lt;p&gt;Many interfaces have signals that aren’t used by all cores.  In order
to make the cores generic, I pass those signals that aren’t used along with
the interface anyway.
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
generates a warning when I do this.
&lt;a href=&quot;https://www.verific.com/products/&quot;&gt;Verific&lt;/a&gt;
(i.e. the front-end language parser used by
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;, ISE, and
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;)
also generates a warning.  However, I can turn the
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
warnings off on a case by case basis by simply using,&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Verilator lint_off UNUSED
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unused_signal_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unused_signal_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verilator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lint_on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNUSED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this doesn’t get rid of the warnings when using the commercial
   vendor tools, at least those warnings are now about the wire named
   &lt;code class=&quot;highlighter-rouge&quot;&gt;unused&lt;/code&gt; being unused, and so they’re now easy to work through.&lt;/p&gt;

&lt;p&gt;Of course, the problem with ignoring synthesis warnings like this is what
   happens when a design mysteriously stops working.  In that case, I find
   myself digging through all of the useless warnings generated in the logs
   of the various tools and looking for any evidence of what might’ve happened.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Generate loop block names&lt;/p&gt;

    &lt;p&gt;Much to my surprise, a design that worked in
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;, and ISE
failed to synthesize under
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
for the simple reason that the for loops within my &lt;code class=&quot;highlighter-rouge&quot;&gt;generate&lt;/code&gt; blocks
weren’t named.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;genvar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NADC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_NAME_NEEDED_HERE&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adc_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_adc_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADCBITS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADCBITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My point here is simply that seemingly useless differences between vendor
tools can become quite annoying in practice and a hindrance to design reuse.
All of a sudden, you find that a design component that worked under one
vendor’s tools mysteriously causes build failures under another vendor’s
tools.&lt;/p&gt;

&lt;p&gt;This problem was solved in software by an open source compiler,
&lt;a href=&quot;https://gcc.gnu.org&quot;&gt;gcc&lt;/a&gt;.  Verilog has an open source synthesizer,
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;
which can come close.  It can synthesize designs for
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s,
iCE40, ECP5, Xilinx 7-series, and &lt;a href=&quot;/zipcpu/2019/03/12/arrowzip.html&quot;&gt;some Intel
designs&lt;/a&gt;.  In many ways
this is halfway to nirvana.  Unfortunately, there’s no open source synthesis
tool for VHDL, nor is there any open source tool for SystemVerilog–although
there is a &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;
plugin, called &lt;a href=&quot;https://github.com/tgingold/ghdlsynth-beta&quot;&gt;ghdl-synth&lt;/a&gt;,
that &lt;a href=&quot;http://pepijndevos.nl/2019/08/15/open-source-formal-verification-in-vhdl.html&quot;&gt;I’m told is getting close to offering VHDL
support&lt;/a&gt;
in &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-not-reuse-fifos&quot;&gt;Why not reuse FIFOs?&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Surely common components can be reused?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/fifo-reuse.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once you get past the tool issues, the next biggest question is why can’t I
reuse some of my most common components?  The most obvious of these common
components is a FIFO.  FIFOs are perhaps the most common core used across
designs.  I use FIFOs in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;bus bridges&lt;/a&gt;,
my ADC cores, &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;a microphone core&lt;/a&gt; I’ve built,
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my UART cores&lt;/a&gt;, and even in my
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus&lt;/a&gt;.
Surely one simple FIFO design can be used across all architectures?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Common FIFO ports&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/fifo-ports.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The good news, at least for me, is that after writing &lt;em&gt;many&lt;/em&gt; (dissimilar) FIFO
implementations, I’m now starting to coalesce around a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;single synchronous FIFO
implementation&lt;/a&gt;.
Even with this implementation, there are a lot of per-design configuration
differences that need to be made.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The data width changes from one application to the next, as does the
necessary FIFO depth (RAM size).&lt;/p&gt;

    &lt;p&gt;Thankfully, these changes are easily parameterized–making the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;FIFO&lt;/a&gt;
(mostly) generic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Should the empty/full flags be registered?  Do they need to be?  It costs
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;extra LUTs&lt;/a&gt;
to calculate these values one clock earlier, but doing so can
also keep any FIFO users off the critical timing path.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
have distributed RAM, others don’t–something I discuss in my &lt;a href=&quot;/tutorial&quot;&gt;tutorial
lesson on FIFOs&lt;/a&gt;.  On an iCE40, &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;all RAM reads
must be done directly into a
register&lt;/a&gt; before
they can be read, whereas Xilinx architectures support “distributed RAM”
reads on the same clock cycle they are used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Handshake signaling differs from one implementation to another.  My current
FIFO implementation uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;READY/VALID&lt;/code&gt; type of handshake for reading
(&lt;code class=&quot;highlighter-rouge&quot;&gt;i_rd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_empty&lt;/code&gt;) from and writing (&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_full&lt;/code&gt;) to the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;FIFO&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The problem is that this interface isn’t necessarily appropriate for all
applications.  In some data centric applications, such as coming from an
A/D or a video source where the data comes in at a fixed speed, the
source will write to the FIFO regardless of whether or not the FIFO is ready.
Doing this properly really requires generating an error signal, which my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;one-size-fits-most
FIFO&lt;/a&gt;
implementation doesn’t (yet) have.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some applications, such as a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART&lt;/a&gt;,
require being able to know how much data is in the FIFO.  They want to read
the FIFO’s fill level back out.  This can be useful for waking up a
processor only when the FIFO is half full or half empty, for example, or
reading until it is empty following an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.  Other
applications don’t care about the fill.  Leaving a port unused and dangling,
however, is likely to cause a tool warning and get in the way of building a
warning-less design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other applications, such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;stream to memory
bridges&lt;/a&gt;,
might want a trigger threshold implemented within the FIFO.  Such a
trigger, in the case of a stream to memory component, might cause the
FIFO to empty into memory like flushing toilet empties the tank into the
bowl.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;one FIFO&lt;/a&gt;
work in all applications?  I haven’t managed to do it (yet).
In addition to reuse, there is something to be said for keeping things simple.
Of course, the problem then comes about when I &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;fix a bug in one FIFO that
then still remains&lt;/a&gt;
in one of my other implementations.&lt;/p&gt;

&lt;p&gt;Xilinx’s solution appears to be to use a &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/fifo_generator/v13_1/pg057-fifo-generator.pdf&quot;&gt;FIFO
generator&lt;/a&gt;
that will then generate the logic for a FIFO that can be used across many
Xilinx hardware platforms.  At the same time, this (proprietary) &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/fifo_generator/v13_1/pg057-fifo-generator.pdf&quot;&gt;FIFO
generator&lt;/a&gt;
has given me no end of hassles when trying to
formally verify
what little they have published about their
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;.
Tell me, for example, why does a FIFO require nearly 100 parameters and just
as many ports?  Hence, while configurability in the name of reuse is a good
thing, &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/fifo_generator/v13_1/pg057-fifo-generator.pdf&quot;&gt;this
generator&lt;/a&gt;
appears to be taking configuration to an extreme.&lt;/p&gt;

&lt;h2 id=&quot;can-we-reuse-serial-ports&quot;&gt;Can we reuse serial ports?&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4. A common serial port interface&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/wbuart-reuse.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So let’s move up the ladder, from FIFOs to full level design components.
How about serial ports?  What can we learn about hardware reuse from serial
ports?&lt;/p&gt;

&lt;p&gt;A fellow open source designer, &lt;a href=&quot;https://twitter.com/OlofKindgren&quot;&gt;Olof
Kindgren&lt;/a&gt;, is known for his strong opinion
that we should stop building new serial ports.  Surely among all design
components serial ports should be prime candidates for reuse!  The
communications standard hasn’t changed in years, so why ever build a new
serial port?&lt;/p&gt;

&lt;p&gt;To put it in his own words,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I use the UART as a pathological example because it’s a function so
simple that many people feel it’s easier to write a new rather than reuse
an existing one.  But in practice this leads to another implementation with
bugs but without proper docs, tests, and drivers.&lt;/p&gt;

  &lt;p&gt;(&lt;a href=&quot;https://twitter.com/OlofKindgren/status/1216145721268809728&quot;&gt;Twitter&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a lot of things you can learn from serial ports.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Building a serial port is a good beginner’s design exercise.&lt;/p&gt;

    &lt;p&gt;If you’ve never built a serial port before, go ahead and build one.  It’s a
fun design to learn from, especially since you can typically “see” your
design working when you are done.  Indeed, serial ports are one of the
many designs I work through in my &lt;a href=&quot;/tutorial&quot;&gt;beginners
tutorial&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550 interface&lt;/a&gt;
has long since outlived its time.&lt;/p&gt;

    &lt;p&gt;The classic serial port interface goes back to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550 chip&lt;/a&gt;
built by &lt;a href=&quot;https://en.wikipedia.org/wiki/National_Semiconductor&quot;&gt;National
Semiconductor&lt;/a&gt;.  It
seems that much of the industry has standardized around its software
interface.  Its not hard to find software drivers that can communicate
with this interface, so why not just reuse it?&lt;/p&gt;

    &lt;p&gt;Sadly, this chip appears to have been built back in the days of 8-bit buses.
In order to set the baud rate of this chip, you need to set two different
registers, and you’ll need to adjust a paging register in the meantime
just to get access to those other registers.&lt;/p&gt;

    &lt;p&gt;Worse, the &lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550&lt;/a&gt;
only supports a 16-element FIFO.  Why not increase the
size of the FIFO?  That should be easy, right?  Well, yes, it is fairly
easy to do—it’s just that you now need to adjust all of the software that
depends the size of this FIFO.&lt;/p&gt;

    &lt;p&gt;From my own perspective, I only came across the
&lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550&lt;/a&gt;
after building &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my own serial port core&lt;/a&gt;.
Using &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my own serial port&lt;/a&gt;, I can
completely configure baud rate, number of stop bits, number of bits per
byte, the parity bit, and even whether or not flow control will be used
by just writing one 32-bit value to a 32-bit bus-based interface.&lt;/p&gt;

    &lt;p&gt;Pretty cool, huh?&lt;/p&gt;

    &lt;p&gt;Sure, you could reuse the older core, but it’d be easier to configure,
reconfigure, and use with a more modern interface.  (Such as my own …)&lt;/p&gt;

    &lt;p&gt;Of course, it doesn’t help that the &lt;a href=&quot;https://github.com/freecores/uart16550&quot;&gt;open source
UART16550 core&lt;/a&gt; has a
(formal-verification discovered) bug within it that might cause it to
send arbitrary data across the channel ….&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. How much does a serial port require?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/wbuart-extras.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;My first UART&lt;/a&gt; cores
(&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;TX&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuart.v&quot;&gt;RX&lt;/a&gt;)&lt;/p&gt;

    &lt;p&gt;As I said above, everybody digital designer should take the opportunity to
build their own serial port.  It’s a fun project.  It’s also one of the
first projects I ever did.&lt;/p&gt;

    &lt;p&gt;As with many projects, I started with all the material I could find on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter&quot;&gt;online about serial
ports&lt;/a&gt;.
I discovered all the things a serial port could or should support:
5, 6, 7, or 8-bit bytes, 1 or 2 stop bits, odd,
even, mark, space, or no-&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;,
and baud rates from 300 Baud all the way up to 25MBaud or higher.&lt;/p&gt;

    &lt;p&gt;Did I implement all that?  Yep.  You guessed it.  My first serial port
was such an awesome design, it could do &lt;em&gt;anything&lt;/em&gt;!  It even supported
sending or detecting BREAK conditions.&lt;/p&gt;

    &lt;p&gt;It just &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;wouldn’t fit in a Spartan 6/LX4 next to my
CPU&lt;/a&gt;.  Neither
did I ever use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;,
the BREAK conditions, the 5 or 6 bit bytes, changing the baud rate, etc.&lt;/p&gt;

    &lt;p&gt;This awesome design wasn’t very reuse friendly.  It “cost” too much.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Building a UART-Lite core&lt;/p&gt;

    &lt;p&gt;As a result, I now support UART-Lite cores: a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;transmit&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;receiver&lt;/a&gt;
pair that will only ever use 8-data bits, no parity, and one stop
bits–&lt;a href=&quot;https://en.wikipedia.org/wiki/8-N-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8N1&lt;/code&gt; as it is commonly called&lt;/a&gt;.
These lite cores no longer handle BREAK conditions.  They only support a
fixed baud rate, predetermined at design build time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So why rebuild the wheel when it comes to &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter&quot;&gt;serial
ports&lt;/a&gt;?
Because 1) the &lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550&lt;/a&gt; interface
hasn’t aged well, and 2) my “ultimate” serial port cost me too much to use.&lt;/p&gt;

&lt;p&gt;If you compare these problems to software, wouldn’t these also be problems
that where one might learn lessons from software reuse?  Not really.  Unlike
hardware, software bloat doesn’t nearly cost as much.  Just a kB here, and a
kB there, and no one will notice that a piece of software has a lot of
unnecessary functionality in it.  The fact that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_litigation#United_States&quot;&gt;Internet Explorer was
declared to be an integral part of the Windows operating
system&lt;/a&gt;
should prove my point about software bloat.&lt;/p&gt;

&lt;p&gt;What about &lt;a href=&quot;https://twitter.com/OlofKindgren&quot;&gt;Olof&lt;/a&gt;’s advice?  In hind sight,
he has a strong point.  Several latent bugs existed in the core prior
to formal verification.  Despite the fact that the full service core had
so much functionality, barely any of it was properly verified prior to that
time.  Further, the software driver had to be rewritten multiple times over.
Still, the core components have been used over and over again in many projects
with great success.&lt;/p&gt;

&lt;h2 id=&quot;reusing-an-sd-card-component&quot;&gt;Reusing an SD-Card component&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 6. Reusing an SD-Card Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/sdspi-reuse.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What about other components?  For example, what about SD-cards?  Why can’t
we reuse SD card controllers from one design to another?  Can reuse finally be
achieved here?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s start by looking over this &lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;SD Card
controller&lt;/a&gt; found on
&lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;, but which traces its roots back to
&lt;a href=&quot;https://opencores.org/project,sdcard_mass_storage_controller&quot;&gt;OpenCores&lt;/a&gt;.
This is a nice, full featured driver–but also one that I’ve never used.&lt;/p&gt;

    &lt;p&gt;Why not?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;While &lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;this core&lt;/a&gt;
implements the full SDIO interface, it also contains DMA’s and other
items I don’t need in a
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;resource-constrained&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design.  If my design already has a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
within it, why add another one (or two, or three) that I won’t be using
regularly?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I like to use the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipelined bus standard&lt;/a&gt;, not the
&lt;a href=&quot;/wbspec_b4.pdf&quot;&gt;Wishbone classic standard&lt;/a&gt;. 
Unlike &lt;a href=&quot;/wbspec_b4.pdf&quot;&gt;Wishbone classic standard&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipeline&lt;/a&gt;
is faster, and scales better up to higher clock rates.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;This &lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;full SDIO controller&lt;/a&gt;
requires 2.8k Xilinx 6-LUTs, nearly 10% of a basic Artix-7/35T design.
On an iCE40 with 4-LUTs, this would use 4k of the 8k LUTs available–a
full 50% of the area, vice the simpler &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;601 LUT design&lt;/a&gt; discussed below.&lt;/p&gt;

        &lt;p&gt;As I mentioned earlier, when discussing &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my serial port&lt;/a&gt;, people don’t
necessarily notice software bloat whereas hardware bloat costs money.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How about building and reusing &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;my own SD card
controller&lt;/a&gt; then?  Surely I
might be able to use this across multiple designs?&lt;/p&gt;

    &lt;p&gt;This, again, is a good and bad reuse story.&lt;/p&gt;

    &lt;p&gt;Yes, I built an &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD card controller&lt;/a&gt;
based upon the SPI interface supported by most cards.  You can see it
pictured above in Fig. 6.  I also built an &lt;a href=&quot;https://github.com/ZipCPU/sdspi/blob/master/bench/cpp/sdspisim.cpp&quot;&gt;SD
card emulator&lt;/a&gt;
to go with it, one that worked with a backing file in a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
context.  The &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;controller&lt;/a&gt; worked nicely in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;. 
I was even able to read and write sectors when commanding it from &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;my
debugging bus&lt;/a&gt;
in hardware.&lt;/p&gt;

    &lt;p&gt;What more could one want for reuse?&lt;/p&gt;

    &lt;p&gt;In this case, when I finally went to use the core as part of one of a
design for contract, &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;I discovered several
bugs&lt;/a&gt;.  First, I missed part
of the spec, and then needed to retrofit the design in order to provide
the SD-card with a startup clock–even before lowering &lt;code class=&quot;highlighter-rouge&quot;&gt;CS#&lt;/code&gt; for its first
command.    &lt;a href=&quot;https://github.com/ZipCPU/sdspi/blob/master/bench/cpp/sdspisim.cpp&quot;&gt;My
emulator&lt;/a&gt;
didn’t (initially) require this.  Next, the low-level clock generator wasn’t
generating a clock output of a constant width.  Worse, the core had a bug
where it just couldn’t handle high speed bus transactions–such as
transactions from or with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;–transactions
it was specifically designed to handle.&lt;/p&gt;

    &lt;p&gt;What happened?&lt;/p&gt;

    &lt;p&gt;Under the hood, what happened was that it took two clocks to read a value:
one to generate the address, and a second clock to read from that (new)
address.  High speed reads only provided one clock per read transaction, and
so they read the first word of any sector twice.  Anything slower wouldn’t
notice the problem.&lt;/p&gt;

    &lt;p&gt;Because I had only tested this design with &lt;em&gt;constant valued sectors&lt;/em&gt;, or
perhaps because I’d never stared hard enough at the results of reading or
writing sectors, I’d never noticed this bug.  (I’m still scratching my
head, to be honest, wondering how I could’ve missed this one …)&lt;/p&gt;

    &lt;p&gt;While &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;the core&lt;/a&gt; has since been fixed, this
story does a good job of illustrating some of the problems with reuse:
Verification is the expensive part of any design process, and how shall you
know that a design has been properly verified &lt;em&gt;for your usage environment&lt;/em&gt;?&lt;/p&gt;

    &lt;p&gt;Even better, &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;the core&lt;/a&gt; (now) uses only
about 601 4-LUTs on an iCE40, so it’s much cheaper to use than the
&lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;OpenCores-based 4k LUT core&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This illustrates another big problem with reuse: Just because a design
“works” in one bus/interconnect environment, doesn’t mean it will work
in practice in your environment.  This leaves the individual reusing the
core with the unenviable task of needing to debug his own design enough
to convince the author of any subcore within it that a bug remains within
the component, rather than within the context in which it was written.&lt;/p&gt;

&lt;p&gt;Doesn’t software also have the same problem?  I suppose you might argue that
it does.  The difference, however, is the difficulty associated with debugging
“broken” hardware components.  Debugging software is fairly easy.  Debugging
hardware, that’s &lt;a href=&quot;/fpga-hell.html&quot;&gt;much harder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The good news is that by using a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal property file&lt;/a&gt;,
you can verify that a core will function in &lt;em&gt;all bus interconnect and usage
environments&lt;/em&gt;–something you don’t get from either a bench test, nor an
integrated simulation environment.&lt;/p&gt;

&lt;h2 id=&quot;reusing-an-i2c-controller&quot;&gt;Reusing an I2C controller&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Reusing an I2C Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/rpi-edid.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, I built an &lt;a href=&quot;https://github.com/ZipCPU/wbi2c/blob/master/rtl/wbi2cmaster.v&quot;&gt;I2C
master&lt;/a&gt;
and separate
&lt;a href=&quot;https://github.com/ZipCPU/wbi2c/blob/master/rtl/wbi2cslave.v&quot;&gt;slave&lt;/a&gt;
controller.  They were built to support an
&lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt;
based pass-through design, and so one controller would read the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID&lt;/a&gt;
information from a downstream monitor, and then that information would be
used to populate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID&lt;/a&gt;
information used by the upstream
&lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt;
source–in this case a &lt;a href=&quot;https://raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Did the design work?  Beautifully.  No, it wasn’t automatic, but it was still
quite general purpose.  (It required a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; program to forward the
information from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID&lt;/a&gt;
master to the slave.)&lt;/p&gt;

&lt;p&gt;Recently, however, someone gave me an &lt;a href=&quot;https://www.nxp.com/docs/en/data-sheet/SC18IS602B.pdf&quot;&gt;I2C
chip&lt;/a&gt; to work with
that doesn’t follow the single byte address, multi-byte data protocol.  Try
as I might, I can’t seem to figure out any way to control this new device
with my older &lt;a href=&quot;https://github.com/ZipCPU/wbi2c&quot;&gt;I2C controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why not reuse?  Because even though the lower level protocol remained the
same, the upper level protocol changed and the cores that I might’ve used
combined the two protocol layers.&lt;/p&gt;

&lt;h2 id=&quot;reuse-at-the-interconnect-level&quot;&gt;Reuse at the interconnect level&lt;/h2&gt;

&lt;p&gt;Connecting components like a serial port and/or an I2C controller together
within a design tends to require some sort of glueware–an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;–that
holds the components together while allowing them to talk to each other.  &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;Many
modern designs&lt;/a&gt;
are composed of some kind of system level bus, or even a &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;hierarchical bus
structure&lt;/a&gt;,
that connects many components together.  Components to be connected include
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;–those
that want to drive an interaction, bus bridges, and &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus
slaves&lt;/a&gt;–those
that actually perform some resulting action.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 8. Can the interconnect be reused?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/multimaster.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This may be the one level at which I have seen the least reuse between
designs crossing multiple vendors.  There just aren’t that many well-known
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;interconnect
generators&lt;/a&gt;
that will work cross platform.&lt;/p&gt;

&lt;p&gt;What keeps
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnects&lt;/a&gt;
from being reused?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First and foremost, an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
is often tailor-made on a design by design basis.&lt;/p&gt;

    &lt;p&gt;One design might have one master and twenty slaves.  Another design might
have two masters and four slaves.  &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;Slave address
regions&lt;/a&gt;
might change, bus data widths change from design to design, etc.  Worse,
it takes a lot of work to connect all these masters and slaves to &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;an
interconnect that will allow each of the masters to talk to each of the
slaves&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;It is for this reason that the solutions I have seen typically involve code
generators–something that can “automatically” connect various
components together.  I’m going to call such a core generator in this
context an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
generator.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
was designed from its inception to be such an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
generator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connectivity is further complicated by the number of bus standards.
Perhaps you are familiar with some of these:
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
Avalon, AHB, APB, or even TileLink?&lt;/p&gt;

    &lt;p&gt;A design integrator, that is someone composing their design from multiple
cores they intend to reuse, just wants to be able to “plug” things together
and immediately “play” with them.&lt;/p&gt;

    &lt;p&gt;Moving from one protocol to another requires bus bridges.  Will the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;generator&lt;/a&gt;
insert these automatically?  If so, what will the performance cost be?
In one example I worked with, I ended up &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;inserting so many bus bridges
that I could no longer maintain the I/O speed I had promised my
customer&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The worst part of bridging between bus standards is that not all
functionality can be bridged.  For example, although I have an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axim2wbsp.v&quot;&gt;AXI to
Wishbone bus
bridge&lt;/a&gt;,
consisting of both &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximrd2wbsp.v&quot;&gt;read&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximwr2wbsp.v&quot;&gt;write&lt;/a&gt;
component bridges, the AXI &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLOCK&lt;/code&gt; functionality doesn’t bridge from one
side to the other very well.  Neither do the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxCACHE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxPROT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt;,
etc, have clear analogs in
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;What about bus widths?  DDR3 SDRAM works best with a bus that is multiples
of 64-bits wide.  The &lt;a href=&quot;https://github.com/freecores/uart16550&quot;&gt;UART16550
core&lt;/a&gt; I mentioned above wants
an 8-bit bus width.  Modern CPU’s naturally want to interact at the width
of their register size–that’s 32-bits for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Reuse requires being able
to bridge across these multiple bus sizes, something that doesn’t always
work across all peripherals and bus standards.  In particular, what happens
to a peripheral that performs a side-effect on reads, as for example a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt; might, when you try to
read it from a wider bus standard?&lt;/p&gt;

    &lt;p&gt;Of course, I haven’t mentioned the problem of getting the bus to &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross
clock domains&lt;/a&gt; as part of the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;–something
which leads to a whole new can of worms.  As an example, you are very
likely going to need to be able to &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;cross clock domains to support both
video and memory&lt;/a&gt; at the
same time–as you would with any sort of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;framebuffer&lt;/a&gt;
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Neither have I mentioned how the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
should handle “optional” bus capabilities.  For example,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; offers USER interface wires:
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWUSER&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WUSER&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARUSER&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSER&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;RUSER&lt;/code&gt;.  These tend to have
context-defined meanings, which can change from one design to the next.
How then should the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
handle connecting slaves together that have multiple, dissimilar,
definitions of these USER wires?  The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone
classic&lt;/a&gt; tag signals have similar
problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Performance and verification factor in here as well&lt;/p&gt;

    &lt;p&gt;To illustrate this, let me point out that Xilinx offers several options
when configuring their
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;.
One option turns an &lt;code class=&quot;highlighter-rouge&quot;&gt;N:M&lt;/code&gt;
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; into an &lt;code class=&quot;highlighter-rouge&quot;&gt;N:1:M&lt;/code&gt;
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; masters get arbitrated to a single read and write channel (never
both), which then gets fed to one of M slaves.  Only one of those
slaves will ever be addressed at any time, so they all share the same
read and write addresses.  (Yes, even the read and write addresses are
shared across channels–defeating much of the purpose of having separate
read and write channels in the first place–but that’s another story.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 9. Xilinx&#39;s Area Optimized N:1:M AXI Crossbar&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/axi-n-1-m.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is all fine and good until you switch a design component from the
   N:1:M &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
   &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
   to the full N:M &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;.
   Chances are, if you do that, that you’ll discover that your design
   no longer works.  Both &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;Xilinx’s demonstration IP
   cores&lt;/a&gt; and their
   &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_ethernetlite/v3_0/pg135-axi-ethernetlite.pdf&quot;&gt;AXI Ethernet-Lite core&lt;/a&gt; would break–if
   not other Xilinx cores as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 10. Whose core do you blame when something goes wrong?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/brken-axilite.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Tell me, what would you do?  If you reconfigured your
   &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
   and suddenly your design stopped working, where would you look for
   the bug?  Would you try to find a bug in Xilinx’s
   &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;?
   That’s where I would look!  Worse, I’d get all frustrated that their
   &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
   was closed source, and then likely blame them for the bug–even if it was
   in &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;one of my own design
   components&lt;/a&gt;!  This is
   what you’ll suffer from when your own core can’t handle
   backpressure properly.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Did I mention changing standards?  Some of the earlier
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
based &lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;SOCs&lt;/a&gt;, Zynqs
included, supported only &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI3&lt;/a&gt;–even
though most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designs today use &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;It doesn’t help that vendor based
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnects&lt;/a&gt;
can’t be simulated with 3rd party tools like
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
or verified with things like
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;,
simply because the designs are proprietary.&lt;/p&gt;

    &lt;p&gt;As I mentioned above, this proprietary nature of most
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
generators just hides the bugs within them, and obscures any bugs hidden
elsewhere in the design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This may be perhaps the biggest place where good open source based reuse
might improve designs.&lt;/p&gt;

&lt;h2 id=&quot;reusing-the-zipcpu&quot;&gt;Reusing the ZipCPU&lt;/h2&gt;

&lt;p&gt;Let’s now turn our attention to a place where all the stars &lt;em&gt;should&lt;/em&gt;  align
to make reuse easy: within IP cores generated by a single company, owned by
a single entity, and all using the same bus standard.&lt;/p&gt;

&lt;p&gt;In this ideal environment, reuse should be easy.  Right?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; (now) supports many
hardware architectures.  It has been built on
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;iCE40s&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipversa&quot;&gt;ECP5s&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;Intel MAX-10s&lt;/a&gt;,
Xilinx &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;Spartan 6s&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;Artix 7s&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;automated bus interconnect
generator&lt;/a&gt;
that I now use has also demonstrated its ability to compose designs
across architectures.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So have I managed to achieve reuse nirvana then?  Let’s take a look at several
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; designs and
see what might be learned from reusing the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; across multiple designs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Designs require resources.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is no different.  It
requires both LUTs for logic and one (or more) on-chip RAMs for the
register file.  Not all FPGAs have the LUTs required to build a
full-featured design.&lt;/p&gt;

    &lt;p&gt;No, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; will not fit on a
1k iCE40 &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
Sorry.&lt;/p&gt;

    &lt;p&gt;Perhaps a better example of this is the &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;ZipCPU design I
built&lt;/a&gt; for the
&lt;a href=&quot;https://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod S6&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;This design&lt;/a&gt; was based around a
Spartan 6/LX4, and demonstrated an ability to run a multitasking “O/S”–or
at least that’s what I’m going to call it.  (It did do multitasking,
but whether it was an actual “O/S” that fit into less than 16kB of RAM is
really another question for another day.)&lt;/p&gt;

    &lt;p&gt;Just getting the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;fit on the LX4&lt;/a&gt;
meant that I needed to adjust the CPU–&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpudefs.v&quot;&gt;removing “features” that cost
too much&lt;/a&gt;.  I
removed the cache, pipelining, the LOCK instruction, and I used a &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/cpu/memops.v&quot;&gt;really
cheap load/store memory
solution&lt;/a&gt;.
I even scoured all my peripherals for lower logic alternatives and dumped my
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In the end, the design fit with less than 10 LUTs to spare–depending upon
the build.  Sometimes it fit with no LUTs to spare.&lt;/p&gt;

    &lt;p&gt;This has since left me with a problem:  ISE is a pain to use.  I don’t
often open it up.  This means that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;, once ported to this platform,
doesn’t often get the updates also ported to the platform.  This particular
design is then well out of date.  Sure, I’ve reused the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.  However, I’m not convinced
that the current version of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
will still fit on this device, and I’m fairly certain that the version that
does fit has bugs that have since been “fixed” in the master branch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA2 LX25 design&lt;/a&gt; is another
interesting story.  Years ago, I bought &lt;a href=&quot;http://www.xess.com/shop/product/xula2-lx25&quot;&gt;one of these
boards&lt;/a&gt; from
&lt;a href=&quot;http://www.xess.com&quot;&gt;Xess.com&lt;/a&gt;.
I really liked it too, although it’s now a bit dated.  I even built a
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;ZipCPU based SoC&lt;/a&gt; for this board.&lt;/p&gt;

    &lt;p&gt;Then someone wanted to reuse this design on their own XuLA2 LX board, only
they purchased a XuLA2 LX9 board and not the LX25 board.&lt;/p&gt;

    &lt;p&gt;Did the design fit on their board?  Nope!&lt;/p&gt;

    &lt;p&gt;Did this user understand why not?  Not at all.&lt;/p&gt;

    &lt;p&gt;Size matters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there’s the reuse challenge associated with clock speed.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was originally built
on and for a Basys3 containing an Artix 7.  On that device, it runs
comfortably at 100MHz.&lt;/p&gt;

    &lt;p&gt;It doesn’t run at 100MHz on other devices.  It only gets about 80MHz or so
on a Spartan 6, 50MHz or so on an iCE40 HX, and 25MHz or so on an iCE40 LX.
The only good news here is that one user reported running it on a Kintex
7 at over 140MHz if I recall correctly.&lt;/p&gt;

    &lt;p&gt;This, however, oversimplifies reality.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on an
&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;Artix-7&lt;/a&gt; with
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data&lt;/a&gt;
caches runs can run at nearly &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycles_per_instruction&quot;&gt;one instruction per clock
period&lt;/a&gt;, and so the
100MHz number is fairly accurate.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; performance on the
&lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;Spartan 6 LX4 within the CMod S6&lt;/a&gt;?  That
didn’t run nearly as fast.  Sure, it runs at an 80MHz clock speed.  The
problem is that it might take 20+ clocks to &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;read a single instruction from
flash memory&lt;/a&gt;.  Since
there’s barely any block RAM, and certainly no caches, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;same CPU&lt;/a&gt; can run at best at nearly
4&lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_second&quot;&gt;MIPS&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As a result, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; that might
manage to meet a real-time requirement on an Artix-7 35T, might get
nowhere close on a lesser architecture.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; requires RAM.
Even if you turn the caches off, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
still uses RAM for its register file.&lt;/p&gt;

    &lt;p&gt;On most Xilinx devices, this isn’t a problem.&lt;/p&gt;

    &lt;p&gt;Where this becomes a problem is &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;on an
iCE40&lt;/a&gt;, since the
&lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;iCE40 requires that all RAM outputs need to be
registered&lt;/a&gt;.
Reuse?  Sure, but I had to &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;rearrange internal details of how the
ZipCPU operated&lt;/a&gt;
just to support this platform.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What about those multiplies?  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;handles
multiplication&lt;/a&gt;
by inference, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;OUT &amp;lt;= IN1 * IN2&lt;/code&gt;.  What
then happens if the device it is on has no DSP support?&lt;/p&gt;

    &lt;p&gt;This was first a problem in my Spartan 6 designs.  I was unable to get
decent timing on a Spartan 6 with this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/mpyop.v#L106-L130&quot;&gt;multiplication
algorithm&lt;/a&gt;.
So I created a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/mpyop.v#L132-L188&quot;&gt;parameterized multiplication approach that did polynomial
multiplication based around 16x16 bit hard multipliers&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Even this didn’t work on an iCE40 with no built-in DSP support.  In that
case, I needed to build a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/slowmpy.v#L101-L122&quot;&gt;shift and add based
multiplier&lt;/a&gt;.
Even this took several rounds of design until I had an implementation
that not only worked, but also left enough room behind for non-CPU design
components.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I should also mention my
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
here.  One of the key components to any design I build is my
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.
This allows me to load the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
externally, to run a
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;ZipCPU debugger&lt;/a&gt;,
and to &lt;a href=&quot;/zipcpu/2017/05/20/which-came-first.html&quot;&gt;interact with peripherals even when the ZipCPU is
halted&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
didn’t fit on the &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;Spartan 6/LX4 of the CMod
S6&lt;/a&gt;, and so this is the one design where
I wasn’t able to make (much) use of it–although I still used it as part of
a special design to &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;load software onto the
flash&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;My &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;supersized debugging
bus&lt;/a&gt;
implementation, with FIFOs and
&lt;a href=&quot;/formal/2019/10/05/formal-enough.html&quot;&gt;compression&lt;/a&gt;,
didn’t &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;fit on the iCE40&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus
implementation&lt;/a&gt;
that we built together on the blog did fit.  I had never intended
to use this implementation in any of my designs, yet now having
built it I’m glad that I did.&lt;/p&gt;

    &lt;p&gt;With all that said, the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; implementations
are really reuse success stories, since they’ve been used across so many
of my designs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clocks.  Yes, clocks.  It should come as no surprise that I’ve had to
redesign the clocking logic from one architecture to the next.  Every
vendor provides their own PLLs, they all need to be configured differently,
etc.&lt;/p&gt;

    &lt;p&gt;The good news is that
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can handle this nicely.&lt;/p&gt;

    &lt;p&gt;No, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
doesn’t do clock configuration.  However, you can use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to propagate clock-based configuration constants across the design.  This
makes it easy, for example, to adjust the clock rate and have all of the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART&lt;/a&gt; or SDRAM constant design
parameters adjust themselves automatically.&lt;/p&gt;

    &lt;p&gt;Isn’t this just as easy as setting a parameter in the top level Verilog
file?  Not at all!  Don’t forget that the emulated serial port needs
to be adjusted for the new baud rate, as does the host software.
One of the nice things
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
handles is propagating information across multiple files of dissimilar
languages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
has worked wonders for building cross platform
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnects&lt;/a&gt;,
and I’ve been very pleased with it.&lt;/p&gt;

    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/autofpga/tree/dev&quot;&gt;newer version (still in the dev branch at this
time)&lt;/a&gt; has support for
&lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;multiple bus masters and multiple bus
types&lt;/a&gt;.  (The
original version required manually placing bus arbiters into a design
to whittle the design down to one master, and only ever supported the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipeline&lt;/a&gt;
bus type.) Even better, all of the components are open source–so any
design so composed should work nicely with
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;My problem is that this &lt;a href=&quot;https://github.com/ZipCPU/autofpga/tree/dev&quot;&gt;new version of
AutoFPGA&lt;/a&gt;
is somewhat incompatible with the last one.  Why?  Because the &lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;interfaces
have changed&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Creating a design with multiple bus masters meant that I needed to rename
the bus, giving all of the bus slaves their own individual bus signal
wires to work with.  This alone is an incompatible change to
all of my designs that assumed all bus wires would be prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_&lt;/code&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt;, etc.&lt;/p&gt;

    &lt;p&gt;I’ve also struggled with designs where I haven’t set up the bus logic
properly.  In earlier versions of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
I’d pass &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb &amp;amp;&amp;amp; (slave_sel)&lt;/code&gt; to the design’s
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
strobe pin, and then suffered any time I forgot to properly place the
&lt;code class=&quot;highlighter-rouge&quot;&gt;slave_sel&lt;/code&gt; in that logic.  The new version allows you to just say
&lt;code class=&quot;highlighter-rouge&quot;&gt;@$(SLAVE.PORTLIST)&lt;/code&gt; and it then fills in all the necessary bus
connections.  This has &lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;forced all of my slaves to use the same bus
portlist order and format–another incompatible
change&lt;/a&gt;.
(I could also use the ANSI ‘dot’ notation for connecting ports,
with just &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(SLAVE.ANSIPORTLIST)&lt;/code&gt;.)&lt;/p&gt;

    &lt;p&gt;My point is simply this: after making a simple interface change like this,
I’m going to need to go back and re-build and then re-verify all of my
designs.  This isn’t all that unlike the configuration hell vendors have
found themselves within.  (But … my design worked with Vivado 2016.1,
why doesn’t it work any more with Vivado 2018.2?)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Still, the fact that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has been successfully used across so many architectures is by itself a reuse
success story.  Nirvana?  Perhaps not, but still quite valuable.&lt;/p&gt;

&lt;h2 id=&quot;reusing-the-design-across-cpus&quot;&gt;Reusing the design across CPUs&lt;/h2&gt;

&lt;p&gt;Okay, so I’ve now got a design framework I like using.  Can it be reused?&lt;/p&gt;

&lt;p&gt;Specifically, one customer wanted me to reuse my framework to build a &lt;a href=&quot;https://github.com/ZipCPU/zipversa&quot;&gt;platform
containing a RISC-V CPU&lt;/a&gt; instead of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Surely reuse would work here,
right?&lt;/p&gt;

&lt;p&gt;Let’s see: I owned all the submodule and component designs except for the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32 CPU&lt;/a&gt;
I chose to use, so licensing wasn’t a problem.  I used
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; to compose
the component cores together, so there was no problem with building the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;.
I could reuse &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/sw/host/zipload.cpp&quot;&gt;my CPU
loader&lt;/a&gt;
to load the (flash) memory into a design, so that wouldn’t be a problem.  The
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;, like the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, was highly configurable
so it could be configured to start from the &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;memory
address&lt;/a&gt;
provided by &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;, it could be
configured for the number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; assigned to it, the design
had support for 32x32 bit multiplies, … what could possibly go wrong?&lt;/p&gt;

&lt;p&gt;Since it looked so easy, I made a big mistake: I mis-estimated the amount
of time the project would take.  Since it was all reuse, it should’ve all been
easy.  Again, what could’ve gone wrong?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. Endianness: Which byte of a word is byte zero?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/endianness.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;Endianness&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;That’s right.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
is &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big-endian&lt;/a&gt;, and &lt;a href=&quot;https://riscv.org/specifications/&quot;&gt;RISC-V
machines are little endian&lt;/a&gt;.
While &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI&lt;/a&gt; specifically
uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little-endian byte order&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; can be
either &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big or little endian&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This left me with the age old question of how do you fit a square peg in a
round hole?&lt;/p&gt;

    &lt;p&gt;My first thought was that I should add to the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/picorv/wb_picorv32.v&quot;&gt;wrapper&lt;/a&gt;
the logic necessary to swap all the words on the bus.&lt;/p&gt;

    &lt;p&gt;Then I got to thinking–all of my peripherals depended upon the data bits of
the bus, from bits 31 down to bit 0, being in MSB down to LSB order.  If
I swapped the bytes in any of these control words, then writes to these
peripherals would’ve all been provided in
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[7:0],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[15:8],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[23:16],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[31:24]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; order.&lt;/p&gt;

    &lt;p&gt;That would never work.&lt;/p&gt;

    &lt;p&gt;In the end, I created a new concept: bus endian.  Every peripheral that was
word addressable would use bus endian order and stay the same.  Every
peripheral that was byte addressable, rather than word addressable, would
get its byte order swapped.  This now limited my pain to the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; and the
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/enet/enetpackets.v&quot;&gt;network&lt;/a&gt;
controllers.  A simple parameter, set by the &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/auto-data/picorv.txt#L60&quot;&gt;CPU’s AutoFPGA
configuration&lt;/a&gt;,
could then control whether or not the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/enet/enetpackets.v&quot;&gt;network&lt;/a&gt;
controller needed to have their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;endianness&lt;/a&gt; swapped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There was a second problem as well, and that had to deal with the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;’s
bus interface.  It was custom, not
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
No, it wasn’t all that hard to &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/picorv/wb_picorv32.v&quot;&gt;convert from the PicoRV32’s custom
interface to a Wishbone interface&lt;/a&gt;,
but the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
took a big performance hit in the process.&lt;/p&gt;

    &lt;p&gt;What?  Why?&lt;/p&gt;

    &lt;p&gt;Well, the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
only ever issues one bus request at a time.  That request waits on the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;’s
I/O lines until it is fulfilled.  Without knowing the next request location,
every I/O request becomes independent.  Every I/O request then requires a
number of clocks defined by the bus latency plus the peripherals latency.&lt;/p&gt;

    &lt;p&gt;At best, the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;250MHz (on a Xilinx device) capable PicoRV32
CPU&lt;/a&gt; then ran slower than &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycles_per_instruction&quot;&gt;40
clocks per instruction&lt;/a&gt;.
No, this design didn’t support a &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;DDR based
flash&lt;/a&gt;, and I didn’t
manage to get the &lt;a href=&quot;/formal/2019/11/18/genuctrlr.html&quot;&gt;DDR3 SDRAM
support&lt;/a&gt;
working–hence it took 40 clocks to &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;read each instruction from the
flash&lt;/a&gt;.
Further, because the rest of the design slowed down the system clock,
the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
could only ever run at 50MHz.  Then, because the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt; didn’t support a
pipelined bus by nature, the best speed it could ever achieve was limited to
(roughly) 1.25&lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_second&quot;&gt;MIPS&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, I needed to adjust the software ecosystem&lt;/p&gt;

    &lt;p&gt;This is both a win and a fail for software reuse.  It’s a win, since most of
what I did was to copy the example boot loader that came with the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/sw/rv32/syscalls.c&quot;&gt;example newlib system
calls&lt;/a&gt;
from the
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/zlib/syscalls.c&quot;&gt;ZipCPU&lt;/a&gt;.
It’s a fail because I still had to edit the two, but in general by the time
I got this far things “just worked”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What’s the lesson here?  Did reuse work?  Well, yes and no.  I did manage to
reuse most of the design across both CPUs.  I did manage to reuse the &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;bus
interconnect framework&lt;/a&gt;
across both CPUs.  No, I wasn’t able to reuse the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;ZipCPU’s
debugger&lt;/a&gt; with the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;–but then again I wasn’t
expecting to.  That said, it wasn’t all that hard to &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;issue halt or reset
commands&lt;/a&gt; to the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt; from the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; interface over the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
bus like I &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;would’ve done with the
ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hardware is not software.&lt;/p&gt;

&lt;p&gt;Let me say that again, hardware is not software.  What’s easy to do in software
can be ten times harder in hardware where its that much &lt;a href=&quot;/fpga-hell.html&quot;&gt;harder to “see” your
bugs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What else might we conclude?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There’s a large portion of digital design that isn’t covered by any HDL
standard, but that is rather vendor and even device dependent.  This
includes clocks, PLLs, I/O primitives, sometimes RAM structures, and
definitely hardware multiplies.&lt;/p&gt;

    &lt;p&gt;To be reusable across platforms, you’ll need to take these differences into
account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If that’s not enough, the differences between the “standard” languages the
tools accept can also be really annoying.&lt;/p&gt;

    &lt;p&gt;Don’t expect a design that hasn’t been used across vendor tools before to
immediately work when switching tools.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Software bloat costs more memory than anything else, whereas hardware bloat
costs actual dollars in terms of scarce &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;hardware
resources&lt;/a&gt; on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; or area
on an &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;.  As a
result, hardware designs take more work in order to become reusable across
a large variety of needs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bus standards are awesome–when they are truly &lt;em&gt;standard&lt;/em&gt;.  AXI USER or
Wishbone tag signals aren’t really standard.  Similarly, the bus bridges
necessary to cross standards have a cost in both area and performance
that can’t always be ignored during reuse.&lt;/p&gt;

    &lt;p&gt;Making sure bus standards are &lt;em&gt;standard&lt;/em&gt; is one of those reasons why
I maintain a series of formal bus protocol checkers in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/&quot;&gt;Wishbone to AXI
(pipelined) repository&lt;/a&gt;: 
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone (pipeline)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fwbc_slave.v&quot;&gt;Wishbone (classic)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt;,
and even &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fapb_slave.v&quot;&gt;APB&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The worst reuse stories, not necessarily those captured above, are reserved
for trying to reuse a core that was never formally verified in the first
place.  It’s in these cases that I most often find myself mis-estimating
the time and energy required to get a design “working”, leaving me
&lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;burning the midnight oil to get a design done by the
deadline&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Can reuse happen?  Yes, it can.&lt;/p&gt;

&lt;p&gt;Do be prepared for all kinds of unexpected issues along the way.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The thing that hath been, it is that which shall be; and that which is done is that which shall be done: and there is no new thing under the sun. (Eccl 1:9)&lt;/em&gt;</description>
        <pubDate>Mon, 13 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2020/01/13/reuse.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/01/13/reuse.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
