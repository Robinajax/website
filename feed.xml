<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 16 Aug 2019 16:23:45 -0400</pubDate>
    <lastBuildDate>Fri, 16 Aug 2019 16:23:45 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Planning an Intermediate Design Tutorial</title>
        <description>&lt;p&gt;I’ve been known for wandering through &lt;a href=&quot;/digilent/2017/05/18/most-common-digilent-support-requests.html&quot;&gt;an FPGA forum or two, and I’ve see some
common and reocurring
themes&lt;/a&gt;.
One of them is, “My design isn’t working and I don’t know why
not.”  It’s the reason I dedicated this blog to keeping individuals out of
“&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;” as I called it.&lt;/p&gt;

&lt;p&gt;Indeed, I saw such a post again just this morning.  Someone had a MicroBlaze
design that wasn’t starting.  It worked on an older board, but not the newer
revision of the board.  What might be wrong?&lt;/p&gt;

&lt;p&gt;If all you know is that, “My design doesn’t start,” you don’t have much to
debug from.&lt;/p&gt;

&lt;p&gt;This was one of the reasons why one of my first blog topics was how to build
a &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
followed by the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;.
Why?  Because this is how I debug problems like that.  Using the two of those,
I can typically trace anything going wrong down to a trace between two
interfaces.  At that point, you can then visually “see” what’s going on.&lt;/p&gt;

&lt;p&gt;Sadly, if all you have are the vendor tools, it’s very hard to “see” what’s
going on.  Worse, I find myself quick to blame someone else’s code when I
don’t see a problem in my own–even if I can’t figure out what the problem is.&lt;/p&gt;

&lt;p&gt;It was for this reason that I &lt;a href=&quot;/fpga-hell.html&quot;&gt;dedicated the blog&lt;/a&gt; to keeping individuals out of
“&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;”.
One of the problems associated with blogging, however, is that my articles
1) tend not to be arranged in any particular order, and 2) tend not to get
updated over time.&lt;/p&gt;

&lt;p&gt;This was my first reason for writing a &lt;a href=&quot;/tutorial&quot;&gt;beginner’s
tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second reason for writing a &lt;a href=&quot;/tutorial/&quot;&gt;beginner’s
tutorial&lt;/a&gt; was in response to problems
I’ve seen with the more traditional instruction.  For example, I’ve seen
students confuse “testbench” constructs with “synthesizable” constructs and
then wonder why their design doesn’t work.  I’ve seen students create bench
tests that provide less test coverage of their code than “modern” swimwear.&lt;/p&gt;

&lt;p&gt;Indeed, I &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;once had the same problem in my own
designs&lt;/a&gt;: My own test
coverage left me
&lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;chasing bugs in my designs over late nights, and GB traces containing the
bug&lt;/a&gt;
… somewhere … within them.  It was specifically for this reason that I
&lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;fell in love with formal
verification&lt;/a&gt; so
quickly–it finds the bugs within your design that my own testbenches were
always missing.&lt;/p&gt;

&lt;p&gt;When no one listened to me hollering about the way I felt things “should” be
done, I decided to try writing a &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
myself to help teach what’s missing.&lt;/p&gt;

&lt;p&gt;So far, that
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
has been well received.  Sure, I’ve had some welcome but less than flattering
comments.  Perhaps the biggest one regards
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
and the C++ nature of the &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;.
Why should C++ be required when your goal is to learn Verilog and FPGA design.
I get it.  A similar comment regards “make” files we used.  However, you can’t
do things like &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;this VGA
simulator&lt;/a&gt; without some basic
software background, and a lot of folks are coming into the FPGA community
with that background–much like me.  For them, at least, it makes sense.&lt;/p&gt;

&lt;p&gt;That said, there’s a strong need in the community for teaching materials that
will teach “From blinky to AXI,” and while &lt;a href=&quot;/tutorial&quot;&gt;my own
tutorial&lt;/a&gt; gets past blinky, it doesn’t make it
anywhere near &lt;a href=&quot;/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let me present some of my thoughts today regarding how this might be fixed.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-the-intermediate-tutorial&quot;&gt;The problem with the intermediate tutorial&lt;/h2&gt;

&lt;p&gt;There’s a couple of reasons why I have yet to start on an intermediate FPGA
tutorial.  One is that I sell my services and … things have been quite busy
as of late.  (Sorry, but this blog is a &lt;em&gt;hobby&lt;/em&gt; of mine rather than something
that puts food on the table for my family.)  The second reason is that the
next step really requires a lot of design-ware that few students would like
to build.&lt;/p&gt;

&lt;p&gt;Allow me to explain.&lt;/p&gt;

&lt;p&gt;Many of the FPGA designs I’ve worked with involve some kind of bus master
together with several bus slaves.  The common task, then, for the FPGA designer
is to build a new bus slave.  A classic example of this might be to create a
new piece of hardware to add to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
capabilities, such as is shown in Fig. 1 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. A typical CPU based design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-cpu.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The task of the student is then to build this new slave.  Perhaps he has several
such slaves he’d like to build.&lt;/p&gt;

&lt;p&gt;Were I to build this the way my mathematical background requires, I’d want
to teach everything from the bus master, to the S(D)RAM memory controller,
to the &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;bus interconnect&lt;/a&gt; before the student gets to their first bus slave.
You know, learn multiplication before square roots.  In this case, that’d be …&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BORING!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I mean, seriously, would you want to know how to build a
&lt;a href=&quot;https://www.teachengineering.org/lessons/view/cub_dams_lesson03&quot;&gt;lock and dam&lt;/a&gt;
just to go canoing on the river?&lt;/p&gt;

&lt;p&gt;Here’s another example design that’s common among FPGAs: you want to process
data, say an image perhaps.  That means you want to read the image from memory
(there’s not enough room in block RAM to store most images), process it however,
and then store it back into memory again.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. A basic processing pipeline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-procbare.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this might be a typical signal or image processing application, there’s
a missing piece to it: the design usually begins and ends with Matlab or, in
my case, &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, you build your design in
  &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; and prove that your algorithm
  works&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Along the way, you discover how to measure the performance of your
  algorithm, and you learn how to communicate (i.e. plot) that performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now you want to put it on an FPGA.  So, you build your data processing
  algorithm to put it on the FPGA.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s now the big moment: As you are synthesizing your brand-new algorithm
in order to place it into an FPGA design, you suddenly realize that you
have no way of getting your data set into or out of memory.  Worse, even
if you do realize that, you have no easy way to get it in or out of
&lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; from your design, even if you
were to get it into memory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see the problem illustrated below in Fig. 3,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. A traditional data streaming problem&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-procpipe.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, what I haven’t mentioned is that the end goal of this sort of stream
processing task is typically not to process the data within memory, but rather
to receive the data on some signal or video feed, process it, and then to
forward the output back to a similar feed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. From input to output&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-im-procpipeio.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Where’s the tutorial to teach that?&lt;/p&gt;

&lt;p&gt;There isn’t one (that I know of).  (I don’t really know of that many.)&lt;/p&gt;

&lt;p&gt;Hence, the reality is that a lot of individuals end up using the vendor tools
and vendor design components and have no idea what’s going wrong when they
don’t work.&lt;/p&gt;

&lt;p&gt;As an example, a recent Xilinx user wrote that he’d written a lot of data into
his Xilinx stream processor and no data ever came out.  Why not?  Eventually,
after some back and forth, he realized he’d never marked the &lt;em&gt;end&lt;/em&gt; of the
data packet.  Now, without using your own code, or at least something that’s
open source, how would you ever find a bug like that?&lt;/p&gt;

&lt;p&gt;My point in all of this is simply that, when your goal is data processing,
you don’t really want to build all of that miracle glueware shown in Fig. 3
above–just like you didn’t want to build the interconnect and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
shown in the example before that, in Fig. 1.&lt;/p&gt;

&lt;p&gt;Yes, I understand that most FPGA vendors provide cores and logic that can
handle all of this middle ware.  Personally, I have a couple of problems
with using these cores.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, and perhaps most important, if you ever need to switch hardware
  vendors, you’ll have to tear apart your design and rebuild it for the new
  cores using their new interfaces.&lt;/p&gt;

    &lt;p&gt;This includes switching design flows, even for the same hardware.  For
example, if there were an open source tool chain, would you be able to get
by without the vendor supplied cores?  How about if you wanted to use
an open source simulator, like
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;?
Know of any good &lt;a href=&quot;/2019/07/17/crossbar.html&quot;&gt;open source
interconnects&lt;/a&gt;?  Or tools to
connect your components to said open source interconnects?&lt;/p&gt;

    &lt;p&gt;Or have you not noticed that I have
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; based designs for
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;iCE40&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipversa&quot;&gt;ECP5&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;Xilinx&lt;/a&gt;, &lt;em&gt;and&lt;/em&gt;
&lt;a href=&quot;/zipcpu/2019/03/12/arrowzip.html&quot;&gt;Intel&lt;/a&gt;?  Yes, it
is doable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, the purpose of the intermediate tutorial we are discussing would be
for learning.  It’s one thing to use a vendor’s core when you have a product
that’s due on a tight schedule.  Sure, I get it, go for it.  I’m not knocking
that at all.  On the other hand, if you want to learn design, then doesn’t
it make sense to spend your time learning how to build your own versions
of the basic building blocks before you turn around and use those from a
vendor?&lt;/p&gt;

    &lt;p&gt;Worse, wouldn’t it be a shame if you learned how to design using vendor
based building blocks but then … had to switch tools and discovered that
you no longer knew anything because you could no longer use the cores and
tools you were familiar with?  For example, have you ever tried simulating
Xilinx’s AXI interconnect using &lt;a href=&quot;https://www.youtube.com/watch?v=en8JMz7v3LU&quot;&gt;the fastest
simulator&lt;/a&gt;
out there?  (Hint: it’s not Vivado.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My point here is simply this: there’s a need for instruction material that
goes past basic serial port I/O in a vendor independent fashion.&lt;/p&gt;

&lt;h2 id=&quot;tutorial-goals&quot;&gt;Tutorial Goals&lt;/h2&gt;

&lt;p&gt;As always, one of the goals of the tutorial is to have the widest applicability
possible.  That means it needs to share FPGA design concepts and strategies
in a vendor independent fashion.  That means I can’t really use vendor code in
my tutorial.  That includes all the vendor glueware, bus interconnects, etc.&lt;/p&gt;

&lt;p&gt;My apologies to all of you big-named vendors out there.  On the other hand,
after trying to answer questions from clueless forum posters, wouldn’t you
rather have customer’s who knew how to debug their own designs?&lt;/p&gt;

&lt;p&gt;So, here was my thought: Using entirely open source tools, so that the design
components could be verified with
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; and then simulated
using &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
create a set of lessons similar to those shown
in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Proposed intermediate tutorial structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/tut-intermediate.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The lessons would use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to connect all of the parts and pieces together.  In every lesson, the goal
would be to be able to formally verify any new components, then to run the
design in a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based simulation, and then in actual hardware.&lt;/p&gt;

&lt;p&gt;The lesson sequence would start out by discussing some of your basic slave
design components.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first lesson would start out by creating a &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;very simple “blinky”
design&lt;/a&gt;,
but this time using the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;.  Commands sent
from the host over the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; would be used
to turn LEDs on and off.&lt;/p&gt;

    &lt;p&gt;For those who don’t recall the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/README.md&quot;&gt;debugging bus
articles&lt;/a&gt;, a
“&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;” is
my term for a bus, internal to an FPGA, that can be accessed and commanded
from host (PC) software.  Even better, I like to run my &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; software &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;over
a network&lt;/a&gt;,
allowing me to interact with either my design or its simulation from
anywhere on my local network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second lesson would involve simply &lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;creating an audio
tone&lt;/a&gt;.
This would be very similar to the first lesson, but might involve a couple
of bus addresses, to allow the developer to control amplitude and frequency
from their external computer as one example.  The tone itself could be
played using a basic &lt;a href=&quot;{ site.baseurl }}/dsp/2017/09/04/pwm-reinvention.html&quot;&gt;PWM
controller&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The third lesson would be quick, just showing how to connect a &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
RAM&lt;/a&gt; to the bus as
well as how to verify RAM based slaves.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’d then discuss building a “&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;bus
scope&lt;/a&gt;”.  If you’ve
read my blog much, you’ll know that I use what I call a “&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;”.
You’d be amazed at the &lt;a href=&quot;/2017/09/14/even-i-get-stuck.html&quot;&gt;bugs you can find and
diagnose&lt;/a&gt; using
something like this.&lt;/p&gt;

    &lt;p&gt;This is somewhat different from using vendor tools (chipscope, ILA, etc),
simply because it is bus based.  This will allow you greater control of the
scope, eventually allowing you to control it from your embedded
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;–but
we’re not there yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final slave in this section of the course would be your &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;basic xSPI
flash memory controller&lt;/a&gt;.
This could be done either with SPI or
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;QSPI&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voila, the first section of an intermediate Verilog tutorial.&lt;/p&gt;

&lt;p&gt;The second section of the tutorial would focus on bus masters, rather than bus
slaves.&lt;/p&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;It would begin with a set of lessons on creating a video output.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(6) The first might discuss &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;outputting a fixed test
 pattern&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(7) That lesson would be followed with a stream processing lesson where
a “sprite” of some type would be added to the video stream.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(8) The next lesson would be (generic) on &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFOs&lt;/a&gt;.  Although this
is really a video independent topic, it’s really a necessary background
for the next lesson&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(9) The final video lesson would be on how to &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;stream pixels from a (fixed)
memory location&lt;/a&gt;
to the video controller and hence to the VGA screen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this would be simulatable using
  &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.
  Perhaps painfully simulatable, but simulatable none the less.&lt;/p&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll then move back to a quick bus slave, to learn how to &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;control a basic
SPI A/D controller&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once we have a way to ingest samples, the next lesson would discuss how
to record samples from something like an A/D controller to memory, in order
to later be read out using the debugging bus.&lt;/p&gt;

    &lt;p&gt;At this point, you should be able to ingest your pipeline processing
algorithm into a design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, before getting into
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
  design, we’d work our way through a basic
  hardware controller–something that could read “instructions” from a memory,
  and then use them to control a hardware output.  In this case, it should be
  possible to build a basic music box–perhaps something that could play
  “&lt;a href=&quot;https://www.youtube.com/watch?v=Qwa0c8VO71s&quot;&gt;Music Box Dancer&lt;/a&gt;”?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That would end the basic set of lessons on building bus masters.&lt;/p&gt;

&lt;p&gt;The next group of lessons would focus on building a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.  This would not
be about &lt;a href=&quot;https://www.amazon.com/Computer-Architecture-Quantitative-John-Hennessy/dp/012383872X&quot;&gt;ISA design&lt;/a&gt; (Sorry, I know my limits), but rather on
implementing some increasingly complex
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s.&lt;/p&gt;

&lt;ol start=&quot;13&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The first lesson would discuss just a simple, very basic, microcontroller.
  I haven’t yet decided what ISA I’d use, or if there’s one available that has
  a nice tool suite with it, but you get the idea.&lt;/p&gt;

    &lt;p&gt;In this lesson, the student would implement such a simple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
really &lt;a href=&quot;//zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;needs a debugging
interface&lt;/a&gt;, so
we’d add one.  This would allow us to start and stop our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
using the same debugging bus that’s supported us so far, and perhaps even
read registers and state from it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That would lead us right into building an &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/host/zipload.cpp&quot;&gt;ELF program
loader&lt;/a&gt;.
This could be just something basic that can read a compiled file and load
it into either flash or (block) RAM.  Of course, this would also require
an ELF-based tool chain, and so likely a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Instruction_set_architecture&quot;&gt;ISA&lt;/a&gt;
as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can then move to a lesson on &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined
CPUs&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This one I haven’t quite figured out yet, but I’d like to offer something
more complex than the basic state-machine based microcontroller.&lt;/p&gt;

    &lt;p&gt;While one option might be to use the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; here,
I want an option that presents some amount of learning to the
student–rather than just following a script.&lt;/p&gt;

    &lt;p&gt;Perhaps one option might be adding a special instruction (or two, or four)
to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
Another option might be to restructure the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; for some
purpose (such as MMU integration as an example).  We’ll see.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How fast your CPU works is really dependent upon where it’s memory is found,
and linker scripts provide the means of adjusting where your memory is found
within your design.  We’ll discuss how to read, write, and adjust linker
scripts so you have an idea of what’s going on within your design.&lt;/p&gt;

    &lt;p&gt;The student should be able to load a CPU (either theirs or mine) so that it
runs from &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;Flash&lt;/a&gt;, block RAM,
block ROM, or … wherever.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This really then feeds nicely into understanding &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;how a bootloader
works&lt;/a&gt;.
Once you know how to place program instructions (wherever), it’s important
to be able to copy them to where you need them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next lesson would focus on how to build a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache
controller&lt;/a&gt;.
I’d provide the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to any one
who wished to use it at this point, although I could understand why a
student might rather wish to use their own.  I’m not (yet) set on this
course of action.&lt;/p&gt;

    &lt;p&gt;Of course, as with all of these designs, part of the lesson would discuss
how to go about formally verifying the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, we’d discuss the &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system&quot;&gt;FAT
filesystem&lt;/a&gt;,
so that the CPU could access files on an external &lt;a href=&quot;https://en.wikipedia.org/wiki/SD_Card&quot;&gt;SD Card&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Yes, the course will show how this can be done from simulation too.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think this progression builds nicely, one lesson upon the next, with the
bus components being built growing every more capable.  Further, while
I like this progression of lessons, I’ve noted that with all of my
tutorials students have found it valuable to pick up in the middle
as their interest and needs dictate.&lt;/p&gt;

&lt;h2 id=&quot;hardware-required&quot;&gt;Hardware required&lt;/h2&gt;

&lt;p&gt;Unlike the &lt;a href=&quot;/tutorial&quot;&gt;beginner’s tutorial&lt;/a&gt;, once we get
past lesson one, special hardware will be required for the following lessons.
Well, either that or the student might choose (instead) to build the design
in the simulator alone and just go on.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Proposed hardware requirements&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/im-tutorial/generic-hw.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Judging from the hardware we’ve discussed above, to complete all of the lessons
you’d need:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;Flash memory&lt;/a&gt;
controller (most FPGAs have this)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A VGA port.&lt;/p&gt;

    &lt;p&gt;While I’d love to do &lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt;,
and while HDMI isn’t really all that much more
difficult, the I/O’s required for HDMI are a touch more challenging
to do in a &lt;em&gt;generic hardware&lt;/em&gt; fashion.&lt;/p&gt;

    &lt;p&gt;Perhaps this &lt;a href=&quot;https://store.digilentinc.com/pmod-vga-video-graphics-array&quot;&gt;dual Pmod VGA
peripheral&lt;/a&gt;
would serve our purpose well here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While I’d like to avoid any external RAM controllers, the Video lesson
really requires a significant amount of RAM (typically external) in order
to handle streaming from a memory buffer.&lt;/p&gt;

    &lt;p&gt;This may require an AXI lesson mid-tutorial.&lt;/p&gt;

    &lt;p&gt;Perhaps the best way to handle this in an intermediate course would be to
offer vendors an opportunity to post and share how to interact with their
xDDR SDRAM controllers.  I know I have several SDRAM controllers available
to work from, and even an &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/sramdev.v&quot;&gt;SRAM controller&lt;/a&gt;.  I would also expect that the
&lt;a href=&quot;https://github.com/enjoy-digital/litedram&quot;&gt;litedram&lt;/a&gt; authors might be
willing to support this project as well.  (Maybe I should ask them?)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A simple PWM based audio controller, such as might be used with &lt;a href=&quot;https://store.digilentinc.com/pmod-amp2-audio-amplifier&quot;&gt;this
  PMod audio device&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A SPI based A/D.  For this, I was thinking of something similar to
  &lt;a href=&quot;http://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain&quot;&gt;Digilent’s audio
  PMod&lt;/a&gt;,
  for which I already have both &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smpladc.v&quot;&gt;(verified) example
code&lt;/a&gt; as well
as a decent &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/micnco.cpp&quot;&gt;emulator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, in order to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/SD_Card&quot;&gt;SD
Card&lt;/a&gt;.  and read and parse a &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system&quot;&gt;FAT file
filesystem&lt;/a&gt;,
you’d need a design with an SD card reader on it.  My current &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD card
controller&lt;/a&gt; is SPI based, so I might
start there.  On the other hand, one of my current projects is to upgrade
that controller to be fully SDIO compliant, so we might do even better.&lt;/p&gt;

    &lt;p&gt;For those that do not have an SD card on their board, there does exist
a &lt;a href=&quot;https://store.digilentinc.com/pmod-sd-full-sized-sd-card-slot&quot;&gt;PMod SD&lt;/a&gt;
which might work nicely for this purpose as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sadly, not all entry level development boards have all of this hardware,
so whether or not this list is too aggressive or not is an important question.&lt;/p&gt;

&lt;h2 id=&quot;from-blinky-to-axi--wheres-the-axi&quot;&gt;“From Blinky to AXI” … where’s the AXI?&lt;/h2&gt;

&lt;p&gt;So I started by saying that a tutorial “From Blinky to AXI” would be a valuable
contribution.  Sadly, the proposed tutorial above doesn’t (yet) discuss
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.
I haven’t quite decided on how to handle that.&lt;/p&gt;

&lt;p&gt;I could leave the AXI work for a future “AXI only” tutorial, or I might work
it into this tutorial, or I might just leave it within the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;blog&lt;/a&gt;.
Another approach might be to provide the bus with a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wb2axilite.v&quot;&gt;WB to AXI-lite
bridge&lt;/a&gt;, and
then to make all of the devices using
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;.
I’m not quite certain right now.&lt;/p&gt;

&lt;p&gt;I am open to ideas, if you’d like to share them.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Whew!  While I like this overview of what would be next, I’m not certain any
(potential) students would be interested in something quite this intensive.&lt;/p&gt;

&lt;p&gt;I’d love to hear your thoughts.  I intend to create a Reddit post with this
article, and hear any comments that might be shared.  Feel free to join in
the discussion.&lt;/p&gt;

&lt;p&gt;My own first thought is to note that, while
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
handles multiple slave integration easily, it doesn’t (yet) handle multiple
masters.  The good news is that I’m going to have to fix that already for
a contract I’m working on, so that’s likely to get fixed quickly.&lt;/p&gt;

&lt;p&gt;Of course, all of this would only be if the &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord
wills&lt;/a&gt;–so we’ll have to see
if any of this ever gets off of the ground in the first place, but your
thoughts would be welcome either way.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And whatsoever ye do in word or deed, do all in the name of the Lord Jesus, giving thanks to God and the Father by him. (Col 3:17)&lt;/em&gt;</description>
        <pubDate>Fri, 16 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/08/16/intermediate.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/08/16/intermediate.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Quiz #2: Will this counter pass formal verification?</title>
        <description>&lt;p&gt;Formal verification is known for catching the subtle bugs.  This very simple
counter design has a subtle bug within it.  See if you can find it.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/08/08/quiz02.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/08/08/quiz02.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Quiz #1: Will the assertion below ever fail?</title>
        <description>&lt;h2 id=&quot;welcome-to-formal-quizes&quot;&gt;Welcome to Formal Quizes!&lt;/h2&gt;

&lt;p&gt;Since I have enjoyed sharing &lt;a href=&quot;https://twitter.com/hashtag/FVQuiz&quot;&gt;formal verification quizzes on
twitter&lt;/a&gt;, and since they’ve been such
a well received part of the &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;feed&lt;/a&gt;,
I thought I’d add these same quizzes to the blog.&lt;/p&gt;

&lt;p&gt;The spirit of these quizes is intended to be fun.  They are drawn from the
slides for my &lt;a href=&quot;/tutorial/#training&quot;&gt;formal verification
course&lt;/a&gt;.  The format limits the quiz
questions to a single slide.  The up side is that the quizzes tend to be
simpler.  The downside is that there’s a challenge required on my side to
make them understandable and complete as well.  (I don’t always succeed at
this.)&lt;/p&gt;

&lt;p&gt;Take as much time on each quiz as you would like.  I encourage you to
create small designs to try each concept using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; and to see what
happens when possible.  I also anticipate posting the answer to the quizzes
within days of the quiz itself.  Once posted, the image containing the quiz
will become a web link, and there will also be a link underneath pointing to
the answer page.  By the time most people come across any particular quiz,
the chances will be that the answer is already posted.&lt;/p&gt;

&lt;p&gt;Be aware, I enjoy posting trick questions!&lt;/p&gt;

&lt;p&gt;You may also notice that I’ve added two new links to the navigation bar.
The first link will be to an &lt;a href=&quot;/quiz/quizzes.html&quot;&gt;index page&lt;/a&gt;,
linking to all the various quiz posts.  The other is to a
&lt;a href=&quot;https://www.reddit.com/r/ZipCPU&quot;&gt;Reddit feed&lt;/a&gt; I’ve created to go with the
blog itself.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/08/03/quiz01.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/08/03/quiz01.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Just how long does a formal proof take to finish?</title>
        <description>&lt;p&gt;Formal methods are exhaustive in their nature.  That’s what makes them
special.  That’s why I like using them over &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_testing&quot;&gt;constrained random simulation
based testing&lt;/a&gt;.  If there’s
ever a way a property within your design can be made to fail,
formal methods can find it.&lt;/p&gt;

&lt;p&gt;That’s the good news.&lt;/p&gt;

&lt;p&gt;The bad news is that because formal methods are exhaustive they can take
exponential time to complete.  The bigger and more complex your design is,
the longer the solver will take to prove a property.  Eventually, there
comes a complexity where the property becomes essentially impossible to prove.&lt;/p&gt;

&lt;p&gt;In other words, the answer to “how long does the formal solver take to
return an answer?” can be anywhere from trivial to infinite depending upon
the problem.&lt;/p&gt;

&lt;p&gt;That’s not helpful.  Perhaps some statistics might be more useful.&lt;/p&gt;

&lt;h2 id=&quot;looking-at-some-statistics&quot;&gt;Looking at some statistics&lt;/h2&gt;

&lt;p&gt;I’ve now been doing formal verification for almost two years, ever since my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;first humbling
experience&lt;/a&gt;.  Over the
course of that time, I’ve kept the output directories created by
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; for
nearly 900 of the proofs that I’ve completed.  This includes both halves of any
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
proofs, as well as quite a few cover proofs.  With a bit of work, these
proof durations can be organized into an approximate &lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;cumulated distribution
function&lt;/a&gt;,
such as Fig. 1 shows.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Proof duration CDF&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/proof-cdf.png&quot;&gt;&lt;img src=&quot;/img/tweets/proof-cdf.png&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this chart, the X axis is the number of seconds a given proof took to
complete, whereas the Y axis is the percentage of all of the proofs that
took less than that X amount of time.  By plotting this on a semilog scale in
X, you can understand some of the realities of formal verification.  For
example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;82% of all of the proofs I’ve done have taken less than &lt;strong&gt;one&lt;/strong&gt; minute&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;87% of all of the proofs I’ve done have taken less than &lt;strong&gt;two&lt;/strong&gt; minutes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;93% of all of the proofs I’ve done have taken less than &lt;strong&gt;five&lt;/strong&gt; minutes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;95% of all of the proofs I’ve done have taken less than &lt;strong&gt;ten&lt;/strong&gt; minutes&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every now and again, I’ll post about how long a given proof takes.  For example,
I’ve had proofs require a couple of hours to return.  A classic example
would be some of the proofs associated with verifying my &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;open source
generated FFT cores&lt;/a&gt;.
Such proofs are the exception rather than the norm, however, and typically
when I write about such extreme times its because I wasn’t expecting the
proof to take that long to accomplish.&lt;/p&gt;

&lt;p&gt;The reality is that I don’t normally notice how long a proof takes.  Why not?
Because formal verification, in my experience, has typically been faster than
simulation.  It’s typically faster than running a design through synthesis or
place-and-route.  This follows from the fact that 95% of all of these proofs
were accomplished in less than 10 minutes, whereas it often takes longer than
10 minutes with Vivado to synthesize a design.&lt;/p&gt;

&lt;!-- &lt;TABLE align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;CAPTION&gt;Fig 2. Relative durations of EDA tasks&lt;/CAPTION&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG SRC=&quot;/img/eda-task-duration.png&quot; ALT=&quot;&quot; WIDTH=&quot;480&quot;&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt; --&gt;

&lt;h2 id=&quot;how-do-i-keep-my-proofs-that-short&quot;&gt;How do I keep my proofs that short?&lt;/h2&gt;

&lt;p&gt;This is a really good question, and there’s typically several parts to the
answer.&lt;/p&gt;

&lt;p&gt;In general, the amount of time a proof requires is a function of the number
of items that need to be checked, and the number of steps they need to be
checked in.  Of these two, I usually have the most control over the number
of steps required by the proof.  SymbiYosys calls this the “depth” of the proof.&lt;/p&gt;

&lt;p&gt;How shall this depth be set?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;For many simple peripheral cores, the depth can be set initially to however
long it takes to perform the operation the core is required to perform.&lt;/p&gt;

    &lt;p&gt;This can often be determined by running a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; check, and seeing how
long it takes the core to complete an operation and to return to idle.&lt;/p&gt;

    &lt;p&gt;This doesn’t work for all cores, however, but it is a fairly good start.
It does apply nicely to most SPI cores, as well as those that are similar
such as my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Management_Data_Input/Output&quot;&gt;MDIO&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/rtl/enetctrl.v&quot;&gt;controller&lt;/a&gt;,
since they all have fixed transaction lengths.  It can also apply to
CPUs, where the depth is determined by the time it takes for a single
instruction to go from when it is issued all the way to when it is retired.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For most of my proofs, I start with a depth set to default, 20 steps.  If
I struggle inexplicably at that depth, I may set it to longer as a result of
a basic knee-jerk reaction.&lt;/p&gt;

    &lt;p&gt;The fact is, when you first start out with a formal proof, the solver can
typically find assertion failures very quickly.  It’s only as you slowly
remove these initial failures that the proof starts to take the solver
more and more time to return an answer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the solver takes too long at a depth of 20, I’ll often shorten the depth.&lt;/p&gt;

    &lt;p&gt;This was the case with my &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI
crossbar&lt;/a&gt;.  &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI is such a
complicated protocol&lt;/a&gt;,
I couldn’t let the depth get too long at all.  In the end, I fixed this
depth to four time-steps.  It was the shortest depth I could find where
all of the various constraints could be evaluated properly in the time
interval.&lt;/p&gt;

    &lt;p&gt;One of the nice features of Yosys’ SMT solver is that it reports back
periodic status messages showing how long each step has taken.  This helps
you know where the “limit” is.  For example, if the first five steps take
less than 6 seconds each, but the six step has taken over an hour and it
hasn’t yet completed, you may need to drop the depth to five and just work
with it there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The trick to setting the depth is
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;If the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;inductive&lt;/a&gt;
step ever passes, even if I don’t have all of the properties
I want in place yet, I’ll set the depth to whatever it took to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
This keeps the proof as short as it will ever be.&lt;/p&gt;

    &lt;p&gt;For example, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can be formally verified
in &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/bench/formal/zipcpu.sby&quot;&gt;between 10 and 14 steps depending upon the configuration&lt;/a&gt;.  Given that
each step is longer than the step before hand, it makes sense to keep the
solver from doing too much.  Those configurations that can be
solved in 10 steps I set to be solved in 10 steps.  Those that cannot, get
set to however many steps they need.  While this won’t speed up the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;inductive&lt;/a&gt;
step at all, it often shortens the associated basecase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you know your depth is too shallow?&lt;/p&gt;

    &lt;p&gt;I’ve had several proofs that have required depths of much longer than
ten or twenty steps.  Examples include my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;serial port receiver (an
asynchronous proof)&lt;/a&gt; at 110 clocks,
my &lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/bench/dev/wbhyperram.sby&quot;&gt;hyperram controller&lt;/a&gt; at 40 clocks,
and several of the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/bench/formal/qflexpress.sby&quot;&gt;slower configurations&lt;/a&gt; of my &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;universal flash
controller&lt;/a&gt; ranging
from 26 steps all the way up to 610.
Cover proofs tend to be worse than assertion based proofs, with my
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;serial port receiver&lt;/a&gt; requiring &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/bench/formal/rxuartlite.sby&quot;&gt;720 steps&lt;/a&gt;,
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Management_Data_Input/Output&quot;&gt;MDIO&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/enet/bench/formal/enetctrl.sby&quot;&gt;controller&lt;/a&gt; for my ethernet implementations requiring 258 steps.&lt;/p&gt;

    &lt;p&gt;The easy way to know that a proof &lt;em&gt;isn’t&lt;/em&gt; too shallow is to work with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
until it passes as we just discussed above.  In the case of cover, covering
intermediate states will help to reveal just how long the trace needs to be.&lt;/p&gt;

    &lt;p&gt;Knowing if an
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt; proof
is too shallow requires understanding your core, and the trace produced
during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As I teach in my &lt;a href=&quot;/tutorial#training&quot;&gt;formal methods
course&lt;/a&gt;, there are three kinds of 
assertion failures during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;:
1) those that fail at the last time step, 2) those that fail the time step
before that, and 3) those whose failure can be tracked to earlier in the
trace.  Typically, in the third case, an assertion is sufficient to bring
the design back in line.  If the data necessary to make the assertion isn’t
part of the trace, such as if it’s dependent upon something that happened
earlier, then you either need to add a register to capture the dependency
or you need to increase the depth of the trace.&lt;/p&gt;

    &lt;p&gt;The reason that my serial port receive proof is so long is that I had a
criteria that the clock in the serial port transmitter would never be off
by more than half a baud interval at the end of the transmission.  Measuring
how far that would be at every time step required a multiplication
function–something that doesn’t work well with formal methods.  As a result,
I was forced to only checking this value at the end of every baud interval,
and using power-of-two properties.  This fixed the induction length to at
least one baud interval in length.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some problems are just too hard&lt;/p&gt;

    &lt;p&gt;Two classic examples are multiplies and encryption.  Of the two, formally
verifying designs with multipliers within them is an area of active research.
I wouldn’t be surprised to see some breakthroughs in the near future.
Formally verifying designs with encryption within them should be and
should remain a hard problem, otherwise the encryption isn’t worth its salt.&lt;/p&gt;

    &lt;p&gt;I like to get around this problem by replacing the internal multiplier or
encryption result with a solver chosen value.  This can work for DSP
problems, making it possible to still apply formal methods to DSP
algorithms although the result is often not quite as satisfying.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-beginner-mistake&quot;&gt;The Beginner Mistake&lt;/h2&gt;

&lt;p&gt;The big mistake I’ve seen beginners make is to take a large and complex core,
often one with several component files having no formal properties, and then
try to formally verify that a single property holds for all time.&lt;/p&gt;

&lt;p&gt;This is a recipe for both frustration and failure.&lt;/p&gt;

&lt;p&gt;A classic example would be a user who finds a CPU core on
&lt;a href=&quot;https://opencores.org&quot;&gt;opencores&lt;/a&gt;, knows nothing about it, but still wants
to know if an assertion about it will pass.&lt;/p&gt;

&lt;p&gt;Instead, start your formal verification work at the &lt;em&gt;bottom&lt;/em&gt; level of a design
with what I often call “leaf modules”–modules that have no submodules beneath
them.  Formal verification, and particularly verification using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
is &lt;em&gt;not&lt;/em&gt; a &lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot;&gt;black box&lt;/a&gt;
exercise.  Passing an
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
test requires an intimate knowledge of the design in question, and several
assertions within the design.  Building those assertions from the bottom up
makes it easier to get a property to pass later at the top level.&lt;/p&gt;

&lt;p&gt;I should mention that there are several solvers that do not require this
intimate internal knowledge, such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;abc pdr&lt;/code&gt; solver or either of
the &lt;a href=&quot;https://en.wikipedia.org/wiki/And-inverter_graph&quot;&gt;aiger&lt;/a&gt;
solvers &lt;code class=&quot;highlighter-rouge&quot;&gt;aiger avy&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;aiger suprove&lt;/code&gt;, and so I’ve seen beginners
attempt to use these solvers for this purpose as well.  Sadly, these solvers
are not well suited for such large designs, and they tend not to provide any
progress feedback along the way.  The result tends to be user complaints that
the solver hangs or crashes, when in reality the problem was that the user
was expecting too much from the tool.&lt;/p&gt;

&lt;p&gt;This is also one of those reasons why formal verification works so well at
the design stage, rather than as a separate verification stage done by a
new team of engineers.  It is the designer who knows how to constrain the
values within his own design–not the verification engineer.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Despite its reputation for computational complexity, hardware formal
verification tends to be very fast in practice today.  It’s often faster
than both simulation and synthesis, allowing a designer to iterate on his
design faster than he would with either of these other approaches.&lt;/p&gt;

&lt;p&gt;If you’ve never tried formal verification, then let me invite you to work
through my &lt;a href=&quot;/tutorial&quot;&gt;beginning verilog tutorial&lt;/a&gt;.  Once
you get past the second lesson, every design will involve formally verifying
that it works before ever trying to implement the design on actual
hardware.  Indeed, the background you will need for more complicated projects
is to be gained by working on simpler projects–as it is in many other fields.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;But the day of the Lord will come as a thief in the night; in the which the heavens shall pass away with a great noise, and the elements shall melt with fervent heat, the earth also and the works that are therein shall be burned up. (2Pet 3:10)&lt;/em&gt;</description>
        <pubDate>Sat, 03 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2019/08/03/proof-duration.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/08/03/proof-duration.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Lessons learned while building crossbar interconnects</title>
        <description>&lt;p&gt;Okay, I’ll admit it, I’ve never used
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
for anything other than accessing
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt; memory.  Even for that
I tend to use a &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone (WB) to AXI
bridge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have, however, looked for posts on both
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;’s and now
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s forums
that I might be able to answer.  It seems that
Xilinx’s
answer to most design problems is to create either a
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze CPU&lt;/a&gt; or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM CPU&lt;/a&gt; (within a Zynq),
that you then connect to the rest of your design using their
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1.  Xilinx Tech Support&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/xiltech-support.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s interconnect&lt;/a&gt;
is a general &lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;cross bar switch&lt;/a&gt;.
It “connects one or more &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
memory-mapped master devices to one or more memory-mapped slave devices.”
In general, a &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar switch&lt;/a&gt;
allows any number of bus masters to access any number of bus slaves with the
(general) rule that only one master can talk to any given slave at a time.&lt;/p&gt;

&lt;p&gt;This is all fine and dandy, but what happens when you want to simulate a design
that has an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; within it?  &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s
crossbar&lt;/a&gt;
is proprietary.  It won’t run in
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.
Of course, &lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;their
CPU&lt;/a&gt;
is also proprietary, but we’ll leave that as a topic for a different discussion.&lt;/p&gt;

&lt;p&gt;I recently had the opportunity to investigate how to build a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar switch&lt;/a&gt;
of my own.  I built three of them: a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone
crossbar&lt;/a&gt;, an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;,
and a full-up &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI4
crossbar&lt;/a&gt;.  Today,
I thought I might share several of the more important points of these designs,
and perhaps even some lessons I learned while building them.&lt;/p&gt;

&lt;h2 id=&quot;crossbars-and-autofpga&quot;&gt;Crossbars and AutoFPGA&lt;/h2&gt;

&lt;p&gt;My own interest in building a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
stems from my work with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; takes
a series of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components, and connects them all together–much like either Vivado or Quartus
does but without the graphical user interface.  Each component is given its own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;, a set of
dedicated &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
connection wires, and then connected to a user-selected
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This works great … when it works.&lt;/p&gt;

&lt;p&gt;Sadly, I’ve had to work through some times when it hasn’t worked for me.
Often, I’ve mis-connected a slave to the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;–perhaps not ANDing the address selection wire with the strobe, perhaps swapping
the stall and acknowledgment signals, whatever it is I’ve often ended up needing
to debug a piece of a design where the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt; core
meets some “&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;verified-by-simulation&lt;/a&gt;”
logic.&lt;/p&gt;

&lt;p&gt;My ultimate goal is to avoid these problems by &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verifying&lt;/a&gt;
all of the parts and pieces of any design I create, to include those parts
that &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generates.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2.  Crossing slaves mid-request&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/double-ack-bug.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of my first problems is that &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;my favorite interconnect
design&lt;/a&gt;,
the same basic interconnect
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
builds, has a couple of limitations.  First, it can only handle a single bus
master at a time.  Multiple bus masters need to go through an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
first
before they can get access to the bus.  We’ll come back to this again
in a moment.  Second, &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;that
interconnect&lt;/a&gt;
offers no protection against the case where a
bus master
crosses from one slave to another during a single bus interaction, as Fig. 2
illustrates on the left.  In this illustration, the first bus slave responds
two cycles after the strobe while the second slave responds one cycle later.
The responses might end up colliding, as shown in the figure, or even out of
order.  Worse, the third problem has to do with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.
If a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
is generated as I have things set up, the
bus master
will never know &lt;em&gt;which&lt;/em&gt; request generated the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
and which request(s) have completed.&lt;/p&gt;

&lt;p&gt;I was curious to know if I could do better.&lt;/p&gt;

&lt;p&gt;At least, that was my first reason for being interested.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. A Formal Property File can be the easiest way to start with formal verification&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/fpropfile.png&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Eventually, a second reason came into play as well:
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;Interconnects&lt;/a&gt;,
like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
bridges in general, make ideal tests of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal bus property
files&lt;/a&gt;.
Because you need the properties for both the slave and the master, you
essentially have to verify your properties back to back.  Are the master
bus property assumptions sufficient to drive the slave?  Are the slave
bus assumptions sufficient to satisfy the master’s assertions?&lt;/p&gt;

&lt;p&gt;Finally, my last basic reason was that this
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
work was a lot of fun.  Indeed, I found them building these
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;, and particularly
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
them, to be a rather addictive challenge–even if it’s quite a time consuming
one.  Hey, we all have our hobbies, right?&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-crossbar&quot;&gt;What is a Crossbar?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;Wikipedia describes a crossbar&lt;/a&gt;
as a two-dimensional electrical structure where the source
comes in from one direction, and the outgoing connections go out a second.
While there’s &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;no picture offered currently on
wikipedia&lt;/a&gt;, I’m going to use
Fig. 4 as my attempt to capture and explain this concept.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4.  The Concept of a Crossbar Switch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/crossbar-switch.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see a set of incoming electrical connections at the top,
and a set of outgoing electrical connections on the right.  At every crossing,
there’s a switch which may be closed to create a connection between any given
master and slave combination.&lt;/p&gt;

&lt;p&gt;There’s two other things to note from this figure.  First, note that any
of the incoming signals can be connected to any of the outputs.  Second, note
that for an &lt;code class=&quot;highlighter-rouge&quot;&gt;NxN&lt;/code&gt; array, all &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; sources can be connected to a different
sink.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;Bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;
are very similar conceptually.  A series of
bus masters
are available as sources to drive one of several
bus slaves.  The biggest difference is that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt; typically have
many wires associated with them, and some of those wires are driven
with return values by the slave.  For example, a 32-bit
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; requires roughly 164
separate wires to drive the slave, whereas the slave will respond with another
50 wires returned in response.  The
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; is both much simpler, and
not nearly so full featured.  Wishbone transactions, therefore, can be
accomplished with only 106 separate wires, of which 71 are used to drive the
slave and 35 are returned in response.&lt;/p&gt;

&lt;p&gt;As for how you might use one of these, consider as an example that the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;typical ZipCPU design&lt;/a&gt;
that has at least four separate
bus masters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;instruction
fetch&lt;/a&gt; unit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;data memory port&lt;/a&gt;, handling any load or store instructions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt; data transfer port&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;A debug port&lt;/a&gt;,
through which the CPU can be &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;stopped, stepped, or reset and its registers
may be read&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of my
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; designs have more
masters as well, for example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;A Video display controller&lt;/a&gt;
that needs to read from memory in order to create a pixel stream&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;A spectrogram raster, that writes FFT results from captured data to the
memory&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As I’ve currently built most of my &lt;a href=&quot;/about/zipcpu.md&quot;&gt;ZipCPU&lt;/a&gt;
designs, I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;2:1&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiters&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;such as this
one&lt;/a&gt;
followed by a &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1:N&lt;/code&gt; interconnect&lt;/a&gt;, as illustrated by Fig. 5.  (I did build a &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/master/rtl/wbquadarbiter.v&quot;&gt;4:1
arbiter&lt;/a&gt;
once, but as I recall I’ve yet to use it.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. The ZBasic bus structure only allows a single master to ever drive the bus&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/zipcpu-nocrossbar.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sadly, that means that any
bus master
can starve another by simply hogging the port.&lt;/p&gt;

&lt;p&gt;To see how this might happen, consider an example from one of my first FPGA
projects what it would take to drive a video stream from a &lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users/&quot;&gt;Basys3
board&lt;/a&gt;.
The &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video driver&lt;/a&gt; needed access
to the &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; to read
(and then decompress) pixels so that they could be displayed on
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;VGA&lt;/a&gt; output.
(There wasn’t enough RAM on or off chip for a proper screen buffer.)  Now
imagine that at the same time, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
wants to &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;read
instructions&lt;/a&gt; from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;: the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video controller&lt;/a&gt; needs the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;, and &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; needs the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
By going through an N:1
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
first, or rather several &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;2:1
arbiters&lt;/a&gt;
as I had actually implemented it, any time
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
request would get through the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbpriarbiter.v&quot;&gt;arbiter&lt;/a&gt;
it would then force any
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
requests to stall.  Worse, they might need to wait so long that the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
can’t read its pixel memory fast enough to display it.&lt;/p&gt;

&lt;p&gt;This particular design was from before
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
The solution I eventually chose, shown in Fig. 6 below, was to place the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
memory controller &lt;em&gt;after&lt;/em&gt; the main
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
in order to disconnect &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; from
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video&lt;/a&gt;
memory if it didn’t need it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Placing the arbiter after the interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/flash-v-video.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, this will only ever work as long as the
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video controller&lt;/a&gt;
only ever needs access to a single peripheral–in this case the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If, on the other hand,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
could access the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
at the same time the video controller could access
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;, then you have a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;—or at least that’s the
idea.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;my new flash
controller&lt;/a&gt;,
this might no longer be an issue–but it certainly
was back then with the older controller.  On the other hand, with the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;old flash controller&lt;/a&gt;,
I could only ever control a 640x480 screen–with the newer
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash controller&lt;/a&gt;
I might be able to handle some better screen resolutions if I ever returned
to the project.&lt;/p&gt;

&lt;h2 id=&quot;the-key-an-nxm-arbiter&quot;&gt;The key: an NxM Arbiter&lt;/h2&gt;

&lt;p&gt;When building a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;, everything
comes down to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
has &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; ports for &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; masters, and &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; ports for &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; slaves.  Somehow, then,
a slave needs to get its data from one of the masters.  But which master?
That’s the task of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;arbiter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are several rules to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt; in a
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; The bus protocol must be obeyed.&lt;/p&gt;

    &lt;p&gt;This is easily checked: all it requires is attaching a set of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal bus
properties&lt;/a&gt;
to every incoming or outgoing connection.  Since I have bus properties for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;, and even
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;,
I could easily verify that each of my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt;
maintained these properties for each connection.&lt;/p&gt;

    &lt;p&gt;Having &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt; identical master connections and &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; identical slave connections
naturally lent itself to a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops within the design.  Normally I
avoid &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops within digital design like the plague.  In this case, there
was no way around it if I wanted the interconnects to have a programmable
number of master and slave connections.&lt;/p&gt;

    &lt;p&gt;To help deal with this, I used either the &lt;code class=&quot;highlighter-rouge&quot;&gt;genvar&lt;/code&gt; index &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; or equivalently
the integer index &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt; to refer to a connection to a bus master, while I
used either &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; to refer to a connection to a bus slave.  I’ll
refer to these indexes often later, so remember &lt;code class=&quot;highlighter-rouge&quot;&gt;NxM&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; will reference
one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; connections from the &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt;
bus masters,
whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; references one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; outgoing connections to
bus slaves.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7.  One master connection, one slave connection&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/arbiter-rule-1.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; No more than one master can be connected to any particular slave.&lt;/p&gt;

    &lt;p&gt;I used a 2-dimensional &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; variable to help express this.  This is
most easily understood by examining Fig. 7 on the right.  Imagine that
each switch’s status was represented by a single bit in this array.
In my terminology, &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N]&lt;/code&gt; represents all of the connections associated
with all of the slaves that might connect to master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, shown in Fig. 7
as a vertical bar.  Fig. 7 shows what would happen if &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[0][2]&lt;/code&gt; were
set, connecting master numbered &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to slave number &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Using this 2-D &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; array, I could easily express this property that
no more than one master could ever be connected to more than one slave as
&lt;code class=&quot;highlighter-rouge&quot;&gt;assert($onehot0(grant[iN]));&lt;/code&gt; for every value of the master index, &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;In the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt; I’ve built,
whether the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;full AXI4
interconnect&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite interconnect&lt;/a&gt;,
I used two grant variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;wgrant&lt;/code&gt; for writes and &lt;code class=&quot;highlighter-rouge&quot;&gt;rgrant&lt;/code&gt; for reads,
since the &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
protocol allows both writes and reads at the same time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px;&quot;&gt;&lt;caption&gt;Fig 8. Quick loop up functions, master&#39;s perspective&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/mgrant.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This wasn’t enough to keep the &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;synthesized logic simple and low
   cost&lt;/a&gt;,
   so I created two other structures.  The first of these,  &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt;, was
   true if a particular master had been granted access to a slave–any slave.
   Essentially, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was equivalent to the “OR” of all of the elements
   in the grant array for a particular master, &lt;code class=&quot;highlighter-rouge&quot;&gt;|grant[iN]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second structure was &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[iN]&lt;/code&gt;, which contained the index of the slave
   that master &lt;code class=&quot;highlighter-rouge&quot;&gt;iN&lt;/code&gt; was connected to.  Hence, if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was true,
   then it must also be true that &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[iN][mindex[iN]]&lt;/code&gt; was also true.
   Perhaps you may recall &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;the post discussing why this approach was so
   necessary&lt;/a&gt; from
   some time ago.  This index-based reference was my solution to that problem.&lt;/p&gt;

&lt;p&gt;This “solution” naturally led to another problem, what if you only have for
   example 5 slaves?  How many bits should be used for each &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex&lt;/code&gt; value?
   Well, three obviously.  However, that also meant that any time a value was
   referenced using the index, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;slave_ack[mindex[N]]&lt;/code&gt;, that a full 8
   values needed to be defined–even if I knew that only the lower 5 would be
   used.&lt;/p&gt;

&lt;p&gt;All of these various data structures are tightly connected.  As I mentioned
   above, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN] |-&amp;gt; (grant[iN] == 1&amp;lt;&amp;lt; mindex[iN])&lt;/code&gt;.  There was also the
   corollary, that &lt;code class=&quot;highlighter-rouge&quot;&gt;!mgrant[iN] |-&amp;gt; (grant[iN] == 0)&lt;/code&gt;.  This helped to make
   certain that any logic I created kept these values properly synchronized.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Quick loop up functions, slave&#39;s perspective&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/sgrant.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; No more than one slave can be connected to any master.  Any unconnected
slave should neither receive requests nor send replies.&lt;/p&gt;

    &lt;p&gt;To capture this, I created two new values: &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt;, which would be true
if slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; had been assigned to a master.  Remember how &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[iN]&lt;/code&gt; was
true if any switch in the columns of Fig. 2 above was closed?  &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt;
is the same thing, only acting across the rows.  &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[iM]&lt;/code&gt; was the
slave side corollary for the master index, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[iN]&lt;/code&gt;, so that any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt; was true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[sindex[iM]][iM]&lt;/code&gt; must also be true.
(That’s what the &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; is intending to express in Fig. 9–evaluated
across all masters.  No, this is not valid syntax in any language I am
familiar with, but it fit in the figure.)&lt;/p&gt;

    &lt;p&gt;Put together, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N][M]&lt;/code&gt; was true, then master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; was connected
to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.  In that case, both &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant[N]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[M]&lt;/code&gt; would be true.
Further, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[N]&lt;/code&gt; would be &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[M]&lt;/code&gt; would be &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Yes, keeping track of all of these values, &lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sindex&lt;/code&gt; took a lot of accounting.  As I mentioned above,
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
really helped.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 10. Pseudo-slaves to handle bus errors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/buserr.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; If a master requests an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
that doesn’t belong to any slave, the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; must send a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
in response.  Further, it must not send the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
response until any other valid responses have been returned, so enforcing
a strict ordering of operations on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;–something I
didn’t have before.&lt;/p&gt;

    &lt;p&gt;This necessitated the creation of a special set of slaves, internal to the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;, which would
respond to any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.  That meant
that the slave index, &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; wouldn’t just go from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;NS-1&lt;/code&gt;, but rather
to &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; in order to reference the “no-peripheral mapped to this address”
slave.  You can see these extra slaves illustrated in Fig. 10 on the left.&lt;/p&gt;

    &lt;p&gt;This special slave ID was unusual, since every master could connect to
the error slave &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; at the same time.  It’s as though there really were
&lt;code class=&quot;highlighter-rouge&quot;&gt;NS+NM&lt;/code&gt; slaves, such as are shown in Fig. 10, rather than just the &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;
slaves connected to the right of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;.  That way two
masters can be receiving &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
responses at the same time without needing to wait for access to the special
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; slave.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
can’t change the grant for a given master while that master is waiting
for a response from a slave.&lt;/p&gt;

    &lt;p&gt;This requires counters.  Every request accepted into the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
needs to increase that counter by one, whereas every response needs to
decrease the counter by one.  Once the counter reaches zero, the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
can tear down a given connection and set up a new one.&lt;/p&gt;

    &lt;p&gt;Checking for whether or not the counter is empty is quite straightforward,
and I kept a set of flags I called &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N]&lt;/code&gt;, one for every master, to
indicate that there were no outstanding returns pending for that master.&lt;/p&gt;

    &lt;p&gt;Before we leave this topic, though, let me ask: have you thought
about what would happen when the counter overflows?  I think we can all
agree that would be bad, but how should it be prevented?&lt;/p&gt;

    &lt;p&gt;The easy answer would be to just add more bits to the counter to prevent
this from ever happening in the first place.  I mean, realistically, what’s
the likelihood that that a 32-bit counter of outstanding transactions would
ever overflow?  How about a 64-bit counter overflowing?&lt;/p&gt;

    &lt;p&gt;I chose a different answer.  I chose instead to keep track of when the
counter was full, which I kept track of in another array &lt;code class=&quot;highlighter-rouge&quot;&gt;mfull[N]&lt;/code&gt;,  and
to stall a given master if accepting another
transaction would cause the counter to overflow.  This wasn’t as easy as it
sounds, since it took a clock to stop things before I made the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt; external.
That meant checking for when the counter was near overflow, and stalling if
there was already something in the pipeline at that time.  Once I made the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt; external,
this all got much easier.&lt;/p&gt;

    &lt;p&gt;There’s also an unfortunate consequence of this rule: if ever a slave
misbehaves and doesn’t return a response, both the master granted access
to that slave and any other master attempting to access that slave will be
locked until a design reset.  Perhaps you’ll remember when I discussed having
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;that problem in a DE-10 Nano
board&lt;/a&gt;.  Finding a
bug is a challenge when the only way to get the board to respond to you
again is to reset it knowing that doing so will wipe away the information
you need to find the bug.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. A Broken slave can break the interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/broken-slave.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;(&lt;strong&gt;Implementation Option&lt;/strong&gt;:) A bus
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; may generate an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
if ever a slave doesn’t respond to a request within a given amount of time.&lt;/p&gt;

    &lt;p&gt;This follows from some ugly lessons I’ve had in the past when building
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components.  Because I use a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;bus based
“scope”&lt;/a&gt;
to debug my design, if ever a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component didn’t respond to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
the master might get stuck waiting for a response–and so I’d never be able
to access my “scope” to know what was going wrong.&lt;/p&gt;

    &lt;p&gt;To deal with this, every
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
structure I’ve built includes a counter with a timeout.  That way, if an
errant slave refused to respond to a request (this was pretty common
before I started working with
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;),
the design wouldn’t freeze and I could still use the design to discover
what the fault was.&lt;/p&gt;

    &lt;p&gt;Sadly, the way the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
protocol&lt;/a&gt; is structured,
this is really hard to do.  Eventually, I created &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;a separate AXI bus
component&lt;/a&gt;
that I could use to bridge between the “trusted” bus master side and any
untrusted slave, returning a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
on any violation of the bus protocol by the slave.  Unfortunately, as
currently built, this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt; also
limits the throughput of the bus–although not nearly as bad as &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s
demo implementations do&lt;/a&gt;.
Perhaps I’ll be able to come back later to fix this.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Basic Processing Steps&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/cbar-channel.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rule:&lt;/strong&gt; Every connection that can stall needs to be connected to a &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;, as shown in
Fig. 12 above.  All of my
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; have an incoming
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;, while
only the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
and &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; have return channel
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s as well.&lt;/p&gt;

    &lt;p&gt;Sadly, these sub-module &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s weren’t part of
my initial design approach.  In hind sight, they should’ve been.&lt;/p&gt;

    &lt;p&gt;Initially, I instantiated every one of the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffers&lt;/a&gt;
by hand within each
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
I created.  I then verified each
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
from the standpoint of the external connections.  This threw all of my
counters off, since I had to create an equation mapping the number of
outstanding transactions from the perspective of each master, to the
number of outstanding transactions from the perspective of each slave,
and the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
got in the middle of that.  If I failed to do so, the design would fail
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This book-keeping was quite painful.&lt;/p&gt;

    &lt;p&gt;On the other hand, once I created and verified a separate 
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
module, I went back and tore apart all of those painful
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties and rewrote them for simplicity.  Now, when verifying the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;,
the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s have been
removed and replaced with simple pass-through logic.  The proof, I’ve
judged, is just as valid–since the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s have
already been verified separately.&lt;/p&gt;

    &lt;p&gt;This almost worked, too.  There was one problem: The
bus abort capability I’ve written into all of my
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; implementations.
Eventually, I convinced myself with a bit of bounded model checking that
this was working, although I haven’t come back to simulate these
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt;
(yet) to see how they work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structures have more or less requirements than others.  For
example, &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;the way I implement
WB&lt;/a&gt;, I insist that the
cycle line be dropped following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
This then implements a bus &lt;em&gt;abort&lt;/em&gt;, forcing any pending upstream
requests to be aborted and leaving any pending transactions in an uncertain
state.  Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; doesn’t support any
aborts.  However, &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
also has &lt;em&gt;two&lt;/em&gt; write channels that need to be synchronized: an
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; write address
channel and an &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
write data channel–something
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; doesn’t
need to deal with.  The
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI arbiter&lt;/a&gt;,
whether &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;full&lt;/a&gt;
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;lite&lt;/a&gt;,
needs to stall any write data channels in order to wait for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
to be given before it knows what slave to connect the write data channel to.&lt;/p&gt;

&lt;p&gt;Still, most of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
code is the same across all three of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.  Care to take a peek?&lt;/p&gt;

&lt;h2 id=&quot;examining-the-arbitration-code&quot;&gt;Examining the Arbitration Code&lt;/h2&gt;

&lt;p&gt;Let’s look at the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone
crossbar&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/wbxbar.v#L356-L471&quot;&gt;arbiter&lt;/a&gt;
and see how it’s done.  Both the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/axixbar.v#L754-L981&quot;&gt;AXI&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/axilxbar.v#L558-L799&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s
have similar structures and logic, although in those cases the logic is
duplicated in order to handle the separate read and write channels.&lt;/p&gt;

&lt;p&gt;The first step is to find out what master is requesting which slave.  Since this
code is common to all three
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;s,
it has been separated &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;into its own
file, &lt;code class=&quot;highlighter-rouge&quot;&gt;addrdecode.v&lt;/code&gt;&lt;/a&gt;.
The entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
decode operation is driven by the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/7da3df3622404b6c0d90de1191ba0acf6af60310/rtl/addrdecode.v#L44-L55&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ADDR&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_MASK&lt;/code&gt; parameters&lt;/a&gt;.
These two parameters are each one-dimensional implementations of what
should properly be a 2d array.  There’s one entry of &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; (address width) bits
per slave.  In order to match an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;,
the master’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
request must match the slave’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
in &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ADDR&lt;/code&gt; for every bit where &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_MASK&lt;/code&gt; is true.&lt;/p&gt;

&lt;p&gt;We’ll start first with the &lt;code class=&quot;highlighter-rouge&quot;&gt;none_sel&lt;/code&gt; flag though.  This flag is used to 
indicate that the requested
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
doesn’t match any slave’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
range.  To do this, we’ll run a check through a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, checking
whether or not the requested
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
matches any of the possible
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
requests.  We’ll start by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;none_sel&lt;/code&gt; high if ever there’s a valid
request, indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt;, and then clear it if any slave is found who’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; matches.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Let&#39;s assume nothing&#39;s been selected, and then check
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to prove ourselves wrong.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Note that none_sel will be considered an error condition
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// in the follow-on processing.  Therefore it&#39;s important
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to clear it if no request is pending.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then populate a &lt;code class=&quot;highlighter-rouge&quot;&gt;request[M]&lt;/code&gt; array structure, so that
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[M]&lt;/code&gt; will be true if and only if the address of the transaction
we are examining is requesting access to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// request[NS] indicates a request forr a non-existent
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// slave.  A request that should (eventually) return a bus
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// error
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none_sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all of the hard address decoding work.  The rest of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
just handles how these values are to be returned–whether they are to be
registered, or held at zero when nothing is requested, or both.&lt;/p&gt;

&lt;p&gt;Once the addresses have been decoded to determine which slave is requested,
the next step is to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitrate&lt;/a&gt;
among potentially multiple masters all wanting access to the same slave.
For my implementations, I chose to do
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
on a priority basis.  In other words, if a
master &lt;code class=&quot;highlighter-rouge&quot;&gt;N2&lt;/code&gt; requests a slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, the request will not be granted if some
other higher priority master, we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;N1&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;N1 &amp;lt; N2&lt;/code&gt;, has also
requested the same slave at the same time.  The array of &lt;code class=&quot;highlighter-rouge&quot;&gt;requested&lt;/code&gt; values,
defined below, captures this idea.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;requested[N][M]&lt;/code&gt; is true, then some
other master with a higher priority than master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has requested access to
slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// For each slave
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// This slave has been requested if a prior
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// master has requested it
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// This includes any master before the last one
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// As well as if the last master has requested
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// this slave.  Only count this request, though,
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// if this master could act upon it.
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that I cross-checked the request against those masters that could
properly respond to it.  That way if a master &lt;code class=&quot;highlighter-rouge&quot;&gt;N1&lt;/code&gt; requests slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M1&lt;/code&gt;,
but hasn’t yet finished getting the responses from slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M2&lt;/code&gt; that it is
already connected to (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N1]&lt;/code&gt; is clear), then a lower priority
master such as &lt;code class=&quot;highlighter-rouge&quot;&gt;N2&lt;/code&gt; will not be prohibited from connecting to &lt;code class=&quot;highlighter-rouge&quot;&gt;M1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have our address decoding and basic book-keeping out of the way,
we can look into what the actual
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
requires.  In this design,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbitration&lt;/a&gt;
is done on a master by master basis using a variety of different
variables, some of which I’ve already highlighted and defined above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Arbitrate among masters to determine who gets to access a given
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// channel
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARBITRATE_REQUESTS&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// This is done using a couple of variables.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// request[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is true if master N is requesting to access slave
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	M.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// requested[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if some other master, prior to N, has requested
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	channel M.  This creates a basic priority arbiter,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	such that lower numbered masters get access before
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	a greater numbered master
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// grant[N][M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if a grant has been made for master N to access
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	slave channel M
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// mgrant[N]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if master N has been granted access to some slave
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	channel, any channel.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// mindex[N]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is the number of the slave channel that master
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	N has been given access to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sgrant[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	True if there exists some master, N, that has been
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 	granted access to this slave, hence grant[N][M] must
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	also be true
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sindex[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	This is the index of the master that has access to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	slave M, assuming sgrant[M].  Hence, if sgrant[M]
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	then grant[sindex[M]][M] must be true
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before assigning any slaves to a given master, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
needs to know whether any current connection needs to remain connected and
unchanged.  In other words, if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has already been granted
access to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, has master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; finished its business with that slave?
For that, we’ll check if this master is making additional requests of
the same slave that it has already been assigned to.  In the simple check below,
we check every master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and every slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;.  If a grant has already been
made between master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; and slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, and a new transaction request from
that same master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is being made to the same slave slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, then we want
to maintain this connection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s only the first reason why we might wish to stay on the channel and
maintain a given grant.  The other reason why we’d want to maintain a given
grant is if we are still expecting returns from it.&lt;/p&gt;

&lt;p&gt;Handling this requires counting the number of transactions that have been
issued, minus the number of acknowledgments that have been returned.  A
variable &lt;code class=&quot;highlighter-rouge&quot;&gt;mempty[N]&lt;/code&gt;, set from the master’s perspective, contains whether
this count is zero or not.  Hence if this master has never been granted
access to a slave, or if a grant has been made but we’re still waiting
for responses, then we need to &lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to determine if the requested channel is even available.
In this case, if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is requesting channel &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt;, that is if
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[N][iM]&lt;/code&gt; is true, and no other master has currently been granted access
to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;iM&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;sgrant[iM]&lt;/code&gt; is false, and no other (prior) masters
are also requesting this channel, indicated when &lt;code class=&quot;highlighter-rouge&quot;&gt;requested[N][iM]&lt;/code&gt; is low,
then this channel is available for reassignment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgrant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// The bus error channel is always available
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all of this background work, we are now ready to make a channel grant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll only ever adjust any grant given to a particular master if that master
doesn’t need to &lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;.  In that case, the master can be granted
access to any channel that is available, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;requested_channel_is_available&lt;/code&gt;
is true.  Finally, if the master is attempting to make a request of another
channel, then we’ll release the channel grant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stay_on_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requested_channel_is_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Master is requesting access to another
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// slave, one that isn&#39;t yet available.
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// Release the grant so another master
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// can use it.
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The new variable introduced here, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[N]&lt;/code&gt;, is simply the strobe signal
output coming from the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
shown in Fig. 12.&lt;/p&gt;

&lt;p&gt;Since we’ve assigned slave number &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt; to reference the “no slave at that
address” channel, this simple logic above handles that grant as well.&lt;/p&gt;

&lt;p&gt;I should also point out, getting this right took several iterations, and a
bit of learning along the way.  Earlier versions of this logic, such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/c9821fe23abf19a077afe56a9ad61942ab599c4f/rtl/wbxbar.v#L260-L306&quot;&gt;this
one for example&lt;/a&gt;,
were horrendous to follow and/or maintain.  Getting the design to be
properly simple–that’s taken some work.&lt;/p&gt;

&lt;p&gt;From here on out, the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;’s
work is book-keeping.&lt;/p&gt;

&lt;p&gt;Well, not quite.  Did you notice how many clocks were required for that
processing?  One.  We calculated quite a few pieces of logic from &lt;code class=&quot;highlighter-rouge&quot;&gt;requested&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;stay_on_channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;requested_channel_is_available&lt;/code&gt;, all the way to
&lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mgrant&lt;/code&gt; all on the same clock cycle.  Did  you catch that?
That’s a &lt;em&gt;lot&lt;/em&gt; of processing for a single clock.  As a result, the more
slaves and the more masters get connected to this
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;,
the slower it will become.  To keep this from ballooning out of control, both
the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
and the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;address
decoder&lt;/a&gt;
have configuration options to add clock cycles in order to break up the
any paths leading into to this critical path.&lt;/p&gt;

&lt;p&gt;There’s also a big difference at this point between
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
has separate channels for write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
and write data.
According to the specification, the data in these channels may arrive at any
time and in any order.  The write data, for example, might arrive first
and then the write &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
or vice versa.  However, the data cannot be routed to the correct slave until
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; is known and has
been properly decoded.  Therefore the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
must stall the write data channel, should it arrive at the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; early, until the write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
is provided, decoded, and a grant is given.  Once a grant has been provided,
it must remain active until all of the write data associated with that grant
has been accepted.  With
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;,
that means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
must wait until the &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; signal has been received before
any write grants referencing this master-slave combination may change.  With
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;,
that also means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
must wait until the write data channel has caught up to the write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;
channel before adjusting any write grants.&lt;/p&gt;

&lt;h2 id=&quot;setting-the-slave-outputs&quot;&gt;Setting the slave outputs&lt;/h2&gt;

&lt;p&gt;At this point, all the difficult processing has been done.  All that remains
is to reap the rewards from this hard work.&lt;/p&gt;

&lt;p&gt;For example, we can now set our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
outputs to drive the various slaves.  To do this, we’ll loop through
every slave channel, and adjust the associated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
information any time the channel isn’t stalled.  Further, we’ll use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;sindex[N]&lt;/code&gt;, the slave’s index array indicating which master is associated
with this slave, to set these values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Values can change any time the slave isn&#39;t stalled
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_swe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_saddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_sdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_ssel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These particular values, however, are the easy ones: they aren’t the control
signal values, but rather the values that are qualified by the control signal
values themselves.  As a result, if the valid signal (&lt;code class=&quot;highlighter-rouge&quot;&gt;o_sstb[M]&lt;/code&gt; for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;xVALID&lt;/code&gt; for
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;)
is low, these become don’t care values.&lt;/p&gt;

&lt;p&gt;The control signals are a touch more complicated.&lt;/p&gt;

&lt;p&gt;First, in order to support a bus abort capability, we abort any transaction
following either a reset or a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
return from the slave.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step of implementing the bus abort is to drop the slave’s
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
cycle line any time the master drops his.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if we aren’t aborting a transaction and a grant has been made then
we must be in the middle of a valid transaction.  The slave’s cycle line
needs to be set to reflect that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The strobe signal is more complicated.&lt;/p&gt;

&lt;p&gt;As you may remember, the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
strobe signal indicates a transaction request, whether for read or write, and
that it is roughly analogous to the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;)
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; signals.  The first rule of any request is that the request cannot
change as long as another one is outstanding.  For this reason, we wrap the
control logic so that any time &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sstb[M] &amp;amp;&amp;amp; s_stall[M]&lt;/code&gt;, that is any time
the slaves strobe and stall signals are both high, nothing gets changed.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;(!o_sstb[M] || !s_stall[M])&lt;/code&gt; just reflects the opposite using
&lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&quot;&gt;De Morgan’s laws&lt;/a&gt;, such
that &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
values may legitimately be changed without dropping any requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was the easy part.&lt;/p&gt;

&lt;p&gt;The difficult part about the strobe signal is that we can’t just set it to
the master’s strobe input, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[sindex[M]]&lt;/code&gt;.  We have to first check that
the master is still requesting this particular slave, such that
&lt;code class=&quot;highlighter-rouge&quot;&gt;request[sindex[M]][M]&lt;/code&gt; is still true.  Remember, one of the bugs we are hoping
to fix by creating this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
is associated with a master accessing a second
slave before the first has had a chance to respond.  In this case, we can
check both by simply checking &lt;code class=&quot;highlighter-rouge&quot;&gt;request[sindex[M]][M]&lt;/code&gt; since the request
signal will never be high unless &lt;code class=&quot;highlighter-rouge&quot;&gt;m_stb[sindex[M]]&lt;/code&gt; is also high.&lt;/p&gt;

&lt;p&gt;The unusual requirement is that we also need to check that the channel isn’t
already too full.  Remember the comment about using counters to count
transactions, and the requirement that the counters cannot overflow?  If the
counter is about to overflow, then the channel is full.  We can’t issue
another transaction in that case, but rather need to wait for some returns
to come back first.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;					&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
					  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if there’s been no grant to this slave at all, then both cycle line
and strobe line’s can be cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve now decoded the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;,
and connected the slave to the master requesting
a connection.  We’ve even sent the details of the request to the slave.  What
we haven’t done is return any of the details from the slave back to the master.
That’s the next step.&lt;/p&gt;

&lt;h2 id=&quot;returning-values-to-the-master&quot;&gt;Returning values to the master&lt;/h2&gt;

&lt;p&gt;There are two types of values that need to be returned to the master.  The
first is are the acknowledgments and data returned from the slave.  With
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
these are easy.  We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;mindex[]&lt;/code&gt; as a pointer to just
copy the slave’s return values to the master.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_mdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The stall signal is a bit more involved, just because there are more reasons
why we might stall.  We default the stall signal to one, then allow it to be
cleared &lt;em&gt;if&lt;/em&gt; the we have an active grant to a given slave, &lt;em&gt;and&lt;/em&gt; a request to
that slave, &lt;em&gt;and&lt;/em&gt; if that slave isn’t also stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;// Possibly lower the stall signal
&lt;/span&gt;					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
					    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if the channel is full–that is if our counter is near rolling over,
then we need to stall this channel as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As with many things, there are exceptions.&lt;/p&gt;

&lt;p&gt;For example, if the master has requested a non-existent
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt;, or if
the transaction has timed out, then we need clear the stall line, accept
a transaction, and return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;m_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, this timeout signal only works because of the bus &lt;em&gt;abort&lt;/em&gt; capability
implemented within the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB standard&lt;/a&gt;
I use.  It doesn’t work on the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Finally, if the master drops his cycle line, aborting any ongoing transactions,
then we need to make certain that nothing more gets returned.  Any ongoing
transactions will be left in an undetermined state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use this bus abort capability primarily for two reasons.  First, following
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the master will naturally want to abort any ongoing transactions.  This
implementation was chosen from the perspective of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
If a software program receives a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; doesn’t really
care what other transactions might succeed or fail–the software program has
already failed.  This simplifies the cleanup.  The same is true of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;:
following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the correct answer is to abort any efforts at further transactions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
however, doesn’t have a way of signaling a bus abort condition, nor does
it have a way of implementing one: every transaction request &lt;em&gt;must&lt;/em&gt; receive a
response.  This includes burst read responses as well–the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
bus is still required to return every beat of a burst read response even if all
of them will indicate &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;This lack of a bus abort makes implementing a timeout difficult.  Imagine, if
you will, that the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
detects a broken channel.  Perhaps the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave&lt;/a&gt;
has failed to return a response, or perhaps that response is to an
ID for which nothing is pending, or perhaps it sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;xLAST&lt;/code&gt; flag too early,
either way, there’s no way to recover since there’s no way to indicate to the
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI slave&lt;/a&gt; that the master
wishes to discard anything it might still wish to respond to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; doesn’t have that
problem since all the master needs to do is to deassert the cycle line
for the slave to know to reset any transactions in progress.&lt;/p&gt;

&lt;p&gt;The way to handle this properly is to assign a timeout counter to every
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; burst.  Then, if the
slave fails to respond or responds inappropriately, &lt;em&gt;every response following&lt;/em&gt;
is to be held as an error.  This is how my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt;
worked initially.  The reason for this approach is simply that there’s no way
to know if a response, following an error of some type, is to be treated as a
valid response or a continuation of the fault.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that there’s no way to recover.&lt;/p&gt;

&lt;p&gt;This is why I went back and updated the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI bus fault
isolator&lt;/a&gt;
to add to it the ability to reset the entire (broken) downstream core, using
the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; signal.  Once the downstream slave then comes back from
the reset condition, it is reattached to the bus.  Until that time, as long
as it is either in the fault condition or in the reset condition, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;AXI
bus fault
isolator&lt;/a&gt;
simply returns &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;s for every transaction
request.&lt;/p&gt;

&lt;h2 id=&quot;composing-slave-and-master-properties&quot;&gt;Composing slave and master properties&lt;/h2&gt;

&lt;p&gt;The last step of the &lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
design process was to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; that the design
worked, or equivalently to verify that it still worked following any changes.
Changes?  Yes, I made a lot of changes along the way, especially as I learned
more and more about how to do this.&lt;/p&gt;

&lt;p&gt;The first and easy step in this process was to connect a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
bus property file to every connection coming in or going out of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;,
as shown in Fig. 13.  We’ve already discussed this property file for both
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; and
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; on the blog.
In general, having such a file makes it really easy to verify that a given
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component obeys the rules of the road.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 13.  Bus property files are connected to each of the input and output buses&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/composing-bus-properties.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The difficult part of this task is
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.  In
order to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
the internal state variables of each formal property file need to be
related to the registers within the design, and to the state variables found
in each of the other formal property files.&lt;/p&gt;

&lt;p&gt;For example, consider the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; bus.
The &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal property file&lt;/a&gt;
maintains a counter of outstanding transactions in order to be able to make
certain that 1) every request gets a response, and 2) that no responses are
issued without a prior request.  These counters need to be matched.  For
example, suppose master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is connected to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, so that &lt;code class=&quot;highlighter-rouge&quot;&gt;grant[N][M]&lt;/code&gt;
is true.  In that case, the number of outstanding transactions from the
perspective of the master must be matched to the outstanding transactions
counter within the slave.&lt;/p&gt;

&lt;p&gt;This isn’t as trivial as it sounds.&lt;/p&gt;

&lt;p&gt;Transactions issued by the master might be waiting in the decoder.  Similarly,
transactions in any
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;s
need to be counted.  In the end, you need to have an assertion that
one value, based upon the master’s transaction counter, equals a similar
value based upon the slave’s transaction counter.&lt;/p&gt;

&lt;p&gt;Let’s see if we can make any sense of how this is done.  Within
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;this design&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_moutstanding[N]&lt;/code&gt; is the counter containing the number of outstanding
transactions from the perspective of the master, and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_soutstanding[M]&lt;/code&gt;
contains the same counter from the perspective of the slave.&lt;/p&gt;

&lt;p&gt;The check itself is done across all masters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_OUTSTANDING&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step is to make certain that the master’s transaction count includes
at least enough to keep our arithmetic from overflowing.  This means that
if there’s a valid transaction coming out of the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;decoder&lt;/a&gt;,
and if the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/addrdecode.v&quot;&gt;decoder&lt;/a&gt;
outputs were registered, then it must be accounted for in the master’s count.
Similarly, if the return response is being buffered, then there must be
a value in the master’s counter accounting for the valid value in that
buffer as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_moutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_BUFFER_DECODER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_DBLBUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now subtract these two values from the master’s counter to create
a new value, &lt;code class=&quot;highlighter-rouge&quot;&gt;n_outstanding&lt;/code&gt;, containing the number of transactions that have
been sent to the slave.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;n_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_moutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_BUFFER_DECODER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_mack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_DBLBUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step is to match this count to the slave’s count.  So, we’ll
loop through all possible slave connections.  For any bus master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
connected to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, this number of outstanding transactions is required
to match the number of outstanding slave transactions.  Well, almost.  The
slave hasn’t yet counted any transaction it hasn’t yet accepted.  It might
also be that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_scyc[iM]&lt;/code&gt; (the slave’s cycle line) is low, or an error
received and so the slave has aborted its transaction but the master hasn’t
yet aborted it, etc., etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_mcyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_scyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_serr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_merr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_outstanding&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_soutstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sstb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key here is that this assertion &lt;em&gt;must be an assertion of equality&lt;/em&gt;.
If the two counters are not related to each other &lt;em&gt;exactly&lt;/em&gt;, the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine is guaranteed to fail.  (I should know–I keep trying to use inequalities
for this check, and then getting corrected by the solver.)&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
this check is just a touch more involved.  Unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
there’s no bus abort.  Unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; which has only
the one counter, 
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; requires
counters for the number of outstanding read transactions, write address
and write data transactions.
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt; has even more state
to track, in order to make certain that the number of transactions with a
given ID, and the number of beats per burst, all match the data within the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;’s internal registers.&lt;/p&gt;

&lt;h2 id=&quot;crossbar-options&quot;&gt;Crossbar Options&lt;/h2&gt;

&lt;p&gt;One of the annoying realities of these separate
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s
is the options
they can be configured with.  Sure, there’s the easy options: the number of
masters, &lt;code class=&quot;highlighter-rouge&quot;&gt;NM&lt;/code&gt;, and the number of slaves, &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;, are both configurable.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;address&lt;/a&gt; ranges
of the various slaves are configurable as well.  Further, as you’ve gathered
from above, the size of the counters used to determine how many transactions
are outstanding is also adjustable.  The size of this counter is controlled
by the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;LGMAXBURST&lt;/code&gt;.  After that, though, I started to get greedy.&lt;/p&gt;

&lt;p&gt;The first option I created was the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; option.  This option is
common to all three of the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;s.  The jury is still
out regarding whether this is useful or not (I haven’t measured it), however
many bus lines can travel long distances on a chip.  If the lines can be held
at zero any time they are not in use, that is any time &lt;code class=&quot;highlighter-rouge&quot;&gt;cyc&lt;/code&gt; is zero for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; is zero
for &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;, then no energy
needs to be spent to charge those
lines.  This comes at the cost of extra required logic, but I still think it
might help lower the overall power required.  I’m looking forward to measuring
if this has any effect.&lt;/p&gt;

&lt;p&gt;For the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB
crossbar&lt;/a&gt;,
there’s also an option to register the return values from the
slave, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DBLBUFFER&lt;/code&gt;.  There’s also the option of setting a timeout,
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_TIMEOUT&lt;/code&gt;, so that any return
that doesn’t come back in time for the timeout can be turned into an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
and a subsequent bus abort.  Here, I got greedy again.  I added an additional
register to control whether or not a request should timeout &lt;em&gt;before&lt;/em&gt; it even
gets to the slave.  This I call a starvation timeout, and its an indication
that a particular master isn’t getting access to the slave fast enough.
Perhaps another master is hogging the slave.  Perhaps it’s a well used slave
and this master doesn’t have enough of a priority.  Either way, with the
starvation timeout parameter set, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_STARVATION_TIMEOUT=1&#39;b1&lt;/code&gt;, each master
will be guaranteed a return in a fixed and known number of time-steps.&lt;/p&gt;

&lt;p&gt;If only I could do that with
&lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.
Although I haven’t done that with the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite
crossbar&lt;/a&gt;,
that might be easy enough to be doable still.&lt;/p&gt;

&lt;p&gt;One of the parameters the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbars&lt;/a&gt; share that the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;
doesn’t have is a linger option, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LINGER&lt;/code&gt;.  The idea behind this option is
that if master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; has just finished talking to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;, then that connection
is likely to be needed again in the near future.  Once the channel becomes
idle, therefore, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
will wait &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LINGER&lt;/code&gt; clocks before removing the grant.  If master &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; wants
to talk to slave &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; again, the grant is already there waiting for him and
he won’t have to wait for it.  Of course, it will
only linger if no other master wants access to this particular slave.  This is
therefore a useful, though optional, configuration parameter which might
impact performance.&lt;/p&gt;

&lt;p&gt;Of course, the sad reality of any of these options is that the
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt; really needs to be
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified&lt;/a&gt;
for every possible parameter setting.  Hence verifying the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB crossbar&lt;/a&gt;
requires 48 proofs (36 assertion based, 12 cover based), whereas the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite crossbar&lt;/a&gt;
requires 12 proofs (6 assertion based, 6 cover based).  The full
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI crossbar&lt;/a&gt;,
as currently configured, requires 8 assertion based proofs.  This is really
incomplete, since it doesn’t (yet) have a set of cover-based proofs
to show that not only will it not violate any properties, but that it can
actually properly complete transactions in the first place.  For now, though,
you can just consider this last piece a work in progress–even though I’ve
done enough testing with various &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; checks to be confident that
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt;,
would work.&lt;/p&gt;

&lt;h2 id=&quot;xilinxs-interconnect&quot;&gt;Xilinx’s Interconnect&lt;/h2&gt;

&lt;p&gt;Once I had formally verified my own
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;, I became curious
about how hard it might be to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;Xilinx’s AXI
interconnect&lt;/a&gt;.
If you check out Vivado’s IP Catalog, you’ll find an entry for a
&lt;code class=&quot;highlighter-rouge&quot;&gt;AXI interconnect RTL&lt;/code&gt; which, when instantiated, will create a Verilog copy
of their &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;their
interconnect&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Xilinx offers an interconnect in their IP catalog&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/crossbar/xilinx-intercon-ip.png&quot; alt=&quot;&quot; width=&quot;781&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I spent some time looking through this (after I’d built &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my
own&lt;/a&gt;)
and I’ve learned a lot from it.&lt;/p&gt;

&lt;p&gt;First, they have two different types of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnects&lt;/a&gt;
implemented.  The first type offers grants to slaves based upon read or write
requests.  This is different from my own grants above which are based upon
either write requests or read requests.  In other words, if you request
to read from a peripheral from this first type of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;, you’ll get a
write grant as well.  It’s not yet clear to me what will happen if you request
both read and write grants at the same time, though.  This particular
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; ignores the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt;
values when routing–much like &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;my
own&lt;/a&gt;.  Not only
that, this version of Xilinx’s
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; might easily
mask the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt; bugs found
in their demonstration slave core.&lt;/p&gt;

&lt;p&gt;The other type of
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
they support grants access to both read and write requests separately, and
uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt; field to route the returns back to the slave that requested
the transaction.  This was how I had always thought an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
interconnect&lt;/a&gt; would
be created–that is, until I tried building my own.  The reason why I don’t
route bus returns based upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;RID&lt;/code&gt; fields is simply because you’d
need another
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;–this
time for the return channel.  The first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
already costs a minimum of two clock cycles of latency.  This second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
would need to consume a similar amount of resources on the return.  Adding
four clocks to every transaction seems excessive.  So, while it’s doable,
I didn’t find it worth the performance cost.&lt;/p&gt;

&lt;p&gt;The other thing I found while browsing Xilinx’s
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt; code, were a large
number of translators that could bridge from one bus type to another.  Their
&lt;a href=&quot;https://en.wikipedia.org/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;
it seems is capable of instantiating &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain
crossing&lt;/a&gt; bridges, bridging from
AXI3 to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;,
to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; with one size
&lt;code class=&quot;highlighter-rouge&quot;&gt;AxID&lt;/code&gt; values to &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; with
another, and so on.  It’s quite configurable, although the small budget
hobbyist should beware: each of these translations costs resources within
your design.&lt;/p&gt;

&lt;p&gt;Of those bridges, the one that surprised me was the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; to
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; bridge.
Whereas &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; is a
very capable protocol, capable of high speed operation just as fast if not
faster than the full &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;
protocol, Xilinx’s bridge code crippled the
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; generated
transactions so that no more than one read or one write would ever be
outstanding at any given time.  The bridge also cost several clock cycles,
which is unusual since an
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; transaction can be
created from an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
transaction by &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;fixing and ignoring the unused
fields&lt;/a&gt;.
No matter how I looked it over, I couldn’t see any reason for building their
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; to
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt; bridge in this
fashion.&lt;/p&gt;

&lt;p&gt;Perhaps this explains why the bugs in their
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
demonstration core have gone unnoticed for so long?&lt;/p&gt;

&lt;p&gt;The sad reality, however, of both of these observations is that some day
Xilinx will update &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_interconnect/v2_1/pg059-axi-interconnect.pdf&quot;&gt;their
interconnect&lt;/a&gt;,
and all of a sudden a lot of &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
slaves&lt;/a&gt;, written based upon
their &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;demonstration code&lt;/a&gt;,
will start failing.&lt;/p&gt;

&lt;p&gt;I guess that means that if you haven’t started
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
your
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components, you should start doing so now.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Building your own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar interconnect&lt;/a&gt;
may be intense, but it is certainly possible to do.  I will say this, though,
I’m not sure I could’ve done it without the formal property files for either
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
or the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI4&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; protocols.&lt;/p&gt;

&lt;p&gt;I should also mention that the proofs themselves aren’t necessarily all that
fast to accomplish.  While the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools can often find bugs quickly, proving that there are no bugs can be much
harder.  As a result, my initial development on each of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbars&lt;/a&gt; was
pretty quick.  It then slowed down.  At one point, it took over 50 hours
to verify the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt; in one
of its configurations.  Creating submodules to contain the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;s really helped,
dropping the maximum proof time down to 22 minutes.  Sure, it takes time, but
it’s quite doable.&lt;/p&gt;

&lt;p&gt;The biggest thing I haven’t discussed about full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar interconnects&lt;/a&gt;
is their logic cost.  That full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)&quot;&gt;crossbar&lt;/a&gt;
doesn’t come cheap, and certainly not for any sizable number of masters or
slaves.  Worse, the cost doesn’t scale linearly as the number of masters or
slaves increases.  Instead of opening that discussion now, let me simply invite
you to take any of the arbiters discussed here and to build it using
&lt;a href=&quot;&quot;&gt;Yosys&lt;/a&gt;
to see how much it will cost as you vary the parameters.&lt;/p&gt;

&lt;p&gt;Finally, I would still like to come back to this topic and walk through some
of my brand new &lt;a href=&quot;https://zipcpu.com/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
cores: the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;AXI to AXI-lite bridge&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;AXI-lite to AXI bridge&lt;/a&gt;, or perhaps even the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to AXI&lt;/a&gt;
bridge that I use to get high speed access to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt; memory.  These we’ll do
&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/6/3&quot;&gt;if the Lord permits&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Thus saith the LORD, Stand ye in the ways, and see, and ask for the old paths, where is the good way, and walk therein, and ye shall find rest for your souls. But they said, We will not walk therein.  (Jer 6:16)&lt;/em&gt;</description>
        <pubDate>Wed, 17 Jul 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/07/17/crossbar.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/07/17/crossbar.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Breaking all the rules to create an arbitrary clock signal</title>
        <description>&lt;p&gt;Have you ever needed a clock speed that wasn’t easy to generate?
What if you wanted to build and run your own
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;?
Within an FPGA??&lt;/p&gt;

&lt;p&gt;As an example, many of my favorite FPGA boards have 100MHz clocks coming into
them.  What if you wanted to output an audio signal via
&lt;a href=&quot;https://en.wikipedia.org/wiki/I2S&quot;&gt;I2S&lt;/a&gt; at 48kHz?  48kHz is a common
audio sample rate associated with broadcast audio, sort of like
&lt;a href=&quot;https://en.wikipedia.org/wiki/44,100_Hz&quot;&gt;44.1kHz&lt;/a&gt; is associated with &lt;a href=&quot;https://en.wikipedia.org/wiki/Compact_Disc_Digital_Audio&quot;&gt;CD
audio&lt;/a&gt;.  I have an
&lt;a href=&quot;https://www.analog.com/media/en/technical-documentation/data-sheets/ADAU1761.pdf&quot;&gt;ADAU1761 24-bit Audio Codec&lt;/a&gt;
available to me on my &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video
board&lt;/a&gt;,
so I should be able to use it to generate quality sound.  This
chip, however, requires an incoming clock signal of 49.152MHz in order to
produce samples at 48kHz.  Any suggestions on how you might multiply a
100MHz signal up to somewhere between 800 and 1600 MHz, and then divide it
down in order to get 49.152MHz?&lt;/p&gt;

&lt;p&gt;There’s no way to do it.&lt;/p&gt;

&lt;p&gt;Worse, what if you had to create a clock that &lt;em&gt;tracked&lt;/em&gt; the audio sample rate
of an incoming signal–but only when it was present?&lt;/p&gt;

&lt;p&gt;As another example, I can use a &lt;a href=&quot;https://store.digilentinc.com/pmod-gps-gps-receiver&quot;&gt;PMod
GPS&lt;/a&gt; to measure the
clock rate of the board I’m using.  I should be possible to use this signal
to create a true 49.152MHz clock–true enough to be used as an audio frequency
standard.&lt;/p&gt;

&lt;p&gt;That’s audio, but what about video?  Another common example of when you might
need to create a clock at an arbitrary frequency would be when trying to
generate a &lt;a href=&quot;http://monitorinsider.com/cable_bandwidth.html&quot;&gt;pixel clock for
video&lt;/a&gt;.  With modern monitors,
the video driver is expected to query what video modes the monitor is capable
of accepting via an &lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID
protocol&lt;/a&gt;
transaction (a form of &lt;a href=&quot;https://www.i2c-bus.org&quot;&gt;I2C bus&lt;/a&gt;.  The video driver
is then expected to generate a pixel clock based upon what the monitor is
capable of receiving.  Without external clock generation hardware, how
can you create an arbitrary pixel clock?&lt;/p&gt;

&lt;p&gt;Yes, I know you can often get away with being “close enough” in many of these
examples.  For example, if you wanted to feed a monitor wanting a 25.172MHz
pixel clock you might still be able to drive it with a 25MHz pixel clock
instead.  (I’ve done it.)  But what about 88.75MHz?  How might you generate
that signal?&lt;/p&gt;

&lt;p&gt;Given that there’s a reason to need something like this, let’s discuss today
how you might generate a clock at an arbitrary frequency when using an FPGA.&lt;/p&gt;

&lt;h2 id=&quot;breaking-all-the-rules&quot;&gt;Breaking all the rules&lt;/h2&gt;

&lt;p&gt;In order to generate a clock at an arbitrary rate, we’re going to need to
&lt;em&gt;break all of the rules&lt;/em&gt;.  Specifically, I wrote in my &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;rules for new FPGA
designers&lt;/a&gt;:
&lt;em&gt;never use a logic generated clock&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Build your design with only one clock.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; transition on the positive (rising) edge of anything other than
your system clock.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I discourage anyone from using a logic generated clock for a few basic reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Logic generated clocks tend not to be placed onto the system clock backbone&lt;/p&gt;

    &lt;p&gt;This will cause significant skew in your clock from one end of the chip to
another.  This skew can easily be bad enough to make your design fail for
seemingly inexplicable reasons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Beginners tend not to realize that you still need to use a proper &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock
domain crossing&lt;/a&gt; from the
clock domain that generated the clock and the generated clock domain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most FPGA tool chains don’t know how to handle logic clocks, assuming that
they are recognized at all.&lt;/p&gt;

    &lt;p&gt;This leads to logic that isn’t properly constrained to guarantee operation
at the clock rate of interest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your clock isn’t generated via a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;,
there might be glitches on it&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My rule has always been: Clocks should only ever be created or adjusted within
an FPGA using a hardware device clock management resource, such as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, we’re going to break this rule.&lt;/p&gt;

&lt;p&gt;We also want to break it “safely”, so that this step won’t keep our logic
from acting “normally”.&lt;/p&gt;

&lt;p&gt;To do this, I built and experimented with the architecture shown in Fig. 1
below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Arbitrary clock generation, hardware setup&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/genclk/blockdiag-basic.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s walk through the steps of how this might work.&lt;/p&gt;

&lt;p&gt;The first step is to generate a new clock.  I used a &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;basic fractional clock
divider&lt;/a&gt;
for this purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite, but that’s the basics of the ideal initially.  We’ll come
back and improve upon this in a moment.&lt;/p&gt;

&lt;p&gt;There are several problems with using a &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;basic fractional clock divider
divider&lt;/a&gt;
such as this
one.  One of the worst problems is the phase noise.  Imagine you wanted to
divide your clock by three.  You would add to your counter some number on
every clock tick in an effort to get a divide by three.  If your clock
was &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits wide, then clearly after &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N&lt;/code&gt; clock ticks, this pseudo clock
generator would have wrapped some integer number of times.  If we make this
integer close to &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N/3&lt;/code&gt;, we can get close to a division by three.&lt;/p&gt;

&lt;p&gt;Perhaps a picture would help.  Suppose we used a &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; bit counter, to which
we add a delay value of &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; to it–in order to get close to 1/3, while also
picking off the top bit for our new clock.  If you plotted this out, you might
see a trace similar to Fig. 2 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. A Fractionally Generated Clock Signal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/genclk/trace.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you ignore the fact, for a moment, that this may be about the ugliest clock
signal you’ve ever seen, you’ll notice that this clock signal is high for
five periods out of 16, which is a rough divide by three.&lt;/p&gt;

&lt;p&gt;If we add more bits to our counter and step, we’ll be able to represent more
frequencies For example, if we had used a &lt;code class=&quot;highlighter-rouge&quot;&gt;32&lt;/code&gt;-bit counter, we might step
by &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;h55555555&lt;/code&gt;.  No, that’s still not quite &lt;code class=&quot;highlighter-rouge&quot;&gt;1/3&lt;/code&gt;rd, but its much closer
than we were before.&lt;/p&gt;

&lt;p&gt;While that’s better, the clock still looks awful–it just looks awful about
a frequency closer to the one we want.&lt;/p&gt;

&lt;p&gt;We need a way to clean this up.&lt;/p&gt;

&lt;p&gt;Enter the reason for using an &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDES&lt;/code&gt; in Fig. 1.  By using an &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDES&lt;/code&gt;, we
can get closer to the clean clock we wanted.  For example, the same clock from
Fig. 2 above, now upsampled by a factor of 8, would produce a waveform looking
closer to Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Upsampling the fractionally generated clock&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/genclk/hires-trace.png&quot;&gt;&lt;img src=&quot;/img/genclk/hires-trace.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That is starting to look like a clock signal.&lt;/p&gt;

&lt;p&gt;Of course, we’ll still have jitter on even this upsampled clock signal.  While
our upsampling helped, it could only do so much.  We’ll always have a signal
that’s going to be within a “sample” of the right value.  This rounding to the
nearest sample will always create phase noise on our clock.  Fixing this is
the purpose of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
in Fig. 1 above.&lt;/p&gt;

&lt;p&gt;That leaves only a couple of key details remaining.&lt;/p&gt;

&lt;p&gt;For example, why did we leave the FPGA on a clock capable pin only to
immediately come back in again?  I did this for a couple
of reasons.  First, we needed the OSERDES, that 8:1 serializer, in order
to create the cleaner clock signal.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDES&lt;/code&gt; components are only
found connected to the I/O pins going directly off-chip.  Second, many FPGA’s
require that you must enter the chip from a clock-capable pin in order to get
into the clock infrastructure within the FPGA.  Doing otherwise will result
in a design error on many architectures.&lt;/p&gt;

&lt;p&gt;The last question is, what clock rate do we tell the tools this input has since
we can vary it as often as we want?  For this, we’ll use the maximum clock
rate it can have.  I’ll leave the decision of what this maximum rate is to you.
I’ve used 200MHz, 100MHz, and 50MHz successfully.&lt;/p&gt;

&lt;p&gt;Finally, let’s return to our reasons never to use a logic generated clock.
Have we dealt with all of the reasons “why not” so that we now can?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Logic generated clocks tend not to be placed onto the system clock backbone&lt;/p&gt;

    &lt;p&gt;By starting with a clock capable pin, we go directly into the clock
infrastructure on the chip.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Beginners tend not to realize that you still need to use a proper &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock
domain crossing&lt;/a&gt; from the
clock domain that generated the clock and the generated clock domain.&lt;/p&gt;

    &lt;p&gt;We’ll be smart and use proper
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt;
techniques, right?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most FPGA tool chains don’t know how to handle logic generated clocks&lt;/p&gt;

    &lt;p&gt;In this case, the tools will treat this as an externally generated clock,
at the maximum rate it can produce, so we’re good here too.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your clock isn’t generated via a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;,
there might be glitches on it&lt;/p&gt;

    &lt;p&gt;We’ve solved this by generating our clock using (several)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s,
and the OSERDES helps as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Really, the only issue left is whether or not this clock will be “clean enough”.
For that, we’ll need to build it and test it.&lt;/p&gt;

&lt;h2 id=&quot;building-the-81-fractional-divider&quot;&gt;Building the 8:1 Fractional Divider&lt;/h2&gt;

&lt;p&gt;Building this divider is &lt;em&gt;really&lt;/em&gt; easy.  It’s basically,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that each of these counters is created by adding an offset to a single
counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;counter[0]&lt;/code&gt;.  That keeps them all synchronized with each other.&lt;/p&gt;

&lt;p&gt;Finally, the MSB from each counter is used as the outgoing clock signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s really not much more to it than that.  We’ll still do a walk through
the actual code below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;genclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// The bus width
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Upsample factor
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the things we haven’t discussed is how you might synchronize this clock
with operations carried out on the current clock.  For this, I’ve envisioned
using a strobe signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_stb&lt;/code&gt; shown below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;o_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPSAMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how I would normally handle generating an internal signal at a different
rate–something I could use without ever needing a
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While there will be a fairly uncontrolled delay between &lt;code class=&quot;highlighter-rouge&quot;&gt;o_stb&lt;/code&gt; and the
outgoing clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_stb&lt;/code&gt; will at least maintain the proper clock to clock
relationship.&lt;/p&gt;

&lt;p&gt;Coming back to the basic implementation above, perhaps you’ve noticed that
the big problem with this implementation is the requirement for the
multipliers.  Let’s see if we can get rid of them.  Multiplication by 1, 2,
4, and 8 is easy–they can be accomplished with a simple left shift.  What about
multiplication by &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt;?  Those will be harder.  Six is easy, though,
if we can already multiply by three.&lt;/p&gt;

&lt;p&gt;In this case, we’ll cheat since all of these values can be created with
some creative addition–sparing us the multiply.&lt;/p&gt;

&lt;p&gt;Multiplying &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; times three, for example, is just a matter of adding it
to itself times two.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;times_three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Multiplying &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; times five is the same as adding it to a copy of itself
times four.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;times_five&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For seven, we can subtract &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; times eight.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;times_seven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, it will take a clock in order for these values to be valid.  To
keep things consistent, let’s also delay &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; by one clock tick as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest is just book keeping.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Times one
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Times two
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times three
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_three&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times four
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times five
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_five&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_seven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Times eight---and generating the next clk wrd
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our final result is just the collection of all of the most-significant bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// High order bit is &quot;first&quot;
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// First bit
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Last bit in order
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How wide should &lt;code class=&quot;highlighter-rouge&quot;&gt;BW&lt;/code&gt; be?  I’ve chosen to make it 32-bits wide.  Why?  Well,
because my Wishbone bus implementation is 32-bits wide.  It’s kind of an
arbitrary choice.  You’ll get more frequency accuracy (relative to the
system clock) the more bits you have, although I tend to think &lt;code class=&quot;highlighter-rouge&quot;&gt;32&lt;/code&gt; bits
is enough.  With a 32-bit counter, you can
generate an arbitrary clock with frequency control in steps of
&lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_CLOCK_FREQUENCY / 2^32&lt;/code&gt;, or about &lt;code class=&quot;highlighter-rouge&quot;&gt;23 mHz&lt;/code&gt; for a system clock of 100MHz.
(Yes, that is &lt;em&gt;milli&lt;/em&gt;Hertz!) I figure that’s good enough.&lt;/p&gt;

&lt;h2 id=&quot;xilinx-specific-io&quot;&gt;Xilinx Specific I/O&lt;/h2&gt;

&lt;p&gt;In general, I try to keep this blog hardware agnostic, while just discussing
Verilog design and verification.  This particular design, however, needs some
help from the hardware, so let’s take a look at how we might handle the
I/O architecture for a Xilinx 7-series device.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/zipcpu/2017/10/06/autofpga-dataword.html&quot;&gt;first rule is to separate anything that is vendor specific into its
own section of the
design&lt;/a&gt;.
This will allow us to keep using
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
on the rest of the design.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;xgenclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hsclk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;USE_PLL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_hsclk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;inout&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ignored_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;slave_to_master&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pll_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_pin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high_z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fb_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;USE_PLL&lt;/code&gt; parameter above.  Since this clock generator can generate
anything up to the system clock rate in sub Hz resolution, it can generate
clocks so slow that Xilinx’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;s
can’t lock
onto them.  For this reason, I have a flag to select whether or not to use a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
or not.  I suppose it’s not strictly necessary, but there will be a bit
of jitter on the resulting clock.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt; itself is something of a black box, present only on Xilinx
7-series parts.  If you are working on another part, check your documentation.
You’re likely to find other &lt;code class=&quot;highlighter-rouge&quot;&gt;SERDES&lt;/code&gt; capabilities on other FPGAs, although 
they are likely to go by different names and have different interfaces.
Most of the setup below is fairly boiler plate.  (You’ll find other &lt;code class=&quot;highlighter-rouge&quot;&gt;SERDES&lt;/code&gt;
capabilities on other FPGAs.) Even so, it’s possible to get it wrong.  Perhaps
you remember when &lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;I was struggling to get this design to
work&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Sadly, the only way I know how to debug output primitives like this &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt;
is to read the fine manual, use an oscilloscope, read the manual again, fiddle
with the setup, check the oscilloscope, read the manual some more, and finally
fiddle with the setup until it works.  There is one other way that I know of,
and that is to find an online example (such as this one) and to compare it
to your design to see what you might be missing.&lt;/p&gt;

&lt;p&gt;So let’s look at how this is configured.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Verilator lint_off PINCONNECTEMPTY
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OSERDESE2&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first noteworthy item is that &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt; needs to be set up for &lt;code class=&quot;highlighter-rouge&quot;&gt;DDR&lt;/code&gt;
output mode.  While we might use &lt;code class=&quot;highlighter-rouge&quot;&gt;SDR&lt;/code&gt; mode, we’d be limited to a high speed
clock of only &lt;code class=&quot;highlighter-rouge&quot;&gt;600MHz&lt;/code&gt;, whereas when using the &lt;code class=&quot;highlighter-rouge&quot;&gt;DDR&lt;/code&gt; mode you can go up to
&lt;code class=&quot;highlighter-rouge&quot;&gt;950MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also means that our high-speed clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_hsclk&lt;/code&gt;, need only be 4x the
speed of the our system clock.  Of course, the two clocks, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_hsclk&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;, must also be generated by the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;.
This creates a bit of a hassle
when working with Xilinx’s Memory Interface Generator (MIG) generated cores,
since they produce a system clock for you to use and applying any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
to this clock will require a
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt; to
move between the MIG clock and the newly generated one.  This is in spite of
the reality that the MIG uses an internally generated &lt;code class=&quot;highlighter-rouge&quot;&gt;4x&lt;/code&gt; clock that would
be perfect for our purposes here–it’s just not an output of the MIG core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_RATE_OQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DDR goes up to 950MHz, SDR only to 600
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_RATE_TQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERDES_MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MASTER&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRISTATE_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Really ... this is unused
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowserdes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TFB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hsclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// HS clock
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKDIV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Divided clock input (lowspeed clock)
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Data path to IOB *only*
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISERDESE2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ODELAYE2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next big confusing question is over which bit gets transmitted first.  I’ll
admit, I got this wrong at first.  The fact that the Xilinx xSERDESE2
components swap which bit is first between them only makes things more
confusing.  I was able to generate the following ordering using an Oscilloscope.
In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;D1&lt;/code&gt; goes “first”, then &lt;code class=&quot;highlighter-rouge&quot;&gt;D2&lt;/code&gt;, etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TBYTEIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TBYTEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTIN1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTIN2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTOUT1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHIFTOUT2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verilator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lint_on&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;PINCONNECTEMPTY&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes, many of these pins are not used.  I’ve kept these unused pins within my
own code more to remind myself of them than anything else.&lt;/p&gt;

&lt;p&gt;What about that &lt;code class=&quot;highlighter-rouge&quot;&gt;// Verilator lint_on  PINCONNECTEMPTY&lt;/code&gt; comment?  Yes, I have
tried to
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilate&lt;/a&gt;
this code.  No, I don’t have a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
model for an &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt;, but I was hoping to use
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;’s
linting capabilities to find bugs when things weren’t going well.&lt;/p&gt;

&lt;p&gt;The last item to notice of this &lt;code class=&quot;highlighter-rouge&quot;&gt;OSERDESE2&lt;/code&gt; configuration is that the output
is placed into a &lt;code class=&quot;highlighter-rouge&quot;&gt;w_pin&lt;/code&gt; wire.  This wire now needs to be placed through a
bi-directional I/O buffer, while holding the high-impedence flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;, low.
This makes certain that the output of this pin will always come back in on
the input.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;IOBUF&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;genclkio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we can use a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
clock resource to clean up any mess we’ve left behind.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USE_PLL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pll_fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_fb_unbuffered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Verilator lint_off  PINCONNECTEMPTY
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;PLLE2_BASE&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BANDWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LOW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBOUT_MULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 800 MHz
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBOUT_PHASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKIN1_PERIOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//  40 MHz
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT0_DIVIDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REF_JITTER1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Sim only parameter
&lt;/span&gt;				&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// .CLKOUT5_DIVIDE(1),
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFBOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKIN1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// .CLKIN1(io_pin),
&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCKED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWRDWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKOUT5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Verilator lint_on  PINCONNECTEMPTY
&lt;/span&gt;	
		
		&lt;span class=&quot;n&quot;&gt;BUFG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pllbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pll_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pll_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Success for my experiments with this core was indicated when this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
locked.  I used that as a binary indicator that the quality of result was
“good enough”.&lt;/p&gt;

&lt;p&gt;Finally, if the clock frequency needs to be so low that we cannot use the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;,
then we’ll just place the I/O pin as in input directly into a clock buffer
and move on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_locked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BUFG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clkbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io_pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I might come back and update this core later to optionally remove the
&lt;code class=&quot;highlighter-rouge&quot;&gt;BUFG&lt;/code&gt; elements with a parameter setting.  These elements are important in
order to place your newly generated clock into the clock circuitry of the FPGA.
Without them, you should be able to skip the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
and instead go into a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
you configure external to this module.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;No, this design has never been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;.  Sorry.
Were I to run this through the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tools&lt;/a&gt;,
I’m sure I would discover the lack of a whole lot of initial statements–but
this will still work without those.  It will just have a bit of a glitch on
start-up.&lt;/p&gt;

&lt;p&gt;Instead, this design was verified using a &lt;a href=&quot;https://store.digilentinc.com/digital-discovery-portable-logic-analyzer-and-digital-pattern-generator&quot;&gt;Digital Discovery logic
analyzer&lt;/a&gt;,
a &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video board&lt;/a&gt;,
and a lot of patience.  Further, the “clock capable pin”
that I used was the output bit used to control the fan.
(My board has a heat sink and no no fan, so this pin is otherwise unused.)&lt;/p&gt;

&lt;p&gt;A better test might’ve measured the quality of this clock using dedicated
clock measurement hardware.  I haven’t done this.  I only know that I can
generate a clock within an FPGA and then run this same clock through a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
locks, and I can then use the new clock within my design.&lt;/p&gt;

&lt;p&gt;I personally draw two conclusions from this work:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes you need to use an oscilloscope.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes you can break all the rules–and still get away with it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Whoso keepeth the commandment shall feel no evil thing: and a wise man's heart discerneth both time and judgment. (Eccl 8:5)&lt;/em&gt;</description>
        <pubDate>Fri, 28 Jun 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/06/28/genclk.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/06/28/genclk.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Building the perfect AXI4 slave</title>
        <description>&lt;p&gt;I’ve now already shared the story of the contract I was on some time ago,
where &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;I failed to achieve the performance I promised because I placed too
many bus bridges&lt;/a&gt;
between the &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;ARM and the
FPGA&lt;/a&gt;
that shared the same die.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Too many bus transformations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-too-many-bridges.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The easy way around this problem would be to design an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI interface&lt;/a&gt;
to my data FIFO.  At the time of the project,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
was too complicated for me to understand.  I had tried to build an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
slave controller several times over, and failed every time.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Reading from a data FIFO&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axiaddr-dsp2net.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I recently returned to the task, but this time using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.
My first step was to build a formal property file to describe an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;
interaction, similar to the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;one we built for AXI-lite
together&lt;/a&gt;.  I
learned several things along the way, too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;According to the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;,
“On master and slave interfaces there must be no combinatorial paths
between input and output signals.”&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Reading from a data FIFO&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/axi-spec-registered.png&quot; alt=&quot;&quot; width=&quot;614&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;If you aren’t &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;following me on twitter&lt;/a&gt;,
then &lt;a href=&quot;https://twitter.com/zipcpu/status/1130436872021434368&quot;&gt;you’ve missed the discussion regarding the meaning of this
sentence&lt;/a&gt;.
I have taken it to mean that all
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;
signals must be registered.  Others have
since pointed out that this reading is probably too strict.  Perhaps a better
reading is just that “combinatorial paths between input and output
signals” are disallowed.&lt;/p&gt;

    &lt;p&gt;Since I already started with the interpretation that all
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; signals must
be registered, I’ll stick with it here.  Indeed, registering all I/O’s is not
a bad thing as &lt;a href=&quot;https://twitter.com/elaforest&quot;&gt;Eric LaForest&lt;/a&gt;
of &lt;a href=&quot;http://fpgacpu.ca/gateforge/index.html&quot;&gt;GateForge Consulting&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/elaforest/status/1130667685984055296&quot;&gt;wrote&lt;/a&gt;,&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Although having a combinatorial path will work (I have seen it on some
Xilinx AXI IP), the resulting round-trip time on a ready/valid handshake
worsens designs: Shaving a cycle here is not worth the reduced Fmax and
harder P&amp;amp;R.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;So there are good reasons to do this, even if I was mistaken that the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification&lt;/a&gt; required it.&lt;/p&gt;

    &lt;p&gt;This is then unlike the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
designs I’ve done where the stall signal isn’t supposed to be registered.
This also means that it will be really hard to touch any
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; signal
without losing a clock due to delay.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also discovered the problem I had been suffering from: write transactions
don’t return one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; per element written, but rather one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;
response per &lt;em&gt;burst&lt;/em&gt; transaction.  In other words, for every
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt; or equivalently for every &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;
there should be one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.  I had thought, erroneously, that it was
supposed to be one &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; per &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; behavior is very different from write-acknowledgments under
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
It’s also different from the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
read channel.  In the case of the read channel, there is one
&lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID &amp;amp; RREADY&lt;/code&gt; for every requested beat in any transaction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also discovered that in spite of all of
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s training material,
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;their own example core can’t handle high
throughput&lt;/a&gt;: 1) reads take
a minimum of two clocks per beat of data, 2) the core will crash if multiple
subsequent requests are made, 3) it can’t handle any significant
back pressure, and 4) their core won’t handle reads and writes at the
same time.&lt;/p&gt;

    &lt;p&gt;This is crazy poor performance.&lt;/p&gt;

    &lt;p&gt;We’ll do better today.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also read several other blog articles about how to build
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slaves.
Most of these articles focus on building a state machine to handle one
transaction at a time.  While this kind of performance might be better
than &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s, designing an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slave from a
state-machine standpoint tends to introduce unnecessary stall
signals.  My application needed throughput.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I needed to do better.  I needed something that worked, and worked well.&lt;/p&gt;

&lt;p&gt;So let’s take a look today at &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;what I managed to come up
with&lt;/a&gt; and why.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demofull/demofull-design-goals.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I had four primary goals in this exercise.  The first was that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;my new AXI
slave core&lt;/a&gt;
needed to be &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
compliant.  Realistically, that should be a given.  However, we’ve already
discussed how even &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s example code wasn’t truly AXI
compliant&lt;/a&gt;,
so I needed something new.  My next goal was that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this new
core&lt;/a&gt;
had to have maximum throughput.  This second goal was so important to me that
my third and fourth goals were identical: I wanted throughput!&lt;/p&gt;

&lt;p&gt;High throughput!&lt;/p&gt;

&lt;p&gt;For me, high throughput means that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;the core&lt;/a&gt;
can handle one data beat per clock in both directions at the same time.
Further, I also wanted to make certain that this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;high
throughput core&lt;/a&gt;
would never stall any input requests unless it was already processing
a transaction on the same channel.&lt;/p&gt;

&lt;p&gt;Is it possible?&lt;/p&gt;

&lt;p&gt;Somewhere around the bottom of my page of goals, I actually had another
interface goal.  &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;My previous example/demonstration AXI-lite
core&lt;/a&gt; wasn’t very easy
to integrate into other parts of my design.  Instead, I wanted something that
was easier to integrate with other logic.  So, for this design, I wanted to use
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this AXI core&lt;/a&gt;
as a bridge to a simpler interface that would be kept in another file–the
one that actually had my logic within it.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig. 4: Bridging to a Simpler Interface&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demofull/demofull-simple-interface.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That meant I needed an interface that looked like Fig. 4.&lt;/p&gt;

&lt;p&gt;This interface was designed to support a very simple slave that could
handle every bus transaction in a single clock cycle, but had no capability
of stalling.&lt;/p&gt;

&lt;p&gt;How does this simplify the logic of the downstream non-AXI slave?
Consider the simplest slave write logic I can think of,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and similarly for a read,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Could this get any simpler?&lt;/p&gt;

&lt;p&gt;Indeed, there’s a &lt;em&gt;large&lt;/em&gt; class of slaves that could handle an interface
like this.  Some examples include my &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD card
controller&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/wbpwmaudio&quot;&gt;PWM
audio controller&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO controller&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wbi2c&quot;&gt;I2C controller&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/spio.v&quot;&gt;button/switch
controller&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt controller&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;,
and much more.&lt;/p&gt;

&lt;p&gt;However, most buses include &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write
strobes&lt;/a&gt; as well and
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
is no different.  It would be a shame not to support them.  So we’ll add
support for the &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write
strobes&lt;/a&gt;
to our slave interface as well.  To support these, the slave will need to
update its logic to look something like the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not all slave devices support
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;write strobes&lt;/a&gt;,
but we’ll leave that decision up to the downstream implementation and simply
include them here.&lt;/p&gt;

&lt;p&gt;Of course, the illustration above only demonstrates this interface applied to
a &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
In actuality, I’d would expect to drive a series of control register
and/or buffers instead of this example &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
RAM&lt;/a&gt;,
but that’s a discussion to be had whenever we build whatever interface we’ll
connect this to.&lt;/p&gt;

&lt;p&gt;What &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;
doesn’t support are stalls on the downstream interface, nor does it support
responses that take longer than a single cycle to determine.  Those extra
features would require &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
support within the channel, and that’s going to be part of a different
development, perhaps even an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; implementation.&lt;/p&gt;

&lt;p&gt;So how shall we design this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;high speed AXI slave
core&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;designing-the-waveform&quot;&gt;Designing the waveform&lt;/h2&gt;

&lt;p&gt;As &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;we’ve discussed before&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
consists of five channels implementing between
them both a write interface (3 channels) and a read interface.  Unlike
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
the logic for the two interfaces can be written and processed separately.
For now, we’ll start by looking at the read interface, just because it’s
the simpler of the two.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Basic AXI read transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-basic.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-basic.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 5 on the right shows an example of a single basic
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; read transaction
that we can use for discussion.&lt;/p&gt;

&lt;p&gt;The first key requirement of any high performance
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; slave is that
the &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; line must be high when the slave isn’t busy.
This keeps us from suffering from a stall signal when a read request is made.
Indeed, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
recommends leaving &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; (and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;) high while waiting for a
request.  This will also be our first departure from &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demo AXI
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The transaction then starts with the request on the read address channel,
as indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID&lt;/code&gt;.  This will tell us the address
we want to read, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARADDR&lt;/code&gt;, and the number of items to be read, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN+1&lt;/code&gt;.
Each of these items will take at least a separate clock period, and so
they are often called “beats”.  Further, since combinatorial paths are
forbidden between inputs and outputs, we can’t start responding before
the next clock.  However, we can respond as early as the next clock
tick.  Then, after &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARLEN&lt;/code&gt; clock ticks, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST&lt;/code&gt;
and return our last item.&lt;/p&gt;

&lt;p&gt;Don’t miss this key fact: &lt;em&gt;there are &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN+1&lt;/code&gt; beats in a read transaction,
and likewise &lt;code class=&quot;highlighter-rouge&quot;&gt;AWLEN+1&lt;/code&gt; beats in a write transaction&lt;/em&gt;.  It’s not &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWLEN&lt;/code&gt;.  That extra &lt;code class=&quot;highlighter-rouge&quot;&gt;+1&lt;/code&gt; is important, and &lt;a href=&quot;https://twitter.com/zipcpu/status/1129083967242723329&quot;&gt;more than one individual
missed this key detail on one of my weekly formal verification
quizes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we drew this read transaction out into a state machine diagram, we
might get something looking like Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. An Initial Read Finite State Machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-fsm-initial.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-fsm-initial.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this diagram, the read channel starts in the idle state where the &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;
in the bottom corner of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Idle&lt;/code&gt; box indicates that &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; is true.  Upon
receiving a burst read request, we’d move to either the middle state, &lt;code class=&quot;highlighter-rouge&quot;&gt;Mid&lt;/code&gt;,
or the end state, &lt;code class=&quot;highlighter-rouge&quot;&gt;End&lt;/code&gt;, depending upon whether or not
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN==0&lt;/code&gt;.  In both of these states, the &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; in the lower right corner
indicates that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is true.  From the middle state, once the next to
the last item has been transferred, we’d move to the end state where &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;
indicates that &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; is also true.  From the final ending state we can
return to idle.  Further, the design cannot advance from either the middle
or the ending state unless &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is also high as noted by the &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; on
the transition.&lt;/p&gt;

&lt;p&gt;The neat thing about this design, as I’ve just outlined by the notes in the
corners of the states, is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state machine (FSM)&lt;/a&gt;
signals &lt;em&gt;are&lt;/em&gt; the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; output signals.
(See &lt;a href=&quot;/tutorial/&quot;&gt;my tutorial&lt;/a&gt; if you would like more
information on &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state
machines&lt;/a&gt;.)
This allows us to register the output signals without needing a separate
set of state registers.  Likewise the incoming signals from the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; master are shown on the transitions.&lt;/p&gt;

&lt;p&gt;Now let’s see if we can pack these operations together so that we can
do a read with 100% return path utilization.  What might that look like?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 7. Two burst reads, back to back&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-double.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-double.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It would look like two of these read bursts jammed together until their
various data beats are just touching with no overlaps, just like Fig. 7
on the left.&lt;/p&gt;

&lt;p&gt;From an &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
point of view, 100% throughput requires a couple of changes.
First, we’ll need to be able to loop from the end state back to the end
state any time we receive a request where &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN==0&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is set.&lt;/p&gt;

&lt;p&gt;This risks the problem of what to do if the &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; input from the master
isn’t set, since we can’t change our &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; signal &lt;em&gt;after&lt;/em&gt; we notice
&lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; is low without making an output, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; combinatorially dependent
upon an input, &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt;.  In order to solve this problem, we’ll create a holding
state where &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; is high but &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; is low in order to deal with
this possibility.  Other than this new &lt;code class=&quot;highlighter-rouge&quot;&gt;Hold&lt;/code&gt; state, our updated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
diagram in Fig. 8 is (roughly) the same as Fig. 6 above.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. The Read Finite State Machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-rd-fsm.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-rd-fsm.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll know we’ve been successful if we can get our design to pass a cover
check describing this transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Accept a burst request for 4 beats
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The first three beats
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The last read beat, where we accept the next request
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The next three beats of data, and
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The final beat of the transaction
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The return to idle
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For those not familiar with the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html&quot;&gt;SystemVerilog Assertion (SVA)
notation&lt;/a&gt;, this
states that we want to find some way to make the given sequence pass–to
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; it as it’s called.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;disable iff (!S_AXI_ARESETN)&lt;/code&gt; on the
second line means that if, at any time during
the following sequence, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARESETN&lt;/code&gt; becomes active (low), then the sequence
is disabled and any result doesn’t count.  Following the &lt;code class=&quot;highlighter-rouge&quot;&gt;disable iff&lt;/code&gt; you
have a series of expressions, looking like &lt;code class=&quot;highlighter-rouge&quot;&gt;A ##1 B ##1 C&lt;/code&gt; etc.
This means that we want to see a clock cycle when &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is true, followed by
one when &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; is true, followed by one where &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; is true.  But what about that
strange &lt;code class=&quot;highlighter-rouge&quot;&gt;[*3]&lt;/code&gt;, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;A ##1 B [*3] ##1 C&lt;/code&gt;?  That refers to a repetition of &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.
In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; gets repeated &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; times before &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; becomes true on the next
clock.  So we’re asking the tool to find a time when &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; is
true starting on the next cycle but for three separate clocks, and finally &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;
is true.&lt;/p&gt;

&lt;p&gt;That should very much match our diagram in Fig. 7 above.  Hence, when we can
make this cover statement true, while still matching all of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal properties&lt;/a&gt;
required by the bus, then we’ll know we can run at high speed.&lt;/p&gt;

&lt;p&gt;Even better, we can trace these steps through the states and transitions in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
diagram, shown in Fig. 8 above.  Did you notice that the cover
statement didn’t check that the design could properly enter (and leave)
every state?  Indeed, this cover statement is now starting to appear
inadequate.  A better cover statement should check every state and transition.&lt;/p&gt;

&lt;p&gt;We may have to come back to that later.&lt;/p&gt;

&lt;p&gt;We could also trust the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formal property
checker&lt;/a&gt;
to check all of these paths instead.&lt;/p&gt;

&lt;p&gt;For now, let’s turn our attention to the write channel.  A basic
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
write transaction looks like Fig. 9 on the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. A basic write transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-basic.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-basic.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;There are four important sections of logic in this figure.  First, when the
design is idle we’ll want &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; to be high.  That way we won’t need to wait
an extra cycle after &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; goes high before &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY &amp;amp; AWVALID&lt;/code&gt; are high
together like &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s design
did&lt;/a&gt;.  Second, there’s the
write address transaction, where &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt;.  Third, there’s a series
of “beats” where &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; is true and valid data are sent across the channel.
Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is set to true on the clock cycle after
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may notice from Fig. 9 that I’ve kept the &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; line low until after
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; AWREADY&lt;/code&gt;.  That just simplified the design below.  If I need to
press for lower latency later, I may need to come back and adjust this later.&lt;/p&gt;

&lt;p&gt;If you were to place these states into an initial
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;,
you might get something looking like Fig. 10 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. Initial Write FSM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-fsm-initial.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-fsm-initial.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see all of the four stages of the transaction we just
discussed above.  Sadly, however, this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;,
diagram is far from complete.&lt;/p&gt;

&lt;p&gt;Let’s work through some of the problems.  First, my entire goal was
throughput.  Fig. 9 illustrates a transaction that takes &lt;code class=&quot;highlighter-rouge&quot;&gt;N+2&lt;/code&gt; clock periods,
and our state machine in Fig. 10 doesn’t allow back to back transactions.  So
let’s start adding some more states and transitions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In order to avoid stalls, we’ll need to make sure to raise &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; on the
same clock that &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; is true.  Worse, in order to register
everything, we’ll need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; on the clock before
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; are true.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 11. Registered to Combinatorial Skid buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/skidbuffer-blockdiag.svg&quot;&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-blockdiag.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What should we do, though, if &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY &amp;amp; WREADY &amp;amp; !WVALID&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;To solve this problem, I chose to use a &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
   buffer&lt;/a&gt;.  The
   &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
   shown in Fig. 11 on the left,
   will take a registered interface and produce a combinatorial interface.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;That still leaves us with the condition where we’ll need to transition
from &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID &amp;amp; WVALID &amp;amp; WLAST&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; BVALID&lt;/code&gt; (and possibly
&lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST&lt;/code&gt;).  This will require two more states, one for
&lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY &amp;amp; BVALID&lt;/code&gt; and another for &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY &amp;amp; WLAST &amp;amp; BVALID&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;This last state, however, gives us another problem.  What happens when
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; !BREADY&lt;/code&gt;?  In that case, we’ll need to store our new response
in a skid buffer, drop &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;, and wait for &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I then tried to diagram out this state machine for you, to help you understand
all the various parts and pieces of such a transaction.  What I came up with
was Fig. 12 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Full write FSM diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-fsm.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-fsm.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sadly, it’s not very understandable, much less complete.  Even worse,
this state diagram wasn’t helping me.  Instead, I gave up in frustration.
There are just too many states and transitions to make this understandable,
much less correct.&lt;/p&gt;

&lt;p&gt;It’s certainly not simple enough to understand from examination.&lt;/p&gt;

&lt;p&gt;So, let me let you in on a secret: I didn’t use a state diagram to build &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What??  Why not?&lt;/p&gt;

&lt;p&gt;Because, in my mind, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
core&lt;/a&gt; was never
an &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;.  It didn’t
have the typical &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
structure.  In my mind, it was always a series of &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline
stages&lt;/a&gt;,
together with the logic necessary to handle the transitions from one stage
to the next.  As I designed &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
core&lt;/a&gt;,
I envisioned three write stages, separated by a clock, as shown in
Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. The three write stages&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-pipeline.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-pipeline.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first stage was the &lt;code class=&quot;highlighter-rouge&quot;&gt;AW*&lt;/code&gt; stage where the &lt;code class=&quot;highlighter-rouge&quot;&gt;AW*&lt;/code&gt; signals would (or wouldn’t)
be valid.  In Fig. 13, you can see how this stage will either take a clock
cycle or not, as provided by the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
The second stage was the
&lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; stage, ending in the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; internal
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
Timing was driven by this write-data stage, and no more than one request was
ever allowed to be within it.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; were true, the response
would either go into the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
called &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; in Fig. 13, or directly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; output stage.
Further, a request could always be accepted any time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If both &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; stages were empty, a request could always
be accepted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Otherwise, accepting a request required several other conditions to be
true together:&lt;/p&gt;

    &lt;p&gt;a. Either &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; was false, or &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; was true, indicating that nothing
   was blocking at the final stage, and …&lt;/p&gt;

    &lt;p&gt;b. If something was in the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage, versus in the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;
   &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
   then &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp;&amp;amp; WLAST&lt;/code&gt; must both be before accepting a new request.&lt;/p&gt;

    &lt;p&gt;Note that, in this design, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; will never be true unless
&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is also true.  This is a common
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
property, but we can still use a &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
assertion&lt;/a&gt;
if we aren’t confident this will be true.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, instead of using the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
in Fig. 12 that left me more confused, I chose
to focus instead on a signal trace diagram to understand what needed to be
done.  My goal, as you recall, was to pack all of these parts and pieces
of a write transaction together as tightly as possible, so that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;
could
support &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; being true without interruption across multiple bursts.  The
result should look something like Fig. 14 on the left.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 14. Two burst write transactions, back to back&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-wr-double.svg&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-wr-double.svg&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Building &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this
design&lt;/a&gt;
required two tricks.  The first we’ve already discussed,
and that’s the two &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffers&lt;/a&gt;–both on the
&lt;code class=&quot;highlighter-rouge&quot;&gt;AW*&lt;/code&gt; request side and again on the &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; side.&lt;/p&gt;

&lt;p&gt;The second trick, which has already separated our approach today from many
other approaches to building an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
slave, is that we’ve chosen to use the various output signals in place of
any separate &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
state.  This will keep us from making the &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;same mistakes Xilinx
made&lt;/a&gt;, when their logic
checked for &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID &amp;amp; AxREADY &amp;amp; something_else&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Above all else, we’re going to lean very heavily on the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
properties to convince ourselves that this works.&lt;/p&gt;

&lt;h2 id=&quot;the-skid-buffers&quot;&gt;The Skid Buffers&lt;/h2&gt;

&lt;p&gt;The key to high throughput when using the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt;
is really the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;.
If you are going to do anything with
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;,
whether the full
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; standard,
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
or even &lt;a href=&quot;/doc/axi-stream.pdf&quot;&gt;AXI stream&lt;/a&gt;, you &lt;em&gt;need&lt;/em&gt; to
understand &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why are
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
so important?  Because unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; output signals must not depend upon
any combinatorial paths from the inputs according to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification&lt;/a&gt;.  This is great for
maintaining high speed signaling when using high fanout signals, but it
becomes a challenge for the designer and they can be an ugly challenge
as well for the engineer who wants to verify his design with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve now discussed
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
on &lt;a href=&quot;https://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;
several times.  First, under the name of
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;“double buffers” when discussing pipeline
strategies&lt;/a&gt;,
and then again when we discussed &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;building a functioning AXI-lite
slave&lt;/a&gt;.
More recently, I devoted &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;a whole article to the
topic&lt;/a&gt;.
&lt;a href=&quot;http://fpgacpu.ca&quot;&gt;Eric LaForest&lt;/a&gt; also has posted a &lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;wonderful article
describing them under the name
“skid buffers”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For these reasons, I won’t discuss
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
further here, but I will encourage you to go back and examine one or more of
these articles before reading further.&lt;/p&gt;

&lt;h2 id=&quot;the-write-channel&quot;&gt;The write channel&lt;/h2&gt;

&lt;p&gt;Are you ready to dive into the code?&lt;/p&gt;

&lt;p&gt;The first thing I do when building something to process
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals is to rename the parameters
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; provides.  This isn’t because I dislike their
naming convention, on the contrary, I like it: with the exception of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_S_&lt;/code&gt;
their convention is quite descriptive.  I understand therefore that
&lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/code&gt; is the number of address bits associated with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;em&gt;slave&lt;/em&gt; port to my design.  It’s just that using this long identifier means
that either I need to extend the width of my text editor and thus lose the
monitor size gains of the last decade, or I need to abbreviate these values.&lt;/p&gt;

&lt;p&gt;Here are my chosen abbreviations: &lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; for address width, &lt;code class=&quot;highlighter-rouge&quot;&gt;DW&lt;/code&gt; for data width,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt; for transaction ID width.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_S_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These shorthand parameters are defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s, so Vivado
should still be able to recognize this file.&lt;/p&gt;

&lt;p&gt;Further, you may remember that
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI addresses&lt;/a&gt;
are not like
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt; addresses.  In
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;,
the address doesn’t reference a &lt;em&gt;word&lt;/em&gt; of memory, but rather an &lt;a href=&quot;https://en.wikipedia.org/wiki/Octet_(computing)&quot;&gt;octet
of memory&lt;/a&gt;.  This means
that there will almost always be some number of low order address bits that
aren’t really necessary to any word-level transaction.  This is the purpose
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;LSB&lt;/code&gt; short-hand above.  When we send our address
to our downstream non-AXI port, we’ll only send the &lt;code class=&quot;highlighter-rouge&quot;&gt;[AW-1:LSB]&lt;/code&gt; bits to
simplify the processing there.  Sub-word handling by the external slave
will be done using the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wstrb&lt;/code&gt; signals.&lt;/p&gt;

&lt;p&gt;The next step is to handle the incoming write address
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
I’m going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;m_aw&lt;/code&gt; prefix to reference the values coming out of
and going into this &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AW*&lt;/code&gt;
signals going into the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt; will maintain
their names, and denote a separate stage of processing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Skid buffer
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;skidbuffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;awbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWBURST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;S_AXI_AWLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_awvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awburst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These &lt;code class=&quot;highlighter-rouge&quot;&gt;m_aw*&lt;/code&gt; signals are the equivalent of their &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AW*&lt;/code&gt; counterparts,
with the exception being that &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; is combinatorially determined.
Similarly, there’s combinatorial logic within the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
to generate the other &lt;code class=&quot;highlighter-rouge&quot;&gt;m_aw*&lt;/code&gt; signals.  That way this
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
won’t cost us any clock delays.&lt;/p&gt;

&lt;p&gt;The next piece of logic is, in many ways, the key to understanding the write
logic.  This is where we’ll control the ready lines for both the write address
and the write data channel.&lt;/p&gt;

&lt;p&gt;As mentioned above, we’ll idle with &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt; high and &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Following Xilinx’s convention, I’m using the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_*&lt;/code&gt; as a prefix to
describe registered values that will then drive the outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt;
signals.  The exception to this rule is &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; will be the &lt;em&gt;registered&lt;/em&gt; component of the ready signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;, going into the combinatorial side of the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
above.  Therefore, imagine, as you go through this, that we are setting
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; anytime we set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;, but remember that we may also
override this registered value to set &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; high when accepting
subsequent packed bursts across the channel.&lt;/p&gt;

&lt;p&gt;From there, the basic starting logic is simple: once &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;
are true, move to the write data stage of our burst processor.  That means
we’ll drop &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; until the the packet clears the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Do you remember the &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;post about the most common AXI
mistake&lt;/a&gt;?
It’s a &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;common mistake&lt;/a&gt;
to check for anything other than &lt;code class=&quot;highlighter-rouge&quot;&gt;*valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*ready&lt;/code&gt; at the step above.
Were we to do that, we might miss and therefore drop an incoming request.&lt;/p&gt;

&lt;p&gt;Next, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; is set so we can accept another packet if this is the
last data value in the burst and if there’s an open position in our outgoing
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
We don’t need to check for two positions, just one.  However,
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt; will consume one of the two positions.
Similarly, we’ll drop &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt; and leave this processing stage once we
the last data value is accepted.&lt;/p&gt;

&lt;p&gt;This gets a bit more interesting, though, in the next step.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; below
only looks like it is checking for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID &amp;amp; S_AXI_WREADY&lt;/code&gt;.  Remember,
this is the second &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; in a cascaded &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block.  Therefore, we are now
checking &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID &amp;amp;&amp;amp; S_AXI_WREADY&lt;/code&gt; &lt;em&gt;and&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;!m_awvalid || !m_awready&lt;/code&gt;.  How is this not violating &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;the basic rule of AXI
handshaking&lt;/a&gt;?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Originally, when I wrote this code, it didn’t violate the rule because I
guaranteed that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; would be false during the data stage of this
transaction.  That was arranged by the code above.  This worked well, but it
cost me a clock of throughput on every burst.&lt;/p&gt;

&lt;p&gt;Now, and we’ll get to this in a moment, there’s the possibility that
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; might be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID &amp;amp;&amp;amp; S_AXI_WREADY&lt;/code&gt;.  In particular,
it may be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;, and so we’d be ready at that
time to accept another burst.  Hence, I’m not violating the rule, rather
I’m combining two possibilities in the first part of this cascaded if.&lt;/p&gt;

&lt;p&gt;We can now move on to the rest of this key logic block.  At this point, though,
most of the critical work has been done.  All that’s left is to make
cerain that &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt;, once lowered to deal with the write data, is
properly raised again once done.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Specifically, we’ll want to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; clear as long as we are in the
write data stage (the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage) of our processing or if the
outgoing &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is full, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; is true.  &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; will only be true, however, if
then the outgoing &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt; is stalled.
Remember, if the outgoing
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is full, that is if the internal buffer within it has valid data within it,
then the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; signal at the output must also be true, so we
don’t need to check for it here.&lt;/p&gt;

&lt;p&gt;In all other cases, we’ll clear the stall condition so we can accept another
write address request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also need to copy and cache the values we’ll need to calculate
subsequent &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;write
addresses&lt;/a&gt; within
the burst: the burst type, virtual bus width, &lt;code class=&quot;highlighter-rouge&quot;&gt;wsize&lt;/code&gt;, and the burst length.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wburst&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awburst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wsize&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wlen&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_wr_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this logic, &lt;code class=&quot;highlighter-rouge&quot;&gt;next_wr_addr&lt;/code&gt; is created  by applying our
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;AXI address logic to the current write address
to get the next address&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;write address
calculation&lt;/a&gt;
itself now becomes really simple, given the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_addr&lt;/code&gt;
module &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;we built earlier&lt;/a&gt;.
On &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid &amp;amp; m_awready&lt;/code&gt;, we set &lt;code class=&quot;highlighter-rouge&quot;&gt;waddr&lt;/code&gt; according to the incoming address.
Then, on every accepted write value, it gets set to &lt;code class=&quot;highlighter-rouge&quot;&gt;next_wr_addr&lt;/code&gt; above.&lt;/p&gt;

&lt;p&gt;All that’s left is to call &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_addr&lt;/code&gt; to get that next write address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;axi_addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;get_next_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wburst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;next_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before we move on to the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
for the return channel, let’s not forget to write this
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; data to our external slave interface.
The neat thing about this is that, by this point in our processing, 
this last bit is easy.  We can just set these outputs to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; inputs and our registered address,
&lt;code class=&quot;highlighter-rouge&quot;&gt;waddr&lt;/code&gt;, and use one little piece of combinatorial logic, &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY&lt;/code&gt;,
to indicate that it is time to write.&lt;/p&gt;

&lt;p&gt;This should give our external AXI-unaware slave component plenty of slack to
actually process this request.  Indeed, by this point, we’ve removed all of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
complexity from what this external core needs to process.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_we&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s now time to start looking at the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
for the return response.&lt;/p&gt;

&lt;p&gt;Unlike the earlier
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
I share the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bid&lt;/code&gt; signal with the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt; stage, which forces this
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
to have a bit of a different structure–enough so that I’ve written this
write return &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
into the module’s logic rather than referencing a submodule.&lt;/p&gt;

&lt;p&gt;The critical part of this
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is the valid signal, indicating whether or not something is within it.
In this case, we’re calling this signal &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;.
As might be expected, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; is cleared on any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; is set, however, if two conditions are true, as shown in
Fig. 13 above.  To follow, consider that any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt; we want to set the outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.  The only time
when we cannot set &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is if &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is already set, but &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; is
clear (indicating a stall condition).  In that case, we still need to note
that we are ready for a second response somewhere else–i.e. in the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.  Hence, the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
is only activated any time a value would be placed into the outgoing
position, but when the outgoing position is already full and stalled..&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the stall is clear, the contents of the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.
will always move forward to the outgoing position, so we can then clear the
internal valid line, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I broke the basic mold of the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;
with the transaction ID.  We need to record the transaction ID anytime
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid &amp;amp; m_awready&lt;/code&gt; are both true.  Since we are guaranteeing that there
will always be a place for any accepted write transaction in either the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt; at the end
or the return response position, we can then just copy the ID from &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awid&lt;/code&gt;
to the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;’s
data store.  If the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;
isn’t valid yet, its data is at least still allocated as part of our scheme
to keep from needing to drop &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; mid-transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_bid&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can even simplify this somewhat by only checking &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; instead of both
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, anytime the return transaction position is idle we can forward this
transaction identifier to our return register, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bid&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_bid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_bid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is one of those cases where the logic cannot be simplified further.
(I know, I tried.)  What we want is to forward to the outgoing response
position any time &lt;code class=&quot;highlighter-rouge&quot;&gt;!(S_AXI_BVALID &amp;amp;&amp;amp; !S_AXI_BREADY)&lt;/code&gt;.  If we only check for
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, however, the bus master isn’t required to keep this ready
while waiting for a response.  We might find that &lt;code class=&quot;highlighter-rouge&quot;&gt;BID&lt;/code&gt; then never gets set
properly.&lt;/p&gt;

&lt;p&gt;You may also note that this handling of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; requires a minimum of two
three clock periods.  On the first clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awvalid &amp;amp; m_awready&lt;/code&gt; will be
true qualifying &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awid&lt;/code&gt;.  On the second clock period, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bid&lt;/code&gt; will contain
the current transaction ID.  This is also the earliest
period where &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; will be true for this transaction.  It may also be
the last period of the transaction, were &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WLAST&lt;/code&gt; to be true as well.
Then, on the third clock period, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bid&lt;/code&gt; would contain the correct
write burst identifier.&lt;/p&gt;

&lt;p&gt;Now that we have the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
in please, we can discuss the return &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll want to set this signal true any time &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID &amp;amp; WREADY &amp;amp; WLAST&lt;/code&gt;.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; were already true, then setting it again–even if the
channel were stalled–won’t hurt.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; is true, we can move the
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
valid signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;, into the output position.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves one big piece of write logic we haven’t yet addressed, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;.
As I mentioned above, this piece of logic is built combinatorially off of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The one piece of combinatorial logic is required in order to be able to
accept a new write address on the last clock cycle of the write data–especially
because we can only do so if there is, or is about to be, an open position
in the outgoing
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we know that if &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; is true, then there’s at least one position
in the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;–the
one for the write data once it completes.  That was
one of the design rules we’ve chosen–one I tried to illustrate in Fig. 13
above.&lt;/p&gt;

&lt;p&gt;We’ll now need to make certain, if we set the ready line for the write address
channel, that a second output position is also available.  Since our outgoing
buffer only holds only one position and that’s already taken,
the final outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; position must be clear or clearing in order to
accept a new transaction.  Hence, we’ll need to check that the
current write transaction can fit in the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; output stage on the
next cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that’s left of the write channel side is to clean up.  Specifically,
following Xilinx’s convention, we’ve set register values &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_*&lt;/code&gt; but the
actual I/O values are named &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt;.  We’ll need to copy our values to
the actual I/O ones.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BID&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_bid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also need to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRESP&lt;/code&gt; return code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
offers four return code possibilities: OKAY, EXOKAY, SLVERR, and DECERR.
Since this simple slave doesn’t produce any errors, neither SLVERR nor DECERR
make sense to return.  EXOKAY is only allowed if this slave supports exclusive
access, which we don’t.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
exclusive access protocol is rather complex.  It involves a first
request to read a value with &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLOCK&lt;/code&gt; set.  If the slave responds with &lt;code class=&quot;highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt;,
the slave then needs to record the
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;address details&lt;/a&gt;
of the transaction.  If
at some time later, the same register is written to with &lt;code class=&quot;highlighter-rouge&quot;&gt;AWLOCK&lt;/code&gt; high and
no intervening writes, then the slave may return &lt;code class=&quot;highlighter-rouge&quot;&gt;EXOKAY&lt;/code&gt; and adjust the
register.  If the slave returns &lt;code class=&quot;highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; instead, the register is not allowed to
be modified.&lt;/p&gt;

&lt;p&gt;Since we aren’t supporting this exclusive access portion of the protocol,
we’ll set the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRESP&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b00&lt;/code&gt; to indicate an &lt;code class=&quot;highlighter-rouge&quot;&gt;OKAY&lt;/code&gt; response.  I may need
to come back and add exclusive access support later, but that will be as part
of a separate blog article.&lt;/p&gt;

&lt;p&gt;Therefore, since this doesn’t produce any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;,
nor does it support exclusive access, 2’b00 will always be the correct
response.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the write channel, and a high speed one at that!  Remember, we managed
to get 100% throughput (one write burst per clock) once fully loaded.  That’s
a bit of performance &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demo code never
achieved&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this is performance you want in your design, you can find &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this AXI slave
core here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-read-channel&quot;&gt;The Read Channel&lt;/h2&gt;

&lt;p&gt;Our basic approach to handling any read request will be to aggressively
read any time and as often as we can, pushing as much logic to the left
in this operation as we can.  That also means we’ll issue a slave read
request &lt;em&gt;on the same clock that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is true&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We’ll start with &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;.  As with the write address ready, this one
also idles high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then on any request, we’ll drop &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite.  If we did that, then we would require a minimum of two
clocks for every one-burst read: One clock for &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt; and a second
where &lt;code class=&quot;highlighter-rouge&quot;&gt;!ARREADY&lt;/code&gt;.  This would prevent us from being able to do back-to-back
reads for short bursts.&lt;/p&gt;

&lt;p&gt;So let’s adjust this so that on any read address request, we drop &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;
if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;, our outgoing sub-slave read signal, is also true.
This sub-slave read signal is a combinatorial signal that will only be true
if the outgoing read data channel isn’t stalled.  To support burst
transactions, we’ll need to only let &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; stay high if the burst
length is one, or equivalently if &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN==0&lt;/code&gt;.  Remember, in
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;,
the burst length is always one more than &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN&lt;/code&gt;, so we’ll go high
immediately on any single item burst request where &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is also high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, any time the output channel is not stalled, we can check whether we
are about to place the last value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This really doesn’t make much sense without knowing what &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is.
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is the name of a counter I’m using to store the number of items
currently remaining in this burst.  It is initially set to &lt;code class=&quot;highlighter-rouge&quot;&gt;AXI_ARLEN+1&lt;/code&gt;.
Ever after, on any read, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is decremented.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; reaches
zero, the read is complete and &lt;code class=&quot;highlighter-rouge&quot;&gt;AXI_RVALID&lt;/code&gt; should be low.&lt;/p&gt;

&lt;p&gt;That’s why we can check for &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen == 2&lt;/code&gt; above.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen == 2&lt;/code&gt;, then
on the next cycle, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; will be one and &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; will then be set.  We
then need to be able to accept a new read request, as shown in Fig. 7 above,
or we won’t be able to continue our high speed transaction.&lt;/p&gt;

&lt;p&gt;Here’s what the logic for &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; looks like.  Because we are using this
to know our position in a read burst, it must idle at zero.  That way
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen == 0&lt;/code&gt; can also be used as an indication that we are no longer within
a burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On any read request, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; to the number of items remaining to
be returned, or &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARLEN+1&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, that’s the basic idea.  That’s not quite it though.  The problem is
that, if there’s already an item stalled in the return channel path, then
we still need to return that item too.  We’ll
therefore merge that last value, the one that is waiting for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;,
into our “to-be-returned” &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; counter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works because the value that’s stalled in the return position has already
been read.  It won’t get updated by this new read address request.&lt;/p&gt;

&lt;p&gt;Any time a read value is returned, we’ll then simply decrement our counter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we didn’t check whether &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; was greater than zero or not.
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen &amp;gt; 0&lt;/code&gt;, and a basic assertion (below)
proves that to be the case.  Hence we only need to check &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How about our &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;read address&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;This one’s a little tricky.  Because we stuffed our first read operation into
the same clock cycle as &lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt;, the
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;address&lt;/a&gt;
we record needs to be not the address given, but rather the
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;next address&lt;/a&gt;–assuming
we read on the same cycle.  This also means that the values we feed to our
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_addr&lt;/code&gt; next-address
module&lt;/a&gt; will need to
depend upon whether the read address is sourced from
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARADDR&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;raddr&lt;/code&gt; below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Calculate the next read address
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_rd_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Actually &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;calculating the next address requires registering and keeping track
of several values from the AXI address
packet&lt;/a&gt;:
the burst type, the transfer size per beat, and the total number of  beats.
While we’re at it, we’ll copy the read ID as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rburst&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rlen&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we have all these values, we can then &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;calculate the next read
address&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;axi_addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;get_next_rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARSIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;next_rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This may be one of the more delicate parts of this operation.  A quick
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; check,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;yosys -p &lt;span class=&quot;s1&quot;&gt;&#39;read -sv axi_addr; synth_xilinx; show&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;reveals an image showing that the logic is four levels deep.  Adding this
address check, therefore, might make it difficult to meet timing.  That means
that I might need to revisit this step later if/when I ever run into timing
problems here.&lt;/p&gt;

&lt;p&gt;By the way, if you’ve never tried the
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_show.html&quot;&gt;yosys &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; command&lt;/a&gt;,
it can be very instructive to see and learn how
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
is choosing to synthesize your code.&lt;/p&gt;

&lt;p&gt;But I digress.&lt;/p&gt;

&lt;p&gt;Now that we know
&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;the address&lt;/a&gt;,
we’re able to drive the read ports of our (simplified) external slave.  These
include &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;, the flag that indicates when to read, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_raddr&lt;/code&gt; to indicate the address to read from.&lt;/p&gt;

&lt;p&gt;We’ll want to read on the same clock as any incoming request, or equivalently
any time &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; is false, indicating that we are still working through
the middle of a burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if the read return channel is ever stalled, such as when
&lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_RVALID || S_AXI_RREADY&lt;/code&gt; then we cannot perform our read lest
we cause our outgoing data to change before it has been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve also discussed generating the read address above.  On any given clock
cycle, this address will be given by &lt;code class=&quot;highlighter-rouge&quot;&gt;raddr&lt;/code&gt; if we are in the middle of a
burst, such as when &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_ARREADY&lt;/code&gt;, and then by &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt; on the first
beat of any burst.  We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; to tell the difference between
these two choices.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;o_raddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice also that we’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;LSB&lt;/code&gt; above to drop the subword addressing.
I’ve done this for the simple reason that I don’t have any modules that
would use the subword address.&lt;/p&gt;

&lt;p&gt;That gets us past accepting the read request from the address channel,
storing the details of that request and updating those details from one beat
to the next.  We’ve also issued the read request from our external peripheral.
We just haven’t set the read output return values yet.&lt;/p&gt;

&lt;p&gt;Let’s do that now.&lt;/p&gt;

&lt;p&gt;Typically, the most difficult part of any of these channels is either the valid
or the ready signal–whichever one you have control over, whether master or
slave.  These signals are just the type of signals that you can’t afford to
mess up.  If you mess up the data, the bus will still work.  If you mess up
the response, your program might fail but the bus won’t lock up.  On the other
hand, if you mess up the valid/ready signals, the return ID signal, or even
the last signal, you might well lock everything up hard.&lt;/p&gt;

&lt;p&gt;So let’s keep this simple.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any time we read from memory, we’ll set the outgoing valid signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Keep in mind, this isn’t quite as simple as it looks since we’ve already put
a some combinatorial logic into the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; signal.  One of the critical pieces
of logic there is the piece that forces &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; to be zero any time the bus is
stalled.&lt;/p&gt;

&lt;p&gt;Next, if &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is low, then we can clear the return valid signal any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s now turn our attention to the return ID signal next.  This particular
signal can &lt;em&gt;only&lt;/em&gt; change if the return channel isn’t stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, the new ID can either be the ID from a newly accepted burst,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or alternatively the ID we saved in our buffer when the new burst was
accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, the &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; signal uses the same logic as the return ID.  As
with the ID signal, it cannot change if the return channel is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The return channel will be stalled anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID &amp;amp;&amp;amp; !RREADY&lt;/code&gt;.  The
above expression is just this stall logic negated according to &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan&#39;s_laws&quot;&gt;De Morgen’s
laws&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the return channel is not stalled, then we have a couple of cases to deal
with.  The first is if we just accepted a request, indicated by
&lt;code class=&quot;highlighter-rouge&quot;&gt;ARVALID &amp;amp; ARREADY&lt;/code&gt;.  In that case, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast&lt;/code&gt; if the burst
only had a single beat to it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise we need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast == (axi_rlen == 1)&lt;/code&gt;.
Ideally, we’d just set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast &amp;lt;= (axi_rlen == 1)&lt;/code&gt; but this ignores the
possibility of &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; changing on this clock as well due to a return
value being accepted.  Hence, we set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlast&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; is about
to become one, or if the interface is stalled then we simply set it based
upon the current value of &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As for setting &lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt;, the external sub-slave did that for us.  Remember
how we insisted that it have the following read logic?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_raddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_rd&lt;/code&gt; signal is key!  This allows us to just set the
&lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; output combinatorially based upon this &lt;code class=&quot;highlighter-rouge&quot;&gt;i_rdata&lt;/code&gt; input.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_rdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the slave were to set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rdata&lt;/code&gt; on any other criteria, then it might
possibly change &lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; while the output channel was stalled, as indicated
by &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp; S_AXI_RREADY&lt;/code&gt;.  This would be a protocol violation, so it
is important that the slave only set &lt;code class=&quot;highlighter-rouge&quot;&gt;RDATA&lt;/code&gt; whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is also
true.&lt;/p&gt;

&lt;p&gt;The rest of the design simply involves setting our various output signals to
their internally registered counterparts.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RID&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_rlast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all it takes to create a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;high throughput AXI slave
design&lt;/a&gt;.
Feel free to check it out
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, yes, but the key question is, does it work?
We’ve already seen that there were &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;both several bugs in Xilinx’s design,
as well as noting that it couldn’t handle any significant
throughput&lt;/a&gt;.  How
can we be sure that this design is any better?&lt;/p&gt;

&lt;p&gt;For that we’ll turn to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;The majority of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
work we need will be done by a formal property checker.  That will
make a lot of this verification work easy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxi_slave&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXSTALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ID_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_slave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Address write channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;m_awid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;m_awlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_awsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_awburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awqos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Write Data Channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Write Data
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Response ID tag. This signal is the ID tag of the
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// write response.
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;S_AXI_BID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Read address channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;S_AXI_ARID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;S_AXI_ARLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arburst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARBURST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARCACHE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arqos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;S_AXI_ARQOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Read data return channel
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rlast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Formal outputs
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Including the property file by itself is usually enough to find errors
within the design.  Indeed, just adding the property file alone to someone
else’s core, with whatever strange logic within it that I’m not familiar with,
has been all I’ve done to find most of the errors I’ve shared on
&lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s not enough to &lt;em&gt;prove&lt;/em&gt; that the design has no errors.&lt;/p&gt;

&lt;p&gt;For that, we need to turn to
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
Further, when using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
we need to add constraints to tie the state found within the
formal property file to the state of our design.&lt;/p&gt;

&lt;p&gt;The following are several examples of the properties I’ve used to do this.&lt;/p&gt;

&lt;p&gt;We’ll start with the write side.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write induction properties
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The formal property file counts the number of outstanding address write
requests.  In the case of this design, there will never be more than
two outstanding burst writes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s look at each of those three possibilities, whether zero, one,
or two outstanding write bursts.&lt;/p&gt;

&lt;p&gt;If there are two outstanding requests, then one of them must be in the
return position, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if only one request is outstanding, then it must be in
either the return &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; pipeline stage or in the &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; accepting
data pipeline stage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if nothing is outstanding on the write channel, then neither &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;
nor &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; should be true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This same logic is then repeated to check burst IDs.
We’ll skip that here and move on.&lt;/p&gt;

&lt;p&gt;I mentioned above that any time a value was in the outgoing write
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;,
that is any time &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt; was true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; must also be true.
Let’s double check that here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also need to check the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; signal.  As you may recall, this
was the registered component of &lt;code class=&quot;highlighter-rouge&quot;&gt;m_awready&lt;/code&gt;, the incoming
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffer&lt;/a&gt;
read signal.  Specifically, we want to make absolute certain that we’ll
be ready to read any new write address any time there’s nothing in the
write data stage, where &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt;, or in the outgoing &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt;,
as marked by &lt;code class=&quot;highlighter-rouge&quot;&gt;r_bvalid&lt;/code&gt;.  Indeed, this property is so strong, it’s a two
sided implication that we’ll want to check both ways.  For that reason,
I’m using an equality assertion to check it below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the neat parts of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
formal property set is that one of the outputs
from it is the current write address.  You can use this to double check
your own address computation.  We’ll do that here, and so double check that
our outgoing address truly does match the address it should be.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_addr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that, we can now turn our attention to verifying the read side.  As
before, we’ll focus on those properties that are necessary to validate that
this works when using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
since the basic &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties will take care of the rest.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read induction properties
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As with the write half, there will never be more than two outstanding read
requests when using this core.  Within the formal property set, there’s a
counter capturing the number of read bursts–just like the counter for writes
above.  Here, we’ll just double check that this number is never out of bounds
with the logic above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have to define what that means within our core.  In this case, and
for this core, if the number of outstanding bursts is ever more than one,
then there must be a value in the output position waiting to be returned.
Not only that, it must be the last item from the previous burst.  Further,
our &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt; signal must be low because we’ll only end up in this situation
if the response path were stalled on the last cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not only will the formal property set count the number of bursts that are
outstanding, it will count the total number of outstanding values that need
to be returned.  This number should match the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rlen&lt;/code&gt; value within our core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since the external sub-slave core will never stall in this design, we also
know that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID&lt;/code&gt; must be true any time any request is outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_nbursts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, if there’s anything outstanding, then either &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is
low blocking any incoming requests, or &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp; S_AXI_RLAST&lt;/code&gt; are high
indicating that we are on the last beat of the burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, if nothing is outstanding, then we want to make certain that
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is set so that we’ll be ready for the next burst.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The property set also provides for some return ID checking, which I’ll skip
here.  There’s also a read address check, which we can use to make certain
that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_raddr&lt;/code&gt; is properly set.  That check requires tracking the address
from &lt;code class=&quot;highlighter-rouge&quot;&gt;o_raddr&lt;/code&gt; to the return position where it would be checked.&lt;/p&gt;

&lt;p&gt;Instead of working through those two tests, and for the sake of keeping things
short, I’d like to share one final read property.  Specifically, any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST&lt;/code&gt; becomes true, that is if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST &amp;amp; !$past(S_AXI_RLAST)&lt;/code&gt;,
then we want &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; to be high as well.  We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;$rose()&lt;/code&gt; for
this purpose to check this transition.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RLAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While I initially wanted to check for more than that, such as when
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is false when &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RLAST&lt;/code&gt; is true, that much has
already been captured above.&lt;/p&gt;

&lt;p&gt;Finally, we need one basic assumption, beyond those provided by the AXI
property set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Assumptions necessary to pass a formal check
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need to assume that the external sub-slave will behave properly.  That is,
it won’t change its value unless we’ve requested a read from it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;`
That should give you a basic, yet brief, overview of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal proof&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cover&quot;&gt;Cover&lt;/h2&gt;

&lt;p&gt;Normally I spend a section discussing cover properties.  In this case,
we’ve discussed one such cover property above.  I figured it was important
to point out that 
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
generated a trace demonstrating that this cover point could be hit.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15. The basic write cover trace, generated by the cover above&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/demofull/demofull-write-cover-trace.png&quot;&gt;&lt;img src=&quot;/img/demofull/demofull-write-cover-trace.png&quot; alt=&quot;A trace, showing that the AXI GPIO core requires six clocks per write&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&quot;gpio&quot;&gt;GPIO&lt;/h2&gt;

&lt;p&gt;For some strange reason, it seems like I’m always fielding questions on
whatever forum about the
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;AXI-GPIO&lt;/a&gt;
core provided by
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;.  In
particular, there’s a lot of individuals complaining on-line about how slow
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;this core&lt;/a&gt; is.&lt;/p&gt;

&lt;p&gt;Consider for example, the trace shown in Fig. 16 below, drawn from a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
property placed external to &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;the GPIO
core&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16. Cover trace from Xilinx&#39;s AXI GPIO v2 core, as provided by Vivado 2018.3&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/axi-gpio-writes.svg&quot;&gt;&lt;img src=&quot;/img/tweets/axi-gpio-writes.svg&quot; alt=&quot;A trace, showing that the AXI GPIO core requires six clocks per write&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, consider this: if all you did was connect &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;your own basic I/O
core&lt;/a&gt; to the output of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;,
you could create &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;your own GPIO
controller&lt;/a&gt;
running six times faster than &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot;&gt;this
one&lt;/a&gt;.
Even better, your new &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;GPIO
controller&lt;/a&gt;
could then even handle &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;both reads and writes at the same
time&lt;/a&gt;.
That’s not all.  If you used
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this core&lt;/a&gt;,
you wouldn’t need to waste more clocks going through Xilinx’s
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; bridge.&lt;/p&gt;

&lt;p&gt;That is, it would be 6x+ faster if only Xilinx’s interconnect supported
such a speed.  We’ll save that discussion for another day.  Until then,
it’s worth knowing that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;faster AXI
interconnect&lt;/a&gt;s
exist.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We’ve just worked through a basic
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;slave core&lt;/a&gt;.
Not only that, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;this slave
core&lt;/a&gt;
has the performance I’d expect from a high quality product–up to 100%
sustained throughput.&lt;/p&gt;

&lt;p&gt;Sadly, very few of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;slave cores I’ve examined&lt;/a&gt;
can handle this kind of throughput.
It’s a shame, too, since most people purchase
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
in order to get high speed performance for their own special
application–whatever it is.  On the other hand, if the logic
you use within your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is going to cripple your performance, then why purchase such
an expensive component or go through the pain of digital design?&lt;/p&gt;

&lt;p&gt;Perhaps the difference is the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
software, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; as
provided by &lt;a href=&quot;https://www.symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt;.  Because of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal tool&lt;/a&gt;,
and more specifically because of the formal AXI property file, I was
able to build this design with confidence–even though I couldn’t
figure out how to build a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM&lt;/a&gt;
state transition diagram for it.&lt;/p&gt;

&lt;p&gt;Yes, &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
truly make digital design a lot easier.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For wisdom is a defence, and money is a defence: but the excellency of knowledge is, that wisdom giveth life to them that have it.  (Ecc 7:12)&lt;/em&gt;</description>
        <pubDate>Wed, 29 May 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/05/29/demoaxi.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/05/29/demoaxi.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Building a Skid Buffer for AXI processing</title>
        <description>&lt;p&gt;I’m currently in the process of building and verifying several
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; cores,
primarily for the purpose of proving that my
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;em&gt;formal&lt;/em&gt; Verification IP core works.  Some examples of these cores include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demonstration core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;My own AXI slave core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;My own AXI crossbar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;A Bus Fault Isolator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;A WB to AXI converter&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;An AXI to WB converter.  This latter one will actually be two converters,
AXI-write to WB bridge and AXI read to WB bridge just like the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;AXI-lite to WB
converter&lt;/a&gt;
was also split into an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilwr2wbsp.v&quot;&gt;AXI-lite (write) to WB
converter&lt;/a&gt;
and an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilrd2wbsp.v&quot;&gt;AXI-lite (read) to WB
converter&lt;/a&gt;.
The two will then be connected together with a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbarbiter.v&quot;&gt;WB
arbiter&lt;/a&gt;,
just like it was with the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;AXI-lite to WB
converter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;these cores&lt;/a&gt; have already passed a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
check.  None of these, however, have passed the FPGA check save perhaps the
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx
core&lt;/a&gt;–which I’m assuming
others have used although I haven’t used it myself.&lt;/p&gt;

&lt;p&gt;These cores are all currently kept in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;Wishbone to AXI
bridge&lt;/a&gt; repository.  They aren’t there
because they really belong there, but rather for a lack of a better place.&lt;/p&gt;

&lt;p&gt;I’ve already blogged about &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;formally verifying Xilinx’s AXI demonstration
core&lt;/a&gt;.
I’ve even blogged about &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formally verifying Xilinx’s AXI-lite demonstration
core&lt;/a&gt;, as well as
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;demonstrating how to build a bug free AXI-lite
core&lt;/a&gt;.  I’d like to
do the same for my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI (full) slave
core&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Indeed, I’d like to blog about some or all of these other cores.  They each
have some very fascinating and useful features.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For example, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI slave
core&lt;/a&gt; is designed
to be able to sustain 100% throughput on both read and write channels.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxfull_2018_3.v&quot;&gt;Xilinx’s core&lt;/a&gt;,
for comparison, was only able to achieve just less than a 50% read throughput,
and something close to 100% on the write channel, although it didn’t quite
get there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
crossbar&lt;/a&gt; is
unusual in several respects.  First, it is unusual in that it is a public,
open source, &lt;em&gt;formally verified&lt;/em&gt;
&lt;em&gt;&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;&lt;/em&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;.  Every tried
to simulate both halves of a design, both the master and the slave side of
Xilinx’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;interconnect&lt;/a&gt;?
An &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;open source AXI
crossbar&lt;/a&gt;,
capable of being
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilated&lt;/a&gt;,
would be very powerful for this purpose.&lt;/p&gt;

    &lt;p&gt;Further, if either &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s AXI demo
core&lt;/a&gt;, or their &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
demo core&lt;/a&gt; is any
indication, then this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;crossbar&lt;/a&gt;
will have over twice the throughput.  Similarly, both of these cores had
latent bugs within them, having not been
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;.
Xilinx’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;crossbar&lt;/a&gt;
may have similar latent bugs or limitations within it.  While I’d
love to know, I don’t have access to the logic within their
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;crossbar&lt;/a&gt;
to find out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, my brand new &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;
will allow you to connect an unverified 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; design to a larger system,
knowing that the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;
will identify any descrepancies between your core’s
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
interface and the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties we’ve discussed that can be used to verify
and arbitrary slave, and return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
in the case of any error.&lt;/p&gt;

    &lt;p&gt;Just think about that for a moment.  When I worked with the
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V&lt;/a&gt;, I had
a bug in my own design where two &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt; responses got
collapsed into one.  The ARM on the Cyclone-V then &lt;em&gt;hung&lt;/em&gt; waiting for that
response.  It never came.  No matter what I tried, I couldn’t get access
into the design to see what had happened.  Had I had this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;,
the fault in my broken design would have been detected and a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; returned.  I &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;could have
then used logic&lt;/a&gt; to
dig into what was going wrong to find the bug.  Even better, the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;
now has a recovery mode, allowing access to the slave after a reset period.&lt;/p&gt;

    &lt;p&gt;Does this sound like a “get out to
&lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA-Hell&lt;/a&gt; for free” card at all?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is one key component, however, in all of these designs.  Without this
key, I wouldn’t be able to make any high performance
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; designs.  That key
component is the &lt;em&gt;skid buffer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I know, &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;I called these “double buffers” some time
ago&lt;/a&gt;,
but I am really starting to like the term “&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;skid
buffer&lt;/a&gt;”.  It captures the idea much
better, and so I’m going to switch terminology and start calling these things
“&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;skid buffer&lt;/a&gt;” from now on.&lt;/p&gt;

&lt;p&gt;If you are going to build or otherwise work with an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; design, you really
need to understand a basic
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;.
Indeed, that’s really the whole occasion for this post: I was going to post
about my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI slave
core&lt;/a&gt;,
and I realized that I was either going to need to spend a long section
explaining &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffers&lt;/a&gt;,
or I would need to separate that material into its own post.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-concept-of-the-skid-buffer&quot;&gt;The basic concept of the skid buffer&lt;/h2&gt;

&lt;p&gt;So, just what is a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;?
A &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;
arises from the need to create a stall signal in a &lt;em&gt;registered data only&lt;/em&gt;
context.&lt;/p&gt;

&lt;p&gt;Just to illustrate with an example, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; doesn’t use
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffers&lt;/a&gt;.
As a result, if the
CPU
needs to wait on a long instruction, such as a memory load or a divide, then the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;read-operands stage&lt;/a&gt;
needs to stall lest an instruction be lost.  If the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;read-operands stage&lt;/a&gt;
stalls, then the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;decode stage&lt;/a&gt;
needs to stall.  If the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;decode stage&lt;/a&gt;
needs to stall, the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;prefetch&lt;/a&gt;
needs to stall and so on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;div_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;op_stall&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu_halt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// other things
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dcd_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline_hazard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pf_stall&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;///
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; uses
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;&lt;em&gt;combinatorial&lt;/em&gt; stall
signals&lt;/a&gt; internally,
by the time the stall signal gets to the
&lt;a href=&quot;/blob/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt; stage
there’s not much slack left in the signal before the next clock edge.
Indeed, this was one of the problems I had when I tried to run the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
at higher clock rates.  (It wasn’t the only problem …)&lt;/p&gt;

&lt;p&gt;If I had used &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffers&lt;/a&gt;
instead, the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;stall signal&lt;/a&gt;
could have then been
&lt;em&gt;registered&lt;/em&gt;, breaking the timing accumulation.&lt;/p&gt;

&lt;p&gt;The problem is that if the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;stall signal&lt;/a&gt;
is registered, then the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;previous processing stage in the
pipeline&lt;/a&gt;
doesn’t know about the stall until it finishes its processing and registers
its values at the next set of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;.
At this point, the data needs to go somewhere or get dropped.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A basic skid buffer block diagram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-blockdiag.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Enter a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;,
such as the one shown in Fig. 1 at the right.&lt;/p&gt;

&lt;p&gt;The goal of the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;
in Fig. 1 is to bridge the divide between combinatorial logic on the one side
and the registered logic on the other–given that the outgoing stall signal
(i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_ready&lt;/code&gt;) can only be a registered signal.&lt;/p&gt;

&lt;p&gt;In this case, I’ve used the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signaling convention, so this &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;
has &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt; signals on both incoming and outgoing interfaces.&lt;/p&gt;

&lt;p&gt;There are two big criteria this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
must meet.  First, if ever
&lt;code class=&quot;highlighter-rouge&quot;&gt;VALID &amp;amp; !READY&lt;/code&gt;, the respective data values must remain constant into
the next clock cycle.  Second, no piece of data may be lost along the way.&lt;/p&gt;

&lt;p&gt;The first of these is very easy to express
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// First, we assume this property of the input
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Then we assert it when describing the output
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In all of my &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; cores, I
have wanted to use the data as soon as possible.  This means that I
don’t want to add any more buffers or path logic to my incoming data
than necessary.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. With no stalls, the buffer acts like a pass through device&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-passthrough.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hence, when all is going well and nothing is stalled, then the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffer&lt;/a&gt;
needs to operate like a pass through device, as illustrated in Fig. 2.&lt;/p&gt;

&lt;p&gt;In this case, both the incoming valid and data signals pass through
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;the core&lt;/a&gt;
and go directly to the output.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Copying the incoming data to an internal buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-copy.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If the output port is stalled however, then we need to copy everything to an
internal buffer, i.e. the “skid” buffer, lest the input data values get lost
on the next cycle.  This is the meaning of Fig. 3 on the right.  In this
figure, the incoming valid and data lines are copied directly to the buffer.
This gives the buffer its own internal valid and data lines.  Further down,
when we start discussing &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;the implementation of this
core&lt;/a&gt;
we’ll name these &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; respectively–but I’m getting ahead of
myself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4. The stall signal propagates upstream&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-active.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the next clock cycle, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;the
core&lt;/a&gt;
can output the incoming values from the last
cycle–the ones it just buffered.  Further, the incoming interface may
move on to its next value, but by now the incoming &lt;code class=&quot;highlighter-rouge&quot;&gt;o_ready&lt;/code&gt; signal has
fallen, so the module feeding this one now knows that it needs to wait.
This is shown in Fig. 4 on the left.&lt;/p&gt;

&lt;p&gt;The neat thing about all of this is that the logic necessary to implement a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffer&lt;/a&gt;
is fairly straightforward, so let’s take a peek at what it takes build one
of these today.&lt;/p&gt;

&lt;h2 id=&quot;optional-enhancements&quot;&gt;Optional Enhancements&lt;/h2&gt;

&lt;p&gt;After building this first skid buffer, I quickly realized there was a need
for a similar skid buffer, but with the output sides reversed.  That is,
could a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
be created where the incoming side was combinatorial
and the outgoing side was registered?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 5. The Skid buffer can be made to register outputs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-blockdiag-outreg.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Our
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
might then look like Fig. 5.&lt;/p&gt;

&lt;p&gt;In this case, the biggest difference are the set of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;
used to register the outputs.&lt;/p&gt;

&lt;p&gt;That sounds simple enough.  But what if I wanted both?  What if I could use
combinatorial logic to create the outgoing interface whenever the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
was used on an incoming &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
channel, and combinatorial logic on the incoming interface whenever the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
was used to drive an outgoing &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
channel?  To support both purposes, I created a parameter which could be used
to select between them, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt;.  When this parameter is set, the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
will register all outputs.  When it isn’t set, the outputs can
then be combinatorially driven.  In all cases, the upstream stall signal
will be registered.&lt;/p&gt;

&lt;p&gt;Surely that’s simple enough to build, right?&lt;/p&gt;

&lt;p&gt;Not quite.  I wanted more.&lt;/p&gt;

&lt;p&gt;I’ve noticed that with a lot of my
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
designs, that the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; signals
have a very high fan out.  They send data all across the chip.  When such
high fanout signals get set in a manner so as to minimize LUTs, they might
end up transitioning often–even when the valid signal (&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; for 
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;)
is low and so no reader is listening on the other end.
Further, every one of these high-fanout transitions takes power.&lt;/p&gt;

&lt;p&gt;What if I instead wanted to force any unused data lines to be zero when the
valid signal indicated the output was inactive?  This might prevent unnecessary
transitions, and perhaps even lower the power usage of my designs.  (This
remains to be determined, but this design is part of my preparation for
an experiment or two to see if this is so.)&lt;/p&gt;

&lt;p&gt;For this, I assigned another options, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is
really defined by a set of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set, then anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_valid&lt;/code&gt; is true then
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; should be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Supporting both of these options also means that we’ll be essentially
designing four separate
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer&lt;/a&gt;
designs, depending upon the options chosen.  These options will be
aintermingled throughout the design to control logic generation as well.
Therefore, when it comes to verification we’ll also need to make certain that
we verify all four of the designs found within
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;this code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verilog-code&quot;&gt;Verilog code&lt;/h2&gt;

&lt;p&gt;As is my normal practice, I’ll skip most of the introductory code, and jump
right into the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skid buffer
example&lt;/a&gt; itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skidbuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or perhaps we’ll just mostly skip this introductory code.&lt;/p&gt;

&lt;p&gt;I would like to point out that both &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt; are
single bit parameters, making true/false logical tests simpler and keeping
us from accidentally trying to set a value to something other than true (1)
or false (0).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// We&#39;ll start with skid buffer itself
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The internal skid buffer
itself is captured by two signals.  The first, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;, just
indicates that the internal buffer has valid data within it.  This is shown
in Fig. 3 above, which shows data going into the internal buffer, as well as
in Fig. 4 above, which shows data coming out of the internal buffer.&lt;/p&gt;

&lt;p&gt;The basic logic for this &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; signal is that we want it to go high any
time there’s a valid incoming signal but the outgoing path is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// We have incoming data, but the output is stalled
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then return to normal operation once the incoming ready signal returns
to normal, acting again as a pass through device.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The data logic is even simpler.  Any time the outgoing combinatorial side is
ready, we’ll just quietly copy the incoming value into our buffer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this doesn’t preserve our &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; property that any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is true &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; should be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To implement this low power logic, we’ll need to make certain that &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt;
starts at zero.  Not only that, but any time the design is reset then &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;
will be reset to zero, and so we’ll need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; to zero in both of
those cases–but only if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also means that any time the outgoing side &lt;em&gt;isn’t&lt;/em&gt; stalled we’ll need
to hold &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt; at zero as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we can copy the data any time the outgoing/upstream side isn’t
stalled, just like before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or rather, we can’t because that’s not quite right.  If we are in both
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; mode, and we are registering our output, then we need to make
certain we &lt;em&gt;only&lt;/em&gt; set this value when &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt; is true.  Otherwise if
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is true, the input and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; properties would force the
output to be zero.&lt;/p&gt;

&lt;p&gt;While I could write this as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I prefer expanding the logic out using &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan&#39;s_laws&quot;&gt;De Morgan’s
laws&lt;/a&gt;.  The condition below,
therefore, captures the same logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s also one very profound key feature to a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid buffer&lt;/a&gt;
implementation that I missed for the first several years I used them: the
output stall signal is given by the internal buffer’s valid signal.  The
two are signals completely equivalent.  Ok, I’ll admit I didn’t believe
it myself until I ran the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
proof, but that’s beside the point.  In this case, since we are using
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
READY/VALID notation, this means that the outgoing READY (not stalled)
signal is the opposite of our VALID signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I built and implemented many &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;s
before realizing this.  Even once I first saw this equivalency, it still
took some time (and
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
proofs) to believe it.  That said, it nicely simplifies any implementation.&lt;/p&gt;

&lt;p&gt;Now that we’ve dealt with the internal buffer, we can move on to the outgoing
interface.  We’ll need to split this logic into two sections, though: One
section for the simpler case where the outgoing registers are not buffered,
and another for the case where they are.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the unregistered case, we’ll want our output port to be valid
any time either the input port is valid, or if there’s data in our &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is also the combinatorial side of the interface, so you may note the use
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;always @(*)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for our output data, we’ll want that to come from the buffer any time the
buffer is active, or be a pass through otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, almost.  What if the incoming &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; didn’t observe the low-power
property?  In that case we’d need to only set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; to the incoming
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; value if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt; were also set, otherwise we’d want to force the
output to be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise the outgoing interface logic seems simple enough.  But what
about the case where we register the outgoing data?&lt;/p&gt;

&lt;p&gt;That one is just a touch trickier.&lt;/p&gt;

&lt;p&gt;Perhaps the valid line isn’t any different, save for the reality that it
can be reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That said, I’ve been burned by this kind of logic before, so I’ve gotten to
the point where I always build it with the structure above.  Notice the
&lt;code class=&quot;highlighter-rouge&quot;&gt;if (!o_valid || i_ready)&lt;/code&gt; condition.  This is the piece that’s caught me up
a couple of times.  It’s basically the same as saying
&lt;code class=&quot;highlighter-rouge&quot;&gt;if (!(o_valid &amp;amp;&amp;amp; i_ready))&lt;/code&gt; but rewritten using &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan&#39;s_laws&quot;&gt;De Morgan’s
laws&lt;/a&gt;, and so it describes
any time the outgoing interface is not stalled.&lt;/p&gt;

&lt;p&gt;My problem is that I keep wanting to add other logic to channels like this,
much like we discussed in the &lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;article about the most common AXI
mistake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be forwarned: if you play with registered signals using this basic handshake,
you will want to use this pattern and no more!  How do I know this?  Because
every time I do something different, the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools correct me.  This seems to be the only valid approach to signals
subject to the rules of this type of
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Does that mean that this format will apply to the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; signal as well?
Absolutely!&lt;/p&gt;

&lt;p&gt;We start with resetting &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set, and then
we refuse any further logic if the output is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key to making this work in a registered context is now found within the
next tidbit of logic.  First, if there’s something in the buffer, then that
needs to move to the output port.  If not, but if something is coming in on
the input port, then we’ll set to that output instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before, though, there’s an optimization we can take, but not if we are
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; mode.&lt;/p&gt;

&lt;p&gt;Before I leave this topic, notice the key feature of how I’ve used
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt;: If it &lt;em&gt;isn’t&lt;/em&gt; set, then all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; logic
(save the initial statement) just goes away.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is a
constant, the synthesizer can handle optimizing this logic away
if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is ever clear.  The same is also basically
true of &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt;, but there’s more going on with that signal.&lt;/p&gt;

&lt;p&gt;That’s all there is to the implementation of a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;skid
buffer&lt;/a&gt;.
As you can see, the logic is &lt;em&gt;really&lt;/em&gt; simple, and there are really only two
internal registers associated with it: &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_data&lt;/code&gt;.  If the outputs
are registered as well, then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; will also be registered.&lt;/p&gt;

&lt;p&gt;That leads us to the next step: proving that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;this
implementation&lt;/a&gt;
works and that it does what it is supposed to.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;We’ve already seen several of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties above.  I’ll repeat those again below in a moment.  For now, let’s
start with the reset properties.&lt;/p&gt;

&lt;p&gt;Following any reset, all of the valid lines need to be cleared.  We can assume
this of our input signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset properties
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RESET_CLEARS_IVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endproperty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, I declared this as a named property–a feature of the
SystemVerilog Assertion language.  I’ll come back to this in
a moment and either assert or assume it.&lt;/p&gt;

&lt;p&gt;We’ll also want to assume that any time the incoming interface is stalled,
that is any time there’s valid data at the input but &lt;code class=&quot;highlighter-rouge&quot;&gt;o_ready&lt;/code&gt; is low, the
valid signal needs to continue into the next clock cycle and the data isn’t
allowed to change.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDATA_HELD_WHEN_NOT_READY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endproperty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now here’s why I’m declaring these as named properties: when I went to verify
my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demofull.v&quot;&gt;AXI slave
core&lt;/a&gt; using
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;this buffer&lt;/a&gt;,
I realized that the &lt;a href=&quot;/formal/2018/12/18/skynet.html&quot;&gt;assumptions might void the
proof&lt;/a&gt;.  They had
to be converted to assertions for that proof, while left as assumptions within.&lt;/p&gt;

&lt;p&gt;To handle this, I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;SKIDBUFFER&lt;/code&gt; macro to determine if the properties
should be assumed or asserted.  Using this macro, I can choose to assume
or assert as necessary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SKIDBUFFER&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESET_CLEARS_IVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDATA_HELD_WHEN_NOT_READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;RESET_CLEARS_IVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IDATA_HELD_WHEN_NOT_READY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are the only two assumptions describing the incoming interface.&lt;/p&gt;

&lt;p&gt;On the outgoing side, we’ll quickly repeat the reset property: following any
reset, both valid signals need to be cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now start walking through both our internal and output signals.&lt;/p&gt;

&lt;p&gt;The big rule we want to preserve is that any time there’s an outstanding
request on the output port that’s stalled, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid &amp;amp;&amp;amp; !i_ready&lt;/code&gt;,
then the request must remain the same on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #1:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	Once o_valid goes high, the data cannot change until the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	clock after i_ready
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;disable iff (i_reset)&lt;/code&gt; just means that we won’t check this test if the
reset is ever high.  Personally, I think this goes without saying, however,
the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools have been known to disagree with me from time to time.&lt;/p&gt;

&lt;p&gt;The second rule tries to capture the “no data shall be dropped” policy.
Specifically, if there’s data on the incoming port, then it either needs
to go to the output or it needs to be buffered.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #2:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	All incoming data must either go directly to the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	output port, or into the skid buffer
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What about the other cases?  Well, if either &lt;code class=&quot;highlighter-rouge&quot;&gt;!i_valid&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid &amp;amp;&amp;amp; !o_ready&lt;/code&gt;, then nothing happens on the input port that we need
to worry about.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_ready&lt;/code&gt;, we know that
the only interesting case is the one in which &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is low.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;
is low and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is high, the core is a simple pass through and a quick
code inspection will prove that works.  That leaves the case where &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is
low and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is also low–the case we covered above.&lt;/p&gt;

&lt;p&gt;This doesn’t quite capture everything, though.  We’ve now discussed how
information should flow through this design, but not how the design should
return to idle.  That’s important, and I’ve been burned by not checking
the return to idle before.  Hence we want to make certain that the design
will return to idle.&lt;/p&gt;

&lt;p&gt;So any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is true on the outgoing interface then everything should
be cleared.  On the next clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; should only be true if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_valid&lt;/code&gt; is
also true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #3:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	After the last transaction, o_valid should become idle
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_OUTREG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what if we are registering the ports on our outgoing interface?&lt;/p&gt;

&lt;p&gt;In that case two rules shall apply.  First, any time an input is accepted,
then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; should be high on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; is true and there’s nothing on either the input
or in the buffer, then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; should clear on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That checks both the rise and the fall of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;.  Seems simple enough.&lt;/p&gt;

&lt;p&gt;But what about &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well, if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is ever true while the outgoing port is &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt;, then
the skid buffer gets copied to the outgoing port and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; must be
deasserted on the next clock.  This is the case from Fig. 4 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Rule #4
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//	Same thing, but this time for r_valid
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What if something was also coming in on the incoming interface?  It won’t
happen.  Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_ready = !r_valid&lt;/code&gt;.  Therefore if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_valid&lt;/code&gt; is high,
the incoming interface is stalled and so we can ignore it.&lt;/p&gt;

&lt;p&gt;That leaves the two special low power properties that we discussed above.  We
only want to enforce those if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; is set, and we want to ignore
them otherwise.  Therefore, we’ll use a generate block to capture these
checks.  That means that if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWPOWER&lt;/code&gt; isn’t set, the synthesis tool
(i.e. &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;) won’t even create the
logic to support these checks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_LOWPOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// If OPT_LOWPOWER is set, o_data and r_data both need
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to be zero any time !o_valid or !r_valid respectively
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// else
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	if OPT_LOWPOWER isn&#39;t set, we can lower our logic
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	count by not forcing these values to zero.
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are all of the properties we need to know this works, but does it
really work?&lt;/p&gt;

&lt;p&gt;For that, we’ll turn to cover.&lt;/p&gt;

&lt;h2 id=&quot;cover&quot;&gt;Cover&lt;/h2&gt;

&lt;p&gt;Unlike the safety (assert/assume) properties above which can be proved true
if no trace can be found that makes an assert false while keeping all of
the assumes true, cover only succeeds if at least one trace can be found.
Cover is very useful for finding faults in your assumptions, proving that
particular operations can take place and more.&lt;/p&gt;

&lt;p&gt;It’s also very valuable when you just want a trace showing that the design
works.&lt;/p&gt;

&lt;p&gt;So let’s build such a trace that starts and ends with the core idle.
In the middle, we’ll insist that the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ready&lt;/code&gt; line toggle from high to low
twice before settling back on high.&lt;/p&gt;

&lt;p&gt;Oh, and did I mention that we only want to check cover if this unit is
verified in isolation?  Otherwise it may be that the parent module doesn’t
ever make this &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement true–something that wouldn’t be a fault.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SKIDBUFFER&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Cover test
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Wait for the design to clear
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ready&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resulting trace is interesting, but it could be better.  In particular, the
incoming data is all zeros.  While that’s valid, it’s not very revealing.
I’d rather be able to “see” from the trace that the various data lines were
properly progressing.  Perhaps if we cound insist that the incoming data
be a counter?&lt;/p&gt;

&lt;p&gt;The easy way to do this is to add another register, and some logic associated
with it.  Let’s call this &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt;, and use it to indicate that our
data “properly” changes throughout the cover trace.  That is, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt;
will capture if the incoming data counts up–just so we can visualize
the trace and what is going on easier.&lt;/p&gt;

&lt;p&gt;In many ways, this isn’t your typical “formal” property.  It doesn’t use any
of the formal language features (except &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt;).  However, if the whole
world starts to look like a Verilog problem, then the solution is easily a
simple piece of Verilog logic.&lt;/p&gt;

&lt;p&gt;We’ll start by setting this &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt; flag to true, and the clear the
flag if any rule of what we want to see for our cover statement changes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; is only allowed to change on the clock following
&lt;code class=&quot;highlighter-rouge&quot;&gt;!i_valid || o_ready&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, we’ll just clear &lt;code class=&quot;highlighter-rouge&quot;&gt;f_changed_data&lt;/code&gt; any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; doesn’t
increment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, we want clear this value any time the input hasn’t been valid
constantly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_changed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. A cover trace from this skid buffer&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skidbuffer/skidbuffer-example.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Voila!  We now have a wonderful trace in Fig. 6 showing how this core works.&lt;/p&gt;

&lt;p&gt;Yes, this trace has been edited, but only minimally.&lt;/p&gt;

&lt;h2 id=&quot;symbiyosys-script&quot;&gt;SymbiYosys Script&lt;/h2&gt;

&lt;p&gt;In most cases the &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html&quot;&gt;SymbiYosys
script&lt;/a&gt;
used to drive a proof like this is very basic.  In this case, however, there
are a couple of key features of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/skidbuffer.sby&quot;&gt;the
script&lt;/a&gt;
that are worth discussing.&lt;/p&gt;

&lt;p&gt;First, you may recall above that I mentioned we would need to do four separate
proofs in order to try all of the combinations of our &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LOWLOGIC&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_OUTREG&lt;/code&gt; parameters.  Each of these can be separated into its own
proof using the &lt;code class=&quot;highlighter-rouge&quot;&gt;[tasks]&lt;/code&gt; section of the &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html&quot;&gt;SymbiYosys configuration
file&lt;/a&gt;.  We’ll
also create a single task for our cover proof.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
prfc prf
prfo prf              opt_outreg
lpc  prf opt_lowpower
lpo  prf opt_lowpower opt_outreg
cvr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’ve never seen a &lt;code class=&quot;highlighter-rouge&quot;&gt;[tasks]&lt;/code&gt; section of a &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html&quot;&gt;SymbiYosys
file&lt;/a&gt;
before, then you are in for a treat.  Each line within this section
defines a separate
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
run.  The first identifier on the line gives the name of the run, and the
subsequent identifiers are tags that are then applied to the run and useful
when configuring it.&lt;/p&gt;

&lt;p&gt;The second section, the &lt;code class=&quot;highlighter-rouge&quot;&gt;[options]&lt;/code&gt; section, shows the first reason to use
tasks: All of our induction proofs can be accomplished within 3 steps, whereas
the cover pass will take 20.  Here you’ll notice that every task above had
either the &lt;code class=&quot;highlighter-rouge&quot;&gt;prf&lt;/code&gt; tag or the &lt;code class=&quot;highlighter-rouge&quot;&gt;cvr&lt;/code&gt; name (also a tag).  This allows us to
set different depths for each of the passes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[options]
prf: mode prove
prf: depth 3
cvr: mode cover
cvr: depth 20&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This design is simple enough that it doesn’t really matter what engine we
use, so we’ll use the default.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[engines]
smtbmc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The real action, however, is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;[script]&lt;/code&gt; section.  This section contains
a series of commands to be given to &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
to control how the design is processed.  That also means that you can use the
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; command if you come across
anything confusing.&lt;/p&gt;

&lt;p&gt;We’ll start the script off by defining the &lt;code class=&quot;highlighter-rouge&quot;&gt;SKIDBUFFER&lt;/code&gt; macro, and then
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_read.html&quot;&gt;reading&lt;/a&gt;
our code into &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[script]
read -define SKIDBUFFER
read -formal skidbuffer.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Often my designs consist of many parts.  For these designs, I’d spend one
line here reading in each of the input files.&lt;/p&gt;

&lt;p&gt;The next step, however, is to control the parameters externally.
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; has a new extension to the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt;
command to make this easier.
Basically, the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; command finds the top level module and instantiates
all of the logic below it.  In our case, we want to instantiate specific
logic depending upon the proof.  Therefore we are going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;chparam&lt;/code&gt;
option to &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; to set these parameters.&lt;/p&gt;

&lt;p&gt;This is different from the &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;approach I discussed
before&lt;/a&gt;.  Before,
I would have written,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;opt_outreg:    chparam -set OPT_OUTREG 1   skidbuffer
~opt_outreg:   chparam -set OPT_OUTREG 0   skidbuffer
opt_lowpower:  chparam -set OPT_LOWPOWER 1 skidbuffer
~opt_lowpower: chparam -set OPT_LOWPOWER 0 skidbuffer&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This usage had some problems, and so it has now been deprecated.  One of those
problems was that &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; would re-elaborate
the module with every call to &lt;code class=&quot;highlighter-rouge&quot;&gt;chparam&lt;/code&gt;.  Any elaboration errors due to
incompatible parameter settings along the way might cause the whole process
to halt.&lt;/p&gt;

&lt;p&gt;Instead, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; command, every parameter is set at once.  Hence
we might want to use,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;prfc: hierarchy -top skidbuffer -chparam OPT_LOWPOWER 0 -chparam OPT_OUTREG 0
prfo: hierarchy -top skidbuffer -chparam OPT_LOWPOWER 0 -chparam OPT_OUTREG 1
lpc:  hierarchy -top skidbuffer -chparam OPT_LOWPOWER 1 -chparam OPT_OUTREG 0
lpo:  hierarchy -top skidbuffer -chparam OPT_LOWPOWER 1 -chparam OPT_OUTREG 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with this approach is simple: what if you have twenty different
tasks, all with different repeats of the same options?&lt;/p&gt;

&lt;p&gt;In this case, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html#pycode-blocks&quot;&gt;SymbiYosys’ python
interface&lt;/a&gt;
can come to our rescue.&lt;/p&gt;

&lt;p&gt;The following script will check our two parameters independently, and create
a string variable, called &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;hierarchy&lt;/code&gt; line with the
appropriate values in it.  Then, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;output(cmd);&lt;/code&gt; call is issued at
the end, the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; string will be written into the individual
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; scripts driving each of their
respective proofs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--pycode-begin--
cmd = &quot;hierarchy -top skidbuffer&quot;
cmd += &quot; -chparam OPT_LOWPOWER %d&quot; % (1 if &quot;opt_lowpower&quot; in tags else 0)
cmd += &quot; -chparam OPT_OUTREG   %d&quot; % (1 if &quot;opt_outreg&quot;   in tags else 0)
output(cmd);
--pycode-end--
prep -top skidbuffer&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final &lt;code class=&quot;highlighter-rouge&quot;&gt;[files]&lt;/code&gt; section is fairly unremarkable.  It just lists the files
used in this proof.  In this case, it is only the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/skidbuffer.v&quot;&gt;skidbuffer.v&lt;/a&gt;
file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[files]
skidbuffer.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will copy this file into its processing directory prior to running the proof.&lt;/p&gt;

&lt;p&gt;The whole proof can now be run using,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% sby -f skidbuffer.sby&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you can integrate it into your
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;Makefile&lt;/a&gt;, and just run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Feel free to take a loot at the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/Makefile&quot;&gt;Makefile&lt;/a&gt;
I’m using for these
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
projects should you need an example.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Skid buffers are very powerful, and very useful, especially when using
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;.  Indeed, I’m using skid buffers
throughout almost all of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/rtl&quot;&gt;my various AXI
designs&lt;/a&gt;.  Over and over
it’s the same logic, so it makes sense to create a single file to capture this
logic and simplify the design.  They really are just that useful.&lt;/p&gt;

&lt;p&gt;I just wish I’d separated this logic into its own module earlier, since
now I have many, many copies of the same logic that need to be maintained.
To this end, I’d like to thank &lt;a href=&quot;https://twitter.com/elaforest&quot;&gt;Eric LaForest&lt;/a&gt;
for setting a better example for me to follow.  I would also commend &lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;his blog
article on skid buffers&lt;/a&gt; to you
for further reading.&lt;/p&gt;

&lt;p&gt;For those of you who are not familiar with the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html&quot;&gt;SystemVerilog’s concurrent
assertion language&lt;/a&gt;,
or who do not have access to the commercial
&lt;a href=&quot;https://www.symbioticeda.com/seda-suite&quot;&gt;SymbioticEDA Suite&lt;/a&gt;, you might find
&lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;this discussion of alternatives and equivalents to concurrent assertions
valuable&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The desire accomplished is sweet to the soul: but it is abomination to fools to depart from evil. (Prov 13:19)&lt;/em&gt;</description>
        <pubDate>Wed, 22 May 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2019/05/22/skidbuffer.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/05/22/skidbuffer.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
