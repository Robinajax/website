<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 25 Dec 2019 09:00:45 -0500</pubDate>
    <lastBuildDate>Wed, 25 Dec 2019 09:00:45 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>The Christmas Gospel</title>
        <description>&lt;p&gt;Surely I’m not the only one wondering whether there’s a message of Christ
left in this Christmas time of rampant commercialism, so with your indulgence
let’s take a moment to look back into the origins of Christmas.&lt;/p&gt;

&lt;p&gt;Before beginning, let me define a few terms.  The first term is “Jesus.”
Christmas celebrates the birth of Jesus, but why was he called “Jesus”?
The name “Jesus” comes from the Hebrew name Joshua.  It means savior or
deliverer, and brings back the memory of Joshua who was able to deliver
the Jewish people into the promised land–something Moses was forbidden to do.&lt;/p&gt;

&lt;p&gt;In the Christmas story, the young child is given the name Jesus.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And she shall bring forth a son, and thou shalt call his name JESUS: for he
shall save his people from their sins.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/1/21&quot;&gt;Matt 1:21&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How was He to save His people from their sins?  Hold that thought.&lt;/p&gt;

&lt;p&gt;The second term is Christ.  Contrary to popular conception, Christ was not
Jesus’ last name.  In the time of Jesus, family ties were denoted by naming who
someone’s father was.  For this reason, the Bible discusses how Jesus is both
the “Son of God” and the “Son of Man.”  No, the term “Christ” is transliterated
from the Greek word for the Hebrew Messiah–a type of king.  Unlike “Jesus”,
which is a &lt;em&gt;name&lt;/em&gt;, Christ is a &lt;em&gt;title&lt;/em&gt;.  Moreover, “Christ” isn’t just the term
for any King, it’s the term used to describe a very special King, prophesied by
God, and placed upon the throne by the Almighty Himself.  Unlike most Kings,
the Christ rules with the authority of the Almighty
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/18&quot;&gt;Matt 28:18&lt;/a&gt;).
To oppose the Christ is to oppose the Almighty Himself.&lt;/p&gt;

&lt;p&gt;That’s a special kind of King.&lt;/p&gt;

&lt;p&gt;The term king carries other connotations as well, often forgotten through time.
Unlike the United States, where the three pieces of power are separated into
three branches of government: an executive, judicial branch, and legislative
branch, a king holds the total authority of all three of these government
functions in his person.  A king is a lawgiver and a judge, as well as the
commander in chief of his people.  Further, unlike many modern national
leaders, kings are not elected.&lt;/p&gt;

&lt;p&gt;“Christ”-mas is therefore the celebration of the birth of this King.&lt;/p&gt;

&lt;p&gt;The story of Christmas, however, began thousands of years earlier.&lt;/p&gt;

&lt;h2 id=&quot;it-started-in-the-beginning&quot;&gt;It started in the Beginning&lt;/h2&gt;

&lt;p&gt;The first indication of a coming Christmas was revealed in the Garden of Eden,
way back at the very beginning of mankind.  Once God created man, He placed
man into this garden that God had planted
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/8&quot;&gt;Gen 2:8&lt;/a&gt;), instructing him
to tend and to keep it
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/15&quot;&gt;Gen 2:15&lt;/a&gt;).
God also commanded Adam that he was not to eat of the tree of the
knowledge of good and evil that was in the middle of the garden
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/9&quot;&gt;Gen 2:9&lt;/a&gt;),
“for in the day that thou eatest thereof thou shalt surely die.”
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/17&quot;&gt;Gen 2:17&lt;/a&gt;)
(This is a Hebrewism, &lt;a href=&quot;https://answersingenesis.org/death-before-sin/genesis-2-17-you-shall-surely-die/&quot;&gt;woodenly translated “in dying thou shalt surely
die”&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;God then had compassion upon man, noting that he was all alone in the world.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/18&quot;&gt;Gen 2:18&lt;/a&gt;)
He created Eve to be his helper on this earth.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/21&quot;&gt;Gen 2:21&lt;/a&gt;)
The serpent then tricked Eve through cunning into eating the forbidden fruit,
and Eve gave Adam the same fruit to eat as well.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/1-6&quot;&gt;Gen 3:1-6&lt;/a&gt;)
At this point, the judgment of God was certain upon them.  Their death was
sealed: they would spend the rest of their lives dying until they ultimately
and most certainly died.  The judgment was also so severe, that it passed
on to all of Adam’s offspring as well–all who shared
in his flesh.  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/5/12&quot;&gt;Rom 5:12&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;God then comes to chat with Adam, and gives him a chance to explain and
possibly defend himself.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/8-9&quot;&gt;Gen 3:8-9&lt;/a&gt;)
The discussion that follows is commonly
viewed as God’s judgment of Adam, but I might argue that Adam had already been
judged by the commandment that had been given to him.  In this conversation,
God offers several mollifying statements to try to keep the judgment from
being quite as bad as it might have been.  Among these statements, God curses
the serpent for deceiving Eve in the first place.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And the LORD God said unto the serpent, Because thou hast done this, thou art
cursed above all cattle, and above every beast of the field; upon thy belly
shalt thou go, and dust shalt thou eat all the days of thy life:
And I will put enmity between thee and the woman, and between thy seed and
her seed; it shall bruise thy head, and thou shalt bruise his heel.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/14-15&quot;&gt;Gen 3:14-15&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the often-overlooked first Gospel message of Christmas.&lt;/p&gt;

&lt;p&gt;The first key to this message are the two words, “her seed.”&lt;/p&gt;

&lt;p&gt;The biblical history talks often in the chapters and books that follow of
the seed of men.  This is a reference physically to the “sperm” of a man,
that then produces offspring.  But the &lt;em&gt;seed&lt;/em&gt; of a woman?  It’s never
mentioned again.  The entire concept of a woman having her own “seed” would
violate everything we understand of human reproduction.&lt;/p&gt;

&lt;p&gt;Rather, this was the first prophecy of Christ, requiring that Christ be born
of a woman without the seed (sperm) of a man involved.  Indeed, it requires
a virgin birth to be fulfilled.&lt;/p&gt;

&lt;p&gt;The serpent himself was later revealed to be Satan, also known as the Devil.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And he laid hold on the dragon, that old serpent, which is the Devil, and
Satan, and bound him a thousand years
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/rev/20/2&quot;&gt;Rev 20:2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second key to this message is that the woman’s seed would crush the head
of the serpent, while only allowing Satan the opportunity to strike a glancing
blow on “his heel”.  Satan’s doom was therefore first foretold here.&lt;/p&gt;

&lt;p&gt;In case you missed it, this passage also explains the reason and cause for
suffering in our world today.  Man sinned against God, and violated God’s
commandment.  Ever since then, Man has struggled under the punishment of the
Almighty God–a punishment wherein death grips a man early in his life and
draws him perpetually to the grave.  Indeed, from the day of our birth and
before, the process of this death has already started.&lt;/p&gt;

&lt;h2 id=&quot;the-coming-king&quot;&gt;The Coming King&lt;/h2&gt;

&lt;p&gt;While there are hints of the coming Christ elsewhere (for example,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/49/9&quot;&gt;Gen 49:9&lt;/a&gt;),
I’ll pick the story up again in the time of David.  David notices at one point
that he gets to dwell in a pleasant house, but God?  God dwelt in a tent at
the time known as the “Tabernacle”.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/2&quot;&gt;2 Sam 7:2&lt;/a&gt;)
This didn’t seem right to David, so he inquired about building a house
for God–something that would be more permanent than a tent.&lt;/p&gt;

&lt;p&gt;God’s full response is worth reading
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/4-17&quot;&gt;2 Sam 7:4-17&lt;/a&gt;), in which
he discusses the absurdity of David creating a house for the Almighty, but
let me focus on just a couple of verses of the message that the prophet
Nathan relays to David.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And when thy [David’s] days be fulfilled, and thou shalt sleep with thy
  fathers, I will set up thy seed after thee, which shall proceed out of
  thy bowels, and I will establish his kingdom.
He shall build an house for my name, and I will stablish the throne of his
  kingdom for ever.
I will be his father, and he shall be my son. If he commit iniquity, I will
  chasten him with the rod of men, and with the stripes of the children of
  men:
But my mercy shall not depart away from him, as I took it from Saul, whom I
   put away before thee.
And thine house and thy kingdom shall be established for ever before thee:
   thy throne shall be established for ever.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/12-16&quot;&gt;2 Sam 7:12-16&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Herein is a promise from God that David’s seed, i.e. one of his sperm or
more appropriately understood in context as one his offspring, shall be
established on the throne “for ever.”&lt;/p&gt;

&lt;p&gt;Think about this for a moment.&lt;/p&gt;

&lt;p&gt;“For ever.”&lt;/p&gt;

&lt;p&gt;Something would need to be done about the curse that fell upon Adam, for since
Adam all men die
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/15/22&quot;&gt;1 Cor 15:22&lt;/a&gt;).
This King on the other hand was to remain on the throne “for ever.”&lt;/p&gt;

&lt;p&gt;God also states, rather strangely, that “I will be his father, and he shall be
my son.”  This passage is often overlooked, for how should God be the father
of a man?&lt;/p&gt;

&lt;h2 id=&quot;the-lost-throne&quot;&gt;The Lost Throne&lt;/h2&gt;

&lt;p&gt;In the years that followed, this promise appeared to be one that was lost.
Solomon took the throne, and God was not nearly as pleased with him as he
was with David.  Solomon’s son then took the throne and the kingdom split.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1ki/12/19&quot;&gt;1 Kings 12:19&lt;/a&gt;)
Ten tribes went to the Northern Kingdom, sometimes called Israel and sometimes
Ephraim, and two tribes, Judah and Benjamin, formed the Southern Kingdom,
often simply called Judah.&lt;/p&gt;

&lt;p&gt;The Northern Kingdom suffered through the leadership of several different
dynasties as one king after another arose to punish the wickedness of the
king before.  This particular kingdom was unique for the consistency of their
leadership.  No righteous kings arose from all of these dynasties.&lt;/p&gt;

&lt;p&gt;Judah was also unique during this time, however, in that only David’s
offspring ruled Judah in Jerusalem.  Indeed, it almost seemed as though the
prophecy given to David might hold through one of the offspring’s of these
kings.  Yet during the reign of these kings, Isaiah wrote,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And in that day there shall be a root of Jesse, which shall stand for an
ensign of the people; to it shall the Gentiles seek: and his rest shall be
glorious.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/11/10&quot;&gt;Isaiah 11:10&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only a couple hundred years after this prophecy, Babylon conquered Judah.
The Davidic dynasty lost the throne, as one empire or another ruled over Israel.
Worse, God told Jeremiah that the Davidic king of the time, through whose
line the throne ran, would have “none to sit upon the throne of David”
because he did not listen to God.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jer/36/30-31&quot;&gt;Jeremiah 36:30-31&lt;/a&gt;)
First was Babylon, then the Medes and Persians, the Greeks, and then the Romans
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/2/38-40&quot;&gt;Daniel 2:38-40&lt;/a&gt;).
Today, it is the United Nations ruling as an empire over what’s left of
the nation of Israel
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/2/41-43&quot;&gt;2:41-43&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Looking back at Isaiah’s prophecy, you’ll note that “root” could just as well
be translated as “stump”, and perhaps even more appropriately so.  It
describes a tree that has been cut down, but whose stump remains in the ground.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/job/14/7&quot;&gt;Job 14:7&lt;/a&gt;)
In historical hindsight, we can see that it refers to the fact that
Jesse, king David’s father, no longer had any offspring on the throne.
David’s dynasty appeared to be completely and utterly extinguished.&lt;/p&gt;

&lt;h2 id=&quot;the-seventy-weeks&quot;&gt;The Seventy Weeks&lt;/h2&gt;

&lt;p&gt;As history played out God’s judgment, we learn that David’s dynasty ended
when Jerusalem fell to Babylon.  Among the Jews that were enslaved by
Nebuchadnezzar was a young man named Daniel.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/1/1-6&quot;&gt;Daniel 1:1-6&lt;/a&gt;)
Daniel was brought captive to Babylon where God chose to make him a
prophet.  Indeed, Daniel was the one prophet in Babylon who was able to
explain to the king why he saw a disembodied hand writing on the wall,
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/5/5&quot;&gt;Daniel 5:5&lt;/a&gt;)
and the meaning of the message that was written.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/5/23&quot;&gt;Daniel 5:23&lt;/a&gt;)
That night, Babylon’s empire then fell to the Medes and the Persians.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/5/31&quot;&gt;Daniel 5:31&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Sometime later, this same Daniel was given the following word from the Lord
by an angel,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Seventy weeks are determined upon thy people and upon thy holy city, to
  finish the transgression, and to make an end of sins, and to make
  reconciliation for iniquity, and to bring in everlasting righteousness,
  and to seal up the vision and prophecy, and to anoint the most Holy. 
Know therefore and understand, that from the going forth of the commandment
  to restore and to build Jerusalem unto the Messiah the Prince shall be
  seven weeks, and threescore and two weeks: the street shall be built
  again, and the wall, even in troublous times. 
And after threescore and two weeks shall Messiah be cut off, but not for
  himself: and the people of the prince that shall come shall destroy the
  city and the sanctuary; and the end thereof shall be with a flood, and
  unto the end of the war desolations are determined. 
And he shall confirm the covenant with many for one week: and in the midst
  of the week he shall cause the sacrifice and the oblation to cease, and
  for the overspreading of abominations he shall make it desolate, even
  until the consummation, and that determined shall be poured upon the
  desolate. 
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/9/24-27&quot;&gt;Daniel 9:24-27&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best interpretation of this prophecy that I have come across is that
each “week” (Aramaic word for seven) refers to a seven year period.  “Seventy
weeks” therefore  refers to 490 years.  While I have not tracked it myself,
others have tracked the 69 of these “weeks” to be a measure of time from the
date Cyrus, king of Persia, sent the Jews to rebuild the city–“the going
forth of the commandment to restore and to build Jerusalem”–until the time
Jesus rode into Jerusalem on a donkey–“until Messiah the Prince”.  During
this time, the city and the wall were rebuilt.  But upon coming,
Jesus, herein known as “Messiah the Prince”, was then “cut off” by the cross.&lt;/p&gt;

&lt;p&gt;At this point, the prophecy switches to discussing a “prince that shall
come”, indicating an indefinite time into the future.  Indeed, the last week,
the 70th week, has not yet taken place.&lt;/p&gt;

&lt;p&gt;But let’s look closer at beginning of the prophecy, and the declaration of
what it describes.  The seventy weeks were determined to,
make an “end of sins, to finish the transgression [of Adam], to make
reconciliation for iniquity, and to bring in everlasting righteousness …”
In other words, the Salvation that God hinted to Adam was on its way.
Not only that, the time of Christ’s coming had been determined.&lt;/p&gt;

&lt;p&gt;I find it fascinating that the Magii who visited Jesus came “from the East”.
Might it be that these Magii were what remained of an order that Daniel
started following this prophecy, and so they were already looking for and
expecting the Christ?&lt;/p&gt;

&lt;p&gt;Prophecy then fell silent for what appeared to be nearly four hundred years.&lt;/p&gt;

&lt;h2 id=&quot;the-genealogy&quot;&gt;The Genealogy&lt;/h2&gt;

&lt;p&gt;We pick the story up again in the historical records of both Matthew and Luke.
These two accounts contain the most detail about the birth of the Christ.
In particular, each of these two gospels contains a genealogy.&lt;/p&gt;

&lt;p&gt;The genealogy in Luke
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/3/23-28&quot;&gt;Luke 3:23-28&lt;/a&gt;)
traces the Davidic line from Adam, through David and then down through his
son Nathan.  Nathan’s line didn’t follow the line of the dynasty at all, and
other than David, doesn’t contain any kings within it.  Further, unlike the
genealogy in Matthew, this genealogy traces Jesus’ heritage through Mary,
the mother of Jesus.&lt;/p&gt;

&lt;p&gt;The genealogy found in the book of Matthew
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/1/2-16&quot;&gt;Matt 1:2-16&lt;/a&gt;)
traces the line of Joseph, Jesus’ adoptive father, from Abraham, through
king David and the dynasty that followed, through the kings that were
overthrown by Babylon, the leaders that rebuilt Jerusalem, all the way to a
poor carpenter named Joseph.  By birth, Joseph held what was left of the right
to David’s dynasty.  By legal adoption, that right was then given to Jesus.&lt;/p&gt;

&lt;p&gt;Jesus birth itself fulfilled the prophecy from Genesis, itself reiterated
in Isaiah,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behold, a virgin shall be with child, and shall bring forth a son, and
they shall call his name Emmanuel, which being interpreted is, God with us.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/1/23&quot;&gt;Matt 1:23&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mary, as the virgin in this verse, then gave birth to Jesus.  This fulfilled
the prophecy from Genesis
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/14&quot;&gt;Gen 3:14-15&lt;/a&gt;),
regarding the seed of the woman, and also the prophecy Nathan related to David
saying that Jesus’ father would be the Almighty Himself.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/14&quot;&gt;2 Samuel 7:14&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Indeed, we know that Jesus was not only the son of God, he was also the
&lt;em&gt;only&lt;/em&gt; son begotten by God.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/3/16&quot;&gt;John 3:16&lt;/a&gt;)
“Begotten” being an old English word for “fathered”.  The fact that Jesus was
the only “begotten” of the Father just points out that God only “fathered” one
son, and that one was Jesus.&lt;/p&gt;

&lt;h2 id=&quot;the-angels&quot;&gt;The Angels&lt;/h2&gt;

&lt;p&gt;Birth announcements are nothing new, and God wanted to make certain the birth
of His son was properly announced.  Therefore, on the night that Jesus was
born, the story transitions to shepherds.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And there were in the same country shepherds abiding in the field, keeping
  watch over their flock by night.
And, lo, the angel of the Lord came upon them, and the glory of the Lord
  shone round about them: and they were sore afraid. 
And the angel said unto them, Fear not: for, behold, I bring you good
  tidings of great joy, which shall be to all people. 
For unto you is born this day in the city of David a Saviour, which is
  Christ the Lord. 
And this shall be a sign unto you; Ye shall find the babe wrapped in
  swaddling clothes, lying in a manger. 
And suddenly there was with the angel a multitude of the heavenly host
   praising God, and saying, 
Glory to God in the highest, and on earth peace, good will toward men. 
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/2/8-14&quot;&gt;Luke 2:8-14&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To my knowledge, this is the first time the word “Gospel” is used to describe
a message.  Yes, it’s used earlier in the historical records to describe the
records themselves, but this is the first time within the record.  Did you
catch it?  The angel said, “I bring you good tidings” … that’s the word!&lt;/p&gt;

&lt;p&gt;The Greek word for gospel is a compound word from the prefix “eu”, sometimes
transliterated as “ev”, and “angelion”, from which we get the word angel.
It is commonly translated as “Good News” today, although I believe this
modern translation misses the true meaning of this word.&lt;/p&gt;

&lt;p&gt;Let’s look at the “eu” prefix first.  The Greeks had two prefixes they used
for “good”.  One was “kali”, from which we get “calligraphy” or “pretty
writing”.  It means good as in pretty, nice, or pleasant.  The other
prefix, “eu”, held the concept of good as in good in a godly, righteous,
kind of way.&lt;/p&gt;

&lt;p&gt;This wasn’t just “Good News” because it was pleasant, it was “Good News”
because it was right, just, and came from God.  This is “Godly News”.&lt;/p&gt;

&lt;p&gt;“News” itself has also become a poor translation for “message”.  It has worked
for many years, but “news” today now refers to an entertainment industry
willing to sacrifice truth in its competition for viewers and dollars.  This
is not the “news” of the Gospel.  Rather, the “news” of the Gospel was a
specific message, given by God.  In this instance, God gave his message to
angels who where then commanded to deliver it to the shepherds.  The shepherds
then shared this the message and their experiences in their excitement, and
so the message is now available for us to read today.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/2/17&quot;&gt;Luke 2:17&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This is the idea behind the word Gospel: God sent us a message from heaven.&lt;/p&gt;

&lt;h2 id=&quot;the-gospel-and-jesus&quot;&gt;The Gospel and Jesus&lt;/h2&gt;

&lt;p&gt;At this point, we’ve traced the history of Christmas to the time of Christmas
itself, but its hard to stop there.  There’s just so much more to the story.
Indeed, the Gospel message presented by the angels was far from the end of
the message God wanted to give.  Specifically, God gave a message to Jesus
that He was to teach.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;God, who at sundry times and in divers manners spake in time past unto
  the fathers by the prophets, 
Hath in these last days spoken unto us by his Son, whom he hath appointed
  heir of all things, by whom also he made the worlds; 
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/1/1-2&quot;&gt;Hebrews 1:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once Jesus came of age, He began to travel and teach.  The Bible records
several locations where He taught.  It also records one such sermon in
&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/5/1&quot;&gt;Matthew 5&lt;/a&gt;-7.  This has become
known as the “Sermon on the Mount”–since it was taught on a mountain.  It’s
fascinating to note that a very similar sermon was taught in
&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/6/1&quot;&gt;Luke 6&lt;/a&gt; from
within a valley, something I often call the “Sermon in the Valley.”&lt;/p&gt;

&lt;p&gt;At one time, I wondered that Jesus taught two messages that were so similar.
A friend of mine then chose to become a missionary, and described how his
job entailed going from church to church in order to raise support.  Since
he typically didn’t return to the same church twice, he &lt;em&gt;taught the same
message&lt;/em&gt; from place to place.  This then explains what Jesus was doing as well:
going from one community to another teaching this same message.&lt;/p&gt;

&lt;p&gt;Mark uses the term Gospel to describe this message,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now after that John was put in prison, Jesus came into Galilee, preaching
  the gospel of the kingdom of God,
And saying, The time is fulfilled, and the kingdom of God is at hand:
  repent ye, and believe the gospel. 
&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/1/14-15&quot;&gt;Mark 1:14-15&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mark doesn’t specify what this Gospel is.  It follows from the context that
the Gospel is the message Jesus is teaching.  Mark summarizes it here, but
Matthew gives us a more complete glimpse of it.&lt;/p&gt;

&lt;p&gt;Nor is this the entirety of “&lt;em&gt;the&lt;/em&gt; Gospel”.  Rather it is the message Jesus
brought from His father to share with the world, which calls all men to
repent and to turn from their sins.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Gospel that Jesus presented was thousands of years in coming.
As we’ve seen above, Christmas was first prophesied to Adam and Eve, where
God promised that the offspring of a virgin would crush the head of the
serpent.  His coming was prophesied again to David, when God promised that
David’s seed would rule after him, and that of this king’s rule there would
be no end.  Moreover, God promised that He would personally be the Father
of this coming king.&lt;/p&gt;

&lt;p&gt;This brings us to the last point, in order to be an &lt;em&gt;everlasting&lt;/em&gt; king, Jesus
needed to conquer death.  This follows naturally.  To conquer death, Jesus
needed to die and then to rise again.  History records that He did indeed
do this (&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/1&quot;&gt;Matt 28:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/16/1&quot;&gt;Mark 16:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/24/1&quot;&gt;Luke 24:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/00/1&quot;&gt;John 20:1&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There’s more to the story, and more than I will be able to get into here.
Indeed, it’s not even complete as of today.  That last week, the 70th week
prophesied by Daniel, has not yet to taken place.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/9/27&quot;&gt;Daniel 9:27&lt;/a&gt;)
Until that time happens, there will be no end to sin, and the transgression
will not be complete.  Sin, still today, remains the reason for the
suffering in the world.  We also know that the King will return to make
an end to it.&lt;/p&gt;

&lt;p&gt;Only one question remains.  When the King returns, how will he find you?
Did you listen to His message when He was here?  Have you prepared yourself
for His return?  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/7/22&quot;&gt;Matt 7:22-23&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This, then, is the background of the Christmas story.  In it is the whole
of human suffering, going back all the way to the dawn of creation.  It’s
the story of the birth of the King who is healing individuals today, and
who will someday return to judge the living and the dead.&lt;/p&gt;

&lt;p&gt;I wish you therefore a Merry Christmas, and ask that you join me in praying
that His return would come soon.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For unto you is born this day in the city of David a Saviour, which is Christ the Lord.  (Luke 2:11)&lt;/em&gt;</description>
        <pubDate>Wed, 25 Dec 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2019/12/25/christmas-gospel.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/12/25/christmas-gospel.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Using a Histogram to Debug A/D Data Streams</title>
        <description>&lt;p&gt;My favorite part of any signal processing application is the part where you
sit down and draw out what you’re going to build.  It’s my favorite part because
nothing ever goes wrong on the drawing board.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Four tools for datapath debugging&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/datapathdebug.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But let’s face it, things do go wrong, and you are going to need to be
able to find out what.&lt;/p&gt;

&lt;p&gt;One of my themes in this blog is that you should prepare, early on in any
project, for the tools you will need to accomplish that project.  For
example, you should build and prove your &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; early on.  Then,
later on, you can use this ability to &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;communicate with your design while
it’s in the lab&lt;/a&gt; so that your
design can tell you what’s going right or wrong.&lt;/p&gt;

&lt;p&gt;In this game, logic is your friend: use it.&lt;/p&gt;

&lt;p&gt;That said, let’s take a quick look at four things that can be quite helpful
when trying to go from an signal source to your data processing application:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. Sample counting&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/samplcounter.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sample counting&lt;/p&gt;

    &lt;p&gt;Sample counting should be your first step, before everything else.  Sadly,
from my own personal experience, adding an internal data sample counter
has tended to be an afterthought that ends up getting placed into every
project only after things start going wrong.  Typically,
the A/D isn’t properly configured, the internal clocks within the design
aren’t set right, that resampling filter didn’t quite get the rates
right or maybe something else.&lt;/p&gt;

    &lt;p&gt;Counting samples, and comparing the incoming sample rate to the
system clock rate can be very valuable when trying to narrow down
the source of your lack of data, or even when trying to find where
samples are getting dropped (or added) into an application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 3. Counter Injection&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/blkcounter.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Counter injection&lt;/p&gt;

    &lt;p&gt;Often there’s a long path with lots of things on it going from the digital
signal source to output data.  In one of my early projects, this path
included packing data into words and then writing it to an SD card only
to be read later.  In another project, the data needed to be first given
an exponent, then packed into blocks, placed into a FIFO, and sent over
the Ethernet.&lt;/p&gt;

    &lt;p&gt;Even though none of these steps involved any filtering or control loops, 
there were still a lot of places where things might’ve gone wrong.  As an
example, in the SD card project, the SD cards we were using would tend to
become busy mid-stream and so drop samples whenever our FIFO didn’t have
enough depth within it.  (Worse, we were using an extremely small, low-power
design to record a GPS signal that couldn’t afford data loss.  Because
the chip was so small, there wasn’t much block RAM available for a deeper
FIFO.  Yes, it was a recipe for a project failure.  In the end, we needed
to get creative to get around this bug …)&lt;/p&gt;

    &lt;p&gt;One easy way to diagnose problems like this is by injecting a counter into
the data path.  You can then compare the counter against the signal on the
other end of the transmission to verify that nothing was lost in the FIFO,
that the SD card didn’t skip samples any where, that no network packets
were dropped, or worse.&lt;/p&gt;

    &lt;p&gt;This is such a valuable capability to have, that I’ve often placed it
into every signal source controller I’ve built.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Histogram checking&lt;/p&gt;

    &lt;p&gt;This is going to be our topic today, so let’s come back to this in a bit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fourier Transform&lt;/p&gt;

    &lt;p&gt;Finally, when the samples all look good, it becomes time to go look at
a &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;Fourier transform&lt;/a&gt; of the
incoming data.  I personally like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-time_Fourier_transform&quot;&gt;Short-Time Fourier Transform
(STFT)&lt;/a&gt; the
best.  A nice &lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;rastered image&lt;/a&gt;,
presenting the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Short-time_Fourier_transform&quot;&gt;STFT&lt;/a&gt;
of your data can reveal a lot of what’s going on within.  You can see
if there’s some bursty noise, what sort of always-on interferes might be
coming in from your system, whether you are struggling with self-noise and
more.  Indeed, this is a very valuable analysis step–it just doesn’t tell
you much if your signal was corrupted earlier in the processing chain, and
your samples were replaced by something else.&lt;/p&gt;

    &lt;p&gt;As an example, I’ve worked on many signal processing systems that were
buffer based.  In these systems, you’d process one buffer, then get the
next to process it.  Very often, filtering implementations would require
overlap between the buffers.  A common problem was always making sure
there was no dropped (or inserted) data between the buffers.  The counter
injection check above could find this easily.  However, if you skip the
counter injection check and instead go straight to taking an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; of the broken data,
then you may well convince yourself you have a wideband interference
issue after which you’ll then go looking in the wrong place to find the
source.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today, though, let’s look at how a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
might help you diagnose data sampling problems, and then look at some
examples of how you might &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;implement a
histogram&lt;/a&gt;
in an FPGA.&lt;/p&gt;

&lt;h2 id=&quot;the-power-of-a-histogram&quot;&gt;The Power of a Histogram&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
is defined as a chart of sample counts, estimating the probability
that an input voltage will get mapped to a particular digital value.  If done
well, it should approximate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_distribution&quot;&gt;probability
distribution&lt;/a&gt;
of the underlying data source.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Ideal Gaussian histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hgauss.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A classic example of what a &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
might look like is shown in Fig. 4.  on the left.&lt;/p&gt;

&lt;p&gt;You should be able to recognize this shape as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian bell shaped
curve&lt;/a&gt;.  It’s the distribution you should expect from thermal noise.
If everything goes well, this is what you should see coming into your system
when everything is working but no “signal” is present.  In other words, this
is what things will look like before you turn your transmitter on.&lt;/p&gt;

&lt;p&gt;What’s even better about this picture is that, since a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; is a visual
picture, it’s easy to tell from a chart whether or not what you are receiving
matches this shape.  Pattern recognition is very powerful.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 5. Ideal Sinewave Histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hsinwav.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, if that’s what a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of noise (i.e. no signal) should look like, what should a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of some form of signal look like?  Fig. 5 on the right shows the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of what you might expect from a
&lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;sine wave&lt;/a&gt;
under the uncommon laboratory conditions of pure signal with little noticeable
noise.&lt;/p&gt;

&lt;p&gt;Unlike the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;,
this one looks more like Batman’s head as I term it.  Notice the pointy
“ears”, beyond which there’s no signal counts at all.  In a perfect
world, this is what your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;,
of noiseless signal should reveal.&lt;/p&gt;

&lt;p&gt;Of course, we don’t live in a perfect world, and so I’m not sure I’ve ever
seen a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
looking this clean generated by anything other than a
&lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;digital NCO&lt;/a&gt;
that never touched the analog domain.  So what should this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
look like if your sine wave has been corrupted by some amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
noise?&lt;/p&gt;

&lt;p&gt;Unfortunately, the probability math starts getting really complicated when
combining signals.   For example, adding a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
to a
&lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;sinewave&lt;/a&gt;
in time results in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;
of the two &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_distribution&quot;&gt;probability distributions
functions&lt;/a&gt;.  For
anyone who wishes to try to evaluate this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;,
good luck–the math can get quite challenging.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Sinewave plus Noise&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hsingauss.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For the simple minded like me, it’s worth knowing that convolution with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt; acts like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;low-pass filtering&lt;/a&gt;
the Batman head, smoothing over those sharp “ears”.  As a result, with a bit
of noise, your signal might look like Fig. 6 on the right.&lt;/p&gt;

&lt;p&gt;This is what you should hope to see when evaluating a signal from an A/D:
either a nice
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
when no signal is present, or a smoothed Batman’s head when it is.  Well,
that or something else depending on how your signal is defined.  It shouldn’t
be too hard to figure it out in &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, what else might you see?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 7. Noise, but with a DC bias&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hbias.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Two very common problems in A/D systems are bias and scale problems.
Fig. 7, on the left, shows what bias might look like.  This particular
signal was generated from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
with a non-zero mean, and represents much of what you might receive
if you had an input of both electronic noise added together with some
amount of direct-current leakage onto your signal path.  Note how the signal
is no longer symmetric about zero.&lt;/p&gt;

&lt;p&gt;Okay, I’ll admit to the purists here that I cheated when drawing Fig. 7.  I
used &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; and a theoretical bell
shape shifted to the right.  The result is pretty, but practically erroneous.
Specifically, the far right bin should also include all of the counts from
samples that ended up out of range.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. Clipping shows up in a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hclipped.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Speaking of “out of range”, the second common problem you might have is scale.
Many receivers require some form of gain prior to going into the sampler.
Getting the right amount of gain can be a challenge.  As an example, Fig. 8 on
the right shows what might happen if you overdrive the incoming signal.
Yes, take that headset off quickly before you lose the last of your hearing, and
lower the gain while your system is still usable.&lt;/p&gt;

&lt;p&gt;If this ever happens to you, you’ll notice two overused bins at the minimum
and maximum sample values out of the digitizer.  This should be
a pattern to look for, and an indication of when to fix things.  It’s caused by
the voltage going into the system being out of range for the A/D.  If it’s
too high, it will be returned as the maximum value, and too low as the minimum
value.  If the two edge peaks aren’t even, it’s a sign you have problems with
both bias and scale together.&lt;/p&gt;

&lt;p&gt;To make matters worse, the incoming signal is distorted if you ever start
getting peaks at the edges of your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
like this.  Your job, as the
responsible engineer, is to make sure the scale gets adjusted properly
so that the end points either have no counts within them or nearly none–in
order to know your system has little to no distortion within it.&lt;/p&gt;

&lt;p&gt;These sorts of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
results are the normal things you should be expecting to be debugging with
the analog signal engineer and a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Oscilloscope&quot;&gt;oscilloscope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;Histogram&lt;/a&gt;s
can also be used to find and diagnose the not-so-normal things
that might go wrong.  For example, can you guess what’s going wrong in
Fig. 9?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 9. What went wrong here?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hmismsb.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this case, the top bit of the data sample got corrupted by what appears to
be random data, creating the appearance of two nearly identical
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
shapes.  Alternatively, your data might be off cut, and so the samples might
include the LSB from one sample followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB:1&lt;/code&gt; of another.&lt;/p&gt;

&lt;p&gt;Off cut data is important to recognize, especially since some particular
LVDS protocols can be a challenge to synchronize to the sample boundaries
of.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. How about now?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hmislsb.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Another possibility is that your LSB might be corrupted.  In this case, you’ll
see something looking closer to a comb, as shown in Fig. 10 on the right.&lt;/p&gt;

&lt;p&gt;As one final example, let me draw your attention to Fig. 11 on the left.
In this case, the top two bits of the sample value have been corrupted,
but the rest look good.  Notice how our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
shape has been split into four jumbled parts?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 11. Mis-mapped top two bits&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hquartr.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Remember, no A/D is perfect.  You aren’t likely to see shapes this clean
in reality, but the general rules above still apply.&lt;/p&gt;

&lt;p&gt;The good thing about all of this is that the human brain can detect patterns
very easily, and being able to visually see these patterns is the power
and reason for calculating and plotting a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
Consider how many faults we just diagnosed by examining the patterns
above–each was distinct, and each indicated a different form of fault.&lt;/p&gt;

&lt;p&gt;So, if a &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
is so valuable, how shall we measure one?&lt;/p&gt;

&lt;h2 id=&quot;calculating-a-histogram&quot;&gt;Calculating a Histogram&lt;/h2&gt;

&lt;p&gt;Perhaps the easiest way is to record a set of samples and then download
them into a program where you can do ad-hoc and scripted data manipulation.
I will often use &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; for this
purpose, but I am also aware that much of the engineering community likes
to use &lt;a href=&quot;https://www.mathworks.com/products/matlab.html&quot;&gt;Matlab&lt;/a&gt;.  (I just
can’t afford &lt;a href=&quot;https://www.mathworks.com/products/matlab.html&quot;&gt;Matlab&lt;/a&gt;, and
&lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; tends to do everything I need.)&lt;/p&gt;

&lt;p&gt;My first rule of digital logic design is that all FPGA logic shall be
pipelined so as to be able to process at least one sample per system clock.
Throughput is your friend, embrace it!&lt;/p&gt;

&lt;p&gt;My second rule is that all signal processing blocks should be controllable
across a bus of some type.  That means, you should be able to read status
from within the system, turn on and off various signaling elements, adjust
gains, etc. all from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
connected to your design.  This
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can be within your FPGA, such as the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; that lies within many of my own
designs, or it can be &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;external to your design, communicating to your
design&lt;/a&gt; via some
form of &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the first DSP design I built, I used a &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive
averager&lt;/a&gt; to measure the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of an incoming signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 12. An IIR peripheral for a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/iirhist.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I would write to my &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus
peripheral&lt;/a&gt; the
sample value I wanted to measure the probability of, and also a averaging
coefficient.  Then, on every sample, if the sample matched the chosen address I
would average a one else a zero.  Using the
&lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive averager&lt;/a&gt;
we studied earlier, this might look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;iiravg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGALPHA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUS_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;iir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chosen_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hist_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus
peripheral&lt;/a&gt; the
could then set &lt;code class=&quot;highlighter-rouge&quot;&gt;chosen_sample&lt;/code&gt; and read the &lt;code class=&quot;highlighter-rouge&quot;&gt;hist_output&lt;/code&gt; result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;chosen_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hist_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This worked great for me in the past when I only wanted to examine one or
two bins.  The advantage of using this method is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
output is always available to be read.  No scaling is needed, the decimal point
is right where you want it and you are reading a fractional number.  Even
better, the logic involved with building this is quite simple, and so it can
be done when hardware is at a premium.&lt;/p&gt;

&lt;p&gt;The disadvantage with this approach comes when you want to measure more than
one bin.  In that case, you might walk through the various sample values,
wait for the averager to settle and then read the result before moving on.
This was my go-to solution until I actually tried it.  I then swallowed
hard and convinced myself that I liked the result, but I also realized
the solution would be completely unworkable with an A/D having 5-bits or more.&lt;/p&gt;

&lt;p&gt;Another approach I tried was to run a series of &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive
averagers&lt;/a&gt;,
each focused on a different sample.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 13. An IIR peripheral for a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/multiiir.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problem with this multi-average approach is simply that the
&lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive averager&lt;/a&gt;
approach doesn’t scale well to large numbers of potential sample values.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;Another
approach&lt;/a&gt;
is needed, which we’ll discuss building today: the block average approach to
generating a &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
This approach will be centered around using a block RAM element to keep the
logic down.&lt;/p&gt;

&lt;p&gt;The concept of a block average is really quite simple, and it’s easy to write
out in C.  You simply pass to your block processing routine a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;nsamples&lt;/code&gt;
samples, captured in a &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; array, as well as an array to capture the
resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;calculate_histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step is to clear the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; array.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NUM_ADC_BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that, we’ll walk through all of our sample points, and increment the
bin counter in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; memory
once for every sample in our incoming data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That seems easy enough.  It’s even easy enough to write out most of the
hardware necessary to do this.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Updating a memory single-cycle&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/memupdate.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Not bad, but can we &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;build it in
Verilog&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Well, sort of and … not quite.  I mean, the operation is fairly easy to
describe in Verilog.  Just like the hardware diagram above, it looks easy.
The problem is that, just because you can describe it in Verilog doesn’t mean
it can properly map to hardware.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, as we’ve written it out, this is language compliant.  Even better, it’s
likely to work quite well in a
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulator&lt;/a&gt;.
It’s just not likely to map well to all of the different
varieties of FPGA hardware.&lt;/p&gt;

&lt;p&gt;To capture the problem, I introduced several &lt;em&gt;rules&lt;/em&gt; for using block RAM
within my &lt;a href=&quot;/tutorial&quot;&gt;beginners tutorial&lt;/a&gt;.  These rules
help to guarantee that your design will successfully map into block RAM rather
than flip-flops.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rule:&lt;/strong&gt; When reading from memory, only the read from memory logic shall
happen on any given clock.  This shall happen within its own always block,
with nothing more than a (potential) clock enable line controlling it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One reason for this rule is that not all FPGA hardware supports reading from
block RAM and processing the result on the same clock.  Notably the
&lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;iCE40 series&lt;/a&gt;
can only read directly into an attached set of flip-flops (the one clock
requirement), and from there any value read can only enter into your design
logic on the next clock cycle.  Even for those FPGAs that can read from a memory
directly into an operation, many of them have limited sizes of memory that can
support this.  While 5-bit A/Ds would work well, wider 10-bit A/Ds could easily
overload this capability.&lt;/p&gt;

&lt;p&gt;While unfortunate, it is also a reality that if you want to create code that
can work efficiently on multiple FPGA architectures then you will need to
support the lowest common denominator.  That means we’re going to need to
split our read out into a separate clock cycle.  The result might then
look something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Read from memory on the first cycle
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Keep track of which sample we are examining,
// and whether or not we&#39;ll need to write this
// updated value to memory
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Finally, write to memory on the next cycle
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this gets us closer, there are still two more block RAM rules.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;&lt;strong&gt;Rule:&lt;/strong&gt; When writing to memory, nothing but the memory write shall exist
within that logic block.  That is, you should only ever write from a
register to memory, never from a LUT’s output to memory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This issue is more timing driven than hardware architecturally driven.
Part of the issue here has to deal with the fact that block RAM memories
tend only to be located on specific parts of the FPGA.  They aren’t
necessarily uniformly sprinkled around the fabric.  As a result, there may
be an unpredictable distance from your logic to the memory, and going from
flip-flop to memory helps to mitigate any timing problems there.&lt;/p&gt;

&lt;p&gt;This now means that we’ll need to take three clocks to update one value in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; estimate.
Our first clock will be used to read from memory, our second clock
will add one to the result, and our third clock will write the updated result
back to memory.  Fig. 15 attempts to diagram how this might work.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 15. Three clock cycles to update a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/mempipeline.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Again, on its face, this looks like it should be doable.  The
Verilog to describe this operation remains straightforward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
// First clock: read from memory
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Take a whole clock to read from memory
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// and keep track of the sample value
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Second clock: add one to the memory value, and
// move r_sample into the next clock cycle as memaddr
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Last clock: write the result back
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Take a whole clock to write to memory
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//
// Don&#39;t forget we&#39;ll need to keep track of the
// original i_ce value, and delay it by two cycles
// to get it into the third clock period.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Delay i_ce to control our write-to-mem action
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is, it looks doable until you start getting into the details.  For
example, what happens if you receive the same sample value for several
clocks in a row?  Let’s say we receive sample value &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; for 7 clocks in a row.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 16. Updating the same sample for many clocks in a row&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/trace-wo-bypass.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After receiving &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample=0&lt;/code&gt;, we read from memory.  Let’s suppose we start from
zero for the sake of simplicity.  Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;memval=0&lt;/code&gt; on the next clock
cycle, &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew=1&lt;/code&gt; on the cycle after that, and &lt;code class=&quot;highlighter-rouge&quot;&gt;mem[0]=1&lt;/code&gt; on the following
cycle.  Finally, on the next cycle &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; can read the value &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; from memory.&lt;/p&gt;

&lt;p&gt;The result is that after receiving our value across seven different clock
cycles, we’ve only marked three counts into our bin counter–not seven.&lt;/p&gt;

&lt;p&gt;Remember our goal of high throughput?  We want to be able to process every
sample at a rate as high as our FPGA will allow.  That means we want to be
able to accumulate one sample per clock across several clocks as we did above.&lt;/p&gt;

&lt;p&gt;This is going to be a problem.  We’re going to need to solve it in order
to build a good generic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
That said, we’ll come back to this again when we have the formal tools
helping us out.  That’ll make it a lot easier to work out.&lt;/p&gt;

&lt;p&gt;There’s also the issue of initializing our array that we haven’t yet discussed.
This brings us to the last rule for block RAM allocation:&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;&lt;strong&gt;Rule:&lt;/strong&gt; You can’t initialize all of a memory at the same
time.  You can only start
the memory with known contents, and then write to one address in memory
(or not) on any subsequent clock tick.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This may be more of an FPGA rule than an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; rule.  The
problem is that most FPGA block RAMs have no capability for adjusting
every value of the memory at once.  You can access one, or sometimes
two, values at a time but never clear the whole array.&lt;/p&gt;

&lt;p&gt;This particular rule is even more annoying than the last two, and it’s going
to take some work to accomplish.  The good news, though, is that we’ve now
got an open clock between our memory read and our memory write that we
can use for … whatever logic we want.  This will be where we place our
initialization.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Second clock tick, after reading from memory
// into memavg.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clear another address of memory
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// as part of our reset cycle
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Add one to the last sample value
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// we&#39;ve seen from our input
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Keep track of which step in our pipeline
// is processing input data, and use it to
// turn on memory writes
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Write to memory, ignore incoming
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// data when resetting
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Finally, if cepipe[1] is ever true, write our
// result (or zero) to our histogram memory
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Okay, so we’re going to need more than that, but you should be able to get the
gist of the idea from just that alone.&lt;/p&gt;

&lt;p&gt;A simple and fairly basic state machine can then be used to control our
reset.  The states will look like: 1) Reset, 2) Initialize memory,
3) Count samples, 4) Switch memories, 5) Initialize the new memory,
6) Count samples into the new memory, and so forth.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 17. Double-memory histogram state machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/fsm.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;By using two separate memory sections, one will always be valid and available
to be read.  That way, while we are resetting and then accumulating counts to
generate a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
in one memory section, the other section will hold the counts from the last
average.  In this manner, user code will not need to synchronize to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;–it will always be there.&lt;/p&gt;

&lt;p&gt;Of course, one disadvantage is that something might happen while we are
resetting the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
memory that would then be missed.  Whether that is important to you or not is
application dependent.  Similarly, how you go about fixing the problem is also
application dependent.  On some applications, data might arrive slow enough
that a FIFO can hold on to it during our reset, but I digress.&lt;/p&gt;

&lt;p&gt;For now, let’s turn to examining how we are going to build this.&lt;/p&gt;

&lt;h2 id=&quot;the-formal-contract&quot;&gt;The Formal Contract&lt;/h2&gt;

&lt;p&gt;Before diving into
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;the details&lt;/a&gt;,
let’s just quickly examine at a top level how we might verify a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;histogram&lt;/a&gt;.
I like to call this the &lt;em&gt;contract&lt;/em&gt;: a formal description of how a design
is supposed to work that then forms the framework for laying the details out.
In this case, our contract consists of little more than a counter.&lt;/p&gt;

&lt;p&gt;First, we’ll pick the address of an arbitrary value in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyconst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or rather, we’ll let the solver pick an arbitrary address–that way we can be
assured that the properties of the memory at the chosen address could easily
be applied to all all memory locations.  This is the purpose of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;(* anyconst *)&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Next, we’ll create a counter to describe how many times we’ve seen this value.
These will become the counts that we read from our design across the bus
later on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clear our special value on or during any reset
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// In all other cases, if we see somthing, accumulate  it
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, we’ve chosen to use two memories–one where we accumulate values,
and the second which we can later read from using the system bus.  The value
&lt;code class=&quot;highlighter-rouge&quot;&gt;activemem&lt;/code&gt; above captures which memory we are examining.  Hence, if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;
is ever true, that is if we have a new sample, and if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; matches
the special sample we’re going to examine during our proof, then &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt;
should increment.&lt;/p&gt;

&lt;p&gt;Now we just have to prove, later on, that this value actually matches the
value in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only … our three clock addition is going to make this comparison a bit more
difficult.&lt;/p&gt;

&lt;p&gt;At any rate, that’s our goal–matching that value, but in memory.  Let’s
see how we can go about getting there.&lt;/p&gt;

&lt;h2 id=&quot;building-the-histogram-peripheral&quot;&gt;Building the Histogram Peripheral&lt;/h2&gt;

&lt;p&gt;It’s now time to build &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;our
peripheral&lt;/a&gt;.
Let’s pick some number of counts we wish to average together, and how big
our incoming samples will be (&lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; bits).&lt;/p&gt;

&lt;p&gt;We can then declare the I/O port list for our module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;MEMSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m going to try something new this time–building the design for one of two
bus structures, either
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
or
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.  To keep
our notation constant across both, we’ll create a new clock value, &lt;code class=&quot;highlighter-rouge&quot;&gt;clk&lt;/code&gt;,
and a new reset value, &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt;.  We also want to capture when a bus write is
taking place.  We’ll later use that as an out of cycle cue of when to start
accumulating values into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
bins.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Memory really needs to start initialized, so let’s give all of our memory an
initial value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMSZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much to my surprise, this turned out to be an intensive process for
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;–particularly because
the memory is so large (2^10 entries).  So, instead, I simplified this process
for the formal proof and turned it instead into,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But we’ll have more on that later when we get to our formal verification
section.&lt;/p&gt;

&lt;p&gt;We’re also going to need to count samples going into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;, so we know
when we’ve accumulated a full (parameterized) &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt; counts.  Here we have
a basic counter that just counts up on any new sample, but never quite reaches
&lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why not?  Because when we get to one less than &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;, we are going to set
a flag indicating we want to start a reset cycle, &lt;code class=&quot;highlighter-rouge&quot;&gt;start_reset&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I mentioned above that I also wanted to be able to command a reset from the
bus, so let’s allow a bus write to initiate a reset cycle as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Two other little details: we don’t want to start a reset cycle if we are already
in one, unless we get an actual reset signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Getting this to only recycle once, and to make certain that every memory
value got cleared on reset, took more work than I was expecting.  One part of
that work is a signal that we are on the first clock of our reset sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second part is a flag I call &lt;code class=&quot;highlighter-rouge&quot;&gt;resetpipe&lt;/code&gt;.  The idea with this signal is that
if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;resetpipe&lt;/code&gt; is true, we are then in a reset cycle where we zero out
our memory, otherwise we’ll be in normal operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one last part to our reset: once we get to the maximum number of counts,
we’ll want to switch memories.  Further, on any memory switch, we’ll set a
user interrupt–so an attached
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can know that there’s new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
data which may be examined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Put together, a memory swap and reset re-initialization should look something
like the trace shown in Fig. 18 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 18. Internal memory reset&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/reset-cycle.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic sequence is that, when we get to the end of our count, &lt;code class=&quot;highlighter-rouge&quot;&gt;start_reset&lt;/code&gt;
goes high.  &lt;code class=&quot;highlighter-rouge&quot;&gt;resetpipeline&lt;/code&gt; then goes high on the next count and stays high
while we write zeros across all of our memory.  Once we’ve cleared all memory,
we’ll start accumulating into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
into the just cleared bins again.&lt;/p&gt;

&lt;p&gt;Notice that change in &lt;code class=&quot;highlighter-rouge&quot;&gt;activemem&lt;/code&gt;, noting that we switched histogram banks.
At the same time we switched banks, we also issued an &lt;code class=&quot;highlighter-rouge&quot;&gt;o_int&lt;/code&gt; to indicate
that the new data was now valid in the older bank.&lt;/p&gt;

&lt;p&gt;In a moment, we’ll start working our way through the three cycles required
by a bin update.  I’m going to use a three bit shift register, &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe&lt;/code&gt;, to
capture when new or valid data works its way through our pipeline in what I
like to call a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;travelling clock enable
(CE)&lt;/a&gt;
approach.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all of the necessary preliminary work.  Now let’s work our way through
those three clock cycles.&lt;/p&gt;

&lt;p&gt;On our first clock cycle, we’ll read from memory,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and record the address we read from–since we’ll need to know that again later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the next clock cycle, we’ll want to add one to &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;, and then write it
back to memory.  Only … it’s not that easy.&lt;/p&gt;

&lt;p&gt;To clear this up, let’s allow that we are going to write to &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt; a value
of &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt;.  While we are in the middle of a reset cycle, we’ll increment this
address across all memory spaces and write zeros into all spaces.  The only
exception is on the first clock tick, when &lt;code class=&quot;highlighter-rouge&quot;&gt;first_reset_clock&lt;/code&gt; is active.  On
that tick, we’ll make sure that we are starting from the beginning of memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that the reset is out of the way, we’ll want to write a new value to
what was the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; bin from the last clock tick, but now the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_sample&lt;/code&gt;
bin.  From that memory, we read &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; and so now we want to update it and
place the update into &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// We haven&#39;t used this value yet, so it&#39;s memory
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// copy is up to date--add one to it
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, the problem is … what if we just updated this value in the last
cycle?  That is, what if we are now writing &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt;?  It’ll take
two clock cycles before we can read it back again!  We can avoid this problem
with a simple check that we are writing to &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt; on this cycle, and just
add one to our current accumulator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is sometimes known as operand forwarding–rather than going through
a register file, we’re short-circuiting the operation and going straight back
into our accumulator.&lt;/p&gt;

&lt;p&gt;Only … that’s not enough.  If we had written to memory on the last cycle, it
would still  take us another clock to read that value back.  So let’s set up
a second stage of operand forwarding as well, to grab the value that was just
written to memory—but skipping the memory read.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bypass_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bypass_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how we’ll go about avoiding the problems shown in Fig. 16 above.&lt;/p&gt;

&lt;p&gt;We’re finally on our third clock tick.  At this point, we simply write
our &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt; value to memory at address &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one last step required: we need to keep track of the last value written
to memory, lest we want to bypass the memory and go straight back into our
accumulator as described above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bypass_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bypass_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that’s left now is to work our way through the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;peripheral logic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, this is easy.  On any clock tick, we read from the
address given by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_addr&lt;/code&gt; and the memory bank that we aren’t currently
writing into.  That’ll give us clear access to a clean
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;,
rather than one that’s still updating.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also immediately acknowledge any request, and keep our
stall line low so we can accept requests at all times.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;adjusting-this-to-handle-axi&quot;&gt;Adjusting this to handle AXI&lt;/h2&gt;

&lt;p&gt;For those who want to adjust this core to work with an
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 bus&lt;/a&gt;,
this transformation can be done quite easily.  First, you’ll want to use either
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXILDOUBLE&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXIDOUBLE&lt;/a&gt;
to simplify out the protocol.  Once done, the bus has been simplified for
you.  For example, all of the ready signals in the simplified slave may be
assumed to be high, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; are the same signal.  This
makes interacting with the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 bus much easier than it was the last time
we tried this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we’d adjust the name of  our clock and reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also assign &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_write&lt;/code&gt; based upon &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; alone, and use that
to initiate a reset sequence.&lt;/p&gt;

&lt;p&gt;Further down in our file, we’ll set our return values.  In particular, we’ll
want to return the read data into &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll just hold the read and write responses at a constant “OKAY”
value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Note that the AXI4 peripheral code above is only representative.  It has
not been (yet) been properly formally verified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I find this easier to work with than the full
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 protocol&lt;/a&gt;.  It gets
past all of the problems others have had, although it will only work in
the context of using a pre-protocol processor such as
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXILDOUBLE&lt;/a&gt;
for AXI-lite or
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXIDOUBLE&lt;/a&gt;
for pre-processing AXI4.&lt;/p&gt;

&lt;p&gt;That’s it!  You now have a working
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 peripheral&lt;/a&gt;, for almost
as little work
as would be required for building a straight &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone
peripheral&lt;/a&gt;.  The
protocol pre-processor takes care of all of the back-pressure issues, AXI4 IDs,
AXI4 burst transactions, and so forth–making your job building a bus slave
much simpler.&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-our-histogram&quot;&gt;Formally Verifying our Histogram&lt;/h2&gt;

&lt;p&gt;Now that we’ve gotten this far, let’s see what it takes to formally verify
this design.&lt;/p&gt;

&lt;p&gt;We’ll start with the obligatory &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; register, that then gives us
access to being able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; in an assertion later on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also use &lt;code class=&quot;highlighter-rouge&quot;&gt;f_mem_data&lt;/code&gt; as short-hand for the value in our solver-chosen
memory address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we skipped initializing the whole memory in order to make the proof run
faster, let’s just assume that the initial value is zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Functionally, this acts the same within a formal environment as
&lt;code class=&quot;highlighter-rouge&quot;&gt;initial mem[f_addr] = 0;&lt;/code&gt; would, but I hesitate to modify
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;the core&lt;/a&gt;’s
operational logic in the formal verification section.&lt;/p&gt;

&lt;p&gt;Next, since the &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone
interface&lt;/a&gt;
is so simple, I’m going to take a risk and not include my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal Wishbone
property file&lt;/a&gt;.  Instead,
I’ll just assume that if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; is low then &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; must be low as well.
That’ll at least make the traces look closer to what we want, even if it doesn’t
functionally affect anything we are doing above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ve seen above how we are going to accumulate bin counts
into &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt;.  Here’s where that code lies.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clear our special value on or during any reset
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// In all other cases, if we see our special value,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// accumulate  it
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, to keep track of the register forwarding issue, I’m going to create
another value similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe&lt;/code&gt; register for watching the update of our
special value work its way through our logic.  In this case, it’s going to be
for watching any request for our special operand as it transits through the
system.  Hence, if &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe[0]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; should equal the value from our
special address and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_sample&lt;/code&gt; should match &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe[1]&lt;/code&gt;,
then we’ve just added one to the value from our bin and so forth.  The only
special trick is that we want to clear this value during the reset cycles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s go check our counter.  During a reset cycle, the counter should be
zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if we aren’t updating the value, then it should match what’s in
our block RAM.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
will require just a touch more work.&lt;/p&gt;

&lt;p&gt;In the case of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe&lt;/code&gt; indicates only a single value,
then it’s the value we just read from memory into &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; following seeing
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; at the input.  It should be identical to what our &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt;
value was one clock ago–that is before it just got updated.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, once we add one to this value, it should equal our counter post update
as well–just one clock later, only it is now kept in &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe[2]&lt;/code&gt; is ever true, then we’ve just written to memory.
The value in &lt;code class=&quot;highlighter-rouge&quot;&gt;bypass_data&lt;/code&gt; should match &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt; just after it was
updated–only now we’re two clocks later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bypass_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s also check writing to the data.  As you may recall, we write to the
memory on the third clock of our pipeline, whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe[1]&lt;/code&gt; bit of
our shift register is true.  On the clock after any such write,
our counts value (two clocks ago) should now match what’s in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we also need to check that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_mem_data&lt;/code&gt; is properly reset as part of
the reset cycle.  Note that the check below checks the memory bank, kept in
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr[AW]&lt;/code&gt; against the active memory bank separate from the inequality
checking whether or not the current bank has been cleared or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, one other check on &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe&lt;/code&gt;: If ever any of its values are true,
the corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe&lt;/code&gt; value must be true as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this looks like just a bunch of minutia, its not nearly as bad as it looks.
I started with just some very simple properties, like the two listed below:
that the data in memory could never exceed &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt; nor could our counter ever
exceed that value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This led to the need to also assert that our number of counts needed to be
less than the counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While these assertions might seem quite straightforward, working through the
design so as to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
then lead to many of the other assertions I’m presenting here.  Then, once
the design passed
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
at 80 steps, I shortened the length to 10 steps.  When the final assertion was
in place to verify the design at 10 steps, I was then able to shorten the
proof further to 6, where it stands today.&lt;/p&gt;

&lt;p&gt;Let’s take a moment to look through the reset sequence next.  In particular,
we want to make certain that the &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; remains at zero throughout the reset
sequence.  It will start incrementing again once we start accepting samples
again after the reset sequence is complete.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, we’ll want to check that we can get into and start a reset properly.
In particular, we want to initiate a reset anytime we accept a value while
the count it just less than &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we start this sequence, we’ll want to change our memory bank, &lt;code class=&quot;highlighter-rouge&quot;&gt;activemem&lt;/code&gt;,
set an interrupt, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_int&lt;/code&gt;, reset the count, &lt;code class=&quot;highlighter-rouge&quot;&gt;count == 0&lt;/code&gt;, and raise the
&lt;code class=&quot;highlighter-rouge&quot;&gt;start_reset&lt;/code&gt; flag.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look at this another way, we want to assert an outgoing interrupt
anytime we switch memory banks (except following a reset) and at no other times.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s enough to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
but … does the design even work?&lt;/p&gt;

&lt;h2 id=&quot;cover-checks&quot;&gt;Cover Checks&lt;/h2&gt;

&lt;p&gt;To convince ourselves
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;this design&lt;/a&gt;
actually works, rather than just passing a set of abstract property checks,
we’ll run some cover checks on the design.&lt;/p&gt;

&lt;p&gt;In particular, let’s prove that we can actually achieve a data count equal
to the number of averages we are doing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now see in the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
below how this looks.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 19. Cover check--counting up to the full sample size&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/histogram/cover_trace.png&quot;&gt;&lt;img src=&quot;/img/histogram/cover_trace.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The trace starts out with a reset, and then walks through clearing all memory.
We then accept sixteen samples of &lt;code class=&quot;highlighter-rouge&quot;&gt;4&#39;hd&lt;/code&gt;–exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;.  The design then
switches memory banks and starts the reset on the new memory bank–exactly
like we wanted!&lt;/p&gt;

&lt;p&gt;Well, almost.  I mean, you could get picky.  For example, the design re-enters
the reset state several times at the end because we never kept &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; from
going high again, but this doesn’t really impact what I wanted to show.  If
we had wanted to get fancier, we could’ve added more criteria to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
command.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Calculating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of your incoming data is a very basic analysis task
that you will want to be prepared to accomplish as you build any system.
There are lots of bugs you can diagnose just by looking over the resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;, as we’ve seen above.
Further, if you choose to use a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;block histogram calculation
routine&lt;/a&gt;,
the logic can be really straightforward.&lt;/p&gt;

&lt;p&gt;That said, it wasn’t as simple as you might think.  In particular, the three
rules of block RAM memory added to the complexity–even though they helped
make certain our design fit into a block RAM in a first place.  These rules
forced us to read from memory in one cycle, calculate an updated value on the
next, and finally write the result on the third.  Further, since you can’t
clear all of a memory at once, you can also see how a basic state machine
can make that happen.&lt;/p&gt;

&lt;p&gt;Even better, I was able to demonstrate how simple an
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 peripheral&lt;/a&gt;
can be made to be using either the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXILDOUBLE&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXIDOUBLE&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2019/08/30/subbus.html&quot;&gt;pre-protocol processors&lt;/a&gt;.
Indeed, our resulting &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4
peripheral&lt;/a&gt;
logic was almost &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;as simple to
write&lt;/a&gt; as the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone peripheral&lt;/a&gt;’s
logic was.&lt;/p&gt;

&lt;p&gt;Finally, if you are interested in &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;this
code&lt;/a&gt;,
or the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/formal/histogram.sby&quot;&gt;SymbiYosys
script&lt;/a&gt;
used to drive &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt; when verifying
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;this core&lt;/a&gt;,
you can find both in my &lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;DSP filters project
repository&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Likewise reckon ye also yourselves to be dead indeed unto sin, but alive unto God through Jesus Christ our Lord.  (Rom 6:11)&lt;/em&gt;</description>
        <pubDate>Sat, 21 Dec 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/dsp/2019/12/21/histogram.html</link>
        <guid isPermaLink="true">https://zipcpu.com/dsp/2019/12/21/histogram.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Quiz #9: Immediate assertions midst blocking assignments</title>
        <description>
</description>
        <pubDate>Thu, 12 Dec 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2019/12/12/quiz09.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/12/12/quiz09.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Quiz #8: Will this pass a bounded model check?</title>
        <description>&lt;p&gt;As always, if you are unsure, I would encourage you to try this proof yourself.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Nov 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2019/11/29/quiz08.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/11/29/quiz08.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>The ZipCPU meets blinky</title>
        <description>&lt;p&gt;If you’ve never heard of “blinky” before, it’s the name given to a piece of
software or even an FPGA design that simply blinks an LED.  &lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;We’ve discussed
building blinky before&lt;/a&gt;,
as well the &lt;a href=&quot;/blog/2017/05/20/knight-rider.html&quot;&gt;more advanced (but no less fun) project
of moving an active LED back and forth across a set of
LEDs&lt;/a&gt; like one of my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Knight_Rider&quot;&gt;favorite TV shows as a kid, “Knight Rider”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even better, we’ve also discussed how to create a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/195b77dc144d6ed7d4280f506c35b2204f13908c/rtl/arrowzip/wbgpio.v&quot;&gt;general purpose I/O
controller&lt;/a&gt;,
which could then be used to &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;run a blinky program from within a
CPU&lt;/a&gt;.
In that particular article, we also measured how fast a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
could toggle an I/O pin as part of such a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/e7b39a56ee515d1cabe8427f30c7add0592bfab1/sw/board/gpiotoggle.c&quot;&gt;blinky
program&lt;/a&gt;.  The resulting toggle rates, between
1 and 47MHz, are fairly impressive for a soft-core running within an FPGA
with a 100MHz system clock.&lt;/p&gt;

&lt;p&gt;Today, let’s return to blinky again, but this time let’s compare and contrast
several approaches to the problem of toggling four separate LEDs: one at &lt;code class=&quot;highlighter-rouge&quot;&gt;1Hz&lt;/code&gt;,
one at &lt;code class=&quot;highlighter-rouge&quot;&gt;2Hz&lt;/code&gt;, one at &lt;code class=&quot;highlighter-rouge&quot;&gt;3Hz&lt;/code&gt;, and a fourth one at &lt;code class=&quot;highlighter-rouge&quot;&gt;5Hz&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fpga-blinky&quot;&gt;FPGA blinky&lt;/h2&gt;

&lt;p&gt;The easiest way to toggle four separate LEDs at once on an FPGA is to create
four separate blinky modules.  Each module would have a counter of some number
of bits, say &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB+1&lt;/code&gt; bits, so it might be defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;reg [MSB:0] counter;&lt;/code&gt;.
We could then add a different step in each module, where the step size
is &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(MSB+1)/CLOCK_FREQUENCY * BLINK_FREQUENCY&lt;/code&gt;, and so create blinking LEDs
at any frequency we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLINK_FREQUENCY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCK_FREQUENCY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Four counters, each driving LED&#39;s&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/fpgax4.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Internally, this might look something like Fig. 1 on the right.  Fig. 1 shows
four separate logic blocks, each similar to the block above, and each toggling
an LED at its own rate.&lt;/p&gt;

&lt;p&gt;Of course, this doesn’t tie our LEDs together in phase.  What if we wanted
all of them to have the same phase, so that they all turned on together at the
top of a second?&lt;/p&gt;

&lt;p&gt;In that case, we’d need to multiply a common counter, set to step at
&lt;code class=&quot;highlighter-rouge&quot;&gt;2^(MSB+1)/CLOCK_FREQUENCY&lt;/code&gt;, by our blink frequency to get the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLINK_FREQUENCY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCK_FREQUENCY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STEP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter_1hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter_2hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter_3hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter_5hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_led_1hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter_1hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_led_2hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter_2hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_led_3hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter_3hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_led_5hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter_5hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. Generating synchronized blinks from a counter&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/fpga-sync.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you’ve never built a design like this before, then I would encourage you
to try this.  Remember to formally verify it first, and then run it in
simulation.  The &lt;a href=&quot;/tutorial/&quot;&gt;tutorial&lt;/a&gt; should help you
there if you have any questions.&lt;/p&gt;

&lt;p&gt;For a next level challenge, consider removing the multiplies and replacing them
with shifts and adds.  Since we’re only multiplying by 2, 3, or 5 above,
this should be fairly easy.&lt;/p&gt;

&lt;p&gt;If you work with FPGAs at all, this test should be fairly basic–perhaps
even too easy.  If you haven’t, this is a fun place to start.&lt;/p&gt;

&lt;p&gt;Today, though, let’s take it up a notch.&lt;/p&gt;

&lt;h2 id=&quot;cpu-blinky-polled&quot;&gt;CPU Blinky, polled&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Placing a CPU within an FPGA&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/fpgawcpu.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Moving from simple logic to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
is a big step within an FPGA.  Even if we use a resource minimized
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
such as the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
you’ll still need a lot of additional infrastructure.  At a minimum,
you’ll need a ROM to store startup instructions (I like using a &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash
memory device&lt;/a&gt;), a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;RAM to hold any local variables&lt;/a&gt;, a
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
to determine what 1Hz is and a GPIO controller to actually set any LED values.
We’ll also use a &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;Programmable Interrupt Controller
(PIC)&lt;/a&gt;
as part of our solution.  Tying all of these together will require some type
of &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;memory and peripheral bus (I like
Wishbone)&lt;/a&gt;, such as
is shown in Fig. 3 on the right.&lt;/p&gt;

&lt;p&gt;When we &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;last discussed blinking an LED from a
CPU&lt;/a&gt;, we discussed
how to turn the LED on by &lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;writing to a particular register from a C
program&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then writing again to turn it off.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_OFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4. Blinking with a counter&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/cpu-wait-counter.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you wanted to toggle an LED across some time period, you could wait in a for
loop, and then toggle your LED–as shown below and in Fig. 4 on the left.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WAITTIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WAITTIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_OFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Getting the value for WAITTIME just right might take some work.  Worse,
&lt;a href=&quot;https://en.wikipedia.org/wiki/CPU_cache&quot;&gt;cache&lt;/a&gt;s are notorious for
providing fast but unpredictable wait times for both instructions and data.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Triggering off of a 1ms hardware counter&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/cpu-polled.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But how might we handle four LEDs each toggling at a different rates?&lt;/p&gt;

&lt;p&gt;We could use a timer!  Remember our work building an
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;interval timer&lt;/a&gt; some time
ago?  Let’s use it now.  We’ll suppose the address of this timer is kept in the
&lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;constant pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;_timer&lt;/code&gt;&lt;/a&gt;,
and we’ll have it create a repeating interval of one millisecond.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80000000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8000&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_0000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPU_FREQUENCY_HZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then use our &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt
controller&lt;/a&gt;, with a
&lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;register addresss&lt;/a&gt;
at &lt;code class=&quot;highlighter-rouge&quot;&gt;_pic&lt;/code&gt;, to determine if this timer has tripped:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Turn off all interrupt sources, and clear
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// all active interrupt indications
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fff7fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Reset any tripped interrupts
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ffff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt&lt;/a&gt;
has tripped, we know a millisecond has passed, so we can increment our
millisecond counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;count_ms&lt;/code&gt;, and then toggle each of our LEDs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Poll the interrupt timer to check
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// if the interrupt has tripped
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_TIMER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// if it has, adjust our LEDs
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// based upon the millisecond
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// counter, count_ms
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, polling the &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt
controller&lt;/a&gt;
like this is really the wrong way to do this, but let’s come back to
this thought in the next section when we discuss how to do this with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the neat things about this approach compared to the uncalibrated
&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop above is that we can now know &lt;em&gt;exactly&lt;/em&gt; how many clocks take
place between &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.
We also know that, should the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;,
be late in processing an LED fast enough, at least the sequence will maintain
its frequency rather than randomly getting later and later and so slower–since
the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
restarts itself every ms in this case.&lt;/p&gt;

&lt;p&gt;For now, let’s look at this &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle_leds_on_ms()&lt;/code&gt; function.  How should this
function work?  The same way as before!  We’ll multiply our counter by
the toggle rate, divide by the number of counts per second, and then
grab the resulting bit of interest from the number of times the counter
wraps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;toggle_leds_one_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// count_ms is the number of milliseconds from the top of our
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// second, ranging from 0 to 999.
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// count_ms times our rate will give us a counter that overflows
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// (rate) times per second.  Twice that creates a counter that
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// overflows (2*rate) times per second--enough for us to turn on
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// and then off the LED.
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mpy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mpy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// mpy &amp;amp; 1 now contains what we want our counter value to be
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Turn this LED on
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Turn this LED off
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;the way we constructed our GPIO
controller&lt;/a&gt;: the
top 16 bits on read are any inputs to our design, while the bottom 16 bits
are outputs.  To be able to set particular output bits and not others, we write
a mask of the outputs we wish to adjust to the top 16 bits of the
register–hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;(which_led &amp;lt;&amp;lt; 16)&lt;/code&gt; logic from above.  That way we can
leave the other I/O registers alone, while just adjusting only the ones
we want to change.&lt;/p&gt;

&lt;h2 id=&quot;interrupt-driven-cpu-blinky&quot;&gt;Interrupt driven CPU Blinky&lt;/h2&gt;

&lt;p&gt;What if we could shut the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
down, though, when nothing was changing?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 6. Using the ZipCPU WAIT instruction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/wait-for-timer.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This it the purpose of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WAIT&lt;/code&gt; instruction&lt;/a&gt;.
We can get access to it from C without needing any assembly by calling the
built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_wait()&lt;/code&gt; function.  This instruction sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;SLEEP&lt;/code&gt; bit in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;control
register&lt;/a&gt;.
Further, if the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
isn’t already in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user mode (interrupts are enabled only in user
mode)&lt;/a&gt;, it puts the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
into &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user mode&lt;/a&gt;.
Then, when an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
trips, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; will return to
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode (where interrupts are
disabled)&lt;/a&gt; so that we
can process the &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc//spec.pdf&quot;&gt;specification&lt;/a&gt;
discusses how to do this using a &lt;code class=&quot;highlighter-rouge&quot;&gt;wait_for_interrupt&lt;/code&gt;
function.  This function primarily deals with setting up the &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt
controller&lt;/a&gt;,
but once done it issues a &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_wait()&lt;/code&gt; instruction for exactly this purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;wait_for_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interruptmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Turn off all interrupts, while acknowledging none of them
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fff0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Turn on only this interrupt
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interruptmask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80008000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Be careful not to adjust any interrupts that have
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// already tripped (the bottom 16 bits of the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// _pic), lest we miss the interrupt we are
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// looking for
&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Wait for the interrupt, forcing the CPU to sleep
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// until the next interrupt
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;zip_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// We won&#39;t clear the interrupt here,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// lest we destroy some information the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// calling function needs.
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can rewrite our code from above to wait for an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.
Once done, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
will sleep between its top-of-the-millisecond
computations.  The biggest difference in the code below is that
we now issue a &lt;code class=&quot;highlighter-rouge&quot;&gt;wait_for_interrupt()&lt;/code&gt; call at the top of every loop.
Following that call, things should look about the same as before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff7fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Clear all interrupts
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wait_for_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INT_TIMER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Now check for any tripped interrupts
&lt;/span&gt;		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Reset any tripped interrupts
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;_pic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ffff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Check if the timer interrupt has tripped
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_TIMER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// if it has, adjust our LEDs
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// based upon the millisecond
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// counter, count_ms
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggle_leds_one_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggle_leds_one_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggle_leds_one_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;toggle_leds_one_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not bad, huh?&lt;/p&gt;

&lt;p&gt;This program now functions exactly the same as the last one, save that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is inactive while waiting for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.
This can have two advantages.  First, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
will stop using the bus, allowing any non-CPU logic to transfer
data without contention from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Second, since the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
will stop issuing instructions, it can be placed into a lower power state.
Stopping the CPU clock at this point might even be an option to lower power–as
long as any &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
source kept clocking, and as long as the &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt
controller&lt;/a&gt;
could restart the CPU’s clock.  Still, it is doable, although it does depend
upon how much work you want to do to keep your power down.&lt;/p&gt;

&lt;p&gt;What if we wanted to get really fancy, though, and create a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/intdemo.c&quot;&gt;multitasking
blinky&lt;/a&gt;?
One where we had a separate program to toggle each of several various LEDs?&lt;/p&gt;

&lt;h2 id=&quot;multi-blinky&quot;&gt;Multi Blinky&lt;/h2&gt;

&lt;p&gt;To build the multi-tasking blinky, let’s step back and just look at the question
of how to run multiple software programs on a piece of hardware.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Blinking an LED with four separate CPUs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/cpux4.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The easiest way to do this, software-wise, might be to build multiple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s, as shown in
Fig. 7 on the right.  Easy, that is, until the two programs need to
communicate with each other …  but that’s a story for another day. Each
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
might then run a separate program toggling an LED.&lt;/p&gt;

&lt;p&gt;Let’s build such a program now.  We’ll start by removing the counter
from our &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle_leds_one_ms()&lt;/code&gt; function.  Instead, we’ll make the total number
of milliseconds that have passed into a global variable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll then adjust our &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle_leds_one_ms&lt;/code&gt; function so that it just reads and
references this global &lt;code class=&quot;highlighter-rouge&quot;&gt;milliseconds&lt;/code&gt; counter.  We’ll call this new function
&lt;code class=&quot;highlighter-rouge&quot;&gt;toggleled&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;led_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// LED was on.  Turn it off
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;led_bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// LED was off.  Turn it on
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;led_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;led_bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice our care to only read the global &lt;code class=&quot;highlighter-rouge&quot;&gt;milliseconds&lt;/code&gt; value once.  Since reads
are atomic and since we copied the &lt;code class=&quot;highlighter-rouge&quot;&gt;milliseconds&lt;/code&gt; value, we don’t have to worry
about it changing mid-routine as a result of any routine that might
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
this processing.&lt;/p&gt;

&lt;p&gt;A second thing to notice is that &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the
design&lt;/a&gt; we are basing this off of has a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/spio.v&quot;&gt;&lt;em&gt;Special Purpose I/O&lt;/em&gt;
register&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;_spio&lt;/code&gt;.  Setting LED’s in this &lt;code class=&quot;highlighter-rouge&quot;&gt;_spio&lt;/code&gt; register is just like using the &lt;code class=&quot;highlighter-rouge&quot;&gt;_gpio&lt;/code&gt;
register above, save that the LED area is now the lower 8-bits, and the
“adjust-these-bits” area is the 8-bits above that.  Hence, our reference
above to &lt;code class=&quot;highlighter-rouge&quot;&gt;_spio&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;(led_bits&amp;lt;&amp;lt;8)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, as long as something exists to count and keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;milliseconds&lt;/code&gt;
counter for us, we can write a program to toggle our first LED at 1 Hz
as simple as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;one_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now if each CPU on our circuit board had such a program, they could all
toggle their LEDs together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;two_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;three_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;five_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toggleled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are a couple of problems with this approach.  First and foremost, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
project has been built around small FPGAs and low logic.  (I never really had
the budget for much more.)  Four
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s,
whether on four circuit boards, four chips on the same circuit board, or four
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
within the same FPGA, has never been within my budget.  I’d like to
run each of these four separate programs on the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
instead.&lt;/p&gt;

&lt;p&gt;The solution to this problem is to virtually switch CPUs over time, as shown
in Fig. 8 below, through a process called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Time-sharing&quot;&gt;time-sharing&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. Blinking an LED with four separate CPUs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/timeslice.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s how it works: First, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; will start out running one
program–we’ll call this context 1 or &lt;code class=&quot;highlighter-rouge&quot;&gt;C1&lt;/code&gt; for short.  Then, after some
period of time, we’ll call it a &lt;em&gt;quanta&lt;/em&gt; and set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;1ms&lt;/code&gt;, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
will return the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; to its supervisory task, &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;.
The supervisory task will switch programs to the second context, &lt;code class=&quot;highlighter-rouge&quot;&gt;C2&lt;/code&gt;, which
will then run for the next &lt;em&gt;quanta&lt;/em&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 9. Contexts contain CPU Register sets&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/contexts.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The key to the whole operation is that each “program” needs to
believe that it owns the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
In order to support this,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
are typically designed so that their entire state is captured within a set of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;.
This
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
set, defining what the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
is up to, is called a &lt;em&gt;context&lt;/em&gt;.  Each &lt;em&gt;context&lt;/em&gt; contains its own
set of &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;s,
&lt;code class=&quot;highlighter-rouge&quot;&gt;R0&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt; on the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU&lt;/a&gt;,
to include the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;SP&lt;/code&gt;&lt;/a&gt;
(also known as &lt;code class=&quot;highlighter-rouge&quot;&gt;R13&lt;/code&gt;), &lt;a href=&quot;https://en.wikipedia.org/wiki/Status_register&quot;&gt;condition codes
&lt;code class=&quot;highlighter-rouge&quot;&gt;CC&lt;/code&gt;&lt;/a&gt;
(also known as &lt;code class=&quot;highlighter-rouge&quot;&gt;R14&lt;/code&gt;), and the address of the next instruction, often called
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter &lt;code class=&quot;highlighter-rouge&quot;&gt;PC&lt;/code&gt;&lt;/a&gt;
or equivalently &lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt; on the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU&lt;/a&gt;.
Therefore, in order to switch from running one program to another all the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; needs to do
is to write the current context (i.e.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; set)
to memory, and to then to read the stored context for the next program
from memory.  This is often called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;context
switch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To facilitate &lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;context
switching&lt;/a&gt;, the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU&lt;/a&gt;
maintains two copies of its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; set:
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;one for the supervisor and one for user
programs&lt;/a&gt;.  Of these
two, the supervisor context is never swapped.  Indeed, it is the supervisor
context that swaps user contexts.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. Each context needs its own stack area&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/memlayout.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Outside of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
each context will also need an area of memory for its local variables.
This is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;the stack&lt;/a&gt;,
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer&lt;/a&gt;
will point to a location within this memory–starting at the end of the memory.
As memory is allocated, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack
pointer&lt;/a&gt; will grow towards lower
memory as shown by the upwards arrow in Fig. 10.&lt;/p&gt;

&lt;p&gt;We can use a simple array of integers to capture the information contained in
a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To &lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;swap between one program and
the next&lt;/a&gt;, we’ll just swap
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; sets.
The two programs will never know what happened, because when the next program
is activated, all of its data will be right there in its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;s
just as it was when it left off.&lt;/p&gt;

&lt;p&gt;Let’s walk through how we might do this.&lt;/p&gt;

&lt;p&gt;The first step will be to assign a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt;
to each task, as shown in Fig. 10 above.  This is a place of
memory designed to hold each task’s local variables.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 11. The heap grows downwards&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/multithreaded-blinky/heap.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Normally, I’d use &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; to do this or even the C++ &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator.
Today, we’re going to try to do this without the C-library.  As a result,
we’ll need an alternative.  I’m going to call that alternative &lt;code class=&quot;highlighter-rouge&quot;&gt;ugly_malloc()&lt;/code&gt;.
It will act the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt;, except that there’s no &lt;code class=&quot;highlighter-rouge&quot;&gt;free()&lt;/code&gt; call and
so the memory will never return.&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;ugly_malloc()&lt;/code&gt; function is built around a pointer to the end of our
program’s fixed memory locations.  The &lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;AutoFPGA linker
scripts&lt;/a&gt; define this
pointer as &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt;.  We can grab that here,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;_heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just getting to the point where &lt;code class=&quot;highlighter-rouge&quot;&gt;_heap&lt;/code&gt; even gets this value takes a lot of
work, much of which we will skip here.  That work starts in the
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/sdram.ld&quot;&gt;configuration
script&lt;/a&gt;
that describes where the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
memory is even located on a particular hardware architecture.  That script
defines the &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt; pointer and makes certain it’s aligned.  The next
step takes place in the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;,
since &lt;code class=&quot;highlighter-rouge&quot;&gt;_heap&lt;/code&gt; is a variable whose value might change.  Such variables need to
be set initially.  So, this
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;
copies the initial value into &lt;code class=&quot;highlighter-rouge&quot;&gt;_heap&lt;/code&gt; before starting &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/intdemo.c&quot;&gt;our
program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we can now write this &lt;code class=&quot;highlighter-rouge&quot;&gt;ugly_malloc()&lt;/code&gt; function.  This function works
by just grabbing the next &lt;code class=&quot;highlighter-rouge&quot;&gt;nbytes&lt;/code&gt; from the heap, and then incrementing our
&lt;code class=&quot;highlighter-rouge&quot;&gt;_heap&lt;/code&gt; pointer to the next unallocated section of memory.  Since the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
cannot (yet) read from unaligned memory, we’ll also need to make certain this
pointer remains aligned.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ugly_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Get the pointer to the next unallocated piece of memory
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// This is where our returned memory will be located..
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Advance our _heap pointer to the next available piece
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// of memory, while also guaranteeing that the pointer
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// remains aligned.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;_heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// And return the result--the value of _heap when we entered
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using this &lt;code class=&quot;highlighter-rouge&quot;&gt;ugly_malloc()&lt;/code&gt; function, we can now allocate some local
variable space for each of our programs.  This will be the &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;“stack”
space&lt;/a&gt;
used by these programs, and so we’ll use this to set the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SP&lt;/code&gt;
register&lt;/a&gt;
for each of the programs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new_stack_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ugly_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thus function allocates a section of memory &lt;code class=&quot;highlighter-rouge&quot;&gt;nbytes&lt;/code&gt; in length, and then
returns a pointer to the end of it.  Our tasks won’t actually write to this
end value, but will instead back up
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;this pointer&lt;/a&gt;
by however much space they need as they need it.  This is illustrated in
Fig. 11 by an upwards arrow within each task’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack memory area&lt;/a&gt;
showing that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt;
grows upwards towards low memory.&lt;/p&gt;

&lt;p&gt;The astute observer will notice that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack
spaces&lt;/a&gt;, which are
illustrated in Fig. 10, both for the supervisor and each of the user contexts,
are not unlimited.  If they grow too far, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt; will
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_overflow&quot;&gt;overflow&lt;/a&gt; into other memory
regions causing … lots of problems.  Picking how much space to allocate for
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt; is therefore quite
important, and a problem for which I don’t (yet) have a good solution for.&lt;/p&gt;

&lt;p&gt;Since we’ve chosen not to use any system libraries for this code, we’ll need
to write our own &lt;code class=&quot;highlighter-rouge&quot;&gt;memzero&lt;/code&gt; routine so that we can start our tasks off with a
clean slate.  This &lt;code class=&quot;highlighter-rouge&quot;&gt;memzero()&lt;/code&gt; (should-be a) library function is also
pretty basic,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;memzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much as one might expect.&lt;/p&gt;

&lt;p&gt;Incidentally, we could do this operation four times faster if we took
advantage of the fact that our memory is both word aligned and an integer
number of words.  For now, we’ll leave this as an exercise for the student
to try later.&lt;/p&gt;

&lt;p&gt;Now that we have this background under our belt, it’s time to build
our &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/intdemo.c&quot;&gt;multi-tasking blinky&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Starting at the top, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
will begin by executing a
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;This function&lt;/a&gt;
copies our program into memory (if necessary), and then initializes
any global variables.  Once complete, the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;
will call our &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function–giving the appearance that this is where our
program starts.  Once in &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;, we will first define all of our
tasks (i.e. contexts), as well as a &lt;code class=&quot;highlighter-rouge&quot;&gt;current&lt;/code&gt; task pointer to point
to the task that is currently active.  The tasks themselves in this simple
example consist of nothing more than the &lt;code class=&quot;highlighter-rouge&quot;&gt;task_context&lt;/code&gt; structure we defined
above containing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
values of each running program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// **s
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;heartbeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task_context&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTASKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task_context&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;memzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTASKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve also declared a &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; variable as well.  We’ll use this to debug
our program and to determine if anything has gone wrong and we need to enter
into the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;.
Specifically, if ever the &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; counter stops
counting, we’ll know our program is dead.&lt;/p&gt;

&lt;p&gt;There’s actually a couple ways of implementing this &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; idea.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;One way, shown above, is to create a variable on the stack to hold this
value.&lt;/p&gt;

    &lt;p&gt;The first problem with this approach is that the compiler might move this
variable into a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;.  When it’s in
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;, we’ll need
to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging interface&lt;/a&gt;
to read it in order to know if the &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; have ever stopped, rather
than reading this value from memory using the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;There two big problems with this approach.  The first is knowing whether
&lt;code class=&quot;highlighter-rouge&quot;&gt;heatbeats&lt;/code&gt; is in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
vs being in memory.  The second problem is knowing which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; is kept within.  Until the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; supports a &lt;a href=&quot;https://en.wikipedia.org/wiki/Debugger&quot;&gt;source-level
debugger&lt;/a&gt;, this will require
examining some (dis)assembly to see how the compiler allocated it.  You
can use &lt;code class=&quot;highlighter-rouge&quot;&gt;zip-objdump -D intdemo &amp;gt; intdemo.txt&lt;/code&gt; to examine this (dis)assembly.
Since I find myself doing this so often, there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; option in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/Makefile&quot;&gt;Makefile&lt;/a&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;make intdemo.txt&lt;/code&gt; which does almost exactly this.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; option
puts some other information into &lt;code class=&quot;highlighter-rouge&quot;&gt;intdemo.txt&lt;/code&gt; as well, so feel free to try
it out yourself and see what you think.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A second way to handle the &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; value would be to declare it as a
&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile unsigned&lt;/code&gt; value.  If we do that, the &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; value will be
forced into &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;local (stack) memory&lt;/a&gt;.
We can then use our &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt; to read it even
while the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; is running.&lt;/p&gt;

    &lt;p&gt;The problem is, which memory address will &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; get placed into?
Typically, as long as &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; is the first value declared in &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;,
it’ll always be at the same place on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt;,
but finding this place the first time might take some work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A third option would be to declare &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; as a global variable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;heartbeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// **s
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follows&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Were we to do this instead, &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; has an option where, if given a map file,
you can read this value by name.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;wbregs -m obj-zip/intdemo.map heartbeats&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But let’s get back to &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/intdemo.c&quot;&gt;our
program&lt;/a&gt;.
We just created memory to hold &lt;code class=&quot;highlighter-rouge&quot;&gt;NTASKS&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
sets (contexts).  Now let’s give them some initial values.  The most
important values to provide are the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer&lt;/a&gt; and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Define a void function pointer type
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voidfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//*
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// **s
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// returning back to our main() function ...
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Give each task a stack, and a program counter
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTASKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Allocate 256-bytes of local memory for each task
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_stack_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Set the &quot;Program Counter&quot; for each context, giving each
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// task a function to start processing on entry
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voidfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voidfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voidfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;three_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voidfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;five_hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we’ve done all that, we’ve almost finished our startup processing.  There
are only a couple steps left.&lt;/p&gt;

&lt;p&gt;The first is to choose to start the first task, and then to load the user
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;s
from that task pointer.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; toolchain provides a
&lt;code class=&quot;highlighter-rouge&quot;&gt;zip_restore_context()&lt;/code&gt; function to make things easier.  This function expands
into some code to copy the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
values from the address given, in this case a pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;current-&amp;gt;r[0]&lt;/code&gt;,
into the user
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
set, &lt;code class=&quot;highlighter-rouge&quot;&gt;uR0&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;uPC&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;zip_restore_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once done, we can then issue a “return-to-usermode” instruction, assembly
&lt;code class=&quot;highlighter-rouge&quot;&gt;RTU&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_rtu()&lt;/code&gt; from C, to switch from supervisor to user mode.&lt;/p&gt;

&lt;p&gt;Only, we can’t do that just yet.
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
programs only exit user mode on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s,
exceptions (i.e. faults), and traps (system calls).  Since our
program shouldn’t be creating any exceptions (if it works), and since
we’re not issuing any system calls, we’ll need another way to grab control
back from userspace: &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s therefore set our
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt; to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
us every millisecond.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_bustimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x80000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLKFREQHZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Enable interrupts, and our interrupt in particular
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buspic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80008000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUSPIC_BUSTIMER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSPIC_BUSTIMER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s now time to write out main logic loop.  We’ll start out by clearing
every other LED, and incrementing our &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats&lt;/code&gt; counter.  We can then
run the user task.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;               &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaa00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;heartbeats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Run the user task, via a &quot;return-to-userspace&quot; insn
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;zip_rtu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we issue the &lt;code class=&quot;highlighter-rouge&quot;&gt;RTU&lt;/code&gt; instruction, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
will switch to using the user-register set.  Since everything is captured by
this &lt;em&gt;context&lt;/em&gt;, switching to this user-register set will feel like switching
which program is running.&lt;/p&gt;

&lt;p&gt;Unlike many other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
which have a single register set, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
maintains the supervisor’s context while running in user mode.  That means
that the supervisor
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot;&gt;stack pointer&lt;/a&gt;,
and indeed all of the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor
registers&lt;/a&gt; are
maintained until the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
returns to supervisor mode from user mode.  What that means is that, on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
will continue running this supervisor function where it left off.&lt;/p&gt;

&lt;p&gt;The more traditional approach would be for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to suddenly jump to an &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service
routine&lt;/a&gt;&lt;/em&gt;.  The address
of such a &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;routine&lt;/a&gt; would be
kept in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_vector_table&quot;&gt;special memory
location&lt;/a&gt; that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; could
look up and start from when the context switch needed to take place.&lt;/p&gt;

&lt;p&gt;By just switching register sets, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is
kind of unique in this way.  I personally find it easier
to write multi-tasking programs as a result.&lt;/p&gt;

&lt;p&gt;On our return, the first thing we’ll do is set those LEDs we just cleared–every
other LED is now set to indicate we are in supervisor mode.  I’ve found this to
be a really useful way of debugging what goes wrong when things don’t work: if
these LEDs are on, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
is in supervisor mode, else it is in user mode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Turn on LED&#39;s 1, 3, 5, 7, ...
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaaaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll turn these off again before we leave supervisor mode.&lt;/p&gt;

&lt;p&gt;Our next step is to check the user-mode &lt;a href=&quot;https://en.wikipedia.org/wiki/Status_register&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CC&lt;/code&gt;
register&lt;/a&gt; to see if we left user
mode as a result of some form of exception.  If so, we’ll call a &lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt;
function–more on that later.  It’s important to enter the &lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt; function
as soon as possible once we detect an exception, so that we can debug anything
that went wrong with as little change to the system as possible.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_ucc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CC_EXCEPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At long last, it’s now finally time to check the &lt;a href=&quot;/zipcpu/2019/04/02/icontrol.html&quot;&gt;interrupt
controller&lt;/a&gt;
to see if an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
has taken place.  If so, we’ll increment the &lt;code class=&quot;highlighter-rouge&quot;&gt;milliseconds&lt;/code&gt; counter
that all of the tasks are using.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Read the current state from the interrupt controller
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buspic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Check if the timer has triggered an interrupt
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;picv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUSPIC_BUSTIMER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// Timer interrupt triggered
&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Increment our millisecond counter
&lt;/span&gt;                        &lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll then want to acknowledge this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,
so we don’t get interrupted again until the next millisecond
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;                	&lt;span class=&quot;c1&quot;&gt;// Reset the interrupt
&lt;/span&gt;                	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buspic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUSPIC_BUSTIMER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our last step is to &lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;swap tasks&lt;/a&gt;.
This is done in three parts.  The first part copies the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user mode registers&lt;/a&gt;
into the &lt;code class=&quot;highlighter-rouge&quot;&gt;task_context&lt;/code&gt; memory.  In this case, since we’ve kept a
pointer to our &lt;code class=&quot;highlighter-rouge&quot;&gt;current&lt;/code&gt; task context this is fairly straightforward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;                &lt;span class=&quot;c1&quot;&gt;// Swap tasks
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;zip_save_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second step is to decide which task to call next.  This is often called
“CPU scheduling” or “task scheduling”, and many articles have been written
on this topic.  We’ll just keep it simple here and move to the “next” task in
our list.  In hind sight, it might’ve been easier to maintain a current
&lt;code class=&quot;highlighter-rouge&quot;&gt;task_id&lt;/code&gt; index as well, but I’ll leave that to you to do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTASKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTASKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final step in a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;context switch&lt;/a&gt;
is to restore the registers from the new “current” task
back into the user register set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;                &lt;span class=&quot;n&quot;&gt;zip_restore_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;Task swapping&lt;/a&gt; like this is more
often an assembly function, and so these two builtin-function calls simply
implement what would be those assembly instructions.  They are easily
identifiable from the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
disassembly since these are the only instructions that will reference the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uR&lt;/code&gt; register set&lt;/a&gt;.  If
you are really interested in actually seeing their
definition, you can &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/752bcc9485609f1f094100719262a7c2d386d6b7/sw/gcc-zippatch.patch&quot;&gt;find it in the GCC ZipCPU
patchset&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/752bcc9485609f1f094100719262a7c2d386d6b7/sw/gcc-zippatch.patch#L10099-L10148&quot;&gt;Here it is for saving the
context&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/752bcc9485609f1f094100719262a7c2d386d6b7/sw/gcc-zippatch.patch#L10149-L10193&quot;&gt;here again for
restoring the context&lt;/a&gt;.
The function basically works by reading four registers from either
memory or the user register set, then writing them to the user register set
or memory.  Indeed, the function is little more than a memory copy.&lt;/p&gt;

&lt;p&gt;That leaves us with only one loose end to return to: the &lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The purpose of this function is just to tell us that something has gone
wrong, and we need to do some debugging. It also helps us start that
process by helping us identify which problem has taken place.  I mean,
we’re writing a blinky function therefore it should be obvious if there’s
a problem–the LEDs won’t blink like they should.  But how to start debugging
next?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We’ve chosen to set certain LEDs to indicate we are in supervisor mode
(interrupts disabled), and others to indicate we are in user mode (interrupts
enabled).&lt;/p&gt;

    &lt;p&gt;This supervisor mode indicator LEDs should blink so fast that they appear
to be lit dimly.  If they ever turn off, or start shining brightly,
then we can therefore identify which mode we were in when the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; stopped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt; function is to help us diagnose what happened
to a broken subtask.  In this case, if we just stop the LEDs from blinking,
we might not be able to tell the difference from a CPU freeze above.&lt;/p&gt;

    &lt;p&gt;Therefore we’ll blink all of our LEDs, either all on or all off together,
to indicate a user exception took place.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This particular implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt; uses a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/195b77dc144d6ed7d4280f506c35b2204f13908c/rtl/arrowzip/main.v#L888-L894&quot;&gt;system power-up
counter&lt;/a&gt;.
This counter increases on every system clock, starting at power up, until
the top bit is set.  Once the top bit is set, the power up counter keeps
that bit set and becomes a rolling 31-bit counter with the other bits.&lt;/p&gt;

&lt;p&gt;We can grab bit 28 of this counter as an indication that we need to change
the LEDs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pwrcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_spio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we could’ve used the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt; for this,
understand that we are in a &lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt; situation.  We want to leave the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; state as un-changed as possible
so that we can diagnose whatever fault took place.  In particular, we’ll want
to leave the user register set untouched.  We also don’t know if the
fault was associated with interrupt processing or task swapping or something
else.  For all of these reasons, this code is has been kept as simple as
possible.&lt;/p&gt;

&lt;p&gt;Another thing we could’ve done in this &lt;code class=&quot;highlighter-rouge&quot;&gt;panic()&lt;/code&gt; routine would’ve been to
issue a simulation &lt;code class=&quot;highlighter-rouge&quot;&gt;NHALT&lt;/code&gt; (hardware NOOP) instruction to halt any simulator
at the fault itself.  By turning tracing on and then running the simulator
like this, it’s fairly easy to figure out what went wrong.  (Easy, perhaps,
but still pretty intense–examining a trace is not trivial.)  Alternatively,
we could’ve triggered any CPU-focused &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;.
This is typically how I debug the CPU if a bug makes it to hardware and the
user register set doesn’t tell me enough to know the cause of any fault.&lt;/p&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;p&gt;Want to see how we did?  Check out the video below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. The LED&#39;s blink!  Multitasking at work&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;video width=&quot;480&quot; height=&quot;360&quot; controls=&quot;&quot;&gt;&lt;source src=&quot;/img/multithreaded-blinky/iled-video.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;/video&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this video you’ll see a MAX-1000 board with 8-LED’s.  Half of the
LEDs are toggling at rates of 1Hz, 2Hz, 3Hz, and 5Hz.  These are the far left
LED, and every other LED to the right.  The other four LEDs are shining dimly,
indicating that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
truly is handling
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;swapping tasks&lt;/a&gt;
as desired.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Since we’ve already covered both &lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;how to make an LED blink from
Verilog&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;as well as from C&lt;/a&gt;,
it only made sense that we’d discuss how to blink an LED in some
more advanced fashions–such as by using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
or from a multi-tasking program.&lt;/p&gt;

&lt;p&gt;While blinking an LED might seem like an exceptionally trivial task, let’s
consider what we’ve learned: We learned how easy it was to blink an LED
from Verilog.  Even synchronizing multiple blinking LEDs to within a clock
period was fairly easy.  Blinking an LED on a CPU has the advantage that
it doesn’t typically take (much) more logic resources–but only after you’ve
already paid for the CPU, it’s boot code, it’s bootloader, memory, the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;system bus&lt;/a&gt; and the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect/crossbar&lt;/a&gt;
used to hold everything together.&lt;/p&gt;

&lt;p&gt;Of course, this would be more valuable if we were doing something more than
just blinking an LED.  Still, we’ve demonstrated how to build an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;
driven task, as well as how to split the CPU’s time across
multiple independent task contexts,
by using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; to tell us
when to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Context_switch&quot;&gt;switch contexts&lt;/a&gt;.
Both of these capabilities are very powerful and can be used outside
of a simple LED context.&lt;/p&gt;

&lt;p&gt;Where the CPU starts to have an advantage over the FPGA fabric is where
you need something to perform complex sequencing operations–such as
performing a complicated startup script, or performing a complex script
periodically.  Depending on the complexity of the task, adding it to what
a CPU is already doing might be cheaper than performing it in the fabric
of the FPGA.  At the same time, adding a CPU to an FPGA just to blink an
LED is truly overkill.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For my thoughts are not your thoughts, neither are your ways my ways, saith the LORD.  For as the heavens are higher than the earth, so are my ways higher than your ways, and my thoughts than your thoughts.  (Is 55:8-9)&lt;/em&gt;</description>
        <pubDate>Sat, 23 Nov 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/11/23/multithreaded-blinky.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/11/23/multithreaded-blinky.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Formally Verifying a General Purpose Ultra-Micro Controller</title>
        <description>&lt;p&gt;At long last, I have formally verified a &lt;a href=&quot;https://opencores.org/project,wbddr3&quot;&gt;DDR3 SDRAM
controller&lt;/a&gt;.  Sadly,
I haven’t yet had the time to verify its operation on real hardware.
Worse, the I/O isn’t quite there yet so I don’t expect it will work … yet.&lt;/p&gt;

&lt;p&gt;For those who don’t know the story, I built a
&lt;a href=&quot;https://opencores.org/project,wbddr3&quot;&gt;DDR3 SDRAM controller&lt;/a&gt; years ago.
These were back in my stubborn days, before I was ever willing to use any
vendor modules.  I then built a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
controlled
&lt;a href=&quot;https://opencores.org/project,wbddr3&quot;&gt;DDR3 SDRAM controller&lt;/a&gt;,
and attempted to instantiate it on my &lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty
board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s just cut the story short: it wasn’t a successful project.&lt;/p&gt;

&lt;p&gt;There’s a world of difference between the logic used to drive the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3
SDRAM&lt;/a&gt; and the actual wires
and protocol required by the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3
SDRAM&lt;/a&gt;.  That world of difference
lies in the byte-strobe signals, but that’s a story for another day.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A XuLA2-LX25 Board from Xess&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/XuLA2.png&quot; alt=&quot;&quot; width=&quot;250&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Prior to this &lt;a href=&quot;https://opencores.org/project,wbddr3&quot;&gt;DDR3 SDRAM
controller&lt;/a&gt;, I had built an &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;
for my XuLA2 LX25 board.  It wasn’t all that had to do, and so I thought I would
try my hand at a &lt;a href=&quot;https://opencores.org/project/wbddr3&quot;&gt;DDR3 SDRAM controller&lt;/a&gt;.
Since this was a second generation &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;Dynamic RAM
(DRAM)&lt;/a&gt;
controller for me, I came into this
project knowing a thing or two regarding what had worked before and what
hadn’t.  (Or at least, so I thought.)  I also came into the project expecting
to run at a 200MHz system clock.  Then it was a 100MHz clock, then an 80MHz
clock, then … my motivation fell apart.  This was to be expected in so many
ways–especially since the project was never funded in the first place and it
cost me several months of work.&lt;/p&gt;

&lt;p&gt;Recently, however, I’ve had the opportunity to dig up the design again.
Actually, I’ve had the opportunity to dig into both the
&lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM design&lt;/a&gt;
&lt;em&gt;and&lt;/em&gt; the &lt;a href=&quot;https://opencores.org/project/wbddr3&quot;&gt;DDR3 SDRAM design&lt;/a&gt;.  I modified
the SDRAM controller to handle &lt;a href=&quot;http://www.issi.com/WW/pdf/42-45S16100H.pdf&quot;&gt;ISSI’s SDRAM
chip&lt;/a&gt;, as found on the &lt;a href=&quot;https://www.tindie.com/products/Folknology/blackice-mx/&quot;&gt;new
IceCore board from
myStorm&lt;/a&gt; as well as
started working to port my controller to the &lt;a href=&quot;https://www.micron.com/products/dram/ddr3-sdram/part-catalog/mt41k64m16tw-107&quot;&gt;DDR3 SDRAM
chip&lt;/a&gt;
found on Lattice’s &lt;a href=&quot;https://www.latticesemi.com/en/Products/DevelopmentBoardsAndKits/ECP5VersaDevelopmentKit&quot;&gt;ECP5 Versa Board&lt;/a&gt;.  That is, until my project
funding ran out again.&lt;/p&gt;

&lt;p&gt;One of the big things that has changed between my early work with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;DRAM&lt;/a&gt;
controllers and now is that &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;I’ve discovered formal
verification&lt;/a&gt;.  Neither
of my original cores were formally verified initially.  Indeed, one of my
early formal verification stories is of trying to verify the &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;(non-DDR) SDRAM
controller&lt;/a&gt;
and discovering a corner case where the controller might’ve accessed
the wrong piece of memory.&lt;/p&gt;

&lt;p&gt;That would’ve been &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;hard to
debug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today’s discussion, however, focuses on a piece of logic found within each
controller–something I’m going to call an ultra-micro controller.&lt;/p&gt;

&lt;h2 id=&quot;the-purpose-of-the-microcontroller&quot;&gt;The Purpose of the MicroController&lt;/h2&gt;

&lt;p&gt;There are actually two ultra-micro controller’s found within each of the updated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;DRAM&lt;/a&gt;
controller designs.  One of them is responsible for the &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L578-L607&quot;&gt;reset logic
sequencing&lt;/a&gt;, and the other
for the &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L622-L667&quot;&gt;refresh logic&lt;/a&gt;.
But I’m getting ahead of myself.  Let’s start with the
basic question, what is a “MicroController”?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Microcontroller&quot;&gt;Wikipedia currently defines a
MicroController&lt;/a&gt; as&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a small computer on a single integrated circuit on a single metal-oxide
semiconductor (MOS) integrated circuit chip. In modern terminology,
it is similar to, but less sophisticated than, a system on a chip (SoC);
an SoC may include a microcontroller as one of its components. A
microcontroller contains one or more CPUs (processor cores) along with
memory and programmable input/output peripherals. …
(Yes, Wikipedia’s definition even changed while I was writing this!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is way more sophisticated than what I am talking about today.  That’s
why I’m going to use the term “ultra-micro controller”
today, I’m not talking about anything that would rank as I high as a full-blown
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
or even anything with external memory.  Instead, I’m referring to something
a little more sophisticated than a &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state
machine&lt;/a&gt;, but not
nearly as sophisticated as a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;
I’m talking about today does nothing but follow a simple fixed script, setting
a single register along the way.  This script is the unique feature that
separates it from a more traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m going to use this in two contexts initially, and probably many others later.
These are the reset sequence and the refresh sequence of my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;DRAM&lt;/a&gt;
controllers.
Here’s the basic idea, as applied to the reset sequence: when you read through
the data sheet for a memory chip, you’ll discover that there’s a very specific
sequence of events that needs to take place from power up to the first memory
access.  This sequence includes timing relative signals given to the core.
For example, many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
chips require a PRECHARGE-ALL common (initializes all of the internal memory
banks to idle), followed by a REFRESH command and then finally a SETMODE
command to set the settings within the chip, telling the chip how the
controller will interact with it.  Only after all three of these commands have
been issued is the memory ready to use.&lt;/p&gt;

&lt;p&gt;There’s one other key detail, and that is that those three startup commands,
PRECHARGE, REFRESH, and SETMODE, all have particular timing relationships
between them.  For example, there may need to be an adjustable number of idle
cycles between the PRECHARGE command and the following REFRESH command
and so forth.&lt;/p&gt;

&lt;p&gt;That’s one of the two &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controllers&lt;/a&gt;
I needed for these two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;DRAM&lt;/a&gt;
controllers.&lt;/p&gt;

&lt;p&gt;The other one I’m using to handle the refresh logic.  If you aren’t familiar
with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;DRAM&lt;/a&gt;,
then you need to understand first that it’s built out of capacitors.  If the
capacitor is charged, that particular bit of memory is a one else its a zero.
Building memory out of capacitors makes it possible to build memories with
very low area and low power.  The problem with using capacitors to hold memory
is that the charge within any capacitor will decay over time.  It
leaks.  If each capacitor is not re-charged periodically, they will return
to zeros, losing any data you might have stored within them.  To keep this from
happening, the controller needs to follow an internal schedule of commands
within it–periodically pulling the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;DRAM&lt;/a&gt;
off line, idling all the RAM banks, issuing a REFRESH command, and
then putting them back on line.&lt;/p&gt;

&lt;p&gt;This is all well and good, but my problem was associated with the giant
process it took to calculate the memory commands.&lt;/p&gt;

&lt;p&gt;To see how bad it got, here’s a look at what my initial draft looked like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_reset_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// The reset state machine
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_condition_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SETMODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_condition_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRECHARGE_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_condition_three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REFRESH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;need_refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Wait since the last precharge
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Precharge all banks
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRECHARGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Wait for all banks to become idle
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Wait
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fourth_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Issue the refresh command
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REFRESH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Another large state machine
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// To handle read and write commands
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem with this giant always block was that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;state machine&lt;/a&gt;
it generated was so complex it struggled to pass timing at any decent clock
speed.  Placing three separate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;state machines&lt;/a&gt;
into this same logic block, one for reset, one for refresh, and one for reading
and writing the RAM was … just too much for the hardware to handle in the
time allotted to it.&lt;/p&gt;

&lt;p&gt;I needed to simplify my design.  I needed to pipeline some of this logic.
(Okay, &lt;a href=&quot;/zipcpu.com/zipcpu/2019/03/28/return-decoding.html&quot;&gt;switching to a
proper&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;FSM state variable&lt;/a&gt;
would’ve helped some as well.)&lt;/p&gt;

&lt;p&gt;Eventually, I decided that I should separate this &lt;em&gt;maintenance logic&lt;/em&gt;,
that’s the word I’m using for both reset and refresh logic, from the rest of
this giant logic block.  Along the way I noticed that all of the
maintenance logic was independent of any actual bus requests.  I could
run it a clock ahead of when it actually needed to be used.  In other words, I
could pre-calculate maintenance commands before they would be used and so
simplify things.  For example, I could have a reset logic block,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// The reset state machine
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_condition_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;reset_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SETMODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_condition_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;reset_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRECHARGE_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_condition_three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;reset_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REFRESH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;reset_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;together with a separate and independent block to calculate the refresh
command sequence,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_refresh_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Wait since the last precharge
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_refresh_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Precharge all banks
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRECHARGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third_refresh_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Wait for all banks to become idle
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Wait
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fourth_refresh_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Issue the refresh command
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REFRESH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I could then &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L669-L689&quot;&gt;combine these two logic sequences together&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;maintenance_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;maintenance_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why would I do all of this?  To simplify the giant always block, and to
&lt;a href=&quot;http://zipcpu.com/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;maintain a high clock
speed&lt;/a&gt;.  Now,
instead of having multiple separate logic checks within one giant always block,
I can instead &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L366-L387&quot;&gt;just check for the flag
&lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance_mode&lt;/code&gt;&lt;/a&gt;
which would indicate I wanted to issue either a command from the reset sequence
or the refresh sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maintenance_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Enter here during either reset or
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// refresh
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maintenance_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The large read/write state machine to read from memory
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This greatly simplified the logic, but I now needed special
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;state machines&lt;/a&gt;
for both reset and refresh sequences.&lt;/p&gt;

&lt;p&gt;To make this work, I just wanted a &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;simple
core&lt;/a&gt;
that would do nothing but walk through the various reset or refresh
commands in the simplest logic possible.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. A Three-Stage Pipeline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/genuctrl/pipeline.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hence the need for this ultra-micro controller.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;microncontroller
itself&lt;/a&gt;
worked off of a very basic 3-stage pipeline, as shown in Fig. 2.
First it would calculate an address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It would then read a command from that position in the command sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, it would act upon that command, setting internal registers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;in_refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in_refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stall_bus&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... and so on
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, … not quite.  Often the startup or refresh sequence would require delays
between particular states.  Let’s dig into that more in a moment.&lt;/p&gt;

&lt;p&gt;For now, notice two things.  First, this approach drastically simplified
my processing.  Second, getting this core to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
requires a little bit of a trick–I’ll share that in a moment.&lt;/p&gt;

&lt;p&gt;Indeed, if it weren’t for the neat trick required to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
I wouldn’t be writing this article.  The &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;core
itself&lt;/a&gt;
is embarrassingly simple.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-counter&quot;&gt;Adding a counter&lt;/h2&gt;

&lt;p&gt;The biggest problem with the logic above is simply that the various commands
also have delays and durations associated with them.  For example, on
&lt;a href=&quot;http://www.issi.com/WW/pdf/42-45S16100H.pdf&quot;&gt;ISSI’s SDRAM chip&lt;/a&gt;,
nine clocks need to separate any REFRESH command from any command following.
Our simple logic above would require 8-separate NOOP commands in our sequence
to capture that.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Instruction Codes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/genuctrl/genu-isa.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Alternatively, we could add a second type of instruction–a “wait” instruction,
with an integrated number of wait clocks. This would then become an &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;
with two op-codes: the first for setting output registers, and
the second for starting a wait counter.  You can see these two codes shown in
Fig. 3 on the right.&lt;/p&gt;

&lt;p&gt;This would change our logic above slightly.  For example, we’d only advance
the address pointer to the next instruction if the delay counter had already
finished counting down to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, we’d only fetch the next instruction if the delay counter were zero
as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ....
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’d also only update the registers controlled by this sequence if the
delay counter were zero, &lt;em&gt;and&lt;/em&gt; the next command didn’t request a delay.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;in_refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in_refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stall_bus&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... and so on
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all of that out of the way, the only new feature remaining is the counter
itself.  In this case, on any new delay instruction we set the counter to the
value given in the instruction, otherwise if the counter is greater than zero
we count down.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPCODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The counter really is that basic.  Indeed, perhaps you’ve noticed that many of
my formal verification quizzes started out with verifying the properties of
a similar counter.&lt;/p&gt;

&lt;p&gt;At least that’s the basic design.  We’ll come back to it in a moment and fill in
the details.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-induction&quot;&gt;The Problem with Induction&lt;/h2&gt;

&lt;p&gt;If you’ve been reading my blog for a while, you may remember how I’ve described
the &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;problem associated with induction
before&lt;/a&gt;.
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
is important enough that we can’t really skip it.  Without
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
you cannot formally verify anything beyond the reset sequence.  Without
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
you cannot prove that the properties in your design never fail.&lt;/p&gt;

&lt;p&gt;Well, okay, that’s a debatable presumption.  I should point out that there
are others who don’t use
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
as regularly as I do.  For example, Clifford Wolf, the author of the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;picorv32 RISC-V CPU&lt;/a&gt;,
&lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys&quot;&gt;Yosys&lt;/a&gt;,
&lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys&quot;&gt;SymbiYosys&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/SymbioticEDA/riscv-formal&quot;&gt;riscv-formal set
of formal properties for RISC-V CPU
verification&lt;/a&gt; tends not to use
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
as much.  Indeed, a strong argument can be made for not using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;: it’s
complex, hard to learn, it requires its own way of thinking, and for certain
problems a bounded model check can be equivalent.&lt;/p&gt;

&lt;p&gt;We can illustrate this with a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
Suppose we had a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
with a 9-stage pipeline.  Chances are we could fully verify it in 20 clock
cycles.  I’ll admit, I’m guess with these numbers, but there is a mathematical
way to determine this distance and I think I can argue that the minimum bounded
check needs to be longer than a full operation.  That said, I often find myself
verifying cores with minimum cycle lengths that last longer than 256 cycles,
such as these AXI
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximm2s.v&quot;&gt;MM2S&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;S2MM&lt;/a&gt; cores.
Simply put, 
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
is an important tool, but it does have its place.&lt;/p&gt;

&lt;p&gt;When you use
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;, you
will find the traces shows the &lt;em&gt;appearance&lt;/em&gt; of having started the design
somewhere between the initial state and eternity.  However, this view of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
often frustrates engineers who use it, because they’ll point out that &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;
must happen before &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt; gets set, but somehow &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt; is getting set without
ever passing &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;.  “But I initialized that value!” is a common refrain
that I hear.&lt;/p&gt;

&lt;p&gt;The problem is that this is not how
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
actually works.
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
works by piecing together some number of logic steps for your core that don’t
break any assertions, and then tries to break your assertions on the last step.
It only offers the appearance that the state chosen is in the middle of time.
In reality, the “initial” values in the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
trace are arbitrary–they could be anything, with the only requirements
that they don’t break any assumptions, and again that they don’t break any
assertions until the last step.&lt;/p&gt;

&lt;p&gt;As a result, because the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt; step
doesn’t start at the initial time step, constraining every register in the
design becomes important.  This includes the registers set by our &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To bring this point home, I had a couple of memory rules that weren’t passing
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
Things like, REFRESH commands that could only be issued once all the banks had
been placed in their idle modes, or that PRECHARGE commands could only take
place no earlier than some (configurable) number of clock cycles after ACTIVATE
commands, etc.&lt;/p&gt;

&lt;p&gt;The particular problem is common among pipelined processes: Unless the various
pipeline stages are so constrained, the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine might start in a state where the stages have no relationship to each
other.  The &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;
might load a command to be decoded, and then the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine starts with a command in that register that’s not in the command set.
Or it might start outputting a value that nothing in the command set would
allow.  Or it might do both.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
can seem kind of strange in that way.&lt;/p&gt;

&lt;p&gt;The way we’ll solve this
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
problem is by walking a &lt;em&gt;microcode address&lt;/em&gt; through the various pipeline stages
of processing.  We’ll use one value to describe the address pipeline stage,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt;, one for the command stage, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt;, and one to describe the currently
active outputs, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt;–the final pipeline stage.  These three are all
&lt;em&gt;addresses&lt;/em&gt; into our instruction stream.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll set all three of these pipeline-addresses to zero initially
and again upon any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In all other cases, we’ll increment the address whenever we step the &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;
forward by one step.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to convert these addresses to commands.  We can use a large
parameter to store these commands.  If we have &lt;code class=&quot;highlighter-rouge&quot;&gt;NCMDS&lt;/code&gt; commands, each &lt;code class=&quot;highlighter-rouge&quot;&gt;WORDWID&lt;/code&gt;
wide, this might look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NCMDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;COMMANDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// An arbitrary set of commands
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;6&#39;h02&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;6&#39;h02&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;6&#39;h2f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then use a simple Verilog &lt;em&gt;function&lt;/em&gt; to turn this command address into
its associated command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMMANDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While I don’t normally use functions, in this case the function is the key
to this whole algorithm.  Why?  Because I can now reuse the function throughout
to map addresses to commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// f_active_cmd is the command that&#39;s currently *active* and defining
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// outputs
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_active_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// f_cmd_cmd describes the command currently waiting to be interpreted
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_cmd_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// f_prior_cmd is the command I was just executing before the current
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// one
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_prior_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because there is a single common mapping from address to command, used by both
the logic of the core and the logic of the formal properties, I can assert that
these copies of the various commands actually match what each stage of the
algorithm should be doing.&lt;/p&gt;

&lt;p&gt;Only one other big step is required: we’ll need to constrain all of these
addresses with respect to each other.  You know, the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; address must
follow &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt; must follow &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this is only an overview.  The actual logic, below, corrects
several details.  For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;assert(f_cmd + 1 == f_addr);&lt;/code&gt; will fail if
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; is about to roll over to the next bit.  Similarly, my reset sequence
needs to be run only once starting from a reset command, whereas the refresh
sequence needs to repeat over and over forever.  The main core of the logic,
however, remains as simple as it always was.&lt;/p&gt;

&lt;p&gt;Shall we take a peek at how this is done?&lt;/p&gt;

&lt;h2 id=&quot;microcontroller-logic&quot;&gt;MicroController Logic&lt;/h2&gt;

&lt;p&gt;Let’s look over the basic logic of &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;this really simple ultra-micro
controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, since I only want to build this once, I’ve chosen to make it highly
configurable.  The core accepts a parameterized number of command bits and
again a parameterized number of delay bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;genuctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, the core accepts a power of two length command set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NCMDS&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every word in our command set needs to have at least &lt;code class=&quot;highlighter-rouge&quot;&gt;CMDWIDTH&lt;/code&gt; bits,
&lt;code class=&quot;highlighter-rouge&quot;&gt;LGDELAY&lt;/code&gt; bits, plus one more bit for the opcode if &lt;code class=&quot;highlighter-rouge&quot;&gt;LGDELAY&lt;/code&gt; indicates
we’ll use a delay counter in our opcode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now create a fairly arbitrary set of commands using this format.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NCMDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;COMMANDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// Commands read from the bottom (LSBs are first)
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// up to the top (MSBs are last)
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Last command
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;6&#39;h02&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;6&#39;h02&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;6&#39;h2f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// First command
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also insist that the first command of this sequence, that’s the one
on the bottom, start with an output-register opcode.&lt;/p&gt;

&lt;p&gt;Ideally, I’d like to formally verify this core against all possible command
sets.  However, using a parameter to set these commands really keeps me from
doing this.  Why then would I use a parameter to define the commands?&lt;/p&gt;

&lt;p&gt;For a couple of reasons.  First, unlike memories, (and even ROM memories!)
parameters cannot change their values during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
Second, I am depending upon the properties of the resulting sequence to then
pass verification once this core is incorporated into &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L366-L387&quot;&gt;another as a
submodule&lt;/a&gt;.
My goal is to avoid turning this module into a black box that spits out
unconstrained values.  The parent module will depend upon these outputs and
their sequencing for a successful formal proof.&lt;/p&gt;

&lt;p&gt;We’ll also pick, arbitrarily, that the first command will set an initial state.
All values throughout our processing chain will then get reset to this initial
state on any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;INITIAL_COMMAND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMMANDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll support two options: &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_REPEAT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DELAY&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_REPEAT&lt;/code&gt;,
if set, will indicate that we want to keep repeating these commands over and
over–such as the refresh cycle.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_REPEAT&lt;/code&gt; is clear, we’ll go through
this sequence once and stop on the last step–as the reset sequence will want
to do.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DELAY&lt;/code&gt; on the other hand is a simple short hand for checking
whether or not we have one or more bits allocated to the delay counter.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DELAY&lt;/code&gt; is clear, the counter will remain at zero and all commands will
proceed at the same pace.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_REPEAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPT_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that aside, we can move into the &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;design
itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our first task will be to create a global step signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_step&lt;/code&gt;.  If this
signal is ever true, all of our various states will step forward.  Our goal
will be to set &lt;code class=&quot;highlighter-rouge&quot;&gt;r_step&lt;/code&gt; so that it is only ever true if the counter is zero,
so that it can replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_count == 0&lt;/code&gt; logic check above and simplify
our logic.&lt;/p&gt;

&lt;p&gt;So here’s how this works.  We’ll start with the wait count kept in &lt;code class=&quot;highlighter-rouge&quot;&gt;r_count&lt;/code&gt;.
We’ll set this to zero initially so that the first command can always
contain the bits to output on any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELAY_COUNTER&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While the opcode might start with a delay, this turns out to be rather
problematic, since it leaves the output registers undefined both initially
and following any reset.  Disallowing this simplifies our initial and
reset logic therefore.&lt;/p&gt;

&lt;p&gt;The reset should always bring this counter back to this same original state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every time the counter reaches (or stays at) zero, we’ll advance to the next
instruction.  If that instruction, kept in &lt;code class=&quot;highlighter-rouge&quot;&gt;r_cmd&lt;/code&gt;, contains a delay
instruction then we’ll set the counter to that delay, otherwise we’ll keep it
at zero.  (Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_step&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;r_count == 0&lt;/code&gt;.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// This is a delay instruction
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// This is a command instruction
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_count != 0&lt;/code&gt;, we’ll decrement it until it does equal zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to stay off of the critical timing path, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;r_step&lt;/code&gt; so that
it’s equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;r_count == 0&lt;/code&gt;.  That means that it’s logic will (roughly)
mirror that of &lt;code class=&quot;highlighter-rouge&quot;&gt;r_count&lt;/code&gt; above, with only a few subtle differences.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// This is a delay instruction
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// This is a command instruction
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if (!r_step)
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While the logic above is fairly straightforward, getting it right and convincing
yourself that it’s right can be valuable.  For this, we’ll set up a single
formal property to make certain that &lt;code class=&quot;highlighter-rouge&quot;&gt;r_step&lt;/code&gt; is truly equivalent to
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_count ==  0&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also check the counter against the currently active instruction.
If the instruction is not a delay OpCode, then the counter must be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise it must be less than the delay specified in the current command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if the number of delay bits is zero, &lt;code class=&quot;highlighter-rouge&quot;&gt;LGDELAY==0&lt;/code&gt; and so &lt;code class=&quot;highlighter-rouge&quot;&gt;!OPT_DELAY&lt;/code&gt;,
then the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_step&lt;/code&gt; signal should always be high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves three primary steps left to this algorithm.&lt;/p&gt;

&lt;p&gt;The first is to calculate the next command address.  Because we have chosen
a super simple command set, there are no
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;jumps&lt;/a&gt;,
no &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline stalls&lt;/a&gt;, nothing
but the next address.  That means we can keep this logic as simple as
initializing the address to zero and then perpetually incrementing it every
time we step forward.&lt;/p&gt;

&lt;p&gt;That would work if we wanted to repeat this logic forever–such as with the
refresh sequence.  If we want to stop, though–such as at the end of the reset
sequence, then we’ll need recognize a last address and stop incrementing
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_addr&lt;/code&gt; once we get there.  In the logic below, this last address is captured
by &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;amp;r_addr)&lt;/code&gt;–the address with every bit set.  If we are not repeating,
we’ll stop at this address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_REPEAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second of the three remaining steps is to read the command from our
parameter set.  Other than the initialization and reset logic, this is
very straightforward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the last step is to act upon the command.  For this core, we’ll act
upon it by setting a number of bits in our output, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_cmd&lt;/code&gt;, based upon the
values captured by the command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or, at least that’s the thought.&lt;/p&gt;

&lt;p&gt;The problem is that we only want to set our output bits on a command opcode
and not on a wait opcode.  So we now need to check if either we aren’t
implementing the wait opcode, or if the next command isn’t a wait command,
before setting our output bits based upon the instruction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what should our initial and reset value be?  Ideally, we’d want to set
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_cmd&lt;/code&gt; initially to whatever was in the first instruction and then
update it on every step following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve already discussed the &lt;code class=&quot;highlighter-rouge&quot;&gt;getcommand&lt;/code&gt; function above, so we don’t
really need to discuss it more here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMMANDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  That’s the logic to our &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;:
1) calculate an instruction address, 2) read the instruction, and then
3) do what it tells you to.&lt;/p&gt;

&lt;p&gt;Hopefully this logic appears quite straightforward.  It’s supposed to be.
If not, feel free to &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;review the Verilog
design&lt;/a&gt;
yourself to see how it works.
It’s supposed to be a very simple and reusable logic structure.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;That’s the basic logic associated with this simple &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;,
now let’s take a look at the formal properties necessary to force the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine into a consistent state.&lt;/p&gt;

&lt;p&gt;There are two things to note before starting: First, this &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;
has only one input, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt;.  That’s it.  That means we don’t need to make
any assumptions about how the various inputs might relate to each other.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4. Formal Packets&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/genuctrl/fpipe.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Second, our basic approach will be to shadow the &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;’s
pipeline with a set of registers used only for formal verification–a packet
of information if you will.  This is very similar to the way
&lt;a href=&quot;https://github.com/cliffordwolf/riscv-formal&quot;&gt;riscv-formal&lt;/a&gt; works:
you form a packet of information describing each instruction as it goes through
the pipeline.  In this case, however, we’ll draw our assertions about that
packet as it works its way through the pipeline rather than just at the end
as &lt;a href=&quot;https://github.com/cliffordwolf/riscv-formal&quot;&gt;riscv-formal&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;I’m also going to use the abbreviations &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt; to
describe the three different pipeline stages, while &lt;code class=&quot;highlighter-rouge&quot;&gt;prior&lt;/code&gt; will be used to
describe any stage prior to &lt;code class=&quot;highlighter-rouge&quot;&gt;active&lt;/code&gt;.  Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active_cmd&lt;/code&gt; will refer to
the command currently being carried out, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd_cmd&lt;/code&gt; will refer to the
command we are going to interpret next, and so forth.  This will allow us to
assert, in a moment, that the output command bits are equal to either the low
order bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active_cmd&lt;/code&gt;, or the low order bits of the prior command,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_prior_cmd&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// reg	[LGNCMDS-1:0]	f_addr, f_cmd, f_active;
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_active_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_prior_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fn_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first step will be to get a copy of the commands that should be
executing in each of the various stages of processing–as outlined in Fig. 4
above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_active_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_cmd_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_prior_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As discussed above, we’ll shadow the next command address with &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, on each step, we’ll move push one command in and through the pipeline.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_REPEAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the hassles of dealing with addition wrapping in a finite number
of bits is that &lt;code class=&quot;highlighter-rouge&quot;&gt;value + 1&lt;/code&gt; uses one more bit than &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; rather than
wrapping.  To make certain that adding one to a value causes the sum to
remain within the right number of bits, we need to force it back to the
bit-width of our address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fn_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fn_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that I have that, I can work through how the addresses should exist
in relationship to each other.  Let’s start with the case where the &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;
goes through its instructions in a one-shot (non-repeating) manner.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_REPEAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We start out with everything at zero, so if &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt; is still at zero then
everything else must still be at zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; stage is still at address zero, then we are one step
further–having incremented &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt; but not yet propagated that incremented
value to &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s turn to look at the other end.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt; is all ones, then it’s
saturated at the last instruction as has everything before it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt; hasn’t yet saturated, but &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; has, then &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt; will
saturate on the next clock.  Of course, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; can’t get to the last value
unless &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt; has already done so, so &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr&lt;/code&gt; must be on the last address
as well.  Finally, notice how we can check &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active+1&lt;/code&gt; against &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; without
worrying about overflow, since &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; is already the maximum positive number
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt; one less.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If none of those special cases are true, then we must be somewhere in the
middle: &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr + 2 == f_cmd + 1 == f_active&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The case where we repeat is a touch more interesting.  In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt;
will remain equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd&lt;/code&gt; for the first two initial clock cycles.  In the
first cycle, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr == f_cmd == f_active == 0&lt;/code&gt;.   In the second cycle,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr == 1&lt;/code&gt;, while &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd == f_active == 0&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get past those two first cycles, we then know that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr == f_cmd+1&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_cmd == f_active + 1&lt;/code&gt; with the exception that we have to math that will
wrap around after the last instruction.  This was why we created &lt;code class=&quot;highlighter-rouge&quot;&gt;fn_cmd&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;fn_active&lt;/code&gt;, and then limited them to the bare width of any address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, what about our outputs?  Realistically, that’s what we want to guarantee,
that we have the right outputs.  Those are kept in &lt;code class=&quot;highlighter-rouge&quot;&gt;o_cmd&lt;/code&gt;, and consist of the
bottom several bits of any command word.&lt;/p&gt;

&lt;p&gt;Here’s where all of our address work pays off.  Because we’ve set
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_active_cmd&lt;/code&gt; to be equal to the instruction at &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active&lt;/code&gt;, we can assert that
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_cmd&lt;/code&gt; matches the bits in &lt;code class=&quot;highlighter-rouge&quot;&gt;f_active_cmd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, not quite.  What if the command in the last pipeline stage is a delay
command?  Okay, so as long as it’s not a delay command we can make this
assertion.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_active_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what if it is a delay command?  In that case, our outgoing command bits
must match those of the prior command.  As before, though, that’s only if
the prior command isn’t also a delay.  Since it’s not likely that we’ll ever
want to place two delays in a row, this should be good enough.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_prior_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_prior_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one other assertion we should make, and that is that the initial
command word is going to set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_cmd&lt;/code&gt; rather than be a delay instruction.
So let’s assert that this initial opcode is a set-bits op-code, that way
we’ll know that we always have a good set of output bits from the initial
state or the reset state forward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INITIAL_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORDWID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-reset-sequence&quot;&gt;The Reset Sequence&lt;/h2&gt;

&lt;p&gt;Before leaving this topic, let’s take a quick peek at how this &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/genuctrl.v&quot;&gt;ultra-micro
controller&lt;/a&gt;
gets used in an &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;.
In particular, within &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v&quot;&gt;this controller&lt;/a&gt; for the iCE CORE
board,
you have &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L578-L607&quot;&gt;this piece of logic&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;5&#39;b00000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Burst reads and writes
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;CAS_LATENCY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// CAS latency (3 clocks)
&lt;/span&gt;			&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Sequential (not interleaved)
&lt;/span&gt;			&lt;span class=&quot;mb&quot;&gt;3&#39;b001&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 32-bit burst length
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;genuctrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_REPEAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COMMANDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read these commands from the bottom up
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Need two cycles following SET_MODE before the first
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// command
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_SET_MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_REFRESH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_REFRESH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_PRECHARGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The command list starts here, with a no-op then precharge
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;MODE_COMMAND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup_hold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_addr10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The most difficult thing about reading this is that the commands start from
low addresses and work their way up to higher addresses.  The second challenging
part is to realize that a command followed by a delay of zero issues the
same command twice, and that a command followed by a delay of one issues
it three times–so the actual number is the delay value plus two.  Now, reading
from the bottom up, we have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first command is a NOOP, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_NOOP&lt;/code&gt;.  It last’s for one cycle.&lt;/li&gt;
  &lt;li&gt;The second command is a PRECHARGE command, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_PRECHARGE&lt;/code&gt;.  The final
bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt;, controls the eleventh address bit indicating that this
command precharges all of the banks of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;We then return to a NOOP command.&lt;/li&gt;
  &lt;li&gt;We maintain that NOOP command for a one cycle delay.&lt;/li&gt;
  &lt;li&gt;Then we issue a REFRESH command, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_REFRESH&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set the outputs to a NOOP, and&lt;/li&gt;
  &lt;li&gt;Wait &lt;code class=&quot;highlighter-rouge&quot;&gt;6+1&lt;/code&gt; cycles.  (Total 8-cycles of NOOP)&lt;/li&gt;
  &lt;li&gt;Issue a second REFRESH command, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_REFRESH&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Another NOOP&lt;/li&gt;
  &lt;li&gt;Wait for &lt;code class=&quot;highlighter-rouge&quot;&gt;6+1&lt;/code&gt; cycles again&lt;/li&gt;
  &lt;li&gt;Issue a SETMODE command, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_SET_MODE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Another NOOP&lt;/li&gt;
  &lt;li&gt;Finally, that bit just more significant than the 4-bit &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM
command&lt;/a&gt;
gets released This is the flag indicating to the rest of the logic that
the reset sequence is complete.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information on the meaning of these various commands, you should check
out the data sheet for the
&lt;a href=&quot;http://www.issi.com/WW/pdf/42-45S16100H.pdf&quot;&gt;ISSI SDRAM&lt;/a&gt;.
In general, this sequence just follows directly from the one listed in the
data sheet.&lt;/p&gt;

&lt;p&gt;Notice also that all I’ve done is to script the startup script described in the
&lt;a href=&quot;http://www.issi.com/WW/pdf/42-45S16100H.pdf&quot;&gt;SDRAM Spec&lt;/a&gt; directly into the
design.  Framing the problem in terms of this ultra-micro controller made
it fairly easy to do.&lt;/p&gt;

&lt;p&gt;That said, perhaps you noticed two confusing things.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The instructions read backwards.  I may wish to change this in the future,
but for now that’s how the controller works.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to issue 7-cycles of NOOPs, you have to issue two commands.
The first command switches the outgoing &lt;code class=&quot;highlighter-rouge&quot;&gt;reset_command&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_NOOP&lt;/code&gt;,
and the second command waits.  As built, this is not one command
Worse, a wait cycle of ‘0’ will cause the controller to issue two NOOP’s,
not zero and not one: one for the command, and another for the delay
instruction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-refresh-sequence&quot;&gt;The Refresh Sequence&lt;/h2&gt;

&lt;p&gt;The other sequence I used this ultra-micro controller for is the refresh
sequence.  In many ways, the refresh sequence is very similar to the reset
sequence.  The biggest difference is that the refresh sequence repeats.&lt;/p&gt;

&lt;p&gt;Before diving into this sequence, let me just say that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
refresh control can be much more complicated than what I’m presenting here.  A
“smart”
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
controller might issue more refreshes any time the chip is idle.  That way the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
doesn’t necessarily need to be interrupted when busy–or at least not nearly
as often.&lt;/p&gt;

&lt;p&gt;I’m not going to over think this today.  In this case, we’ll use our
&lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L622-L667&quot;&gt;ultra-micro controller to drive the refresh logic&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;genuctrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMDWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGNCMDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_REPEAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COMMANDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read these commands from the bottom up
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CK_REFRESH_NOOP_TO_ACTIVATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_REFRESH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CK_PRECHARGE_TO_REFRESH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_PRECHARGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CK_WAIT_FOR_IDLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CK_REMAINING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REF_ZEROS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMD_NOOP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh_controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh_active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/zipstormmx/blob/e4cb3e6f3bc3ac5831925b28116cb19b4ed09e8d/rtl/wbsdram.v#L622-L667&quot;&gt;implementation&lt;/a&gt;
is a little different: the refresh command is placed at the low order bits.
The next two most significant bits are a refresh stall, and a refresh active
bit.  In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh_stall&lt;/code&gt; is an instruction to the bus controller
to stall any bus requests that might be coming into the controller.  That allows
us to flush any active requests through the processing pipeline until the
refresh commands become active and start to override the memory control.&lt;/p&gt;

&lt;p&gt;Let’s just scan through this command set briefly, skipping commands in our
broad-brush through it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We start in reset.  As long as the reset sequence is active, we hold the
controller in reset.&lt;/li&gt;
  &lt;li&gt;Once we come out of reset, we’ll issue a NOOP.  Remember, this is also our
initial values that we set our results to during the reset cycle as well.
More importantly, we let the design run normally following the reset
without overriding any normal operation.
We’ll do this for &lt;code class=&quot;highlighter-rouge&quot;&gt;CK_REMAINING +2&lt;/code&gt; clock cycles.  (The formula for this
duration is beyond the scope of this article, but easily verifiable from
within the core.)&lt;/li&gt;
  &lt;li&gt;When it’s finally time to start our refresh cycle, we’ll force the Wishbone
interface to stall.  We then wait &lt;code class=&quot;highlighter-rouge&quot;&gt;CK_WAIT_FOR_IDLE+2&lt;/code&gt; cycles for any
commands in process to flush through our interface and the bus to come to
a halt.&lt;/li&gt;
  &lt;li&gt;Then we issue a PRECHARGE (all) command to close any active memory banks.
This takes &lt;code class=&quot;highlighter-rouge&quot;&gt;CK_PRECHARGE_TO_REFRESH+2&lt;/code&gt; clock cycles to complete, so we issue
a &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_NOOP&lt;/code&gt; during these cycles.&lt;/li&gt;
  &lt;li&gt;We can finally issue the REFRESH command.  However, we can’t immediately
go back to using the interface.  Instead, we need to wait
&lt;code class=&quot;highlighter-rouge&quot;&gt;CK_REFRESH_NOOP_TO_ACTIVATE+2&lt;/code&gt; cycles before the memory is (almost) ready
to accept a command.&lt;/li&gt;
  &lt;li&gt;The next command clears any maintenance-induced bus stalls, and it also
clears our refresh cycle allowing the rest of the memory control to return
to bus control.&lt;/li&gt;
  &lt;li&gt;Sadly, though, we need to go through all of the listed commands–even though
we stopped early.  Therefore, we issue idle NOOP’s until we reach the end
of our list before starting over.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As with the reset sequence, most of this follows from the
&lt;a href=&quot;http://www.issi.com/WW/pdf/42-45S16100H.pdf&quot;&gt;ISSI SDRAM specification&lt;/a&gt;.
It’s timing driven, and specifically driven to issue one reset at a time
every &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; cycles as determined from the
&lt;a href=&quot;http://www.issi.com/WW/pdf/42-45S16100H.pdf&quot;&gt;specification&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While I’m not going to argue that this “ultra-micro controller” forms a general
purpose computer, it does have many of the attributes of a more general
purpose computer: It follows a pre-defined “program” or script of instructions.
Each instruction has an “OpCode”.  In this case, the “OpCode” was either to
output a series of bits or to wait for a given count.  Unlike more general
purpose computers, this “ultra-micro controller” has no ability to add,
subtract, test values, or branch.  Still, it was good enough for today’s
purposes to be reused in two different DRAM controllers in two different
ways.&lt;/p&gt;

&lt;p&gt;Not only that, this simple example makes a great illustration of how you can
create a packet of information as instructions work their way through a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s pipeline,
and assert consistency with that pipeline along the way.  This is a very
useful pattern that you will likely see time and again when formally
verifying pipelines.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt; And she said to the king, It was a true report that I heard in mine own land of thy acts and of thy wisdom.  Howbeit I believed not the words, until I came, and mine eyes had seen it: and, behold, the half was not told me: thy wisdom and prosperity exceedeth the fame which I heard. (1King 10:6-7)&lt;/em&gt;</description>
        <pubDate>Mon, 18 Nov 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2019/11/18/genuctrlr.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/11/18/genuctrlr.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Quiz #7: Returning to $past() and our counter again</title>
        <description>&lt;p&gt;Let’s return to our counter example.  (No pun intended initially, but now
I can’t seem to avoid it.)&lt;/p&gt;

&lt;p&gt;In this case, we want to build a counter that will count down from 21, but
only upon request (&lt;code class=&quot;highlighter-rouge&quot;&gt;i_start_signal&lt;/code&gt;).  Once this counter gets to zero, the
counter stops counting down and waits for the next request.  Such counters
can be used in a whole variety of circumstances, my favorite being the
&lt;code class=&quot;highlighter-rouge&quot;&gt;clk_ctr&lt;/code&gt; in my updated
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;QSPI flash controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are an ASIC engineer and don’t like initial values, then feel free
to add reset logic to this example.&lt;/p&gt;

&lt;p&gt;What do you think, will the assertion above pass?&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Nov 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2019/11/16/quiz07.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/11/16/quiz07.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
  </channel>
</rss>
