<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Feb 2020 10:17:41 -0500</pubDate>
    <lastBuildDate>Thu, 06 Feb 2020 10:17:41 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Quiz #11: Induction and clock enables</title>
        <description>&lt;!-- answer: &quot;2020/02/23/fv-answer12.html&quot; --&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
can be very confusing to an HDL designer trying to use the formal verification
tools for the first time.  A common refrain that I’ve heard among those
I’ve mentored is, “but I set this value on reset!  How can it ever get into
this state?”&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
exercise in my &lt;a href=&quot;/tutorial/formal.html&quot;&gt;formal verification training
course&lt;/a&gt;
is also a place where I slow down, and take some time with the students to
learn and watch what happens.  We take examples, like the one above, and then
try several formal verification techniques to see what works and what doesn’t.
In many ways, it’s like trying out the various tools in your tool box.  That
way, when you need to use one, you’ll know which one is most suited for the
task at hand.&lt;/p&gt;

&lt;p&gt;In practice, the problem is never this simple.  It’s usually found buried
within a much more complex design, and it takes some work to recognize it.
The good news is that the solutions to the simple problems, such as the one
above, can often be applied to these more complex examples as well–so knowing
the tools in your toolbox is quite valuable.&lt;/p&gt;

&lt;p&gt;In this case, there are several ways around this bug.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2020/01/23/quiz11.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2020/01/23/quiz11.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Quiz #10: Checking stall conditions</title>
        <description>&lt;p&gt;This is actually a very common problem, although written in a simplified form
above.  You’ll find this property common across most formal bus interface
property files:
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt;,
AXI, &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;, AXI stream,
AHB, APB, and more.  Indeed, knowing how to get this right is important to
formally verifying any kind of hand-shaking interaction.&lt;/p&gt;

&lt;p&gt;Failing this property would be an indication that a transaction may have been
dropped.&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2020/01/17/quiz10.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2020/01/17/quiz10.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Lessons in Hardware Reuse</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Can hardware designs be recycled?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/recycle.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I first started doing digital design, I had a strong software background.
One of the first lessons you learn in software is to reuse your own code as
much as possible.  The sooner you learn this lesson, the faster you’ll be able
to finish your next homework problem.&lt;/p&gt;

&lt;p&gt;The lesson goes well beyond school, but into industry as well.  Consider the
various operating systems and how often they are reused.  Are you reading this
article from a device running Linux, MacOS, Windows, or something else?  Just
being able to list the number of major operating systems on one hand is a
testament itself to software reuse.&lt;/p&gt;

&lt;p&gt;The same lesson applies to compilers and system libraries.  How is it, for
example, that
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;,
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;,
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
or any other EDA tool can run on so many platforms?  Software reuse.
It’s real.  It works.&lt;/p&gt;

&lt;p&gt;But what about hardware?  Specifically, what about reusing digital design
components?&lt;/p&gt;

&lt;p&gt;Here, in this field, reuse becomes a bit more of a challenge.&lt;/p&gt;

&lt;p&gt;The first and biggest challenge are the hardware licenses.  The licenses that
worked so well for software don’t apply as well to hardware.  While I personally
love the &lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;GPLv3 license&lt;/a&gt;, conveying a
hardware design that uses a &lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;GPLv3&lt;/a&gt;
component to someone else requires also conveying to them the ability to
rebuild the rest of the &lt;em&gt;entire design&lt;/em&gt;.
This isn’t so easy, since many of the popular major design components, ARM
cores, SERDES cores, I/O components, and so forth, are still very proprietary.&lt;/p&gt;

&lt;p&gt;Within a company, however, design reuse shouldn’t be a problem.  The company
owns all of their own designs, so they should be able to use them freely from
one product to another, right?&lt;/p&gt;

&lt;p&gt;This is the case here, within &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology,
LLC&lt;/a&gt;, and yet even in
this optimal reuse environment hardware design reuse is still a long way from
achieving the goals that have been achieved by software reuse.&lt;/p&gt;

&lt;p&gt;Let’s take some time today to look at several experiences I’ve had with
design reuse since I started with digital design over a decade ago.
(Wow, has it actually been that long?)  We’ll start by looking over
standardization problems I’ve had across tools, and then work our way
from the bottom of a design all the way up through some components,
through bus slaves, and on to bus master interoperability.&lt;/p&gt;

&lt;h2 id=&quot;tools-arent-standard&quot;&gt;Tools aren’t standard&lt;/h2&gt;

&lt;p&gt;The first problem with design reuse is that the various tools tend to be
vendor and often even platform centric.  This makes it a challenge to reuse
designs from one platform to the next.  For example, design constraint files
(XDC, UCF, SDC, PCF, etc.) differ in format and content from one vendor to
the next.  This means that I/O timing constraints and false path constraints
all need to be rewritten when attempting to reuse a design across different
vendors.&lt;/p&gt;

&lt;p&gt;Well, at least the HDL languages are standard among vendors and tools, right?
How about just the subset of Verilog that I like to use?&lt;/p&gt;

&lt;p&gt;Well, no.  Not even Verilog is standard across vendor tools.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;One of the first things I teach anyone who will listen is to place a
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype none&lt;/code&gt; declaration at the top of every Verilog source file.
Doing this prevents the synthesis tool from turning a spelling mistake into
a new signal within your design.  It has helped me catch a lot of mistakes
over the years.&lt;/p&gt;

    &lt;p&gt;The problem is that placing this line in a
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
&lt;a href=&quot;/blog/2018/02/09/forst-cyclonev.html&quot;&gt;DE-10 Nano design&lt;/a&gt;
will cause
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
to fail to build the design.  Why?  Because the
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; setting isn’t applied across a single file, but rather
every design file following, if not the entire design.  Worse, it seems
as though the Altera’s engineers used this language “feature” to avoid
declaring signals within their designs.  Hence, what makes my design better
breaks their design components.&lt;/p&gt;

    &lt;p&gt;The problem isn’t limited to
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;.
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt; handles the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt;
statement on a file by file basis.  This means that if I change
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; back to its original &lt;code class=&quot;highlighter-rouge&quot;&gt;wire&lt;/code&gt; setting at the end of the
file, the design will now work with
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
but &lt;a href=&quot;https://github.com/YosysHQ/yosys/issues/684&quot;&gt;it will no longer get the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; benefit
from&lt;/a&gt;
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;There is one annoying detail associated with this command: &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; ports
need to be declared as &lt;code class=&quot;highlighter-rouge&quot;&gt;input wire&lt;/code&gt; rather than just &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; once you set
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt;.  The Verilog standard requires this, yet
neither &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt; nor
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
require it.  This means that designs that pass a
&lt;code class=&quot;highlighter-rouge&quot;&gt;verilator -Wall -cc topmodule.v&lt;/code&gt; check
might still fail to be built under another tool.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HDL designs don’t build without warnings&lt;/p&gt;

    &lt;p&gt;If there’s one thing that frustrates me, it’s the inconsistency of
warnings across tools.  Coming from the software world, I’m used to a
program that can be compiled without warnings.  Here in the hardware
world, this is a challenge.&lt;/p&gt;

    &lt;p&gt;Consider, for example, the following code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will generate a warning that a 32-bit number, the &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, is being added
   to a 5 bit number, and so there might be a loss of precision.  While I
   might rewrite this to get rid of the warning,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;5&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the warning will then return again whenever I change the width, &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;,
   to something other than five.&lt;/p&gt;

&lt;p&gt;If I then try to change the design to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then get rid of the warning when using &lt;a href=&quot;https://www.verific.com/products/&quot;&gt;Verific based front
   ends&lt;/a&gt;, only for it to return with
   &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My solution has been to build my designs so that they have no warnings when
   using &lt;code class=&quot;highlighter-rouge&quot;&gt;verilator -Wall&lt;/code&gt;, and then to ignore any of the warnings generated
   by the &lt;a href=&quot;https://www.verific.com/products/&quot;&gt;Verific&lt;/a&gt;, parser used by both
   &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;, ISE and
   &lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, its annoying to have a design build without warnings in one
   environment, but not in another.&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Unused values&lt;/p&gt;

    &lt;p&gt;Many interfaces have signals that aren’t used by all cores.  In order
to make the cores generic, I pass those signals that aren’t used along with
the interface anyway.
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
generates a warning when I do this.
&lt;a href=&quot;https://www.verific.com/products/&quot;&gt;Verific&lt;/a&gt;
(i.e. the front-end language parser used by
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;, ISE, and
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;)
also generates a warning.  However, I can turn the
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
warnings off on a case by case basis by simply using,&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Verilator lint_off UNUSED
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unused_signal_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unused_signal_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verilator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lint_on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNUSED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this doesn’t get rid of the warnings when using the commercial
   vendor tools, at least those warnings are now about the wire named
   &lt;code class=&quot;highlighter-rouge&quot;&gt;unused&lt;/code&gt; being unused, and so they’re now easy to work through.&lt;/p&gt;

&lt;p&gt;Of course, the problem with ignoring synthesis warnings like this is what
   happens when a design mysteriously stops working.  In that case, I find
   myself digging through all of the useless warnings generated in the logs
   of the various tools and looking for any evidence of what might’ve happened.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Generate loop block names&lt;/p&gt;

    &lt;p&gt;Much to my surprise, a design that worked in
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;, and ISE
failed to synthesize under
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/download.html&quot;&gt;Quartus&lt;/a&gt;
for the simple reason that the for loops within my &lt;code class=&quot;highlighter-rouge&quot;&gt;generate&lt;/code&gt; blocks
weren’t named.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;genvar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NADC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCK_NAME_NEEDED_HERE&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adc_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_adc_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADCBITS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADCBITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My point here is simply that seemingly useless differences between vendor
tools can become quite annoying in practice and a hindrance to design reuse.
All of a sudden, you find that a design component that worked under one
vendor’s tools mysteriously causes build failures under another vendor’s
tools.&lt;/p&gt;

&lt;p&gt;This problem was solved in software by an open source compiler,
&lt;a href=&quot;https://gcc.gnu.org&quot;&gt;gcc&lt;/a&gt;.  Verilog has an open source synthesizer,
&lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;
which can come close.  It can synthesize designs for
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;s,
iCE40, ECP5, Xilinx 7-series, and &lt;a href=&quot;/zipcpu/2019/03/12/arrowzip.html&quot;&gt;some Intel
designs&lt;/a&gt;.  In many ways
this is halfway to nirvana.  Unfortunately, there’s no open source synthesis
tool for VHDL, nor is there any open source tool for SystemVerilog–although
there is a &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;
plugin, called &lt;a href=&quot;https://github.com/tgingold/ghdlsynth-beta&quot;&gt;ghdl-synth&lt;/a&gt;,
that &lt;a href=&quot;http://pepijndevos.nl/2019/08/15/open-source-formal-verification-in-vhdl.html&quot;&gt;I’m told is getting close to offering VHDL
support&lt;/a&gt;
in &lt;a href=&quot;https://github.com/YosysHQ/yosys&quot;&gt;Yosys&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-not-reuse-fifos&quot;&gt;Why not reuse FIFOs?&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Surely common components can be reused?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/fifo-reuse.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once you get past the tool issues, the next biggest question is why can’t I
reuse some of my most common components?  The most obvious of these common
components is a FIFO.  FIFOs are perhaps the most common core used across
designs.  I use FIFOs in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;bus bridges&lt;/a&gt;,
my ADC cores, &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;a microphone core&lt;/a&gt; I’ve built,
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my UART cores&lt;/a&gt;, and even in my
&lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging bus&lt;/a&gt;.
Surely one simple FIFO design can be used across all architectures?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Common FIFO ports&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/fifo-ports.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The good news, at least for me, is that after writing &lt;em&gt;many&lt;/em&gt; (dissimilar) FIFO
implementations, I’m now starting to coalesce around a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;single synchronous FIFO
implementation&lt;/a&gt;.
Even with this implementation, there are a lot of per-design configuration
differences that need to be made.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The data width changes from one application to the next, as does the
necessary FIFO depth (RAM size).&lt;/p&gt;

    &lt;p&gt;Thankfully, these changes are easily parameterized–making the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;FIFO&lt;/a&gt;
(mostly) generic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Should the empty/full flags be registered?  Do they need to be?  It costs
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;extra LUTs&lt;/a&gt;
to calculate these values one clock earlier, but doing so can
also keep any FIFO users off the critical timing path.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
have distributed RAM, others don’t–something I discuss in my &lt;a href=&quot;/tutorial&quot;&gt;tutorial
lesson on FIFOs&lt;/a&gt;.  On an iCE40, &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;all RAM reads
must be done directly into a
register&lt;/a&gt; before
they can be read, whereas Xilinx architectures support “distributed RAM”
reads on the same clock cycle they are used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Handshake signaling differs from one implementation to another.  My current
FIFO implementation uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;READY/VALID&lt;/code&gt; type of handshake for reading
(&lt;code class=&quot;highlighter-rouge&quot;&gt;i_rd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_empty&lt;/code&gt;) from and writing (&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_full&lt;/code&gt;) to the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;FIFO&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The problem is that this interface isn’t necessarily appropriate for all
applications.  In some data centric applications, such as coming from an
A/D or a video source where the data comes in at a fixed speed, the
source will write to the FIFO regardless of whether or not the FIFO is ready.
Doing this properly really requires generating an error signal, which my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;one-size-fits-most
FIFO&lt;/a&gt;
implementation doesn’t (yet) have.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some applications, such as a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART&lt;/a&gt;,
require being able to know how much data is in the FIFO.  They want to read
the FIFO’s fill level back out.  This can be useful for waking up a
processor only when the FIFO is half full or half empty, for example, or
reading until it is empty following an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;.  Other
applications don’t care about the fill.  Leaving a port unused and dangling,
however, is likely to cause a tool warning and get in the way of building a
warning-less design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other applications, such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;stream to memory
bridges&lt;/a&gt;,
might want a trigger threshold implemented within the FIFO.  Such a
trigger, in the case of a stream to memory component, might cause the
FIFO to empty into memory like flushing toilet empties the tank into the
bowl.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/sfifo.v&quot;&gt;one FIFO&lt;/a&gt;
work in all applications?  I haven’t managed to do it (yet).
In addition to reuse, there is something to be said for keeping things simple.
Of course, the problem then comes about when I &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;fix a bug in one FIFO that
then still remains&lt;/a&gt;
in one of my other implementations.&lt;/p&gt;

&lt;p&gt;Xilinx’s solution appears to be to use a &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/fifo_generator/v13_1/pg057-fifo-generator.pdf&quot;&gt;FIFO
generator&lt;/a&gt;
that will then generate the logic for a FIFO that can be used across many
Xilinx hardware platforms.  At the same time, this (proprietary) &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/fifo_generator/v13_1/pg057-fifo-generator.pdf&quot;&gt;FIFO
generator&lt;/a&gt;
has given me no end of hassles when trying to
formally verify
what little they have published about their
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;.
Tell me, for example, why does a FIFO require nearly 100 parameters and just
as many ports?  Hence, while configurability in the name of reuse is a good
thing, &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/fifo_generator/v13_1/pg057-fifo-generator.pdf&quot;&gt;this
generator&lt;/a&gt;
appears to be taking configuration to an extreme.&lt;/p&gt;

&lt;h2 id=&quot;can-we-reuse-serial-ports&quot;&gt;Can we reuse serial ports?&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4. A common serial port interface&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/wbuart-reuse.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So let’s move up the ladder, from FIFOs to full level design components.
How about serial ports?  What can we learn about hardware reuse from serial
ports?&lt;/p&gt;

&lt;p&gt;A fellow open source designer, &lt;a href=&quot;https://twitter.com/OlofKindgren&quot;&gt;Olof
Kindgren&lt;/a&gt;, is known for his strong opinion
that we should stop building new serial ports.  Surely among all design
components serial ports should be prime candidates for reuse!  The
communications standard hasn’t changed in years, so why ever build a new
serial port?&lt;/p&gt;

&lt;p&gt;To put it in his own words,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I use the UART as a pathological example because it’s a function so
simple that many people feel it’s easier to write a new rather than reuse
an existing one.  But in practice this leads to another implementation with
bugs but without proper docs, tests, and drivers.&lt;/p&gt;

  &lt;p&gt;(&lt;a href=&quot;https://twitter.com/OlofKindgren/status/1216145721268809728&quot;&gt;Twitter&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a lot of things you can learn from serial ports.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Building a serial port is a good beginner’s design exercise.&lt;/p&gt;

    &lt;p&gt;If you’ve never built a serial port before, go ahead and build one.  It’s a
fun design to learn from, especially since you can typically “see” your
design working when you are done.  Indeed, serial ports are one of the
many designs I work through in my &lt;a href=&quot;/tutorial&quot;&gt;beginners
tutorial&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550 interface&lt;/a&gt;
has long since outlived its time.&lt;/p&gt;

    &lt;p&gt;The classic serial port interface goes back to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550 chip&lt;/a&gt;
built by &lt;a href=&quot;https://en.wikipedia.org/wiki/National_Semiconductor&quot;&gt;National
Semiconductor&lt;/a&gt;.  It
seems that much of the industry has standardized around its software
interface.  Its not hard to find software drivers that can communicate
with this interface, so why not just reuse it?&lt;/p&gt;

    &lt;p&gt;Sadly, this chip appears to have been built back in the days of 8-bit buses.
In order to set the baud rate of this chip, you need to set two different
registers, and you’ll need to adjust a paging register in the meantime
just to get access to those other registers.&lt;/p&gt;

    &lt;p&gt;Worse, the &lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550&lt;/a&gt;
only supports a 16-element FIFO.  Why not increase the
size of the FIFO?  That should be easy, right?  Well, yes, it is fairly
easy to do—it’s just that you now need to adjust all of the software that
depends the size of this FIFO.&lt;/p&gt;

    &lt;p&gt;From my own perspective, I only came across the
&lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550&lt;/a&gt;
after building &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my own serial port core&lt;/a&gt;.
Using &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my own serial port&lt;/a&gt;, I can
completely configure baud rate, number of stop bits, number of bits per
byte, the parity bit, and even whether or not flow control will be used
by just writing one 32-bit value to a 32-bit bus-based interface.&lt;/p&gt;

    &lt;p&gt;Pretty cool, huh?&lt;/p&gt;

    &lt;p&gt;Sure, you could reuse the older core, but it’d be easier to configure,
reconfigure, and use with a more modern interface.  (Such as my own …)&lt;/p&gt;

    &lt;p&gt;Of course, it doesn’t help that the &lt;a href=&quot;https://github.com/freecores/uart16550&quot;&gt;open source
UART16550 core&lt;/a&gt; has a
(formal-verification discovered) bug within it that might cause it to
send arbitrary data across the channel ….&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. How much does a serial port require?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/wbuart-extras.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;My first UART&lt;/a&gt; cores
(&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;TX&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuart.v&quot;&gt;RX&lt;/a&gt;)&lt;/p&gt;

    &lt;p&gt;As I said above, everybody digital designer should take the opportunity to
build their own serial port.  It’s a fun project.  It’s also one of the
first projects I ever did.&lt;/p&gt;

    &lt;p&gt;As with many projects, I started with all the material I could find on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter&quot;&gt;online about serial
ports&lt;/a&gt;.
I discovered all the things a serial port could or should support:
5, 6, 7, or 8-bit bytes, 1 or 2 stop bits, odd,
even, mark, space, or no-&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;,
and baud rates from 300 Baud all the way up to 25MBaud or higher.&lt;/p&gt;

    &lt;p&gt;Did I implement all that?  Yep.  You guessed it.  My first serial port
was such an awesome design, it could do &lt;em&gt;anything&lt;/em&gt;!  It even supported
sending or detecting BREAK conditions.&lt;/p&gt;

    &lt;p&gt;It just &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;wouldn’t fit in a Spartan 6/LX4 next to my
CPU&lt;/a&gt;.  Neither
did I ever use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;,
the BREAK conditions, the 5 or 6 bit bytes, changing the baud rate, etc.&lt;/p&gt;

    &lt;p&gt;This awesome design wasn’t very reuse friendly.  It “cost” too much.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Building a UART-Lite core&lt;/p&gt;

    &lt;p&gt;As a result, I now support UART-Lite cores: a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;transmit&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;receiver&lt;/a&gt;
pair that will only ever use 8-data bits, no parity, and one stop
bits–&lt;a href=&quot;https://en.wikipedia.org/wiki/8-N-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8N1&lt;/code&gt; as it is commonly called&lt;/a&gt;.
These lite cores no longer handle BREAK conditions.  They only support a
fixed baud rate, predetermined at design build time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So why rebuild the wheel when it comes to &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter&quot;&gt;serial
ports&lt;/a&gt;?
Because 1) the &lt;a href=&quot;https://en.wikipedia.org/wiki/16550_UART&quot;&gt;UART16550&lt;/a&gt; interface
hasn’t aged well, and 2) my “ultimate” serial port cost me too much to use.&lt;/p&gt;

&lt;p&gt;If you compare these problems to software, wouldn’t these also be problems
that where one might learn lessons from software reuse?  Not really.  Unlike
hardware, software bloat doesn’t nearly cost as much.  Just a kB here, and a
kB there, and no one will notice that a piece of software has a lot of
unnecessary functionality in it.  The fact that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_litigation#United_States&quot;&gt;Internet Explorer was
declared to be an integral part of the Windows operating
system&lt;/a&gt;
should prove my point about software bloat.&lt;/p&gt;

&lt;p&gt;What about &lt;a href=&quot;https://twitter.com/OlofKindgren&quot;&gt;Olof&lt;/a&gt;’s advice?  In hind sight,
he has a strong point.  Several latent bugs existed in the core prior
to formal verification.  Despite the fact that the full service core had
so much functionality, barely any of it was properly verified prior to that
time.  Further, the software driver had to be rewritten multiple times over.
Still, the core components have been used over and over again in many projects
with great success.&lt;/p&gt;

&lt;h2 id=&quot;reusing-an-sd-card-component&quot;&gt;Reusing an SD-Card component&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 6. Reusing an SD-Card Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/sdspi-reuse.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What about other components?  For example, what about SD-cards?  Why can’t
we reuse SD card controllers from one design to another?  Can reuse finally be
achieved here?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s start by looking over this &lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;SD Card
controller&lt;/a&gt; found on
&lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;, but which traces its roots back to
&lt;a href=&quot;https://opencores.org/project,sdcard_mass_storage_controller&quot;&gt;OpenCores&lt;/a&gt;.
This is a nice, full featured driver–but also one that I’ve never used.&lt;/p&gt;

    &lt;p&gt;Why not?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;While &lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;this core&lt;/a&gt;
implements the full SDIO interface, it also contains DMA’s and other
items I don’t need in a
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;resource-constrained&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design.  If my design already has a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
within it, why add another one (or two, or three) that I won’t be using
regularly?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I like to use the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipelined bus standard&lt;/a&gt;, not the
&lt;a href=&quot;/wbspec_b4.pdf&quot;&gt;Wishbone classic standard&lt;/a&gt;. 
Unlike &lt;a href=&quot;/wbspec_b4.pdf&quot;&gt;Wishbone classic standard&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipeline&lt;/a&gt;
is faster, and scales better up to higher clock rates.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;This &lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;full SDIO controller&lt;/a&gt;
requires 2.8k Xilinx 6-LUTs, nearly 10% of a basic Artix-7/35T design.
On an iCE40 with 4-LUTs, this would use 4k of the 8k LUTs available–a
full 50% of the area, vice the simpler &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;601 LUT design&lt;/a&gt; discussed below.&lt;/p&gt;

        &lt;p&gt;As I mentioned earlier, when discussing &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my serial port&lt;/a&gt;, people don’t
necessarily notice software bloat whereas hardware bloat costs money.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How about building and reusing &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;my own SD card
controller&lt;/a&gt; then?  Surely I
might be able to use this across multiple designs?&lt;/p&gt;

    &lt;p&gt;This, again, is a good and bad reuse story.&lt;/p&gt;

    &lt;p&gt;Yes, I built an &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD card controller&lt;/a&gt;
based upon the SPI interface supported by most cards.  You can see it
pictured above in Fig. 6.  I also built an &lt;a href=&quot;https://github.com/ZipCPU/sdspi/blob/master/bench/cpp/sdspisim.cpp&quot;&gt;SD
card emulator&lt;/a&gt;
to go with it, one that worked with a backing file in a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
context.  The &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;controller&lt;/a&gt; worked nicely in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;. 
I was even able to read and write sectors when commanding it from &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;my
debugging bus&lt;/a&gt;
in hardware.&lt;/p&gt;

    &lt;p&gt;What more could one want for reuse?&lt;/p&gt;

    &lt;p&gt;In this case, when I finally went to use the core as part of one of a
design for contract, &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;I discovered several
bugs&lt;/a&gt;.  First, I missed part
of the spec, and then needed to retrofit the design in order to provide
the SD-card with a startup clock–even before lowering &lt;code class=&quot;highlighter-rouge&quot;&gt;CS#&lt;/code&gt; for its first
command.    &lt;a href=&quot;https://github.com/ZipCPU/sdspi/blob/master/bench/cpp/sdspisim.cpp&quot;&gt;My
emulator&lt;/a&gt;
didn’t (initially) require this.  Next, the low-level clock generator wasn’t
generating a clock output of a constant width.  Worse, the core had a bug
where it just couldn’t handle high speed bus transactions–such as
transactions from or with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;–transactions
it was specifically designed to handle.&lt;/p&gt;

    &lt;p&gt;What happened?&lt;/p&gt;

    &lt;p&gt;Under the hood, what happened was that it took two clocks to read a value:
one to generate the address, and a second clock to read from that (new)
address.  High speed reads only provided one clock per read transaction, and
so they read the first word of any sector twice.  Anything slower wouldn’t
notice the problem.&lt;/p&gt;

    &lt;p&gt;Because I had only tested this design with &lt;em&gt;constant valued sectors&lt;/em&gt;, or
perhaps because I’d never stared hard enough at the results of reading or
writing sectors, I’d never noticed this bug.  (I’m still scratching my
head, to be honest, wondering how I could’ve missed this one …)&lt;/p&gt;

    &lt;p&gt;While &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;the core&lt;/a&gt; has since been fixed, this
story does a good job of illustrating some of the problems with reuse:
Verification is the expensive part of any design process, and how shall you
know that a design has been properly verified &lt;em&gt;for your usage environment&lt;/em&gt;?&lt;/p&gt;

    &lt;p&gt;Even better, &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;the core&lt;/a&gt; (now) uses only
about 601 4-LUTs on an iCE40, so it’s much cheaper to use than the
&lt;a href=&quot;https://github.com/mczerski/SD-card-controller&quot;&gt;OpenCores-based 4k LUT core&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This illustrates another big problem with reuse: Just because a design
“works” in one bus/interconnect environment, doesn’t mean it will work
in practice in your environment.  This leaves the individual reusing the
core with the unenviable task of needing to debug his own design enough
to convince the author of any subcore within it that a bug remains within
the component, rather than within the context in which it was written.&lt;/p&gt;

&lt;p&gt;Doesn’t software also have the same problem?  I suppose you might argue that
it does.  The difference, however, is the difficulty associated with debugging
“broken” hardware components.  Debugging software is fairly easy.  Debugging
hardware, that’s &lt;a href=&quot;/fpga-hell.html&quot;&gt;much harder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The good news is that by using a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal property file&lt;/a&gt;,
you can verify that a core will function in &lt;em&gt;all bus interconnect and usage
environments&lt;/em&gt;–something you don’t get from either a bench test, nor an
integrated simulation environment.&lt;/p&gt;

&lt;h2 id=&quot;reusing-an-i2c-controller&quot;&gt;Reusing an I2C controller&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Reusing an I2C Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/rpi-edid.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, I built an &lt;a href=&quot;https://github.com/ZipCPU/wbi2c/blob/master/rtl/wbi2cmaster.v&quot;&gt;I2C
master&lt;/a&gt;
and separate
&lt;a href=&quot;https://github.com/ZipCPU/wbi2c/blob/master/rtl/wbi2cslave.v&quot;&gt;slave&lt;/a&gt;
controller.  They were built to support an
&lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt;
based pass-through design, and so one controller would read the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID&lt;/a&gt;
information from a downstream monitor, and then that information would be
used to populate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID&lt;/a&gt;
information used by the upstream
&lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt;
source–in this case a &lt;a href=&quot;https://raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Did the design work?  Beautifully.  No, it wasn’t automatic, but it was still
quite general purpose.  (It required a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; program to forward the
information from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID&lt;/a&gt;
master to the slave.)&lt;/p&gt;

&lt;p&gt;Recently, however, someone gave me an &lt;a href=&quot;https://www.nxp.com/docs/en/data-sheet/SC18IS602B.pdf&quot;&gt;I2C
chip&lt;/a&gt; to work with
that doesn’t follow the single byte address, multi-byte data protocol.  Try
as I might, I can’t seem to figure out any way to control this new device
with my older &lt;a href=&quot;https://github.com/ZipCPU/wbi2c&quot;&gt;I2C controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why not reuse?  Because even though the lower level protocol remained the
same, the upper level protocol changed and the cores that I might’ve used
combined the two protocol layers.&lt;/p&gt;

&lt;h2 id=&quot;reuse-at-the-interconnect-level&quot;&gt;Reuse at the interconnect level&lt;/h2&gt;

&lt;p&gt;Connecting components like a serial port and/or an I2C controller together
within a design tends to require some sort of glueware–an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;–that
holds the components together while allowing them to talk to each other.  &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;Many
modern designs&lt;/a&gt;
are composed of some kind of system level bus, or even a &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;hierarchical bus
structure&lt;/a&gt;,
that connects many components together.  Components to be connected include
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;–those
that want to drive an interaction, bus bridges, and &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus
slaves&lt;/a&gt;–those
that actually perform some resulting action.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 8. Can the interconnect be reused?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/multimaster.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This may be the one level at which I have seen the least reuse between
designs crossing multiple vendors.  There just aren’t that many well-known
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;interconnect
generators&lt;/a&gt;
that will work cross platform.&lt;/p&gt;

&lt;p&gt;What keeps
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnects&lt;/a&gt;
from being reused?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First and foremost, an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
is often tailor-made on a design by design basis.&lt;/p&gt;

    &lt;p&gt;One design might have one master and twenty slaves.  Another design might
have two masters and four slaves.  &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;Slave address
regions&lt;/a&gt;
might change, bus data widths change from design to design, etc.  Worse,
it takes a lot of work to connect all these masters and slaves to &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;an
interconnect that will allow each of the masters to talk to each of the
slaves&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;It is for this reason that the solutions I have seen typically involve code
generators–something that can “automatically” connect various
components together.  I’m going to call such a core generator in this
context an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
generator.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
was designed from its inception to be such an
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
generator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connectivity is further complicated by the number of bus standards.
Perhaps you are familiar with some of these:
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
Avalon, AHB, APB, or even TileLink?&lt;/p&gt;

    &lt;p&gt;A design integrator, that is someone composing their design from multiple
cores they intend to reuse, just wants to be able to “plug” things together
and immediately “play” with them.&lt;/p&gt;

    &lt;p&gt;Moving from one protocol to another requires bus bridges.  Will the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;generator&lt;/a&gt;
insert these automatically?  If so, what will the performance cost be?
In one example I worked with, I ended up &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;inserting so many bus bridges
that I could no longer maintain the I/O speed I had promised my
customer&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The worst part of bridging between bus standards is that not all
functionality can be bridged.  For example, although I have an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axim2wbsp.v&quot;&gt;AXI to
Wishbone bus
bridge&lt;/a&gt;,
consisting of both &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximrd2wbsp.v&quot;&gt;read&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximwr2wbsp.v&quot;&gt;write&lt;/a&gt;
component bridges, the AXI &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLOCK&lt;/code&gt; functionality doesn’t bridge from one
side to the other very well.  Neither do the &lt;code class=&quot;highlighter-rouge&quot;&gt;AxCACHE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxPROT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt;,
etc, have clear analogs in
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;What about bus widths?  DDR3 SDRAM works best with a bus that is multiples
of 64-bits wide.  The &lt;a href=&quot;https://github.com/freecores/uart16550&quot;&gt;UART16550
core&lt;/a&gt; I mentioned above wants
an 8-bit bus width.  Modern CPU’s naturally want to interact at the width
of their register size–that’s 32-bits for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Reuse requires being able
to bridge across these multiple bus sizes, something that doesn’t always
work across all peripherals and bus standards.  In particular, what happens
to a peripheral that performs a side-effect on reads, as for example a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt; might, when you try to
read it from a wider bus standard?&lt;/p&gt;

    &lt;p&gt;Of course, I haven’t mentioned the problem of getting the bus to &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross
clock domains&lt;/a&gt; as part of the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;–something
which leads to a whole new can of worms.  As an example, you are very
likely going to need to be able to &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;cross clock domains to support both
video and memory&lt;/a&gt; at the
same time–as you would with any sort of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;framebuffer&lt;/a&gt;
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Neither have I mentioned how the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
should handle “optional” bus capabilities.  For example,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; offers USER interface wires:
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWUSER&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WUSER&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARUSER&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BUSER&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;RUSER&lt;/code&gt;.  These tend to have
context-defined meanings, which can change from one design to the next.
How then should the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
handle connecting slaves together that have multiple, dissimilar,
definitions of these USER wires?  The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone
classic&lt;/a&gt; tag signals have similar
problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Performance and verification factor in here as well&lt;/p&gt;

    &lt;p&gt;To illustrate this, let me point out that Xilinx offers several options
when configuring their
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;.
One option turns an &lt;code class=&quot;highlighter-rouge&quot;&gt;N:M&lt;/code&gt;
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; into an &lt;code class=&quot;highlighter-rouge&quot;&gt;N:1:M&lt;/code&gt;
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; masters get arbitrated to a single read and write channel (never
both), which then gets fed to one of M slaves.  Only one of those
slaves will ever be addressed at any time, so they all share the same
read and write addresses.  (Yes, even the read and write addresses are
shared across channels–defeating much of the purpose of having separate
read and write channels in the first place–but that’s another story.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 9. Xilinx&#39;s Area Optimized N:1:M AXI Crossbar&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/axi-n-1-m.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is all fine and good until you switch a design component from the
   N:1:M &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
   &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
   to the full N:M &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;.
   Chances are, if you do that, that you’ll discover that your design
   no longer works.  Both &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;Xilinx’s demonstration IP
   cores&lt;/a&gt; and their
   &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_ethernetlite/v3_0/pg135-axi-ethernetlite.pdf&quot;&gt;AXI Ethernet-Lite core&lt;/a&gt; would break–if
   not other Xilinx cores as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 10. Whose core do you blame when something goes wrong?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/brken-axilite.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Tell me, what would you do?  If you reconfigured your
   &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
   and suddenly your design stopped working, where would you look for
   the bug?  Would you try to find a bug in Xilinx’s
   &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;?
   That’s where I would look!  Worse, I’d get all frustrated that their
   &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
   was closed source, and then likely blame them for the bug–even if it was
   in &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;one of my own design
   components&lt;/a&gt;!  This is
   what you’ll suffer from when your own core can’t handle
   backpressure properly.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Did I mention changing standards?  Some of the earlier
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
based &lt;a href=&quot;/blog/2018/11/03/soc-fpga.html&quot;&gt;SOCs&lt;/a&gt;, Zynqs
included, supported only &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI3&lt;/a&gt;–even
though most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designs today use &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI4&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;It doesn’t help that vendor based
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnects&lt;/a&gt;
can’t be simulated with 3rd party tools like
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
or verified with things like
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/&quot;&gt;SymbiYosys&lt;/a&gt;,
simply because the designs are proprietary.&lt;/p&gt;

    &lt;p&gt;As I mentioned above, this proprietary nature of most
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
generators just hides the bugs within them, and obscures any bugs hidden
elsewhere in the design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This may be perhaps the biggest place where good open source based reuse
might improve designs.&lt;/p&gt;

&lt;h2 id=&quot;reusing-the-zipcpu&quot;&gt;Reusing the ZipCPU&lt;/h2&gt;

&lt;p&gt;Let’s now turn our attention to a place where all the stars &lt;em&gt;should&lt;/em&gt;  align
to make reuse easy: within IP cores generated by a single company, owned by
a single entity, and all using the same bus standard.&lt;/p&gt;

&lt;p&gt;In this ideal environment, reuse should be easy.  Right?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; (now) supports many
hardware architectures.  It has been built on
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;iCE40s&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipversa&quot;&gt;ECP5s&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;Intel MAX-10s&lt;/a&gt;,
Xilinx &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;Spartan 6s&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;Artix 7s&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;automated bus interconnect
generator&lt;/a&gt;
that I now use has also demonstrated its ability to compose designs
across architectures.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So have I managed to achieve reuse nirvana then?  Let’s take a look at several
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; designs and
see what might be learned from reusing the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; across multiple designs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Designs require resources.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is no different.  It
requires both LUTs for logic and one (or more) on-chip RAMs for the
register file.  Not all FPGAs have the LUTs required to build a
full-featured design.&lt;/p&gt;

    &lt;p&gt;No, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; will not fit on a
1k iCE40 &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
Sorry.&lt;/p&gt;

    &lt;p&gt;Perhaps a better example of this is the &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;ZipCPU design I
built&lt;/a&gt; for the
&lt;a href=&quot;https://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod S6&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;This design&lt;/a&gt; was based around a
Spartan 6/LX4, and demonstrated an ability to run a multitasking “O/S”–or
at least that’s what I’m going to call it.  (It did do multitasking,
but whether it was an actual “O/S” that fit into less than 16kB of RAM is
really another question for another day.)&lt;/p&gt;

    &lt;p&gt;Just getting the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;fit on the LX4&lt;/a&gt;
meant that I needed to adjust the CPU–&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpudefs.v&quot;&gt;removing “features” that cost
too much&lt;/a&gt;.  I
removed the cache, pipelining, the LOCK instruction, and I used a &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/cpu/memops.v&quot;&gt;really
cheap load/store memory
solution&lt;/a&gt;.
I even scoured all my peripherals for lower logic alternatives and dumped my
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In the end, the design fit with less than 10 LUTs to spare–depending upon
the build.  Sometimes it fit with no LUTs to spare.&lt;/p&gt;

    &lt;p&gt;This has since left me with a problem:  ISE is a pain to use.  I don’t
often open it up.  This means that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;, once ported to this platform,
doesn’t often get the updates also ported to the platform.  This particular
design is then well out of date.  Sure, I’ve reused the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.  However, I’m not convinced
that the current version of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
will still fit on this device, and I’m fairly certain that the version that
does fit has bugs that have since been “fixed” in the master branch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA2 LX25 design&lt;/a&gt; is another
interesting story.  Years ago, I bought &lt;a href=&quot;http://www.xess.com/shop/product/xula2-lx25&quot;&gt;one of these
boards&lt;/a&gt; from
&lt;a href=&quot;http://www.xess.com&quot;&gt;Xess.com&lt;/a&gt;.
I really liked it too, although it’s now a bit dated.  I even built a
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;ZipCPU based SoC&lt;/a&gt; for this board.&lt;/p&gt;

    &lt;p&gt;Then someone wanted to reuse this design on their own XuLA2 LX board, only
they purchased a XuLA2 LX9 board and not the LX25 board.&lt;/p&gt;

    &lt;p&gt;Did the design fit on their board?  Nope!&lt;/p&gt;

    &lt;p&gt;Did this user understand why not?  Not at all.&lt;/p&gt;

    &lt;p&gt;Size matters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there’s the reuse challenge associated with clock speed.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was originally built
on and for a Basys3 containing an Artix 7.  On that device, it runs
comfortably at 100MHz.&lt;/p&gt;

    &lt;p&gt;It doesn’t run at 100MHz on other devices.  It only gets about 80MHz or so
on a Spartan 6, 50MHz or so on an iCE40 HX, and 25MHz or so on an iCE40 LX.
The only good news here is that one user reported running it on a Kintex
7 at over 140MHz if I recall correctly.&lt;/p&gt;

    &lt;p&gt;This, however, oversimplifies reality.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on an
&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;Artix-7&lt;/a&gt; with
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data&lt;/a&gt;
caches runs can run at nearly &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycles_per_instruction&quot;&gt;one instruction per clock
period&lt;/a&gt;, and so the
100MHz number is fairly accurate.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; performance on the
&lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;Spartan 6 LX4 within the CMod S6&lt;/a&gt;?  That
didn’t run nearly as fast.  Sure, it runs at an 80MHz clock speed.  The
problem is that it might take 20+ clocks to &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;read a single instruction from
flash memory&lt;/a&gt;.  Since
there’s barely any block RAM, and certainly no caches, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;same CPU&lt;/a&gt; can run at best at nearly
4&lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_second&quot;&gt;MIPS&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As a result, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; that might
manage to meet a real-time requirement on an Artix-7 35T, might get
nowhere close on a lesser architecture.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; requires RAM.
Even if you turn the caches off, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
still uses RAM for its register file.&lt;/p&gt;

    &lt;p&gt;On most Xilinx devices, this isn’t a problem.&lt;/p&gt;

    &lt;p&gt;Where this becomes a problem is &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;on an
iCE40&lt;/a&gt;, since the
&lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;iCE40 requires that all RAM outputs need to be
registered&lt;/a&gt;.
Reuse?  Sure, but I had to &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;rearrange internal details of how the
ZipCPU operated&lt;/a&gt;
just to support this platform.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What about those multiplies?  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;handles
multiplication&lt;/a&gt;
by inference, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;OUT &amp;lt;= IN1 * IN2&lt;/code&gt;.  What
then happens if the device it is on has no DSP support?&lt;/p&gt;

    &lt;p&gt;This was first a problem in my Spartan 6 designs.  I was unable to get
decent timing on a Spartan 6 with this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/mpyop.v#L106-L130&quot;&gt;multiplication
algorithm&lt;/a&gt;.
So I created a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/mpyop.v#L132-L188&quot;&gt;parameterized multiplication approach that did polynomial
multiplication based around 16x16 bit hard multipliers&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Even this didn’t work on an iCE40 with no built-in DSP support.  In that
case, I needed to build a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/b3bee662b54a54d5b9ff27379e52d79b1e7f0a88/rtl/core/slowmpy.v#L101-L122&quot;&gt;shift and add based
multiplier&lt;/a&gt;.
Even this took several rounds of design until I had an implementation
that not only worked, but also left enough room behind for non-CPU design
components.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I should also mention my
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
here.  One of the key components to any design I build is my
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.
This allows me to load the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
externally, to run a
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;ZipCPU debugger&lt;/a&gt;,
and to &lt;a href=&quot;/zipcpu/2017/05/20/which-came-first.html&quot;&gt;interact with peripherals even when the ZipCPU is
halted&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
didn’t fit on the &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;Spartan 6/LX4 of the CMod
S6&lt;/a&gt;, and so this is the one design where
I wasn’t able to make (much) use of it–although I still used it as part of
a special design to &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;load software onto the
flash&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;My &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;supersized debugging
bus&lt;/a&gt;
implementation, with FIFOs and
&lt;a href=&quot;/formal/2019/10/05/formal-enough.html&quot;&gt;compression&lt;/a&gt;,
didn’t &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;fit on the iCE40&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;hexbus
implementation&lt;/a&gt;
that we built together on the blog did fit.  I had never intended
to use this implementation in any of my designs, yet now having
built it I’m glad that I did.&lt;/p&gt;

    &lt;p&gt;With all that said, the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; implementations
are really reuse success stories, since they’ve been used across so many
of my designs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clocks.  Yes, clocks.  It should come as no surprise that I’ve had to
redesign the clocking logic from one architecture to the next.  Every
vendor provides their own PLLs, they all need to be configured differently,
etc.&lt;/p&gt;

    &lt;p&gt;The good news is that
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can handle this nicely.&lt;/p&gt;

    &lt;p&gt;No, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
doesn’t do clock configuration.  However, you can use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to propagate clock-based configuration constants across the design.  This
makes it easy, for example, to adjust the clock rate and have all of the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART&lt;/a&gt; or SDRAM constant design
parameters adjust themselves automatically.&lt;/p&gt;

    &lt;p&gt;Isn’t this just as easy as setting a parameter in the top level Verilog
file?  Not at all!  Don’t forget that the emulated serial port needs
to be adjusted for the new baud rate, as does the host software.
One of the nice things
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
handles is propagating information across multiple files of dissimilar
languages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
has worked wonders for building cross platform
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnects&lt;/a&gt;,
and I’ve been very pleased with it.&lt;/p&gt;

    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/autofpga/tree/dev&quot;&gt;newer version (still in the dev branch at this
time)&lt;/a&gt; has support for
&lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;multiple bus masters and multiple bus
types&lt;/a&gt;.  (The
original version required manually placing bus arbiters into a design
to whittle the design down to one master, and only ever supported the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipeline&lt;/a&gt;
bus type.) Even better, all of the components are open source–so any
design so composed should work nicely with
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;My problem is that this &lt;a href=&quot;https://github.com/ZipCPU/autofpga/tree/dev&quot;&gt;new version of
AutoFPGA&lt;/a&gt;
is somewhat incompatible with the last one.  Why?  Because the &lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;interfaces
have changed&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Creating a design with multiple bus masters meant that I needed to rename
the bus, giving all of the bus slaves their own individual bus signal
wires to work with.  This alone is an incompatible change to
all of my designs that assumed all bus wires would be prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_&lt;/code&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt;, etc.&lt;/p&gt;

    &lt;p&gt;I’ve also struggled with designs where I haven’t set up the bus logic
properly.  In earlier versions of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
I’d pass &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb &amp;amp;&amp;amp; (slave_sel)&lt;/code&gt; to the design’s
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
strobe pin, and then suffered any time I forgot to properly place the
&lt;code class=&quot;highlighter-rouge&quot;&gt;slave_sel&lt;/code&gt; in that logic.  The new version allows you to just say
&lt;code class=&quot;highlighter-rouge&quot;&gt;@$(SLAVE.PORTLIST)&lt;/code&gt; and it then fills in all the necessary bus
connections.  This has &lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;forced all of my slaves to use the same bus
portlist order and format–another incompatible
change&lt;/a&gt;.
(I could also use the ANSI ‘dot’ notation for connecting ports,
with just &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(SLAVE.ANSIPORTLIST)&lt;/code&gt;.)&lt;/p&gt;

    &lt;p&gt;My point is simply this: after making a simple interface change like this,
I’m going to need to go back and re-build and then re-verify all of my
designs.  This isn’t all that unlike the configuration hell vendors have
found themselves within.  (But … my design worked with Vivado 2016.1,
why doesn’t it work any more with Vivado 2018.2?)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Still, the fact that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has been successfully used across so many architectures is by itself a reuse
success story.  Nirvana?  Perhaps not, but still quite valuable.&lt;/p&gt;

&lt;h2 id=&quot;reusing-the-design-across-cpus&quot;&gt;Reusing the design across CPUs&lt;/h2&gt;

&lt;p&gt;Okay, so I’ve now got a design framework I like using.  Can it be reused?&lt;/p&gt;

&lt;p&gt;Specifically, one customer wanted me to reuse my framework to build a &lt;a href=&quot;https://github.com/ZipCPU/zipversa&quot;&gt;platform
containing a RISC-V CPU&lt;/a&gt; instead of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Surely reuse would work here,
right?&lt;/p&gt;

&lt;p&gt;Let’s see: I owned all the submodule and component designs except for the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32 CPU&lt;/a&gt;
I chose to use, so licensing wasn’t a problem.  I used
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; to compose
the component cores together, so there was no problem with building the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;.
I could reuse &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/sw/host/zipload.cpp&quot;&gt;my CPU
loader&lt;/a&gt;
to load the (flash) memory into a design, so that wouldn’t be a problem.  The
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;, like the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, was highly configurable
so it could be configured to start from the &lt;a href=&quot;/zipcpu/2019/09/03/address-assignment.html&quot;&gt;memory
address&lt;/a&gt;
provided by &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;, it could be
configured for the number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; assigned to it, the design
had support for 32x32 bit multiplies, … what could possibly go wrong?&lt;/p&gt;

&lt;p&gt;Since it looked so easy, I made a big mistake: I mis-estimated the amount
of time the project would take.  Since it was all reuse, it should’ve all been
easy.  Again, what could’ve gone wrong?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. Endianness: Which byte of a word is byte zero?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/reuse/endianness.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;Endianness&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;That’s right.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
is &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big-endian&lt;/a&gt;, and &lt;a href=&quot;https://riscv.org/specifications/&quot;&gt;RISC-V
machines are little endian&lt;/a&gt;.
While &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI&lt;/a&gt; specifically
uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little-endian byte order&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; can be
either &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big or little endian&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This left me with the age old question of how do you fit a square peg in a
round hole?&lt;/p&gt;

    &lt;p&gt;My first thought was that I should add to the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/picorv/wb_picorv32.v&quot;&gt;wrapper&lt;/a&gt;
the logic necessary to swap all the words on the bus.&lt;/p&gt;

    &lt;p&gt;Then I got to thinking–all of my peripherals depended upon the data bits of
the bus, from bits 31 down to bit 0, being in MSB down to LSB order.  If
I swapped the bytes in any of these control words, then writes to these
peripherals would’ve all been provided in
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[7:0],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[15:8],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[23:16],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data[31:24]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; order.&lt;/p&gt;

    &lt;p&gt;That would never work.&lt;/p&gt;

    &lt;p&gt;In the end, I created a new concept: bus endian.  Every peripheral that was
word addressable would use bus endian order and stay the same.  Every
peripheral that was byte addressable, rather than word addressable, would
get its byte order swapped.  This now limited my pain to the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; and the
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/enet/enetpackets.v&quot;&gt;network&lt;/a&gt;
controllers.  A simple parameter, set by the &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/auto-data/picorv.txt#L60&quot;&gt;CPU’s AutoFPGA
configuration&lt;/a&gt;,
could then control whether or not the
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/enet/enetpackets.v&quot;&gt;network&lt;/a&gt;
controller needed to have their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;endianness&lt;/a&gt; swapped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There was a second problem as well, and that had to deal with the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;’s
bus interface.  It was custom, not
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;.
No, it wasn’t all that hard to &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/picorv/wb_picorv32.v&quot;&gt;convert from the PicoRV32’s custom
interface to a Wishbone interface&lt;/a&gt;,
but the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
took a big performance hit in the process.&lt;/p&gt;

    &lt;p&gt;What?  Why?&lt;/p&gt;

    &lt;p&gt;Well, the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
only ever issues one bus request at a time.  That request waits on the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;’s
I/O lines until it is fulfilled.  Without knowing the next request location,
every I/O request becomes independent.  Every I/O request then requires a
number of clocks defined by the bus latency plus the peripherals latency.&lt;/p&gt;

    &lt;p&gt;At best, the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;250MHz (on a Xilinx device) capable PicoRV32
CPU&lt;/a&gt; then ran slower than &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycles_per_instruction&quot;&gt;40
clocks per instruction&lt;/a&gt;.
No, this design didn’t support a &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;DDR based
flash&lt;/a&gt;, and I didn’t
manage to get the &lt;a href=&quot;/formal/2019/11/18/genuctrlr.html&quot;&gt;DDR3 SDRAM
support&lt;/a&gt;
working–hence it took 40 clocks to &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;read each instruction from the
flash&lt;/a&gt;.
Further, because the rest of the design slowed down the system clock,
the &lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;
could only ever run at 50MHz.  Then, because the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt; didn’t support a
pipelined bus by nature, the best speed it could ever achieve was limited to
(roughly) 1.25&lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_second&quot;&gt;MIPS&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, I needed to adjust the software ecosystem&lt;/p&gt;

    &lt;p&gt;This is both a win and a fail for software reuse.  It’s a win, since most of
what I did was to copy the example boot loader that came with the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/sw/rv32/syscalls.c&quot;&gt;example newlib system
calls&lt;/a&gt;
from the
&lt;a href=&quot;https://github.com/ZipCPU/zipversa/blob/master/rtl/zlib/syscalls.c&quot;&gt;ZipCPU&lt;/a&gt;.
It’s a fail because I still had to edit the two, but in general by the time
I got this far things “just worked”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What’s the lesson here?  Did reuse work?  Well, yes and no.  I did manage to
reuse most of the design across both CPUs.  I did manage to reuse the &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;bus
interconnect framework&lt;/a&gt;
across both CPUs.  No, I wasn’t able to reuse the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;ZipCPU’s
debugger&lt;/a&gt; with the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt;–but then again I wasn’t
expecting to.  That said, it wasn’t all that hard to &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;issue halt or reset
commands&lt;/a&gt; to the
&lt;a href=&quot;https://github.com/cliffordwolf/picorv32&quot;&gt;PicoRV32&lt;/a&gt; from the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; interface over the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
bus like I &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;would’ve done with the
ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hardware is not software.&lt;/p&gt;

&lt;p&gt;Let me say that again, hardware is not software.  What’s easy to do in software
can be ten times harder in hardware where its that much &lt;a href=&quot;/fpga-hell.html&quot;&gt;harder to “see” your
bugs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What else might we conclude?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There’s a large portion of digital design that isn’t covered by any HDL
standard, but that is rather vendor and even device dependent.  This
includes clocks, PLLs, I/O primitives, sometimes RAM structures, and
definitely hardware multiplies.&lt;/p&gt;

    &lt;p&gt;To be reusable across platforms, you’ll need to take these differences into
account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If that’s not enough, the differences between the “standard” languages the
tools accept can also be really annoying.&lt;/p&gt;

    &lt;p&gt;Don’t expect a design that hasn’t been used across vendor tools before to
immediately work when switching tools.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Software bloat costs more memory than anything else, whereas hardware bloat
costs actual dollars in terms of scarce &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;hardware
resources&lt;/a&gt; on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; or area
on an &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt;.  As a
result, hardware designs take more work in order to become reusable across
a large variety of needs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bus standards are awesome–when they are truly &lt;em&gt;standard&lt;/em&gt;.  AXI USER or
Wishbone tag signals aren’t really standard.  Similarly, the bus bridges
necessary to cross standards have a cost in both area and performance
that can’t always be ignored during reuse.&lt;/p&gt;

    &lt;p&gt;Making sure bus standards are &lt;em&gt;standard&lt;/em&gt; is one of those reasons why
I maintain a series of formal bus protocol checkers in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/&quot;&gt;Wishbone to AXI
(pipelined) repository&lt;/a&gt;: 
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-Lite&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone (pipeline)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fwbc_slave.v&quot;&gt;Wishbone (classic)&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt;,
and even &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fapb_slave.v&quot;&gt;APB&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The worst reuse stories, not necessarily those captured above, are reserved
for trying to reuse a core that was never formally verified in the first
place.  It’s in these cases that I most often find myself mis-estimating
the time and energy required to get a design “working”, leaving me
&lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;burning the midnight oil to get a design done by the
deadline&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Can reuse happen?  Yes, it can.&lt;/p&gt;

&lt;p&gt;Do be prepared for all kinds of unexpected issues along the way.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The thing that hath been, it is that which shall be; and that which is done is that which shall be done: and there is no new thing under the sun. (Eccl 1:9)&lt;/em&gt;</description>
        <pubDate>Mon, 13 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2020/01/13/reuse.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/01/13/reuse.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>2019: AXI Meets Formal Verification</title>
        <description>&lt;p&gt;It’s a new year!  Let’s continue our end-of-year tradition from
&lt;a href=&quot;/blog/2018/01/01/top-ten.html&quot;&gt;2017&lt;/a&gt;
and &lt;a href=&quot;/blog/2018/01/01/top-ten.html&quot;&gt;2018&lt;/a&gt;
and take a moment to look back over 2019, from the
perspective of the ZipCPU blog, and see what stands out.&lt;/p&gt;

&lt;h2 id=&quot;blog-history&quot;&gt;Blog History&lt;/h2&gt;

&lt;p&gt;If you aren’t familiar with the back story, I started the ZipCPU blog back in
2017.  Back then, times were tough.  It had only been four years since starting
&lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology&lt;/a&gt;,
and contacts and jobs were drying up.&lt;/p&gt;

&lt;p&gt;Did I know what I was doing when I began
&lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology&lt;/a&gt;
back in 2013?  While we can argue about whether I understood digital design
back then, I clearly did not understand business.  I knew it too.&lt;/p&gt;

&lt;p&gt;Prior to 2017, I’d had a couple of gift jobs: friends I knew who just happened
to have just the right job for me.  At one time, I remember traveling to visit
my mother and then visited some friends who worked nearby.  These friends asked
me to come visit them at the office, during business hours, and so I found
myself walking into a meeting where the foregone conclusion was that they
wanted me to do a job for them.&lt;/p&gt;

&lt;p&gt;This is what I consider a “gift”–not because it isn’t valid work, nor because
there’s anything untoward going on, but simply because I was the right person
for the job at the right time.  I walked into someone else’s need.  Such jobs
are &lt;em&gt;gifts&lt;/em&gt; from the Almighty.&lt;/p&gt;

&lt;p&gt;That said, it’s hard to plan on gifts, and I needed to learn how to find
business the hard way.&lt;/p&gt;

&lt;p&gt;My original approach to business development was to build a portfolio of
digital designs on &lt;a href=&quot;https://opencores.org&quot;&gt;OpenCores&lt;/a&gt;, and then use them
as discussion pieces on various digital forums.  Indeed, they made great
example designs for that purpose.  That said, this approach wasn’t bringing
in any business (at the time).  (I’ve since gotten several contracts from
this work.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 1.  Inbound Marketing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/inbound-marketing.jpeg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then, in May of 2017 my aunt came to visit.  She took the whole family to
the local used book store to pick out gifts that were to be from Grandma–who
was getting too frail to visit everyone.  At the time, I picked up a book
titled, &lt;a href=&quot;https://www.amazon.com/Inbound-Marketing-Found-Google-Social/dp/0470499311&quot;&gt;Inbound
Marketing: Get Found using Google, Social Media, and
Blogs&lt;/a&gt;.
I had heard of inbound marketing before, and the concept appealed to me.
Instead of cold calling prospective customers promoting my work, I’d promote
my work and capabilities on a blog to the extent that prospective customers
would contact me about what they wanted done, and I could make contacts that
way.&lt;/p&gt;

&lt;p&gt;The idea appealed to me, so I started up &lt;a href=&quot;https://zipcpu.com&quot;&gt;zipcpu.com&lt;/a&gt;
and started writing blog articles.  I also started creating a &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;twitter
feed&lt;/a&gt;–all at the suggestion of the &lt;a href=&quot;https://www.amazon.com/Inbound-Marketing-Found-Google-Social/dp/0470499311&quot;&gt;Inbound
Marketing&lt;/a&gt; book.&lt;/p&gt;

&lt;p&gt;Thus began the ZipCPU blog.  Since that time, my &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;twitter
following&lt;/a&gt; have grown to over three
thousand.  Wow.  Thanks, everybody!&lt;/p&gt;

&lt;h2 id=&quot;zipcpu-meets-formal-verification&quot;&gt;ZipCPU meets Formal Verification&lt;/h2&gt;

&lt;p&gt;Later that year, as I was preparing to head to &lt;a href=&quot;https://orconf.org&quot;&gt;OrConf&lt;/a&gt;
for the second time, Edmund from &lt;a href=&quot;https://symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt;
contacted me.  He wanted me to try out
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;, their new
formal verification tool.&lt;/p&gt;

&lt;p&gt;What was I to say?  Did I need formal verification?  Of course not!  Why would
I need some bright new gadget to help me do what I’d been doing already?
What I did need, however, was marketing material for my blog.  So I decided
to condescend and see how this new formal verification tool worked, and then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;write a blog article about
it&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When pride cometh, then cometh shame: but with the lowly is wisdom.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/11/2&quot;&gt;Prov 11:2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Much to my surprise, the formal verification tool taught me some desperately
needed humility.  &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;I applied the formal verification tool to a very basic
design, a simple FIFO that I’d used for years, only to discover it had bugs
in it that were never found by my test
bench&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then set out to &lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;formally verify the rest of my
portfolio&lt;/a&gt;.  Over and
over I found bugs, sometimes subtle ones, sometimes not so subtle.  I found
bugs in all kinds of places, notably in designs that had passed all of my
test benches: &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;my prefetch and
cache&lt;/a&gt;, &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;my
CPU&lt;/a&gt;,
my SDRAM controller,
&lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;my SD-Card controller&lt;/a&gt;, &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;an
FFT&lt;/a&gt; and much more.  Indeed, I’ve
since found so many bugs using formal verification, that I’m not sure I could
go back to what I was doing before–I no longer trust my ability to write
a test bench that would be “good enough”.&lt;/p&gt;

&lt;p&gt;This has also made the blog quite unique: In a world where no one discusses
hardware bugs, where bugs get quietly swept under the rug, I was discussing
bugs in my own work.&lt;/p&gt;

&lt;p&gt;Yes, I suppose the verse above is worth repeating.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When pride cometh, then cometh shame: but with the lowly is wisdom.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/pro/11/2&quot;&gt;Prov 11:2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;formal-verification-meets-axi&quot;&gt;Formal Verification meets AXI&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 2.  AXI uses 5 channels, any of which can stall&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While most of my designs used a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;, every now and
again &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;I needed something using
AXI&lt;/a&gt;.  So, back in late
2018, I started building a set of formal properties that could be used to
verify an AXI component–much like the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal properties I’d already used for
verifying my Wishbone
components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with any project, I started off simple and just looked at
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;.  Unlike the full
AXI protocol, AXI-lite doesn’t have nearly as many signals to it, and so it
was fairly easy to work with.  I began simply  with the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/doc/busprops.pdf&quot;&gt;four basic bus
properties&lt;/a&gt;
I had learned to use when working with
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Following a reset, everything should return to idle.&lt;/li&gt;
  &lt;li&gt;When a request is stalled, its details shouldn’t be changed&lt;/li&gt;
  &lt;li&gt;There shall be no responses without prior requests, and&lt;/li&gt;
  &lt;li&gt;All requests get responses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are pretty basic, and in the case of
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;
they weren’t all that hard to write out.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 3.  Xilinx&#39;s 2016.3 AXI-lite demonstration design drops write acknowledgments.  Fixed by 2018.3&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-write-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then looked around for a working design to try my new properties on.  It
didn’t take too long before I found &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;Xilinx’s demonstration
designs&lt;/a&gt;.  Much to
my surprise, I found bugs.  The core would drop transaction responses,
as shown in Fig’s 3 and 4 where, with just a little bit of back pressure,
the second request’s response would get dropped.&lt;/p&gt;

&lt;p&gt;The presumption, of course, was that my brand-new, untested &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal bus
properties&lt;/a&gt;
were broken.  This would be the only sensible conclusion.  The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx
design&lt;/a&gt;
I was trying to verify had been around for years.  It had been used by many
Xilinx customers.  Indeed, you’d expect the bugs to have been worked out of
them by the time I started working with them.&lt;/p&gt;

&lt;p&gt;So I dug into the demonstration designs to see what was going on.  Again to
my surprise, I was able to verify that the bugs the formal tool found
were indeed valid.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 4.  Xilinx&#39;s 2016.3 demonstration AXI-Lite drops read acknowledgments.  Bug remains in 2019.1&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-read-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this took place in late 2018, this was really the start of what I’m
going to call, the &lt;em&gt;year when AXI met formal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My surprise at &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;finding bugs in Xilinx’s AXI-lite
core&lt;/a&gt; only intensified when
one of Xilinx’s engineer’s contacted me to explain that not returning a
response to a transaction wasn’t a bug, since the response might yet be
returned later.  Indeed, from just looking at Fig’s 3 and 4 you might not
catch that the trace ends in a &lt;em&gt;steady state&lt;/em&gt;!  However, if you looked at the
core, you could tell that the response had been dropped and would never be
returned.&lt;/p&gt;

&lt;p&gt;I then had to explain to them that this was their IP core I had found bugs in,
and not my own.  Unfortunately, this took more explaining than I was expecting.
Yes, I had modified the core: I had adjusted the white space, removed white
space from the ends of lines, and corrected spelling mistakes in the comments.
No, the logic wasn’t modified, etc.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5. The formal property file makes checking even the code of others easy&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/brken-axilite.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, from this point out things only got easier for me.  You see, now
that I had a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property file describing an AXI-lite
interface&lt;/a&gt;,
testing and checking other cores became routine.  With this property set,
plus the &lt;a href=&quot;https://www.symbioticeda.com/seda-suite&quot;&gt;Symbiotic EDA Suite&lt;/a&gt;,
I could now take any AXI-lite design, Verilog, VHDL, or even System Verilog,
posted to any forum, attach &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;my property
file&lt;/a&gt;,
and verify that the bus interface to such a core was (or was not)
working—even before I understood all of the details of how the core was
supposed to work.  Several cores were forwarded to me at that time to verify.
Almost all were  broken, and worse &lt;em&gt;&lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;most were broken in the same
way&lt;/a&gt;&lt;/em&gt;.  The most
notable exception was an &lt;a href=&quot;https://github.com/analogdevicesinc/hdl/hdl/library/common/up_axi.v&quot;&gt;Analog Devices
core&lt;/a&gt;–a
pleasant surprise along the way since it &lt;em&gt;just worked&lt;/em&gt; unlike the other cores
I had been checking.&lt;/p&gt;

&lt;p&gt;Now that I had &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;my own formal property
file&lt;/a&gt;,
I could do more than check the properties of others, I could now &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;build my own
AXI-lite slave core&lt;/a&gt;
as well.  At this point, it was easy to do.  Fig. 6 shows the kind of
throughput I was able to achieve on the write channel,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 6. AXI-lite demonstration, showing 100% write throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axil-demo-write.svg&quot;&gt;&lt;img src=&quot;/img/axil-demo-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and Fig. 7 shows the performance on the write channel.  In both cases, I was
able to achieve 100% throughput–shown at the end of the traces above.
This is in contrast to Xilinx’s demonstration cores which achieved only 50%
throughput in Vivado 2016.3 (less in 2018.3) and many of Xilinx’s AXI full IP
cores.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 7. AXI-lite demonstration, showing 100% write throughput&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axil-demo-read.svg&quot;&gt;&lt;img src=&quot;/img/axil-demo-read.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then turned my attention to building a full AXI4 property set, rather than
just the AXI-Lite version.&lt;/p&gt;

&lt;p&gt;AXI4 was much more of a challenge to formally verify, and that for a couple of
reasons.  First, the IDs make things challenging.  An AXI slave is allowed to
return transactions in any order, as long as all of the transactions associated
with a given ID are returned in order.  Second, the burst lengths are a
challenge.  In particular, it can be a challenge to verify that the &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt;
signal is properly set after two or more read address requests have been
accepted.  In any implementation, a FIFO would fix this kind of problem nicely.
Indeed, AXI processing and FIFOs work well together.  This of course led
to the third problem: verifying properties of the output of a
FIFO can be quite a challenge.&lt;/p&gt;

&lt;p&gt;When designing an AXI component, these various constraints aren’t really all
that hard to deal with.  The various transaction information may be placed
into FIFOs within the slave, and dealt with accordingly–but how shall these
extra properties be handled in the context of &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;formal
induction&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;If you haven’t worked with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
before, you should at least know that
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
has its own particular challenges.  In particular, the formal engine will
start in the middle of time–with your design already in some state.  Only
your assertions and to some extent your assumptions will hold that state
consistent.   While it is possible to provide assertions to describe
every item in a FIFO, it’s typically an expensive and challenging thing to do.
But without doing this, it would be easy for the design and the formal
properties to get into an inconsistent state.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 20px&quot;&gt;&lt;caption&gt;Fig. 8. Xilinx&#39;s 2018.3 AXI4 demonstration design didn&#39;t guarantee the right return ID&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axifull-rdid.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With some help from Clifford, I managed to put a set of AXI properties
together.&lt;/p&gt;

&lt;p&gt;As before, I first turned to one of &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demonstration
cores&lt;/a&gt; to test my
properties.  Again, to my surprise, &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s demonstration AXI4 (full) IP was
also broken&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, it didn’t guarantee the right packet ID would be returned on either
read (Fig 8) or write channels.  Second, the write channel couldn’t handle
backpressure as shown in Fig. 9.&lt;/p&gt;

&lt;p&gt;This left me somewhat perplexed.  &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;How could such example designs have been
broken for so long&lt;/a&gt;?
Indeed, Xilinx was using their examples in all of their training material.
Surely these examples would’ve been important for them to get right?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Xilinx&#39;s core can&#39;t handle backpressure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-bvalid-fail.svg&quot;&gt;&lt;img src=&quot;/img/axifull-bvalid-fail.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After a bit of digging, I discovered reports of AXI designs that would hang
dating back several years.  Customers trusted Xilinx’s demo designs, and so
believed the bugs were elsewhere–but then struggled to find the problem
that was causing their design to lock up.  Forum moderators typically blamed
customer designs, since no one was able to reproduce the bugs in a test-bench.
Not only that, but not all interconnect configurations or transaction
combinations would trigger the bugs.  Many of the more common interconnect
configurations wouldn’t trigger the bugs at all.  However, if you then
switched configurations, the bug would get triggered and you’d end up looking
in the wrong place.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 10. Xilinx&#39;s 2018.3 AXI4 demonstration design checks for WLAST without also checking for WVALID.  As a result, WREADY gets dropped before the transaction is complete&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axifull-wlast.svg&quot;&gt;&lt;img src=&quot;/img/axifull-wlast.svg&quot; alt=&quot;&quot; width=&quot;490&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then discovered that Xilinx would &lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;delete forum posts of dissatisfied
customers, or of posters who would complain of broken
infrastructure&lt;/a&gt;.  Indeed,
Fig. 11 shows a comment recommending the use of formal methods, the only
method that has so far found these sorts of bugs, that Xilinx deleted from
their forums.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 11. Xilinx deletes posts that would lead you to their bugs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/xilinx-deleted-recommending-formal-tools.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;No wonder why the bugs went so long without ever getting fixed.&lt;/p&gt;

&lt;p&gt;During this time, I had the opportunity to speak with Xilinx’s representatives
as well.  Thankfully, they (eventually) acknowledged the faults in their
demonstration cores.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 12. Xilinx&#39;s core checks for WLAST without also checking for WVALID&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/xilinx-demarco-acknowledges.png&quot;&gt;&lt;img src=&quot;/img/tweets/xilinx-demarco-acknowledges.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Xilinx’s explanation was that these “IP Packager” cores, the ones I call
their demonstration cores, came from an uncertain open source origin and
were never placed under Xilinx configuration management, and so they were
never verified along with the cores Xilinx considers their IP.  I was then
assured that Xilinx’s proper IP cores would never have these problems.
Those were verified by a “best in class” verification methodology (not formal)
every night, so I could rest assured that these other cores were bug free.
No, this “best in class” verification methodology did not use their
AXI VIP.  (I asked.)  Apparently, they didn’t even trust their own Verification
IP for this purpose.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 13. Intel&#39;s demo core also checks WLAST without also checking WVALID and WREADY&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axi-intel/axi-intel-wlast.svg&quot;&gt;&lt;img src=&quot;/img/axi-intel/axi-intel-wlast.svg&quot; alt=&quot;&quot; width=&quot;490&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I didn’t stop with Xilinx, however.  I checked out Intel’s demonstration core
too.  This one was an AXI3 core, and so not quite the type of AXI4 core my
properties had been built to handle.  On the other hand, if you limited the
proof to looking at one ID only, then it wasn’t hard to use the same properties
for both.&lt;/p&gt;

&lt;p&gt;Just like Xilinx’s demonstration core, Intel’s was broken as well–in multiple
places.  Fig. 13 shows a burst request, attempting to send &lt;code class=&quot;highlighter-rouge&quot;&gt;AWLEN+1&lt;/code&gt; or two
words of data, but where &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; is set high before the second &lt;code class=&quot;highlighter-rouge&quot;&gt;WDATA&lt;/code&gt; element
was received.  Not only that, &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt; was dropped.  Like the Xilinx bugs
above, this would likely cause the design to freeze.&lt;/p&gt;

&lt;p&gt;Nor was this the only bug.  Fig. 14 shows an example where just a little bit
of back-pressure from the first burst would cause Intel’s core to drop the
second response.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Intel&#39;s demo core can&#39;t handle backpressure on BREADY either&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/axi-intel/axi-intel-bvalid.svg&quot;&gt;&lt;img src=&quot;/img/axi-intel/axi-intel-bvalid.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The story didn’t stop there, however.  Now that I had a formal property set
to describe AXI4 transactions, I could verify just about any AXI4 interface.
Doing so was as easy as creating a wrapper for the design in question, attaching
the formal property set and the core in question to the wrapper, and then
running the formal tools.  Running the test rarely required more than a lot
of typing.&lt;/p&gt;

&lt;p&gt;As an example, I recently applied the
&lt;a href=&quot;https://www.symbioticeda.com/seda-suite&quot;&gt;Symbiotic EDA Suite&lt;/a&gt;,
to &lt;a href=&quot;https://www.xilinx.com/products/intellectual-property/axxi_ethernetlite.html&quot;&gt;Xilinx’s AXI Ethernet-Lite IP
core&lt;/a&gt;.  Here’s what I discovered:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Contrary to &lt;a href=&quot;/doc/axi-spec.pdf#page=41&quot;&gt;spec&lt;/a&gt;, Xilinx’s
RVALID logic requires RREADY to be set&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 15. Xilinx&#39;s Ethernet-Lite, RREADY depends upon RVALID&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/xilinx-axi-ethernetlite-axi_rvalid.png&quot;&gt;&lt;img src=&quot;/img/xilinx-axi-ethernetlite/axi_rvalid.png&quot; alt=&quot;&quot; width=&quot;511&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;This means that the design will hang if the interconnect doesn’t hold
RREADY high during any read request&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 16. Xilinx&#39;s Ethernet-Lite, reads will never set RVALID if !RREADY&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/xilinx-axi-ethernetlite/axi_rvalidtrace.png&quot;&gt;&lt;img src=&quot;/img/xilinx-axi-ethernetlite/axi_rvalidtrace.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Not only will the design hang waiting for the master to raise &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt;, but
it will also accept new requests during this time.  The resulting returns
might then have the wrong &lt;code class=&quot;highlighter-rouge&quot;&gt;RID&lt;/code&gt;.  Fig. 17, for example, shows a request
of length &lt;code class=&quot;highlighter-rouge&quot;&gt;ARLEN+1&lt;/code&gt; or one data value using ID &lt;code class=&quot;highlighter-rouge&quot;&gt;3&#39;b101&lt;/code&gt;.  The response
then comes back with an &lt;code class=&quot;highlighter-rouge&quot;&gt;RID&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;3&#39;b100&lt;/code&gt;–an error, since the &lt;code class=&quot;highlighter-rouge&quot;&gt;3&#39;b100&lt;/code&gt;
response needed &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h91&lt;/code&gt; values before getting a return with &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; set.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 17. Xilinx&#39;s Ethernet-Lite, reads will never set RVALID if !RREADY&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-axi-ethernetlite/axi_rid.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Returns might even be given the wrong &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt;.  While Fig. 17 hinted at this
problem, you can see it clearly in Fig. 18 below.  In this case, two requests
are made for &lt;code class=&quot;highlighter-rouge&quot;&gt;ARID=3&#39;b000&lt;/code&gt;.  The first request is for a single beat, the
second for &lt;code class=&quot;highlighter-rouge&quot;&gt;1+8&#39;h3E&lt;/code&gt; beats.  However, when the core responds to the first
request, &lt;code class=&quot;highlighter-rouge&quot;&gt;RLAST&lt;/code&gt; is still low.  The cause?  Primarily the simple fact that
this core can’t handle backpressure.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 18. Xilinx&#39;s Ethernet-Lite, reads will never set RVALID if !RREADY&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-axi-ethernetlite/axi_rlast.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;If all of that wasn’t bad enough, writes accepted at the same time reads
are accepted will &lt;em&gt;write their values to the address given on the read
channel.&lt;/em&gt;  You can see this by examining the code from their design.
If you want to check your own install, check out the
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_ethernetlite_v3_0/hdl/axi_ethernetlite_v3_0_vh_rfs.vhd&lt;/code&gt; file in your
Vivado &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;INSTALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/data/ip/xilinx/data/ip/xilinx/axi_ethernetlite_v&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/hdl&lt;/span&gt;&lt;/code&gt;
directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 19. Xilinx&#39;s Ethernet-Lite, reads will never set RVALID if !RREADY&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/xilinx-axi-ethernetlite/axi-addr.png&quot;&gt;&lt;img src=&quot;/img/xilinx-axi-ethernetlite/axi-addr.png&quot; alt=&quot;&quot; width=&quot;746&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;To keep this from happening, their design prohibits reads during writes and
writes during reads.  The only problem is, they never check for read and
write requests being made on the same clock cycle.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 20. Xilinx&#39;s Ethernet-Lite, doesn&#39;t keep AWVALID &amp;amp; ARVALID from both starting accesses at the same time&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/xilinx-axi-ethernetlite/awready_arready.png&quot;&gt;&lt;img src=&quot;/img/xilinx-axi-ethernetlite/awready_arready.png&quot; alt=&quot;&quot; width=&quot;915&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Apparently, Xilinx’s professional “best in class” AXI property checker
doesn’t include a formal property check.  Just like my own &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;first experiences
with formal methods&lt;/a&gt;,
they’ve now been burned by designs that passed a test bench without being
specification compliant.&lt;/p&gt;

&lt;p&gt;I’ve also applied formal methods to their &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;Block RAM
controller&lt;/a&gt;.  Along the way I discovered that it
could only handle reads or writes, never both at the same time–despite the
fact that AXI has channels for both.  (This seems like a common theme, no?)
Not only that, but &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;my own example
design&lt;/a&gt; achieved better
throughput on single channels.  Here’s their best block RAM read performance,
requiring &lt;code class=&quot;highlighter-rouge&quot;&gt;N+3&lt;/code&gt; clocks to read &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; elements.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 21. Xilinx&#39;s block RAM controller, requires N+3 clocks to read N elements&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-bram-ctrl/read-burst.png&quot; alt=&quot;&quot; width=&quot;746&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Poor burst performance wasn’t limited to reads, but also affected the write
channel as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 22. Xilinx&#39;s block RAM controller, requires N+3 clocks to read N elements&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/xilinx-bram-ctrl/write-burst.png&quot; alt=&quot;&quot; width=&quot;746&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s now think this through.  These bugs were found within just a few of
Xilinx’s IP cores where they’ve publicly posted their design code.  How many
bugs would you now expect from IP that hasn’t been posted publicly?&lt;/p&gt;

&lt;p&gt;This is where and why open source becomes so important.  When the design source
is open, you can verify the existence of any bugs on your own.&lt;/p&gt;

&lt;p&gt;To this end, I’ve also managed to verify and demonstrate several &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;IP cores of
my own&lt;/a&gt; using this AXI4 property set as
well:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;An AXI Crossbar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data movers:
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximm2s.v&quot;&gt;AXIMM2S&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;AXIS2MM&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;These two are my own.  They bare no internal resemblance to Xilinx’s
(encrypted) data mover cores–or shall I say they bare no resemblance that
I am aware of.&lt;/p&gt;

    &lt;p&gt;No, I haven’t verified Xilinx’s data movers as either working on not.
Unlike their data movers, 1) these two cores work within Verilator, and
2) they can both achieve a 100% AXI throughput.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;An AXI to AXI-lite
bridge&lt;/a&gt;.
Better yet, an AXI to AXI-lite bridge that gets 100% throughput–meaning you
can write an AXI-lite slave that can still process AXI transactions without
slowing down.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 23. Read performance of my own AXI to AXI-Lite bridge&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/axi2axil-read-burst.png&quot; alt=&quot;&quot; width=&quot;940&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axim2wbsp.v&quot;&gt;An AXI to Wishbone bridge&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;A Wishbone to AXI bridge&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;An AXI
Firewall&lt;/a&gt;,
which can detect any of the bugs discussed above, forcing
a slave to either be compliant or to be reset.  As a special bonus, the
slave can be reset and re-integrated into the design–without either hanging
or propagating any non-compliant responses upstream.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;None of these insights would’ve been possible without either the
&lt;a href=&quot;https://www.symbioticeda.com/seda-suite&quot;&gt;Symbiotic EDA Suite&lt;/a&gt;,
or the formal AXI4 property set for verifying AXI cores.&lt;/p&gt;

&lt;h2 id=&quot;the-new-tutorial&quot;&gt;The New Tutorial&lt;/h2&gt;

&lt;p&gt;In the middle of all of this, I also built a &lt;a href=&quot;/tutorial&quot;&gt;beginners Verilog
tutorial&lt;/a&gt;.  My work on this
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
started in 2018, although it took until May of 2019 for me to finish it.  The
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
was initially intended to be something that could be used as a set of
lecture slides for a class.  As a result, it consists of a series of PDF
files and some partially completed (and deliberately broken) homework exercises.&lt;/p&gt;

&lt;p&gt;Unlike many other approaches, my own approach doesn’t teach the full Verilog
test-bench syntax.  Instead, I chose to use Verilator and C++ design wrappers.
My reason was simply due to the fact that I’d seen so many students get
confused when attempting to synthesize what should’ve been test-bench only code.&lt;/p&gt;

&lt;p&gt;The second big difference with my approach was that I taught how to apply
formal verification to every design, starting in lesson three.&lt;/p&gt;

&lt;p&gt;The third big difference was that I tried to be hardware agnostic.  All you
needed was a simulator–in this case, Verilator.  As a bonus, if you had an
FPGA, any FPGA with nothing more than serial port, a button (or switch),
and several LEDs, you could build all of the designs for your board.  Indeed,
I avoided proprietary design components like the plague–in order to keep the
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; fully generic.&lt;/p&gt;

&lt;p&gt;The course has been well received, albeit with caveats:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Students with some Verilog background have balked at my liberal usage of
C++ and Makefiles.  Why, they’ve asked, should they be required to learn
a new language?  This is understandable.  On the other hand, students with
more of a software background have likely felt quite at home with this
approach.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since the rest of the industry uses Verilog test benches (or SystemVerilog,
or VHDL …), the &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
has often left students either without this valuable skill
or wondering how they should be using it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since I used Verilator and the open version of
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
for all of the projects, there was no ability to add a parallel VHDL
tutorial.  Many students have asked for one.  This is currently something
that I am unable to provide using free tools.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because I used PDF files, I can’t track downloads.  This makes it hard to
know if students are really interacting with the
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; itself, or perhaps just the
formal verification courseware slides that are further down on the same
page.  I suppose it doesn’t matter, both would be good things, I’d just
love to know and understand more about my readers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, several individuals have asked for a course that goes into the next
step–an &lt;a href=&quot;/blog/2019/08/16/intermediate.html&quot;&gt;intermediate design
course&lt;/a&gt;.  Such a
course would teach design in the context of a system with either a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
or an AXI-Lite internal bus.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 24. Proposed intermediate tutorial structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/im-tutorial/tut-intermediate.svg&quot;&gt;&lt;img src=&quot;/img/im-tutorial/tut-intermediate.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At this point, however, my world &lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;
domination plans have gotten slowed down.  Specifically, I want my
&lt;a href=&quot;/blog/2019/08/16/intermediate.html&quot;&gt;intermediate design
tutorial&lt;/a&gt;
to remain vendor agnostic–while still being useful on SOC (FPGA+ARM) chips.
That means that the
&lt;a href=&quot;/blog/2019/08/16/intermediate.html&quot;&gt;tutorial&lt;/a&gt; will need to
teach students how to connect bus components to a design using only open
source tools.&lt;/p&gt;

&lt;p&gt;As of today, I think I’ve finally got
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; lined up for that purpose.
It now has an (untested, and quite likely buggy) &lt;a href=&quot;https://github.com/ZipCPU/autofpga/tree/be56554f65c84a7bed96bec61c2224e53d39c0e4&quot;&gt;development
branch&lt;/a&gt;
that supports not only &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
(pipeline)&lt;/a&gt;,
but also AXI-lite and AXI–with an appropriate set of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;crossbars, bridges,
and bus simplifiers&lt;/a&gt; to make certain
things work together properly.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 25. Simplifying SOC component development using Wishbone&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/zynqsoc-axiwb.svg&quot;&gt;&lt;img src=&quot;/img/zynqsoc-axiwb.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord is willing&lt;/a&gt;,
I look forward to finally getting some of the lessons associated with this
course written in 2020.&lt;/p&gt;

&lt;h2 id=&quot;viewership-in-2019&quot;&gt;Viewership in 2019&lt;/h2&gt;

&lt;p&gt;With all that background aside, it’s now time to turn our attention to some
statistics from 2019.  Care to see how well the blog has done?  As you can
see from the chart below, the ZipCPU blog has really taken off this last year.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 26. 2019 ZipCPU Page Views&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/2019-pageviews.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Last year, the blog had 183,281 page views.  This year, we’ve had 332,735 page
views.  Readership is definitely up.&lt;/p&gt;

&lt;p&gt;Even better, the blog has gone from a maximum of 647 page views per day within
a week, shown on the far left of Fig. 26 above, to 1,984 page views in one day
during one week in December.  This is nearly a three-fold increase in the
number of page views.&lt;/p&gt;

&lt;p&gt;If you are new to the blog, then, welcome!&lt;/p&gt;

&lt;p&gt;That said, if you want to sell me web software to help my blog get
noticed by the big search engines, then No, Thank you.  The blog is doing
quite nicely on its own.&lt;/p&gt;

&lt;p&gt;Another thing to notice that’s fascinating about this chart is that most of
the page views take place between Monday and Friday.  This tells me that the
ZipCPU blog isn’t just read by hobbyists–apparently the professionals
find this information quite relevant as well.&lt;/p&gt;

&lt;p&gt;Welcome, professionals!&lt;/p&gt;

&lt;p&gt;Third, you’ll notice that readership slowed somewhat during June and July.
Initially, I attributed this to the fact that I was working on so many
contracts that it was difficult to write new articles.  Now, looking over the
months since then, I’m not so sure.  Instead, I’m more tempted to believe that
this slump is due to the end of the school year and either students not
reading the articles, or professionals going on vacation.&lt;/p&gt;

&lt;p&gt;Finally, I think that in many ways the reason why the blog took off this year
is because of my AXI work above.  I was pleasantly surprised to see how many
hits the various AXI articles received, as I’ll discuss in the next section.&lt;/p&gt;

&lt;h2 id=&quot;top-articles-written-in-2019&quot;&gt;Top Articles Written in 2019&lt;/h2&gt;

&lt;p&gt;Let’s now look at some of the most popular articles from 2019.  As we did
last year, I’ll treat these as a top ten list, and work my way from number
ten (least popular) down to number one (most popular).  I’ll also continue
my tradition of splitting the lists into two.  The first list will consist
of the most popular articles &lt;em&gt;written&lt;/em&gt; in 2019, and then in the next section
we’ll look at a list of the most popular articles over all based upon what
was &lt;em&gt;viewed&lt;/em&gt; in 2019.&lt;/p&gt;

&lt;p&gt;I’ll start with two honorable mentions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/formal/2019/09/06/axi-story.html&quot;&gt;AXI Verification, the story so far&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;While this article didn’t quite break into the 2019 top ten, to me it tells
the &lt;em&gt;story&lt;/em&gt; of what’s been going on, told in a way that even a manager might
understand it.  In short, user after user has tried to build an AXI
component, likely following the demonstration guides given them by their
vendor, only to find that their design will suddenly freeze for a reason
they can’t seem to fathom.&lt;/p&gt;

    &lt;p&gt;The fact that these bugs were finally found using formal methods should
be a lesson to all.&lt;/p&gt;

    &lt;p&gt;This article had 1,018 page views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/formal/2019/08/03/proof-duration.html&quot;&gt;Just how long does a formal proof take to
finish?&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A second article to miss the top ten was this neat one on proof durations.
Since I’ve now performed and maintain nearly a thousand proofs, it’s easy
to draw some statistics from them.  Surprisingly, as this article
demonstrates, formal proofs tend to be fairly fast overall–something
worth remembering.&lt;/p&gt;

    &lt;p&gt;Of course, the statistic might also be biased by the fact that I always use
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.
Without
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
it’s hard to know how much formal verification is enough.  With it,
proofs can confidently be shortened to a minimum length.&lt;/p&gt;

    &lt;p&gt;That said, I’ll let you read more about this yourself if you’d like.&lt;/p&gt;

    &lt;p&gt;This article had 1,130 page views.  It is currently the #1 result of
a &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; search on &lt;a href=&quot;https://duckduckgo.com/?q=how+long+does+a+formal+proof+take&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;how long does a formal proof
take&lt;/a&gt;.
I would share Google search result rankings, except that Google seems to
know what I’m looking for even before I type anything.  This is why I’m
posting &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo&lt;/a&gt; search result rankings.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2019/02/04/debugging-that-cpu.html&quot;&gt;Debugging that CPU&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is a fascinating article because it walks through the steps I went
through to find a fault within a design where the ZipCPU suddenly froze
mid-program.  It walks through and describes the various tools which can be
used to debug a CPU design, and then discusses how they did (or did not)
help in this case.&lt;/p&gt;

    &lt;p&gt;The bug in question was a particularly ugly one too–involving a race
condition between the interrupt line and the compressed instruction word
decoder.  In the end, a watchdog timer connected to an internal logic
analyzer was used to provide evidences of the bug, evidences which were
then be placed into a formal verification context to find the details
surrounding what caused the bug.&lt;/p&gt;

    &lt;p&gt;Looking back over the article today, it’s a fond memory and a fun read.&lt;/p&gt;

    &lt;p&gt;This article had 1,184 page views.  It is currently the #1 result of
a &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; search on &lt;a href=&quot;https://duckduckgo.com/?q=debugging+a+cpu&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Debugging a
CPU&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/06/28/genclk.html&quot;&gt;Breaking all the rules to create an arbitrary clock signal&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;One of the first &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;rules I give to beginning digital
designers&lt;/a&gt; is
that you should never, ever, transition your logic on the positive (or
negative) edge of something that isn’t a bonafide clock signal.  Never.
Just … don’t do it.  There be dragons there.&lt;/p&gt;

    &lt;p&gt;In this article, however, I poke into the issue to see if a clock can be
generated at an arbitrary clock rate using logic and an OSERDES.  Sure
enough, I demonstrate FPGA-based clock generation with sub-Hz resolution
and less than &lt;code class=&quot;highlighter-rouge&quot;&gt;1ns&lt;/code&gt; phase noise.&lt;/p&gt;

    &lt;p&gt;Yes, folks, it can be done!  Even better, the design isn’t all that hard
to understand either.&lt;/p&gt;

    &lt;p&gt;This article had 1,233 page views.  It is currently the #1 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt;
hit for &lt;a href=&quot;https://duckduckgo.com/?q=arbitrary+clock+generator+example&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;arbitrary clock generator example&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;Lessons learned while building Crossbar
Interconnects&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Most of the designs I’ve reviewed on either
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent’s&lt;/a&gt;
or &lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s&lt;/a&gt;
forums include some form of an AXI Interconnect within them.  Indeed, my
own Intel Cyclone-V design starts with the AXI Interconnect output from
the ARM SoC.  These are very vendor dependent interconnects.  They are
proprietary, encrypted, and cannot run under Verilator.&lt;/p&gt;

    &lt;p&gt;Building my own interconnect was therefore a necessary part of building
a vendor independent infrastructure.  Sure, I hear the question now, but
aren’t you a vendor?  I suppose you might say that.  However, I’ve posted
the design files for my (unencrypted) interconnect(s) online–so feel free
to use them as you need them.&lt;/p&gt;

    &lt;p&gt;Sadly, an interconnect is really too complicated for a blog article.  So,
instead, this article discusses the design of an interconnect in broad brush
terms so you can see how one might work and what the various internal
components might look like.&lt;/p&gt;

    &lt;p&gt;This article had 1,428 page views.  It is currently the #2 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt;
hit for &lt;a href=&quot;https://duckduckgo.com/?q=crossbar+interconnect&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;crossbar interconnect&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;Building a Universal QSPI Flash
Controller&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;After building about four other flash controllers, it was time to see if I
could build one that might work for all of my designs, across all of the
various flash components I’ve worked with, while maintaining high speed.&lt;/p&gt;

    &lt;p&gt;This article, one of my longer ones, goes through what it took to do this,
while also describing how design bloat took hold to make this
one-size-fits-all design more complex than a special purpose controller
would have been.  Indeed, at one point I named this a piece of &lt;em&gt;Franken-IP&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;Of course, the devil lies in the details.  Since writing the article, I was
disappointed to discover that the core didn’t support a flash design that
had neither DDR support for the flash clock, nor XiP support.  Of course,
this didn’t happen on any of &lt;em&gt;my&lt;/em&gt; hardware …&lt;/p&gt;

    &lt;p&gt;This article had 1,696 page views.  It is currently the #4 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt;
hit for &lt;a href=&quot;https://duckduckgo.com/?q=crossbar+interconnect&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;QSPI flash controller&lt;/a&gt;,
behind (among other things) &lt;a href=&quot;https://opencores.org/projects/qspiflash&quot;&gt;my own QSPI flash controller
core&lt;/a&gt; on
&lt;a href=&quot;https://opencores.org&quot;&gt;OpenCores&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Examining Xilinx’s AXI Demonstration
Core&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;As mentioned above, one of my first tasks after building a formal property
set for the full AXI protocol was to verify a core using it.  This article
discusses all of the bugs I found when verifying Xilinx’s AXI demonstration
IP core.&lt;/p&gt;

    &lt;p&gt;This article had 1,873 page views.
It is currently the #16 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=xilinx+axi+slave&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Xilinx AXI
slave&lt;/a&gt;,
falling behind my own article on &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;Building the perfect AXI4
slave&lt;/a&gt;
at #11.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;Building a Skid Buffer for AXI
Processing&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;AXI has a particular requirement that there can be no combinatorial paths
between AXI inputs and outputs.  This applies most painfully to the &lt;code class=&quot;highlighter-rouge&quot;&gt;xREADY&lt;/code&gt;
wires.  The easy way around this is to use a &lt;em&gt;skidbuffer&lt;/em&gt;, as discussed in
this article.  Indeed, creating a skid buffer makes building AXI logic so
easy that I’ve since been converting all of my designs so that they use them
explicitly.  If you want to see an example of this, check out the
data mover cores:
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/aximm2s.v&quot;&gt;AXIMM2S&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axis2mm.v&quot;&gt;AXIS2MM&lt;/a&gt;.
These both have a skidbuffer based AXI-lite interface–one that was almost
as easy as a &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone
interface&lt;/a&gt; to
write.&lt;/p&gt;

    &lt;p&gt;This article had 2,003 page views.
It is currently the #1 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for
&lt;a href=&quot;https://duckduckgo.com/?q=skidbuffer&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;skidbuffer&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;The Most Common AXI Mistake&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;After verifying Xilinx’s AXI-lite and AXI (full) demonstration cores, as
well as Intel’s cores, and after looking over several examples of on-line
cores, it quickly became apparent that the same bug was being replicated
across many designs.  This article discusses that bug, showing how it may
easily be spotted, and how to adjust your design so it doesn’t have that
bug.&lt;/p&gt;

    &lt;p&gt;This article had 2,436 page views.
It is currently the #1 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for
&lt;a href=&quot;https://duckduckgo.com/?q=axi+mistakes&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;AXI mistakes&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;Building the Perfect AXI4 Slave&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;It’s not enough to just criticize the IP of others, at some point you need
to generate your own.  This article discusses how to generate an AXI4
slave.  It also introduces my own goal for AXI based designs: 100%
throughput without stalling between requests.  This is better than the
&lt;code class=&quot;highlighter-rouge&quot;&gt;N+3&lt;/code&gt; (burst length plus 3 clocks) performance of &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_bram_ctrl/v4_0/pg078-axi-bram-ctrl.pdf&quot;&gt;Xilinx’s block RAM
controller&lt;/a&gt;,
while also offering concurrent read and write performance.&lt;/p&gt;

    &lt;p&gt;Since writing this example, I’ve added &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;several more of my designs to this
mix&lt;/a&gt;–all with the same design goal:
100% throughput across burst boundaries.  I’ll admit, getting the data
movers to meet this standard was a challenge, but all very possible using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
together with the formal property set mentioned above.&lt;/p&gt;

    &lt;p&gt;Sadly, many new FPGA designers want to know how they can build AXI4
components as well.  Having read this article, they’ve often complained
that it is too difficult to understand.  At this point, I’m at a loss:
is my development really that complicated?  Or is the problem the simple
reality that the AXI protocol &lt;em&gt;is&lt;/em&gt; a complicated protocol?  Do I blame
Xilinx for choosing AXI, when other protocols such as
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
are so much simpler?  Or should I blame a problem on unreasonable
expectations?&lt;/p&gt;

    &lt;p&gt;Let’s face it: AXI is hard.  Building bug-free AXI components is not
something many &lt;em&gt;professionals&lt;/em&gt; are good at, much less brand new students
and hobbyists.  This should be well evidenced by AXI bugs listed above, bugs
that I found this year–even in code that had been verified by a professional
“best in class” AXI verification methodology.&lt;/p&gt;

    &lt;p&gt;What if I just want an example design I can start from?  Such a design is
provided by the article above.  Enjoy it!&lt;/p&gt;

    &lt;p&gt;This article had 3,417 page views.  It is currently the #31 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt;
hit for &lt;a href=&quot;https://duckduckgo.com/?q=example+axi+slave&amp;amp;t=canonical&amp;amp;ia=videos&quot;&gt;Example AXI Slave&lt;/a&gt;–behind
many other hits recommending that someone use one of &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s broken
designs&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;Using a Formal Property File to Verify an AXI-lite Peripheral&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;While technically not a 2019 article, my first AXI-lite article deserves an
honorable mention in this list.  This is the article that first pointed out
the bugs in Xilinx’s AXI-lite demonstration core.  It has been placed here
in rank order, where it would fall if it were 2019 article.&lt;/p&gt;

    &lt;p&gt;Unfortunately, my page views per year metric of articles written in the
same year doesn’t treat articles written late in the year fairly.  As a
result, this article didn’t score well in the few remaining days of year it
was written, and so &lt;a href=&quot;/blog/2019/01/01/top-ten.html&quot;&gt;didn’t make the list last
year&lt;/a&gt;.  An honorable
mention is therefore all the more appropriate for this article.&lt;/p&gt;

    &lt;p&gt;This article had 3,825 page views in 2019.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;Building a Custom yet Functional AXI-Lite Slave&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Holding the number two spot for the year among articles written this year,
is an article on building an AXI-lite slave core.  This follows from the
AXI-lite formal property set article that just received honorable mention,
and discusses how to build (and verify) an AXI-lite core.  This core is
special among many AXI-lite cores in that 1) it’s fully verified, unlike
the other examples out there, and 2) it can achieve 100% throughput on
both read and write channels.&lt;/p&gt;

    &lt;p&gt;Unfortunately, the name doesn’t do any justice to the article.  It’s not
a flashy name.  Of course you’d want to build a &lt;em&gt;Custom yet Functional&lt;/em&gt;
AXI-lite slave!  Who wouldn’t want to build such?  The name, however, stands
in contrast to Xilinx’s demonstration IP core which was clearly broken.&lt;/p&gt;

    &lt;p&gt;Since building this first design, I’ve had to build other AXI-lite designs,
such as those for my data movers discussed above.  Using the skidbuffers
made building these designs so much easier, that I may come back later and
rewrite this article showing how simple a full-featured AXI-lite slave
component can be to write.&lt;/p&gt;

    &lt;p&gt;This article had 4,241 page views.  It is currently the #4
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=example+axi-lite+slave&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Example AXI-lite
slave&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;Understanding AXI
Addressing&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Finally, in the number one spot, is an article on AXI addressing.  Unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
AXI has several extra addressing signals which can be used to capture the
width of a request.  Wires like &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE&lt;/code&gt;, for example, can be used to ensure
that AXI transactions can go through resizing modules without any loss
of information.&lt;/p&gt;

    &lt;p&gt;That said, all that extra functionality comes with a cost in terms of
complexity.  This article works its way through the design of a
“next-address” calculator that works across sizes, across unaligned address
requests, fixed, incrementing, or wrapped burst addressing and more.&lt;/p&gt;

    &lt;p&gt;This “next-address” calculator has since formed a core part of many of my
subsequent AXI designs.  With little more than the inclusion of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi_addr.v&quot;&gt;this
core&lt;/a&gt;, it’s
easy to create a core with “Narrow Burst” support.&lt;/p&gt;

    &lt;p&gt;This article had 4,665 page views.
It is currently the #1 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=axi+addressing&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;AXI
Addressing&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;top-articles-viewed-in-2019&quot;&gt;Top Articles Viewed in 2019&lt;/h2&gt;

&lt;p&gt;Let’s now turn from the most popular articles &lt;em&gt;written&lt;/em&gt; in 2019, to the most
popular articles &lt;em&gt;viewed&lt;/em&gt; in 2019.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/gun-control.html&quot;&gt;Why more gun control won’t solve our
problems&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This blog is not about Gun Control.  It is about avoiding FPGA Hell through
proper design and verification.  While I have promised a certain number of
articles on Christianity and/or professional ethics, this doesn’t really fit
either category.  However, this particular article needs an honorable
mentions if for no other reason than the number of page views it
has received this year.&lt;/p&gt;

    &lt;p&gt;So how does an article on gun-control make its way to a blog on FPGAs?
It started on twitter.  As the conversation on twitter continued, it became
apparent that I would likely struggle to present my case one tweet at a time.
Worse, I found myself in the regrettable position of irritating my FPGA
twitter followers who weren’t interested in a discussion of gun policy.
Therefore, in order to try to make a graceful exit from this situation, I
wrote down my views and evidences into this article back in Feb 19, 2018.&lt;/p&gt;

    &lt;p&gt;Because the blog isn’t focused on gun control, I never linked to this article
anywhere but in a single tweet.  Today, this article comes in the
surprising #11 position of all time popular articles viewed in 2019.&lt;/p&gt;

    &lt;p&gt;This article had 5,459 page views in 2019.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;Minimizing FPGA Resource Utilization&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The Spartan 6 LX4 is a &lt;em&gt;small&lt;/em&gt; FPGA.  Digilent sold it as part of their
CMod S6 carrier module board.  My goal when purchasing this design was
to see if I could get the ZipCPU to run on this board.  Logic was
tight–there was no room a debug bus.  In spite of all of this,
the ZipCPU demonstrated the ability to run a multi-tasking system.&lt;/p&gt;

    &lt;p&gt;This article, coming in at #10, was all about what it took to get the logic
resource usage down low enough that the ZipCPU could successfully fit 
into this design.&lt;/p&gt;

    &lt;p&gt;This article had 5,637 page views in 2019.
It is currently the #1 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=minimizing+lut+usage&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;minimizing lut
usage&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;Using a CORDIC to calculate sines and cosines in an FPGA&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;CORDIC’s are common solutions used for generating sines and cosines within
an FPGA.  This particular article discusses the theory and math behind
building one, and getting it to work on an FPGA.&lt;/p&gt;

    &lt;p&gt;What’s not said or discussed here is that CORDIC’s are relatively expensive,
in terms of both computation and latency, especially when you want to get a
lot of bits of precision and hardware multiplies are available to you.  As
a result, I may come back to this topic and discuss how to generate a
better, cleaner, sinewave for less logic later.&lt;/p&gt;

    &lt;p&gt;For now, this article comes in at #9 for the most page views during 2019.&lt;/p&gt;

    &lt;p&gt;This article had 5,705 page views in 2019.
It is currently the #8 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=cordic+example&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;CORDIC
example&lt;/a&gt;.
Interesting enough, my &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;CORDIC repository on
Github&lt;/a&gt; is listed as the #10 hit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;Building a high speed Finite Impulse Response (FIR) Digital Filter&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;One of my earlier series articles was about filtering.  In that article set,
I presented the &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;basics of digital
filtering&lt;/a&gt;, and then
some basic filters.  I then showed &lt;a href=&quot;/dsp/2017/12/06/fastfir-tb.html&quot;&gt;how to verify that these filters
worked&lt;/a&gt;
using a &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;generic test bench
framework&lt;/a&gt;
coupled with Verilator.  The framework even went so far as to &lt;a href=&quot;/dsp/2017/11/22/fltr-response.html&quot;&gt;measure the
expected frequency response of the
filter&lt;/a&gt;, so you
could therefore measure both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;
cutoffs, as well as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt; depth.&lt;/p&gt;

    &lt;p&gt;This article was the first in the set of example filter implementations.&lt;/p&gt;

    &lt;p&gt;This article had 6,208 page views in 2019.
It is currently the #11 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=verilog+fir+filter&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Verilog FIR
filter&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;Simplest Sinewave Generator&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;How simple can sinewave generation be?  As simple as grabbing the top bit
of the phase input.  Want better than that?  Use a quick table lookup.
At just the cost of one 6-LUT per output bit, you can calculate a sinewave
with +/- 2.5-degree accuracy.&lt;/p&gt;

    &lt;p&gt;That’s not bad for something really simple, and the performance is often
good enough as well!&lt;/p&gt;

    &lt;p&gt;This article had 6,261 page views in 2019.
It is currently the #11 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=verilog+sinewave&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Verilog
sinwave&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;Building a Simple Logic PLL&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Digital data transmission requires a clock.  In &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;my own
experience&lt;/a&gt;, that
clock is often embedded within the data waveform itself and needs to be
recovered.  A PLL forms one common approach to this recovering such a clock.&lt;/p&gt;

    &lt;p&gt;There are a couple of ways to implement a PLL in logic.  The classic method
requires a CORDIC, a multiply, some filtering–and lots of clock ticks.
All this logic comes at a cost impacting the PLLs ability to quickly track
and lock to any incoming clock signal.&lt;/p&gt;

    &lt;p&gt;This article discusses a means of creating a PLL in logic but without
the sinewave generator or the multiply.  The result is a simple PLL,
using little more than adds and subtracts, but yet one that is still
very effective at clock tracking.  What the article doesn’t discuss is
the math required to get the tracking coefficients right.  I may yet come
back and explain that in a future article.&lt;/p&gt;

    &lt;p&gt;This article had 6,655 page views in 2019.
It is currently the #2 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=verilog+pll&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Verilog
PLL&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The one article that really pulls all of this site together is the
&lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;
article.  I’m listing it here as an honorable mention simply because I
don’t consider it to be one of my blog articles, but rather one of the
articles that the blog and the purpose of it.  That said, it’s still a
favorite and so it has earned it’s place here in my list.&lt;/p&gt;

    &lt;p&gt;This “article” had 6,919 page views in 2019.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/projects.html&quot;&gt;Projects&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A second honorable mention goes to my projects page.  This is where I offer
quick descriptions of &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;my various github projects&lt;/a&gt;,
in case there’s something you might be looking for.&lt;/p&gt;

    &lt;p&gt;This “article” had 7,386 page views in 2019.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/2017/06/21/looking-at-verilator.html&quot;&gt;Taking a New Look at Verilator&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Yes, I enjoy Verilator.  This article discusses why.  In particular, I enjoy
mixing O/S calls with my simulations–allowing me to &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;simulate serial ports
over TCP/IP&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;SD cards with files and file
systems&lt;/a&gt;, and even OLED or
&lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;VGA graphics&lt;/a&gt;.
Network ports remain on my “to-do” list.&lt;/p&gt;

    &lt;p&gt;This article goes over the basics of how to create a simulation using
Verilator, and how you can then debug your design from such a simulation.&lt;/p&gt;

    &lt;p&gt;This article had 7,466 page views in 2019.
It is currently the #6 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=verilator&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Verilator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;Getting the basic FIFO right&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;… and then there’s my FIFO article.  This was written before I started
using formal methods.  Since writing it, I’ve found so many bugs in my
FIFOs–first in the pointers, and then again in the data itself, so I no
longer trust either this article or the implementation within it.  Most
of these bugs surround reads while empty, or writes while full.&lt;/p&gt;

    &lt;p&gt;That said, I’m really going to need to come back and rewrite this FIFO
article properly, while also showing how to handle formally verifying
the FIFO.  Such a new article would follow the FIFO development in the
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;, so feel free to check that
lesson out if you want to see how to build a working FIFO in the meantime.&lt;/p&gt;

    &lt;p&gt;This article had 11,917 page views in 2019.
It is currently the #8 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=verilog+fifo&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Verilator
FIFO&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/2018/07/06/afifo.html&quot;&gt;Crossing clock domains with an Asynchronous
FIFO&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The Asynchronous FIFO article, on the other hand, is much better.  This
FIFO starts with Cliff Cummings’ asynchronous FIFO and then applies formal
methods to it.&lt;/p&gt;

    &lt;p&gt;I’ve since had the opportunity to revisit asynchronous FIFOs in order to
create my own implementation–separate and distinct from Cummings’.  Feel
free to check out this newer &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/afifo.v&quot;&gt;implementation
here&lt;/a&gt; if you
want to take a peek.  In particular, the proof runs a whole lot faster,
and I no longer insist that the write reset be released in a clock
synchronous fashion.  (You’ll still need to meet timing …)&lt;/p&gt;

    &lt;p&gt;This article had 12,009 page views in 2019.
It is currently the #8 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=asynchronous+FIFO&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Asynchronous
FIFO&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;Some Simple Clock-Domain Crossing Solutions&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The basics of crossing clock domains are fairly straightforward, and this
article works through how to handle them.  The article primarily discusses
the basic 2FF synchronizer, but also looks at how that 2FF synchronizer
can be used to create a cross-clock handshake.&lt;/p&gt;

    &lt;p&gt;This article had 13,530 page views in 2019.
It is currently the #2 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=clock+domain+crossing&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Clock Domain
Crossing&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tutorial/&quot;&gt;Verilog, Formal Verification, and Verilato Beginner’s Tutorial&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The number one web request across the entire ZipCPU blog during 2019 was for
my Verilog tutorial page.&lt;/p&gt;

    &lt;p&gt;I’d like to say of a certainty that this was due to the Verilog tutorial
itself.  Sadly, due to the fact that the tutorial is written as a set of
PDF files, and the fact that Google Analytics doesn’t track PDF viewing
very well, I have no idea whether these web hits are to which lesson, which
lesson might be confusing, or if these are to my formal courseware slides.&lt;/p&gt;

    &lt;p&gt;This may mean that I need to restructure this page in the future.&lt;/p&gt;

    &lt;p&gt;For now, I’ll let it simply mean that my tutorial page is well loved.&lt;/p&gt;

    &lt;p&gt;This page had 22,595 page views in 2019.
It is currently the #16 &lt;a href=&quot;https://duckduckgo.com&quot;&gt;duckduckgo.com&lt;/a&gt; hit for &lt;a href=&quot;https://duckduckgo.com/?q=verilog+tutorial&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Verilog
Tutorial&lt;/a&gt;,
and the #1 hit for &lt;a href=&quot;https://duckduckgo.com/?q=formal+verification+tutorial&amp;amp;t=canonical&amp;amp;ia=web&quot;&gt;Formal Verification
Tutorial&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The list isn’t quite accurate.  The actual web page receiving more page views
than any other was my &lt;a href=&quot;&quot;&gt;main index page&lt;/a&gt;.  Citing this
page seems like quoting usage statistics for words like “the”–it’s just not
that interesting.&lt;/p&gt;

&lt;p&gt;Many thanks to all for making 2019 a wonderful year on the ZipCPU Blog!
&lt;a href=&quot;https://www.blueletterbible.org/kjv/num/6/25&quot;&gt;May God bless your new year&lt;/a&gt;
with a &lt;a href=&quot;https://www.blueletterbible.org/kjv/phi/4/7&quot;&gt;peace that passes all
understanding&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Behold, we count them happy which endure. Ye have heard of the patience of Job, and have seen the end of the Lord; that the Lord is very pitiful, and of tender mercy.  (James 5:11)&lt;/em&gt;</description>
        <pubDate>Wed, 01 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2020/01/01/2019-in-review.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2020/01/01/2019-in-review.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Christmas Gospel</title>
        <description>&lt;p&gt;Surely I’m not the only one wondering whether there’s a message of Christ
left in this Christmas time of rampant commercialism, so with your indulgence
let’s take a moment to look back into the origins of Christmas.&lt;/p&gt;

&lt;p&gt;Before beginning, let me define a few terms.  The first term is “Jesus.”
Christmas celebrates the birth of Jesus, but why was he called “Jesus”?
The name “Jesus” comes from the Hebrew name Joshua.  It means savior or
deliverer, and brings back the memory of Joshua who was able to deliver
the Jewish people into the promised land–something Moses was forbidden to do.&lt;/p&gt;

&lt;p&gt;In the Christmas story, the young child is given the name Jesus.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And she shall bring forth a son, and thou shalt call his name JESUS: for he
shall save his people from their sins.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/1/21&quot;&gt;Matt 1:21&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How was He to save His people from their sins?  Hold that thought.&lt;/p&gt;

&lt;p&gt;The second term is Christ.  Contrary to popular conception, Christ was not
Jesus’ last name.  In the time of Jesus, family ties were denoted by naming who
someone’s father was.  For this reason, the Bible discusses how Jesus is both
the “Son of God” and the “Son of Man.”  No, the term “Christ” is transliterated
from the Greek word for the Hebrew Messiah–a type of king.  Unlike “Jesus”,
which is a &lt;em&gt;name&lt;/em&gt;, Christ is a &lt;em&gt;title&lt;/em&gt;.  Moreover, “Christ” isn’t just the term
for any King, it’s the term used to describe a very special King, prophesied by
God, and placed upon the throne by the Almighty Himself.  Unlike most Kings,
the Christ rules with the authority of the Almighty
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/18&quot;&gt;Matt 28:18&lt;/a&gt;).
To oppose the Christ is to oppose the Almighty Himself.&lt;/p&gt;

&lt;p&gt;That’s a special kind of King.&lt;/p&gt;

&lt;p&gt;The term king carries other connotations as well, often forgotten through time.
Unlike the United States, where the three pieces of power are separated into
three branches of government: an executive, judicial branch, and legislative
branch, a king holds the total authority of all three of these government
functions in his person.  A king is a lawgiver and a judge, as well as the
commander in chief of his people.  Further, unlike many modern national
leaders, kings are not elected.&lt;/p&gt;

&lt;p&gt;“Christ”-mas is therefore the celebration of the birth of this King.&lt;/p&gt;

&lt;p&gt;The story of Christmas, however, began thousands of years earlier.&lt;/p&gt;

&lt;h2 id=&quot;it-started-in-the-beginning&quot;&gt;It started in the Beginning&lt;/h2&gt;

&lt;p&gt;The first indication of a coming Christmas was revealed in the Garden of Eden,
way back at the very beginning of mankind.  Once God created man, He placed
man into this garden that God had planted
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/8&quot;&gt;Gen 2:8&lt;/a&gt;), instructing him
to tend and to keep it
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/15&quot;&gt;Gen 2:15&lt;/a&gt;).
God also commanded Adam that he was not to eat of the tree of the
knowledge of good and evil that was in the middle of the garden
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/9&quot;&gt;Gen 2:9&lt;/a&gt;),
“for in the day that thou eatest thereof thou shalt surely die.”
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/17&quot;&gt;Gen 2:17&lt;/a&gt;)
(This is a Hebrewism, &lt;a href=&quot;https://answersingenesis.org/death-before-sin/genesis-2-17-you-shall-surely-die/&quot;&gt;woodenly translated “in dying thou shalt surely
die”&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;God then had compassion upon man, noting that he was all alone in the world.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/18&quot;&gt;Gen 2:18&lt;/a&gt;)
He created Eve to be his helper on this earth.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/2/21&quot;&gt;Gen 2:21&lt;/a&gt;)
The serpent then tricked Eve through cunning into eating the forbidden fruit,
and Eve gave Adam the same fruit to eat as well.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/1-6&quot;&gt;Gen 3:1-6&lt;/a&gt;)
At this point, the judgment of God was certain upon them.  Their death was
sealed: they would spend the rest of their lives dying until they ultimately
and most certainly died.  The judgment was also so severe, that it passed
on to all of Adam’s offspring as well–all who shared
in his flesh.  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/5/12&quot;&gt;Rom 5:12&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;God then comes to chat with Adam, and gives him a chance to explain and
possibly defend himself.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/8-9&quot;&gt;Gen 3:8-9&lt;/a&gt;)
The discussion that follows is commonly
viewed as God’s judgment of Adam, but I might argue that Adam had already been
judged by the commandment that had been given to him.  In this conversation,
God offers several mollifying statements to try to keep the judgment from
being quite as bad as it might have been.  Among these statements, God curses
the serpent for deceiving Eve in the first place.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And the LORD God said unto the serpent, Because thou hast done this, thou art
cursed above all cattle, and above every beast of the field; upon thy belly
shalt thou go, and dust shalt thou eat all the days of thy life:
And I will put enmity between thee and the woman, and between thy seed and
her seed; it shall bruise thy head, and thou shalt bruise his heel.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/14-15&quot;&gt;Gen 3:14-15&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the often-overlooked first Gospel message of Christmas.&lt;/p&gt;

&lt;p&gt;The first key to this message are the two words, “her seed.”&lt;/p&gt;

&lt;p&gt;The biblical history talks often in the chapters and books that follow of
the seed of men.  This is a reference physically to the “sperm” of a man,
that then produces offspring.  But the &lt;em&gt;seed&lt;/em&gt; of a woman?  It’s never
mentioned again.  The entire concept of a woman having her own “seed” would
violate everything we understand of human reproduction.&lt;/p&gt;

&lt;p&gt;Rather, this was the first prophecy of Christ, requiring that Christ be born
of a woman without the seed (sperm) of a man involved.  Indeed, it requires
a virgin birth to be fulfilled.&lt;/p&gt;

&lt;p&gt;The serpent himself was later revealed to be Satan, also known as the Devil.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And he laid hold on the dragon, that old serpent, which is the Devil, and
Satan, and bound him a thousand years
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/rev/20/2&quot;&gt;Rev 20:2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second key to this message is that the woman’s seed would crush the head
of the serpent, while only allowing Satan the opportunity to strike a glancing
blow on “his heel”.  Satan’s doom was therefore first foretold here.&lt;/p&gt;

&lt;p&gt;In case you missed it, this passage also explains the reason and cause for
suffering in our world today.  Man sinned against God, and violated God’s
commandment.  Ever since then, Man has struggled under the punishment of the
Almighty God–a punishment wherein death grips a man early in his life and
draws him perpetually to the grave.  Indeed, from the day of our birth and
before, the process of this death has already started.&lt;/p&gt;

&lt;h2 id=&quot;the-coming-king&quot;&gt;The Coming King&lt;/h2&gt;

&lt;p&gt;While there are hints of the coming Christ elsewhere (for example,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/49/9&quot;&gt;Gen 49:9&lt;/a&gt;),
I’ll pick the story up again in the time of David.  David notices at one point
that he gets to dwell in a pleasant house, but God?  God dwelt in a tent at
the time known as the “Tabernacle”.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/2&quot;&gt;2 Sam 7:2&lt;/a&gt;)
This didn’t seem right to David, so he inquired about building a house
for God–something that would be more permanent than a tent.&lt;/p&gt;

&lt;p&gt;God’s full response is worth reading
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/4-17&quot;&gt;2 Sam 7:4-17&lt;/a&gt;), in which
he discusses the absurdity of David creating a house for the Almighty, but
let me focus on just a couple of verses of the message that the prophet
Nathan relays to David.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And when thy [David’s] days be fulfilled, and thou shalt sleep with thy
  fathers, I will set up thy seed after thee, which shall proceed out of
  thy bowels, and I will establish his kingdom.
He shall build an house for my name, and I will stablish the throne of his
  kingdom for ever.
I will be his father, and he shall be my son. If he commit iniquity, I will
  chasten him with the rod of men, and with the stripes of the children of
  men:
But my mercy shall not depart away from him, as I took it from Saul, whom I
   put away before thee.
And thine house and thy kingdom shall be established for ever before thee:
   thy throne shall be established for ever.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/12-16&quot;&gt;2 Sam 7:12-16&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Herein is a promise from God that David’s seed, i.e. one of his sperm or
more appropriately understood in context as one his offspring, shall be
established on the throne “for ever.”&lt;/p&gt;

&lt;p&gt;Think about this for a moment.&lt;/p&gt;

&lt;p&gt;“For ever.”&lt;/p&gt;

&lt;p&gt;Something would need to be done about the curse that fell upon Adam, for since
Adam all men die
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/15/22&quot;&gt;1 Cor 15:22&lt;/a&gt;).
This King on the other hand was to remain on the throne “for ever.”&lt;/p&gt;

&lt;p&gt;God also states, rather strangely, that “I will be his father, and he shall be
my son.”  This passage is often overlooked, for how should God be the father
of a man?&lt;/p&gt;

&lt;h2 id=&quot;the-lost-throne&quot;&gt;The Lost Throne&lt;/h2&gt;

&lt;p&gt;In the years that followed, this promise appeared to be one that was lost.
Solomon took the throne, and God was not nearly as pleased with him as he
was with David.  Solomon’s son then took the throne and the kingdom split.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1ki/12/19&quot;&gt;1 Kings 12:19&lt;/a&gt;)
Ten tribes went to the Northern Kingdom, sometimes called Israel and sometimes
Ephraim, and two tribes, Judah and Benjamin, formed the Southern Kingdom,
often simply called Judah.&lt;/p&gt;

&lt;p&gt;The Northern Kingdom suffered through the leadership of several different
dynasties as one king after another arose to punish the wickedness of the
king before.  This particular kingdom was unique for the consistency of their
leadership.  No righteous kings arose from all of these dynasties.&lt;/p&gt;

&lt;p&gt;Judah was also unique during this time, however, in that only David’s
offspring ruled Judah in Jerusalem.  Indeed, it almost seemed as though the
prophecy given to David might hold through one of the offspring’s of these
kings.  Yet during the reign of these kings, Isaiah wrote,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And in that day there shall be a root of Jesse, which shall stand for an
ensign of the people; to it shall the Gentiles seek: and his rest shall be
glorious.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/isa/11/10&quot;&gt;Isaiah 11:10&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only a couple hundred years after this prophecy, Babylon conquered Judah.
The Davidic dynasty lost the throne, as one empire or another ruled over Israel.
Worse, God told Jeremiah that the Davidic king of the time, through whose
line the throne ran, would have “none to sit upon the throne of David”
because he did not listen to God.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jer/36/30-31&quot;&gt;Jeremiah 36:30-31&lt;/a&gt;)
First was Babylon, then the Medes and Persians, the Greeks, and then the Romans
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/2/38-40&quot;&gt;Daniel 2:38-40&lt;/a&gt;).
Today, it is the United Nations ruling as an empire over what’s left of
the nation of Israel
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/2/41-43&quot;&gt;2:41-43&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Looking back at Isaiah’s prophecy, you’ll note that “root” could just as well
be translated as “stump”, and perhaps even more appropriately so.  It
describes a tree that has been cut down, but whose stump remains in the ground.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/job/14/7&quot;&gt;Job 14:7&lt;/a&gt;)
In historical hindsight, we can see that it refers to the fact that
Jesse, king David’s father, no longer had any offspring on the throne.
David’s dynasty appeared to be completely and utterly extinguished.&lt;/p&gt;

&lt;h2 id=&quot;the-seventy-weeks&quot;&gt;The Seventy Weeks&lt;/h2&gt;

&lt;p&gt;As history played out God’s judgment, we learn that David’s dynasty ended
when Jerusalem fell to Babylon.  Among the Jews that were enslaved by
Nebuchadnezzar was a young man named Daniel.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/1/1-6&quot;&gt;Daniel 1:1-6&lt;/a&gt;)
Daniel was brought captive to Babylon where God chose to make him a
prophet.  Indeed, Daniel was the one prophet in Babylon who was able to
explain to the king why he saw a disembodied hand writing on the wall,
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/5/5&quot;&gt;Daniel 5:5&lt;/a&gt;)
and the meaning of the message that was written.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/5/23&quot;&gt;Daniel 5:23&lt;/a&gt;)
That night, Babylon’s empire then fell to the Medes and the Persians.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/5/31&quot;&gt;Daniel 5:31&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Sometime later, this same Daniel was given the following word from the Lord
by an angel,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Seventy weeks are determined upon thy people and upon thy holy city, to
  finish the transgression, and to make an end of sins, and to make
  reconciliation for iniquity, and to bring in everlasting righteousness,
  and to seal up the vision and prophecy, and to anoint the most Holy. 
Know therefore and understand, that from the going forth of the commandment
  to restore and to build Jerusalem unto the Messiah the Prince shall be
  seven weeks, and threescore and two weeks: the street shall be built
  again, and the wall, even in troublous times. 
And after threescore and two weeks shall Messiah be cut off, but not for
  himself: and the people of the prince that shall come shall destroy the
  city and the sanctuary; and the end thereof shall be with a flood, and
  unto the end of the war desolations are determined. 
And he shall confirm the covenant with many for one week: and in the midst
  of the week he shall cause the sacrifice and the oblation to cease, and
  for the overspreading of abominations he shall make it desolate, even
  until the consummation, and that determined shall be poured upon the
  desolate. 
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/9/24-27&quot;&gt;Daniel 9:24-27&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best interpretation of this prophecy that I have come across is that
each “week” (Aramaic word for seven) refers to a seven year period.  “Seventy
weeks” therefore  refers to 490 years.  While I have not tracked it myself,
others have tracked the 69 of these “weeks” to be a measure of time from the
date Cyrus, king of Persia, sent the Jews to rebuild the city–“the going
forth of the commandment to restore and to build Jerusalem”–until the time
Jesus rode into Jerusalem on a donkey–“until Messiah the Prince”.  During
this time, the city and the wall were rebuilt.  But upon coming,
Jesus, herein known as “Messiah the Prince”, was then “cut off” by the cross.&lt;/p&gt;

&lt;p&gt;At this point, the prophecy switches to discussing a “prince that shall
come”, indicating an indefinite time into the future.  Indeed, the last week,
the 70th week, has not yet taken place.&lt;/p&gt;

&lt;p&gt;But let’s look closer at beginning of the prophecy, and the declaration of
what it describes.  The seventy weeks were determined to,
make an “end of sins, to finish the transgression [of Adam], to make
reconciliation for iniquity, and to bring in everlasting righteousness …”
In other words, the Salvation that God hinted to Adam was on its way.
Not only that, the time of Christ’s coming had been determined.&lt;/p&gt;

&lt;p&gt;I find it fascinating that the Magii who visited Jesus came “from the East”.
Might it be that these Magii were what remained of an order that Daniel
started following this prophecy, and so they were already looking for and
expecting the Christ?&lt;/p&gt;

&lt;p&gt;Prophecy then fell silent for what appeared to be nearly four hundred years.&lt;/p&gt;

&lt;h2 id=&quot;the-genealogy&quot;&gt;The Genealogy&lt;/h2&gt;

&lt;p&gt;We pick the story up again in the historical records of both Matthew and Luke.
These two accounts contain the most detail about the birth of the Christ.
In particular, each of these two gospels contains a genealogy.&lt;/p&gt;

&lt;p&gt;The genealogy in Luke
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/3/23-28&quot;&gt;Luke 3:23-28&lt;/a&gt;)
traces the Davidic line from Adam, through David and then down through his
son Nathan.  Nathan’s line didn’t follow the line of the dynasty at all, and
other than David, doesn’t contain any kings within it.  Further, unlike the
genealogy in Matthew, this genealogy traces Jesus’ heritage through Mary,
the mother of Jesus.&lt;/p&gt;

&lt;p&gt;The genealogy found in the book of Matthew
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/1/2-16&quot;&gt;Matt 1:2-16&lt;/a&gt;)
traces the line of Joseph, Jesus’ adoptive father, from Abraham, through
king David and the dynasty that followed, through the kings that were
overthrown by Babylon, the leaders that rebuilt Jerusalem, all the way to a
poor carpenter named Joseph.  By birth, Joseph held what was left of the right
to David’s dynasty.  By legal adoption, that right was then given to Jesus.&lt;/p&gt;

&lt;p&gt;Jesus birth itself fulfilled the prophecy from Genesis, itself reiterated
in Isaiah,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behold, a virgin shall be with child, and shall bring forth a son, and
they shall call his name Emmanuel, which being interpreted is, God with us.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/1/23&quot;&gt;Matt 1:23&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mary, as the virgin in this verse, then gave birth to Jesus.  This fulfilled
the prophecy from Genesis
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/gen/3/14&quot;&gt;Gen 3:14-15&lt;/a&gt;),
regarding the seed of the woman, and also the prophecy Nathan related to David
saying that Jesus’ father would be the Almighty Himself.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2sa/7/14&quot;&gt;2 Samuel 7:14&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Indeed, we know that Jesus was not only the son of God, he was also the
&lt;em&gt;only&lt;/em&gt; son begotten by God.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/3/16&quot;&gt;John 3:16&lt;/a&gt;)
“Begotten” being an old English word for “fathered”.  The fact that Jesus was
the only “begotten” of the Father just points out that God only “fathered” one
son, and that one was Jesus.&lt;/p&gt;

&lt;h2 id=&quot;the-angels&quot;&gt;The Angels&lt;/h2&gt;

&lt;p&gt;Birth announcements are nothing new, and God wanted to make certain the birth
of His son was properly announced.  Therefore, on the night that Jesus was
born, the story transitions to shepherds.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And there were in the same country shepherds abiding in the field, keeping
  watch over their flock by night.
And, lo, the angel of the Lord came upon them, and the glory of the Lord
  shone round about them: and they were sore afraid. 
And the angel said unto them, Fear not: for, behold, I bring you good
  tidings of great joy, which shall be to all people. 
For unto you is born this day in the city of David a Saviour, which is
  Christ the Lord. 
And this shall be a sign unto you; Ye shall find the babe wrapped in
  swaddling clothes, lying in a manger. 
And suddenly there was with the angel a multitude of the heavenly host
   praising God, and saying, 
Glory to God in the highest, and on earth peace, good will toward men. 
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/2/8-14&quot;&gt;Luke 2:8-14&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To my knowledge, this is the first time the word “Gospel” is used to describe
a message.  Yes, it’s used earlier in the historical records to describe the
records themselves, but this is the first time within the record.  Did you
catch it?  The angel said, “I bring you good tidings” … that’s the word!&lt;/p&gt;

&lt;p&gt;The Greek word for gospel is a compound word from the prefix “eu”, sometimes
transliterated as “ev”, and “angelion”, from which we get the word angel.
It is commonly translated as “Good News” today, although I believe this
modern translation misses the true meaning of this word.&lt;/p&gt;

&lt;p&gt;Let’s look at the “eu” prefix first.  The Greeks had two prefixes they used
for “good”.  One was “kali”, from which we get “calligraphy” or “pretty
writing”.  It means good as in pretty, nice, or pleasant.  The other
prefix, “eu”, held the concept of good as in good in a godly, righteous,
kind of way.&lt;/p&gt;

&lt;p&gt;This wasn’t just “Good News” because it was pleasant, it was “Good News”
because it was right, just, and came from God.  This is “Godly News”.&lt;/p&gt;

&lt;p&gt;“News” itself has also become a poor translation for “message”.  It has worked
for many years, but “news” today now refers to an entertainment industry
willing to sacrifice truth in its competition for viewers and dollars.  This
is not the “news” of the Gospel.  Rather, the “news” of the Gospel was a
specific message, given by God.  In this instance, God gave his message to
angels who where then commanded to deliver it to the shepherds.  The shepherds
then shared this the message and their experiences in their excitement, and
so the message is now available for us to read today.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/2/17&quot;&gt;Luke 2:17&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This is the idea behind the word Gospel: God sent us a message from heaven.&lt;/p&gt;

&lt;h2 id=&quot;the-gospel-and-jesus&quot;&gt;The Gospel and Jesus&lt;/h2&gt;

&lt;p&gt;At this point, we’ve traced the history of Christmas to the time of Christmas
itself, but its hard to stop there.  There’s just so much more to the story.
Indeed, the Gospel message presented by the angels was far from the end of
the message God wanted to give.  Specifically, God gave a message to Jesus
that He was to teach.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;God, who at sundry times and in divers manners spake in time past unto
  the fathers by the prophets, 
Hath in these last days spoken unto us by his Son, whom he hath appointed
  heir of all things, by whom also he made the worlds; 
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/1/1-2&quot;&gt;Hebrews 1:1-2&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once Jesus came of age, He began to travel and teach.  The Bible records
several locations where He taught.  It also records one such sermon in
&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/5/1&quot;&gt;Matthew 5&lt;/a&gt;-7.  This has become
known as the “Sermon on the Mount”–since it was taught on a mountain.  It’s
fascinating to note that a very similar sermon was taught in
&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/6/1&quot;&gt;Luke 6&lt;/a&gt; from
within a valley, something I often call the “Sermon in the Valley.”&lt;/p&gt;

&lt;p&gt;At one time, I wondered that Jesus taught two messages that were so similar.
A friend of mine then chose to become a missionary, and described how his
job entailed going from church to church in order to raise support.  Since
he typically didn’t return to the same church twice, he &lt;em&gt;taught the same
message&lt;/em&gt; from place to place.  This then explains what Jesus was doing as well:
going from one community to another teaching this same message.&lt;/p&gt;

&lt;p&gt;Mark uses the term Gospel to describe this message,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now after that John was put in prison, Jesus came into Galilee, preaching
  the gospel of the kingdom of God,
And saying, The time is fulfilled, and the kingdom of God is at hand:
  repent ye, and believe the gospel. 
&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/1/14-15&quot;&gt;Mark 1:14-15&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mark doesn’t specify what this Gospel is.  It follows from the context that
the Gospel is the message Jesus is teaching.  Mark summarizes it here, but
Matthew gives us a more complete glimpse of it.&lt;/p&gt;

&lt;p&gt;Nor is this the entirety of “&lt;em&gt;the&lt;/em&gt; Gospel”.  Rather it is the message Jesus
brought from His father to share with the world, which calls all men to
repent and to turn from their sins.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Gospel that Jesus presented was thousands of years in coming.
As we’ve seen above, Christmas was first prophesied to Adam and Eve, where
God promised that the offspring of a virgin would crush the head of the
serpent.  His coming was prophesied again to David, when God promised that
David’s seed would rule after him, and that of this king’s rule there would
be no end.  Moreover, God promised that He would personally be the Father
of this coming king.&lt;/p&gt;

&lt;p&gt;This brings us to the last point, in order to be an &lt;em&gt;everlasting&lt;/em&gt; king, Jesus
needed to conquer death.  This follows naturally.  To conquer death, Jesus
needed to die and then to rise again.  History records that He did indeed
do this (&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/28/1&quot;&gt;Matt 28:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/mar/16/1&quot;&gt;Mark 16:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/24/1&quot;&gt;Luke 24:1&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/00/1&quot;&gt;John 20:1&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There’s more to the story, and more than I will be able to get into here.
Indeed, it’s not even complete as of today.  That last week, the 70th week
prophesied by Daniel, has not yet to taken place.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/dan/9/27&quot;&gt;Daniel 9:27&lt;/a&gt;)
Until that time happens, there will be no end to sin, and the transgression
will not be complete.  Sin, still today, remains the reason for the
suffering in the world.  We also know that the King will return to make
an end to it.&lt;/p&gt;

&lt;p&gt;Only one question remains.  When the King returns, how will he find you?
Did you listen to His message when He was here?  Have you prepared yourself
for His return?  (&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/7/22&quot;&gt;Matt 7:22-23&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This, then, is the background of the Christmas story.  In it is the whole
of human suffering, going back all the way to the dawn of creation.  It’s
the story of the birth of the King who is healing individuals today, and
who will someday return to judge the living and the dead.&lt;/p&gt;

&lt;p&gt;I wish you therefore a Merry Christmas, and ask that you join me in praying
that His return would come soon.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For unto you is born this day in the city of David a Saviour, which is Christ the Lord.  (Luke 2:11)&lt;/em&gt;</description>
        <pubDate>Wed, 25 Dec 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2019/12/25/christmas-gospel.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/12/25/christmas-gospel.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Using a Histogram to Debug A/D Data Streams</title>
        <description>&lt;p&gt;My favorite part of any signal processing application is the part where you
sit down and draw out what you’re going to build.  It’s my favorite part because
nothing ever goes wrong on the drawing board.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Four tools for datapath debugging&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/datapathdebug.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But let’s face it, things do go wrong, and you are going to need to be
able to find out what.&lt;/p&gt;

&lt;p&gt;One of my themes in this blog is that you should prepare, early on in any
project, for the tools you will need to accomplish that project.  For
example, you should build and prove your &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt; early on.  Then,
later on, you can use this ability to &lt;a href=&quot;/blog/2019/11/14/sdspi.html&quot;&gt;communicate with your design while
it’s in the lab&lt;/a&gt; so that your
design can tell you what’s going right or wrong.&lt;/p&gt;

&lt;p&gt;In this game, logic is your friend: use it.&lt;/p&gt;

&lt;p&gt;That said, let’s take a quick look at four things that can be quite helpful
when trying to go from an signal source to your data processing application:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. Sample counting&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/samplcounter.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sample counting&lt;/p&gt;

    &lt;p&gt;Sample counting should be your first step, before everything else.  Sadly,
from my own personal experience, adding an internal data sample counter
has tended to be an afterthought that ends up getting placed into every
project only after things start going wrong.  Typically,
the A/D isn’t properly configured, the internal clocks within the design
aren’t set right, that resampling filter didn’t quite get the rates
right or maybe something else.&lt;/p&gt;

    &lt;p&gt;Counting samples, and comparing the incoming sample rate to the
system clock rate can be very valuable when trying to narrow down
the source of your lack of data, or even when trying to find where
samples are getting dropped (or added) into an application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 3. Counter Injection&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/blkcounter.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Counter injection&lt;/p&gt;

    &lt;p&gt;Often there’s a long path with lots of things on it going from the digital
signal source to output data.  In one of my early projects, this path
included packing data into words and then writing it to an SD card only
to be read later.  In another project, the data needed to be first given
an exponent, then packed into blocks, placed into a FIFO, and sent over
the Ethernet.&lt;/p&gt;

    &lt;p&gt;Even though none of these steps involved any filtering or control loops, 
there were still a lot of places where things might’ve gone wrong.  As an
example, in the SD card project, the SD cards we were using would tend to
become busy mid-stream and so drop samples whenever our FIFO didn’t have
enough depth within it.  (Worse, we were using an extremely small, low-power
design to record a GPS signal that couldn’t afford data loss.  Because
the chip was so small, there wasn’t much block RAM available for a deeper
FIFO.  Yes, it was a recipe for a project failure.  In the end, we needed
to get creative to get around this bug …)&lt;/p&gt;

    &lt;p&gt;One easy way to diagnose problems like this is by injecting a counter into
the data path.  You can then compare the counter against the signal on the
other end of the transmission to verify that nothing was lost in the FIFO,
that the SD card didn’t skip samples any where, that no network packets
were dropped, or worse.&lt;/p&gt;

    &lt;p&gt;This is such a valuable capability to have, that I’ve often placed it
into every signal source controller I’ve built.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Histogram checking&lt;/p&gt;

    &lt;p&gt;This is going to be our topic today, so let’s come back to this in a bit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fourier Transform&lt;/p&gt;

    &lt;p&gt;Finally, when the samples all look good, it becomes time to go look at
a &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;Fourier transform&lt;/a&gt; of the
incoming data.  I personally like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Short-time_Fourier_transform&quot;&gt;Short-Time Fourier Transform
(STFT)&lt;/a&gt; the
best.  A nice &lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;rastered image&lt;/a&gt;,
presenting the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Short-time_Fourier_transform&quot;&gt;STFT&lt;/a&gt;
of your data can reveal a lot of what’s going on within.  You can see
if there’s some bursty noise, what sort of always-on interferes might be
coming in from your system, whether you are struggling with self-noise and
more.  Indeed, this is a very valuable analysis step–it just doesn’t tell
you much if your signal was corrupted earlier in the processing chain, and
your samples were replaced by something else.&lt;/p&gt;

    &lt;p&gt;As an example, I’ve worked on many signal processing systems that were
buffer based.  In these systems, you’d process one buffer, then get the
next to process it.  Very often, filtering implementations would require
overlap between the buffers.  A common problem was always making sure
there was no dropped (or inserted) data between the buffers.  The counter
injection check above could find this easily.  However, if you skip the
counter injection check and instead go straight to taking an
&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; of the broken data,
then you may well convince yourself you have a wideband interference
issue after which you’ll then go looking in the wrong place to find the
source.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today, though, let’s look at how a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
might help you diagnose data sampling problems, and then look at some
examples of how you might &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;implement a
histogram&lt;/a&gt;
in an FPGA.&lt;/p&gt;

&lt;h2 id=&quot;the-power-of-a-histogram&quot;&gt;The Power of a Histogram&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
is defined as a chart of sample counts, estimating the probability
that an input voltage will get mapped to a particular digital value.  If done
well, it should approximate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_distribution&quot;&gt;probability
distribution&lt;/a&gt;
of the underlying data source.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Ideal Gaussian histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hgauss.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A classic example of what a &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
might look like is shown in Fig. 4.  on the left.&lt;/p&gt;

&lt;p&gt;You should be able to recognize this shape as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian bell shaped
curve&lt;/a&gt;.  It’s the distribution you should expect from thermal noise.
If everything goes well, this is what you should see coming into your system
when everything is working but no “signal” is present.  In other words, this
is what things will look like before you turn your transmitter on.&lt;/p&gt;

&lt;p&gt;What’s even better about this picture is that, since a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; is a visual
picture, it’s easy to tell from a chart whether or not what you are receiving
matches this shape.  Pattern recognition is very powerful.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 5. Ideal Sinewave Histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hsinwav.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, if that’s what a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of noise (i.e. no signal) should look like, what should a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of some form of signal look like?  Fig. 5 on the right shows the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of what you might expect from a
&lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;sine wave&lt;/a&gt;
under the uncommon laboratory conditions of pure signal with little noticeable
noise.&lt;/p&gt;

&lt;p&gt;Unlike the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;,
this one looks more like Batman’s head as I term it.  Notice the pointy
“ears”, beyond which there’s no signal counts at all.  In a perfect
world, this is what your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;,
of noiseless signal should reveal.&lt;/p&gt;

&lt;p&gt;Of course, we don’t live in a perfect world, and so I’m not sure I’ve ever
seen a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
looking this clean generated by anything other than a
&lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;digital NCO&lt;/a&gt;
that never touched the analog domain.  So what should this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
look like if your sine wave has been corrupted by some amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
noise?&lt;/p&gt;

&lt;p&gt;Unfortunately, the probability math starts getting really complicated when
combining signals.   For example, adding a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
to a
&lt;a href=&quot;/dsp/2017/12/09/nco.html&quot;&gt;sinewave&lt;/a&gt;
in time results in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;
of the two &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_distribution&quot;&gt;probability distributions
functions&lt;/a&gt;.  For
anyone who wishes to try to evaluate this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;,
good luck–the math can get quite challenging.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Sinewave plus Noise&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hsingauss.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For the simple minded like me, it’s worth knowing that convolution with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt; acts like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;low-pass filtering&lt;/a&gt;
the Batman head, smoothing over those sharp “ears”.  As a result, with a bit
of noise, your signal might look like Fig. 6 on the right.&lt;/p&gt;

&lt;p&gt;This is what you should hope to see when evaluating a signal from an A/D:
either a nice
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
when no signal is present, or a smoothed Batman’s head when it is.  Well,
that or something else depending on how your signal is defined.  It shouldn’t
be too hard to figure it out in &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, what else might you see?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 7. Noise, but with a DC bias&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hbias.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Two very common problems in A/D systems are bias and scale problems.
Fig. 7, on the left, shows what bias might look like.  This particular
signal was generated from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
with a non-zero mean, and represents much of what you might receive
if you had an input of both electronic noise added together with some
amount of direct-current leakage onto your signal path.  Note how the signal
is no longer symmetric about zero.&lt;/p&gt;

&lt;p&gt;Okay, I’ll admit to the purists here that I cheated when drawing Fig. 7.  I
used &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; and a theoretical bell
shape shifted to the right.  The result is pretty, but practically erroneous.
Specifically, the far right bin should also include all of the counts from
samples that ended up out of range.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. Clipping shows up in a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hclipped.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Speaking of “out of range”, the second common problem you might have is scale.
Many receivers require some form of gain prior to going into the sampler.
Getting the right amount of gain can be a challenge.  As an example, Fig. 8 on
the right shows what might happen if you overdrive the incoming signal.
Yes, take that headset off quickly before you lose the last of your hearing, and
lower the gain while your system is still usable.&lt;/p&gt;

&lt;p&gt;If this ever happens to you, you’ll notice two overused bins at the minimum
and maximum sample values out of the digitizer.  This should be
a pattern to look for, and an indication of when to fix things.  It’s caused by
the voltage going into the system being out of range for the A/D.  If it’s
too high, it will be returned as the maximum value, and too low as the minimum
value.  If the two edge peaks aren’t even, it’s a sign you have problems with
both bias and scale together.&lt;/p&gt;

&lt;p&gt;To make matters worse, the incoming signal is distorted if you ever start
getting peaks at the edges of your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
like this.  Your job, as the
responsible engineer, is to make sure the scale gets adjusted properly
so that the end points either have no counts within them or nearly none–in
order to know your system has little to no distortion within it.&lt;/p&gt;

&lt;p&gt;These sorts of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
results are the normal things you should be expecting to be debugging with
the analog signal engineer and a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Oscilloscope&quot;&gt;oscilloscope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;Histogram&lt;/a&gt;s
can also be used to find and diagnose the not-so-normal things
that might go wrong.  For example, can you guess what’s going wrong in
Fig. 9?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 9. What went wrong here?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hmismsb.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this case, the top bit of the data sample got corrupted by what appears to
be random data, creating the appearance of two nearly identical
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
shapes.  Alternatively, your data might be off cut, and so the samples might
include the LSB from one sample followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB:1&lt;/code&gt; of another.&lt;/p&gt;

&lt;p&gt;Off cut data is important to recognize, especially since some particular
LVDS protocols can be a challenge to synchronize to the sample boundaries
of.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. How about now?&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hmislsb.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Another possibility is that your LSB might be corrupted.  In this case, you’ll
see something looking closer to a comb, as shown in Fig. 10 on the right.&lt;/p&gt;

&lt;p&gt;As one final example, let me draw your attention to Fig. 11 on the left.
In this case, the top two bits of the sample value have been corrupted,
but the rest look good.  Notice how our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Gaussian&lt;/a&gt;
shape has been split into four jumbled parts?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 11. Mis-mapped top two bits&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/hquartr.png&quot; alt=&quot;&quot; width=&quot;460&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Remember, no A/D is perfect.  You aren’t likely to see shapes this clean
in reality, but the general rules above still apply.&lt;/p&gt;

&lt;p&gt;The good thing about all of this is that the human brain can detect patterns
very easily, and being able to visually see these patterns is the power
and reason for calculating and plotting a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
Consider how many faults we just diagnosed by examining the patterns
above–each was distinct, and each indicated a different form of fault.&lt;/p&gt;

&lt;p&gt;So, if a &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
is so valuable, how shall we measure one?&lt;/p&gt;

&lt;h2 id=&quot;calculating-a-histogram&quot;&gt;Calculating a Histogram&lt;/h2&gt;

&lt;p&gt;Perhaps the easiest way is to record a set of samples and then download
them into a program where you can do ad-hoc and scripted data manipulation.
I will often use &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; for this
purpose, but I am also aware that much of the engineering community likes
to use &lt;a href=&quot;https://www.mathworks.com/products/matlab.html&quot;&gt;Matlab&lt;/a&gt;.  (I just
can’t afford &lt;a href=&quot;https://www.mathworks.com/products/matlab.html&quot;&gt;Matlab&lt;/a&gt;, and
&lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; tends to do everything I need.)&lt;/p&gt;

&lt;p&gt;My first rule of digital logic design is that all FPGA logic shall be
pipelined so as to be able to process at least one sample per system clock.
Throughput is your friend, embrace it!&lt;/p&gt;

&lt;p&gt;My second rule is that all signal processing blocks should be controllable
across a bus of some type.  That means, you should be able to read status
from within the system, turn on and off various signaling elements, adjust
gains, etc. all from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
connected to your design.  This
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can be within your FPGA, such as the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; that lies within many of my own
designs, or it can be &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;external to your design, communicating to your
design&lt;/a&gt; via some
form of &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the first DSP design I built, I used a &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive
averager&lt;/a&gt; to measure the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of an incoming signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 12. An IIR peripheral for a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/iirhist.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I would write to my &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus
peripheral&lt;/a&gt; the
sample value I wanted to measure the probability of, and also a averaging
coefficient.  Then, on every sample, if the sample matched the chosen address I
would average a one else a zero.  Using the
&lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive averager&lt;/a&gt;
we studied earlier, this might look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;iiravg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGALPHA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUS_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;iir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chosen_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hist_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;bus
peripheral&lt;/a&gt; the
could then set &lt;code class=&quot;highlighter-rouge&quot;&gt;chosen_sample&lt;/code&gt; and read the &lt;code class=&quot;highlighter-rouge&quot;&gt;hist_output&lt;/code&gt; result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;chosen_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hist_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This worked great for me in the past when I only wanted to examine one or
two bins.  The advantage of using this method is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
output is always available to be read.  No scaling is needed, the decimal point
is right where you want it and you are reading a fractional number.  Even
better, the logic involved with building this is quite simple, and so it can
be done when hardware is at a premium.&lt;/p&gt;

&lt;p&gt;The disadvantage with this approach comes when you want to measure more than
one bin.  In that case, you might walk through the various sample values,
wait for the averager to settle and then read the result before moving on.
This was my go-to solution until I actually tried it.  I then swallowed
hard and convinced myself that I liked the result, but I also realized
the solution would be completely unworkable with an A/D having 5-bits or more.&lt;/p&gt;

&lt;p&gt;Another approach I tried was to run a series of &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive
averagers&lt;/a&gt;,
each focused on a different sample.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 13. An IIR peripheral for a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/multiiir.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problem with this multi-average approach is simply that the
&lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;recursive averager&lt;/a&gt;
approach doesn’t scale well to large numbers of potential sample values.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;Another
approach&lt;/a&gt;
is needed, which we’ll discuss building today: the block average approach to
generating a &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
This approach will be centered around using a block RAM element to keep the
logic down.&lt;/p&gt;

&lt;p&gt;The concept of a block average is really quite simple, and it’s easy to write
out in C.  You simply pass to your block processing routine a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;nsamples&lt;/code&gt;
samples, captured in a &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; array, as well as an array to capture the
resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;calculate_histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step is to clear the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; array.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NUM_ADC_BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that, we’ll walk through all of our sample points, and increment the
bin counter in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; memory
once for every sample in our incoming data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That seems easy enough.  It’s even easy enough to write out most of the
hardware necessary to do this.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Updating a memory single-cycle&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/memupdate.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Not bad, but can we &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;build it in
Verilog&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Well, sort of and … not quite.  I mean, the operation is fairly easy to
describe in Verilog.  Just like the hardware diagram above, it looks easy.
The problem is that, just because you can describe it in Verilog doesn’t mean
it can properly map to hardware.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, as we’ve written it out, this is language compliant.  Even better, it’s
likely to work quite well in a
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulator&lt;/a&gt;.
It’s just not likely to map well to all of the different
varieties of FPGA hardware.&lt;/p&gt;

&lt;p&gt;To capture the problem, I introduced several &lt;em&gt;rules&lt;/em&gt; for using block RAM
within my &lt;a href=&quot;/tutorial&quot;&gt;beginners tutorial&lt;/a&gt;.  These rules
help to guarantee that your design will successfully map into block RAM rather
than flip-flops.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rule:&lt;/strong&gt; When reading from memory, only the read from memory logic shall
happen on any given clock.  This shall happen within its own always block,
with nothing more than a (potential) clock enable line controlling it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One reason for this rule is that not all FPGA hardware supports reading from
block RAM and processing the result on the same clock.  Notably the
&lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;iCE40 series&lt;/a&gt;
can only read directly into an attached set of flip-flops (the one clock
requirement), and from there any value read can only enter into your design
logic on the next clock cycle.  Even for those FPGAs that can read from a memory
directly into an operation, many of them have limited sizes of memory that can
support this.  While 5-bit A/Ds would work well, wider 10-bit A/Ds could easily
overload this capability.&lt;/p&gt;

&lt;p&gt;While unfortunate, it is also a reality that if you want to create code that
can work efficiently on multiple FPGA architectures then you will need to
support the lowest common denominator.  That means we’re going to need to
split our read out into a separate clock cycle.  The result might then
look something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Read from memory on the first cycle
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Keep track of which sample we are examining,
// and whether or not we&#39;ll need to write this
// updated value to memory
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Finally, write to memory on the next cycle
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this gets us closer, there are still two more block RAM rules.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;&lt;strong&gt;Rule:&lt;/strong&gt; When writing to memory, nothing but the memory write shall exist
within that logic block.  That is, you should only ever write from a
register to memory, never from a LUT’s output to memory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This issue is more timing driven than hardware architecturally driven.
Part of the issue here has to deal with the fact that block RAM memories
tend only to be located on specific parts of the FPGA.  They aren’t
necessarily uniformly sprinkled around the fabric.  As a result, there may
be an unpredictable distance from your logic to the memory, and going from
flip-flop to memory helps to mitigate any timing problems there.&lt;/p&gt;

&lt;p&gt;This now means that we’ll need to take three clocks to update one value in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt; estimate.
Our first clock will be used to read from memory, our second clock
will add one to the result, and our third clock will write the updated result
back to memory.  Fig. 15 attempts to diagram how this might work.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 15. Three clock cycles to update a histogram&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/mempipeline.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Again, on its face, this looks like it should be doable.  The
Verilog to describe this operation remains straightforward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
// First clock: read from memory
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Take a whole clock to read from memory
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// and keep track of the sample value
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Second clock: add one to the memory value, and
// move r_sample into the next clock cycle as memaddr
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Last clock: write the result back
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Take a whole clock to write to memory
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//
// Don&#39;t forget we&#39;ll need to keep track of the
// original i_ce value, and delay it by two cycles
// to get it into the third clock period.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Delay i_ce to control our write-to-mem action
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is, it looks doable until you start getting into the details.  For
example, what happens if you receive the same sample value for several
clocks in a row?  Let’s say we receive sample value &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; for 7 clocks in a row.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 16. Updating the same sample for many clocks in a row&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/trace-wo-bypass.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After receiving &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample=0&lt;/code&gt;, we read from memory.  Let’s suppose we start from
zero for the sake of simplicity.  Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;memval=0&lt;/code&gt; on the next clock
cycle, &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew=1&lt;/code&gt; on the cycle after that, and &lt;code class=&quot;highlighter-rouge&quot;&gt;mem[0]=1&lt;/code&gt; on the following
cycle.  Finally, on the next cycle &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; can read the value &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; from memory.&lt;/p&gt;

&lt;p&gt;The result is that after receiving our value across seven different clock
cycles, we’ve only marked three counts into our bin counter–not seven.&lt;/p&gt;

&lt;p&gt;Remember our goal of high throughput?  We want to be able to process every
sample at a rate as high as our FPGA will allow.  That means we want to be
able to accumulate one sample per clock across several clocks as we did above.&lt;/p&gt;

&lt;p&gt;This is going to be a problem.  We’re going to need to solve it in order
to build a good generic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;.
That said, we’ll come back to this again when we have the formal tools
helping us out.  That’ll make it a lot easier to work out.&lt;/p&gt;

&lt;p&gt;There’s also the issue of initializing our array that we haven’t yet discussed.
This brings us to the last rule for block RAM allocation:&lt;/p&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;&lt;strong&gt;Rule:&lt;/strong&gt; You can’t initialize all of a memory at the same
time.  You can only start
the memory with known contents, and then write to one address in memory
(or not) on any subsequent clock tick.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This may be more of an FPGA rule than an
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;ASIC&lt;/a&gt; rule.  The
problem is that most FPGA block RAMs have no capability for adjusting
every value of the memory at once.  You can access one, or sometimes
two, values at a time but never clear the whole array.&lt;/p&gt;

&lt;p&gt;This particular rule is even more annoying than the last two, and it’s going
to take some work to accomplish.  The good news, though, is that we’ve now
got an open clock between our memory read and our memory write that we
can use for … whatever logic we want.  This will be where we place our
initialization.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Second clock tick, after reading from memory
// into memavg.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clear another address of memory
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// as part of our reset cycle
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Add one to the last sample value
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// we&#39;ve seen from our input
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Keep track of which step in our pipeline
// is processing input data, and use it to
// turn on memory writes
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Write to memory, ignore incoming
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// data when resetting
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Finally, if cepipe[1] is ever true, write our
// result (or zero) to our histogram memory
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Okay, so we’re going to need more than that, but you should be able to get the
gist of the idea from just that alone.&lt;/p&gt;

&lt;p&gt;A simple and fairly basic state machine can then be used to control our
reset.  The states will look like: 1) Reset, 2) Initialize memory,
3) Count samples, 4) Switch memories, 5) Initialize the new memory,
6) Count samples into the new memory, and so forth.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 17. Double-memory histogram state machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/fsm.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;By using two separate memory sections, one will always be valid and available
to be read.  That way, while we are resetting and then accumulating counts to
generate a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
in one memory section, the other section will hold the counts from the last
average.  In this manner, user code will not need to synchronize to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;–it will always be there.&lt;/p&gt;

&lt;p&gt;Of course, one disadvantage is that something might happen while we are
resetting the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
memory that would then be missed.  Whether that is important to you or not is
application dependent.  Similarly, how you go about fixing the problem is also
application dependent.  On some applications, data might arrive slow enough
that a FIFO can hold on to it during our reset, but I digress.&lt;/p&gt;

&lt;p&gt;For now, let’s turn to examining how we are going to build this.&lt;/p&gt;

&lt;h2 id=&quot;the-formal-contract&quot;&gt;The Formal Contract&lt;/h2&gt;

&lt;p&gt;Before diving into
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;the details&lt;/a&gt;,
let’s just quickly examine at a top level how we might verify a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;histogram&lt;/a&gt;.
I like to call this the &lt;em&gt;contract&lt;/em&gt;: a formal description of how a design
is supposed to work that then forms the framework for laying the details out.
In this case, our contract consists of little more than a counter.&lt;/p&gt;

&lt;p&gt;First, we’ll pick the address of an arbitrary value in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyconst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or rather, we’ll let the solver pick an arbitrary address–that way we can be
assured that the properties of the memory at the chosen address could easily
be applied to all all memory locations.  This is the purpose of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;(* anyconst *)&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Next, we’ll create a counter to describe how many times we’ve seen this value.
These will become the counts that we read from our design across the bus
later on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clear our special value on or during any reset
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// In all other cases, if we see somthing, accumulate  it
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, we’ve chosen to use two memories–one where we accumulate values,
and the second which we can later read from using the system bus.  The value
&lt;code class=&quot;highlighter-rouge&quot;&gt;activemem&lt;/code&gt; above captures which memory we are examining.  Hence, if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;
is ever true, that is if we have a new sample, and if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; matches
the special sample we’re going to examine during our proof, then &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt;
should increment.&lt;/p&gt;

&lt;p&gt;Now we just have to prove, later on, that this value actually matches the
value in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only … our three clock addition is going to make this comparison a bit more
difficult.&lt;/p&gt;

&lt;p&gt;At any rate, that’s our goal–matching that value, but in memory.  Let’s
see how we can go about getting there.&lt;/p&gt;

&lt;h2 id=&quot;building-the-histogram-peripheral&quot;&gt;Building the Histogram Peripheral&lt;/h2&gt;

&lt;p&gt;It’s now time to build &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;our
peripheral&lt;/a&gt;.
Let’s pick some number of counts we wish to average together, and how big
our incoming samples will be (&lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt; bits).&lt;/p&gt;

&lt;p&gt;We can then declare the I/O port list for our module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;MEMSZ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_wb_sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m going to try something new this time–building the design for one of two
bus structures, either
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
or
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.  To keep
our notation constant across both, we’ll create a new clock value, &lt;code class=&quot;highlighter-rouge&quot;&gt;clk&lt;/code&gt;,
and a new reset value, &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt;.  We also want to capture when a bus write is
taking place.  We’ll later use that as an out of cycle cue of when to start
accumulating values into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
bins.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Memory really needs to start initialized, so let’s give all of our memory an
initial value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMSZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much to my surprise, this turned out to be an intensive process for
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;–particularly because
the memory is so large (2^10 entries).  So, instead, I simplified this process
for the formal proof and turned it instead into,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But we’ll have more on that later when we get to our formal verification
section.&lt;/p&gt;

&lt;p&gt;We’re also going to need to count samples going into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;, so we know
when we’ve accumulated a full (parameterized) &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt; counts.  Here we have
a basic counter that just counts up on any new sample, but never quite reaches
&lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why not?  Because when we get to one less than &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;, we are going to set
a flag indicating we want to start a reset cycle, &lt;code class=&quot;highlighter-rouge&quot;&gt;start_reset&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I mentioned above that I also wanted to be able to command a reset from the
bus, so let’s allow a bus write to initiate a reset cycle as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Two other little details: we don’t want to start a reset cycle if we are already
in one, unless we get an actual reset signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Getting this to only recycle once, and to make certain that every memory
value got cleared on reset, took more work than I was expecting.  One part of
that work is a signal that we are on the first clock of our reset sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second part is a flag I call &lt;code class=&quot;highlighter-rouge&quot;&gt;resetpipe&lt;/code&gt;.  The idea with this signal is that
if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;resetpipe&lt;/code&gt; is true, we are then in a reset cycle where we zero out
our memory, otherwise we’ll be in normal operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one last part to our reset: once we get to the maximum number of counts,
we’ll want to switch memories.  Further, on any memory switch, we’ll set a
user interrupt–so an attached
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can know that there’s new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
data which may be examined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Put together, a memory swap and reset re-initialization should look something
like the trace shown in Fig. 18 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 18. Internal memory reset&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/histogram/reset-cycle.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic sequence is that, when we get to the end of our count, &lt;code class=&quot;highlighter-rouge&quot;&gt;start_reset&lt;/code&gt;
goes high.  &lt;code class=&quot;highlighter-rouge&quot;&gt;resetpipeline&lt;/code&gt; then goes high on the next count and stays high
while we write zeros across all of our memory.  Once we’ve cleared all memory,
we’ll start accumulating into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
into the just cleared bins again.&lt;/p&gt;

&lt;p&gt;Notice that change in &lt;code class=&quot;highlighter-rouge&quot;&gt;activemem&lt;/code&gt;, noting that we switched histogram banks.
At the same time we switched banks, we also issued an &lt;code class=&quot;highlighter-rouge&quot;&gt;o_int&lt;/code&gt; to indicate
that the new data was now valid in the older bank.&lt;/p&gt;

&lt;p&gt;In a moment, we’ll start working our way through the three cycles required
by a bin update.  I’m going to use a three bit shift register, &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe&lt;/code&gt;, to
capture when new or valid data works its way through our pipeline in what I
like to call a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;travelling clock enable
(CE)&lt;/a&gt;
approach.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all of the necessary preliminary work.  Now let’s work our way through
those three clock cycles.&lt;/p&gt;

&lt;p&gt;On our first clock cycle, we’ll read from memory,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and record the address we read from–since we’ll need to know that again later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the next clock cycle, we’ll want to add one to &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;, and then write it
back to memory.  Only … it’s not that easy.&lt;/p&gt;

&lt;p&gt;To clear this up, let’s allow that we are going to write to &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt; a value
of &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt;.  While we are in the middle of a reset cycle, we’ll increment this
address across all memory spaces and write zeros into all spaces.  The only
exception is on the first clock tick, when &lt;code class=&quot;highlighter-rouge&quot;&gt;first_reset_clock&lt;/code&gt; is active.  On
that tick, we’ll make sure that we are starting from the beginning of memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that the reset is out of the way, we’ll want to write a new value to
what was the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; bin from the last clock tick, but now the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_sample&lt;/code&gt;
bin.  From that memory, we read &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; and so now we want to update it and
place the update into &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// We haven&#39;t used this value yet, so it&#39;s memory
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// copy is up to date--add one to it
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, the problem is … what if we just updated this value in the last
cycle?  That is, what if we are now writing &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt;?  It’ll take
two clock cycles before we can read it back again!  We can avoid this problem
with a simple check that we are writing to &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt; on this cycle, and just
add one to our current accumulator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is sometimes known as operand forwarding–rather than going through
a register file, we’re short-circuiting the operation and going straight back
into our accumulator.&lt;/p&gt;

&lt;p&gt;Only … that’s not enough.  If we had written to memory on the last cycle, it
would still  take us another clock to read that value back.  So let’s set up
a second stage of operand forwarding as well, to grab the value that was just
written to memory—but skipping the memory read.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bypass_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bypass_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how we’ll go about avoiding the problems shown in Fig. 16 above.&lt;/p&gt;

&lt;p&gt;We’re finally on our third clock tick.  At this point, we simply write
our &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt; value to memory at address &lt;code class=&quot;highlighter-rouge&quot;&gt;memaddr&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one last step required: we need to keep track of the last value written
to memory, lest we want to bypass the memory and go straight back into our
accumulator as described above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bypass_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bypass_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that’s left now is to work our way through the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;peripheral logic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, this is easy.  On any clock tick, we read from the
address given by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_addr&lt;/code&gt; and the memory bank that we aren’t currently
writing into.  That’ll give us clear access to a clean
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;,
rather than one that’s still updating.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also immediately acknowledge any request, and keep our
stall line low so we can accept requests at all times.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;adjusting-this-to-handle-axi&quot;&gt;Adjusting this to handle AXI&lt;/h2&gt;

&lt;p&gt;For those who want to adjust this core to work with an
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 bus&lt;/a&gt;,
this transformation can be done quite easily.  First, you’ll want to use either
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXILDOUBLE&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXIDOUBLE&lt;/a&gt;
to simplify out the protocol.  Once done, the bus has been simplified for
you.  For example, all of the ready signals in the simplified slave may be
assumed to be high, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; are the same signal.  This
makes interacting with the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 bus much easier than it was the last time
we tried this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we’d adjust the name of  our clock and reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also assign &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_write&lt;/code&gt; based upon &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; alone, and use that
to initiate a reset sequence.&lt;/p&gt;

&lt;p&gt;Further down in our file, we’ll set our return values.  In particular, we’ll
want to return the read data into &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll just hold the read and write responses at a constant “OKAY”
value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Note that the AXI4 peripheral code above is only representative.  It has
not been (yet) been properly formally verified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I find this easier to work with than the full
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 protocol&lt;/a&gt;.  It gets
past all of the problems others have had, although it will only work in
the context of using a pre-protocol processor such as
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXILDOUBLE&lt;/a&gt;
for AXI-lite or
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXIDOUBLE&lt;/a&gt;
for pre-processing AXI4.&lt;/p&gt;

&lt;p&gt;That’s it!  You now have a working
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 peripheral&lt;/a&gt;, for almost
as little work
as would be required for building a straight &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone
peripheral&lt;/a&gt;.  The
protocol pre-processor takes care of all of the back-pressure issues, AXI4 IDs,
AXI4 burst transactions, and so forth–making your job building a bus slave
much simpler.&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-our-histogram&quot;&gt;Formally Verifying our Histogram&lt;/h2&gt;

&lt;p&gt;Now that we’ve gotten this far, let’s see what it takes to formally verify
this design.&lt;/p&gt;

&lt;p&gt;We’ll start with the obligatory &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; register, that then gives us
access to being able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; in an assertion later on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also use &lt;code class=&quot;highlighter-rouge&quot;&gt;f_mem_data&lt;/code&gt; as short-hand for the value in our solver-chosen
memory address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we skipped initializing the whole memory in order to make the proof run
faster, let’s just assume that the initial value is zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Functionally, this acts the same within a formal environment as
&lt;code class=&quot;highlighter-rouge&quot;&gt;initial mem[f_addr] = 0;&lt;/code&gt; would, but I hesitate to modify
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;the core&lt;/a&gt;’s
operational logic in the formal verification section.&lt;/p&gt;

&lt;p&gt;Next, since the &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone
interface&lt;/a&gt;
is so simple, I’m going to take a risk and not include my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal Wishbone
property file&lt;/a&gt;.  Instead,
I’ll just assume that if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; is low then &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; must be low as well.
That’ll at least make the traces look closer to what we want, even if it doesn’t
functionally affect anything we are doing above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ve seen above how we are going to accumulate bin counts
into &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt;.  Here’s where that code lies.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clear our special value on or during any reset
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// In all other cases, if we see our special value,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// accumulate  it
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, to keep track of the register forwarding issue, I’m going to create
another value similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe&lt;/code&gt; register for watching the update of our
special value work its way through our logic.  In this case, it’s going to be
for watching any request for our special operand as it transits through the
system.  Hence, if &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe[0]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; should equal the value from our
special address and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_sample&lt;/code&gt; should match &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe[1]&lt;/code&gt;,
then we’ve just added one to the value from our bin and so forth.  The only
special trick is that we want to clear this value during the reset cycles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s go check our counter.  During a reset cycle, the counter should be
zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, if we aren’t updating the value, then it should match what’s in
our block RAM.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;Induction&lt;/a&gt;
will require just a touch more work.&lt;/p&gt;

&lt;p&gt;In the case of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe&lt;/code&gt; indicates only a single value,
then it’s the value we just read from memory into &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; following seeing
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; at the input.  It should be identical to what our &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt;
value was one clock ago–that is before it just got updated.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;3&#39;b001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, once we add one to this value, it should equal our counter post update
as well–just one clock later, only it is now kept in &lt;code class=&quot;highlighter-rouge&quot;&gt;memnew&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memnew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe[2]&lt;/code&gt; is ever true, then we’ve just written to memory.
The value in &lt;code class=&quot;highlighter-rouge&quot;&gt;bypass_data&lt;/code&gt; should match &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_counts&lt;/code&gt; just after it was
updated–only now we’re two clocks later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bypass_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s also check writing to the data.  As you may recall, we write to the
memory on the third clock of our pipeline, whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe[1]&lt;/code&gt; bit of
our shift register is true.  On the clock after any such write,
our counts value (two clocks ago) should now match what’s in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we also need to check that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_mem_data&lt;/code&gt; is properly reset as part of
the reset cycle.  Note that the check below checks the memory bank, kept in
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_addr[AW]&lt;/code&gt; against the active memory bank separate from the inequality
checking whether or not the current bank has been cleared or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_reset_clock&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, one other check on &lt;code class=&quot;highlighter-rouge&quot;&gt;f_this_pipe&lt;/code&gt;: If ever any of its values are true,
the corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;cepipe&lt;/code&gt; value must be true as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cepipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_this_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this looks like just a bunch of minutia, its not nearly as bad as it looks.
I started with just some very simple properties, like the two listed below:
that the data in memory could never exceed &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt; nor could our counter ever
exceed that value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This led to the need to also assert that our number of counts needed to be
less than the counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_this_counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While these assertions might seem quite straightforward, working through the
design so as to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
then lead to many of the other assertions I’m presenting here.  Then, once
the design passed
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
at 80 steps, I shortened the length to 10 steps.  When the final assertion was
in place to verify the design at 10 steps, I was then able to shorten the
proof further to 6, where it stands today.&lt;/p&gt;

&lt;p&gt;Let’s take a moment to look through the reset sequence next.  In particular,
we want to make certain that the &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; remains at zero throughout the reset
sequence.  It will start incrementing again once we start accepting samples
again after the reset sequence is complete.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetpipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, we’ll want to check that we can get into and start a reset properly.
In particular, we want to initiate a reset anytime we accept a value while
the count it just less than &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we start this sequence, we’ll want to change our memory bank, &lt;code class=&quot;highlighter-rouge&quot;&gt;activemem&lt;/code&gt;,
set an interrupt, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_int&lt;/code&gt;, reset the count, &lt;code class=&quot;highlighter-rouge&quot;&gt;count == 0&lt;/code&gt;, and raise the
&lt;code class=&quot;highlighter-rouge&quot;&gt;start_reset&lt;/code&gt; flag.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look at this another way, we want to assert an outgoing interrupt
anytime we switch memory banks (except following a reset) and at no other times.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activemem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s enough to pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
but … does the design even work?&lt;/p&gt;

&lt;h2 id=&quot;cover-checks&quot;&gt;Cover Checks&lt;/h2&gt;

&lt;p&gt;To convince ourselves
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;this design&lt;/a&gt;
actually works, rather than just passing a set of abstract property checks,
we’ll run some cover checks on the design.&lt;/p&gt;

&lt;p&gt;In particular, let’s prove that we can actually achieve a data count equal
to the number of averages we are doing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_mem_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now see in the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
below how this looks.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 19. Cover check--counting up to the full sample size&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/histogram/cover_trace.png&quot;&gt;&lt;img src=&quot;/img/histogram/cover_trace.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The trace starts out with a reset, and then walks through clearing all memory.
We then accept sixteen samples of &lt;code class=&quot;highlighter-rouge&quot;&gt;4&#39;hd&lt;/code&gt;–exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;NAVGS&lt;/code&gt;.  The design then
switches memory banks and starts the reset on the new memory bank–exactly
like we wanted!&lt;/p&gt;

&lt;p&gt;Well, almost.  I mean, you could get picky.  For example, the design re-enters
the reset state several times at the end because we never kept &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; from
going high again, but this doesn’t really impact what I wanted to show.  If
we had wanted to get fancier, we could’ve added more criteria to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
command.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Calculating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;
of your incoming data is a very basic analysis task
that you will want to be prepared to accomplish as you build any system.
There are lots of bugs you can diagnose just by looking over the resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;histogram&lt;/a&gt;, as we’ve seen above.
Further, if you choose to use a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;block histogram calculation
routine&lt;/a&gt;,
the logic can be really straightforward.&lt;/p&gt;

&lt;p&gt;That said, it wasn’t as simple as you might think.  In particular, the three
rules of block RAM memory added to the complexity–even though they helped
make certain our design fit into a block RAM in a first place.  These rules
forced us to read from memory in one cycle, calculate an updated value on the
next, and finally write the result on the third.  Further, since you can’t
clear all of a memory at once, you can also see how a basic state machine
can make that happen.&lt;/p&gt;

&lt;p&gt;Even better, I was able to demonstrate how simple an
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4 peripheral&lt;/a&gt;
can be made to be using either the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXILDOUBLE&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axildouble.v&quot;&gt;AXIDOUBLE&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2019/08/30/subbus.html&quot;&gt;pre-protocol processors&lt;/a&gt;.
Indeed, our resulting &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI4
peripheral&lt;/a&gt;
logic was almost &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;as simple to
write&lt;/a&gt; as the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone peripheral&lt;/a&gt;’s
logic was.&lt;/p&gt;

&lt;p&gt;Finally, if you are interested in &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;this
code&lt;/a&gt;,
or the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/formal/histogram.sby&quot;&gt;SymbiYosys
script&lt;/a&gt;
used to drive &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt; when verifying
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/histogram.v&quot;&gt;this core&lt;/a&gt;,
you can find both in my &lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;DSP filters project
repository&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Likewise reckon ye also yourselves to be dead indeed unto sin, but alive unto God through Jesus Christ our Lord.  (Rom 6:11)&lt;/em&gt;</description>
        <pubDate>Sat, 21 Dec 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/dsp/2019/12/21/histogram.html</link>
        <guid isPermaLink="true">https://zipcpu.com/dsp/2019/12/21/histogram.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Quiz #9: Immediate assertions midst blocking assignments</title>
        <description>
</description>
        <pubDate>Thu, 12 Dec 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/quiz/2019/12/12/quiz09.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/12/12/quiz09.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
  </channel>
</rss>
