<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstreeam FPGA design courses such as how to debug an FPGA design.
</description>
    <link>http://zipcpu.com/</link>
    <atom:link href="http://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Nov 2017 15:25:35 -0500</pubDate>
    <lastBuildDate>Fri, 24 Nov 2017 15:25:35 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>http://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Thank you!</title>
        <description>&lt;p&gt;While I’d love to share with you some of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Thanksgiving&quot;&gt;history of Thanksgiving&lt;/a&gt; here
in the U.S., I think the quote below just about sums up all I need to know
about the Thanksgiving holiday.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In every thing give thanks: for this is the will of God in Christ Jesus
concerning you (&lt;a href=&quot;https://www.blueletterbible.org/kjv/1th/5/18&quot;&gt;1Thess 5:18&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the Thanksgiving traditions in our family is to spend some time sharing
with others those things we are thankful for.  If you’ll permit, I’ll share
some of those things with you:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I thank God for sending His message (the Gospel) to us by His son Jesus,
who is truly the Christ.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/1/1&quot;&gt;Heb 1:1-2&lt;/a&gt;, &lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/1/16&quot;&gt;Rom 1:16&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I thank God for choosing to give me the grace to trust His message.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/eph/2/18&quot;&gt;Eph 2:18&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I thank God for the grace He has since given me, which has
transformed me from a man who was trapped by my own sin
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/jhn/8/34&quot;&gt;John 8:34&lt;/a&gt;,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/6/14&quot;&gt;Rom 6:14&lt;/a&gt;),
forced to sin again and again 
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/7/23&quot;&gt;Rom 7:23&lt;/a&gt;),
now into a man who is being transformed into His image
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2co/3/18&quot;&gt;2Cor 3:18&lt;/a&gt;).&lt;/p&gt;

    &lt;p&gt;Perhaps this needs to be understood in context.  For those who know the
&lt;a href=&quot;https://www.blueletterbible.org/kjv/ex/20/1&quot;&gt;ten commandments&lt;/a&gt;,
I have violated many if not most of them.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/19/17&quot;&gt;Matt 19:17&lt;/a&gt;)
Having broken
the commandments once, I then found myself compelled to break them again
and again.  For example, once I lied to get myself out of a difficult
situation, I then found myself lying again and again–compelled to lie to
cover my last lie.  Indeed, before I found His Gospel,
I was condemned to death and an eternity of hell fire and my wicked
actions declared this to me.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/13/5&quot;&gt;Luke 13:5&lt;/a&gt;)&lt;/p&gt;

    &lt;p&gt;I was once condemned by my own sin, and I knew it.&lt;/p&gt;

    &lt;p&gt;Since finding His Gospel, I have been changed
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/2co/5/17&quot;&gt;2Cor 5:17&lt;/a&gt;).
I am no longer the liar that I was.  I no longer steal
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/1co/6/11&quot;&gt;1Cor 6:11&lt;/a&gt;).
Instead, He has filled me with peace, with
patience, with love, joy and more.  Many of these &lt;a href=&quot;https://www.blueletterbible.org/kjv/gal/5/22&quot;&gt;unspeakable
gifts&lt;/a&gt; I never knew
I was missing.&lt;/p&gt;

    &lt;p&gt;For this, I am thankful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am thankful that I even have a family.  Were it not for God’s word,
my wife and I would’ve split many years ago–long before we ever had our
first child.&lt;/p&gt;

    &lt;p&gt;If you are struggling in your marriage, may I recommend that Jesus
is a wonderful marital counselor?  Obedience to His word is what kept
my wife and I together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am thankful to the God who has given me the opportunity to work on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s,
even when I started with a &lt;em&gt;very&lt;/em&gt; limited budget.&lt;/p&gt;

    &lt;p&gt;It’s often said that it takes money to make money.  Yet if God is
characterized as a Lord who can make money from nothing, and accepts
this description of Himself, then there’s something for
the poor to learn from Him.
(&lt;a href=&quot;https://www.blueletterbible.org/kjv/mat/25/24&quot;&gt;Matt 25:24&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am thankful to have met so many wonderful people while working on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
and posting on the &lt;a href=&quot;http://zipcpu.com/&quot;&gt;ZipCPU blog&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Thank you to my supporters.&lt;/p&gt;

    &lt;p&gt;Thank you to everyone who has corresponded with me and encouraged me in
this endeavor.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Indeed, I have much to be thankful for.&lt;/p&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;Thank you!&lt;/h1&gt;

&lt;p&gt;May I suggest you also take a moment to consider what you are thankful for?&lt;/p&gt;

&lt;p&gt;Happy Thanksgiving!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;O give thanks unto the LORD; for He is good: for His mercy endureth forever (Ps 136:1)&lt;/em&gt;</description>
        <pubDate>Thu, 23 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/blog/2017/11/23/thankyou.html</link>
        <guid isPermaLink="true">http://zipcpu.com/blog/2017/11/23/thankyou.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Measuring the frequency response of a filter under test</title>
        <description>&lt;p&gt;We’ve slowly been building several
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filtering&lt;/a&gt;
Verilog implementations on
&lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;.  For example, we’ve
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;presented a generic&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;Finite Impulse Response (FIR)&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipcPU/dspfilters/blob/master/rtl/genericfir.v&quot;&gt;implementation&lt;/a&gt;,
and even a
&lt;a href=&quot;/dsp/2017/09/29/cheaper-fast-fir.html&quot;&gt;cheaper version&lt;/a&gt;
of the same.  I’d like to move forward and present some other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
implementations as well, but I haven’t finished presenting the test bench for
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
I have presented.  Therefore, we’ve also been slowly building
up to a test bench by building a
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;test harness&lt;/a&gt;
that we can use to prove that not only these two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
designs work as designed, but also that other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
designs we might build later work as designed.&lt;/p&gt;

&lt;p&gt;In our &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;last post discussing&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filtering&lt;/a&gt;,
we presented a &lt;a href=&quot;https://github.com/ZipcPU/dspfilters/blob/master/bench/cpp/filtertb.h&quot;&gt;generic test
harness&lt;/a&gt;
that can be used when building test benches for various
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital logic filters&lt;/a&gt;.
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;This test harness&lt;/a&gt;
verified a number of things regarding a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
to include measuring the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
as well as making sure that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
internal implementation didn’t overflow.&lt;/p&gt;

&lt;p&gt;For the verification engineer, this isn’t enough.&lt;/p&gt;

&lt;p&gt;Why not?&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Lowpass FIR requirements&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-lpf-design.png&quot; alt=&quot;Design requirements of an LPF filter&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Well simply because the &lt;em&gt;requirements&lt;/em&gt; for a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
such as might be shown in Fig 1,
are specified in terms of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;–&lt;em&gt;not&lt;/em&gt;
its &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
If you want to answer the question of whether or not a particular
implementation meets your criteria, then you need to &lt;em&gt;measure&lt;/em&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
you are creating.
Otherwise how will you be certain that your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
works as advertised?  That it accomplishes the function it was designed to
perform?&lt;/p&gt;

&lt;p&gt;Today, therefore, let’s spend some time discussing what the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt; of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is, why it is important, and then examine how one might go about measuring it.&lt;/p&gt;

&lt;h2 id=&quot;the-frequency-response-function&quot;&gt;The Frequency Response Function&lt;/h2&gt;

&lt;p&gt;There’s really some wonderful math underpinning
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
in general.  Perhaps you remember some of this from our earlier
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;“What is a Filter” discussion&lt;/a&gt;.
Today, we’ll just outline that math, and then show how it naturally leads to
this concept of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The roots of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
lie within the concept of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_system&quot;&gt;linear
operation&lt;/a&gt;
on a data stream.  If that &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_system&quot;&gt;linear
operation&lt;/a&gt;,
whatever it is, also happens to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Shfit-invariant_system&quot;&gt;shift
invariant&lt;/a&gt;
then the operation can be described by a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;
between the input, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt; and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
function, &lt;code class=&quot;highlighter-rouge&quot;&gt;h[n]&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-convolution-raw.png&quot; alt=&quot;Formula for an FIR Convolution&quot; width=&quot;254&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When dealing with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
that digital logic can create, reality lays two additional constraints onto
these &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;.
First, &lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;k&amp;lt;0&lt;/code&gt; must be zero.  This is another way of saying that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt; is
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Causal_filter&quot;&gt;causal&lt;/a&gt;&lt;/em&gt;–it doesn’t
know anything about inputs that haven’t yet been received.  The second
criteria is that &lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt; must be an integer (i.e.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Quantization_(signal_processing)&quot;&gt;quantized&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We’re also going to assume a third criteria for today’s discussion, which is
that &lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt; must be zero for &lt;code class=&quot;highlighter-rouge&quot;&gt;k&amp;gt;= N&lt;/code&gt; samples.  This is another way of saying
that &lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt; must only be non-zero for a &lt;em&gt;finite&lt;/em&gt; number of samples, from
&lt;code class=&quot;highlighter-rouge&quot;&gt;k=0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;k=N-1&lt;/code&gt;.  For this reason, this type of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;Finite Impulse Response
(FIR)&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this is just a quick background refresher regarding the properties
of the types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
we are looking at.  These properties lead into the development of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;&lt;/em&gt;
function.&lt;/p&gt;

&lt;p&gt;The idea of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is fairly simple: what response does the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; return when a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;
is fed to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
as its input.&lt;/p&gt;

&lt;p&gt;By &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;,
I mean more than the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;Euler’s formula&lt;/a&gt; Wikipedia
discusses under that term.  Instead, I am referring to a function such as&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-complex-expn.png&quot; alt=&quot;f[n] = e^{j(2pi fn + theta)}, formula for a complex exponential of unit magnitude&quot; width=&quot;189&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This function has a unit magnitude and it steps forward by a constant phase
shift between samples.  It expands, via
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;Euler’s formula&lt;/a&gt;,
into &lt;a href=&quot;https://en.wikipedia.org/wiki/Sine_wave&quot;&gt;sine&lt;/a&gt;
and cosine components–we’ll use this property later on.&lt;/p&gt;

&lt;p&gt;So let’s find out what happens to an input of this type when our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is applied to it.&lt;/p&gt;

&lt;p&gt;We’ll start with the equation for a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_system&quot;&gt;linear&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Shfit-invariant_system&quot;&gt;shift-invariant&lt;/a&gt;
system: a &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-convolution-raw.png&quot; alt=&quot;Formula for an FIR Convolution&quot; width=&quot;254&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll then replace &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt; with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt; function,
&lt;code class=&quot;highlighter-rouge&quot;&gt;exp(-j 2pi fn)&lt;/code&gt;, for some frequency &lt;code class=&quot;highlighter-rouge&quot;&gt;-1/2 &amp;lt; f &amp;lt; 1/2&lt;/code&gt;,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-convolve-cpxexpn-a.png&quot; alt=&quot;Convolution with a complex exponential&quot; width=&quot;293&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and then we’ll simplify and rearrange terms,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-convolve-cpxexpn-b.png&quot; alt=&quot;Convolution with a complex exponential&quot; width=&quot;307&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Did you notice how, after we rearranged the terms, the summation no longer
depends upon time, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, anymore?
Instead, the internal part of the summation depends only upon &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;–the index
variable for the summation.  In other words, the value within the summation
depends upon the frequency, &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;, and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
coefficients (it’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt;)
alone, and once summed the value is a constant for all time, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;.  We’ll use
&lt;code class=&quot;highlighter-rouge&quot;&gt;H(e^{j2pi f})&lt;/code&gt; to represent this constant,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-defn-frequency-response.png&quot; alt=&quot;H(e^j2pif)=sum h[k] e^-j2pi f&quot; width=&quot;307&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;H(e^{j2pi f})&lt;/code&gt; function is called the
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;&lt;/em&gt;
function of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
function allows us to represent the output of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
whenever the input is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;,
by that same input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;
times the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
function, or&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-convolve-cpxexpn-c.png&quot; alt=&quot;Convolution with a complex exponential results in a complex exponential times the frequency response&quot; width=&quot;249&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But, why is this so important?&lt;/p&gt;

&lt;p&gt;It’s important simply because we now have a way of describing how our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
interacts with its inputs in a fashion that is &lt;em&gt;independent&lt;/em&gt; of the input.
Further, the operation is a straight multiply–much simpler than the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;
we started with.  Hence, any input that can be described as a sum of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponentials&lt;/a&gt;
(that’s all of them), will have an output which is also described by a sum of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponentials&lt;/a&gt;–only
those exponentials will now have a weighting given by &lt;code class=&quot;highlighter-rouge&quot;&gt;H(e^{j2pi f})&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Indeed, this representation is so important that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
are most often specified by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
they are required to achieve.  Determining the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;our filter&lt;/a&gt;
actually implements, and hence whether or not it has achieved its
design requirements, is the purpose of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
measurement function of our &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;generic filter test
harness&lt;/a&gt;–the
topic for today’s discussion.&lt;/p&gt;

&lt;h2 id=&quot;how-shall-we-calculate-it&quot;&gt;How shall we calculate it?&lt;/h2&gt;

&lt;p&gt;The common means of calculating the &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency
response&lt;/a&gt;
of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; is to take a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;
of its &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
This follows directly from the discussion above developing what a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
is in the first place.  The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;Fast Fourier Transform
(FFT)&lt;/a&gt;
is a computationally efficient means of evaluating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
from an &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
Chances are you will need to do this as part of your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
design process.&lt;/p&gt;

&lt;p&gt;When you do so, you’ll want to make certain that your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; size is about 8-16x
greater than the number of taps
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;coefficients&lt;/a&gt;) in your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
More than 16x usually doesn’t buy you anything, and anything less than 4x
hides details.  No &lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window
function&lt;/a&gt;
is required, and indeed no
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window function&lt;/a&gt;
should be used in this process.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;coefficients&lt;/a&gt;
themselves should have any necessary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Window_function&quot;&gt;window&lt;/a&gt;
built into them.&lt;/p&gt;

&lt;p&gt;This common method works great until you want to know whether or not your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
as implemented achieves the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
you are expecting.  To actually &lt;em&gt;measure&lt;/em&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt; a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; produces requires
actually placing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;
input into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
and then plotting the output that you receive as a result.  The details of
how to do this using
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
will be discussed in our next section.&lt;/p&gt;

&lt;h2 id=&quot;filter-harness-code-for-measuring-the-frequency-response-of-a-filter&quot;&gt;Filter Harness Code for measuring the Frequency Response of a Filter&lt;/h2&gt;

&lt;p&gt;At this point, we’ve now explained both what a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
function is, as well as how it is commonly calculated (not measured).  Let’s
now look into how we might actually &lt;em&gt;measure&lt;/em&gt; this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
given a particular &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
implementation that may, or may not, be working.&lt;/p&gt;

&lt;p&gt;Since the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
implementations we are working with are all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
implementations, then we’ll have to do a touch of pre-work in order to estimate
their &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;
input.&lt;/p&gt;

&lt;p&gt;The first part of this pre-work will be to deal with the phase of our
measurement.  You may recall from above that if&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-x-is-cpxexpn.png&quot; alt=&quot;x[n] = exp^j2pi fn&quot; width=&quot;127&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-convolve-cpxexpn-c.png&quot; alt=&quot;Recap eqns above&quot; width=&quot;249&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For our testing below, we’ll define &lt;code class=&quot;highlighter-rouge&quot;&gt;x[0]&lt;/code&gt; to be the first sample in any
individual test.  Yes, I know, this redefines time zero from one test input
to the next, but it does make a good reference for developing the inputs.
What this means, though, is that &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]&lt;/code&gt; isn’t defined entirely by our new
values until &lt;code class=&quot;highlighter-rouge&quot;&gt;y[N-1]&lt;/code&gt;
since anything earlier would reference an &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&amp;lt;0&lt;/code&gt; that might have
been part of our last test vector.  Worse,
the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;response&lt;/a&gt;
at &lt;code class=&quot;highlighter-rouge&quot;&gt;y[N-1]&lt;/code&gt; has a phase term within it in addition to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
term we want.&lt;/p&gt;

&lt;p&gt;This initial phase term needs to be removed if we want to measure &lt;code class=&quot;highlighter-rouge&quot;&gt;H(e^j2pi f)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So let’s suppose we instead provided an input of&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-x-is-cpxexpn-w-phase.png&quot; alt=&quot;x=e^j2pifn + phi&quot; width=&quot;184&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Our output at &lt;code class=&quot;highlighter-rouge&quot;&gt;y[N-1]&lt;/code&gt; would then be&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-convolve-cpxexpn-f.png&quot; alt=&quot;y[n]=e^j2pifn e^jphi H()&quot; width=&quot;375&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we define &lt;code class=&quot;highlighter-rouge&quot;&gt;phi&lt;/code&gt; to be&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-phi-cancels-cpxexpn.png&quot; alt=&quot;phi=-j2pif(N-1)&quot; width=&quot;211&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-y-is-freq-response.png&quot; alt=&quot;y[N-1]=H()&quot; width=&quot;246&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;as desired.&lt;/p&gt;

&lt;p&gt;The next problem to deal with is the fact that our filter is only
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
valued: both the inputs, the coefficients, and the multiplies only
work on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
numbers.  How then shall we get the results from a complex operation?
In this case, we need to break &lt;code class=&quot;highlighter-rouge&quot;&gt;H(e^{j2pi f})&lt;/code&gt; into it’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Imaginary_number&quot;&gt;imaginary&lt;/a&gt;
components using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;Euler’s formula&lt;/a&gt;:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-y-is-freq-response-split.png&quot; alt=&quot;y[N-1]=RH()+IH()&quot; width=&quot;482&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;These two terms contain only &lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
numbers and &lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
operators, even though the measured result will be complex.  The first term
has a cosine wave as an input, the second a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sine_wave&quot;&gt;sine
wave&lt;/a&gt;.
The second term needs to be multiplied by &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Imaginary_number&quot;&gt;square root of negative one&lt;/a&gt;,
upon completion.  However, by splitting this filter into two parts, one for
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
part of the input and one for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Imaginary_number&quot;&gt;imaginary&lt;/a&gt;
part of the input, we can now generate this complex value with two
test vectors–both of which are
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt; and so both of which
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;our implementation&lt;/a&gt;
can process.&lt;/p&gt;

&lt;p&gt;Hence, for every frequency we are interested in (except zero), we’ll apply
two test vectors to our input and examine the resulting output.&lt;/p&gt;

&lt;p&gt;Now that we have a vision for how to proceed, it’s now time to build our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
estimation function.  This will be part of the
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; based &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test
harness&lt;/a&gt;
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;we discussed earlier&lt;/a&gt;.
As such, it is a C++ function (not a Verilog module),
but yet we will use it to evaluate our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/tree/master/rtl&quot;&gt;various Verilog filter
implementations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further, we’ll build this response estimator using the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;test harness&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; function–a function that returns the response of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to a given test input.  As
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;we discussed last time&lt;/a&gt;,
this function differs from the similar &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; function in some critical ways.
First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; function resets the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to a known initial state, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; just uses the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
in the state it was last left in.  Second, the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; function quietly adds
input samples to compensate for any delay internal to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
whereas the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; function does not.  As a result, we’ll need to add these
extra samples ourselves below.  Still, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; function will give
us some confidence that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
will properly and naturally flush its state from one input to the
next–something the rest of the
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;test harness&lt;/a&gt;
has yet to verify.&lt;/p&gt;

&lt;p&gt;The parameters to this function are much as you might expect.  There’s the
number of frequencies, &lt;code class=&quot;highlighter-rouge&quot;&gt;nfreq&lt;/code&gt;, that you’d like to use to cover the frequency
band from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Nyquist_frequency&quot;&gt;Nyquist
frequency&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;1/2&lt;/code&gt;.  As I mentiond above, this number should be between 8x and 16x the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
length.  There’s also a
&lt;a href=&quot;http://en.cppreference.com/w/cpp/numeric/complex&quot;&gt;complex&lt;/a&gt;
array pointer, &lt;code class=&quot;highlighter-rouge&quot;&gt;rvec&lt;/code&gt;, to hold the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
once it’s been estimated.
Those are both straightforward.  Likewise the optional filename, &lt;code class=&quot;highlighter-rouge&quot;&gt;fname&lt;/code&gt;, to
save any results into is also straightforward.  Perhaps the only remarkable
item is the magnitude of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sine_wave&quot;&gt;sine wave&lt;/a&gt;,
captured in &lt;code class=&quot;highlighter-rouge&quot;&gt;mag&lt;/code&gt;.  A &lt;code class=&quot;highlighter-rouge&quot;&gt;mag&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0&lt;/code&gt; will cause us to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sine_wave&quot;&gt;sine wave&lt;/a&gt;
having the maximum integer magnitude the number of input bits, &lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt;, will
allow.  Anything less than one will scale the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sine_wave&quot;&gt;sine&lt;/a&gt;
and cosine waves proportionally.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfreq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;COMPLEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll need to declare some variables to make this happen.  The first,
&lt;code class=&quot;highlighter-rouge&quot;&gt;nlen&lt;/code&gt; is the number of coefficients in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
The next, &lt;code class=&quot;highlighter-rouge&quot;&gt;dlen&lt;/code&gt;,
is the same but captures the number of data samples we’ll need to send to
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; and so it requires the number of delay cycles between
any input sample and the first associated output from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; pointer to point to an
array into which we can store both our outgoing data (test vectors to be sent
to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;),
and incoming data (the response from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to the test vector).  Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt; will hold the value of our frequency step
size.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfreq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we discussed above, &lt;code class=&quot;highlighter-rouge&quot;&gt;mag&lt;/code&gt; is the requested magnitude of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sine_wave&quot;&gt;sine wave&lt;/a&gt;
test vector, running from 0.0 to 1.0.  We’ll use that number here to scale the
actual magnitude we’ll use for our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;
input vectors.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, we can start walking through frequencies and making measurements.
As I mentioned above, this isn’t the most efficient means of &lt;em&gt;calculating&lt;/em&gt; a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;,
but this will be a means of &lt;em&gt;measuring&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dtheta&lt;/code&gt; is the phase difference from one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;
sample to the next.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfreq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dtheta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll begin our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;
sample sequence at the phase we calculated above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtheta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll walk through the input vector and set it based upon a cosine
function.  This test vector should give us one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
component of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtheta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; to this
test vector, we’ll know the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
component of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
at this particular frequency.  Note how we remove the magnitude scale
factor below as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then repeat this same process for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sine_wave&quot;&gt;sine wave&lt;/a&gt; input
in order to get
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Imaginary_number&quot;&gt;imaginary&lt;/a&gt;
component of our measured
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;.
We’ll do this for all but the zero frequency, which
is already known to be zero for any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real&lt;/a&gt;
coefficients.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtheta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtheta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we finish our loop across frequencies, all that’s left is to close up,
free any data we’ve allocated, and we’re done.  This includes writing the
measured
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
out to a file–but that section is &lt;a href=&quot;/dsp/2017/07/24/dsp-debugging.html&quot;&gt;simple enough that we can skip any
discussion&lt;/a&gt;
of that part.  See the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;code for the overall test harness&lt;/a&gt;,
or the &lt;a href=&quot;/dsp/2017/07/24/dsp-debugging.html&quot;&gt;discussion of how to debug a DSP
algorithm&lt;/a&gt;
should you have any questions about this step.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;how-well-does-this-approach-work&quot;&gt;How well does this approach work?&lt;/h2&gt;

&lt;p&gt;Fig 2 below compares three
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
functions against each other.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. An example estimated frequency response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/freq-resp.png&quot; alt=&quot;A Chart of the Measured vs Calculated frequency response&quot; width=&quot;801&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;All three are measures of the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; coefficients,
only measured in different fashions.  The first, the estimated response, is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
derived from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency
response&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;estimation
code&lt;/a&gt;
we just presented above.  The second is the result of an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
applied to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/twelvebfltr.m&quot;&gt;coefficients&lt;/a&gt;.  The third line above shows the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
as designed, but before we truncated any of the coefficients
to twelve bits.&lt;/p&gt;

&lt;p&gt;Perhaps a more revealing chart, however, would be Fig 3 below, which compares the same functions in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decibel&quot;&gt;Decibels&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Examining a filter&#39;s frequency response in Decibel&#39;s&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/freq-resp-dB.png&quot; alt=&quot;A Chart of the Measured vs Calculated frequency response, in decibel&#39;s&quot; width=&quot;793&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this example, you can see the effect that truncating the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
coefficients had on our initial design.&lt;/p&gt;

&lt;p&gt;In both examples, however, the calculated and the estimated charts lie on
top of each other–giving us reason to believe that our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;method
above&lt;/a&gt;
is trustworthy.&lt;/p&gt;

&lt;p&gt;However, we’ll need to come back to this another day to discuss how to
actually implement and test this on a particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
In particular, we’ll apply this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;generic test harness&lt;/a&gt;
to our &lt;a href=&quot;/dsp/2017/09/15/fastfir.md&quot;&gt;generic filter&lt;/a&gt;.
Indeed, that’s been our whole purpose all along: generating the testing
infrastructure we’ll need to know that an implemented
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
will work as designed.&lt;/p&gt;

&lt;p&gt;Until that point, let me quickly ask, did you notice how our test vectors
above used &lt;em&gt;quantized&lt;/em&gt; sine and cosine’s?  Given that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
itself is
&lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;quantized&lt;/a&gt;, it really
only makes sense that we would provide it with
&lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;quantized&lt;/a&gt;
inputs.  Be aware that, as a result, the measured
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
may differ from the predicted or calculated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;–even
though it didn’t clearly differ in Figures 2 or 3 above.&lt;/p&gt;

&lt;p&gt;Once we’ve proven that our
&lt;a href=&quot;/dsp/2017/09/15/fastfir.md&quot;&gt;generic filter&lt;/a&gt;
does indeed work as designed, we can then move on and develop some of the
more complicated filters.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Lest haply, after he hath laid the foundation, and is not able to finish it, all that behold it begin to mock him (Luke 14:29)&lt;/em&gt;</description>
        <pubDate>Wed, 22 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/dsp/2017/11/22/fltr-response.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/11/22/fltr-response.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Building a prefetch module for the ZipCPU</title>
        <description>&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: Fundamental CPU loop&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cpu-basic-loop.svg&quot; alt=&quot;CPU Loop: Read instruction, do instruction, repeat&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At its most basic level, any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
works by fetching instructions from memory,
acting upon those instructions, and repeating the process over and over
again as shown in Fig 1.  The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is no different.  It also needs to fetch instructions from memory and then act
upon them in a tight loop.&lt;/p&gt;

&lt;p&gt;However, while the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; accomplishes
this same basic loop, the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelining&lt;/a&gt;
within the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; might render these steps
a touch more difficult to recognize.  Indeed, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; splits up the “do-instruction”
into multiple pipeline steps,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;while (!halted)
	Fetch instruction
	Decode instruction
	Read operand registers
	Do instruction
	Write results to registers&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as illustrated in Fig 2.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2: The ZipCPU Pipeline Structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.png&quot; alt=&quot;ZipCPU Pipeline Structurre&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ve &lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;already discussed&lt;/a&gt;
how the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
handles the &lt;em&gt;do instruction&lt;/em&gt; stage within its &lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;arithmetic logic
unit&lt;/a&gt;.
We’ve also discussed how the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
handles the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;signaling between its pipeline
stages&lt;/a&gt;.
What we haven’t discussed is how the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
reads instructions from memory.  This is accomplished by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; unit.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; is that portion of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; that reads
instructions from memory and presents those instructions to the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; for
execution.  While today’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;Wikipedia&lt;/a&gt;
author’s argue that there’s a difference between an instruction fetch, which
gets the next instruction from memory, and a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;, which fetches an
instruction before it is needed, I’m going to equate the two terms under the
single name &lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; for
simplicity.  The result of this abuse of terminology will be that I can describe
all instruction fetch modules with the same term, but also that this subtle
difference in meaning will be lost.&lt;/p&gt;

&lt;p&gt;Using this common term, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; is a critical
component of any &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
because the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can only run as fast as it has instructions.  A good
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;
unit, therefore, is optimized to keep the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
pipeline filled with instructions.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; is so important to
how the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; runs that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has had four
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;
units over time.  The first of these,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch.v&lt;/a&gt;,
simply fetches a single instruction and waits for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to ask for the next instruction.  This is the code we shall discuss below.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pipefetch.v&quot;&gt;next prefetch
version&lt;/a&gt;
tried to keep the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
pipeline full with memory requests while
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;caching&lt;/a&gt;
a window of memory.  This
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pipefetch.v&quot;&gt;prefetch&lt;/a&gt;
has since been abandoned in favor of a more traditional
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;combined prefetch and instruction cache
version&lt;/a&gt;.
(The &lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;
benchmark was part of the motivation for this change.) The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;fourth
version&lt;/a&gt;,
one that fetches two instructions at a time, was written
recently for a &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;low logic application&lt;/a&gt;.
It improves upon the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;simple
prefetch&lt;/a&gt;
by fetching two instructions back to back.&lt;/p&gt;

&lt;p&gt;Today, though, we’re going to discuss the first of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;
units–the one that fetches only a single instruction at a time.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can be caused to use this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;
routine by defining the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt; option within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/cpudefs.v&quot;&gt;cpudefs.h&lt;/a&gt;
file.
Going from this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;simple
prefetch&lt;/a&gt;
to a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;better
prefetch&lt;/a&gt;
requires adding a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;cache&lt;/a&gt;
and some other things–but it’s still built upon the basis of how to build a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;single-instruction prefetch
unit&lt;/a&gt;
in the first place.  For these reasons, the simple
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;single-instruction
prefetch&lt;/a&gt;
is well worth studying and understanding.&lt;/p&gt;

&lt;p&gt;Further, since the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; module is a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone master&lt;/a&gt;,
this will be another opportunity to discuss how to build a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone master&lt;/a&gt;
interface.  While the &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone slave
interface&lt;/a&gt;
is fairly simple, the
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;master interface&lt;/a&gt;
can be a touch more complicated.  When we’re done, we’ll even
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally prove&lt;/a&gt;
that this interface works, thus showing you how to build a more generic
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone master&lt;/a&gt;.
(We presented another version of
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;how to build a Wishbone
master&lt;/a&gt;
earlier, as part of our
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;
discussion.)&lt;/p&gt;

&lt;h2 id=&quot;the-cpu-interface&quot;&gt;The CPU Interface&lt;/h2&gt;

&lt;p&gt;Any &lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; module
must support two interfaces: both an interface to memory, as well as
an interface to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
Both of these interfaces are shown in Fig 3.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: The two interfaces to a prefetch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/prefetch-interface.svg&quot; alt=&quot;A prefetch must support both an interface to a CPU and an interface to memory&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We discussed the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone interface&lt;/a&gt;
at length in an earlier article.  Today, we’ll introduce the interface with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
If you remember our prior discussion on &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline
strategies&lt;/a&gt;,
then you will probably recognize several examples of handshaking
between pipeline stages as we go along.&lt;/p&gt;

&lt;p&gt;Internally, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
keeps track of the address of the next instruction in a register known as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;.  This
counter normally changes in a one-up fashion from one instruction to the next.
The common exception to this rule is when a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
takes place.  Such a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
may be the result of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction, a jump to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt_handler&quot;&gt;interrupt service routine
(ISR)&lt;/a&gt;,
or even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
reset request.  In all of these examples, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
needs to command a memory read from a brand-new address of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; unit.&lt;/p&gt;

&lt;p&gt;Well, not quite.  If you look through the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;source code&lt;/a&gt;,
you’ll find the address of the “current” instruction wandering
through the various pipeline stages as one of several registers:
&lt;code class=&quot;highlighter-rouge&quot;&gt;pf_pc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pf_instruction_pc&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_pc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;op_pc&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;alu_pc&lt;/code&gt;.  The actual register that stores the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt; upon instruction
completion is either the &lt;code class=&quot;highlighter-rouge&quot;&gt;ipc&lt;/code&gt; (supervisor 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt; register) or the
&lt;code class=&quot;highlighter-rouge&quot;&gt;upc&lt;/code&gt; (user &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt; register).
Inside the prefetch, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pf_pc&lt;/code&gt; is renamed as the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt; address request, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_pc&lt;/code&gt;,
and the address of the returned instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_pc&lt;/code&gt;, is relabeled within
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
as &lt;code class=&quot;highlighter-rouge&quot;&gt;pf_instruction_pc&lt;/code&gt;.&lt;/p&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4: The Prefetch State Machine&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/prefetch-single-flowchart.svg&quot; alt=&quot;The simple one instruction prefetch state diagram&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;’s
side of this interaction, nothing begins until the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
raises the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; signal.  When this signal is valid, the address of
the instruction that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
wants is captured in the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_pc&lt;/code&gt; input.  The
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
must respond to this input by fetching the instruction from the memory
address given by this &lt;code class=&quot;highlighter-rouge&quot;&gt;i_pc&lt;/code&gt; input.&lt;/p&gt;

&lt;p&gt;Once the new instruction has been read, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
needs to do several things.  First, it places that new instruction in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_insn&lt;/code&gt; output.  Second, it places the instruction’s address into the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_pc&lt;/code&gt;
register.  Finally, it sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; flag to let the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
know that there’s a valid instruction ready for it.  This flag is part of
a &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;simple handshake&lt;/a&gt;
with the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;.
As a result, it needs to be held high until the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
also raises the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_stall_n&lt;/code&gt; line (a ready signal) to indicate that it is
ready to read an instruction.&lt;/p&gt;

&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;(o_valid)&amp;amp;&amp;amp;(i_stall_n)&lt;/code&gt; are both true, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
needs to drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; signal and fetch the next instruction from the
address given by &lt;code class=&quot;highlighter-rouge&quot;&gt;o_pc+1&lt;/code&gt; (counting in 32-bit words).&lt;/p&gt;

&lt;p&gt;This continues until another
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
takes place.  When that happens, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
will communicate this to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
by raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; signal.  In response, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
will drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; line
(even before &lt;code class=&quot;highlighter-rouge&quot;&gt;i_stall_n&lt;/code&gt; is true), and fetch the next instruction and so the
cycle continues.&lt;/p&gt;

&lt;p&gt;This is the basics of how this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;simple
prefetch&lt;/a&gt;
works.  As with any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
project, however, we’ll need to pay close attention to the details.&lt;/p&gt;

&lt;p&gt;For example, what happens when the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
returns an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;?
Suppose, for example, that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
tried to &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
to a non-existent memory address.  In this case, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
would return an &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;, and so the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
needs to return everything as before, only in this case it also sets an
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt; flag so that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
can recognize and properly respond to the invalid instruction.&lt;/p&gt;

&lt;p&gt;Another corner case might seem more relevant for a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;cache&lt;/a&gt;
interaction than &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this simple
prefetch&lt;/a&gt;,
but it’s actually still relevant.  In this example, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
instructs (or is instructed) to clear its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;cache&lt;/a&gt;.
It may be, for example, that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
is halted and under the control of the debugger.  The debugger may have
rewritten the memory the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
is about to execute–but the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
needs to know that the instruction that it has already read is no longer valid.
This is the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; line for even this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;simple prefetch
module&lt;/a&gt;.
When raised, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
is telling the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
that any instruction that has been read and is waiting for the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
to issue is invalid, and thus needs to be read again.&lt;/p&gt;

&lt;p&gt;Finally, what happens when the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
is given a new address while it is in the middle of requesting another
address?  In that example, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
needs to abandon (abort) its current transaction and initiate a new read to
get the newly requested address.&lt;/p&gt;

&lt;p&gt;These subtle details help to describe some of the more interesting cases when
dealing with this (otherwise) &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;simple
prefetch&lt;/a&gt;.
However, the operation is still simple enough that we might try to build
it in a straightforward fashion–the topic of our next section.&lt;/p&gt;

&lt;h2 id=&quot;initial-attempt&quot;&gt;Initial Attempt&lt;/h2&gt;

&lt;p&gt;Now that we know how this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
module is supposed to interact with both the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
and the rest of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
let’s outline some of the detailed basics of how this might take place.&lt;/p&gt;

&lt;p&gt;The process starts out with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
idle.  Similarly, on any reset request we’ll want to bring the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
back to this idle state again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	o_wb_cyc &amp;lt;= 1&#39;b0;
initial	o_wb_stb &amp;lt;= 1&#39;b0;
initial	o_valid &amp;lt;= 1&#39;b0;
always @(posedge i_clk)
if (i_reset)
	o_wb_cyc &amp;lt;= 1&#39;b0;
	o_wb_stb &amp;lt;= 1&#39;b0;
	o_valid &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since these two lines qualify all of the other
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus output lines&lt;/a&gt;
(prefixed herein with &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_*&lt;/code&gt;), all it takes to
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;end a bus cycle&lt;/a&gt;
is to lower these two wires.&lt;/p&gt;

&lt;p&gt;What about any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction in process when this reset is received?  That was part of our
discussion when we worked through a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal description&lt;/a&gt;
of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;.
Our conclusion, from that discussion, was that it is important
to be able to abort a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction at any stage in that transaction.  Were we in the middle of a
transaction, the logic above would simply abort that transaction as we’ve
discussed.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; line initialized above isn’t part of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;interaction&lt;/a&gt;.
As we discussed in the last section, this is the signal to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
that a valid instruction is ready to be read from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;.
This signal also needs to be reset, along with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;interaction&lt;/a&gt;, so we
reset the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; at the same time above.&lt;/p&gt;

&lt;p&gt;The next step is to recognize when a new transaction needs to begin.  There
are three basic conditions indicating that we want to start a new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;interaction&lt;/a&gt;.
The first is if the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
wants us to &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
to a new address.  In this case, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt; will
have raised the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; signal and placed the new address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_pc&lt;/code&gt;
input.  A new transaction also needs to begin any time the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
accepts the instruction the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
presented to it.  This condition is indicated by both an instruction being
valid, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;, at the same time the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
is not stalled, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_stall_n&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;end else if (!o_wb_cyc)
begin
	if ((i_new_pc)||((o_valid)&amp;amp;&amp;amp;(i_stall_n)))
	begin
		o_wb_cyc &amp;lt;= 1&#39;b1;
		o_wb_stb &amp;lt;= 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The address appropriate for this new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;request&lt;/a&gt;.
depends upon the reason for the request.  If the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
gives us a new instruction address, indicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt;, then that
address is the memory address we need to fetch.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		if (i_new_pc)
			o_wb_addr &amp;lt;= i_pc;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if the last instruction was just accepted, then we want to
grab the next instruction–found one address later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		else if ((o_valid)&amp;amp;&amp;amp;(i_stall_n))
			o_wb_addr &amp;lt;= o_wb_addr+1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In each of these cases, the output instruction needs to be marked as
no longer valid.  If this were a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
every other stage in the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.
would be marking their data as invalid as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		o_valid &amp;lt;= 1&#39;b0;
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final section of this overview pseudocode discussion involves how the
controller should respond while a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;interaction&lt;/a&gt;
is taking place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;end else begin // if (o_wb_cyc)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first item to pay attention to during a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;transaction&lt;/a&gt;
is to insure that only one transaction request is issued.  (Other
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
prefetches issue multiple requests in quick succession, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this
prefetch&lt;/a&gt;
only issues the one request at a time.)  From the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus definition&lt;/a&gt;,
we know that a transaction request has been accepted any time the master’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; signal is high and the slave’s &lt;code class=&quot;highlighter-rouge&quot;&gt;STALL&lt;/code&gt; signal is low, or
&lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt;.  We can short-circuit this full test in this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;simple implementation&lt;/a&gt;
by just setting &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; low anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stall&lt;/code&gt; is
low during a bus transaction.  Should &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stall&lt;/code&gt; be low when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt;
is already zero, then this statement will have no effect–as desired.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	if (!i_wb_stall)
		o_wb_stb &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second item to deal with is when to end our request.  In this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;single item&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone master&lt;/a&gt;
the transaction ends on the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
return.  Hence &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is returned to zero following any &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; signal
from the memory slave peripheral.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	if (i_wb_ack)
	begin
		o_wb_cyc &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On this same clock, we can set the value of the instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_insn&lt;/code&gt;, to be
sent to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
as well as the valid flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;, to indicate this instruction is valid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		o_insn &amp;lt;= i_wb_data;
		o_valid &amp;lt;= 1&#39;b1;
	end
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the basic outline of how this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;
works.  When we get into the details below, you will likely find them very
similar to this discussion above.  However, because breaking this one
giant “always” block into multiple processes can &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;reduce our logic
requirements&lt;/a&gt;,
you may not necessarily recognize the code above in the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;code&lt;/a&gt;
presented below.&lt;/p&gt;

&lt;p&gt;You’ll also see another difference below, associated with having to deal with
some of the subtle details of the corner cases–things you may not expect
unless you’ve had your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
fail because you haven’t dealt with them.  These will be the topic of
the next section.&lt;/p&gt;

&lt;h2 id=&quot;the-actual-prefetch-code&quot;&gt;The Actual Prefetch Code&lt;/h2&gt;

&lt;p&gt;At this point, we’ve outlined how this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;
needs to interact with both the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
and the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.
We’ve also outlined the basics of the module we’d like to
implement above.  The task left before us now is to finally implement the
details of this module, and then to prove that it works below.  In other words,
it’s now time to get specific about those corner cases.&lt;/p&gt;

&lt;p&gt;Since any
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
is a read-only structure, we’ll set the
bus wires associated with writing to the bus to zeros, although only
the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; signal will be relevant since &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; is ignored unless
we are within a write transaction and &lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(o_wb_we)&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	o_wb_we = 1&#39;b0;
	assign	o_wb_data = 32&#39;h0000;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Having dealt with the constants, we can now
turn our focus to the actual implementation of the logic
above.  We’ll start with what’s left of the giant always block controlling
the bus wires &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt;.  As before, we’ll start by
initializing ourselves into an idle state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	o_wb_cyc = 1&#39;b0;
	initial	o_wb_stb = 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unlike before, we’ll also return to this idle state upon any bus
acknowledgement or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
These two signals need to be qualified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line, since in our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;last wishbone discussion&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;we discussed&lt;/a&gt;
how either the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_err&lt;/code&gt; signal might be true on the clock
cycle after &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is dropped as part of an abort.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_reset)||((o_wb_cyc)&amp;amp;&amp;amp;((i_wb_ack)||(i_wb_err))))
		begin
			// End any bus cycle on a reset, or a return ACK
			// or error.
			o_wb_cyc &amp;lt;= 1&#39;b0;
			o_wb_stb &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next task is to start a new bus request.  There are several reasons for
starting a new bus request:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If the last instruction was accepted, &lt;em&gt;and&lt;/em&gt; it wasn’t the result of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;There should only be two ways out of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
condition.&lt;/p&gt;

    &lt;p&gt;The first way out of a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
condition is by the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branching&lt;/a&gt;
to a new instruction.  Two examples will help illustrate this.  The
first example would be if the pipeline has gotten ahead of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
and read past the end of the memory device, but while the
software program itself has not.  Perhaps the last item of memory
is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
statement and the software hasn’t gotten that far, even though the
pipeline is beyond it.  The second example is that of a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
in response to an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
condition.  This would be the case if the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
actually tried to execute the instruction at the address that caused the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
In this case, we’d get a new request for an instruction, on an
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt;, only the instruction address requested, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_pc&lt;/code&gt;, would be the
address of the instruction error handler.&lt;/p&gt;

    &lt;p&gt;The second way out of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
condition is via the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; signal above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll want to start a new transaction if the last transaction was aborted.
In this case, we’ll use an &lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; flag to indicate that the last
bus transaction ended in an invalid manner—such as if the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
issued us an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; signal during a memory transaction.  In this
case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; flag is our memory that we need to start a new
transaction to get that updated address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll also start a new transaction following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
to a new address, indicated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; signal.  This differs from
the &lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; version above in that this request may take place while
the bus is already idle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In all three of these cases, a new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;transaction&lt;/a&gt;
is initiated by raising both &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; lines high.
We’ll also need to adjust &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr&lt;/code&gt; at this time as well, but we’ll
come back to that later as part of its own &lt;code class=&quot;highlighter-rouge&quot;&gt;always&lt;/code&gt; block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		end else if ((!o_wb_cyc)&amp;amp;&amp;amp;(
				// 1.
				((i_stalled_n)&amp;amp;&amp;amp;(!o_illegal))
				// 2.
				||(invalid)
				// 3.
				||(i_new_pc)))
		begin
			// Initiate a bus transaction
			o_wb_cyc &amp;lt;= 1&#39;b1;
			o_wb_stb &amp;lt;= 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next question is how to handle an ongoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;transaction&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		end else if (o_wb_cyc)
		begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We already dealt with any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;transaction&lt;/a&gt;
aborts due to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;’s above in the
reset logic, so that leaves only two items to deal with.  The first
is dropping the strobe line once our request has been accepted,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			if (!i_wb_stall)
				o_wb_stb &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the second is aborting the transaction any time a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
request is received during the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;transaction&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			if (i_new_pc)
			begin
				o_wb_cyc &amp;lt;= 1&#39;b0;
				o_wb_stb &amp;lt;= 1&#39;b0;
			end
		end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this latter case, &lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; will be true on the next cycle to let us
know that we need to restart our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;transaction&lt;/a&gt; with a
new address.  Here’s the logic associated with letting us know that an
aborted
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;transaction&lt;/a&gt;
needs to be restarted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	invalid = 1&#39;b0;
	always @(posedge i_clk)
		if ((i_reset)||(!o_wb_cyc))
			invalid &amp;lt;= 1&#39;b0;
		else if (i_new_pc)
			invalid &amp;lt;= 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next value of interest is the address of the instruction we are
interested in.  This address is set any time the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
issues a new address via &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt;.  In all other respects it is incremented
any time a valid instruction is accepted by the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;–with
the one exception to this choice
being the case of an illegal instruction resulting from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
In that case, the instruction address doesn’t change–and we don’t issue new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;requests&lt;/a&gt;
either.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	o_wb_addr= 0;
	always @(posedge i_clk)
		if (i_new_pc)
			o_wb_addr  &amp;lt;= i_pc;
		else if ((o_valid)&amp;amp;&amp;amp;(i_stalled_n)&amp;amp;&amp;amp;(!o_illegal))
			o_wb_addr  &amp;lt;= o_wb_addr + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since this is just a simple &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;,
one that only returns a single instruction, we can re-use the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone address&lt;/a&gt;
lines, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr&lt;/code&gt;, as instruction address lines when sending them to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	o_pc = o_wb_addr;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As for the instruction passed to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
that’s one of the simpler things we need to do–especially since &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this
prefetch&lt;/a&gt;
version only requests one instruction at a time.  We’ll set this value on any
valid &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
return, found in the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; word, and indicated by both the fact that
we are in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle (&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is high), and by the acknowledgement flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((o_wb_cyc)&amp;amp;&amp;amp;(i_wb_ack))
			o_insn &amp;lt;= i_wb_data;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step is to handle the two flags, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt;, sent to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
to let it know if the instruction presented in the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_insn&lt;/code&gt; register is a valid
instruction or not.&lt;/p&gt;

&lt;p&gt;Initially, the instruction wires will &lt;em&gt;always&lt;/em&gt; be invalid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial o_valid   = 1&#39;b0;
	initial o_illegal = 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, following any reset,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
or clear cache request, we’ll need to mark the instruction as invalid as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_reset)||(i_new_pc)||(i_clear_cache))
		begin
			// ....
			o_valid   &amp;lt;= 1&#39;b0;
			o_illegal &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also want to mark the instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_insn&lt;/code&gt;, as valid immediately
following any bus acknowledgement, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt;.  Since this acknowledgement flag
is only valid during a bus cycle (and may accidentally show up after a bus
cycle, as the result of an abort), we’ll have to check &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; as well
to know if we need to set this.&lt;/p&gt;

&lt;p&gt;Further, as we mentioned above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;!o_illegal&lt;/code&gt; signal is being used as an
indicator that the result of the bus request is a valid instruction versus
just being a valid response.  Hence, if this was the result of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
we need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt; at the same time we set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		end else if ((o_wb_cyc)&amp;amp;&amp;amp;((i_wb_ack)||(i_wb_err)))
		begin
			// ...
			o_valid   &amp;lt;= 1&#39;b1;
			o_illegal &amp;lt;= ( i_wb_err);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
accepts our instruction, that is once &lt;code class=&quot;highlighter-rouge&quot;&gt;(o_valid)&amp;amp;&amp;amp;(i_stalled_n)&lt;/code&gt; are both
true, then we need to clear the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; flag, lest the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
accidentally read the same instructions twice.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		end else if (i_stalled_n)
		begin
			// ---
			o_valid &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While you might be tempted to clear the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt; flag as well, doing so
would be a mistake.  In particular, you want to keep the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
from trying to fetch, refetch, and refetch again, any response that was returned
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
Hence, we’ll leave &lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt; flag true following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
and use it as a flag (above) to keep us from re-initiating a new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;request&lt;/a&gt;
prior to a new &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt;
being given to us to recover from this error condition.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			// o_illegal &amp;lt;= (!i_stalled_n);
		end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One item worth noting about the code above, is that the giant &lt;code class=&quot;highlighter-rouge&quot;&gt;always&lt;/code&gt; blocks
that remain only control a small number of signals.  The largest groups of
signals within this design are associated with the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone address&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr&lt;/code&gt;, and the
output instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_insn&lt;/code&gt;.  These two groups of signals depend upon only
a minimum number of inputs, helping to &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;keep our logic to a
minimum&lt;/a&gt;.  The
registers that require complex logic, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt; or even &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;, are all single registers–minimizing the
impact of any difficult logic on our overall core.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;Now that we know how this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
component&lt;/a&gt;
interacts with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;ZipCPU&lt;/a&gt;,
and now that we’ve presented the how’s and the why’s of the logic within it,
it’s now time to take a look at formally proving whether or not it does what
we are expecting.  We’ll separate this section into four subsections below:
&lt;em&gt;assumptions&lt;/em&gt; about logic coming from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
&lt;em&gt;assumptions&lt;/em&gt; about logic coming from the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
&lt;em&gt;assertions&lt;/em&gt; about logic controlling the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
and then &lt;em&gt;assertions&lt;/em&gt; about or logic used to communicate with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
As before, the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;basic rule of formal
verification&lt;/a&gt; remains:
&lt;em&gt;assume properties of inputs, assert properties
of outputs.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;assumptions-about-logic-coming-from-the-cpu&quot;&gt;Assumptions about logic coming from the CPU&lt;/h4&gt;

&lt;p&gt;There are four basic control lines coming from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
needs to interact with: the reset line, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt;, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
indicator line, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt;, the request for us to clear our cache,
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt;, and the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;’s
ready (not stalled) line, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_stall_n&lt;/code&gt;.  The fifth input from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_pc&lt;/code&gt;, is only relevant when &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; is valid.&lt;/p&gt;

&lt;p&gt;We’ll start out with a standard assumption: Everything begins in a reset
state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	`ASSUME(i_reset);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;ASSUME&lt;/code&gt; macro from &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;my first experiences with
formal methods&lt;/a&gt;.  This
macro is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; inputs from another part of the design only when
we are tested in isolation, and to &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; those same properties any time
we are tested as a component of a larger interaction.  The macro itself
is defined within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
source code.&lt;/p&gt;

&lt;p&gt;Moving on, we also know that, following any reset request from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
the first thing the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
will do will send us an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; command–requesting a read from the
reset address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(i_reset)))
			`ASSUME(i_new_pc);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same is true of the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; signal.  The
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
will &lt;em&gt;always&lt;/em&gt; follow this signal by an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(i_clear_cache)))
			`ASSUME(i_new_pc);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_stalled_n&lt;/code&gt; signal.  This signal comes from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
and tells us when the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
is not stalled.  This is a handshake signal, much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;!busy&lt;/code&gt; signal
we discussed when we discussed &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline
strategies&lt;/a&gt;.
Hence, the only time this signal matters to us is when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; is true.  We
can still constrain it however.&lt;/p&gt;

&lt;p&gt;The first constraint on this signal is that following any reset, the rest of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
will be idle.  Stages beyond this one &lt;em&gt;cannot&lt;/em&gt; be busy following a reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(i_reset)))
			`ASSUME(i_stalled_n);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next constraint on this signal is that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
cannot suddenly become stalled without being given an instruction.  Stalls
only take place when there’s an instruction in the following stage that is
taking more than one clock to execute–they can’t happen without an
instruction.  Hence, if the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
wasn’t stalled on the last clock, &lt;em&gt;and&lt;/em&gt; we didn’t pass the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
an instruction on the last clock, then it cannot be stalled on this clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(!o_valid))&amp;amp;&amp;amp;($past(i_stalled_n)))
			`ASSUME(i_stalled_n);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our last criteria isn’t so much a characteristic of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
but rather one required by the proof.  In order for induction to be successful,
all of the various states need to be flushed within a given number of clocks.
To make certain this happens, we’ll insist that the CPU can only be stalled
for less than four clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	localparam	F_CPU_DELAY = 4;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In practice, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
can be stalled for much longer.  Divide instructions, for
example, will stall the entire pipeline for 32+ clocks.  This is just about
speeding things up enough so that the solver can prove a solution.&lt;/p&gt;

&lt;p&gt;To make this limit, we’ll first count the number of clocks we need to wait for
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
to be receptive to our instruction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		// If no instruction is ready, then keep our counter at zero
		if ((i_reset)||(!o_valid)||(i_stalled_n))
			f_cpu_delay &amp;lt;= 0;
		else
			// Otherwise, count the clocks the CPU takes to respond
			f_cpu_delay &amp;lt;= f_cpu_delay + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll assume that this number remains less than the
parameterized (but fixed) delay above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		assume(f_cpu_delay &amp;lt; F_CPU_DELAY);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, we’ll caveat this last test so that it will only take place if the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
is being tested in isolation, and not require it any time the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
is being tested as part of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Those are the assumptions we need to make regarding how the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
controls this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;.
In many ways, these assumptions form the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;’s
side of a contract: the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
will work as long as the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
and the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
which we’ll discuss next,
keeps its end of the contract.&lt;/p&gt;

&lt;h4 id=&quot;assumptions-about-logic-coming-from-the-wishbone-bus&quot;&gt;Assumptions about logic coming from the Wishbone bus&lt;/h4&gt;

&lt;p&gt;Making assumptions about the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
however, is now really easy.  Because &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;we put
together&lt;/a&gt; a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;module&lt;/a&gt;
describing the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;properties&lt;/a&gt; of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;,
we only need to include
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;that module&lt;/a&gt;
to get a copy of all of the various
assumptions (and assertions) associated with interacting with
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;this bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once included, and given that our proof succeeds, we will then &lt;em&gt;know&lt;/em&gt; that we
are interacting validly with any peripheral on the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	formal_master #(.AW(AW), .DW(DW),.F_LGDEPTH(F_LGDEPTH),
			.F_MAX_REQUESTS(1), .F_OPT_SOURCE(1),
			.F_OPT_RMW_BUS_OPTION(0),
			.F_OPT_DISCONTINUOUS(0))
		f_wbm(i_clk, i_reset,
			o_wb_cyc, o_wb_stb, o_wb_we, o_wb_addr, o_wb_data, 4&#39;h0,
			i_wb_ack, i_wb_stall, i_wb_data, i_wb_err,
			f_nreqs, f_nacks, f_outstanding);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are a couple of options we set above, however.  These include the size
of the address bus and data bus, as well as the log (based two) of the length of
any interaction (&lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH=2&lt;/code&gt;).  We also indicated that this would be a source
controller (&lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&amp;amp;STB&lt;/code&gt; go high together), and that we will only ever make one
request of the bus (&lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS(1)&lt;/code&gt;.  Since the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
isn’t involved in writes, we can leave
the read-modify-write option off (&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_RMW_BUS_OPTION&lt;/code&gt;).  We’re also
not going to be restarting requests while &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; is high, so we can leave
the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_DISCONTINUOUS&lt;/code&gt; option low.&lt;/p&gt;

&lt;p&gt;This part is just that easy: include assertions and assumptions from
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;elsewhere&lt;/a&gt;
and we’re done.  Well … almost.  We still need to make certain that the
number of requests and acknowledgements counted by this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;formal description of a Wishbone
master&lt;/a&gt;
match the logic within our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;.
That’s coming up in the next section.&lt;/p&gt;

&lt;h4 id=&quot;assertions-about-logic-controlling-the-wishbone-bus&quot;&gt;Assertions about logic controlling the Wishbone bus&lt;/h4&gt;

&lt;p&gt;We’ve now finished with the &lt;em&gt;assumptions&lt;/em&gt; about our inputs.  It’s now time
to turn to look at any &lt;em&gt;assertions&lt;/em&gt; we wish to make about our outputs.
We’ll start with the assertions about the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our first assertion is that we are &lt;em&gt;reading only&lt;/em&gt; from the bus.  This may seem
silly, but … a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;
should never do more than read from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
It’s worth knowing that that’s all we are going to do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (o_wb_stb)
			assert(!o_wb_we);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re also going to assert that, two clocks after an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; request,
we’ve abandoned any ongoing
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(f_past_valid))
				&amp;amp;&amp;amp;($past(i_clear_cache,2))
				&amp;amp;&amp;amp;($past(o_wb_cyc,2)))
			// ...
			assert((!$past(o_wb_cyc))||(!o_wb_cyc));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why two clocks?  Well, the first clock should be the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; request.
The second clock should be the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; signal.  Then, on the third clock,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; should be indicating that we are within a transaction.&lt;/p&gt;

&lt;p&gt;Once we have a valid result (instruction) to present to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
then the address of this result shouldn’t change, neither should the instruction
itself–as long as we are holding &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; high.  Since this address is our
reference for the next instruction address, we can’t allow this to change
until the next &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(o_valid))&amp;amp;&amp;amp;(o_valid))
			assert($stable(o_wb_addr));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re also going to assert that we start a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; cycle
following any abort.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; will be true following any abort based
upon a new &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt;,
this assertion captures the logic in question.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(!i_reset))&amp;amp;&amp;amp;($past(invalid)))
			assert(o_wb_cyc);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are the things we need to assert regarding our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction–things specific to this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;assertions-about-logic-responding-to-the-cpu&quot;&gt;Assertions about logic responding to the CPU&lt;/h4&gt;

&lt;p&gt;The last set of assertions are those associated with our responses to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;.
These are primarily about the integrity of our return signals.&lt;/p&gt;

&lt;p&gt;Since this is a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;single instruction prefetch
module&lt;/a&gt;,
after the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
accepts an instruction we’ll have to go get a new instruction.
This means that the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; line must immediately drop–at least until the
next instruction is received.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(o_valid))&amp;amp;&amp;amp;($past(i_stalled_n)))
			assert(!o_valid);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can go further and insist that any time we are within a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;cycle&lt;/a&gt;,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; line must also be low.  Consider the consequences if this weren’t
the case: if the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
were allowed to present a valid instruction to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
and a new instruction was received from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
where should it be stored?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(*)
		if (o_wb_cyc)
			assert(!o_valid);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, any time we get an instruction from the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
we need to assert that we are telling the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
that we have a valid instruction on the next clock cycle–the first cycle
that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_insn&lt;/code&gt; is valid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_reset))
			&amp;amp;&amp;amp;($past(o_wb_cyc))
			&amp;amp;&amp;amp;($past(!i_clear_cache))
			&amp;amp;&amp;amp;($past(i_wb_ack))&amp;amp;&amp;amp;(!$past(i_wb_err)))
		begin
			if (!invalid)
				assert(o_valid);
		end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, following an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; request, we’ll need
to make sure that the instruction presented &lt;em&gt;isn’t&lt;/em&gt; valid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(i_clear_cache)))
			assert(!o_valid);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not only that but two clocks following an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; request we want
to make certain we are still invalid.  This makes sure we don’t abort
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; cycle
and somehow turn on the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(f_past_valid))
				&amp;amp;&amp;amp;($past(i_clear_cache,2))
				&amp;amp;&amp;amp;($past(o_wb_cyc,2)))
			// ...
			assert(!o_valid);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may remember the discussion regarding two clocks past the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt;
signal above, having to do with the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; output.  This is really just
an assertion of (roughly) the same thing.&lt;/p&gt;

&lt;p&gt;Now let’s start looking at the content of what we are returning to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;.
As long as we are presenting a valid instruction to the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
and the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
is stalled and not ready for the instruction, then we need to continue
presenting our valid instruction.
Exceptions to this rule include the clock following any &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt;,
or &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clear_cache&lt;/code&gt; request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_reset))
			&amp;amp;&amp;amp;(!$past(i_new_pc))&amp;amp;&amp;amp;(!$past(i_clear_cache))
			&amp;amp;&amp;amp;($past(o_valid))&amp;amp;&amp;amp;(!$past(i_stalled_n)))
		assert($stable(o_valid));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, any time we present a valid instruction for two clocks in a row,
none of the information associated with that instruction should be able
to change.  This goes for not only the instruction itself, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_insn&lt;/code&gt;, but
also the address of the instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_pc&lt;/code&gt;, and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
indication signal &lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt;.  Another way to say this would be to say that
these lines shouldn’t change until the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
acknowledges them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(o_valid))&amp;amp;&amp;amp;(o_valid))
	begin
		assert($stable(o_pc));
		assert($stable(o_insn));
		assert($stable(o_illegal));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt; line needs to remain valid even after the instruction has
been accepted–at least until the next &lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt; command, since we are using
it as an indication &lt;em&gt;not&lt;/em&gt; to refetch an instruction that is no longer
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt;.  Indeed, as long as &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; remains low (with exceptions),
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_illegal&lt;/code&gt; needs to remain unchanging.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_reset))
			&amp;amp;&amp;amp;(!$past(i_new_pc))&amp;amp;&amp;amp;(!$past(i_clear_cache))
			&amp;amp;&amp;amp;($past(!o_wb_cyc)))
		assert($stable(o_illegal));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves us with two more assertions, both about the returned address,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_pc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first of these address assertions is that, unless the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
tells us otherwise, we need to walk through the instruction stream one
address at a time.  There are a couple parts to making this assertion.
We’ll need to keep track of anytime we have a valid past
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt;
address to compare against.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	f_last_pc_valid = 1&#39;b0;
	always @(posedge i_clk)
		if ((i_reset)||(i_clear_cache)||(i_new_pc)||(invalid))
			f_last_pc_valid &amp;lt;= 1&#39;b0;
		else if (o_valid)
			f_last_pc_valid &amp;lt;= (!o_illegal);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On any &lt;code class=&quot;highlighter-rouge&quot;&gt;o_valid&lt;/code&gt; signal, we have a valid
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;PC&lt;/a&gt; to load into our
comparison register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (o_valid)
			f_last_pc  &amp;lt;= o_pc;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s a trick to making this work, though, and that is that we can’t allow
the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_pc&lt;/code&gt; register to be just anything–even when it isn’t being
referenced.  This is a requirement of the formal induction step which will start
in any random (valid) state.  Without the assertion below, the induction
step might start with an unreasonable &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_pc&lt;/code&gt; value, and then conclude that
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;our code&lt;/a&gt;
was in error.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		else if (f_last_pc_valid)
			assert(o_pc == f_last_pc + 1&#39;b1);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll make this first assertion associated with the output
address, that following any valid instruction and without an intervening
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_new_pc&lt;/code&gt;, the next address must be one more than the last address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;(o_valid)
				&amp;amp;&amp;amp;(!$past(o_valid))&amp;amp;&amp;amp;(f_last_pc_valid))
			assert(o_pc == (f_last_pc + 1&#39;b1));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the first of the two address based assertions.&lt;/p&gt;

&lt;p&gt;The second of these two assertions is a more complete assertion, this time
dealing with the address of the next request.  In this case, we keep track of
the last address requested by the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
in &lt;code class=&quot;highlighter-rouge&quot;&gt;f_req_addr&lt;/code&gt; and increment it on any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
acknowledgement.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	f_req_addr = 0;
	always @(posedge i_clk)
		if (i_new_pc)
			f_req_addr &amp;lt;= i_pc;
		else if ((!invalid)&amp;amp;&amp;amp;(o_wb_cyc)&amp;amp;&amp;amp;(i_wb_ack)&amp;amp;&amp;amp;(!i_wb_err))
			f_req_addr &amp;lt;= f_req_addr + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, any time a value is being requested from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
it should be the value found within &lt;code class=&quot;highlighter-rouge&quot;&gt;f_req_addr&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (o_wb_cyc)
			assert((invalid)||(f_req_addr == o_wb_addr));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the last assertion we need to test &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr&lt;/code&gt;, but as with the last
address assertion, this assertion isn’t sufficient.  In particular, if we don’t
constrain it further, the induction step might assume that the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_req_addr&lt;/code&gt;
has a random value (since we haven’t told it otherwise), and then draw
an invalid conclusion as a result.  Hence we’ll need to assert that if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
isn’t active, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_req_addr&lt;/code&gt; must be the same as the bus address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		else if ((!o_valid)&amp;amp;&amp;amp;(!i_new_pc)&amp;amp;&amp;amp;(!i_reset))
			assert(f_req_addr == o_wb_addr);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a last assertion, we’ll insist that the &lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; signal only ever be
true for a single clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(invalid)))
			assert(!invalid);
`endif
endmodule&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This ends the list of assertions used to prove that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;single instruction prefetch&lt;/a&gt;
works as designed.&lt;/p&gt;

&lt;h2 id=&quot;minimizing-logic&quot;&gt;Minimizing Logic&lt;/h2&gt;

&lt;p&gt;If you are not familiar with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
you should know that one of the reasons why I built the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
was to allow me to experiment with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
design on &lt;em&gt;really&lt;/em&gt; &lt;em&gt;cheap&lt;/em&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
hardware (Ex [&lt;a href=&quot;https://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;1&lt;/a&gt;]
[&lt;a href=&quot;http://www.icoboard.org&quot;&gt;2&lt;/a&gt;]
[&lt;a href=&quot;https://hackaday.io/project/12930-blackice-low-cost-open-hardware-fpga-dev-board&quot;&gt;3&lt;/a&gt;]
[&lt;a href=&quot;http://www.xess.com/shop/product/xula2-lx25/&quot;&gt;4&lt;/a&gt;]
[&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;5&lt;/a&gt;]
[&lt;a href=&quot;https://store.digilentinc.com/arty-artix-7-fpga-development-board-for-makers-and-hobbyists/&quot;&gt;6&lt;/a&gt;]).
Achieving this goal required me to pay a lot of attention to
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;logic minimization&lt;/a&gt;.
It also means that any time I walk through my own code,
I am forever asking myself, “is this wire needed?”  “Can I remove the dependence
of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;
on this logical condition?”  Doing this, though, requires
two specific capabilities from my tool set.&lt;/p&gt;

&lt;p&gt;First, I need to be able to know, of a certainty, any time I adjust
a piece of logic, that the module will continue to work as designed.
This is the purpose of the formal model checks above, and/or any
test benches I might use.&lt;/p&gt;

&lt;p&gt;Second, I also need to be able to know how many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUTs&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;,
and so forth my logic uses.  Traditionally, I have been using
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/ise-design-suite.html&quot;&gt;ISE&lt;/a&gt;
or &lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
to build my entire design and then to report to me the logic used by the
design.  This can take a long time time (10+ minutes).  On the other hand, as
part of putting this post together, I discovered that I can use
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; with either the &lt;code class=&quot;highlighter-rouge&quot;&gt;synth_xilinx&lt;/code&gt; (for
7-series &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s),
&lt;code class=&quot;highlighter-rouge&quot;&gt;synth_ice40&lt;/code&gt;, or (hopefully soon) the &lt;code class=&quot;highlighter-rouge&quot;&gt;synth_intel&lt;/code&gt; (for
&lt;a href=&quot;https://www.altera.com&quot;&gt;Altera&lt;/a&gt; chips) command to then be able to
estimate the logic required.  Below, for example, is the
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
output from processing the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch.v&lt;/a&gt;
file above with &lt;code class=&quot;highlighter-rouge&quot;&gt;synth_xilinx&lt;/code&gt; enabled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   Number of wires:                 63
   Number of wire bits:            301
   Number of public wires:          20
   Number of public wire bits:     200
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                167
     FDRE                           67
     LUT1                            1
     LUT2                            1
     LUT3                           32
     LUT4                            4
     LUT5                            1
     LUT6                            2
     MUXCY                          29
     XORCY                          30&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, I was pleased to discover that the number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt;s
required by &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this
prefetch&lt;/a&gt;
went &lt;em&gt;down&lt;/em&gt; as a result of building a formal proof of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this
prefetch&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;this-prefetch-only-fetches-one-instruction&quot;&gt;This prefetch only fetches one instruction&lt;/h2&gt;

&lt;p&gt;The presentation above demonstrated how &lt;em&gt;one&lt;/em&gt; of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;
modules was put together.  As I mentioned above, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
has three other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt;
modules (although only two are actively maintained).  This is also the first,
and in many ways the simplest, of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prefetching&quot;&gt;prefetch&lt;/a&gt; module’s the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has had.&lt;/p&gt;

&lt;p&gt;Why did I switch?&lt;/p&gt;

&lt;p&gt;I switched from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this prefetch
module&lt;/a&gt; to
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipefetch.v&quot;&gt;another&lt;/a&gt;
when I watched how fast the pipelined
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
performed when using &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this prefetch
module&lt;/a&gt;.
Indeed, the performance was so pitiful it was almost unbearable to watch the
instructions flow through the pipeline–with never more than one instruction
in the pipeline at any given time.  Eventually, I measured the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s performance against the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; benchmark.  Using a
prior version of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this prefetch
module&lt;/a&gt;,
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; managed to achieve
0.128 DMIPS/MHz–a pitiful score.  The score, however, should be compared with
the 0.95 DMIPS/MHz score the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
achieved when fully pipelined.
[&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf.pdf&quot;&gt;Ref&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Since that comparison, however, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has been extensively
modified–to include adjusting this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;.
As a result of one of those changes, this
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;.
will now start fetching a new instruction a new instruction as soon as the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
has accepted the last one, rather than waiting for the 
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
to flush the last instruction through the pipeline before starting the next
fetch.  As a result, while it’s still painful to watch &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;this
prefetch&lt;/a&gt;
operate, it’s not nearly as bad as it was originally.&lt;/p&gt;

&lt;p&gt;If you like &lt;a href=&quot;http://zipcpu.com&quot;&gt;this blog&lt;/a&gt;, please consider supporting it on
&lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;Patreon&lt;/a&gt;.  Thank you!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And now I have told you before it come to pass, that, when it is come to pass, ye might believe.  (John 14:29)&lt;/em&gt;</description>
        <pubDate>Sat, 18 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/zipcpu/2017/11/18/wb-prefetch.html</link>
        <guid isPermaLink="true">http://zipcpu.com/zipcpu/2017/11/18/wb-prefetch.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Generating more than one bit at a time with an LFSR</title>
        <description>&lt;p&gt;This is now our third post on
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Linear Feedback Shift Registers
(LFSRs)&lt;/a&gt;.
Our
&lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;first post&lt;/a&gt;
examined how to generate a
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Linear Feedback Shift Register
(LFSR)&lt;/a&gt;
in Verilog, and our
second post
walked through an example of a 5-bit
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.
However, neither of these developments have solved the problem I had
initially.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: System Identification Setup&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/chanid.svg&quot; alt=&quot;System setup for System ID: one FPGA creates a noise source, the other examines it&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you may recall, I wanted to use an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
to do &lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;channel
estimation&lt;/a&gt;.
My intention was to use a setup like Fig 1 to the right.  My plan is to
transmit &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;
out of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
output pin at the fastest speed I can:
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds181_Artix_7_Data_Sheet.pdf&quot;&gt;950 Mbps&lt;/a&gt;
on my
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds180_7Series_Overview.pdf&quot;&gt;Artix-7&lt;/a&gt;
&lt;a href=&quot;https://store.digilentinc.com/arty-artix-7-fpga-development-board-for-makers-and-hobbyists/&quot;&gt;Arty&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board.
I’ll then receive the bits at the other end of a
&lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;12” pmod cable&lt;/a&gt;
representing my channel, and examine the waveform at the other end to get
an &lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;estimate of the channel throughput and
distortion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Indeed, if all goes well I should be able to apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Channel_capacity&quot;&gt;Shannon’s Capacity
theorem&lt;/a&gt; to determine the
maximum speed of &lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;the
channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do this, though, I need a source of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;.
Worse, &lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;our last attempt&lt;/a&gt;
at generating
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt; only
generated one bit per clock, and I will need several bits per clock in order
to drive an output serializer at high speed.&lt;/p&gt;

&lt;p&gt;So let’s return to our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;Fibonacci LFSR
generator&lt;/a&gt;
and see if we can &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;modify it to produce more than one output per clock
period&lt;/a&gt;.
We’ll keep the setup identical to
&lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;our first post&lt;/a&gt;,
so the only thing that needs to change today is the number of outputs
bits we need to generate.  We’ll start with describing how we’ll go about
getting these extra bits, and then discuss the code that implements this.
We’ll also do one more: let’s &lt;em&gt;formally prove&lt;/em&gt; at the end of our development,
that our resulting implementation actually works.&lt;/p&gt;

&lt;h2 id=&quot;getting-that-next-bit&quot;&gt;Getting that next bit&lt;/h2&gt;

&lt;p&gt;Our task is create an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
that produces &lt;code class=&quot;highlighter-rouge&quot;&gt;WS&lt;/code&gt; bits at a time–rather than just one.  (&lt;code class=&quot;highlighter-rouge&quot;&gt;WS&lt;/code&gt;= Word Size)
The question, though, is how shall we do this?&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2: Example LFSR&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-fib5.svg&quot; alt=&quot;An example 5-tap LFSR&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll use the
&lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;example&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
&lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;we presented earlier&lt;/a&gt;
for discussion and as an example along the way.  You can see
&lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;this example&lt;/a&gt;
in Fig 2 at the right.  It’s a simple five stage
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
with a feedback equation defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS=5&#39;b00101&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s begin our development by imagining an infinite stream of (constant)
bits in our shift register, &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;.  Each of these bits satisfies the
relationship given by the Fibonacci
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt; equation
we started with.  When we presented this equation, we had bits &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB:0&lt;/code&gt; defined
and we just needed to calculate the next bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB+1&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;sreg[MSB+1] = ^(sreg[MSB:0] &amp;amp; TAPS);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may also remember, from the discussion of an
&lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;example&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;, that these
&lt;code class=&quot;highlighter-rouge&quot;&gt;MSB:0&lt;/code&gt; bits have no required relationship between them–save that they cannot
all be zero.&lt;/p&gt;

&lt;p&gt;Now let’s see what it will take to calculate bit &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB+2&lt;/code&gt;.  We can start with
our equation for the next bit, and apply it to bits &lt;code class=&quot;highlighter-rouge&quot;&gt;[MSB+1:1]&lt;/code&gt; to get bit
&lt;code class=&quot;highlighter-rouge&quot;&gt;MSB+2&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;sreg[MSB+2]     = ^(sreg[MSB+1:1] &amp;amp; TAPS);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll have to get rid of the reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+1]&lt;/code&gt;, though, before this
equation will be useful for us.&lt;/p&gt;

&lt;p&gt;To get there, let’s split this new equation into two parts.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: One more bit&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-fib5-x1.svg&quot; alt=&quot;Getting one extra bit from a 5-tap LFSR&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first part will be due to the bits in &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB:1]&lt;/code&gt;.  We can represent
this part as &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB:0]&amp;amp;(TAPS&amp;lt;&amp;lt;1)&lt;/code&gt;.  This represents the bits that we already
know.  You can see this how this would affect our
&lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;example&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
in Fig 3.  If you compare Fig 3 with Fig 2, you can see how the taps to
generate the next bit are the same as the ones shown in Fig 2, save only that
they’ve been moved one stage to the left.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;LFSR in our example&lt;/a&gt;
is simple enough that we can apply this same technique
to even get a second bit from the taps we were given, as Fig 4 below shows.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: Two more bits&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-fib5-x2.svg&quot; alt=&quot;The second extra bit&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Where the &lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;example&lt;/a&gt;
falls apart is when you need to reference a bit that isn’t present in the
original shift register.  For that, we need to move to the second part of
our equation.&lt;/p&gt;

&lt;p&gt;This second part, &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+1]&amp;amp;TAPS[MSB]&lt;/code&gt; will
need some work.  In this case, though, we already have an equation for
&lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+1]&lt;/code&gt; (above).  Therefore we can substitute that equation for
&lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+1]&lt;/code&gt; into our equation for &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+2]&lt;/code&gt; in order to get a new
expression for &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+2]&lt;/code&gt; that depends only upon &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB:0]&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;sreg[MSB+2]     = ^(sreg &amp;amp; (TAPS&amp;lt;&amp;lt;1)) ^ (TAPS[MSB]&amp;amp;(sreg &amp;amp; TAPS));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps a picture will explain this better.  Consider Fig 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Getting a third bit&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-fib5-x3.svg&quot; alt=&quot;Getting a bit not described by the initial register taps&quot; width=&quot;540&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see the remains of the taps that were being shifted
to the left, and a broken reference to a bit that isn’t in our set from
&lt;code class=&quot;highlighter-rouge&quot;&gt;MSB:0&lt;/code&gt;.  However, instead of adding the bit we don’t have, we instead
add the equation for that bit.  The result is that our new bit, in this
&lt;a href=&quot;/dsp/2017/11/11/lfsr-example.html&quot;&gt;example&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
depends upon three bits from our shift register, instead of just the two.&lt;/p&gt;

&lt;p&gt;Let’s simplify this expression a touch further, though.
If we take another look at the equation above, we can now use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Distributive_property&quot;&gt;distributive
property&lt;/a&gt;
to collect our terms.  Specifically, we’ll factor out the &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; term to the
left, and the values multiplied by the &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; vector together into a new
term on the right,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;sreg[MSB+2]     = ^(sreg &amp;amp; ( (TAPS&amp;lt;&amp;lt;1) ^ (TAPS[MSB] ? TAPS : 0)));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this equation, the portion of our expression to the right of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; looks very much like an expression similar to our expression for
&lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+1]&lt;/code&gt;.  Specifically, this right half expression looks like a vector
that, when taken as an inner product with &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;, produces our result–just
like the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; vector did for &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[MSB+1]&lt;/code&gt;.  Even better, this vector
is a constant–depending only upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; parameter.  Let’s use this.
We’ll define &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[0]&lt;/code&gt; to be our &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[1]&lt;/code&gt; to be this value.&lt;/p&gt;

&lt;p&gt;We can then repeat this derivation.  Doing so will reveal a formula for
&lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[k+1]&lt;/code&gt; based upon &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[k]&lt;/code&gt;.  In particular,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;tapv[k+1] = (tapv[k] &amp;lt;&amp;lt;1) ^ (tapv[k][MSB] ? TAPS : 0)));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv&lt;/code&gt; array is the key we need to build our code below.&lt;/p&gt;

&lt;h2 id=&quot;a-multi-step-lfsr-implementation&quot;&gt;A Multi-Step LFSR Implementation&lt;/h2&gt;

&lt;p&gt;Now that we have an equation for future output bits, it’s time to
build our multi-step shift register.  Feel free to
follow along in the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;code we’re creating
here&lt;/a&gt;, as
we’ll only discuss the basic highlights below.&lt;/p&gt;

&lt;p&gt;Our goal is to extend &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;our origianal
Fibonacci&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;code&lt;/a&gt;
to output &lt;code class=&quot;highlighter-rouge&quot;&gt;WS&lt;/code&gt; bits per clock, where &lt;code class=&quot;highlighter-rouge&quot;&gt;WS&lt;/code&gt; is given by a parameter.
This means we’ll need to calculate &lt;code class=&quot;highlighter-rouge&quot;&gt;WS-1&lt;/code&gt; more bits than we did the
&lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;last time&lt;/a&gt;.  It also means
that our shift register, which only used to be &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt; bits long, will now need
to have &lt;code class=&quot;highlighter-rouge&quot;&gt;LN+(WS-1)&lt;/code&gt; elements in it.  Of these, we’ll use the bottom &lt;code class=&quot;highlighter-rouge&quot;&gt;WS&lt;/code&gt; bits
as our output bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	o_word=sreg[WS-1:0];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But I’m getting ahead of myself.  Before we can get to &lt;code class=&quot;highlighter-rouge&quot;&gt;o_word&lt;/code&gt;, there’s a
lot of other work to be done first.&lt;/p&gt;

&lt;p&gt;We’ll start with the equations we just worked out in the last section.  We’ll
place these &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[]&lt;/code&gt; values into an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;WS&lt;/code&gt; elements, each as
wide as our underlying
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
or &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt; bits long.&lt;/p&gt;

&lt;p&gt;The first of these equations is the one we’ve used before, &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[0]&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	tapv[0] = TAPS;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here we can use the recursive equation derived above to get the rest,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	genvar	k;
	generate for(k=1; k&amp;lt;WS; k=k+1)
	begin : PRECALCULATING_TAP_VALUE
		assign	tapv[k] = (tapv[k-1]&amp;lt;&amp;lt;1)^((tapv[k-1][(LN-1)])?TAPS:0);
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you didn’t manage to follow the development of these equations above,
don’t worry.  We’ll
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;prove&lt;/a&gt;”
these equations work below in the next section.&lt;/p&gt;

&lt;p&gt;The next trick is the reset value.&lt;/p&gt;

&lt;p&gt;You may remember before, when we had one new bit per time step, that we set
our state space to an &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	reset_value[(LN-1):0] = INITIAL_FILL;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This reset value then dictated the first &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt; bits out of our device.&lt;/p&gt;

&lt;p&gt;This won’t quite work for our multi-step core.  First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;
vector needs to have &lt;code class=&quot;highlighter-rouge&quot;&gt;WS-1&lt;/code&gt; additional elements to it.  Then, to make matters
worse, all of those bits need to maintain the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
relationship between them.  So while the statement above works for the first
&lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt; bits, we’ll still need to determine the next &lt;code class=&quot;highlighter-rouge&quot;&gt;WS-1&lt;/code&gt; bits.&lt;/p&gt;

&lt;p&gt;We can get these next several bits of the &lt;code class=&quot;highlighter-rouge&quot;&gt;reset_value&lt;/code&gt; by running the first
several bits of the &lt;code class=&quot;highlighter-rouge&quot;&gt;reset_value&lt;/code&gt; through &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;our
Fibonacci&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
equation.  This is a zero cost operation: every part of this equation
is known and constant.  Therefore the synthesizer can simplify the code
before our core ever gets mapped to logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate
	for(k=0; k&amp;lt;WS-1; k=k+1)
	begin : CALC_RESET
		assign	reset_value[(LN+k)] = ^(reset_value[ k +: LN]&amp;amp;TAPS);
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this works well to develop &lt;code class=&quot;highlighter-rouge&quot;&gt;reset_value&lt;/code&gt;, it doesn’t work as well
as an initial value for our &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;.  We’d like to say,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	sreg = reset_value;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this only works with some synthesizers, such as
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;,
and not with others, like
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;.
For those others, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; initially to
&lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL &amp;lt;&amp;lt; (WS-1)&lt;/code&gt;, and then
use &lt;code class=&quot;highlighter-rouge&quot;&gt;reset_value&lt;/code&gt; for any subsequent resets.  This will still give us the
same sequence, with the only problem being that the first &lt;code class=&quot;highlighter-rouge&quot;&gt;WS-1&lt;/code&gt; values
will be zero instead of those associated with the fill.&lt;/p&gt;

&lt;p&gt;Now that we have our tap equations, &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[]&lt;/code&gt;, and our &lt;code class=&quot;highlighter-rouge&quot;&gt;reset_value&lt;/code&gt;, we can
now move on to the state register itself.  In the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;typical&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
all but one bit of the new state register is known.  These known bits are
given by shifting the register one step to the right, whereas the last bit
is generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; equation.&lt;/p&gt;

&lt;p&gt;Let’s do the same thing here and shift these known bits first,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (i_reset)
			sreg[(LN-2):0] &amp;lt;= reset_value[(LN-2):0];
		else if (i_ce)
			sreg[(LN-2):0] &amp;lt;= sreg[(LN+WS-2):WS];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are the easy bits.&lt;/p&gt;

&lt;p&gt;After those easy bits, our first next bit is determined by the
original Fibonacci
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
equation.  That’s the one we built into our first &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;Fibonacci
LFSR&lt;/a&gt; module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sreg[MSB] &amp;lt;= ^(sreg &amp;amp; TAPS);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of the bits are calculated in the same fashion, with the exception
that the equation for them, in particular the &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[k]&lt;/code&gt; coefficients,
is different from one bit to the next.  So, our next step is then to
walk through those extra bits applying the &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[k]&lt;/code&gt; equations as appropriate
to generate each new bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate
	for(k=0; k&amp;lt;WS; k = k+1)
	begin : RUN_LFSR
		always @(posedge i_clk)
			if (i_reset)
				sreg[LN+k-1] &amp;lt;= reset_value[LN+k-1];
			else if (i_ce)
				sreg[(LN+k-1)] &amp;lt;=
					^(sreg[(LN+WS-2):(WS-1)]&amp;amp;tapv[k]);
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you notice how we also cycled through the various &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[k]&lt;/code&gt; expressions?
This is just implementing the equations we calculated above.&lt;/p&gt;

&lt;p&gt;That’s it.  It’s still simple, but there is just a little more simple involved
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;in this version&lt;/a&gt;
over the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;last
version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Put together, we just calculated &lt;code class=&quot;highlighter-rouge&quot;&gt;LN+WS-1&lt;/code&gt; bits.  &lt;code class=&quot;highlighter-rouge&quot;&gt;LN-1&lt;/code&gt; of these are
calculated the same as before–by shifting the shift register.  The next bit
is still calculated by our original &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; equation, just like we did with
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;our initial Fibonacci implementation&lt;/a&gt;.
The last &lt;code class=&quot;highlighter-rouge&quot;&gt;WS-1&lt;/code&gt; bits were then calculated in the
exact same way with the only exception being that the equation, &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[k]&lt;/code&gt;,
changed on a bit-by-bit basis.&lt;/p&gt;

&lt;p&gt;But, let’s come back to our earlier question, will this really “work”?  Will
all these equations really produce the sequence we want?&lt;/p&gt;

&lt;p&gt;To answer that question, let’s see if we can get the computer to
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;prove&lt;/a&gt;”
that &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;this new
form&lt;/a&gt; works.&lt;/p&gt;

&lt;h2 id=&quot;applying-formal-methods&quot;&gt;Applying Formal Methods&lt;/h2&gt;

&lt;p&gt;I discussed the basics of using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal methods&lt;/a&gt;
using &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys-smtbmc&lt;/a&gt; in a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;previous post&lt;/a&gt;.
The basic idea behind
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal methods&lt;/a&gt;
is to define a state space, and within it the space of invalid states.
The state space is initially defined by all of the register values within
your design.  It is restricted further, made smaller that is, with &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt;
statements as necessary.  Invalid states are defined as well, but this time
using the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; statement.  We’ll use these two statements, &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; with the ultimate goal of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;proving&lt;/a&gt;
that the logic above will &lt;em&gt;never&lt;/em&gt; enter into an illegal state.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;These formal methods&lt;/a&gt;
are particularly appropriate for this multi-bit
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
design, since
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
are so mathematically based.  In particular, the output of the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
needs to strictly satisfy a mathematical equation–one that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal equation solver&lt;/a&gt;
can verify for us.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;before&lt;/a&gt;,
we’ll use &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
to generate a list of properties in a
&lt;a href=&quot;http://stp.github.io/smt-input-language/&quot;&gt;format&lt;/a&gt; that
&lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;yices&lt;/a&gt; can understand.  When processing a file in
this manner, &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; will define the &lt;code class=&quot;highlighter-rouge&quot;&gt;FORMAL&lt;/code&gt;
pre-processor directive for us.  That allows us to begin our &lt;code class=&quot;highlighter-rouge&quot;&gt;FORMAL&lt;/code&gt;
verification section with an &lt;code class=&quot;highlighter-rouge&quot;&gt;ifdef&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;`ifdef	FORMAL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our plan will be to then use &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys-smtbmc&lt;/a&gt;
to then drive the &lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;yices&lt;/a&gt; theorem prover to prove
that our
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;multi-step&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt; actually
works.&lt;/p&gt;

&lt;p&gt;The first step is to restrict the search state space.&lt;/p&gt;

&lt;p&gt;We’ll use the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;approach
we presented before&lt;/a&gt;
to create a clock, and an &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; flag.  This latter flag will tell
us whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; directive will yield valid results.&lt;/p&gt;

&lt;p&gt;Now using that assumed clock, our first
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
specific step will restrict the space of all possibilities by
simply assuming that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; is true on startup.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	assume(i_reset);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we’ll assert that the bottom &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt; bits are equal to the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;
on the clock following any reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(i_reset)))
			assert(sreg[(LN-1):0] == INITIAL_FILL);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we’ve dealt with the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; case, we can move on to the regular
register bits.&lt;/p&gt;

&lt;p&gt;The first test is whether or not the first of the new register bits,
bit &lt;code class=&quot;highlighter-rouge&quot;&gt;LN-1&lt;/code&gt;, is valid.  This bit is the one produced via the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;original Fibonacci
configuration&lt;/a&gt;
&lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;we presented before&lt;/a&gt;.
Here we’ll just apply it to the values left in our
shift register, plus the one we just shifted out–the one still found in
&lt;code class=&quot;highlighter-rouge&quot;&gt;$past(sreg[WS-1])&lt;/code&gt;.  Note that this wouldve been &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(sreg[0])&lt;/code&gt; in our
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;previous
version&lt;/a&gt;, but
since we are now generating another &lt;code class=&quot;highlighter-rouge&quot;&gt;WS-1&lt;/code&gt; bits, that last bit shifted out
is no longer the &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; bit from before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_reset))&amp;amp;&amp;amp;($past(i_ce)))
			assert(sreg[LN-1]
				== ^({sreg[(LN-2):0], $past(sreg[WS-1])}
					&amp;amp; TAPS));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our new implementation also defines another &lt;code class=&quot;highlighter-rouge&quot;&gt;WS-1&lt;/code&gt; bits that we want to
validate.  Because this is a very mathematically defined
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
there’s a mathematical relationship between all of these bits.  All we
need to do to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally validate&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;this code&lt;/a&gt;
is to check our current state bits against the equation that was supposed
to generate them one at a time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;generate
	for(k=0; k&amp;lt;WS-1; k=k+1)
		always @(posedge i_clk)
			if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_reset)))
			assert(sreg[LN+k] == ^(sreg[(LN-1+k):k]&amp;amp;TAPS));
	endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the majority of the proof.  If this works, all of our &lt;code class=&quot;highlighter-rouge&quot;&gt;tapv[]&lt;/code&gt; work
will be verified.&lt;/p&gt;

&lt;p&gt;There is one more vital part to our proof: we need to prove that &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;
will never be equal to zero.  You may recall when we
&lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;last discussed&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
that we highlighted the problem with a
zero register: once the register &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; becomes zero (if ever) then it will
cease to produce
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;
numbers.  We’ll allow the &lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;theorem prover&lt;/a&gt;
to verify that this never happens.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(*)
		assert(sreg[(LN+WS-2):(WS-1)] != 0);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the last of the file, and the last of the proof.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;`endif	// FORMAL
endmodule&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that’s left is to run the
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;theorem prover&lt;/a&gt;
and see how we did!&lt;/p&gt;

&lt;p&gt;In case you haven’t been following along, you can find the example file we
just created
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;here&lt;/a&gt;.  You
can also find the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/formal/Makefile&quot;&gt;Makefile&lt;/a&gt;
and other files associated with driving the
&lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;formal theorem prover&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/tree/master/bench/formal&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now that I have an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr.v&quot;&gt;implementation&lt;/a&gt;
that I can step 8-14 times per clock, I should be able to create a high speed
data stream from one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
and send it to another.  The difference between what the second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
observes and what was actually sent will be any channel effects.  In other
words, I’m now ready to move my
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;channel identification&lt;/a&gt;
problem forward one step to measure just how much information can be reasonably
stuffed through this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;I/O channel&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For man also knoweth not his time: as the fishes that are taken in an evil net, and as the birds that are caught in the snare; so are the sons of men snared in an evil time, when it falleth suddenly upon them. (Eccl 9:12)&lt;/em&gt;</description>
        <pubDate>Mon, 13 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/dsp/2017/11/13/lfsr-multi.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/11/13/lfsr-multi.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>An example LFSR</title>
        <description>&lt;p&gt;Some time ago,
&lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;we examined&lt;/a&gt; &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Linear Feedback
Shift Registers
(LFSR)s&lt;/a&gt;
and particularly how to create the logic necessary to implement two different
forms of an &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;:
a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;Fibonacci&lt;/a&gt;
and a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_gal.v&quot;&gt;Galois
form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, let’s go back to the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;Fibonacci
form&lt;/a&gt; of a
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;shift register&lt;/a&gt;
and examine one particular set of coefficients, called &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; in the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;code&lt;/a&gt;,
to see what sort of sequence it produces.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: An example 5-stage LFSR&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-fib5.svg&quot; alt=&quot;An example five stage LFSR&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In particular, let’s look at a 5-stage
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
with the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; register given by &lt;code class=&quot;highlighter-rouge&quot;&gt;00101&lt;/code&gt;.  You can see a picture of the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;logic required to implement this&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;shift register&lt;/a&gt;
in Fig 1.  In this figure, you can see how the
output, together with the value of the register two stages earlier,
both get added (&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;‘d) together
to produce the new MSB of the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;shift register&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even better, I picked this particular set of coefficients in order to
guarantee that this &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;shift
register&lt;/a&gt; has a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximum length&lt;/a&gt;.
For a &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;register&lt;/a&gt;
with five internal bits within it, bits that can never all be equal to zero,
this &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximum length&lt;/a&gt;
is &lt;code class=&quot;highlighter-rouge&quot;&gt;2^5-1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;31&lt;/code&gt;.  Hence, this
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;register&lt;/a&gt;
has an output sequence of &lt;code class=&quot;highlighter-rouge&quot;&gt;31&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;
bits.&lt;/p&gt;

&lt;p&gt;Finally, before we start working through the numbers, I’d like to note that
Fig 1 looks very similar to the figure &lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;we presented
earlier&lt;/a&gt;
when &lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;we described how to build a generic shift
register&lt;/a&gt;.
That figure is shown below in Fig 2.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: The Generic Form of a Fibonacci LFSR Implementation&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr.svg&quot; alt=&quot;Generic Fibonacci LFSR form&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The biggest difference you may notice between these two figures is that the
multiplies have been removed.  Those taps that were multiplied with zero
in this example have been removed.  Those taps that were multiplied by one
have been replaced by a simple wire.  That’s how multiplication is defined,
and how it actually takes place within
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.
Even better, all of this multiplication logic takes place as the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;logic&lt;/a&gt;
is being synthesized–so that what is actually implemented ends up being
identical to Fig 1 above.&lt;/p&gt;

&lt;p&gt;My hope today is that, by specifically stating what the coefficients
of an example &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
are, we might be able to examine and understand how an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
works.  Further, as an aside, I’ve seen a lot of examples of how a 3-stage
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt; works
in text books (&lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS=3&#39;b011&lt;/code&gt;).  I wanted this presentation to be different
enough to generate something barely non-trivial, and so this example produces
a longer sequence.  Feel free to let me know if you found this easier to
understand.&lt;/p&gt;

&lt;h2 id=&quot;working-through-the-states&quot;&gt;Working through the states&lt;/h2&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 3: Example LFSR States&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-fib5-states.svg&quot; alt=&quot;States associated with our example 5-bit LFSR&quot; width=&quot;120&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s assume that our example starts with an &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; of one–just like
the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/lfsr_fib.v&quot;&gt;implementation&lt;/a&gt;
we &lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;presented earlier&lt;/a&gt;.  At each
step, the &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
works by shifting every bit to the right by one, and then
calculating the top bit.  In our case, that top bit is set by the
sum (&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;) of bits &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.
You can see the set of states that this produces in Fig 3 on the left.&lt;/p&gt;

&lt;p&gt;If you follow this formula, you’ll see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;00001&lt;/code&gt; state is followed by
the &lt;code class=&quot;highlighter-rouge&quot;&gt;10000&lt;/code&gt; state: the new top bit is set by the sum
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;) of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;–resulting
in &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since there are no ones in bit positions &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; for a couple of clock
periods, the &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;shift
register&lt;/a&gt;
just shifts to the right uneventfully until it gets to &lt;code class=&quot;highlighter-rouge&quot;&gt;00100&lt;/code&gt;–the next
time there’s a bit in position &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.
The state after &lt;code class=&quot;highlighter-rouge&quot;&gt;00100&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;10010&lt;/code&gt;, since the sum of &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; (position 2) and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;
(position 0) is one and that goes into the top bit while the other bits
shift down.&lt;/p&gt;

&lt;p&gt;One state later, the register equals &lt;code class=&quot;highlighter-rouge&quot;&gt;01001&lt;/code&gt; and now there’s a bit in position
&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, so the state following has a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; in the MSB.&lt;/p&gt;

&lt;p&gt;We can follow this logic down to &lt;code class=&quot;highlighter-rouge&quot;&gt;01101&lt;/code&gt;.  At this state, instead of adding
&lt;code class=&quot;highlighter-rouge&quot;&gt;0+1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;1+0&lt;/code&gt; and getting a one as the result, we now have &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1&lt;/code&gt;.  As you
may
&lt;a href=&quot;/dsp/2017/10/27/lfsr.html&quot;&gt;recall&lt;/a&gt;, this addition is done
over &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.  It is equivalent
to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;exclusive or&lt;/a&gt;, and so the
new MSB is now &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By this point in time, you should just about have the hang of it.  If not,
feel free to work through the states shown on the left and see if you can
generate each of them.  You may also notice that, after 31 states, the state
returns to our initial state–hence our sequence is &lt;code class=&quot;highlighter-rouge&quot;&gt;31&lt;/code&gt; bits long.&lt;/p&gt;

&lt;p&gt;As you transition through all of these states, remember that the &lt;code class=&quot;highlighter-rouge&quot;&gt;LSB&lt;/code&gt; is the
output of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;
number generator.  Hence, you should be able to
read down the column on the far right of Fig 3 on our left and read out
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;
numbers that are being produced.&lt;/p&gt;

&lt;p&gt;Even better, should you wish to adjust where in this sequence you wish to start,
all you need to do is change the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  For that matter, if you
sort the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; values, you’ll find that every value but zero gets
used–so the register state just determines where you are within the sequence.&lt;/p&gt;

&lt;p&gt;Now let’s turn our attention to look at some randomness properties of
this output sequence.
First, let’s count how many &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;’s this sequence produced: &lt;code class=&quot;highlighter-rouge&quot;&gt;16&lt;/code&gt;.  That means
that the sequence has (almost) a probability of &lt;code class=&quot;highlighter-rouge&quot;&gt;1/2&lt;/code&gt; for producing a one.
How about runs?  How many runs of &lt;code class=&quot;highlighter-rouge&quot;&gt;11&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;00&lt;/code&gt; does this sequence produce?
&lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt; respectively.  This is close to the probability of &lt;code class=&quot;highlighter-rouge&quot;&gt;1/4&lt;/code&gt; that
you’d want.  What about runs of three?  How many times do you find three
&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;’s in a row, or three &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;’s in a row?  &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; times respectively.
This follows the pattern, and nearly matches the probability of &lt;code class=&quot;highlighter-rouge&quot;&gt;1/8&lt;/code&gt;th
that we would expect.&lt;/p&gt;

&lt;p&gt;Judging from these observations, the sequence certainly &lt;em&gt;looks&lt;/em&gt; random.
Indeed, it is random &lt;em&gt;enough&lt;/em&gt; for most signal processing purposes.
It’s just not random enough for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptography&quot;&gt;cryptography&lt;/a&gt;–but I’m really not
enough of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptography&quot;&gt;cryptographic&lt;/a&gt; expert
to comment further on what it takes to create true
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptography&quot;&gt;cryptographically&lt;/a&gt; random numbers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully running through this example has helped to demystify
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s for you.
Because they are so easy to implement, their logic maps so nicely to
just a couple of transistors, and because their results &lt;em&gt;look&lt;/em&gt; random,
they have a very important part to play in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;Digital Signal Processing (DSP)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My intent, however, is to create a module that can output these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt; values
at 950Mbps–or whatever I can get from my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
to handle at its fastest speed.  To get there, I’m still going to need to create
a &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
implementation that can produce multiple output bits per clock.  We’ll have
to come back to this topic again, therefore, in order to examine and explain
how to do this.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Even as Sodom and Gomorrha, and the cities about them in like manner, giving themselves over to fornication, and going after strange flesh, are set forth for an example, suffering the vengeance of eternal fire. (Jude 1:7)&lt;/em&gt;</description>
        <pubDate>Sat, 11 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/dsp/2017/11/11/lfsr-example.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/11/11/lfsr-example.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>A Configurable Signal Delay Element</title>
        <description>&lt;p&gt;It’s always fun to design something simple every now and then–something that
doesn’t take too much thought, yet still fits a needed place in something you
are building.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Signal Delay Element&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/delayw.svg&quot; alt=&quot;Block Diagram showing the concept of a delay element: the incoming data line is split, one line gets delayed, both go through flip flops&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Today, let’s look at a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;.
This is a fundamental
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;signal processing&lt;/a&gt;
operation that takes a single stream and creates two streams–with the second
stream delayed by some programmable amount of samples from the first one.&lt;/p&gt;

&lt;p&gt;This is actually a very common
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;signal processing&lt;/a&gt;
need.  Imagine if you will that you had one piece of processing code that was
applied to the input, took many samples (&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;) to accomplish, and that the
result of this processing told you how to lock onto the signal that began
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; samples ago.&lt;/p&gt;

&lt;p&gt;A classic example of this would be a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;burst preamble&lt;/a&gt;–a
known sequence that occurs at the beginning of a burst transmission
to help you to synchronize to that transmission.  However, once synchronized,
you then want to go back and process any samples immediately following that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;.  Should you have any
delay in your &lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;
processing chain, then you’d need to go “back in time” to start processing
your signal immediately following this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;.  This is one purpose of a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, just for fun and to have a change-up from some more serious
and complex topics, let’s examine a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;simple delay
element&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pseudocode&quot;&gt;Pseudocode&lt;/h2&gt;

&lt;p&gt;At first blush, the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;logic for a delay
element&lt;/a&gt;.
seems quite simple: just delay the incoming samples by some variable amount.
Indeed, you might wish to start coding the algorithm together immediately
(I did).  You’d start with a delay of zero, and then build the logic for the
delay of one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
begin
	if (i_delay == 0)
	begin
		o_word &amp;lt;= i_word;
		o_delayed &amp;lt;= i_word;
	end else if (i_delay == 1)
	begin
		o_word &amp;lt;= i_word;
		o_delayed &amp;lt;= o_word;
	end else begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you’d get stuck.&lt;/p&gt;

&lt;p&gt;It’s right here at this point in the pseudocode that you need to transition
to a block RAM delay, and so you need a memory value read from block RAM.
We’ll call this value &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		o_word &amp;lt;= i_word;
		o_delayed &amp;lt;= memval;
	end
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ok, so we’ll need a memory.  That means we are going to want to write our
data into memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	mem[wraddr] &amp;lt;= i_word;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are also going to want to read it back out.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	memval &amp;lt;= mem[rdaddr];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And in order to make this all work, we’re going to need some memory address
manipulation code.  Most of this is straight boilerplate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
begin
	if (i_reset)
	begin
		wraddr &amp;lt;= 0;
		rdaddr &amp;lt;= ... // Something ... but what?
	end else if (i_ce)
	begin
		wraddr &amp;lt;= wraddr + 1&#39;b1;
		rdaddr &amp;lt;= rdaddr + 1&#39;b1;
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The read address, though, is not boilerplate.  It needs to be related to the
write address.  Indeed, this is perhaps the &lt;em&gt;only&lt;/em&gt; difficult part of building
a signal &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
element&lt;/a&gt;
such as this.&lt;/p&gt;

&lt;p&gt;So how should the read address relate to the write address?&lt;/p&gt;

&lt;p&gt;The first answer in this case would be that the read address should be less
than the write address by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; elements.  When you then try this code
within a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test bench&lt;/a&gt;,
you’ll find that this choice just doesn’t work.&lt;/p&gt;

&lt;p&gt;So let’s think this through a touch more.&lt;/p&gt;

&lt;h2 id=&quot;scheduling-the-memory-pipeline&quot;&gt;Scheduling the Memory Pipeline&lt;/h2&gt;

&lt;p&gt;To get the read and write address correct, let’s examine how our signals
would move through this pipeline.  We can build a pipeline schedule as we’ve
done before on &lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;.  You can see
the schedule for our delay logic shown in Fig 2.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Signal Delay Element&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/delayw-pipeline.svg&quot; alt=&quot;The stages of the delay pipeline&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic concept of this diagram is that variables that are valid at one
time step lead to new variables that are valid on the next.  So if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt;
is valid on one time step, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; will be valid on the next.  Likewise
if we write &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; to memory using the &lt;code class=&quot;highlighter-rouge&quot;&gt;wraddr&lt;/code&gt; signal on one time step,
then the memory element, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem[wraddr]&lt;/code&gt; will have that value on the next time
step.&lt;/p&gt;

&lt;p&gt;Let’s follow what happens to this memory a touch further.  If after writing
to memory we immediately read from it into &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;, that will require a
read address, &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr&lt;/code&gt;.  We can then place this &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; into our output
delay element, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_delayed&lt;/code&gt; and be done.&lt;/p&gt;

&lt;p&gt;So how many clocks did that take?  Two.  Count the difference between when
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_delay&lt;/code&gt; was produced and when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; was produced.  This is then our
minimum delay when using memory: two clocks.&lt;/p&gt;

&lt;p&gt;If you’ve been following this blog, you may remember going through this same
exercise when we &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;built a moving average
filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here, we can work out how the read address corresponds to the write
address.  In particular, if &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr == wraddr-1&lt;/code&gt;, then we are delaying by
two.  So what we want, then, is to have &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr = wraddr+1-i_delay&lt;/code&gt; and
that’s all the missing logic required to make this work.&lt;/p&gt;

&lt;p&gt;Ok, I’ll admit … I didn’t put any time into figuring out how to schedule
the pipeline.  I just built it wrong, and then adjusted the relationship between
&lt;code class=&quot;highlighter-rouge&quot;&gt;wraddr&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr&lt;/code&gt; in the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
until I got things right.  That should help illustrate for you, though, the
&lt;a href=&quot;/blog/2017/06/23/my-dbg-philosophy.html&quot;&gt;power of building a test bench and
simulating&lt;/a&gt;–rather
than just implementing something and then wondering what went wrong later.&lt;/p&gt;

&lt;h2 id=&quot;building-this&quot;&gt;Building this&lt;/h2&gt;

&lt;p&gt;So let’s build our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;final delay
element&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Much of this logic is the logic you might expect from our discussion above.&lt;/p&gt;

&lt;p&gt;For example, we need to increment the write address on every sample.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	wraddr = 0;
	always @(posedge i_clk)
		if (i_ce)
			wraddr &amp;lt;= wraddr + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may notice that this write address doesn’t depend upon a reset signal.
The reason is simply because it doesn’t need to.  As long as it increments by
one on every clock from whatever address it’s at, it will work.&lt;/p&gt;

&lt;p&gt;Likewise we are going to want to write our incoming samples into memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (i_ce)
			mem[wraddr] &amp;lt;= i_word;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difficult trick from above was that we need to make certain that the
read address equals the write address plus one minus the delay.  Making this
happen in clocked logic is a touch more difficult–particularly because of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline control
signal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So that we can keep the read address a fixed distance from the write address
any time the delay, herein called &lt;code class=&quot;highlighter-rouge&quot;&gt;w_delay&lt;/code&gt;–you’ll see
why in a bit, changes, we’ll violate the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;rules of the global
CE bit&lt;/a&gt;
and set this on every clock.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;CE&lt;/code&gt; is valid, we set the read address
to the write address minus the delay plus two–not one.  The two allows us
to compensate for the fact that the write address is also changing on this
clock.  However, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;CE&lt;/code&gt; line is low, then the write address isn’t changing
and the logic may appear more intuitive.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	rdaddr = one;
	always @(posedge i_clk)
		if (i_ce)
			rdaddr &amp;lt;= wraddr + two - w_delay;
		else
			rdaddr &amp;lt;= wraddr + one - w_delay;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have our read address, we can simply read from memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (i_ce)
			memval &amp;lt;= mem[rdaddr];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all this information, we can now make our delay logic.  You migt recognize
this from before–the delay of zero and the delay of one samples are identical.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if (i_ce)
	begin
		if (w_delay == 0)
		begin
			o_word &amp;lt;= i_word;
			o_delayed &amp;lt;= i_word;
		end else if (w_delay == 1)
		begin
			o_word &amp;lt;= i_word;
			o_delayed &amp;lt;= o_word;
		end else begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even the delay logic, which is implemented using memory, reads just about the
same as it did before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			o_word &amp;lt;= i_word;
			o_delayed &amp;lt;= memval;
		end
	end
endmodule&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty simple, right?&lt;/p&gt;

&lt;p&gt;Well, okay, so let’s get one touch fancier.  Right now this
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;
works off of a variable, user-selectable delay.  Suppose instead that you
wanted this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
element&lt;/a&gt;
to use a fixed delay instead.  You could just feed a constant value to
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; and allow the optimizer within the synthesizer to handle
everything that follows.  We’ll take a separate approach here.  We’ll
capture this desired fixed delay with a &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_DELAY&lt;/code&gt; parameter, and then use
this parameter to determine the delay any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_DELAY != 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;w_delay&lt;/code&gt; item I said we’d touch on later?  This value is set to
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; when the parameter isn’t forcing the delay amount, and &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_DELAY&lt;/code&gt;
when it is.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	w_delay = (FIXED_DELAY != 0) ? FIXED_DELAY : i_delay;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s a nice improvement to our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
component&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, the overall design isn’t all that different from the one we started
out with–even with the details filled in.&lt;/p&gt;

&lt;h2 id=&quot;building-a-test-bench&quot;&gt;Building a Test Bench&lt;/h2&gt;

&lt;p&gt;Since this is a fairly simple component, we can discuss the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test bench&lt;/a&gt;
before we finally conclude–rather than separating the test bench into a
separate post.  The &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
for this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
element&lt;/a&gt;
follows from the same principles I laid out
&lt;a href=&quot;/blob/2017/06/21/looking-at-verilator.html&quot;&gt;earlier&lt;/a&gt;,
when we examined
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;.
Basically, when you are using
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
your &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
is a C++ program that interacts with your design, and then compares
the responses from the design to known responses that we might expect.&lt;/p&gt;

&lt;p&gt;We’ll capture our parameters before starting, since our test will be dependent
upon them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTESTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setting up the main program itself is fairly boilerplate.  You need to make
certain you call the &lt;code class=&quot;highlighter-rouge&quot;&gt;commandArgs&lt;/code&gt; function to initialize
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;.
We’ll then declare our test class–wrapping it within the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/testb.h&quot;&gt;TESTB&lt;/a&gt;
class so that we can get clock ticks, resets, and 
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
generation code for free.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Verilated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vdelayw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first task will be to open a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace file&lt;/a&gt;
so that we can debug any problems later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opentrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delayw.vcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll reset our core, so that we can start this test in a known state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may recall from our &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;first formal methods
post&lt;/a&gt;
the problem associated with testing a reset in a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;:
that there are more combinations of when a reset can happen with respect to this
logic than I have the creativity to imagine.  It’s a problem we’re going to
ignore here, but a valid one and hence one worth remembering.&lt;/p&gt;

&lt;p&gt;We’re going to need our own copy of the delay memory, so that we can also create
our own delay here in C++ to compare the unit under test to.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s run our test across every delay that this
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;
may produce.
We’ll loop through each possible delay, testing and validating the results
along the way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step, following any change in delay value, is to load up that
many values in the memory without testing any of the output delays.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To do this, we’ll generate a random number,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and to write it to our core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also record that number into our own memory copy at the same time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After loading one element per delay, we can now come back and test whether
or not the output was properly delayed.  We’ll check &lt;code class=&quot;highlighter-rouge&quot;&gt;NTESTS&lt;/code&gt; (512) of these
for each possible delay.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before, each test consists of creating a random value,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;writing that value to the core,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and recording a copy of it for ourselves.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can check whether or not the output from the core is the value from
&lt;code class=&quot;highlighter-rouge&quot;&gt;dly&lt;/code&gt; clocks ago.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_delayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, the tests are complete and all we need to do is close nicely.&lt;/p&gt;

&lt;p&gt;You may notice that, in the closing lines of the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;,
there’s no possibility for failure.  The reason is simply because a failure
to match will cause a failure above in the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statements, and so on
any failure we’ll never reach this point.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Simulation complete: %ld clocks&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_tickcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SUCCESS!!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it!  We’re all done with our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you choose to look through the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;actual test
bench&lt;/a&gt;,
you will notice one more capability that we haven’t discussed here: a certain
amount of fuzzing the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; line.  Specifically, I ticked the clock once with
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; valid, and then ticked it some (random) number of additional clocks with
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; equal to zero–just to see if it affected the behavior of the core.
(It didn’t)&lt;/p&gt;

&lt;p&gt;All of this put together gives us confidence that this
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;
works as designed.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We’ve still got lots of other problems and examples to work through,
but it’s always fun to pick a simple one to go over that every one can
understand.&lt;/p&gt;

&lt;p&gt;For now, let’s think about what can be done with a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;.
We’ve already discussed one example above:
synchronizing to a packet based upon a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;.
That wasn’t my purpose in building
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;this element&lt;/a&gt;
today, though.  My own purpose is to allow me to measure the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density&quot;&gt;Power Spectral Density (PSD)&lt;/a&gt;
in a waveform input—but we’ll leave that discussion for another day.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;But and if that evil servant shall say in his heart, My lord delayeth his coming ... (Matt 24:48)&lt;/em&gt;</description>
        <pubDate>Fri, 10 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/dsp/2017/11/10/delayw.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/11/10/delayw.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Building Formal Assumptions to Describe Wishbone Behaviour</title>
        <description>&lt;p&gt;No part of any system is as critical as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; that connects all of the
components together.  One misbehaving peripheral, or one tyrannical master,
and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
can be locked up until the next power cycle or internal reset.&lt;/p&gt;

&lt;p&gt;Making matters worse is the fact that it is very difficult to create a test
bench for every possible
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction.  Questions like, what happens if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request is abandoned, what happens if there’s a reset in the middle of the
request, what happens if … are all things that are difficult to capture
with a test bench.  This is simply due to the fundamental limitation of
test benches: they prove one path through your code, but not all paths
through your code.  From my own experience, test benches prove the “normal” path
through the code, whereas the formal methods will check for validity even
in the presence of abnormal things taking place.&lt;/p&gt;

&lt;p&gt;As a result,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interactions are ideal candidates for &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.
Doing so, though, requires
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal rules&lt;/a&gt;
defining how the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction &lt;em&gt;must&lt;/em&gt; take place–rules which, if a peripheral or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master fails to follow, will cause the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
to fail in some fashion.&lt;/p&gt;

&lt;p&gt;Generating those rules for the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone
bus&lt;/a&gt; will be our task today.
Specifically, we’ll be looking at the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;B4 version of the Wishbone
specification&lt;/a&gt;,
and the pipeline form of interaction within
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;it&lt;/a&gt;.
Our presentation will start with a discussion of how the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
operates in general, and then a quick comparison between the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;B4&lt;/a&gt;
and &lt;a href=&quot;http://opencores.org/cdn/downloads/wbspec_b3.pdf&quot;&gt;B3&lt;/a&gt;
versions of the Wishbone specification.  We’ll then mention two other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
and point out some of the differences between the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
and these other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;.
Finally, we’ll present a list of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties that can be used to verify the functionality of
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt; master.&lt;/p&gt;

&lt;h2 id=&quot;how-wishbone-works&quot;&gt;How Wishbone Works&lt;/h2&gt;

&lt;p&gt;If you are not familiar with how a
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
works, it is perhaps one of the simpler
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementations out there.
Here on &lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;
we’ve already discussed &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;how to build a Wishbone
slave&lt;/a&gt;.  We’ve
even walked through &lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;how to build a Wishbone bus
master&lt;/a&gt;, and a basic
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;Wishbone
interconnect&lt;/a&gt;
as part of our &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus
implementation&lt;/a&gt; series.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Wishbone has two channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-wb-channels.svg&quot; alt=&quot;Two channels in a Wishbone bus&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From a high level standpoint, the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
supports two channels of
information: a request channel which can be used to request either a read
or a write, and an acknowledgement channel which acknowledges the
transaction.  Further, while the request channel can be stalled at the slave’s
request, the response channel cannot.&lt;/p&gt;

&lt;p&gt;In order to dig in further, we’ll choose to examine the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
from the perspective of the master.  That means we’ll use the terms
given in Fig 2 for our &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components:&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2: Wishbone Bus terms&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-wb-terms.svg&quot; alt=&quot;Wishbone logic names&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This name translation is mostly about conforming to &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt;’s
strict naming conventions: inputs begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_&lt;/code&gt;, outputs with &lt;code class=&quot;highlighter-rouge&quot;&gt;o_&lt;/code&gt;,
in/outs with &lt;code class=&quot;highlighter-rouge&quot;&gt;io_&lt;/code&gt;.  After that, I group all of the wires associated
with a particular interface together, and hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;_wb_&lt;/code&gt;.  For those
components I’ve worked on with two Wishbone interfaces, such as &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/busdelay.v&quot;&gt;this delay by
one clock IP
component&lt;/a&gt;,
I’ll give the other &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
another name such as &lt;code class=&quot;highlighter-rouge&quot;&gt;_dly_&lt;/code&gt; for the delayed
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.  Later on in this
post, I may reference bus wires by the specification name bus drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;_O&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;_I&lt;/code&gt; suffix when it is clear what I am referencing.&lt;/p&gt;

&lt;p&gt;By way of an introduction, let’s walk through a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request, such as the one shown in Fig 3.&lt;/p&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 3: A single Wishbone bus request&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/prefetch.svg&quot; alt=&quot;The trace for a single Wishbone bus request, as drawn from the ZipCPU prefetch&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This example is drawn from the single-instruction
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;.
That particular &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;
is the simplest of the four prefetch modules the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
supports, in that it only handles a single request at a time–perfect
for an introductory discussion!&lt;/p&gt;

&lt;p&gt;So, let’s walk through the steps in this request.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
starts out idle.  This idle is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt;
both being low.&lt;/p&gt;

    &lt;p&gt;While the bus is idle, none of the other signals are relevant–save that
the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt; insists that
the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; line be low.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master chooses to start a transaction, it raises the
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line.  On the same clock, the master places a request on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
This means that the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; is raised and the address is placed on
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr.&lt;/code&gt; Since this is a read request, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; is held low.&lt;/p&gt;

    &lt;p&gt;Had this been a write request, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; would’ve been raised, the data
to be written would be placed on &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_sel&lt;/code&gt; would be
filled out with one bit per byte in &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; indicating which bytes
are actually going to be written.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From here we move to the slave.  The slave has the opportunity to tell the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master that it’s not (yet) ready to receive the request.  It
does this by holding the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stall&lt;/code&gt; line high.  As soon as
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; is true and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stall&lt;/code&gt; is false, the request has been
accepted.&lt;/p&gt;

    &lt;p&gt;There are many reasons why a slave might not be ready to receive a request,
but most of the ones I’ve dealt with surround either the slave being busy
with its initialization sequence or processing another interaction.
For example, the &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;
for the
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA-LX25 SoC project&lt;/a&gt; requires
over 20k clocks to start up.  Once started, it can only transmit 16-bits
to or from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
at a time.  For this reason, after startup, the &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;
needs to stall the bus during every other incoming transaction so as to
allow &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;the SDRAM
controller&lt;/a&gt;
time to send (or receive) both 16-bit halves of any 32-bit transaction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the master has made its request of the slave, it
drops &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; on the first clock after &lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt;,
since at this point it knows that the slave has received its request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the slave’s response is ready, the slave will raise the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt;
line and places the data that’s been read (if this were a response to a read
request) onto the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the master sees the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; high, it ends the request by dropping
the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line and the transfer is complete.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simple, no?
Let’s try another example.&lt;/p&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4: A pair of Wishbone bus requests&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dblfetch-ram.svg&quot; alt=&quot;The trace for a pair of Wishbone bus requests, as drawn from the ZipCPU prefetch named dblfetch&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig 4 shows an example, drawn from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;dblfetch
module&lt;/a&gt;.
This is another one of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s prefetch modules, with the
difference being that this one makes two back to back requests of the slave.&lt;/p&gt;

&lt;p&gt;This example starts out just like the last example.  However, once into
the example, there are some differences.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Instead of dropping &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; after the first time
&lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt;, the master leaves &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; high and
initiates a second request.  A new address is placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr&lt;/code&gt; for
this second request as well.  Only after the second time
&lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt; is true does &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;this
master&lt;/a&gt;
release the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; line, having now finished making both requests.&lt;/p&gt;

    &lt;p&gt;Since this example is being drawn from a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;prefetch&lt;/a&gt;
module, the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; line
is kept low.  Had this been a write request to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; would’ve been kept high for this second request, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_sel&lt;/code&gt; would’ve been set as appropriate for a second
write request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The slave now response with two clocks with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; high.  The first
time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; is high, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; is set to the result of reading the
first address request.  On the second &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; contains
the results of reading from the second address.&lt;/p&gt;

    &lt;p&gt;It’s worth noting here that the two acknowledgements do not need to come
back to back.  On slower peripherals they may be separated by one or more
clocks.&lt;/p&gt;

    &lt;p&gt;Also, had the request been a write request instead of a read request,
everything would be the same at this step except that the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;
information would’ve been relevant when &lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt; while
the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; returned information would’ve been ignored.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;the
master&lt;/a&gt;
has received the responses from both requests, as evidenced
by the second &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; being returned, it ends the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle by lowering &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt;.  Once done, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
becomes idle again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s really all there is to it.  The whole of this is really quite simple.&lt;/p&gt;

&lt;p&gt;Or is it?  Once I started trying to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally prove&lt;/a&gt;
that a master and a slave were properly “behaving”, the formal solver started
to find more and more cases of interest.  For example,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when the master drops the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line mid-request?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when the slave never responds?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when the master wishes to change the request mid-cycle?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these are questions that will need to be answered in order to develop
a list of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;Wishbone
properties&lt;/a&gt;
to describe this interaction.&lt;/p&gt;

&lt;h2 id=&quot;wishbone-classic&quot;&gt;Wishbone Classic&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone specification&lt;/a&gt;
also defines another type of interaction, this one
known as “Wishbone classic”.  It is defined in both the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt; version of the standard,
as well as the original
&lt;a href=&quot;http://opencores.org/cdn/downloads/wbspec_b3.pdf&quot;&gt;Wishbone B3&lt;/a&gt;
version.&lt;/p&gt;

&lt;p&gt;When using the Wishbone classic version of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;,
the master is required to wait until the slave acknowledges the request
before it can start a new request, as shown in Fig 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Wishbone Classic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-classic.svg&quot; alt=&quot;Wishbone classic trace of four requests&quot; width=&quot;680&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unlike the pipelined version of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
found in
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;, there are no stall
or strobe lines in the classic mode.  Instead, the lack of an acknowledgement
acts as a stall request.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6: Wishbone Pipeline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-pipeline.svg&quot; alt=&quot;Wishbone pipeline trace of four requests&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The unfortunate consequence of this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementation is that it takes
a &lt;em&gt;minimum&lt;/em&gt; of three clocks per transaction.  To illustrate this difference,
compare Fig 5 above to Fig 6 at the right showing a
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; &lt;em&gt;pipeline&lt;/em&gt;
interaction.  The pipeline mode can issue and receive the return from
one request per clock.&lt;/p&gt;

&lt;p&gt;Hence, the best case classic performance is &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; transactions in &lt;code class=&quot;highlighter-rouge&quot;&gt;3N&lt;/code&gt; clocks,
whereas for the pipeline mode you can achieve &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; transactions in &lt;code class=&quot;highlighter-rouge&quot;&gt;N+1&lt;/code&gt; clocks.&lt;/p&gt;

&lt;p&gt;The problem is compounded when you add circuit timing into the mix, since the
classic mode makes it very difficult to place synchronous/clocked components,
such as routers,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;arbiters&lt;/a&gt;,
or &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/busdelay.v&quot;&gt;delays&lt;/a&gt;,
between the master and slave without slowing down the overall system clock
speed–not just the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
throughput.&lt;/p&gt;

&lt;p&gt;The author(s) of the
&lt;a href=&quot;http://opencores.org/cdn/downloads/wbspec_b3.pdf&quot;&gt;Wishbone B3 specification&lt;/a&gt;
recognized this problem and so they offered a means of
extending the classic mode.  They extended Wishbone classic with
tag lines, both input and output, that can be optionally included with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Chief among these extra lines are the &lt;em&gt;cycle type indicator&lt;/em&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;CTI&lt;/code&gt;,
and the &lt;em&gt;burst length indicator&lt;/em&gt;.  Using these extra lines allows components
to interact from one side of a design to another.  For example, a slave can
start issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; after &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; without waiting for new requests if it knows
that further requests will be coming and that they will have incrementing
addresses.&lt;/p&gt;

&lt;p&gt;Understanding all of these other wires and indicators can add additional
complexity to a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; master.
For example, the master now needs to know which slaves support these
extra request wires and transaction types and which do not.  Likewise, the
any router or
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;arbiter&lt;/a&gt;
will need to know when these wires are relevant and when they are not, and
how shall they know this unless they decode all this extra logic?&lt;/p&gt;

&lt;p&gt;All of these are reasons the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
uses the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;
pipeline standard: it creates a single, efficient
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction standard.  If
all of the peripherals follow this same standard, then the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; (or any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master)
doesn’t need to keep track of which components interact in one fashion of the
interface and which interact in another, and slave’s don’t need to worry about
whether or not the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master will be sending additional requests or not–until
they are ready to see if an additional request is incoming.&lt;/p&gt;

&lt;h2 id=&quot;whats-missing-an-abort-capability&quot;&gt;What’s missing: an Abort Capability&lt;/h2&gt;

&lt;p&gt;There are two situations missing from the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone standard&lt;/a&gt;
that will need definition before we can discuss
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally proving&lt;/a&gt;
that a master or a slave conforms to the standard.  The first is how a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
is handled, and the second is how a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction may be aborted.&lt;/p&gt;

&lt;p&gt;We’ll start with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
There are several possible causes of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
The most obvious one is an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
generated by the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
when the given address doesn’t reference a
known slave.  Some slaves, notably those that contain
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
within them but not exclusively, may also generate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
Further, on those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
where security protections are in place, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
may be generated by a security fault.  The question is, how shall a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
be handled?&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7: Possible return signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-return.svg&quot; alt=&quot;Waveform diagram illustrating how all Wishbone requests result in either an ACK, RTY, or ERR return signal&quot; width=&quot;288&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone specification&lt;/a&gt;
states only that the response from a slave shall
either be an acknowledgement, a retry, or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
signal–never more than one
of these three for any transaction.  An example of this concept is shown
in Fig 7.  Fig 7 shows two transaction requests, the first ending in an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
and the second in an acknowledgement.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
indicates that a problem has or is taking place.  It isn’t immediately clear
how a successful transaction might follow one that is in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
As a result, the acknowledgement following an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
doesn’t really make sense.  Instead, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction really needs to be immediately terminated.&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 8: A different approach to Wishbone bus errors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-return-err.svg&quot; alt=&quot;Waveform diagram illustrating how an error should abort a transaction&quot; width=&quot;288&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For this reason, I recommend that any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_err&lt;/code&gt; goes high, it should
remain high until the end of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; drops, as illustrated in Fig 8.
Further, to minimize the uncertainty associated with which transactions are
complete and which ones ended in an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the stall line should be raised
together with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_err&lt;/code&gt; and also held high until &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is dropped.&lt;/p&gt;

&lt;p&gt;Alternatively, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction may be &lt;em&gt;aborted&lt;/em&gt; following an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
But how?  The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone spec&lt;/a&gt; doesn’t
discuss aborting transactions that have already been issued.&lt;/p&gt;

&lt;p&gt;Perhaps it may not seem all that important to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
abort.  This is not the case at all.  Two particular cases come to mind where a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
abort might be very useful.  The first is the case of a misbehaving peripheral.
Should a peripheral misbehave and not return an acknowledgement, it would
make sense to have a timeout following which the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction would be aborted.  The second case is that of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master that is given a warm reset
signal, while the rest of the items on the bus are not reset.  An example of
this might be the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
needing to abort an ongoing
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
transaction.  A third case, albeit a simple one, is that it would make sense
to abort a transaction following a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
as we discussed above.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9: Wishbone Abort&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-abort.svg&quot; alt=&quot;A trace showing a Wishbone transaction being aborted&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For the purpose of our
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt; development
below, we’ll simply adopt the standard that any
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
transaction may be aborted by dropping the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line, as shown in Fig 9.&lt;/p&gt;

&lt;p&gt;In this figure, four
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction requests are issued, two acknowledgements
are received, and then the master aborts the transaction.  Let’s just dig
into this idea a little deeper.&lt;/p&gt;

&lt;p&gt;We’ll start with the simple: those transactions that have been acknowledged
prior to the abort (i.e.  the dropping of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt;), will have been
completed.  In Fig 9, transactions &lt;code class=&quot;highlighter-rouge&quot;&gt;A0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;A1&lt;/code&gt; have completed.
All other outstanding requests have been left in an uncertain state: they
may or may not have been completed.&lt;/p&gt;

&lt;p&gt;Further, since the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; line is registered, &lt;code class=&quot;highlighter-rouge&quot;&gt;A2&lt;/code&gt;’s acknowledgement still
comes back–just on the clock after &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is dropped.  This acknowledgement
is the result of clocked logic: it cannot be canceled until a clock after the
abort.  However, the master knows nothing about the &lt;code class=&quot;highlighter-rouge&quot;&gt;A2&lt;/code&gt; request being
completed–since the return took place after the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line was
dropped and the transaction aborted.  Likewise, the &lt;code class=&quot;highlighter-rouge&quot;&gt;A3&lt;/code&gt; transaction may
or may not have been completed, but the master received no feedback regarding
these transactions as a result.&lt;/p&gt;

&lt;p&gt;Since the standard really doesn’t discuss how
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;
&lt;em&gt;should&lt;/em&gt; be handled, nor
does it describe how to deal with the case where &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is dropped
mid-transaction, one might argue that these two capabilities are not &lt;em&gt;changes&lt;/em&gt;
in &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;the specification&lt;/a&gt;, but rather just
&lt;em&gt;clarifications&lt;/em&gt; of it.&lt;/p&gt;

&lt;h2 id=&quot;other-bus-standards&quot;&gt;Other bus standards&lt;/h2&gt;

&lt;p&gt;Two other common
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
standards warrant some quick comments: the &lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon
bus&lt;/a&gt; and the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10: Avalon bus has two basic channels, like the Wishbone&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-avalon-channels.svg&quot; alt=&quot;The Avalon Bus has separate read/write channels&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of these two, the
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon bus&lt;/a&gt;
is the closest to the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;
pipeline
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
in its definition.  Indeed, some of the wires, such as the
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;waitrequest&lt;/code&gt; and the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;stall&lt;/code&gt; lines, are virtually identical.  The chief differences from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
translation standpoint, however, are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt; has a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle line, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt;, whereas the
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon bus&lt;/a&gt;
does not.  This cycle line delimits when a particular transaction begins and
ends.  It is especially useful for &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;bus
arbiters&lt;/a&gt;
that need to
know when they can switch a slave from being connected to one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master to another.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon
specification&lt;/a&gt;
requires acknowledgements that distinguish between read and write
transactions.  Whereas the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; line indicates a valid response from a slave for either read or
write, the &lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon
specification&lt;/a&gt;
requires either a &lt;code class=&quot;highlighter-rouge&quot;&gt;readdatavalid&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;writeresponsevalid&lt;/code&gt; from the slave
for every transaction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon specification&lt;/a&gt; also defines support
for burst or block interactions, much like the part of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4 specification&lt;/a&gt;
that the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has never needed.&lt;/p&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 11: The AXI4 bus requires five independent channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;Illustration, showing the five separate channels of the AXI4 bus&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
in common usage today is the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AMBA AXI4 bus&lt;/a&gt;.
This bus appears to have every feature a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
could have.  First, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
has not one, not two, but &lt;em&gt;five&lt;/em&gt; separate channels associated with it, each of
which can be individually stalled, as illustrated in Fig 11.  These channels
are: a read address channel, a read data channel, a write address channel,
a write data channel, and a write acknowledgement channel.  Second, the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;
can (optionally) return items out of order–and so
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
requests need to be given identifiers so they can properly be reordered
(or routed) upon return.  The
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;
also maintains the concept of a burst, so that the address &lt;em&gt;channel&lt;/em&gt; can
announce a burst of some length, and the logic implementing the associated data
channel then needs to count items and their responses in order to support it.
There’s more too: “last” transaction indicators, privilege violations,
multiple types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
codes, cacheable transaction attributes, and more.
Unlike the simple &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt; outlined
here, the &lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;
is &lt;em&gt;much more complicated&lt;/em&gt;–really more so than it needs to be in my humble
opinion.&lt;/p&gt;

&lt;p&gt;One good thing about having both read and write channels, though, is that an
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4&lt;/a&gt;
based &lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt; doesn’t
need intermediate memory: it can read directly from one channel while writing
to another—assuming it’s not reading from and writing to the same peripheral,
such as memory.&lt;/p&gt;

&lt;p&gt;Yes, there is a simplified version of the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt; that’s often called
AXI-lite.  While it can be much simpler to build a component slave
that responds to the AXI-lite protocol, certain features still make it more
difficult to work with than the other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
discussed above.  As an example, the
write request is issued across two channels, the write address and write
data channels, even though most slaves need these pieces of information on
the same clock cycle in order to work with them.  (The official solution
to this problem is to have the slave to stall the address line until both
address and data are available.)  A second difficult piece of complexity is
that, AXI-Lite requires a hand-shake on the return path, or &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; path, as
well as the request path.  Internally, this means is that an AXI peripheral
needs to be aware of stalls on this return path and either buffer any
responses within some form of FIFO, or stall the request path.&lt;/p&gt;

&lt;p&gt;If you are interested in reading further on this topic, consider comparing
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;logic necessary to bridge&lt;/a&gt;
from the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;,
to an
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;,
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axim2wbsp.v&quot;&gt;viceversa&lt;/a&gt;.
Neither IP component is simple.&lt;/p&gt;

&lt;p&gt;My point here is specifically this: if you are a hobbyist working from a
limited budget, then it doesn’t really make sense to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
that requires lots of logic per
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; master or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
slave peripheral, rather than
implementing a simple &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
interface across all masters and peripherals.&lt;/p&gt;

&lt;h2 id=&quot;further-simplifying-the-wishbone&quot;&gt;Further Simplifying the Wishbone&lt;/h2&gt;

&lt;p&gt;For anyone who has followed the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
development, you’ll know that I have been trying to keep the logic required
for any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction simple.  Why?  Simple because
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;logic costs money&lt;/a&gt;.
As such, I’ve simplified the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; signals that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; issues,
and that its peripherals respond to.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Everything I have created to interact with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; does so in
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
pipeline mode &lt;em&gt;only&lt;/em&gt;.  It’s both simpler and faster than the classic mode.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are no retry signals nor tag signals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; signal is equivalent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; signal.  Once the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
grants a master access of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
based upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line, that master owns the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
until the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line is dropped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Slaves do not create
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;, the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
does.&lt;/p&gt;

    &lt;p&gt;I haven’t found a need for a slave to produce a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
ROM’s, for example, can quietly acknowledge write’s without performing any
action.  The consequence of this is merely that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master interacting with a particular peripheral is responsible for
interacting with that peripheral appropriately.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CYC may not be held indefinitely.&lt;/p&gt;

    &lt;p&gt;Although &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;the specification&lt;/a&gt;
explicitly allows a master to hold the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line high
indefinitely, doing so would prevent a second master from ever accessing
the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; needs to be dropped as soon as the transaction is
complete–assuming that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
isn’t being held open as part of a condition requiring a lock.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These rules are now sufficient enough that we can write a formal description
of a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;, one that we can then
use to formally verify a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master (or slaves) functionality.&lt;/p&gt;

&lt;h2 id=&quot;the-formal-rules&quot;&gt;The Formal Rules&lt;/h2&gt;

&lt;p&gt;To capture all of this &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
functionality, let’s create a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;formal Verilog
module&lt;/a&gt;
containing only assumptions and assertions together with any other logic
necessary to express those assumptions or assertions.  The goal of
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;this module&lt;/a&gt;
will be such that, if dropped into a
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
master IP component, this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;formal properties
module&lt;/a&gt;
can then be used to verify that the master’s interaction with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
is done properly.  (Other application specific properties may
still be required.)&lt;/p&gt;

&lt;p&gt;You can find a copy of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;this module
here&lt;/a&gt;,
should you wish to follow along in the discussion below.&lt;/p&gt;

&lt;p&gt;The first thing to note about
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;this module&lt;/a&gt;
are the ports.  &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;This
module&lt;/a&gt;
contains all the ports necessary for a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interface, whether master or slave, together with the traditional clock and
(synchronous) reset ports.  In order to keep the state of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
transaction, as viewed by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master, in sync with the state as seen by any other &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;formal
properties&lt;/a&gt;
within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master, three additional signals are in this port list
as well.  These are the count of the number of requests that have been made,
the number of acknowledgements received, and the number of outstanding
transactions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;module	fwb_master(i_clk, i_reset,
		// The Wishbone bus
		i_wb_cyc, i_wb_stb, i_wb_we, i_wb_addr, i_wb_data, i_wb_sel,
			i_wb_ack, i_wb_stall, i_wb_idata, i_wb_err,
		f_nreqs, f_nacks, f_outstanding);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt;, controls the number of bits in these last three
signals.&lt;/p&gt;

&lt;p&gt;Internal to the module, we’ll create a helper variable, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_request&lt;/code&gt;, to contain
all the details of any
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
transaction request.  We’ll come back to this and use it later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	localparam	STB_BIT = 2+AW+DW+DW/8-1;
	wire	[STB_BIT:0]	f_request;
	assign	f_request = { i_wb_stb, i_wb_we, i_wb_addr, i_wb_data, i_wb_sel };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With these two parts aside, we can turn our attention to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;formal
properties&lt;/a&gt;
associated with creating
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transactions.&lt;/p&gt;

&lt;p&gt;The first property to assert will be that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
is initialized in a reset condition–no requests are being made, and the
reset line is high.  Further, we’ll assume that the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; lines
are also low upon startup.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	// Assume we start from a reset condition
	initial assert(i_reset);
	initial assert(!i_wb_cyc);
	initial assert(!i_wb_stb);
	//
	initial	assume(!i_wb_ack);
	initial	assume(!i_wb_err);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In general, we’ll &lt;em&gt;assume&lt;/em&gt; that any &lt;em&gt;inputs&lt;/em&gt; to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master obey the master’s formal properties below, while &lt;em&gt;asserting&lt;/em&gt; that
any of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master’s &lt;em&gt;outputs&lt;/em&gt; follow their properties.  A similar &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_slave.v&quot;&gt;companion
module&lt;/a&gt;,
appropriate for a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
slave, will &lt;em&gt;assume&lt;/em&gt; the &lt;em&gt;inputs&lt;/em&gt; to the bus slave from the master and
&lt;em&gt;assert&lt;/em&gt; the outputs of a bus slave–but that’s not the perspective we’ll
be using below.&lt;/p&gt;

&lt;p&gt;We also assert, on the clock following any &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; request, that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
has returned to this same idle state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_reset)))
	begin
		assert(!i_wb_cyc);
		assert(!i_wb_stb);
		//
		assume(!i_wb_ack);
		assume(!i_wb_err);
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, we’ll insist that all signals coming into or out of our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;formal
property
module&lt;/a&gt;
can &lt;em&gt;only&lt;/em&gt; change on the positive edge of the clock.  Everything,
whether input or output, must be synchronous with the clock.  (A later upgrade
might be to create an asynchronous reset signal.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @($global_clock)
	if ((f_past_valid)&amp;amp;&amp;amp;(!$rose(i_clk)))
	begin
		assert($stable(i_reset));
		assert($stable(i_wb_cyc));
		assert($stable(f_request)); // The entire request should be stable
		//
		assume($stable(i_wb_ack));
		assume($stable(i_wb_stall));
		assume($stable(i_wb_idata));
		assume($stable(i_wb_err));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s work through the basics of creating a transaction request.&lt;/p&gt;

&lt;p&gt;First, as we discussed above, we’ll insist that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; signal.
This will abort any ongoing transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_err))&amp;amp;&amp;amp;($past(i_wb_cyc)))
		assert(!i_wb_cyc);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
isn’t very clear about what can happen to the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line
when &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; is low.  Indeed, it is somewhat contradictory.  However, if we
insist that &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; can &lt;em&gt;only&lt;/em&gt; be high when &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; is also high, then it
simplifies the slave’s logic–as I discussed at
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf.pdf&quot;&gt;ORCONF 2016&lt;/a&gt;.
Since this logic is usually easy to guarantee within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master–requiring no extra logic cost, we’ll insist upon it as a
formal property here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (i_wb_stb)
			assert(i_wb_cyc);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt; is silent regarding
whether or not the bus request has any meaning while the &lt;code class=&quot;highlighter-rouge&quot;&gt;STALL&lt;/code&gt; line is high.
However, some slaves need to peek at the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
to know how to handle the next transaction.
For these slaves, we insist that once a request is placed onto the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
it cannot be changed until it is accepted.  Hence, if a request has been made
but the stall line remains high, then that same request must not change
on the next clock cycle–at least not until either an abort or the request
is accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_stb))&amp;amp;&amp;amp;($past(i_wb_stall))&amp;amp;&amp;amp;(i_wb_cyc))
	begin
		assert(i_wb_stb);
		assert($stable(f_request));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt; says nothing about
whether read and write requests can be mixed or not.  However, I am not
familiar of any situation where that makes any sense.  Therefore, we’ll
specifically prohibit the &lt;code class=&quot;highlighter-rouge&quot;&gt;WE&lt;/code&gt; (write enable) line from changing between
one request and the next.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_stb))&amp;amp;&amp;amp;(i_wb_stb))
			assert(i_wb_we == $past(i_wb_we));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To go one step further, we’ll insist that the &lt;code class=&quot;highlighter-rouge&quot;&gt;WE&lt;/code&gt; only change when there are
no outstanding requests–such as in a “read-modify-write” cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	// Within any given bus cycle, the direction may *only* change when
	// there are no further outstanding requests.
	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;(f_outstanding &amp;gt; 0))
			assert(i_wb_we == $past(i_wb_we));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SEL&lt;/code&gt; (byte select) line(s) are an indication of which bytes within a word
should be written to the device.  To be meaningful, any write transaction
should assert one or more of these bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_wb_stb)&amp;amp;&amp;amp;(i_wb_we))
			assert(|i_wb_sel);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, let’s move on to the lines returned from the slave–primarily the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; lines.&lt;/p&gt;

&lt;p&gt;We’ll start by insisting that these two signals should never
be asserted unless the master is in the middle of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle and &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; is high.&lt;/p&gt;

&lt;p&gt;The one exception to this rule is in the case of an abort, where &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; goes
low before the slave has a chance to respond.  Thus, if &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; was low
(i.e. no &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle and no abort), then both &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; should be low on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_wb_cyc)))
	begin
		assume(!i_wb_ack);
		assume(!i_wb_err);
		// ...
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
makes it clear that both &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; signals may
never be true on the same clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(*)
		assume((!i_wb_ack)||(!i_wb_err));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next two properties get into counting.  They have to deal with how
long a slave can take to accept a request, and how long the slave can take
to respond to the request once accepted.  Both are predicated upon some
parameterized number of counts.  If the respective count parameter is non-zero,
then the time limit property is applied.&lt;/p&gt;

&lt;p&gt;For the first property, we’ll assume that the slave can only stall the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
for &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_STALL&lt;/code&gt; counts–no more.  The purpose of this is just to
help to limit the search space for the formal verifier.  It is optional and
not strictly necessary, but you may find it to be useful.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate if (F_MAX_STALL &amp;gt; 0)
	begin : MXSTALL
		// ...
		reg	[(DLYBITS-1):0]		f_stall_count;

		initial	f_stall_count = 0;
		always @(posedge i_clk)
			if ((!i_reset)&amp;amp;&amp;amp;(i_wb_stb)&amp;amp;&amp;amp;(i_wb_stall))
				f_stall_count &amp;lt;= f_stall_count + 1&#39;b1;
			else
				f_stall_count &amp;lt;= 0;
		always @(posedge i_clk)
			if (i_wb_cyc)
				assume(f_stall_count &amp;lt; F_MAX_STALL);
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next optional property is the number of cycles to wait until the next
acknowledgement is received.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_ACK_DELAY&lt;/code&gt; is greater than zero,
these cycles will be counted and an assumption will limit this count so that
there are always this many or fewer cycles between acknowledgements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate if (F_MAX_ACK_DELAY &amp;gt; 0)
	begin : MXWAIT
		reg	[(DLYBITS-1):0]		f_ackwait_count;

		initial	f_ackwait_count = 0;
		always @(posedge i_clk)
			if ((!i_reset)&amp;amp;&amp;amp;(i_wb_cyc)&amp;amp;&amp;amp;(!i_wb_stb)
					&amp;amp;&amp;amp;(!i_wb_ack)&amp;amp;&amp;amp;(!i_wb_err))
			begin
				f_ackwait_count &amp;lt;= f_ackwait_count + 1&#39;b1;
				assume(f_ackwait_count &amp;lt; F_MAX_ACK_DELAY);
			end else
				f_ackwait_count &amp;lt;= 0;
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When I initially started proving bus properties, these two parameters,
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_STALL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_ACK_DELAY&lt;/code&gt; were very important for limiting how many
states the formal solver needed to examine.  In hind sight, I think the
three output ports can remove the need for these two properties–but I’ve left
these checks in place for the time being.&lt;/p&gt;

&lt;p&gt;We still need two more counters.  The first, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs&lt;/code&gt;, will count the number
of requests that have been made and accepted by the slave, while the second,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_nacks&lt;/code&gt;, will count the number of acknowledgements returned.  Both of these
counters will be returned to our parent module as outputs of this module.&lt;/p&gt;

&lt;p&gt;The number of requests accepted starts at zero, and returns to zero
upon any reset or the end of any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle.  While the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle is active, this number will accumulate any time the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; is true
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;STALL&lt;/code&gt; signal is not–the indication that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction request has been made.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	f_nreqs = 0;
	always @(posedge i_clk)
		if ((i_reset)||(!i_wb_cyc))
			f_nreqs &amp;lt;= 0;
		else if ((i_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall))
			f_nreqs &amp;lt;= f_nreqs + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nacks&lt;/code&gt; counter is almost identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs&lt;/code&gt; counter, save that
the number of acknowledgements increments any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_err&lt;/code&gt;
is true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	f_nacks = 0;
	always @(posedge i_clk)
		if (!i_wb_cyc)
			f_nacks &amp;lt;= 0;
		else if ((i_wb_ack)||(i_wb_err))
			f_nacks &amp;lt;= f_nacks + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difference between the number of requests and the number of acknowledgements
is the number of outstanding requests.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nacks&lt;/code&gt; are both
registered, we avoid a second delay here by not registering &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding&lt;/code&gt;.
The result, though, is that we may need to trim it suddenly to zero anytime
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; is dropped.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	f_outstanding = (i_wb_cyc) ? (f_nreqs - f_nacks):0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
masters are known to only ever request a fixed number of values on
any transaction.  For example, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;
that will only ever request one item from the bus, a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;dblfetch
module&lt;/a&gt;
that will only ever request two items, and a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;pfcache
module&lt;/a&gt;
that will always request exactly one cache line.&lt;/p&gt;

&lt;p&gt;For these masters, the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt; parameter can be used to limit the
formal proof and force this maximum request limit.
If the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt; variable has been set to a value greater than zero,
then we insist that the number of requests and the number of acknowledgements
are always both less than this value.  This assertion is set into two parts.
First, if &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; is on then a new request is pending so the number
of requests must be less than &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt;.  Second, if &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; is false,
then the full number of requests may have been issued.  Further, we’ll also
insist that the number of outstanding requests remains one less than
&lt;code class=&quot;highlighter-rouge&quot;&gt;(1&amp;lt;&amp;lt;F_LGDEPTH)&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt; is the number of bits in our counters.
This guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding&lt;/code&gt; will never roll over.  It also requires,
however, that the log, based two, of the maximum number of outstanding
transactions must be passed to our core in &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt; is not specified, we’ll assume that the number of
outstanding requests is not allowed to roll over the maximum value and
back to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_wb_cyc)&amp;amp;&amp;amp;(F_MAX_REQUESTS &amp;gt; 0))
		begin
			if (i_wb_stb)
				assert(f_nreqs &amp;lt; F_MAX_REQUESTS);
			else
				assert(f_nreqs &amp;lt;= F_MAX_REQUESTS);
			assume(f_nacks &amp;lt;= f_nreqs);
			assert(f_outstanding &amp;lt; (1&amp;lt;&amp;lt;F_LGDEPTH)-1);
		end else
			assume(f_outstanding &amp;lt; (1&amp;lt;&amp;lt;F_LGDEPTH)-1);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
makes it very clear that there shall only be one acknowledgement (at most)
per request.  To capture this requirement, we simply insist within our formal
proof that if there are no outstanding requests, then there shall be no
incoming acknowledgements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_wb_cyc)&amp;amp;&amp;amp;(f_outstanding == 0))
		begin
			// ...
			assume(!i_wb_ack);
			// ...
		end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This same is not true of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;,
however.  A slave may produce a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
before accepting any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request.  However, a slave may not produce an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
if it has never been addressed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((!i_wb_stb)&amp;amp;&amp;amp;(f_outstanding == 0))
			assume(!i_wb_err);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we switch from requirements for all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
masters to the first of several optional properties.  These options are
controlled by parameters to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/fwb_master.v&quot;&gt;formal master properties
module&lt;/a&gt;.
The options insist upon properties not required by the protocol, but which may
be worth asserting for some masters.  As such, they are convenience properties
only, and therefore default to not being part of the test.&lt;/p&gt;

&lt;p&gt;The first of these is the source option.  If a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master is the &lt;em&gt;source&lt;/em&gt; of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request, as opposed to being an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
or adapter mid stream, then the request should start with both &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; lines going high together.  Since the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
doesn’t require this, we list it here as optional.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate if (F_OPT_SOURCE)
	begin : SRC
		// ...
		always @(posedge i_clk)
			if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_wb_cyc))&amp;amp;&amp;amp;(i_wb_cyc))
				assert(i_wb_stb);
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_SOURCE&lt;/code&gt; is a master only parameter option, however.  By the time a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction gets to the slave, the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line may go high or low without
actually affecting the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line of the slave.&lt;/p&gt;

&lt;p&gt;The next option is the read-modify-write option, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_RMW_BUS_OPTION&lt;/code&gt;.  If
this option is not set, the master must drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line following the last
acknowledgement.&lt;/p&gt;

&lt;p&gt;This doesn’t apply, though, to those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
that may wish to hold the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
open (locked) between two transactions–such as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; requesting an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Atomicity_(database_systems)&quot;&gt;atomic&lt;/a&gt;
increment operation.  For these masters, the option should be left on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	parameter [0:0]		F_OPT_RMW_BUS_OPTION = 1;
	// ...
	generate if (!F_OPT_RMW_BUS_OPTION)
	begin
		// ...
		always @(posedge i_clk)
			if (f_outstanding == 0)
				assert((i_wb_stb)||(!i_wb_cyc));
		// ...
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, the master doesn’t care what happens on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
return
lines if the cycle line is low or if there’s no acknowledgement coming back,
so restricting these wires to known values makes a lot of sense.  This is the
purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_SHORT_CIRCUIT_PROOF&lt;/code&gt; option.  If set, it helps to limit
the formal search space and thus it is intended to make the proof simpler.&lt;/p&gt;

&lt;p&gt;On the other hand, if something within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master &lt;em&gt;does&lt;/em&gt; depend upon these values (when it shouldn’t), then we might want
to know about it.  For this reason, the option default is not to short circuit
the slave’s responses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	parameter [0:0]		F_OPT_SHORT_CIRCUIT_PROOF = 0;
	// ...
	generate if (F_OPT_SHORT_CIRCUIT_PROOF)
	begin
		always @(posedge i_clk)
		begin
			if (!i_wb_cyc)
			begin
				restrict(!i_wb_stall);
				restrict($stable(i_wb_idata));
			end else if ((!$past(i_wb_ack))&amp;amp;&amp;amp;(!i_wb_ack))
				restrict($stable(i_wb_idata));
		end
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While not all masters are likely to make discontinuous requests, some might.
Therefore, we allow an option, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_DISCONTINUOUS&lt;/code&gt;, that can be set to
allow discontinuous requests.  If this option is not set, then once the
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line is dropped, we’ll insist that it cannot be raised again without
also dropping the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	parameter	[0:0]	F_OPT_DISCONTINUOUS = 0;
	// ...
	generate if ((!F_OPT_DISCONTINUOUS)&amp;amp;&amp;amp;(!F_OPT_RMW_BUS_OPTION))
	begin : INSIST_ON_NO_DISCONTINUOUS_STBS
		always @(posedge i_clk)
			if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_cyc))&amp;amp;&amp;amp;(!$past(i_wb_stb)))
				assert(!i_wb_stb);
	end endgenerate

endmodule&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since any master that implements a “read-modify-write” cycle will need to
raise the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line after it has been initially dropped,
the generate above attempts to capture these conditions.&lt;/p&gt;

&lt;p&gt;Put together, any &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; master
core, having the properties listed above, is guaranteed to interact properly
with a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;, pipelined
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This post has been written following the lessons I’ve learned making
formal proofs for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
prefetch modules
[&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;1&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;2&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;3&lt;/a&gt;].  I’ve
also now tested other interactions with these properties, such as those of a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;priority
arbiter&lt;/a&gt;
or those of a
Wishbone
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/busdelay.v&quot;&gt;bus delay&lt;/a&gt;
component, and I’ve adjusted many of these components with the lessons
I’ve learned in this process.  As a result, we may yet come back to this topic
of formally verifying a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
master, but now that we’ve presented the basics any following posts will
reflect how these basics are applied to particular application-specific
situations.&lt;/p&gt;

&lt;p&gt;Until then, here’s a fun thought: on a &lt;a href=&quot;http://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;recent application&lt;/a&gt;
I have been working on, I had the option of using an
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon bus&lt;/a&gt;.
Since all of my tools are (so far) written for the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;,
I needed to either rebuild my tools, or to build a bridge to cross from
the one to the other.  Every transaction needed to go through this bridge,
so it is a very critical component of this design.
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal methods&lt;/a&gt;,
such as the ones we’ve discussed today, have given me confidence, even
before placing this bridge onto actual hardware, that it will work in
practice when I do.&lt;/p&gt;

&lt;p&gt;At some point, I may switch from this
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon&lt;/a&gt;
to
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
bridge to an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axisp&quot;&gt;AXI to Wishbone bridge&lt;/a&gt; I built some
time ago, but I haven’t quite finished the proof of that component (yet).&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Every word of God is pure: he is a shield unto them that put their trust in him. (Prov 30:5)&lt;/em&gt;</description>
        <pubDate>Tue, 07 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/zipcpu/2017/11/07/wb-formal.html</link>
        <guid isPermaLink="true">http://zipcpu.com/zipcpu/2017/11/07/wb-formal.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>The Interface to a Generic Filtering Testbench</title>
        <description>&lt;p&gt;We’ve now presented several approaches to filtering within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
on &lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;.  We talked about &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;two of
the simplest filters&lt;/a&gt;, a
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic filter implementation&lt;/a&gt;,
a &lt;a href=&quot;/dsp/2017/09/29/cheaper-fast-fir.html&quot;&gt;cheaper version of the
same&lt;/a&gt;, and even how
to build a &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;moving average
filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we haven’t discussed is how to test
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;these filters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just to make matters worse,
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;these filters&lt;/a&gt;
are only the tip of the iceberg of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
we’d like to test.  Not only do we have the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;current set of filters to test&lt;/a&gt;,
but I’d also like to present Verilog logic for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;Symmetric filters&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Half-band_filter&quot;&gt;Half-band filters&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_transform&quot;&gt;Hilbert transforms&lt;/a&gt;
and even some slower versions of those same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each of these filters is going to need a test bench.  At the same time,
these test benches are going to have a lot of code in common between
each other.  Let’s consider, today, what functionality a generic
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator based&lt;/a&gt;
filtering test bench requires, so that we can then create a filter test
bench engine that can be used, and modified if needed, to test all of these
filters.&lt;/p&gt;

&lt;h2 id=&quot;abstracting-a-logic-filter&quot;&gt;Abstracting a logic filter&lt;/h2&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Generic Filter portlist&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-ports.svg&quot; alt=&quot;A list of the ports of a generic filter: reset, setting taps (i_tap_wr, i_tap), and samples (i_ce, i_sample, and o_sample)&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first step is going to be abstracting what a filter looks like in
general so that one basic test bench can support many filters.  For this,
we can draw upon the design of our most
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic filter&lt;/a&gt;, and see a
set of ports looking roughly like Fig 1.  There’s an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; strobe
to clear the filter’s internal memory, an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap_wr&lt;/code&gt; signal to indicate that
the filter is being loaded with new taps through &lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap&lt;/code&gt;, and an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; signal
to indicate both that a new sample is ready at &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; and that a sample
is ready to be read out at &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sample&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Almost all of our &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
filters, to date, have had a form similar to this one.
The biggest exception is the &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;boxcar
filter&lt;/a&gt;–but with a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/rtl/boxwrapper.v&quot;&gt;simple
wrapper&lt;/a&gt;
even this filter can be made to fit this form.&lt;/p&gt;

&lt;p&gt;Now, given this form, let’s consider the questions that need to be answered
by a test bench:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Does the filter have the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
we expect it to have?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does this filter faithfully apply the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
to any signal we give it?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will a carefully constructed input stream overflow the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
of this filter?  If the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filter&lt;/a&gt;,
what is it’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;
ripple and &lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;
depth (as measured)?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Infinite_impulse_response&quot;&gt;IIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
will have different needs from 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;.
For now, we’ll just focus on the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
variety in determining how to abstract this test bench.&lt;/p&gt;

&lt;p&gt;Digital
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
based filters in particular also have some &lt;em&gt;properties&lt;/em&gt; that will affect
how we interact with them from one test bench to the next.  For many of our
filters, these are &lt;code class=&quot;highlighter-rouge&quot;&gt;parameter&lt;/code&gt;s within our design.  Those same parameters will
affect how we interact with the filter to answer the questions above.
The &lt;em&gt;properties&lt;/em&gt; that a test harness for all filters will need to know are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt;, the number of bits per input sample&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TW&lt;/code&gt;, the number of bits per tap&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OW&lt;/code&gt;, the number of bits per output sample&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELAY&lt;/code&gt;, the delay between an impulse input and the first sample that
responds to that input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NTAPS&lt;/code&gt;, the number of taps in the filter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NCLOCKS&lt;/code&gt;, the minimum number of clocks between successive input clock
 enables&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our purpose today will be to build a generic filtering test harness.  The goal
for this harness will be to handle all of the various
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
properties we just discussed above,
to interact with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
of the form shown in Fig 1., and then to answer about the filter’s performance
based upon the questions above.  You can imagine that this test harness will
have the form shown in Fig 2, where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
itself fits within a virtual socket in this virtual test harness.&lt;/p&gt;

&lt;table style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: C++/Verilator Filtering Test Harness&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-tb-harness.svg&quot; alt=&quot;A picture showing inputs to a filter test harness, as well as conclusions one would like to draw&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The harness won’t quite be a complete test bench, but rather a component of
a complete test bench.  As such it should make it easier to build
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
test benches using this harness.&lt;/p&gt;

&lt;h2 id=&quot;building-a-test-harness&quot;&gt;Building a test harness&lt;/h2&gt;

&lt;p&gt;All of these actions and properties can easily be encapsulated by a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;C++ test
object&lt;/a&gt;
that will provide us conceptualized access to our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll need to make the C++ class that encapsulates this object easily
inheritable, as (for example) the meaning of the taps loaded into one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
(such as a generic one) might be very different from another (such
as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;symmetric filter&lt;/a&gt;).
Hence, most of these methods will be virtual.&lt;/p&gt;

&lt;p&gt;Let’s outline what &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.h&quot;&gt;one such filter test
harness&lt;/a&gt;
might look like.  We’ll let it inherit from a basic
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class, such as we’ve &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;discussed
before&lt;/a&gt;.
This
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class, if you recall, primarily provided us with the ability to &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt;
the clock by raising and then lowering the clock input pin, as well as
recording our simulation to a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
file&lt;/a&gt;.  The final function of
this &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class is to give us access to a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt; function which will set
the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; pin and toggle the clock.&lt;/p&gt;

&lt;p&gt;We’ll define our test harness class with some defaults–things that can be
overridden later by the test bench that uses this harness.  Further, since
we don’t know what the class name of our actual filter is going to be until
build time, we’ll make the test harness class, &lt;code class=&quot;highlighter-rouge&quot;&gt;FILTERTB&lt;/code&gt;, a template class.
That way, the compiler can fill in the template details once they are known.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FILTERTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember all of those properties we said that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filter&lt;/a&gt; would have?
These will be variables of our object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The test harness will need to know what these properties are.
Hence, we’ll start out by handling the setting and referencing of these various
properties.  This won’t actually change anything about the
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; generated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; code itself,
nor will these values connect to the values often set by parameters within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
(though it probably should), these routines will just let the actual test
bench tell tell the test harness what properties are associated with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s the number of bits allocated to the input sample, IW.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;OW is the number of bits allocated to output samples.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;TW is the number of bits allocated to each of the taps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;DELAY is the number of clocks between an input and the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
response that it impacts.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Slower &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s,
may require multiple clocks between each global CE signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;.
We’ll keep track of this feature/capability in the CKPCE, the clocks
per CE parameter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CKPCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CKPCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The minimum number of clocks per CEs is just one, something enforced above.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NTAPS&lt;/code&gt; is the number of filter coefficients, or taps in this filter–it is the
length of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse
response&lt;/a&gt;.
Our test harness will use this to know how many samples following an
impulse need to be examined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll cache this &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse
response&lt;/a&gt;
(more later), so any time the number of taps changes (such as with the
&lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;boxcar&lt;/a&gt; filter), the cache
will need to be reloaded as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clear_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now with those properties aside, we can start looking at methods (actions) this
filtering test harness will need to handle.  As you’ll notice from below,
we’ll make most of these virtual–so that different types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s can
change them if need be.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;We discussed&lt;/a&gt;
the &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method as a generic method that will call
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
and simply step the clock by one tick.  It will also record any results into
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;a VCD file&lt;/a&gt;
(or other file) that may need to be recorded–if desired.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may remember some time ago how I recommended &lt;a href=&quot;/dsp/2017/07/24/dsp-debugging.html&quot;&gt;debugging DSP algorithms
graphically&lt;/a&gt;.
That recommendation applies to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s
as well.  For those cases where you
want to output the results of your filtering operation to examine,
our test harness allows us to open a file wherein we’ll place both
input values and output values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;record_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to apply test vectors and receive independent results, we’ll need to
be able to reset the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to clear any internal state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For our test structure, we want to be able to load
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficients into our design.  This will involve sending a vector of integers,
of a given length, to the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap&lt;/code&gt; port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method will send the given data to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
as input samples, and return the result from applying the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method is nearly identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method, with the
single exception that the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt;s the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
first.  This will be important for
sending any particular test vectors to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;, and for making certain
that there aren’t any unintended consequences in the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As it will turn out, lots of methods are going to depend upon the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
Let’s overload the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator to return coefficients from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;that response&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, rather than calculating the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
over and over again, we’ll calculate it once and cache the results.  That
means that any time there is a change in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s coefficients,
we’ll need to be able to clear this cache.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;clear_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we have a method above for loading coefficients into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
let’s create another method that not only loads coefficients into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
but also verifies that the resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
contains the coefficients that we want.&lt;/p&gt;

&lt;p&gt;As with many of these methods, this method is virtual so that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s
with less than generic tap structures, such as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;symmetric filter&lt;/a&gt;s
as one example, can overload this function and provide their own test method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;testload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all of the above functionality, there’s no reason why we can’t apply
particular known inputs to this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
in order to measure its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;.
Since this is likely to be a common request, we’ll make a method for doing
this and place it into our test harness as well.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;nfreq&lt;/code&gt; describes how
many frequencies we are interested examining, and the result will be placed
into the &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt; buffer.
The algorithm will work by placing complex exponential test vectors into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;mag&lt;/code&gt; to control the amplitude of these test vectors,
with a &lt;code class=&quot;highlighter-rouge&quot;&gt;mag&lt;/code&gt; of one being the largest magnitude the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
will accept without overflow.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfreq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPLEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll add two further canned tests.  The first, &lt;code class=&quot;highlighter-rouge&quot;&gt;test_overflow()&lt;/code&gt;,
checks whether a carefully constructed input designed to overflow the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
does or does not.  A true value means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
passed this test.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;test_overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second test is appropriate for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filters&lt;/a&gt;
only.  This test will measure the highest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt; frequency, the lowest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt; frequency, the depth of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;, and the ripple across the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;.  It will work for most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
functions, but perhaps not for all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filters&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;measure_lowpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ripple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together, these are the methods (actions) we’ll teach our test harness how to
apply to all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s,
These methods are declared in &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.h&quot;&gt;this C++ header
file&lt;/a&gt;.
We’ll discuss &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;how to implement
them&lt;/a&gt;
in the next section.  For now, let me challenge you to ask the question: have
we gotten everything?  Are there other particular capabilities that a generic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
test harness should have–capabilities that we’ve overlooked?  Feel free to
write me and tell me about anything I’ve missed.&lt;/p&gt;

&lt;h2 id=&quot;test-harness-method-details&quot;&gt;Test harness method details&lt;/h2&gt;

&lt;p&gt;Let’s now turn to the details of how this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness is
implemented&lt;/a&gt;.
In general, we’ll just work our way through the various methods associated with
this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness C++
class&lt;/a&gt;,
discussing how to implement each along the way.&lt;/p&gt;

&lt;h3 id=&quot;handling-different-data-widths&quot;&gt;Handling different data widths&lt;/h3&gt;

&lt;p&gt;The first thing we are going to implement is a helper method for adjusting the
number of bits in a number.  Since
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
will return numbers with only &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits in them, we’d like to be able to
sign extend these values to their full &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; capability.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, if the value is unsigned, we’ll also like to extend the value–this
time with zero bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are just two helper functions that we’ll need when sending bit limited
data to
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;, and when interpreting
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;’s
results.&lt;/p&gt;

&lt;h3 id=&quot;advancing-the-state-of-the-test-bench&quot;&gt;Advancing the state of the test bench&lt;/h3&gt;

&lt;p&gt;As you may recall from the discussion of the
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class, it has a &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method within it to handle toggling the clock for us.
What it doesn’t have is a means of recording samples for later study
with Matlab or
&lt;a href=&quot;https://www.gnu.org/software/octave/&quot;&gt;Octave&lt;/a&gt;.  We’ll create that here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see from above, anytime the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; flag is true, the input value
and corresponding output value will be written to a file (if open) for
later analysis.&lt;/p&gt;

&lt;h3 id=&quot;resetting-the-filter&quot;&gt;Resetting the Filter&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt; function just sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; signal for one clock tick.  Just
to be safe, we’ll make sure the other indication lines are zeros as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll use this function to make certain the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
starts from a clean state at the beginning of any tests.&lt;/p&gt;

&lt;p&gt;There is a consequence, though, to creating a clean test bench that only
provides expected and reasonable inputs, such as setting the reset with all of
these other inputs set to zero.  In particular, this method of testing logic
may not be as complete as a more formal approach that will examine all possible
inputs to our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
module–both the reasonable as well as the unreasonable.&lt;/p&gt;

&lt;p&gt;In our approach today, we’ll just stick to the reasonable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
inputs.&lt;/p&gt;

&lt;h3 id=&quot;applying-the-filter-to-a-known-input&quot;&gt;Applying the filter to a known input&lt;/h3&gt;

&lt;p&gt;The core function of any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_system&quot;&gt;linear filter operation&lt;/a&gt;
is to apply the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to a given set of data samples.  That’s the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; function
below.  We’ll start by making sure we’re not holding wires high from any prior
context that didn’t clean up properly behind itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;FILTERTB::apply(%d, ...)\n&quot;, nlen);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we’re set up, let’s walk through each of the input samples.
For each input sample, we’ll place it on the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; input to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
and then read the result from the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; output of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Make sure the CE line is high
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Strip off any excess bits
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Sign extend the result
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Although all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
we’ve looked at so far accept one input value
and produce one output value on each clock, not every
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is of this type.
There’s a lot to be gained by sharing resources across clocks if the
sample rate can be guaranteed to be less than half of the system clock rate.
To make sure that we can still test
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s
of this variety, we’ll tick our clock &lt;code class=&quot;highlighter-rouge&quot;&gt;m_nclk-1&lt;/code&gt; additional times
here–while holding &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is fundamentally how to feed any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filter&lt;/a&gt;,
so having this capability within our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test
harness&lt;/a&gt;,
only makes.&lt;/p&gt;

&lt;h3 id=&quot;loading-new-filter-coefficients&quot;&gt;Loading new filter coefficients&lt;/h3&gt;

&lt;p&gt;For any &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
that doesn’t have fixed taps, we’ll need to be able to load a new set of
coefficients into the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
As we’ve designed this, doing so requires setting the
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap_wr&lt;/code&gt; input, and then ticking the clock once to load each new coefficient
into the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;FILTERTB::load(%d, ...)\n&quot;, ntaps);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Strip off any excess bits
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we are done loading a new set of coefficients into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
we’ll clear our cached &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse
response&lt;/a&gt; values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;clear_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These will need to be rebuilt, but we’ll hold off on that task until they
are referenced.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-results-from-a-test-vector&quot;&gt;Getting the results from a test vector&lt;/h3&gt;

&lt;p&gt;A function that is very similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method is the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method
below.  The idea behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method is that we wish to determine the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
response to a given test vector.  This method differs from the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt;
method in only a few small respects.&lt;/p&gt;

&lt;p&gt;First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; function begins with a &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt; to clear any internal
values within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method didn’t clear any internal 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then call the filter &lt;code class=&quot;highlighter-rouge&quot;&gt;nlen&lt;/code&gt; times to feed the test vector into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
Well, not quite.  We’re going to pass the test vector followed by a series
of zeros–one for each delay value.  That way, we can quietly remove any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
delay effects from the test vectors response–something not done within the
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tstcounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tstcounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the next difference: after the first &lt;code class=&quot;highlighter-rouge&quot;&gt;nlen&lt;/code&gt; samples, the next several
samples are all set to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Strip off any excess bits
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Sign extend the result
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, we’ll only record the results after an initial &lt;code class=&quot;highlighter-rouge&quot;&gt;DELAY()&lt;/code&gt; number of
samples have been passed into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Discard : %2d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Deal with any filters requiring multiple clocks
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you’ll see shortly, this &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method is going to feature prominently
in any more sophisticated test—such as measuring the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
in the next section.&lt;/p&gt;

&lt;h3 id=&quot;measuring-the-impulse-response&quot;&gt;Measuring the Impulse Response&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt; of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is defined by its response to a single non-zero value.
Many of our test components will depend upon this value, so it’s important
that we have a means to both initially measure it, and then to use that
measurement later without requiring it to be measured over and again.  This is
the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator within the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test
harness&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our operator starts out with some very basic parameter checks, just to make
certain that we handle responses for out of bounds requests properly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Measuring a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
is actually just as simple as creating an
input to the filter with one non-zero entry (the first one), and then
recording how the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
responds to it, hence the name
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
Here we do exactly that, save that we
we use the maximum negative value for our impulse.  We pick this choice for
two reasons: first, because the maximum negative value is larger in
magnitude than the maximum positive value and so this becomes a test for
overflow.  Second, by using a &lt;em&gt;really&lt;/em&gt; large number, we can also
make certain that our result isn’t lost when/if any
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;bits are dropped&lt;/a&gt;
at the end.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Create an input vector with a single impulse in it
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Set our one value to nonzero.  This is the impulse.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter to the impulse vector
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get our test vector back, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
coefficient we are looking for will be the response from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
times the value of our impulse.  Hence, we’ll divide the initial impulse value
back out and record each sample of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Set our m_hk vector based upon the results
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we’ve determined the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
once, we’ll just look it up for future requests–sparing us the cycles of
calculating it over and over again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;checking-whether-the-filter-load-worked&quot;&gt;Checking whether the filter load worked&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;testload()&lt;/code&gt; function is simply a &lt;code class=&quot;highlighter-rouge&quot;&gt;load()&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficients function followed by a request for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;,
and then a comparison of whether or not the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
truly matches the one we wanted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;FILTERTB::testload(%d, ...)\n&quot;, nlen);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll now compare the measured coefficient, &lt;code class=&quot;highlighter-rouge&quot;&gt;(*this)[k]&lt;/code&gt;, against the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficient we expect, found in &lt;code class=&quot;highlighter-rouge&quot;&gt;data[k]&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Err: Data[k] = %ld != (*this)[k] = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also insist that any coefficients beyond the ones we expect to set
should have been read as zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function has been made virtual so that other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; types,
such as those whose coefficients are partially fixed
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;symmetric&lt;/a&gt;),
&lt;a href=&quot;https://en.wikipedia.org/wiki/Half-band_filter&quot;&gt;half-band&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_transform&quot;&gt;Hilbert&lt;/a&gt;,
etc), may adjust both how their actual coefficients are loaded, and then also
how those loaded coefficients correspond with resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;checking-for-overflow&quot;&gt;Checking for overflow&lt;/h3&gt;

&lt;p&gt;The purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;test_overflow()&lt;/code&gt; routine is to test whether or not, if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is given a carefully constructed input designed to overflow the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
that the filter will return the correct result.  If the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
response doesn’t match what we think it should,
this will be an indication of a potential overflow.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: The Overflow Check Test-Vector&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-overflow-chk.svg&quot; alt=&quot;A test vector for use when checking for overflow, having maximum values that match the signs of the filters impulse response&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The waveform (test vector) itself is chosen from all maximum values, as shown
in Fig 3.  In this figure, a desired
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
is shown in black.  The discretized version of that same response is shown in
blue–those are the results that the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator will return.  The samples
in red show the test vector we’ll use.&lt;/p&gt;

&lt;p&gt;The magnitude of the coefficients in the test vector is full scale–whether
the maximum positive integer that can be represented in &lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt; bits or the
maximum negative integer.  The signs are adjusted so that when the test
sequence lines up with the internal taps of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
as shown in Fig 3,
the individual coefficients times the test vector’s coefficients will produce
the maximum possible positive value.  Once all these maximum possible positive
values are accumulated, we’ll have the maximum output value that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
can produce.  Any failure to match this maximum output value will be an
indication that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
couldn’t keep up with full-scale values.&lt;/p&gt;

&lt;p&gt;That will be our approach below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;TESTING-BIBO\n&quot;);
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;maxv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// maxv = 1;
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// input[v] * (*this)[(NTAPS-1)-v]
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;maxv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we’ve put this test signal together, let’s see what the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
does with it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, for every one of those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
outputs, …&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;let’s calculate what the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
output &lt;em&gt;should have&lt;/em&gt; been.  This involves evaluating the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution equation&lt;/a&gt;
(the slow way), and then verifying that we get the output we expect.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It would also be nice to have some confidence that the test vector worked
as desired.  This is the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tested&lt;/code&gt; variables.
If the test vector works as desired, then it should hit (at some point) a
sweet spot where all of the signs line up.  If this happens, then we set
&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; to true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any failure of the output to match our calculated (expected) value indicates
that something went wrong–perhaps a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
overflow, perhaps something else in the implementation of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
Either way, you’ll want to know.
Here are two ways to find out: the assertion below, which will cause the test
to end abruptly with an error, and a boolean &lt;code class=&quot;highlighter-rouge&quot;&gt;pass&lt;/code&gt;.  Hence, if you comment
out the assertion, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pass&lt;/code&gt; boolean will still tell you the answer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, now that we are done comparing every output with its expected value,
let’s clean up any allocated values and return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you may have noticed, this test not only checks that the output doesn’t
overflow, but it also offers a rudimentary check that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
even works in general–by comparing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s output to a
locally calculated &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;.
However, as a general &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;
checker, this routine is not sufficient.
For this reason, we’ll need some other tests to fully convince us
that this &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
works.&lt;/p&gt;

&lt;h3 id=&quot;saved-for-later&quot;&gt;Saved for Later&lt;/h3&gt;

&lt;p&gt;There are two other required components of this generic filtering &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness&lt;/a&gt;:
a function to calculate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt; of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfreq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;COMPLEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a second function to answer the question of how well did the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
actually match a desired response.  As we mentioned above, this second
function (as built) will only be relevant to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filters&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measure_lowpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ripple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Building these two components of our
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness&lt;/a&gt;,
however, will have to wait for another day and another post.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And David girded his sword upon his armour, and he assayed to go; for he had not proved it.  And David said unto Saul, I cannot go with these; for I have not proved them.  And David put them off him.  (1Sam 39)&lt;/em&gt;</description>
        <pubDate>Sat, 04 Nov 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/dsp/2017/11/04/genfil-tb.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/11/04/genfil-tb.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Good Software Engineering Principles Apply to Students Too</title>
        <description>&lt;p&gt;Trust me, I get it.  I’ve been there.  You’ve got a project due and you are
struggling to get it to work.  It just needs to work.  It doesn’t need to
look good.  The instructor isn’t going to grade how well (or poorly) you
created your assignment.  That’s not the requirement.  The requirement is only
that it works, and the deadline is approaching.&lt;/p&gt;

&lt;p&gt;So … why do you need to practice good software engineering?&lt;/p&gt;

&lt;p&gt;Let’s look at a couple examples, shall we?&lt;/p&gt;

&lt;h2 id=&quot;magic-numbers&quot;&gt;Magic Numbers&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Don’t use magic numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic number&lt;/a&gt;
is a number that is neither one nor zero, and yet it gets placed
into your code with no explanation.&lt;/p&gt;

&lt;p&gt;Years ago, I had the opportunity to sit next to an engineer who was trying to
maintain a piece of software that predicted certain properties of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ionosphere&quot;&gt;ionosphere&lt;/a&gt;.  The code he was
working on had been written decades earlier, and it contained
tables of numbers within it.  These tables, however, came with no explanation
as to how they were derived.  The engineer working on this task showed these
numbers to me and asked, rhetorically, how shall I know if these numbers are
still valid?&lt;/p&gt;

&lt;p&gt;While it’s easy to argue that good software shouldn’t include numbers with no
explanation, such as this program did, what about throw away software?  Software
that only needs to work once?&lt;/p&gt;

&lt;p&gt;To answer that question, consider the example of a student who was trying to
implement a &lt;a href=&quot;/dsp/2017/08/30-cordic.html&quot;&gt;CORDIC algorithm&lt;/a&gt;
for class.  As you may recall from &lt;a href=&quot;/dsp/2017/08/30-cordic.html&quot;&gt;our discussion on how to build a CORDIC
algorithm&lt;/a&gt;, such an algorithm
depends upon a table of arctangents.  This student had dutifully calculated
and placed this table within his code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255412811&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;125657214&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;62581571&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31260178&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15626271&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7812658&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3906269&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1953127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;976562&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;488281&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;244140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;122070&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;61035&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30517&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15258&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7629&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;He then asked why his code wasn’t working.&lt;/p&gt;

&lt;p&gt;Looking over his code, it was impossible to know if he had gotten the table
right.  I didn’t know what formula he had used, or even if he
had gotten the formula right or not.  Further, aside from the problem
associated with knowing that the table was correct, there’s also the problem
of fixing the table once you discover an error since you would then need
to correct &lt;em&gt;every&lt;/em&gt; line in the table.  Oh, and did I mention that copying
tables by hand is prone to error in the first place?&lt;/p&gt;

&lt;p&gt;Consider the alternative, shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atnh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
		&lt;span class=&quot;c1&quot;&gt;// We want the arctan of 2^(-k-1)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// The angle, in radians, for the arctangent
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;drad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Scale this angle to 0..2^N-1 units, for N=32
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;atnh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Convert this value to an integer
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atnh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Stop if this integer ever becomes zero
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Add this value to the table
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Look at all of the math involved in getting this table right.  Consider what
would’ve happened if there was just one error in this code above.&lt;/p&gt;

&lt;p&gt;For these reasons, I will recommend that student’s not use pre-generated
numbers within their code.  If you really need a table of numbers for your
application (this is pretty common), then I would recommend that the code
necessary to populate your table also be distributed with the &lt;em&gt;magic numbers&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-rule-of-one-not-three&quot;&gt;The rule of one (not three)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Don’t repeat yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have to build an algorithm, build it once.  Build it right, use it
everywhere, but don’t repeat yourself.&lt;/p&gt;

&lt;p&gt;Wikipedia refers to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of
three&lt;/a&gt;
in computer programming.  The basic rule is that once you have three copies of
the same algorithm, then it is time to refactor all three versions of the
algorithm so that they reference the same single piece of working code.&lt;/p&gt;

&lt;p&gt;Allow me to argue that this rule applies &lt;em&gt;even more&lt;/em&gt; to students, and
&lt;em&gt;especially&lt;/em&gt; to code that hasn’t been proven yet–code that may still be buggy.&lt;/p&gt;

&lt;p&gt;Years ago I watched this lesson play out in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_engineering&quot;&gt;computer
engineering&lt;/a&gt; course. 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_engineering&quot;&gt;Computer engineering&lt;/a&gt;, for
those unfamiliar with it, is sort of a cross between &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_science&quot;&gt;computer
science&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical engineering&lt;/a&gt;.
As a result, the course included both individuals with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_science&quot;&gt;computer
science&lt;/a&gt;
background, such as myself, and others with more of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt;
background.  The projects in the course involved building various circuits with
computer chips and peripherals, and then programming the computer chip within
those circuits to do some instructor provided task.&lt;/p&gt;

&lt;p&gt;What I remember from the course is being surprised at how little the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical engineering&lt;/a&gt;
students were re-using their code.  We were writing code in 8086 assembly
at the time, and an example piece of code might be the software necessary to
send a string over a serial port.  My approach was to convert any code that I
needed more than once into functions that could then be called as often as I
needed them.  I considered this to be a standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_science&quot;&gt;computer
science&lt;/a&gt; principle.&lt;/p&gt;

&lt;p&gt;What I observed was that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt; students
ended up spending a lot of their time debugging the same software over and over.&lt;/p&gt;

&lt;p&gt;Please don’t get me wrong, I’m not trying to be critical of all &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt; students.
I’m just commenting about those I shared this class with who were kind enough
to allow me to look over their shoulders.  While it may be that these students
hadn’t yet learned this fundamental software lesson, I’d like to think that
other &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt;
students know better.&lt;/p&gt;

&lt;p&gt;The problem is that buggy code needs to be fixed, and buggy code in more than
one place needs to be more than once.  Worse, if you aren’t (yet) certain that
the code in question works in the first place, and you are searching for bugs,
then it’s really easy to let a bug in one copy slip by you as you fix the other
copy.&lt;/p&gt;

&lt;p&gt;Time is tight, don’t waste it.&lt;/p&gt;

&lt;p&gt;For this reason, I recommend the &lt;em&gt;rule of one&lt;/em&gt; for students and anyone else
trying to get something to work for the first time.  Build it &lt;em&gt;once&lt;/em&gt;.
Don’t copy it—especially don’t copy it before you &lt;em&gt;know&lt;/em&gt; that it works.
Make a function and call that function instead.&lt;/p&gt;

&lt;p&gt;This also applies to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designer: reuse logic by separating it into its own module rather
than copying it multiple times across your code–&lt;em&gt;especially&lt;/em&gt; before you
know whether or not the logic even works, or if it is the right logic for
the job.&lt;/p&gt;

&lt;h2 id=&quot;data-types&quot;&gt;Data Types&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Store items with different meanings in different data types.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To put things simply, let the compiler (or synthesis tool) find as many
bugs for you as you can.&lt;/p&gt;

&lt;p&gt;I know, I’m a die-hard C-programmer who uses Verilog rather than VHDL.  You
might find it strange to hear this advice coming from me, but I’ll say it
anyway: let the tools find as many errors as you can.&lt;/p&gt;

&lt;p&gt;Use software data types to your advantage.  If a value will only be one of
a handful, use an enumerated type (in software) or set the number of bits for
that handful to the smallest number required in HDL.  If you have values
occupying, for example, several stages within a
&lt;a href=&quot;/dsp/2017/08/30-cordic.html&quot;&gt;CORDIC&lt;/a&gt;, each having &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;angle&lt;/code&gt; values, then don’t store those in an array.  Use a structure.&lt;/p&gt;

&lt;p&gt;In Verilog, run &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;verilator&lt;/a&gt;
and &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;use the -Wall
option&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can do the same in C++: Turn on the ‘-Wall’ compiler option.&lt;/p&gt;

&lt;p&gt;Software data types are there for a reason–use them to your advantage.&lt;/p&gt;

&lt;h2 id=&quot;pi-is-not-314159&quot;&gt;Pi is not 3.14159&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; Use the tools library to your advantage&lt;/p&gt;

&lt;p&gt;I remember hearing a sad satellite story from years ago about the difficulty
that the ground team was having while trying to track their satellite(s).
Sadly, the details of this story have left me.  Perhaps someone else remembers
and can fill me in.  What I remember from the story, though, was that when
all was said and done the problem was the software that declared &lt;code class=&quot;highlighter-rouge&quot;&gt;PI&lt;/code&gt; to be
&lt;code class=&quot;highlighter-rouge&quot;&gt;3.141&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On my Linux machine, PI is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;math.h&lt;/code&gt; as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define M_PI               3.14159265358979323846  &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* pi */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use this definition.  Even for students: use this definition.  Get into the
practice of using your tools–they are there for a reason.&lt;/p&gt;

&lt;h2 id=&quot;be-kind-to-others--your-grade-depends-upon-it&quot;&gt;Be kind to others–your grade depends upon it&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Don’t bite the hand that feeds you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve had the wonderful opportunity to help many wayward students over the
years.  The one thing that turns me off, however, is the student who is
gets frustrated and then angry at whatever difficulty he is having.  This
angry student will then show up on whatever forum looking for help.  He’ll
swear at himself, he’ll yell, and destroy his own online reputation.&lt;/p&gt;

&lt;p&gt;Sometimes these individuals turn to the forums spewing filth at whoever
built the tool he’s using.  At this point, it doesn’t make a difference if
the tool is good or bad, this individual will turn others off from helping him.&lt;/p&gt;

&lt;p&gt;If you are getting angry then go take a walk.  Get some exercise.  If it’s
late at night, get some sleep.  Come back to the problem later when you have
a clearer mind.&lt;/p&gt;

&lt;p&gt;The last thing you want to do is to proclaim to all that you are hard to work
with, particularly when you need some help from others.&lt;/p&gt;

&lt;h2 id=&quot;patience&quot;&gt;Patience&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;And not only so, but we glory in tribulations also: knowing that tribulation worketh patience; and patience, experience; and experience, hope&lt;/em&gt;
(Romans 5:3-4)&lt;/p&gt;

&lt;p&gt;Yeah, I get it, your project is do in a month, in a week, or even tomorrow.
I understand.  It’s late at night and it isn’t working.  I get it.  I’ve been
there.  However, getting stressed or anxious about it isn’t going to help you
get your design working any faster.&lt;/p&gt;

&lt;p&gt;Sound engineering requires diligent patience, discipline, and careful attention
to the smallest details.  This takes time.  It requires a cool and level
head.  Engineering problems can be subtle.  They can hide in the difference
between a ‘0’ and a zero.  Give yourself the time you need, and don’t try to
rush the job—even as the end is imminent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Corrolary:&lt;/strong&gt; &lt;em&gt;Give each project the time it needs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you can’t rush a project at the end, then front load the project and give
it the time it needs early on so that you don’t end up rushed at the end.
If your instructor gives you a couple of months, then trust him: he might know
something.  Start early.  You won’t be able to recover any wasted time later.&lt;/p&gt;

&lt;h2 id=&quot;prayer&quot;&gt;Prayer&lt;/h2&gt;

&lt;p&gt;While I’m sure there are many other software engineering principles, I’d
like to close with a final observation.  There have been &lt;em&gt;many&lt;/em&gt; times when
I’ve personally gotten stuck on one problem or another.  Maybe it’s getting
late and, after a long hard day, I still haven’t gotten a problem working.&lt;/p&gt;

&lt;p&gt;Let me share with you my personal secret weapon: prayer.  Put the project down
and take some time to pray.  &lt;em&gt;Trust God&lt;/em&gt; to take care of it, and then get some
sleep.  In the morning, pray again before returning to the problem.&lt;/p&gt;

&lt;p&gt;You’ll be amazed at how prayer both changes your outlook, as well as how
God can just suddenly reveal key details to you that you were missing before.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Rejoice, O young man, in thy youth; and let thy heart cheer thee in the days of thy youth, and walk in the ways of thine heart, and in the sight of thine eyes: but know thou, that for all these things God will bring thee into judgment. (Eccl 11:9)&lt;/em&gt;</description>
        <pubDate>Mon, 30 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/blog/2017/10/30/student-sw-engr.html</link>
        <guid isPermaLink="true">http://zipcpu.com/blog/2017/10/30/student-sw-engr.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Generating Pseudo-Random Numbers on an FPGA</title>
        <description>&lt;p&gt;At some point or other, when working with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s,
you will need a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;
number sequence.  Trust me, it’s just going to happen.&lt;/p&gt;

&lt;p&gt;In my case it happened this last week.  I needed to do some
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;channel estimation&lt;/a&gt;,
and I reasoned that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt; sample stream
would make a nice input to
&lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;the channel&lt;/a&gt;.
Specifically, my ultimamte plan is to
transmit &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;
out of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
output pin at the fastest speed I can:
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds181_Artix_7_Data_Sheet.pdf&quot;&gt;950 Mbps&lt;/a&gt;
on my
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds180_7Series_Overview.pdf&quot;&gt;Artix-7&lt;/a&gt;
&lt;a href=&quot;https://store.digilentinc.com/arty-artix-7-fpga-development-board-for-makers-and-hobbyists/&quot;&gt;Arty&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board.
I can then receive the bits at the other end of
&lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;the channel&lt;/a&gt;, and
examine them to get an &lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;estimate of the channel
distortion&lt;/a&gt;.  If all goes
well, I should even be able to apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Channel_capacity&quot;&gt;Shannon’s Capacity
theorem&lt;/a&gt; to determine the
maximum speed of &lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;the
channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All I needed to get started was a source of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One common source for 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;
in digital logic is a
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Linear Feedback Shift Register
(LFSR)&lt;/a&gt;.
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSRs&lt;/a&gt; are simple
to build and so they are commonly used for this purpose.  They have some
wonderful mathematical properties associated with them, guaranteeing a
certain amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandomness&lt;/a&gt;.
Be forwarned, however, the one thing
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s are not
is &lt;a href=&quot;https://wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator&quot;&gt;cryptographically random/secure&lt;/a&gt;.
&lt;em&gt;Do not use
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
in place of a proper
&lt;a href=&quot;https://wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator&quot;&gt;cryptographically secure sequence&lt;/a&gt;.&lt;/em&gt;
That said, they are worth learning how to create and use.&lt;/p&gt;

&lt;p&gt;Much of my &lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;System
Identification&lt;/a&gt;
project will need to wait for a later post.  Until that time, I’ll be
accepting gentlemen’s wagers (no money involved) regarding what this ultimate
maximum speed will be.&lt;/p&gt;

&lt;p&gt;Today’s topic though is just a simple discussion of how to implement an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
in Verilog.  We’ll skip the worst of the mathematics, although I would
recommend you look them up.&lt;/p&gt;

&lt;p&gt;Basically, the idea behind an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
is that given a current register state, I’ll call it a “fill”, you can
compute the next state via a linear combination of the bits in the current
state.  I’ll use the term “taps” or “polynomial” interchangeably to describe
this formula–although you might need to dig into more of the mathematics
to understand why.&lt;/p&gt;

&lt;p&gt;In this post, we’ll discuss these registers and how to create them
in Verilog.&lt;/p&gt;

&lt;h2 id=&quot;basic-math&quot;&gt;Basic Math&lt;/h2&gt;

&lt;p&gt;Let’s start, though, by looking at some very simple math.  This math involves
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;Galois Field&lt;/a&gt; having only
two elements, 0 and 1.  We’ll use the term
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt; to describe this field.&lt;/p&gt;

&lt;p&gt;If you are not familiar with what a
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;&lt;/em&gt; is in this
context, it’s simply a mathematical abstraction of a number system based upon
a set of values, together with the definitions of addition and multiplication
defined on those values.  The neat thing about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s is that much of
the math you are already likely to be familiar with is based upon
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s.  For example,
I’m going to guess that you are probably familiar with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;linaer algebra&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;Linaer algebra&lt;/a&gt;, though,
is all based upon 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s.
Although I learned 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;linaer algebra&lt;/a&gt; using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Integer&quot;&gt;integers&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real numbers&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot;&gt;complex numbers&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;linaer algebra&lt;/a&gt; is actually
based upon &lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s:
arbitrary algebraic systems with a defined set of values, as well as
two primary operations defined upon that set.&lt;/p&gt;

&lt;p&gt;We already said today’s topic would focus on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt; known as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;, and that this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt; contains the
numbers zero and one.&lt;/p&gt;

&lt;p&gt;What we haven’t mentioned are the two two mathematical operators that define
this field: addition and multiplication.  Both are used in the implementation
of an &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The difference between the addition and multiplication operators you might be
familiar with, and the operators defined by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;, is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt; operators are followed by
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;.
Hence, the result will be a ‘1’ if the traditional addition (or
multiplication) result was odd, or ‘0’ if it was even.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: Addition in GF(2)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/gf2-add.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you look at the addition operator under
&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;,
you’ll find the first couple values to be what you expect:
&lt;code class=&quot;highlighter-rouge&quot;&gt;0+0=0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0+1=1&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;1+0=1&lt;/code&gt;.  Where things get a little interesting is when
adding &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1&lt;/code&gt; together.  In the traditional integer arithmetic you’re likely
familiar with, you’d get a &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.  In arithmetic over
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;,
you need to take the result
&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;,
and so &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1&lt;/code&gt; results in zero, as shown in Fig 1.&lt;/p&gt;

&lt;p&gt;Think about that operation again for a moment: &lt;code class=&quot;highlighter-rouge&quot;&gt;0+0=0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0+1=1&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1=0&lt;/code&gt;.
That describes an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;exclusive or operation, or XOR&lt;/a&gt;.&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2: Multiplication in GF(2)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/gf2-multiply.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll do the same thing for multiplication.  In this case, multiplying numbers
from the set of zero and one will only yield the result zero and one, so
you might not notice the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;.  Then,
when you look at the results as shown in Fig 2, you’ll quickly see that
multiplication over
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;
is nothing more than a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;bitwise-and&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given these two operators, let’s define a bit-vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;, whose elements
are either zero or one—elements from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.  We’ll also state that
this bit-vector has an initial value given by &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  In a similar
manner,
we can construct a linear operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;T(x)&lt;/code&gt;, that can be
applied to &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; to yield a new or updated value for &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; at the next
time-step.  This operator will be defined by another vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt;, but
we’ll come back to this in a moment.  For now, just remember that &lt;em&gt;any&lt;/em&gt;
linear operation on a finite set can be represented by a matrix–another
fact we’ll come back to.&lt;/p&gt;

&lt;p&gt;In pseudocode notation, an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
just applies the linear operator to the current &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; value over and over
again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sreg = INITIAL_FILL;
while(!armageddon)
	sreg &amp;lt;= T(sreg);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A key thing to point out, though, is that any linear operation on the all
zeros vector will always return the all zeros vector, hence &lt;code class=&quot;highlighter-rouge&quot;&gt;T(zero)==0&lt;/code&gt;.  As
we go along, we’ll need to be careful to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; from becoming zero.&lt;/p&gt;

&lt;p&gt;What makes
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s so special
is that as you apply this linear operator, the bottom bit will appear
to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;.  If you
choose your linear system well, an &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bit shift register will walk through
all possible &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N-1&lt;/code&gt; combinations before repeating–generating &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(N-1)&lt;/code&gt;
ones, and &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(N-1)-1&lt;/code&gt; zeros along the way.  You do need to be aware, though,
not all linear systems have this property.  Those that do are said to
create &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;Maximal Length
Sequences&lt;/a&gt;.
These &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequences&lt;/a&gt;, however,
tend to be well known, and &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1hnFigZpPEBg9hdFjImPzOgRsgZWAYupFBaTePN0BuAw/&quot;&gt;tables even
exist&lt;/a&gt;
containing examples of
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
that will generate anything from short
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom sequences&lt;/a&gt;
all the way up to &lt;em&gt;very long&lt;/em&gt; ones.&lt;/p&gt;

&lt;p&gt;Ok, I promised not to get deep into the math, but it is important to understand
that &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
implement a &lt;em&gt;linear&lt;/em&gt; operation on a bit-vector.  These linear
operations can be represented as a matrix operation–but only if the
linear system described by the matrix follows the rules of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;galois&quot;&gt;Galois&lt;/h2&gt;

&lt;p&gt;As the &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;wikipedia article on LFSR&lt;/a&gt;s explains, there are two forms of expressing
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s.  The first
is a Galois form, the second is known as the Fibonacci form.  Both will yield
the same sequences, although their initial parameters, &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;,
and their &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; values will be difference from one form to the other.
(Don’t worry, we’ll define these more formally in a moment.) Pictorially, a
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Galois shift register
implementation&lt;/a&gt;
looks like Fig 3.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3: A Galois Shift Register Configuration&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-galois.svg&quot; alt=&quot;Picture of a Galois shift register&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s let the number of stages in this register be &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt;, and the initial
value of all of the stages given by &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  The last item needed
to implement a general purpose &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Galois shift register
implementation&lt;/a&gt;
are the coefficients of the multiplies shown in the figure above.  We’ll
call these the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt;–mostly because they “tap-into” the shift register
sequence when one, and ignore it when zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;parameter	LN = ... ; // the size of your bit-vector
parameter	[(LN-1):0]	TAPS = ..., // some value in your design
				INITIAL_FILL = ... ;// Another design parameter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looking at Fig 3 again, you can see an input going through
several (&lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt;) stages
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;Flip-flops&lt;/a&gt;)
of processing to create an output.  That output is then
fed-back to affect the stages along the way.  Notice also the adds and the
multiplies.  These are the adds
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;)
and multiplies
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;AND&lt;/a&gt;)
we discussed in our last section.&lt;/p&gt;

&lt;p&gt;The multiplication values are given by the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; of the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.  They do
not change during sequence generation.
The mathematicians will describe the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; as the coefficients of a
polynomial in &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.
These coefficients can either be a one or a zero–as with everything in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.
As we mentioned above, &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1hnFigZpPEBg9hdFjImPzOgRsgZWAYupFBaTePN0BuAw/&quot;&gt;specific
choices&lt;/a&gt;
will yield &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequences&lt;/a&gt;.
If you would rather, though, I tend to think of &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; as just a particular
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bit binary vector.&lt;/p&gt;

&lt;p&gt;One of the reasons why I wanted to point out, in the last section, that an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt; is nothing
but a linear operator over
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;, is that it allows us to
write out this formula as a series of linear equations.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-galois.png&quot; alt=&quot;Matrix equation for a Galois shift register&quot; width=&quot;665&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this form, I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;g_1&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;g_(N-1)&lt;/code&gt; to represent the taps.  The
bit vector,  &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, has &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits to it ranging from &lt;code class=&quot;highlighter-rouge&quot;&gt;x[0]&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;x[N-1]&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;x[MSB]&lt;/code&gt;.  This equation provides the formula for calculating the next
bit vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, from the last one.  It’s worth noting that the entire
matrix is nearly upper right triangular, save for the &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; coefficients in the
first column.&lt;/p&gt;

&lt;p&gt;Okay, so that’s the operation we want to perform.  Now, let’s finish &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_gal.v&quot;&gt;building
it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In pseudocode, I’m going to represent the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;’s in a register I’ll call &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;,
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;’s will be our &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; bit-vector parameter.&lt;/p&gt;

&lt;p&gt;The other value of interest is the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  For a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequence&lt;/a&gt;, the only
restriction on the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; is that it &lt;em&gt;cannot be&lt;/em&gt; zero.  Any other
value is allowed.  This &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; will determine your starting point in
the random sequence created by the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also have noticed the “input” in Fig 3.  We’ll set this to zero
for today’s task.  Setting it to another value has the effect of creating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scrambler&quot;&gt;feed-through randomizer&lt;/a&gt;, rather than
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom number
generator&lt;/a&gt; we are building
today.&lt;/p&gt;

&lt;p&gt;The code necessary to implement a Galois shift register can be drawn directly
from Fig 3.  We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; to describe the values in the register, so that
our output, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_bit&lt;/code&gt;, is just the LSB of &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;assign	o_bit = sreg[0];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On a reset, we’ll initialize &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; to our &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  Likewise, we’ll use
the “global-CE” &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline
strategy&lt;/a&gt;,
so nothing is allowed to change unless &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is also true.  This will make our
circuit useful for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt;
tasks that need to run synchronously at data rates other than our clock rate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if (i_reset)
		sreg &amp;lt;= INITIAL_FILL;
	else if (i_ce)
	begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that aside, our logic is straight-forward.  On every clock, we move all
the bits forward by one step.  If the LSB is a one, we add
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;) the
&lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; vector to our state vector as the bits step forward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		if (sreg[0])
			sreg &amp;lt;= { 1&#39;b0, sreg[(LN-1):1] } ^ TAPS;
		else
			sreg &amp;lt;= { 1&#39;b0, sreg[(LN-1):1] };
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note how we checked for a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; bit in the bottom bit of &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;.  This is how to
implement the multiply.  If the bottom bit is a zero, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; times
zero will be the zero vector which will not affect anything when added.  On
the other hand, if &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[0]&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, we’ll add the taps to our result.&lt;/p&gt;

&lt;p&gt;The astute observer may note here that &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS[LN-1]&lt;/code&gt; must be a one, or the
most significant bit (MSB) will be trivially zero.&lt;/p&gt;

&lt;p&gt;Incidentally, this version of an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
is &lt;em&gt;really&lt;/em&gt; easy to calculate in software, and its C++ equivalent is given
by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;LFSR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... LN is given by 8*size(unsigned) below
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ... define INITIAL_FILL, TAPS, etc
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;LFSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_FILL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_FILL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Calculate the output value up front
&lt;/span&gt;		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Shift the register
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Use the output value to determine if the TAPS
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// need to be added (XORd) in
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look hard through the Linux kernel sources, you’ll even find an
implementation of &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/lib/crc32.c?h=v4.13.10&quot;&gt;this algorithm&lt;/a&gt;
 within them.  .
&lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/lib/crc32.c?h=v4.13.10&quot;&gt;There&lt;/a&gt;, though
it’s used to implement a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;Cyclic Redundancy Check
(CRC)&lt;/a&gt;
and so their input isn’t zero.&lt;/p&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_gal.v&quot;&gt;copy of the code for the
Galois&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
on &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;Github&lt;/a&gt;, as a part of
my &lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;filtering repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fibonacci&quot;&gt;Fibonacci&lt;/h2&gt;

&lt;p&gt;The other
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt; form is
the Fibonacci form.  The Fibonacci form of an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
is mathematically equivalent to the Galois
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
save that the outputs are calculated in a different manner, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt;
need to be “reversed”.  The diagram in Fig 4 shows the basic form of the
Fibonacci &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: A Fibonacci Shift Register Configuration&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, it’s the intermediate stages whose values are added
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;‘d)
together to produce an update value that is then added
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;‘d)
to the input.&lt;/p&gt;

&lt;p&gt;In many ways, this makes an ideal form for implementing an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;:
The feedback bit is usually calculated from just a small
number of taps (2-4) into the shift register, making it &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;fit within a single
LUT&lt;/a&gt; quite easily.
Another unique feature to this form is that the values in the shift
register aren’t modified between when they are originally calculated and
the output–making it possible to see then next &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt; output bits by
just examining the shift register state.  (We’ll use this in our next
post on
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s,
showing how to generate more than one bit at a time.)&lt;/p&gt;

&lt;p&gt;As with the Galois
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
the Fibonacci version also implements a linear system.  This time, though,
it has a different structure.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-fibonacci.png&quot; alt=&quot;Matrix equation for a Fibonacci shift register&quot; width=&quot;687&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;where the &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB&lt;/code&gt; is the feedback bit above.&lt;/p&gt;

&lt;p&gt;When it comes to implementation, the initial implementation steps are the
same as with the Galois implementation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if (i_reset)
		sreg &amp;lt;= INITIAL_FILL;
	else if (i_ce)
	begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difference is what you do to determine the next output bit.  When using
the Fibonacci form, we take an &lt;a href=&quot;https://en.wikipedia.org/wiki/Inner_product_space&quot;&gt;inner
product&lt;/a&gt; between or
bit-vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;, and our TAPS vector.  This is nothing more than a point by
point multiply (&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;AND&lt;/a&gt;),
followed by summing
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;)
all of the results of the multiplies together to create the new high order
bit.  As before, we’ll hold the “input” to zero, and so we get the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;following
formula&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		sreg[(LN-2):0] &amp;lt;= sreg[(LN-1):1];
		sreg[LN-1] &amp;lt;= ^(sreg[(LN-1):0] &amp;amp; TAPS);
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s not often that you get a chance to use an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;
reduction operator, however
this is one of those times.  Note the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;^(sreg[..] &amp;amp; TAPS)&lt;/code&gt;.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; in the front of this specifies that all of the values in &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[..] &amp;amp; TAPS&lt;/code&gt;
are to be added together, in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;modulo two sum&lt;/a&gt;–just
what we need to do here.&lt;/p&gt;

&lt;p&gt;This isn’t the only way to build a Fibonacci
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
For example, &lt;a href=&quot;http://www.xilinx.com/support/documentation/application_notes/xapp210.pdf&quot;&gt;this Xilinx app
note&lt;/a&gt;
discusses how to implement an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
using the shift register
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic blocks&lt;/a&gt;
within a &lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
&lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
development is different from
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;mine&lt;/a&gt;
primarily because the
shift register &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic block&lt;/a&gt;
that &lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; depended upon does not support a
reset signal.&lt;/p&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;copy of the code for this
Fibonacci&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
on &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;Github&lt;/a&gt;, also a part of
my &lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;filtering repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would rather see this example in VHDL, there is a
&lt;a href=&quot;http://opencores.org/project,lfsr_random&quot;&gt;VHDL version&lt;/a&gt;
on &lt;a href=&quot;http://opencores.org&quot;&gt;OpenCores&lt;/a&gt; that you may find useful.&lt;/p&gt;

&lt;h2 id=&quot;test-bench&quot;&gt;Test Bench&lt;/h2&gt;

&lt;p&gt;I’ve also placed a test bench for each of these two shift register
implementations &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_gal_tb.cpp&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;here&lt;/a&gt;.
Since the two are nearly identical, I’ll walk through the salient portions
of one of them only.  For a more detailed description of how to build
a &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
based-test bench in general, please take a look at
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;this article&lt;/a&gt;.
The one thing we’ll do different here from many of my other projects is that
we’ll call &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; directly
rather than using a subclass–just because our simulation needs for
this component are so simple.&lt;/p&gt;

&lt;p&gt;You’ll find this test bench starts out very simply.  We call
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;’s
initialization routine, and declare a test bench based object upon our
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Verilated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Vlfsr_fib&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re also going to declare three more variables: &lt;code class=&quot;highlighter-rouge&quot;&gt;clocks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;nout&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ones&lt;/code&gt;.
We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;clocks&lt;/code&gt; variable to count the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;clocks&lt;/code&gt; we use, to keep
from overloading the user’s screen with numbers.  &lt;code class=&quot;highlighter-rouge&quot;&gt;nout&lt;/code&gt; will be used to
help us place spaces in the output, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ones&lt;/code&gt; will be used to count the
number of ones in our output.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;test bench&lt;/a&gt; also
assumes that our result will be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequence&lt;/a&gt;.  In this
case, there should be exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(LN)-1&lt;/code&gt; unique outputs (clock ticks before
&lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; equals one again), and &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(LN-1)&lt;/code&gt; ones in those outputs.  This will
be our evidence of success.&lt;/p&gt;

&lt;p&gt;Our next step will be to start our core with a reset pulse.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// reset our core before cycling it
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TRACE_POSEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TRACE_NEGEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TRACE_POSEDGE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TRACE_NEGEDGE&lt;/code&gt; are macros used to write the
simulation state to a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the reset is complete, we’ll assert that the shift register initial state
is &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.  While this doesn’t necessarily need to be the case, setting
&lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; to anything else within the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;Verilog file&lt;/a&gt;
will necessitate coming back and updating it here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v__DOT__sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll move on to the simulation itself.  We’ll start out with
&lt;code class=&quot;highlighter-rouge&quot;&gt;16384&lt;/code&gt; clocks of simulation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;TRACE_POSEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;TRACE_NEGEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On each of these clocks, we’ll print an output bit to the screen.  This should
allow you to visually verify that the bits &lt;em&gt;look&lt;/em&gt; random.  We’ll place
spaces between every eight bits for easier reading as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_bit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if the shift register value ever returns to our &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; of one,
then we know we’ve exhausted the sequence.  We can therefore break.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v__DOT__sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TRACE_CLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case you want to test for a &lt;em&gt;really long&lt;/em&gt; sequence, the &lt;code class=&quot;highlighter-rouge&quot;&gt;16k&lt;/code&gt; clocks
won’t be enough.  Rather than continue to fill your screen, the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;test bench&lt;/a&gt;
just quietly continues crunching here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v__DOT__sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_bit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a final step, let’s compare the number of clocks we used in our output
to determine whether or not the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;test bench&lt;/a&gt;
was ultimately successful.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Simulation complete: %d clocks (%08x), %d ones&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SUCCESS!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FAILURE!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, since I’m posting this, I’ve already proven it …&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There you go!  That’s all there is to building an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
and demonstrating that it works.&lt;/p&gt;

&lt;p&gt;Sadly, though, neither of our implementations today was sufficient for my
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;channel estimation&lt;/a&gt;
problem at 950MHz.  Even if I &lt;em&gt;could&lt;/em&gt; run this logic that fast, the rest of my
logic wouldn’t be able to keep up.  As a result, we’ll need to come back to
this topic and see if we can’t build an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
that produces multiple outputs in parallel.&lt;/p&gt;

&lt;p&gt;Still, &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s are
a fundamental &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt;
tool, that’s easy to implement within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
Feel free to try yourself!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;I returned, and saw under the sun, that the race is not to the swift, nor the battle to the strong, neither yet bread to the wise, nor yet riches to men of understanding, nor yet favour to men of skill; but time and chance happeneth to them all.  (Eccl 9:11)&lt;/em&gt;</description>
        <pubDate>Fri, 27 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/dsp/2017/10/27/lfsr.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/10/27/lfsr.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
  </channel>
</rss>
