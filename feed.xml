<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 06 Sep 2019 13:15:56 -0400</pubDate>
    <lastBuildDate>Fri, 06 Sep 2019 13:15:56 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Quiz #6: Synchronous logic in Asynchronous contexts</title>
        <description>&lt;!-- answer: &quot;2019/08/23/fv-answer06.html&quot; --&gt;

&lt;p&gt;This quiz is really intended for the open version of SymbiYosys.  The
open Yosys doesn’t quite implement &lt;code class=&quot;highlighter-rouge&quot;&gt;$global_clock&lt;/code&gt; properly.  According to
the SystemVerilog standard, &lt;code class=&quot;highlighter-rouge&quot;&gt;$global_clock&lt;/code&gt; is supposed to be a clock
chosen by the designer to be the default clock thoughout the design any
time a default clock is necessary throughout an entire design, rather than
(as used here) one that is set by the tools to be a formal time step.&lt;/p&gt;

&lt;p&gt;As a result, the reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;$global_clock&lt;/code&gt; as used above has been
deprecated.  I also expect this non-standard usage to be removed soon enough.&lt;/p&gt;

&lt;p&gt;To fix this issue, Yosys now supports the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;(* gclk *)&lt;/code&gt; to define
a wire or register that will contain the formal timestep.  You can then use
edges of such a register, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;$global_clock&lt;/code&gt;, to specify the
formal timestep.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gclk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Were you using concurrent assertions, the design should read:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gclk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That said, only one of these captures the logic check desired.  Can you tell
which one?&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Sep 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/09/06/quiz06.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/09/06/quiz06.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>AXI Verification, the story so far</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF 2019&lt;/a&gt; is coming up, and I’m planning on presenting
slides on the topic of &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;formally verifying AXI
interfaces&lt;/a&gt;.  My intent was
just to share some of the bugs I’ve found and so to encourage folks to use
formal verification tools, such as the
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; tool that I’ve been
using.  However, as I started to put the story together, I also started to
realize just how important this topic is.&lt;/p&gt;

&lt;p&gt;Here’s the bottom line: AXI is very difficult to verify using traditional
simulation based methods.  How difficult is it?  So difficult that many of the
major vendors out there have gotten it wrong.&lt;/p&gt;

&lt;p&gt;Let me back up, though, and walk you through some of the details.&lt;/p&gt;

&lt;h2 id=&quot;axi-whats-that&quot;&gt;AXI, what’s that?&lt;/h2&gt;

&lt;p&gt;It begins with the chip manufacturing industry.  There are a lot of companies
out there building their own special and secret sauce into digital electronics.
The reality, though, is that many of the tasks these chips are responsible
for performing are challenging to do in raw digital hardware.  It’s not that
they cannot be done, but rather that it’s a lot easier to do them in software.
That means that if you want to build a custom silicon widget, you are likely
to want to include a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
into your custom widget as well.&lt;/p&gt;

&lt;p&gt;While building a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
may be a college student’s class project, building and maintaining the
assembler, linker, compiler, debugger, and indeed the whole tool chain is a
task few design houses want to take on for themselves.  It’s just easier to
purchase someone else’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
rather than to handle all of this work yourself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A basic AXI bus structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/axi-in-everything.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the most popular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
in the embedded sub-chip IP market is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;.  While
&lt;a href=&quot;https://riscv.org&quot;&gt;RISC-V&lt;/a&gt; may well give
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
a run for their money, much of the industry has already standardized
around a set of &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt; bus
protocol standards drawn from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Microcontroller_Bus_Architecture&quot;&gt;AMBA bus protocol
set&lt;/a&gt;.
Of these, the high bandwidth standard is clearly
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.  As a result, if you
want to connect your secret sauce to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; hidden inside
your proprietary integrated circuit technology, you are likely going to be
using an &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI bus&lt;/a&gt; to connect
the pieces together.&lt;/p&gt;

&lt;p&gt;Recognizing this reality, and the fact that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGAs&lt;/a&gt; are
often used to test the logic within integrated circuits before &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;burning
them into actual hardware&lt;/a&gt;,
the two major
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; vendors
have been offering &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
based tooling for some time.  This includes not only the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI bus fabric&lt;/a&gt; that connects
everything together, but also several basic design components like &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM
controllers&lt;/a&gt;, memory movers,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;
engines, &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;video controllers&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash controllers&lt;/a&gt;, as well
as example designs so that their users can get more value from their hardware.
These basic &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;
designs are offered for free to anyone who uses their tools.  As a result, the
example designs in particular have become rather ubiquitous–so much so that
any error in one or the other tends to show up over and over again in the
code of anyone who used that example as a foundation for their own work.  Again,
this shouldn’t be surprising to anyone.&lt;/p&gt;

&lt;h2 id=&quot;formal-methods&quot;&gt;Formal methods&lt;/h2&gt;

&lt;p&gt;This was where I entered the picture.  In October, 2017, &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;I tried out formal
methods&lt;/a&gt; for the
first time on what I thought was a fairly basic and simple design.  My plan
was just to write a review about some new “formal verification” fad and then
to go back to &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;digital design the way I had been doing
it&lt;/a&gt;.  My plan changed
when the tool found bugs in my design.  So I then tried applying the tool to
another one of my “working” designs.  The same thing happened, the tool found
bugs in it.  Valid bugs.  &lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;Over and over I applied the formal
tools&lt;/a&gt;
to my designs and found more and more bugs.&lt;/p&gt;

&lt;p&gt;To understand how significant these bugs were, consider these: an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;controller&lt;/a&gt;
that might fetch the wrong memory address, a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_(computing)&quot;&gt;instruction
cache&lt;/a&gt; that &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;returned the
wrong instruction&lt;/a&gt;,
or even an &lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;FFT&lt;/a&gt; that worked for one
set of sizes and bit widths but not for others.  The list goes on.&lt;/p&gt;

&lt;p&gt;Eventually, I stopped verifying my designs after the fact and &lt;a href=&quot;/formal/2018/07/14/dev-cycle.html&quot;&gt;started going
straight to formal verification tools before ever picking up a
simulator&lt;/a&gt;.  Design has
never been &lt;a href=&quot;/formal/2019/08/03/proof-duration.html&quot;&gt;so fast&lt;/a&gt;
or so easy as a result.  Indeed, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt; that I
had wanted to build for years suddenly came together inside of two weeks.&lt;/p&gt;

&lt;p&gt;By the end of 2018, I’d also struggled many times to build my own AXI
interface components.  In &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;one particularly painful
example&lt;/a&gt;, I was forced
to deliver a design to a customer that didn’t live up to the promises I had
made to him.  Even now, most of my work has been done using
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;–it’s much
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;simpler to use&lt;/a&gt;.
Sadly, though, if you want to interact with the modern
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
SOC chips like either Xilinx’s Zynq or one of &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Intel’s
SOC&lt;/a&gt;s, you will
(eventually) &lt;a href=&quot;/blog/2019/04/27/axi-addr.html&quot;&gt;need to learn to speak
AXI&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Verification using a formal property file(s)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/fp-file.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As I mentioned above, my first attempts at building AXI components dismal
failures.  My second set of attempts weren’t much better.  Finally, somewhere
around last Christmas time, I started picking up AXI and formal verification
together.  I first &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;built a set of formal properties for
AXI-lite&lt;/a&gt;, and then again
later for &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt;.  These
properties make it easy to verify &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI
bus&lt;/a&gt; components–much easier
than &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
alone.  The neat thing about this approach is that the property files can then
be reused from one AXI design to another with only minimal configuration
and set up.  Hence, once I built one design, getting the next one right became
easier.&lt;/p&gt;

&lt;p&gt;Not knowing whether or not I understood the bus standard well enough, my first
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; and
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI&lt;/a&gt; verification
projects were to verify any publicly available code I could get my hands on.  I
started with Xilinx’s example code, and then moved on to verifying several
projects on Github, and finally looked into Intel’s example AXI code.
I was expecting to find examples that met the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
standard&lt;/a&gt; that I could then learn from.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Most example designs have two parts&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/ex-design.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let me pause at this point to describe what I mean by an “example” design,
or even a “demonstration” design.  These are vendor provided example logic
designs, such as the one illustrated in Fig. 3 on the right and typically
written in Verilog, VHDL, or both, that show the proper
interaction between a bus component and the bus.  Typically, they are written
in a fashion so that you can adjust a user logic section however
you might like, while another portion of the design provided by the vendor
handles all of the more difficult AXI bus interaction logic.&lt;/p&gt;

&lt;p&gt;Much to my surprise, most of the cores I examined had bugs in them.
I’ve &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;tweeted&lt;/a&gt; about many of these, and so now
I’m collecting these examples into some slides that I can present at
&lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt; in just a couple of weeks.&lt;/p&gt;

&lt;h2 id=&quot;its-worse-than-a-software-bug&quot;&gt;It’s worse than a software bug&lt;/h2&gt;

&lt;p&gt;One of the jokes in the flying world is that pilots need to maintain “the
ratio”: one safe landing for every take off.  AXI bus interactions are
in many ways no different, there needs to be one response for every request.
Further, just as most airplanes don’t offer ejection seats or parachutes,
AXI doesn’t offer a “bus abort” capability.  As a result, if you fail to
keep the “ratio” then really “bad” things will happen.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 4. Every request must get a response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/request-response.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What kind of “bad” things are we talking about?  In the case of a bus,
a bus master makes a request–whether or read or write–and the slave responds.
In the case of AXI, the fact that it has no abort capability means that a master
must wait for a response until it arrives.  The standard doesn’t allowed it to
time out and give up after waiting a second, minute, hour, or year.  Even
if the response gets dropped or otherwise becomes missing, the master must
still wait for a response.&lt;/p&gt;

&lt;p&gt;Sadly, I discovered the problem with this in my first &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V
SOC&lt;/a&gt;
design.  At one point when I had a mistake within my own logic so that the
design didn’t respond to the bus like it was supposed to, the bus and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
driving the bus, locked up hard.  Only a reset, forcing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
reboot, fixed the bug.&lt;/p&gt;

&lt;p&gt;In my example, I was lucky.  Knowing that there was a bug in my design, I was
able to then turn around and &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;simulate my
design&lt;/a&gt; and
find the bug.  I haven’t always been this lucky, and things could’ve been much
worse.  Had I not been able to reproduce the bug in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
I might have ended up stuck in &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt; myself, staring
at a flawed design with no idea how to fix it.&lt;/p&gt;

&lt;p&gt;Others haven’t been so lucky.&lt;/p&gt;

&lt;p&gt;Even among those who ask for help there are a lot of problems that can’t be
solved by a disinterested stranger looking over unfamiliar logic.  It’s only
gets worse when you have no clue where to start looking, as might happen
with a design that suddenly locks up the whole system.&lt;/p&gt;

&lt;p&gt;You need to understand, this isn’t a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kernel_panic&quot;&gt;kernel panic&lt;/a&gt;
type of bug.  We’re not talking about the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Blue_Screen_of_Death&quot;&gt;blue sceen of death&lt;/a&gt;
here either.  Nor are we talking
about bugs where your &lt;a href=&quot;https://en.wikipedia.org/wiki/Segmentation_fault&quot;&gt;application just
failed&lt;/a&gt;.  No, we are
talking about something even more severe.  A fault in the
&lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;AXI bus&lt;/a&gt; structure
whereby a component fails to respond properly is catastrophic.  The result
will be a whole system crash so hard that only a power cycle can fix it.&lt;/p&gt;

&lt;p&gt;Given that &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;I use the bus for
debugging&lt;/a&gt;,
such a crash leaves me blind to the cause.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Two types of catastrophic bugs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/catastrophic-two-types.svg&quot; alt=&quot;There are two types of catastrophic bugs: those that return too few responses, and those that return too many&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So what kind of bugs did I find?  I found both types of catastrophic bugs.  Not
only did I find peripherals that didn’t produce as many responses as requests
they had received, but I also found bus masters that would drop requests before
the bus had accepted them.&lt;/p&gt;

&lt;p&gt;In one &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; I examined
from a major vendor, two load or two store instructions, back to back, would
cause a transaction to be dropped if the interconnect wasn’t immediately ready
to receive to the request.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 6. An interconnect bug&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/buggy-interconnect.svg&quot; alt=&quot;Interconnect routes a slaves response to the wrong master&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Worse, I even found an
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;,
something that connects multiple masters to multiple peripherals such as the
one shown in Fig. 6, where a request from one master would get sent to the
correct slave, but then the response from the slave would be returned back
to a different master.&lt;/p&gt;

&lt;p&gt;It wasn’t pretty.&lt;/p&gt;

&lt;p&gt;Indeed, I found bugs in a very large percentage of the cores I examined.&lt;/p&gt;

&lt;p&gt;It didn’t help that many demonstration cores, and how-to blog articles
I found had bugs in their example cores that were then copied into various
user designs.  Neither did it help that the example designs from &lt;em&gt;both&lt;/em&gt; major
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
vendors had catastrophic bugs within them.&lt;/p&gt;

&lt;p&gt;As you might imagine, I was rather perplexed by this.  In many ways, none of
this made any sense.  If these problems were really so bad, how was it that
no one had noticed them?&lt;/p&gt;

&lt;p&gt;One possibility was that each vendor only checked their cores in their own
environment, and somehow the environment was masking the bugs.  As an example,
some of the bugs I found would be only triggered if the bus was ever used in
a particular configuration.  I also found that one vendor had crippled
the throughput of their interconnect–perhaps because no one really knew who or
what was responsible for the user bugs.
[&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;1&lt;/a&gt;] [&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;2&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;So I started browsing and participating in various forums.&lt;/p&gt;

&lt;h2 id=&quot;working-the-forums-for-answers&quot;&gt;Working the forums for answers&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Digilent&#39;s Popular Contributors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/leader-board.png&quot; alt=&quot;&quot; width=&quot;296&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Back in the beginning, when I first started to try to sell my services as an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design engineer, I worked &lt;a href=&quot;/digilent/2017/05/18/most-common-digilent-support-requests.html&quot;&gt;Digilent’s
forums&lt;/a&gt;
fairly hard in the hopes that I might gain some free publicity and perhaps
even a contract.
Even to this date I’m one of their leading all time contributors, even though
I’ve stopped working the forum as hard and the forum moderator’s have since
caught up and one has passed me.
Since I had just left the military service, I was hoping this might be a way
to find some commercial work.  The technique worked well, since I found
two contracts, several long-term business relationships, and even some free
hardware as a result of it–such as a &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video
board&lt;/a&gt;
and even a &lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;Digital
Discovery&lt;/a&gt;.
This time, however, I worked up the chain on the major vendor’s forums, rather
than those of their outlets.  Specifically, I was looking for examples of the
bugs listed above, or if not then I was hoping to discover why they weren’t
being triggered.  I was also looking for example designs to check my formal
property files against.&lt;/p&gt;

&lt;p&gt;While much of what I found was fairly benign, such as brand-new students
struggling to figure out their engineering design homework, there were
also many professional design engineers participating in these forums and
asking for help regarding the problems they had come across.&lt;/p&gt;

&lt;p&gt;In one conversation, I came across a user asking for help whose AXI slave
design wasn’t working.  When I asked if he would try my own &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;formally verified
design&lt;/a&gt;,
he tried it and the bugs went away.  Sadly, we never found or identified the
bug(s) in his own (VHDL) code–perhaps because he never shared enough of his
design.  Incidentally, when I offered him &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;my own design to
try&lt;/a&gt;,
I never told him that this was the first time the core had been tried in either
hardware or simulation.  It “just worked” the first time.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 8. Updating software breaks the hardware design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/new-software.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In another conversation, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design engineer had built a design and delivered it to his product team in
a “working” condition for the software programmer to take over.  The design
contained a &lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; and whatever
application sauce they were putting into it, such as is shown in Fig. 8.  This
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design engineer then left the company.  Some time later, the software
engineer made some changes to his
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt; software–not the
hardware design, but the software for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
within it.  The result was that the design locked up following two adjacent
store instructions and no one could understand why.  This pattern also matched
the bugs that I had found.&lt;/p&gt;

&lt;p&gt;Someone else posted on a &lt;a href=&quot;https://reddit.com/r/FPGA&quot;&gt;Reddit forum&lt;/a&gt; that their
design wasn’t working, curious if anyone had seen similar problems before.  I
asked if he had formally verified his design.  Instead of responding to
me, he turned around and posted on the vendor’s forum no longer asking but
now declaring that their
interconnect was broken.  Again, I asked if he had formally verified his
design or, if not, if he’d release his source code and I’d check it for him.  He
then proceeded to ignored me for a second time and instead posted a trace that
was supposed to show the bug.  When you looked closer at the trace, however,
you found a bug within his core and not the interconnect: one request was
creating two responses.  His design wasn’t keeping up the “ratio”.  Formal
methods would’ve caught that.&lt;/p&gt;

&lt;p&gt;Another engineer posted, wondering what was wrong with the vendor tools.
When I asked if he could or would share his source, he refused.  Sadly, this
is a rather common though unfortunate answer.  Digital logic is designed and
sold, and protecting the market tends to keep corporations tight-lipped about
their secret algorithms–since it represents real money to them.  Instead,
this engineer offered a “sanitized” version of what he was doing.  With the
&lt;a href=&quot;/formal/2019/04/16/axi-mistakes.html&quot;&gt;experience I had gained from formal
methods&lt;/a&gt;, I could
clearly see the bug in even his sanitized design–although I have to believe
it must’ve passed his test bench for him to even open up like that.&lt;/p&gt;

&lt;p&gt;When I dug further into the forums, I found several examples of folks who had
written in, not knowing why their design was failing, but for whom no one had
responded.&lt;/p&gt;

&lt;p&gt;I also looked into any example code I could find.  I noticed that most of the
examples I found followed the vendor’s examples.  This made it fairly easy
to verify, since once I had verified one example any others that looked like
it tended to have the same bugs.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Vendor interconnect logic, with multiple internal implementations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/vendor-interconnect.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At one point, I even looked into a major vendor’s interconnect structure.  I
was hoping I might be able to apply the formal tools to it, having &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;verified
my own interconnect&lt;/a&gt; and
also since I had found some severe bugs in an academic’s interconnect–as
mentioned above.  As I worked through this design to determine if it would
even be possible to set up the tools (it wasn’t–not all of the code was
available as shown in Fig. 9), I noticed an
optional “feature”: The default setting of their interconnect
would allocate a channel from the master to the slave and at the same time from
the slave to the master.  This channel would then remain allocated until all
transactions had completed–much like my own
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar design&lt;/a&gt;.
An optional setting would activate a different implementation, one that would
route transaction requests in packets to the slaves,
and then route them back to the masters in a way that required bus arbitration
in both directions.  As a result of the second “return” arbitration, the slave
would experience “&lt;a href=&quot;https://en.wikipedia.org/wiki/Back_pressure&quot;&gt;back
pressure&lt;/a&gt;”–a necessary trigger
condition for some (but not all) of the bugs I had found.  This second
implementation would’ve clearly triggered the bugs that I had found, whereas
the first might not have.  Given the code I examined, it is quite possible that
a failure to test all configurations of this vendor’s design might’ve
contributed to the problem manifesting in some designs and not others.&lt;/p&gt;

&lt;p&gt;In another example from the same interconnect logic, I noticed that the
vendor crippled both read and write channels in their AXI-lite to AXI bridge.
This surprised me.  Bridging from &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilite2axi.v&quot;&gt;AXI-lite to
AXI&lt;/a&gt; is really
easy to do, requiring almost no logic.  Then I realized, their crippled design
probably kept some of these &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
bugs&lt;/a&gt;
from triggering.  This appeared to be either a consequence of an engineer
trying to fix an ill-defined logic bug, or perhaps it was legacy code
remaining from a protocol version (AXI3) that had since fallen out of favor.&lt;/p&gt;

&lt;p&gt;I also discovered a more shocking reason why many of these bugs may have stayed
hidden, while examining some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt; reset questions.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. DMA&#39;s are used for automatic data copying&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/dma-copy.svg&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For those who are not familiar with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;, it’s basically
a hardware component that copies data from one bus slave to another.  My own
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;WB DMA&lt;/a&gt;,
works by first copying the data to an internal memory, and only then writes
it back to the bus.  It will do this several times if necessary.  If it
ever encounters a bus error,
such as I sometimes generate from a slave failing to respond,
it issues a bus abort, ends the transaction, and reports an error.&lt;/p&gt;

&lt;p&gt;This is not as easy to do with AXI.&lt;/p&gt;

&lt;p&gt;In this case, several customers had posted to the forum over a couple of days
asking asking whether or not it was possible to interrupt an ongoing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;
transaction.  Apparently, these customers were trying to copy data between a
user logic core and memory and the bus was locking up mid-transaction.  They
wanted to find out how to abort the transaction.  I replied to these
individuals that there is no such thing as a bus abort in AXI: every
transaction request must receive a response.  There’s no way to timeout
a transaction.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 11. Using an AXI Fault Isolator&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/axi-fault-isolator.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Well, not quite.  There is one way to timeout a transaction.  You can use a
“firewall” of some type, such as this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus
fault isolator&lt;/a&gt;,
to catch bugs in a faulty AXI slave.  If placed between the slave and the rest
of the bus logic, as shown in Fig. 11, it will catch faults and then isolate
the downstream slave from the rest of the system–keeping those faults from
propagating upstream and becoming catastrophic.  Of course, once the fault
is detected, you still don’t know if a subsequent response was for the
missing earlier response or not.  As a result, you can even configure 
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;the core&lt;/a&gt;
to then reset the downstream slave as well.&lt;/p&gt;

&lt;p&gt;Unfortunately, this approach is not a cure-all.  Placing the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;bus fault
isolator&lt;/a&gt;
between the interconnect and user logic will slow the user logic transactions
down to one at a time.  As a result, just placing
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axisafety.v&quot;&gt;this core&lt;/a&gt;
between the interconnect and user logic may resolve the problem just by
itself–even if it never detects a fault.&lt;/p&gt;

&lt;p&gt;Still, I shared this possibility on several of these forum threads.  If nothing
else, it would’ve helped isolate the cause of the problem.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12. Unflattering posts were deleted&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/deleted-post.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What surprised me the most about this these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;
reset inquiries was that the &lt;em&gt;vendor then deleted all but one of the three
threads&lt;/em&gt; when it became apparent that it wasn’t going to be flattering to their
product line or to the bus structure they had chosen.  This left me wondering,
&lt;em&gt;how many other forum posts regarding these bugs have been deleted?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, this problem runs deep.  It also appears to be hard to find.&lt;/p&gt;

&lt;h2 id=&quot;why-havent-these-bugs-been-caught&quot;&gt;Why haven’t these bugs been caught?&lt;/h2&gt;

&lt;p&gt;Digital design has been around for a while, so why haven’t these problems been
caught before?  Why do they remain so hard to find?&lt;/p&gt;

&lt;p&gt;I think the answer to this question comes down to how digital designs are
tested and verified in the first place.  The standard test methodology
requires you to write a &lt;a href=&quot;https://www.xilinx.com/support/documentation/sw_manuals/xilinx10/isehelp/ise_c_simulation_test_bench.htm&quot;&gt;test bench&lt;/a&gt;
that exercises your design.  Much as I discovered with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;my first experience
with formal methods&lt;/a&gt;,
such test benches tend to only examine a “normal” design path.  In my case,
my own FIFO test bench didn’t check all combinations of reading and writing to
either full or empty FIFOs.&lt;/p&gt;

&lt;p&gt;My best guess is that the same thing is going on here.&lt;/p&gt;

&lt;p&gt;I know one individual who wrote in to Xilinx’s forums proudly proclaimed
that his core had passed Xilinx’s (AXI VIP/simulation based) verification
and so any problem he was having must be Xilinx’s fault.  Sadly, their
verification step left him believing that his user core worked, even
though it still suffered from the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;same AXI-lite
bugs&lt;/a&gt; I had already found.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 13. Simulation scripts rarely test everything&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/sim-script.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic problem is that if
you only ever test your AXI user component against one transaction at a time,
you’ll miss most of these bugs: You’ll start your simulation with a bus
master initiating a transaction while the slave is already waiting for it.
The simulated slave will then respond to the waiting master and voila you’ll
convince yourself that your design works even when you haven’t checked all
conditions.  What then happens if the interconnect sends another request
before the first one has returned?  It wasn’t tested.  What happens if either
the interconnect or bus the master aren’t yet ready to receive the bus slave’s
response?  Not tested.  Might the slave
ever lock up, due to conditions that aren’t simulated, to where it stops
processing the bus request?  These aren’t things that are normally tested in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
but they do happen in real life.&lt;/p&gt;

&lt;p&gt;Consider the &lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;
discussion above.  A good
&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt;
will push as much data into and through a core as fast as the bus will allow,
yet the simulation approach we just discussed above will never test for this.&lt;/p&gt;

&lt;p&gt;Consider the example of the vendor’s interconnect as well, shown in Fig. 9
above.  If the interconnect has to arbitrate response packets back to the
master that sent them, then it may not be ready to receive a particular
response if another slave has the return grant to that master.  This
didn’t get tested either.&lt;/p&gt;

&lt;p&gt;What about the crippled channels?  If you had enabled them to be full speed,
by packing request after request, many of these example designs would break.
Again, this is something you won’t test if you just tested one transaction
at a time in a simulation.&lt;/p&gt;

&lt;p&gt;Some weeks ago an engineer wrote to me and asked if I had a test bench for &lt;a href=&quot;/formal/2019/01/12/demoaxilite.html&quot;&gt;one
of my cores&lt;/a&gt;.  You
know, he said, something where he might write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;n&quot;&gt;read_transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I was floored.  Indeed, I didn’t even know where to start.  Any test bench
that only checked one transaction at a time, or waited for the read transaction
to finish before starting a write transaction would mask many if not all of
the bugs I had found.&lt;/p&gt;

&lt;p&gt;On the other hand, this is &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;how &lt;em&gt;software&lt;/em&gt; engineers
think&lt;/a&gt;,
since &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
can only ever do one thing at a time: test this, then test that.  It’s how
software works, but it’s not how hardware works.&lt;/p&gt;

&lt;p&gt;This is why digital designers need
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
now more than ever–because they actually check the cases you weren’t
anticipating.&lt;/p&gt;

&lt;p&gt;If you’ve never tried
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
before, then understand that they are very different from
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.
Instead of trying one test after another in a long chain or sequence of logic,
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
check all logic paths at once.  Yes, “all”, in what typically is a breadth
first search.  This is both their greatest benefit, since they catch things
no one imagines, as well as their greatest curse, since the computation
required does not grow with &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_complexity#Polynomial_time&quot;&gt;polynomial
time&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14. Should vs should not&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/should-not.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Another thing that makes
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
different is that you don’t specify how the external environment &lt;em&gt;should&lt;/em&gt;
interact with your core.  Instead, you specify how the external environment
&lt;em&gt;shouldn’t&lt;/em&gt; interact with your core.  The subtle difference in logic means
that, unless you tell the tool not to, it will try all kinds of crazy logic
inputs that you might never expect.&lt;/p&gt;

&lt;p&gt;One of the common misperceptions about formal verification techniques is that
they are only useful or cost-effective for “mission critical”
applications–things like aircraft, rockets, and satellites.  Were I to
buy into this misconception, I wouldn’t touch formal methods at all–since
my own little “sandbox” is hardly anything anyone cares about.&lt;/p&gt;

&lt;p&gt;That view might have even described me before I tried it for the first time.
After using these tools, I’d never go back to the way I was doing
digital design before starting with formal methods.  For me, formal methods
are a big time saver.  One of the things I really dislike is trying to sort
through a 15GB+ simulation trace file looking for a bug.  It takes too long,
and wears thin on my patience.  Not so with formal methods.  Indeed, most of
the formal designs I do require less than 20 time steps to find a bug.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 15. Reasons why I still use formal methods&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/why-formal.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Posting to a forum?  Personally, I’d never write into a vendor forum asking
for help unless I was not only stuck in &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;, but I had tried
every option I knew of to get out and still ended up stuck.  I like the
ability to do my own work and to call it my own, and so I’m the type of person
who will wait until I had tried fixing my own design every way I knew how
before ever breaking down and asking for help.  Perhaps its a character flaw.
However it’s this particular bias of mine, and I don’t think it’s all that
uncommon, that makes me believe that those who had posted requesting help,
and especially the professionals among them, must have been stuck in
&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;
for a while before they risked their pride and profit to ask on a public forum.
Now imagine if you could find a logic problem quickly, perhaps even in less
time than it took to synthesize your design or even write your post for help,
and do it all at your desk.&lt;/p&gt;

&lt;p&gt;“Mission critical” or not, formal methods have saved me and my little
sandbox of the world &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;a lot of
frustration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;a href=&quot;/formal/2019/08/03/proof-duration.html&quot;&gt;how long does it
take&lt;/a&gt;?  Well, to
give you an example, I just built my own &lt;a href=&quot;https://github.com/ZipCPU/wb2axip//blob/master/rtl/axis2mm.v&quot;&gt;AXI stream to
memory&lt;/a&gt;
converter.  After writing this core, I included the
formal bus properties into the core and started running the tools.  This
was before simulation–since I haven’t (yet) run the core through a simulation.
At first, &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
founds bugs in seconds.  Those first bugs tended to be focused on initial
values and reset processing.  Once fixed, the tool then took a bit longer
and found several bugs in my AXI-lite control logic.  Once I cleared
those two hurdles, I was then stuck again between about 10-15 time steps for
a while.  During this time, the tools only required two minutes of processing
to find a bug.  At this point the bugs found included things like reading
from an empty FIFO, initiating a bus burst requests before there was enough
data in the FIFO, changing a bus request while it was waiting to be accepted,
crossing memory pages within a single request and so forth.  Now that I’ve
worked with the core for a while, it only takes 56 seconds to know if any
changes I’ve made have broken the core.&lt;/p&gt;

&lt;p&gt;Think about that for a moment.  It takes 56 seconds to know if any simple logic
change has placed a bug in the core or not.  Not only that, but by means of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;k-induction&lt;/a&gt;,
those 56 seconds evaluate not only the first 15-timesteps, but &lt;em&gt;every set of
15-timesteps from the beginning of time through all eternity&lt;/em&gt;–or at least
until the hardware starts failing.&lt;/p&gt;

&lt;p&gt;Good luck trying to get your simulation either to run that fast or to be
that complete.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Most of the bugs I’ve found have now been posted, either in a blog article
on this site, in Xilinx’s forums, or directly to the authors of any github
cores either by filing an issue or sending an e-mail.  Many of them have not
yet been fixed as of this writing.  For example, as of Vivado 2019.1, Xilinx’s
bugs remain including one dating back as far as 2016.1.  The good news is that
their engineers are now not only aware of these bugs, but they’ve also promised
to fix them.  This is not yet true of the bugs I found in Intel’s design.
Sorry, I’ve dropped the ball there.  Other than
&lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;tweeting&lt;/a&gt; about Intel’s bugs, I have
yet to formally post or write about my findings.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 16. It&#39;s not just for safety critical applications&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axi-story/bubble.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What I will say is that I remember, years ago and before I ever started
diving deeply into FPGA technology myself,
sitting down with a co-worker to integrate their data collection logic into
my mission requirements.  Our goal was to demonstrate that we had a useful
product to the boss.  Instead, I remember this coworker struggling and
struggling with the design, hitting the reset key over and over and over
again, frustrated and confused at why the design wasn’t starting up like
it was supposed to or like it “usually” did.  No, I’m not going to repeat
his language here, but let’s just say that over the course of time while
he was hitting that reset button it became more and more colorful.&lt;/p&gt;

&lt;p&gt;Now consider that the training material I’ve found has been broken.  Indeed,
any one of the AXI bugs I’ve found in these public source vendor training
materials might’ve caused this same frustration.  These include not only the
bugs found in the training material for the vendor’s tools that I’ve already
blogged about, but also the training material for the other major vendors on the
market.&lt;/p&gt;

&lt;p&gt;Now, as I’m slowly picking up my jaw off the floor, I’m starting to get the
full impact of what’s been going on.&lt;/p&gt;

&lt;p&gt;These bugs can be found and fixed–using formal methods.&lt;/p&gt;

&lt;p&gt;If you are interested in repeating any of my work, I’ve done all of my work
using &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;–either the
open source or the commercial version.  I’ve also posted copies of the
Xilinx designs I’ve tested.  If you’ve never formal methods, the open
source version is capable of processing any Verilog (2005) code you might have
with a limited number of SystemVerilog extensions.  Feel free to download it
and give it a try.  You can also find my &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
properties&lt;/a&gt; and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;several
example designs on line&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;You can also start with my &lt;a href=&quot;/tutorrial&quot;&gt;beginner’s design
tutorial&lt;/a&gt;.  It’s free.  Enjoy it.  Even though
&lt;a href=&quot;/blog/2019/08/20/lego-design.html&quot;&gt;Xilinx deleted my response recommending this tutorial to new
engineers&lt;/a&gt;, you are
welcome to it.  I also teach a course on how to do formal verification.
You can find &lt;a href=&quot;/tutorial#training&quot;&gt;those slides here&lt;/a&gt;,
and contact me if you are interested in taking the course either on-line or
in person on your site.  Feel free to check those out too.&lt;/p&gt;

&lt;p&gt;Finally, I look forward to meeting many of my readers at
&lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF 2019&lt;/a&gt;!  Feel free to stop me and say hello.&lt;/p&gt;

&lt;!-- Counter argument: If Xilinx is having these issues, and it&#39;s not breaking their neck, it can&#39;t be such a big deal.  Other comment: IP Vendors need to adapt formal methods before their customers do, because as soon as their customers have the formal methods, they&#39;ll immediate know where to put the blame. --&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Buy the truth, and sell it not; also wisdom, and instruction, and understanding. (Prov 23:23)&lt;/em&gt;</description>
        <pubDate>Fri, 06 Sep 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2019/09/06/axi-story.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/09/06/axi-story.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Understanding AutoFPGA&#39;s address assignment algorithm</title>
        <description>&lt;p&gt;Some time ago, I figured out a basic address assignment algorithm for use in
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
At the encouragement of &lt;a href=&quot;https://twitter.com/ZipCPU&quot;&gt;my twitter&lt;/a&gt; followers, I
thought it might be valuable to share this algorithm here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
as you may recall, connects peripherals (&lt;a href=&quot;https://github.com/ZipCPU/autofpga/tree/dev&quot;&gt;and now multiple masters
in the dev branch&lt;/a&gt;) to any
respective buses you might wish to assign them to.  While
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is primarily a copy-paste design facility with some calculation mixed in,
address assignment is one of several exceptions to this rule.&lt;/p&gt;

&lt;p&gt;Consider as an example the bus structure shown in Fig. 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Example multi-level bus structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/generic-bus-diagram.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this structure, you can see three bus masters, together with four basic
slaves, four &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;-type slaves, and four &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;-type slaves.  Slave one
in particular provides access to a second bus having two slaves on it.&lt;/p&gt;

&lt;p&gt;To assign addresses to all of these peripherals,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generates and maintains a list of buses found within the design.  Each bus
is composed of a number of peripherals (the PLIST), and one or more masters
(the MLIST).  Certain special “subbus” or “arbiter” masters are able to cross
from one bus to another, making it possible to have hierarchical bus structures,
such as Fig. 1 shows above.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. Example multi-level bus structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/bus-lists.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;s
first task is to &lt;a href=&quot;/zipcpu/2019/08/30/subbus.html&quot;&gt;split each bus into three
parts&lt;/a&gt;: The first is for
peripherals of type &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;.  These are single register peripherals whose
register is immediately available for reading or writing, and who don’t stall
the bus.  The second set of peripherals, those of type &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;, can have
more registers internal to them.  This set requires a single clock period to
return a value from a bus request.  As with the &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; list, this set is
not allowed to stall the bus either.  The last set of peripherals contains all
other types of peripherals.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;WB peripherals&lt;/a&gt;,
the entire &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripheral set is turned into a &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripheral, and
then that peripheral is turned into a regular peripheral of the normal variety.
While this is captured in Figs. 1 and 2 above, I haven’t yet decided if I will
do the same thing for the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; interface or not.&lt;/p&gt;

&lt;p&gt;Address assignment then starts at the lowest level of the bus structure, and
then works its way up to the top.  Within any given level, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; set is
assigned first and formed into its own peripheral, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; set,
and then peripheral assignment is done on the rest of the bus.&lt;/p&gt;

&lt;p&gt;Let’s look at an example from one of my more recent projects.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Abbreviated bus design from a recent project&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/sonar-design.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this project there’s your basic
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, and then
&lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash&lt;/a&gt;,
SDRAM, network, and &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD-Card&lt;/a&gt;
peripherals.  Indeed, this much of the design is based upon my
&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip design&lt;/a&gt;.  Now, using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
I can add a basic SONAR transmit controller and a boot ROM section so my
customer doesn’t need to load code into the design himself.  (The boot ROM
slave isn’t shown in Fig. 3 above.)  Finally, there’s a data recorder shown
above as the “DMA” in the picture.  If you look carefully, you’ll notice this
same slave exists on the bus in two places: once where for the control port
where it receives its commands, and again for the memory access portion
where it masters the bus.  Xilinx users might be familiar with the similar
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_datamover/v5_1/pg022_axi_datamover.pdf&quot;&gt;AXIS2MM data mover
peripheral&lt;/a&gt;,
but this particular one is my own WB creation and no real relation to theirs.&lt;/p&gt;

&lt;p&gt;Let’s spend a moment to see how
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
handles this address assignment problem.&lt;/p&gt;

&lt;h2 id=&quot;address-decoding&quot;&gt;Address Decoding&lt;/h2&gt;

&lt;p&gt;The first step to understanding how address assignment works is to understand
how addresses are decoded.  &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;As we’ve discussed
before&lt;/a&gt;, address decoding is
done with two values: an address and a mask assigned on a per-slave basis.  A
particular peripheral is selected if the requested address matches the slave’s
address everywhere a mask bit is set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peripheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_request&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requested_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might also equivalently write,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peripheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_request&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requested_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLAVE_ADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLAVE_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both should generate the same logic.&lt;/p&gt;

&lt;p&gt;In general, the goal of address assignment is to both minimize the number of
mask bits and the number of address bits at the same time.&lt;/p&gt;

&lt;p&gt;Sound simple?  Let’s find out how this works.&lt;/p&gt;

&lt;h2 id=&quot;easy-address-assignment&quot;&gt;Easy Address Assignment&lt;/h2&gt;

&lt;p&gt;Just to illustrate the issue of address assignment, let’s start out with a
basic set of peripherals and assign an address to each of them.  I’ve chosen
a set of 12-peripherals for this purpose, shown in Fig. 4 on the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Example slave peripherals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/sample-plist.png&quot; alt=&quot;&quot; width=&quot;296&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first “peripheral” is the null space.&lt;/p&gt;

    &lt;p&gt;My initial designs didn’t include this null space.  Shall we say I got
burned and then painfully learned the wisdom of my ways?&lt;/p&gt;

    &lt;p&gt;The story dates back to before I implemented illegal instruction detection
in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
feeling at the time that it was “optional”.  (I don’t feel this way any
more.)  Then one day something went wrong.  Somewhere, a pointer got set
to address zero.  Worse, all of my peripheral addresses were packed near
zero at the time.  The result was that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; started
wildly writing errant data to the peripheral address space.&lt;/p&gt;

    &lt;p&gt;By the time I had realized what was happening, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
had written to the flash configuration control register and switched
some of the one-time programmable configuration bits.  My
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;,
while usable, has never been the same since.&lt;/p&gt;

    &lt;p&gt;I’ve also learned to add illegal instruction detection and bus error
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; detection to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;,
and similarly a null space to my address assignments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next couple of peripherals in this example set are &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scopes&lt;/a&gt;.
These require only two addresses, 4-bytes each, one for control and one
for data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I also have a &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;microphone peripheral&lt;/a&gt;
with a similar addressing scheme–one address for control and one for data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next peripheral is my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;WBUART
peripheral&lt;/a&gt;.  This has transmit and
receive registers, as well as protocol control and FIFO status registers.
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/wbuart.v&quot;&gt;This
peripheral&lt;/a&gt;
therefore requires address space for four 32-bit registers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/videozip/tree/enet/rtl/ethernet&quot;&gt;RGMII&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/rtl/enetpackets.v&quot;&gt;RMII&lt;/a&gt;
controllers need two address regions–one for packet
memory and another for the controller.  The
&lt;a href=&quot;https://github.com/ZipCPU/videozip/tree/enet/rtl/ethernet/enetpackets.v&quot;&gt;controller&lt;/a&gt;
itself requires eight 32-bit registers to control the transmitter, the
receiver, the MAC address,
and to some feedback counters to capture the number of aborted packets.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;These are followed by the &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/master/rtl/enetctrl.v&quot;&gt;network management data port&lt;/a&gt;.  My network
management controller provides a separate address for everything in
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Management_Data_Input/Output&quot;&gt;MDIO&lt;/a&gt;
address space, so it requires 128 bytes of address space.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The network packet memory needs to be sufficiently large to hold both a
received packet as well as the packet to be transmitted next.  Let’s pick
a memory area 32,768 bytes wide (two 16kB packets) knowing that we can
adjust this for other architectures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While I don’t typically use a first-stage boot-loader, one of the projects
I’m working on requires it.  That project requires a boot-ROM so we’ll throw
it in here.  A block-ROM of 256kB is more than sufficient to read a
program from an SD-card and copy it to RAM.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll then scrap together whatever’s left of our FPGA block RAM components
in order to create a &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;1MB block RAM
peripheral&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also have a &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;flash
   peripheral&lt;/a&gt; in this
   sample list.  It seems there’s a large set of
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
   peripherals stuck at 24-bit addressing, so this will give us a
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
   size of 16MB.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Our final peripheral is a &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3
   SDRAM&lt;/a&gt; having 512MB of memory.
   My current approach to this is to use the basic MIG controller, coupled
   with a &lt;a href=&quot;https://github.com/ZipCPU/wb2axisp/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to AXI
   bridge&lt;/a&gt;.
   As you’ll see in a moment, the sheer size of this particular peripheral will
   dominate much of how our address assignment algorithm will work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let me ask, how would you assign addresses to these peripherals?&lt;/p&gt;

&lt;p&gt;Ideally, what we might want would be a one-hot addressing scheme where
you could tell which peripheral was addressed by a single bit in the
address space.  While this sounds like an awesome idea, it fails in
practice any time an errant program accesses an address with more than one
of these otherwise one-hot bits set.  If both peripherals respond,
… “bad” things will happen.  The bus, for example, might lock up until
the next power cycle.  This is usually quite “bad”.&lt;/p&gt;

&lt;p&gt;This would also break the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;fundamental rule of all bus
work&lt;/a&gt;: for every request,
there is one and only one response.&lt;/p&gt;

&lt;p&gt;No, we want to make certain instead that our address assignment method works
in such a way that only one slave will ever be addressed at a time.  It doesn’t
matter if “non-allocated” addresses select that slave, but it does matter if any
addresses select more than one slave at a time.&lt;/p&gt;

&lt;p&gt;Perhaps the easiest way to do address assignment might be to first find
the slave with the biggest address width, and then assign an address space
that big to every slave.  Since the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;SDRAM&lt;/a&gt;
requires an address space of
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x2000_0000&lt;/code&gt; bytes, we’ll assign every peripheral that many bytes and just
count up.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 5. Example slave peripherals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/simple-assignment.png&quot; alt=&quot;&quot; width=&quot;643&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you can see from Fig. 5 on the left, we overran our 32-bit address
space and now need a 33-bit address space.
You can also see that our 8-byte peripherals were assigned 512 MBs of
address space each.  This would sort of be like running a parcel shipping
business and only supporting one size container–train box cars.&lt;/p&gt;

&lt;p&gt;Practically, this will never work.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
only supports a 32-bit address space (i.e. 30-bit word address space), and
of that address space there’s a reserved portion at the end from
&lt;code class=&quot;highlighter-rouge&quot;&gt;0xff00_0000&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0xffff_ffff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we abandon this approach though, let’s see what else we might learn
from it.  For example, the address decoder could decode all of these separate
peripheral address ranges with a simple 4-bit lookup table, checking only
address bits 33-29 as indicated by the mask, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1_e000_0000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While this is a low-logic decoder, it does have a consequence.  Low-logic
means that peripherals with a small address range may exist at multiple
locations in the address map.  To continue our parcel shipping analogy, many
loaves of bread might find in a package big enough to hold a sofa–why
only pack one peripheral in such a large address space?&lt;/p&gt;

&lt;p&gt;Further, consider how the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART
peripheral&lt;/a&gt; exists from &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8000_000f&lt;/code&gt; to
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x9fff_ffff&lt;/code&gt; even though it only uses four registers within that range.
What happens, then, is that all of the addresses within this range will
alias into the same four peripheral registers, allowing the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART&lt;/a&gt;
to be addressed anywhere in that address region.  We’ll touch more on this
in the next section.&lt;/p&gt;

&lt;p&gt;For now, we can summarize our success, or lack thereof, by two metrics–the
address width required to access all of these peripherals (33 bits–too many),
and the number of mask bits necessary to select between them, 4-bits.&lt;/p&gt;

&lt;p&gt;Can we do better?&lt;/p&gt;

&lt;h2 id=&quot;tightly-packing-addresses&quot;&gt;Tightly packing addresses&lt;/h2&gt;

&lt;p&gt;When I first started trying to handle address assignment, I would pack as many
peripherals as I could into a given address area.  Here’s how that algorithm
worked:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’d first sort all the peripherals, leaving the null space at zero of course.&lt;/p&gt;

    &lt;p&gt;Perhaps you’ve noticed that I’ve already sorted the peripherals listed
in Fig. 4 above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’d initialize my work by setting a &lt;code class=&quot;highlighter-rouge&quot;&gt;start_address&lt;/code&gt; either to 0.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For each peripheral, starting with the “empty” null-space and working down
the list, I’d add to the &lt;code class=&quot;highlighter-rouge&quot;&gt;start_address&lt;/code&gt; the size of the peripheral, minus
one byte.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peripheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;periphera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;This would be guaranteed to overflow if there weren’t enough bits to
support my requested address range.  For example, suppose the start address
was &lt;code class=&quot;highlighter-rouge&quot;&gt;0x40&lt;/code&gt; and I wanted to allocate space for the &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/master/rtl/enetctrl.v&quot;&gt;MDIO 
peripheral&lt;/a&gt;–requiring
a register space of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80&lt;/code&gt; octets.  If you add these two together, you’d
get &lt;code class=&quot;highlighter-rouge&quot;&gt;0x40 + 0x80 = 0xc0&lt;/code&gt;.  Subtracting one brings you to &lt;code class=&quot;highlighter-rouge&quot;&gt;0xbf&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now I can trim off the bottom bits, to guarantee the peripheral can use
an address mask.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peripheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;periphera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;To follow our example from above, this would force the &lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/master/rtl/enetctrl.v&quot;&gt;MDIO
peripheral&lt;/a&gt;
needing &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80&lt;/code&gt; bytes of address space to have a start address equal to
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x80&lt;/code&gt;–plenty of room, and with a guaranteed 7-bits to reference values
within the peripheral.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can then increment our start address to be ready for the next peripheral.
The new start address must be just following our assigned address space.
So, for our&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;start_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peripheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;Then, as a first pass to knowing what mask bits we require, we set our
mask bits to be the next address bit over.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;	&lt;span class=&quot;n&quot;&gt;periheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask_bits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;Finally, go back and repeat for all peripherals.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This sounds confusing.  Perhaps a picture or two might help.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Address assignment: three scopes and a serial port&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/uart-plus-scopes.svg&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The two &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scopes&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;microphone&lt;/a&gt; all use two words of
address space.  We can therefore pack them tightly together.  However, when
we get to the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART&lt;/a&gt;,
we need an address that’s aligned with four bus words.  Rounding up to the
nearest address that’s aligned with four bus words is going to require
stuffing two words of unused space into our address space as shown in Fig.
6 on the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 7. Adding the network control port&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/network-plus-uart.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once we’ve assigned the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scopes&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;UART&lt;/a&gt;, it’s now time to assign an
address to the &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/rtl/enetpackets.v&quot;&gt;network control
port&lt;/a&gt;.
This peripheral needs an address aligned to eight 32-bit words.  However,
if you shuffle everything to an eight word width, you’ll find that the network
control addresses don’t fit unless you skip some more space.&lt;/p&gt;

&lt;p&gt;As you can see, we’re working from the smaller peripheral to the larger
ones.  At each level, the peripheral needs to be assigned to an address
aligned to the size of the peripheral.&lt;/p&gt;

&lt;p&gt;That’s what the algorithm above does.&lt;/p&gt;

&lt;p&gt;As a last step, we’ll measure the total number of bits required to do this
address decoding (30 bits), and then trim any mask bits to just that many bits.
The result would be a set of base addresses and masks describing a “full
address decoder”.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. Full address decoding&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/full-address-decoding.png&quot; alt=&quot;&quot; width=&quot;589&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This time, you’ll notice from Fig. 8 above that we’ve done much better at
minimizing the number of address bits than we did in our first attempt shown
in Fig. 5 above.  But 27 mask bits?  Not so much.&lt;/p&gt;

&lt;p&gt;If low logic were important to us, and it has always been to me since more
logic costs more money, we might choose to just check the minimum mask bits
necessary to separate peripherals.  This would be a “partial address decoding”,
since it would leave holes in the address space.  You can see how this might
work in Fig. 9 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 9. First cut at partial address decoding&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/first-pass-partial.png&quot; alt=&quot;&quot; width=&quot;589&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you count number of bits used in the masks of Fig. 9, you’ll get eleven
non-zero bits.  Eleven mask bits would mean that decoding a peripheral’s
address would require a comparator with a length somewhere between one
bit (the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;SDRAM&lt;/a&gt;)
and 11-bits (the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;WB
Scopes&lt;/a&gt;).
Decoding addresses using an 11-bit mask would &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;require between two and three
LUTs per slave&lt;/a&gt;
depending on your architecture.&lt;/p&gt;

&lt;p&gt;While this kind of “partial address decoding” is both common and cost
effective, it’s been known to surprise those who aren’t familiar with it.
Consider as an example address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x210_0000&lt;/code&gt;.  Since the
block RAM’s mask only checks bits &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2110_0000&lt;/code&gt;, our address decoding
algorithm above will map this address to the block RAM–even though the
block RAM’s official address space only exists between &lt;code class=&quot;highlighter-rouge&quot;&gt;0x10_0000&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x1f_ffff&lt;/code&gt;.  On the other hand, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20c_0000&lt;/code&gt; would map to our block &lt;code class=&quot;highlighter-rouge&quot;&gt;ROM&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x30c_0000&lt;/code&gt; would map to our &lt;a href=&quot;/blog/2019/03/27/qflexpress.html&quot;&gt;Flash
peripheral&lt;/a&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x4003_0000&lt;/code&gt; would map to our first &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;WB
Scope&lt;/a&gt;).
This isn’t a bug, but it can be a rather surprising consequence
the address decoding algorithm.&lt;/p&gt;

&lt;p&gt;So, all in all, we did okay here with our second attempt at address assignment.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, however,
has a better approach to generating a “partial address decoding” mask, which
we’ll discuss in the next section.&lt;/p&gt;

&lt;h2 id=&quot;autofpgas-address-assignment-algorithm&quot;&gt;AutoFPGAs Address Assignment Algorithm&lt;/h2&gt;

&lt;p&gt;What we’ve done above nearly describes
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s
address assignment algorithm.  There’s only one piece missing: minimizing
the required size of the mask.&lt;/p&gt;

&lt;p&gt;To handle this,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
takes a first pass through the peripheral list to
calculate the minimum total address size.  It then increases the minimum
peripheral address size as long as the total address width remains less
than the minimum address width, and as long as the number of mask
bits goes down.&lt;/p&gt;

&lt;p&gt;How shall the minimum total address size be calculated?  Just the way we did
it in our last section: add peripherals to a bus and calculate the address
width.  The number of relevant bits is then given by the difference between
the full address size and the bloated minimum size given to every slave.&lt;/p&gt;

&lt;p&gt;For example, if we look through our example slave set, you’ll see that the
maximum slave size that doesn’t increase increase the address width is 25 bits.
Once chosen, each slave is checked for its address size.  If the slaves
address size is less than 25 bits, it is replaced by 25 bits in the
algorithm above.  The algorithm then continues as before.&lt;/p&gt;

&lt;p&gt;For the slave set example we’ve been working with today, the result then
looks like Fig. 10 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. Minimizing mask size for a given address width&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/address-assignment/final-assignment.png&quot; alt=&quot;&quot; width=&quot;589&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You might notice that the base address just increments from one peripheral
to the next–that’s the minimum address size amount.  Further, the peripheral’s
are just one step away from each other up until the last peripheral–the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;SDRAM&lt;/a&gt; again.&lt;/p&gt;

&lt;p&gt;Looking at Fig. 10 again, you’ll notice that the total address width is just
one more than the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;SDRAM&lt;/a&gt;’s
address width.  This is the minimum possible address width we could’ve
achieved.  Similarly, you’ll also notice that the address calculation now
fits in a 5-bit mask.  Since Xilinx chips allow packing two 5-LUTs into a
single 6-LUT as long as the wires are the same, that means we can do our
address decoding with only six pairs of 5-LUTs.&lt;/p&gt;

&lt;h2 id=&quot;bus-hierarchies&quot;&gt;Bus Hierarchies&lt;/h2&gt;

&lt;p&gt;This same basic approach maps quite nicely to bus hierarchies as well,
where one bus master is a slave to another bus above it.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
handles bus hierarchies by simply walking the bus tree from the bottom on
up.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start at the lowest bus in the hierarchy.  Assign addresses to it.
Once accomplished, you’ll then know the address width of this sub-bus
within the hierarchy.&lt;/p&gt;

    &lt;p&gt;This width is used to fill key tags within an bus-translator or arbiter
components, allowing them to be adjusted for the width of the bus
they are working with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you then move up in the hierarchy, you can treat each bus beneath
as a self-contained slave.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Where this starts to get interesting is if you have multiple tops to the
bus tree, and those tops each have a different perspective of the
address map.  I’ve already had this problem once with both the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and the
debugging bus
occupying the top of the tree.  My solution was rather hackish to force
a specific arrangment of the two buses, but I’m likely going to need to
revisit it in the future.&lt;/p&gt;

&lt;p&gt;Since I’m only just now starting to handle multipl-masters with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, rather
than using an
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/ex/wbarbiter.v&quot;&gt;arbiter&lt;/a&gt;
to neck down every bus to a single master, I’m not quite sure how this
is going to impact things … yet.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I’m sure there are more complicated address assignment algorithms out there,
but this one has worked rather nicely for me for some time.&lt;/p&gt;

&lt;p&gt;It’s not perfect.  One of the particular limitations of this algorithm
as written is that it doesn’t (yet) handle the case where some peripherals
have pre-assigned addresses and others need to be assigned around those.
This means that every time your run
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
the address structure might change.  That’s not necessarily a good thing
when you’ve already delivered a product to your client and you just want
to add a new piece of hardware to the address decoder without obsoleting
all of the software you’ve already written.  In other words, allowing
the address space to be fixed is something I am very interested in
addressing in the future.&lt;/p&gt;

&lt;p&gt;On the other hand, if you have control over all of the parts of a project and
have no problems rebuilding all of your software on every reconfiguration, then
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
might be the solution you need.  Not only does it move things around, but it
then updates a series of header and data files that you can then use to keep
running the same software once recompiled.  As a result, if I simply run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make autodata
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;all of the addresses may get reassigned, but all of the software will rebuilt
at the same time to support the new address space.  On the other hand,
address reassignment isn’t automatic–if I don’t run &lt;code class=&quot;highlighter-rouge&quot;&gt;make autodata&lt;/code&gt; then
the design should work as is with the current address assignments.&lt;/p&gt;

&lt;p&gt;What do you think?  Feel free to drop me a line or re-post this article
if you felt this material was valuable.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;But he said unto them, Give ye them to eat. And they said, We have no more but five loaves and two fishes; except we should go and buy meat for all this people.  For they were about five thousand men. And he said to his disciples, Make them sit down by fifties in a company.  (Luke 9:13-14)&lt;/em&gt;</description>
        <pubDate>Tue, 03 Sep 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/09/03/address-assignment.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/09/03/address-assignment.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Quiz #5: Immediate vs Concurrent Assertions</title>
        <description>
</description>
        <pubDate>Sat, 31 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/08/31/quiz05.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/08/31/quiz05.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Connecting lots of slaves to a bus without using a lot of logic</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A Minimal Bus Implementation&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-doubles/minimal-crossbar.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I’m not quite sure why, but most of the time when I examine a design on-line
that someone has posted to a forum, there are very few bus components.  There’s
typically a CPU (Microblaze, Nios2, or ARM), some kind of SDRAM memory, perhaps
a flash device, and then one or two other peripherals.  Perhaps these would be
an SD-card controller and an ethernet controller, as shown in Fig. 1.&lt;/p&gt;

&lt;p&gt;I’ve never quite understood this.  Many of my own designs will have those same
peripherals, but then perhaps another 25 more.  Why not create more peripherals
than just a few?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Adding more peripherals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-doubles/massive-crossbar.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Perhaps I’m adding in the kitchen sink at this point, but why not?  If you can,
and if you have the peripheral and the space, why not add it into your design?
Maybe I’m just becoming a logic hoarder–I’ll add logic from every peripheral
I’ve ever worked on into a design and then more.  I’ll then even add lots
of &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;wishbone scopes&lt;/a&gt;
just to debug the whole.&lt;/p&gt;

&lt;p&gt;Large numbers of items on the bus has yet to become a crippling problem for
anything I’ve wanted to do.&lt;/p&gt;

&lt;p&gt;So why don’t I see block designs with even half as many components when browsing
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s forums&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;My guess is that it costs most folks too much logic.&lt;/p&gt;

&lt;p&gt;To understand the issue, let’s just say that we want to connect four masters
(CPU instructions, CPU data, DMA, and &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging
bus&lt;/a&gt;) to a bus
with 32 slave peripherals on it.  Just the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar interconnect&lt;/a&gt;
alone, before adding any peripherals, would require 5,571 LUTs for a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;WB
interconnect&lt;/a&gt;,
and (gasp!) 10,341 LUTs for an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI
interconnect&lt;/a&gt;!
It doesn’t help that the size of the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; goes up at a rate
faster than the product of the number of masters times the number of slaves.
Worse, these numbers say nothing of the difficulty associated with getting
such a massive design to pass timing for all the paths within such an behemoth
of a &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar interconnect&lt;/a&gt;
either.&lt;/p&gt;

&lt;p&gt;Perhaps this is why I’ve never seen more than a couple of slaves in any
particular design: the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
alone might take nearly half the part, if not more!  (Depending upon your
FPGA size, of course.)&lt;/p&gt;

&lt;p&gt;This of course leads to the interesting question, how is it that I haven’t
suffered from this problem when adding 20+ peripherals to a design?&lt;/p&gt;

&lt;h2 id=&quot;the-two-simple-slaves&quot;&gt;The Two Simple Slaves&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
simplifies this complex bus interconnect logic via the creation of two simpler
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave protocols&lt;/a&gt;.
I’ll call these sub-protocols, since for each of the simpler protocols the
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
can still be &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
compliant, it just has a couple of extra features.
The first sub-protocol is appropriate for a
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
that consists of just a single register.  This register may always be read
immediately.  The second peripheral class takes a single clock cycle to return
the data of interest.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
uses a slave type tag to describe these two sub-protocol classes.  The first
class would have a &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE=SINGLE&lt;/code&gt; tag, and the second would be
&lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE=DOUBLE&lt;/code&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; would
then use this information to simplify how such a
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
might connect to the &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;automatically generated bus
structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at each of these simplified protocol classes from a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
standpoint, and then see how we might use this in an
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt; or even from an
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; (full) standpoint.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
type must have only a single register assigned to it.  It must never stall the
bus, and the register must always be available to be read.  It’s as though all
the internal logic were summarized as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_err&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s really simple.  Now, what if the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
could just ignore &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; (always zero), and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; (always
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt;), set the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line (&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt;) dependent upon which
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
it was talking to, and then use a big case statement based
upon the current address to determine the return value?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; type is very similar.  In this case, though, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; line takes
another cycle to return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Delay the acknowledgement by one cycle, so we can accomplish our logic
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This extra cycle makes it possible to for the
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
to select from among several possible internal registers you might wish
to return before returning the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would again simplify the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;,
since it would no longer need to wait for &lt;code class=&quot;highlighter-rouge&quot;&gt;!STALL&lt;/code&gt;, nor would it need
to check &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; to know if the resulting data was valid.&lt;/p&gt;

&lt;p&gt;Because the logic for both &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slaves&lt;/a&gt;
is a &lt;em&gt;subset&lt;/em&gt; of the
full &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
protocol, the
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
can still be a valid
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
in its own right, while also allowing for the
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;interconnect&lt;/a&gt;
to optimize its bus access.  This means that the
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt;
should still work in a non-optimized
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
context as well as the optimized one, so you lose nothing there.&lt;/p&gt;

&lt;p&gt;I’ve now used this approach within
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
for some time with great success–but only for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; peripherals
so far, and only with a &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;very simplified interconnect
structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The reason this has come to light is that I’m now
in the process of &lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;upgrading
AutoFPGA&lt;/a&gt;
to use a full
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar interconnect&lt;/a&gt;.
As part of this upgrade, I came across this little optimization and wondered if
I should keep it or throw it out.  I almost threw it out, but then got to
thinking some more about it.&lt;/p&gt;

&lt;p&gt;To see the impact, consider the design shown above in Fig. 2.  Had I collected
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; slaves together for interconnect purposes, the design
might’ve been simplified to the one in Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Creating slave groups by type, SINGLE and DOUBLE&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-doubles/divided.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My current thought is, can or should this be done with
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI peripherals&lt;/a&gt;,
and if so how?&lt;/p&gt;

&lt;h2 id=&quot;simplifying-axi&quot;&gt;Simplifying AXI&lt;/h2&gt;

&lt;p&gt;So, if we were to totally simplify
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
to create simpler slaves and to gather eliminate any common bus logic between
them together, how would we do it?&lt;/p&gt;

&lt;p&gt;Here’s my current working proposal:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The interconnect guarantees that the core receives no back-pressure, leaving
&lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY&lt;/code&gt; both high.&lt;/p&gt;

    &lt;p&gt;This may require one (or more) &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffers&lt;/a&gt;, or perhaps
even small FIFOs within the interconnect, but this should still be quite
doable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The slave can then guarantee that it will keep all of the slave generated
&lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; signals high as well: &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WREADY&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Sorry, but this property will keep you from using many of &lt;a href=&quot;/formal/2019/05/13/axifull.html&quot;&gt;Xilinx’s
peripherals&lt;/a&gt;, since
they tend to idle with their &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; signals low.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The interconnect guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID == WVALID&lt;/code&gt;.  This will save
the slave from the hassle of needing to implement incoming
&lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid buffers&lt;/a&gt;
just to synchronize these two signals.&lt;/p&gt;

    &lt;p&gt;Even better, if the slave logic is done right, the synthesis tool should
be able to remove the &lt;a href=&quot;/blog/2019/05/22/skidbuffer.html&quot;&gt;skid
buffer&lt;/a&gt; logic from an
otherwise fully &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
compliant core.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The slave can then guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID == $past(AWVALID)&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID == $past(ARVALID)&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals.  For &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;
peripherals, the slave would guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID == $past(AWVALID,2)&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID == $past(ARVALID,2)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The neat thing about all of this is that these rules would work for
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt; as well as for
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With just a little more work, we could guarantee the ability to connect
an &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt; slave to a
simplified &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; interconnect
without the need for any further simplification logic.&lt;/p&gt;

&lt;p&gt;To do this using a fully
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
capable slave, we’d need a couple other bus simplifying rules as well.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The interconnect must guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN == 0&lt;/code&gt; any time &lt;code class=&quot;highlighter-rouge&quot;&gt;AxVALID&lt;/code&gt; is
true for both channels.&lt;/p&gt;

    &lt;p&gt;This means that the interconnect will need to break apart any bursts into
individual beats before they ever reach the slave.&lt;/p&gt;

    &lt;p&gt;This doesn’t mean that the interconnect will no longer support bursting
at a rate of one beat of the transfer per clock cycle, but rather that each
individual beat will be given its own address from the interconnect.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The interconnect would also then guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;WLAST == 1&lt;/code&gt; any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; is true.&lt;/p&gt;

    &lt;p&gt;This just follows from guaranteeing that &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN == 0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The interconnect guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;AxID = 0&lt;/code&gt;, and then ignores &lt;code class=&quot;highlighter-rouge&quot;&gt;xID&lt;/code&gt; on the
return channel.&lt;/p&gt;

    &lt;p&gt;Yes, I understand that there are reasons for using the ID field–just not
in this simplified version of
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Also, having a known response time from the slave makes the conversion
from &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; to
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;
a lot easier–without requiring any loss in burst speed.  To see how
difficult the conversion can be, consider &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axi2axilite.v&quot;&gt;this full speed
bridge&lt;/a&gt;
and notice the challenge of matching up the return ID with the requested
burst, as well generating &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; or even &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID &amp;amp; RLAST&lt;/code&gt; signals with
the end of the burst.  It wasn’t easy to do, certainly not while &lt;a href=&quot;/img/tweets/axi2axil-write-burst.svg&quot;&gt;maintaining
a high throughput&lt;/a&gt;,
and it was even harder to verify.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The interconnect guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;AxSIZE = $clog(C_AXI_DATA_WIDTH)-3&lt;/code&gt;, and
then leaves it constant.&lt;/p&gt;

    &lt;p&gt;This also follows from setting &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLEN == 0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The slave ignores &lt;code class=&quot;highlighter-rouge&quot;&gt;AxBURST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxCACHE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxPROT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AxQOS&lt;/code&gt;, and
so on.  (The master guarantees these values are zero, in case the slave
doesn’t quite want to ignore them.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The slave might still support &lt;code class=&quot;highlighter-rouge&quot;&gt;AxLOCK&lt;/code&gt; if desired, or ignore it if not.  I
haven’t decided if that would be useful or not.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, if the interconnect does its job right, you wouldn’t lose any burst
support, but still be able to retire beats at a rate of one per clock.&lt;/p&gt;

&lt;p&gt;Indeed, the &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
slave logic might easily be simplified to something like the following for
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; type peripheral:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
// Simplified AXI (SINGLE) write logic
//
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//
// Simplified AXI (SINGLE) read logic
//
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; type peripheral logic would also be similarly simplified.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//
// Simplified AXI (DOUBLE) write logic
//
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//
// Simplified AXI (DOUBLE) read logic
//
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;rreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;clog2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internal_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes, this eliminates a lot of the logic necessary to deal with the
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
protocol.  All of that ugly logic would be aggregated into one &lt;code class=&quot;highlighter-rouge&quot;&gt;axisingle&lt;/code&gt;
or one &lt;code class=&quot;highlighter-rouge&quot;&gt;axidouble&lt;/code&gt; module that would then handle all of the full
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;
protocol interaction in order to create this simplified protocol.  You can see
an example of such an
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilsingle.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axilsingle&lt;/code&gt; peripheral on
github&lt;/a&gt;,
should you be interested in how this might work.&lt;/p&gt;

&lt;p&gt;This approach allows the bus interconnect to simplify its logic drastically.
Instead of a 10k LUT
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;,
it should now be possible to connect the design together using a 3.4k LUT
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;,
Such a &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;
might support 4 masters and 8 slaves, where one of those slaves controls
the &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals and one controls the &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripherals.  The
logic in the slaves might even be as low as 600 LUTs (based upon a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilsingle.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;
peripheral drawn from an AXI-lite
example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Yes, there would be some distinct differences in this approach.  For
example, only one master could ever command a read (or write) port of a
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripheral at a time–rather than allowing a separate
master to connect to every simplified peripheral.  This isn’t really that
much of a problem, since if you anticipated contention, you might split the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;) peripherals into two groups–and so avoid
the contention.  You might also place any high demand peripherals into
their own peripheral slot in the interconnect and just ignore the potential
optimizations–indeed, how you group slaves into &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripheral locations is completely application dependent.&lt;/p&gt;

&lt;p&gt;This is also a very different approach from the more common approach of using
an AHB slave as a “lite” slave.  First, AHB has no support for simultaneous
reads and writes.  That would force the read and write channels to be
synchronous prior to handling an AHB slave.  Second, because AHB permits
arbitrary stall amounts, the master/interconnect can’t simplify the returns
among a group of peripherals, but instead is required to check for the return
from each individual peripheral.  Similarly, while it is possible to generate
an AHB interconnect, and so group peripheral returns, such groups of multiple
slaves under the same AHB port would just slow everything down–since AHB is
primarily a combinatorial logic bus.&lt;/p&gt;

&lt;p&gt;Unlike that AHB approach, this approach maintains the high clock speed and
multiple inflight transactions that
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; is known for already.
It also maintains the separate read and write channels, as well as full/burst
speed–unlike many of the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
implementations&lt;/a&gt; I’ve seen.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;As you may remember, &lt;a href=&quot;/zipcpu/2019/08/22/tech-debt.html&quot;&gt;I’m in the process of upgrading
AutoFPGA&lt;/a&gt; so that it can
handle multiple bus types.  My current upgrade plans include both full
&lt;a href=&quot;https://github.com/ZipCPU/autofpga/blob/master/sw/bus/wb.cpp&quot;&gt;WB&lt;/a&gt; support as
well as
&lt;a href=&quot;https://github.com/ZipCPU/autofpga/blob/master/sw/bus/axil.cpp&quot;&gt;AXI-lite&lt;/a&gt;
support, although once I get that far
AXI
shouldn’t be much harder.  Indeed, most of the
AXI
work has already been done in either the &lt;a href=&quot;https://github.com/ZipCPU/autofpga/blob/master/sw/bus/axil.cpp&quot;&gt;AXI-lite bus logic
generator&lt;/a&gt;,
or the &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;AXI crossbar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, &lt;a href=&quot;https://github.com/ZipCPU/autofpga/tree/dev&quot;&gt;my current work to this end is still quite
preliminary&lt;/a&gt;, but this at least
outlines how I intend to get the bus to be able to handle large numbers of
slaves without breaking the piggy bank to get there.  My goal is also to make
the generated logic usable for all, rather than encumbered by copyrights,
so that I could then use it in a vendor-independent basis for an &lt;a href=&quot;/blog/2019/08/16/intermediate.html&quot;&gt;intermediate
digital design tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/6/3&quot;&gt;If the Lord wills&lt;/a&gt;,
I’d love to have the opportunity to come back and blog about the success
of this work.  We’ll see what future the
&lt;a href=&quot;https://www.blueletterbible.org/kjv/heb/6/3&quot;&gt;Lord brings&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And whosoever shall fall on this stone shall be broken: but on whomsoever it shall fall, it will grind him to powder. (Matt 21:44)&lt;/em&gt;</description>
        <pubDate>Fri, 30 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/08/30/subbus.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/08/30/subbus.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Quiz #4: If this counter is never triggered, can we prove it&#39;ll never leave zero?</title>
        <description>&lt;p&gt;Let’s come back to our simple counter example again (no pun intended at first,
enjoyed ever since), and let’s build a quiz from it again.&lt;/p&gt;

&lt;p&gt;This time we’ve &lt;a href=&quot;/quiz/2019/08/08/quiz02.html&quot;&gt;fixed the issue with the initial
value&lt;/a&gt;,
we’ve chosen to ignore the ASIC designers who will insist our counter
requires an initial reset signal (it wouldn’t fit on the slide with a reset,
but you can add one if to the puzzle above if it makes you feel better),
and we’ve &lt;a href=&quot;/quiz/2019/08/19/quiz03.html&quot;&gt;asserted that our counter will never meet or exceed
&lt;code class=&quot;highlighter-rouge&quot;&gt;24&lt;/code&gt;&lt;/a&gt;.  (You may assume the
counter has enough of a bit width to reach &lt;code class=&quot;highlighter-rouge&quot;&gt;24&lt;/code&gt; …)  We’ve also brought back
the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_start_signal&lt;/code&gt;, which will trigger our counter.&lt;/p&gt;

&lt;p&gt;Today, though, we want to assume that the start signal is never raised,
and having assumed that we want to prove that the counter will remain
zero.&lt;/p&gt;

&lt;p&gt;Will the assertion below prove that?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 24 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/quiz/2019/08/24/quiz04.html</link>
        <guid isPermaLink="true">https://zipcpu.com/quiz/2019/08/24/quiz04.html</guid>
        
        
        <category>quiz</category>
        
      </item>
    
      <item>
        <title>Technology Debt and AutoFPGA, the bill just came due</title>
        <description>&lt;p&gt;I’m currently working on a fun SONAR project where I need a data collector.
The project involves transmitting SONAR data through the thick hull of a deeply
submerged underwater object, without drilling holes in the hull to do it.&lt;/p&gt;

&lt;p&gt;Understanding the transmission path through the hull will be a challenge,
so it becomes important to store the incoming signal to memory, download
it to &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;, and study it there
before building the downstream processing logic.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Sonar Signal Processing Chain&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/signalpath.svg&quot;&gt;&lt;img src=&quot;/img/autofpga/signalpath.svg&quot; alt=&quot;Sonar signal path: transmitter, hull, copy to memory, to SD card, then analyzed in Octave&quot; width=&quot;720&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My plan is to collect this information at high speed (800Msps),
to dump it to memory, and then to an &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD-Card&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve used Xilinx cores before, you may remember that they offer
an &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/axi_datamover/v5_1/pg022_axi_datamover.pdf&quot;&gt;AXI Stream to Memory Mapped DataMover
core&lt;/a&gt;
to handle this sort of data to memory processing, but I’ve always liked the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt; and
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;–the
&lt;a href=&quot;https://www.youtube.com/watch?v=en8JMz7v3LU&quot;&gt;fastest simulator on the market&lt;/a&gt;,
and one that’s easy to integrate an &lt;a href=&quot;https://github.com/ZipCPU/sdspi/blob/master/bench/cpp/sdsdpisim.cpp&quot;&gt;SD-Card simulator
into&lt;/a&gt;.
Creating a similar
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
core took me only a couple hours one morning to both build and verify.  Having
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal properties for the Wishbone
bus&lt;/a&gt; on hand
definitely helped.&lt;/p&gt;

&lt;p&gt;That was the easy part.  Indeed, I’d like blog about this new core soon as well
(once I decide where to put it).&lt;/p&gt;

&lt;p&gt;The harder part was integrating this new core with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem is simple and basic:
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
as currently designed can handle the logic necessary to connect a
&lt;em&gt;single Wishbone&lt;/em&gt; master to all of the slaves within a design.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This approach is light on logic, as desired.  The &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;necessary interconnect
logic is cheap and easy to
build&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. ZipCPU and AutoFPGA bus structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/zipbus.svg&quot; alt=&quot;Four bus masters, three bus arbiters&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, this logic
represents a bit of a &lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;speed
bump&lt;/a&gt;.  Internally, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has two memory ports, one for instructions and one for data, and after
generating them I &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbdblpriarb.v&quot;&gt;arbitrate them together&lt;/a&gt; into a single bus interface.  While
this slows down the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;,
I’ve accepted the consequences of this to date because it helps simplify the
rest of the design.  Sadly, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
gets slowed down again when its bus control signals have to be arbitrated
against the DMA peripheral, and then again when they are arbitrated against
the debugging bus.&lt;/p&gt;

    &lt;p&gt;All of this costs time and capability.  Indeed, in order to meet timing each
of the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/wbarbiter.v&quot;&gt;bus
arbiters&lt;/a&gt;
has required &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/busdelay.v&quot;&gt;delaying bus accesses by a
cycle&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’ve dreamed of rewriting the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
so that it has two independent bus ports, removing the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to the main design, and then allowing all four bus masters
(&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;CPU instructions&lt;/a&gt;,
CPU data,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
and &lt;a href=&quot;/zipcpu/2017/05/20/which-came-first.html&quot;&gt;debugging interface&lt;/a&gt;)
to interact with the bus at the same time through a
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can’t handle this (yet).  We’ll discuss this more in a moment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. A better bus design, this time using a crossbar interconnect&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/crossbarbus.svg&quot; alt=&quot;All bus masters are now equals entering  the bus, all delays are internal to the crossbar&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This also has consequences for anyone who would like to use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  For
example, I’d like it to be able to handle interconnecting
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
and even &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone classic&lt;/a&gt; signals.
However, as built today,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can only ever create the logic for
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone pipeline&lt;/a&gt;
signaling.&lt;/p&gt;

    &lt;p&gt;To solve this, I’ve recently created a series of
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar&lt;/a&gt; bus
arbiters–&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axixbar.v&quot;&gt;AXI&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;AXI-lite&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbxbar.v&quot;&gt;Wishbone (pipeline)&lt;/a&gt;,
with the goal and intent that
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
should just be able to reference such an arbiter and not need
to know much more about the bus.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… and now I want to add a &lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;new bus
master&lt;/a&gt;, a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;stream&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
bus master.&lt;/p&gt;

&lt;p&gt;It’s not quite that simple either.  A second SONAR project I’m working on will
require a transmit controller that will want to read instructions from the bus.
Indeed, this is why I like and use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  It
allows me to easily and rapidly reconfigure a master base design, &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;such as this
one&lt;/a&gt; for the &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video
board&lt;/a&gt;,
from one configuration and application to another.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Two different AutoFPGA Configurations, built from the same base design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/dualconfig.svg&quot; alt=&quot;Two design shown, one with recording components and one with transmitter components&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While the new SONAR transmit controller component is not a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;, I found the idea
of re-using &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;my instruction fetch
code&lt;/a&gt; just too tempting.
Indeed, should the &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord be
willing&lt;/a&gt;, I’m hoping to discuss
how to build something like this in my (to be written) &lt;a href=&quot;/blog/2019/08/16/intermediate.html&quot;&gt;intermediate
tutorial&lt;/a&gt;, with a music
box as an application, but we’ll have to come back to that on another day.&lt;/p&gt;

&lt;p&gt;What I’d like to do today is to use the same &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;basic FPGA
design&lt;/a&gt; for both applications, as shown
in Fig. 4 above: the stream to memory controller, as well as the scripted
SONAR transmit controller.  Ideally, I’d just make a small change or two
and the design would suddenly go from working on one project to working
on a second project.&lt;/p&gt;

&lt;p&gt;Again, that’s the purpose of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
in the first place.&lt;/p&gt;

&lt;p&gt;Sadly, this leaves me with a choice: I can either upgrade my &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect
logic&lt;/a&gt; generator
within &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to handle multiple bus masters, or I can slow the bus down (again) by
manually adding in one more arbiter to transform the problem back to a
known solution–the single bus master.&lt;/p&gt;

&lt;p&gt;This time (yes, there were others), I chose to update
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;updates-in-progress&quot;&gt;Updates in Progress&lt;/h2&gt;

&lt;p&gt;The updates to
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
are still a work in progress, or I’d share them on
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;github&lt;/a&gt;.  (No one really wants to try
to build code that will just
&lt;a href=&quot;https://en.wikipedia.org/wiki/Segmentation_fault&quot;&gt;segfault&lt;/a&gt;, and that’s
where I spent most of my day yesterday.)  Here’s some of what’s coming, though:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First and foremost, my immediate goal is to create multiple bus master
support, through a
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar interconnect&lt;/a&gt;,
so that adding (or removing) a
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus master&lt;/a&gt;
is as easy as adjusting the line in the Makefile identifying
which masters are to be included in the design.&lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. A Crossbar can support multiple masters&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/multimaster.svg&quot; alt=&quot;Block logic for 3 master connected to a crossbar driving 6 slaves&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the advantages of using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
over a proprietary solution like
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
or &lt;a href=&quot;https://www.intel.com/content/www/us/en/programmable/products/design-software/fpga-design/quartus-prime/features/qts-platform-designer.html&quot;&gt;Quartus&lt;/a&gt;
is that all of the project files are user-supplied text files, and so they
can easily be examined and fixed (if necessary).  Even better, you’ll never
need to “rebuild” your project from the ground up after updating your vendor
tool set, although you might need to make some adjustments when updating
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
I’ll discuss why below.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;crossbar
interconnect&lt;/a&gt;
logic is not currently a part of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
This creates both opportunities and problems.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;The opportunity:&lt;/em&gt; You can easily replace
&lt;a href=&quot;/blog/2019/07/17/crossbar.html&quot;&gt;my arbiter logic&lt;/a&gt;
with yours by just matching the interface and then swapping the
arbiter logic.&lt;/p&gt;

    &lt;p&gt;The problem comes from licensing.  While
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is licensed under &lt;a href=&quot;https://www.gnu.org/licenses/gpl.html&quot;&gt;GPL&lt;/a&gt;, it asserts
no license over the code it creates.  I treat it sort of like a
&lt;a href=&quot;https://www.gnu.org/software/gcc&quot;&gt;GCC&lt;/a&gt;: the code
&lt;a href=&quot;https://www.gnu.org/software/gcc&quot;&gt;GCC&lt;/a&gt;
produces remains under the license it started with.  I’ve done this to try
to make &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
usable by all in any context.&lt;/p&gt;

    &lt;p&gt;If I want to keep
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
usable in this new context, I may need to release any bus-logic sub-cores
under a very permissive license.  Given the amount of time that went into
creating them, I am reluctant to do so, but needs may require this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned above, this new
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
upgrade has multiple bus protocol
support.  This currently includes
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;
support as well as
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
support.  Even better, the
&lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;AXI-lite&lt;/a&gt;
will be high speed straight from the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilxbar.v&quot;&gt;arbiter&lt;/a&gt;
arbiter–rather than &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;crippled like Xilinx’s
support&lt;/a&gt; was.&lt;/p&gt;

    &lt;p&gt;My eventual goal will be to automatically insert crossbars and bus protocol
(and clock) bridges as needed by the design.  While other tools already exist
to do this, not all of them are open–making it difficult to use the &lt;a href=&quot;https://www.youtube.com/watch?v=en8JMz7v3LU&quot;&gt;fastest
simulator on the market&lt;/a&gt;.  My
current goal is just to be able to handle different bus protocols–bus
bridges and clock crossings can be added manually for the time being.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also been burned by the previous
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
approach to integrating bus components into a design.  Specifically, in
order to integrate a bus component before,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
would create wires based upon the bus name (not type):
&lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt; and so on.  To connect a slave, you’d need to
create a &lt;code class=&quot;highlighter-rouge&quot;&gt;@MAIN.INSERT&lt;/code&gt; tag to outline code that would be simply inserted
into the main project design.  This code would then pass &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt; directly to the peripheral design, and the design would return
something like &lt;code class=&quot;highlighter-rouge&quot;&gt;flash_ack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flash_stall&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;flash_data&lt;/code&gt; (assuming it
was a &lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;flash controller&lt;/a&gt;.
Further, rather than passing &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt; to the slave, the design would &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;decode
addresses&lt;/a&gt;
to determine which slave was being addressed, and so you’d then pass
&lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb &amp;amp; flash_sel&lt;/code&gt;.  That is, you’d pass the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
strobe (i.e.  transaction request) ANDed with the slave selection drawn
from the bus address.&lt;/p&gt;

    &lt;p&gt;While I like this design approach in general, since it allows you to connect
to the bus any way you want, there’s been more than one time I’ve 
connected a &lt;a href=&quot;/zipcpu/2018/01/22/formal-progress.html&quot;&gt;formally
verified&lt;/a&gt;
core to the bus and gotten this logic wrong.&lt;/p&gt;

    &lt;p&gt;As an example, I once got careless and just passed &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt; directly to
the core rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb &amp;amp; slave_sel&lt;/code&gt;.  The result wasn’t pretty,
but caused multiple returns from the bus (I wasn’t filtering returns based
upon the active slave) and so &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;crashed Intel’s AXI interface (it had gone
through an AXI to Avalon bridge …)&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Worse, when you try to integrate with something like
&lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt;,
you end up needing to mention and connect &lt;em&gt;every single I/O wire&lt;/em&gt; just to
get it right.&lt;/p&gt;

    &lt;p&gt;The easy answer would be to define a tag in
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.PORTLIST&lt;/code&gt;, which would contain a string containing
all the logic (i.e. a list of I/O ports) that can be used to connect your
slave to the bus.  A similar tag, &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.ANSIPORTLIST&lt;/code&gt;, would reference
a string containing all the logic necessary to connect a peripheral to a
bus using ANSI notation.  Similar tags, &lt;code class=&quot;highlighter-rouge&quot;&gt;@MASTER.PORTLIST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@MASTER.ANSIPORTLIST&lt;/code&gt;, would define this
logic for bus masters.  (There are already other &lt;code class=&quot;highlighter-rouge&quot;&gt;@*PORTLIST&lt;/code&gt; tags used
to define external I/O connections, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MASTER&lt;/code&gt; prefix would
designate these port lists specific to the bus at hand.)&lt;/p&gt;

    &lt;p&gt;Creating these strings will simplify my design efforts, and help to
standardize things as well.&lt;/p&gt;

    &lt;p&gt;One unintended consequence of this adjusting a core from one interface
type to another would only require adjusting the &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.BUS.TYPE&lt;/code&gt;
tag–of course, you’ll still need to adjust the core.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Peripheral classes&lt;/p&gt;

    &lt;p&gt;To keep the logic light, I’ve defined two subsets of the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
protocol, subsets I call &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;.  I created them when I
noticed that I had a lot of peripherals with nearly the same logic, and
it just made sense to aggregate the control logic together across peripherals.&lt;/p&gt;

    &lt;p&gt;Neither of these two sub-classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;, are allowed to
stall the bus, neither are they allowed to return
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals create their acknowledgments on the same clock cycle
they are accessed, and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripherals create their acknowledgments
one cycle later.&lt;/p&gt;

    &lt;p&gt;– A &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripheral is one that contains a single register only,
   and it’s useful for your basic control register.&lt;/p&gt;

    &lt;p&gt;– A &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripheral is one that contains multiple registers.  It uses
   one clock in a case statement to select among multiple values to return.&lt;/p&gt;

    &lt;p&gt;I’ve found these bus classes to be quite common across many design elements.
Because their logic is simple, I’ve had no problem creating designs with
30+ peripherals and then adding or removing those peripherals via
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
as projects have required.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Special slave classes: SINGLE and DOUBLE&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/sdiobus.svg&quot; alt=&quot;SINGLE slaves and DOUBLE slaves each form a class of I/O where the control logic is shared between them&quot; width=&quot;560&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s the good news: When I started creating the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; support, I
realized that I needed to continue to support these two subclasses.  The
need for them wasn’t specific to
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt; peripherals.
Therefore, the
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; support
will support these two subclasses.  To give you an idea how these might
work, here are the assumptions required for these simplified peripherals.&lt;/p&gt;

    &lt;p&gt;– &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; requires that &lt;code class=&quot;highlighter-rouge&quot;&gt;C_S_AXI_ADDR_WIDTH == 0&lt;/code&gt;, or a slave having one
   address only.  That allows the address lines to be dropped.  The
   &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; class will allow a peripheral to support multiple addresses, and
   so different address widths as well.&lt;/p&gt;

    &lt;p&gt;– Write interface&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;The slave must guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;AWREADY = WREADY = 1&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;This will allow the interconnect to ignore these inputs.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The slave must also guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID == $past(AWVALID)&lt;/code&gt; for
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals, and that &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID == $past(AWVALID,2)&lt;/code&gt; for
&lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripherals.&lt;/p&gt;

        &lt;p&gt;This will allow the interconnect to automatically generate a common
&lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt; for all of the peripherals in the set without needing the
logic to check every peripheral for this condition individually.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The controller (i.e interconnect) will guarantee that
&lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID == WVALID&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;This means that you can connect &lt;code class=&quot;highlighter-rouge&quot;&gt;AWVALID&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;WVALID&lt;/code&gt; when connecting
your core, and also that you don’t need to handle synchronizing these
two channels together within your core.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The controller will also guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;BREADY == 1&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;That is also required for the interconnect to ignore &lt;code class=&quot;highlighter-rouge&quot;&gt;BVALID&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;– Read interface&lt;/p&gt;

    &lt;p&gt;These rules pretty much follow the write interface above.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;The slave must guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;ARREADY == 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;The slave must also guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID == $past(ARVALID)&lt;/code&gt; for
&lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt; peripherals, or equivalently that &lt;code class=&quot;highlighter-rouge&quot;&gt;RVALID == $past(ARVALID,2)&lt;/code&gt;
for &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt; peripherals.&lt;/li&gt;
      &lt;li&gt;The controller will guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;RREADY == 1&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Together, these assumptions will greatly simplify creating
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; slaves.
The control logic to support this is pretty easy to build and verify
as well, so it’s likely I’ll do something similar when I get to building
the full &lt;a href=&quot;/blog/2019/05/29/demoaxi.html&quot;&gt;AXI&lt;/a&gt; support.&lt;/p&gt;

    &lt;p&gt;I’m sure we’ll discuss more about this on the blog as time goes along.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these are wonderful, great, and (insert your favorite superlative
here) ideas.&lt;/p&gt;

&lt;p&gt;There’s one problem I discovered when integrating these changes into my design:
I had used the knowledge of how the interconnect worked when building some of
my cores.  This is now causing these otherwise “working” cores to break.&lt;/p&gt;

&lt;h2 id=&quot;technology-debt-the-bill-comes-due&quot;&gt;Technology Debt: The bill comes due&lt;/h2&gt;

&lt;p&gt;Wikipedia (today) defines &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_debt&quot;&gt;technology
debt&lt;/a&gt; as,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Technical debt is a concept in software development that reflects
the implied cost of additional rework caused by choosing an easy or
limited solution now instead of using a better approach that would take
longer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two of my cores that are now suffering from this debt are my RMII/RGMII
network cores, and my wonderful new &lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;“Universal” QSPI flash
controller&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 7. Abusing the bus protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/autofpga/qspiports.svg&quot; alt=&quot;Shared signals: CYC, WE, ADDR, bus separate STB signals.  Bus returns share ACK, STALL, and DATA signals.  The result is not protocol compliant.&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Both of these cores have both a memory interface and a control interface,
as shown in Fig. 7 on the left.  For the network core, the memory interface is
to either the to-be-transmitted or the already-received packet memory
contained within the core.  For the
&lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;flash controller&lt;/a&gt;,
the interface is between the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt; and the control register.&lt;/p&gt;

&lt;p&gt;In both cases, I abused the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; protocol knowing how the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
would handle things.&lt;/p&gt;

&lt;p&gt;You can see how this affects the port list for the
flash controller
below,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;qflexpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rather than defining two (properly separate) interfaces, I just created a
single interface with two strobe signals: &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; for reading from memory,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt; for reading from the control port.  Results were returned
through a common return port of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack, o_wb_stall,&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If first hit a problem with this interface when I tried to handle
acknowledgments.  Since the simple
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
I was using just OR’d all of the acknowledgment signals together in order to
generate an ACK signal to return to the
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus master&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;there was never any problem with OR’ing two acknowledgment signals together
within the slave.  Indeed, it spared bus logic in the return.  Similarly, since
the &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
selected the data to be returned based upon which slave set its
acknowledgment signal,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flash_memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// No line to accept flash_config_data
&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;4&#39;b1???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mb&quot;&gt;4&#39;b01??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;a slave interface that hadn’t been referenced could validly set it’s
acknowledgment signal and then return data via the other slave interface port.&lt;/p&gt;

&lt;p&gt;Both of these are an abuse of
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
protocol.&lt;/p&gt;

&lt;p&gt;As you might expect, I then ran into problems when I wanted to update my
interconnect to drop the &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;poorly designed return
logic&lt;/a&gt;, since I
wanted to now create an index register for a multiplexer that would identify
which core should receive the returned data.
(If that’s confusing, I explain
the concept &lt;a href=&quot;/zipcpu/2019/03/28/return-decoding.html&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;wb_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW_BITS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This port will never return valid data, since there was no defined
// flash configuration port defining a flash_config_data value
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_config_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the selected channel stopped returning the correct value under
this new logic implementation, I then started to learn the error of my ways.&lt;/p&gt;

&lt;p&gt;Note the key word “started”.  Rather than fixing the problem properly by
creating two separate bus interfaces, I cheated.  I returned the same data
on both channels.  This would work because the returned acknowledgment was
still the OR of all the acknowledgments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_config_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_memory_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the bill is coming due again, since in order to support multiple masters
it is now possible that two masters will each try to access the two peripheral
interfaces, both at the same time, and so combining values in the return port
is no longer possible under any stretch.&lt;/p&gt;

&lt;p&gt;That means I’ll need to change the &lt;a href=&quot;/2019/03/27/qflexpress.html&quot;&gt;“Universal” QSPI flash
controller&lt;/a&gt; port list to be
something closer to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;qflexpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_cfg_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_cfg_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_cfg_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_cfg_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_qspi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_qspi_dat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_qspi_dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;like it probably should’ve been in the beginning.&lt;/p&gt;

&lt;p&gt;There’s another problem that I’m likely to struggle from as well: all of the
bus wire names are changing.  Creating a bus structure where every wire is
prefixed by &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_&lt;/code&gt;, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_cyc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_stb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wb_we&lt;/code&gt;, etc., is great when only
one master will ever control this bus.  Creating multi-master support is going
to require changing all of these wire names so that each peripheral can be
interacted with separately.  This will result in an annoying
incompatibility between
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
versions.  While I think the benefit outweighs the problems, it will take
some time to upgrade all of my separate projects to get things to work again
with the new version.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;My conclusion from this whole affair is that I’m learning some hard lessons
about design.  In particular, be careful not to use the knowledge of how the
other end of an interface is working to violate the rules of that interface.
Sure, the result might work for your first project, but by doing so you are
incurring a debt–one that will need to be paid eventually when you use the
core later in a different environment.&lt;/p&gt;

&lt;p&gt;Some time ago, I remember consulting with a particular technology company
about this issue.  They shared with me their own struggles, sounding very
similar to this one, where they had all kinds of cores written in house but
each of which had abused the bus protocol in some fashion or other.
The result was that drawing a core out from their library to use in a new
project incurred an update cost any time the new environment was different.
Worse, because of the tyranny of the urgent, the didn’t fix the issue properly.
Instead, they had chosen the quick and easy solution of modifying the library
core to fit the new need.  As a result, their core IP library was filled with
many similar cores–but all having subtly different (abused) interfaces.&lt;/p&gt;

&lt;p&gt;It’s fun for me to consult and discuss the “way out” of a problem like that.
I’m sure you, like me, enjoy telling other people how to live their lives.
It becomes quite a different matter when you find yourself stuck in the same
mire.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behold, thou … makest the boast of God, And knowest his will, and
approvest the things that are more excellent, being instructed out of
the law; And art confident that thou thyself art a guide of the blind,
a light of them which are in darkness, An instructor of the foolish, a
teacher of babes, which hast the form of knowledge and of the truth in
the law.  &lt;strong&gt;Thou therefore which teachest another, teachest thou not
thyself?&lt;/strong&gt; thou that preachest a man should not steal, dost thou steal?
(From &lt;a href=&quot;https://www.blueletterbible.org/kjv/rom/2/17-21&quot;&gt;Romans 2:17-21&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ouch.  That hurts.  So true though.&lt;/p&gt;

&lt;p&gt;So I’m going to try to start paying off this debt today, together with whatever
interest may have accrued.  I’d still like to come back later,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord willing&lt;/a&gt;,
and discuss that stream to Wishbone converter–but that’ll have to wait for
another day.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;The rich ruleth over the poor, and the borrower is servant to the lender. (Prov 22:7)&lt;/em&gt;</description>
        <pubDate>Thu, 22 Aug 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/08/22/tech-debt.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/08/22/tech-debt.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
  </channel>
</rss>
