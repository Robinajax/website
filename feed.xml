<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 12 Mar 2019 15:44:15 -0400</pubDate>
    <lastBuildDate>Tue, 12 Mar 2019 15:44:15 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Introducing the ArrowZip ZipCPU design, featuring the Max-1000</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The Max 1000&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/max1k-picture.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, I
&lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;wrote about the Max-1000 board&lt;/a&gt;
sold by &lt;a href=&quot;https://shop.trenz-electronic.de&quot;&gt;Trenz&lt;/a&gt; and distributed
in the US by &lt;a href=&quot;https://www.arrow.com&quot;&gt;Arrow&lt;/a&gt;.  In
&lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;that post&lt;/a&gt;, I discussed
some of the problems associated with getting a design running on the
board, but also discussed its utility.&lt;/p&gt;

&lt;p&gt;Indeed, &lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;for $30, the Max-1000
board&lt;/a&gt; is a nice entry board
for beginners — once you get past the difficulty associated with building
and loading a design onto the board, and once you get past the difficulty of
getting an &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;
to work on the board.&lt;/p&gt;

&lt;p&gt;For all of these reasons and more, I thought it might be a fun board to build
a demonstration design with.  Better yet, as of last week, &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the
design&lt;/a&gt; appears to be working!  Yes,
working:
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash controller&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM controller&lt;/a&gt;,
and indeed everything but the
&lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;accelerometer&lt;/a&gt;.
(That’s still on my TODO list.)&lt;/p&gt;

&lt;p&gt;Shall we take a walk through the various parts of &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the
repository&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;lets-play&quot;&gt;Let’s Play!&lt;/h2&gt;

&lt;p&gt;Let’s start out with a quick list of things you can do (currently) with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; as found in &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the ArrowZip
repository&lt;/a&gt; of mine.&lt;/p&gt;

&lt;p&gt;First, there’s the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;.
We’ve &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;met this program
before&lt;/a&gt;.
It’s somewhat of a relic of time past when I used it to verify that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; worked at all.  Now, most
of the CPU testing is done via
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formal methods&lt;/a&gt;, but
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;this test&lt;/a&gt;
remains.  It’s usually the first program I will place onto a new
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
design.  As such, it runs from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
only.  To run this &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;from
simulation&lt;/a&gt;,
build the design (i.e. run &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;
in the root directory) and then go into the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sim/verilated&quot;&gt;sim/verilated&lt;/a&gt;
directory, and run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;main_tb ../../sw/board/cputest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will take a moment to run, and a bit longer to handle the multiplication
test, but pretty soon you’ll see the “All tests passed.  Halting CPU.” line.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;center&quot;&gt;&lt;caption&gt;Fig 2. The Basic ZipCPU Self-Test Output&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/arrowzip-cputest.png&quot;&gt;&lt;img src=&quot;/img/arrowzip-cputest.png&quot; alt=&quot;&quot; width=&quot;540&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you want to capture a trace of the entire run, just add “-d” to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;main_tb&lt;/code&gt; command line and run,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;main_tb -d ../../sw/board/cputest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;trace.vcd&lt;/code&gt; file in your current directory that you can
view using &lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;.  Be prepared for it
to take a while, and to use more than 25GB of your hard drive.&lt;/p&gt;

&lt;p&gt;On the other hand, if you want to load and test the design on
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;the FPGA board&lt;/a&gt;
itself, you’ll need to first build and load the design &lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;as discussed
earlier&lt;/a&gt;,
and then run
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;netuart&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;bridge the serial port to a pair of network
ports&lt;/a&gt;.  If we
assume the serial port connected to this device is at &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/ttyUSB0&lt;/code&gt;, then you
would run
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;netuart&lt;/a&gt;
from the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;sw/host
directory&lt;/a&gt; as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;netuart /dev/ttyUSB0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;this
program&lt;/a&gt;
is running, you will be able to &lt;a href=&quot;/blog/2017/06/26/dbgbus-verilator.html&quot;&gt;access the design through
the debugging bus&lt;/a&gt;
on &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;TCP port &lt;code class=&quot;highlighter-rouge&quot;&gt;6955&lt;/code&gt; and the serial port on TCP
port &lt;code class=&quot;highlighter-rouge&quot;&gt;6956&lt;/code&gt;&lt;/a&gt;.
Hence, to interact with the design, you’ll want to telnet to port 6956.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;telnet localhost 6956&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now load the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;
into the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and start it,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./zipload -r ../board/cputest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;
finishes almost instantaneously now–once it finishes getting loaded onto
the board.&lt;/p&gt;

&lt;p&gt;This is interesting, but what else can we do?&lt;/p&gt;

&lt;p&gt;We can test our &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM
memory&lt;/a&gt;
using a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/memtest.c&quot;&gt;memory test
program&lt;/a&gt;
created just for that purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./zipload -r ../board/memtest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/memtest.c&quot;&gt;This program&lt;/a&gt;
is a bit more confusing than the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU
test&lt;/a&gt;,
since it doesn’t use the serial port
interface.  It works by writing to memory and then reading back from memory
as part of one of four tests.  After each test, the LEDs are adjusted, and
after the last test the fourth LED is toggled and the test is restarted.  If
at any time the value read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
doesn’t match the pseudorandom data that was written to it, all LEDs will be set
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt; will halt.
I would then bring up the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in the (very basic)
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
to see what happened, although by now it should “just work” in case you wish
to try it.&lt;/p&gt;

&lt;p&gt;The third piece of &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; software is
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/hello.c&quot;&gt;This program&lt;/a&gt;
runs from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
As before, the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipload.cpp&quot;&gt;zipload&lt;/a&gt; program can be used to load this program into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./zipload -r ../board/hello&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will take some time to program this design into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  To understand this
extended time, remember that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;
works by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First searching for any sectors (64kB each) that need to be erased (i.e. bits
that need to be flipped from zero to one), and then&lt;/li&gt;
  &lt;li&gt;Erasing those sectors, and so turning all the bits to ones.&lt;/li&gt;
  &lt;li&gt;Once the erase is complete, the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;
  will re-read from the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
  device to make certain that the erase has been successful.&lt;/li&gt;
  &lt;li&gt;If the erase was successful, the
  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;
  will proceed page by page, i.e. 256 bytes at a time) through the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
  If any bit needs to be “programmed”, that is if it needs to be flipped from
  a one to a zero, then the whole 256-byte page will be programmed and then&lt;/li&gt;
  &lt;li&gt;Read back again to verify the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
  design load.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a bit of a challenge on the low-logic serial port interface I call the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;Hexbus&lt;/a&gt;.  Each byte
needs to be read either once or twice to check the erase,
and then read twice and written once for the program section.  While the reads
are done 32-bits at a time, transmitted using more than 80 bit intervals, the
writes are done 8-bits at a time and transmitted using more than 80 bit
intervals per byte.  This is horribly inefficient, and I’m already considering
ways to optimize this in the future.&lt;/p&gt;

&lt;p&gt;Once the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; program,
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;,”
is written to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;the design&lt;/a&gt; will
start running, and will write out,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, World!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to the serial port and thus to the TCP/IP port 6956.&lt;/p&gt;

&lt;p&gt;These are the three current &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
examples I’ve written to date for this design.&lt;/p&gt;

&lt;p&gt;There’s a lot more that can be done with this design that I haven’t (yet) done
with it.  For example, the
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;MAX-1000 board&lt;/a&gt;
has a &lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;3-axis nano accelerometer&lt;/a&gt; on board.  I’ve thought about using
&lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;this accelerometer&lt;/a&gt;
to create a level sensor.  I’ve also thought about using this design as an
unlicensed
&lt;a href=&quot;https://github.com/ZipCPU/wbfmtx&quot;&gt;FM transmitter&lt;/a&gt;.  Last time I did that,
I used a &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA-LX25 board&lt;/a&gt; to do it,
and struggled with maintaining a non-standard configuration of my project.&lt;/p&gt;

&lt;p&gt;Perhaps I should just teach the design to play &lt;a href=&quot;https://github.com/ZipCPU/tttt&quot;&gt;4x4x4
Tic-Tac-Toe&lt;/a&gt; as we did with
the &lt;a href=&quot;/blog/2019/01/12/demoaxilite.html&quot;&gt;ZBasic (simulation only)
design&lt;/a&gt; before it?&lt;/p&gt;

&lt;p&gt;The possibilities are endless!&lt;/p&gt;

&lt;h2 id=&quot;command-line-access&quot;&gt;Command line access&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;The design&lt;/a&gt; and the components within it
can also be accessed externally via &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;C++
calls&lt;/a&gt;.  It’s been
a while since &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;I
discussed&lt;/a&gt;
the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/devbus.h&quot;&gt;DEVBUS
interface&lt;/a&gt;
that I use, but since that time &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/devbus.h&quot;&gt;the
interface&lt;/a&gt; has
hardly changed.  My design still supports reading from and writing
to the memory and peripheral address space within the design from external
C++ host programs.&lt;/p&gt;

&lt;p&gt;For example, there’s a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/dumpflash.cpp&quot;&gt;dumpflash&lt;/a&gt;
program in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;sw/host&lt;/a&gt;
directory.  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/dumpflash.cpp&quot;&gt;This
program&lt;/a&gt;
reads and dumps the state of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
to a file on your host system.  It is centered around a single line calling the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/devbus.h&quot;&gt;DEVBUS
interface&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define	DUMPMEM		FLASHBASE
#define	DUMPWORDS	(FLASHLEN&amp;gt;&amp;gt;2)
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
// ...
//
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// One single call to the DEVBUS interface to read from the
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// flash in the design
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMPMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;byteswapbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, we could split our massively long 8MB data read into multiple
reads, and read (and dump) one portion of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
at a time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Alternatively
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMPMEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01ffc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01ffc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;~&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1ffc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;The design&lt;/a&gt;
also supports a command line interface using the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/wbregs.cpp&quot;&gt;wbregs command&lt;/a&gt; we
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;spoke of before&lt;/a&gt;.
Basically, “wbregs address” will read from the given address
and return the result to the command line.  “wbregs address data” will similarly
write the value “data” to the given “address”.  What might you do with this?&lt;/p&gt;

&lt;p&gt;The first thing I did with this was to try to debug my brand new &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;This
controller&lt;/a&gt; is part of my new
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;“Universal flash controller”
project&lt;/a&gt;, and now marks the second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip that works with this
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;new controller design&lt;/a&gt;.
You can see the string of test commands I sent to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashid.sh&quot;&gt;flashid.sh&lt;/a&gt;
script.  Only once I got the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
to the point where I could successfully read the
manufacturer’s ID from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
did I then move towards replacing this script with a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashid.cpp&quot;&gt;C++ program to do the
same thing–only faster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could also have some fun and play with our &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch
peripheral&lt;/a&gt;.
Writing a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the LSB starts the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;,
writing &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to the LSB stops it, and
writing bit 1 (i.e. a two) will clear the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch 1    &lt;span class=&quot;c&quot;&gt;# Start the stopwatch peripheral&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt; 00000001
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 2 &lt;span class=&quot;c&quot;&gt;# Wait two seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# Read from the stopwatch&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 80000202
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 6 &lt;span class=&quot;c&quot;&gt;# Wait six more seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# Read from the stopwatch again&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 80000806
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 2 &lt;span class=&quot;c&quot;&gt;# Wait another two seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch 0  &lt;span class=&quot;c&quot;&gt;# Stop the stopwatch&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# Read, now that it has stopped&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 00001009
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch 2  &lt;span class=&quot;c&quot;&gt;# Clear the stop watch&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt; 00000002
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs stopwatch    &lt;span class=&quot;c&quot;&gt;# and read it one final time&lt;/span&gt;
00800048 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;STOPWATCH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 00000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Binary-coded_decimal&quot;&gt;Binary-Coded Decimal (BCD)&lt;/a&gt;
based
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;.
The numbers given are in the form of HHMMSSmm,
or hours, minutes, and seconds, followed by tens of milliseconds.&lt;/p&gt;

&lt;p&gt;We could also set the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtctimer.v&quot;&gt;timer&lt;/a&gt; associated with the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer 0x00130  &lt;span class=&quot;c&quot;&gt;# Set the timer to count-down a minute and a half&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt; 00000130
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer          &lt;span class=&quot;c&quot;&gt;# Immediately read how far its counted&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...0] 01000130
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 75                &lt;span class=&quot;c&quot;&gt;# Wait 75 seconds&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer          &lt;span class=&quot;c&quot;&gt;# ... and read again&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 01000015
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sleep 15                &lt;span class=&quot;c&quot;&gt;# Wait 15 seconds for it to finish&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./wbregs timer          &lt;span class=&quot;c&quot;&gt;# Now read, and notice the alarm bit is set&lt;/span&gt;
00800044 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   TIMER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 02000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For now, let’s back up and discuss a bit more about the composition of the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip repository&lt;/a&gt;
and the files within it, especially since this repository mirrors so many of
my other &lt;a href=&quot;/projects.html&quot;&gt;project&lt;/a&gt;
repositories–should you be interested in wandering around and exploring.&lt;/p&gt;

&lt;h2 id=&quot;autofpga-scripts&quot;&gt;AutoFPGA Scripts&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;The ArrowZip repository&lt;/a&gt;
is one of now several demonstration
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
repositories [&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;1&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;2&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;3&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;4&lt;/a&gt;]
[&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;5&lt;/a&gt;].  You can find the basic
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration scripts in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data&quot;&gt;auto-data/&lt;/a&gt;
directory.  As you may recall from my &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;introduction to AutoFPGA
article&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
connects independent components together into a design.  The goal is to compose
a design from components that can be added or removed from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line,
with the details of how to connect a component found in the various
configuration files.  Don’t want a component?  Remove it from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line!  Want to add one in?  Add a configuration file, and add it to the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line.&lt;/p&gt;

&lt;p&gt;Indeed, if you look at the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/Makefile&quot;&gt;Makefile&lt;/a&gt;
found within the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data&quot;&gt;configuration
directory&lt;/a&gt;,
you’ll find a series of components used by the design.&lt;/p&gt;

&lt;p&gt;I recently rebuilt how these files were placed onto the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line.  Here’s the current list of components in a
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;Makefile&lt;/a&gt; format.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; global.txt dlyarbiter.txt
&lt;span class=&quot;nv&quot;&gt;AUX&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; version.txt buserr.txt pic.txt pwrcount.txt
&lt;span class=&quot;nv&quot;&gt;IO&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; spio.txt
&lt;span class=&quot;nv&quot;&gt;RTC&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; rtclight.txt
&lt;span class=&quot;nv&quot;&gt;DBGBUS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; hbconsole.txt
&lt;span class=&quot;nv&quot;&gt;MEMORY&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; bkram.txt flexpress.txt sdram.txt
&lt;span class=&quot;nv&quot;&gt;CPU&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; zipbones.txt
&lt;span class=&quot;nv&quot;&gt;SCOPES&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# flashscope.txt # sdramscope.txt # cpuscope.txt&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LDSCRIPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; mem_all.txt mem_flash_bkram.txt mem_bkram_only.txt mem_sdram_bkram.txt
&lt;span class=&quot;nv&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; clock.txt &lt;span class=&quot;nv&quot;&gt;$(BASE)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(AUX)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(IO)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTC)&lt;/span&gt;			&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(DBGBUS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(MEMORY)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(SCOPES)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(LDSCRIPT)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;AUTOFPGA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; autofpga
&lt;span class=&quot;nl&quot;&gt;$(AUTOFPGA)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(AUTOFPGA) $(DATA)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(AUTOFPGA)&lt;/span&gt; -d -o . &lt;span class=&quot;nv&quot;&gt;$(DATA)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The components of this design are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/global.txt&quot;&gt;global.txt&lt;/a&gt;:
A set of global variable declarations, applying to the whole design&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/dlyarbiter.txt&quot;&gt;dlyarbiter.txt&lt;/a&gt;:
For timing reasons, both the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
can’t drive the bus at the same time without a
&lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;single clock delay&lt;/a&gt;.  This component
includes a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/wbpriarbiter.v&quot;&gt;bus arbitration core&lt;/a&gt;
to determine which of the two
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;
gets access to the bus, followed by a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/busdelay.v&quot;&gt;bus delay&lt;/a&gt;
to keep the &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;clock speed up&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’ll admit, this is a bit clumsy, so I’m now investigating whether or not I
can use &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to connect multiple masters up to a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Crossbar_switch&quot;&gt;crossbar&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’ll keep you posted on that project as it moves along.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/version.txt&quot;&gt;version.txt&lt;/a&gt;:
Ever had a time when you became quite frustrated that a design
wasn’t working, only to discover you never loaded the changes onto the
device?  The
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/version.txt&quot;&gt;version.txt&lt;/a&gt;
configuration places two single-address register components on the bus,
allowing me to determine when the design was built, as well as whether
the design is running in simulation or on the hardware.&lt;/p&gt;

    &lt;p&gt;Yes, I did get burned multiple times when testing this design.  I was first
burned by not reloading the “program device” dialogue box in
&lt;a href=&quot;https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/overview.html&quot;&gt;Quartus&lt;/a&gt;, and
so it would continue reloading the prior design.  I was burned again later
after making changes and then loading a design onto the board, only to see
no changes to the design.  In that case, I was &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;interacting
with&lt;/a&gt; the
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulated&lt;/a&gt;
design, which hadn’t gotten updated.
Ever since, this read-only register has been modified with a flag telling
me that it is &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;running in
simulation&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/buserr.txt&quot;&gt;buserr.txt&lt;/a&gt;:
One of the frustrating parts of debugging is trying to figure
out what caused the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
This component simply records the address
of the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
allowing me to read it out later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pic.txt&quot;&gt;pic.txt&lt;/a&gt;:
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;The MAX-1000&lt;/a&gt;
is a rather small
FPGA.  Normally, I would place a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/icontrol.v&quot;&gt;programmable interrupt controller
(PIC)&lt;/a&gt;
right next to the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and ship it
with what I call the
“&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZipSystem&lt;/a&gt;”,
containing a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/icontrol.v&quot;&gt;PIC&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timers&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/zipcounter.v&quot;&gt;performance
counters&lt;/a&gt;
and more.  However, if space is tight, I have to rapidly
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;shed weight&lt;/a&gt;.  After
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;sheding the weight&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
system that remains has only one
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/icontrol.v&quot;&gt;PIC&lt;/a&gt;,
and that is external to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/pwrcount.txt&quot;&gt;pwrcount.txt&lt;/a&gt;:
Sometimes you need to sequence things on startup.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;pwrcount&lt;/code&gt; component is nothing more than a 32-bit counter that keeps track
of the number of clocks since startup.  Once the counter overflows, the MSB
is held high and the rest of the counter just keeps going.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/spio.txt&quot;&gt;spio.txt&lt;/a&gt;:
Here’s where I will place any &lt;a href=&quot;/blog/2017/08/09/series-debouncing.html&quot;&gt;button&lt;/a&gt;, switch, and/or LED
processing.  In the case of the
&lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;MAX-1000&lt;/a&gt;,
there are two buttons, 8-LEDs, and no switches.  Of those two buttons, only
one is user accessible, and so that’s the one coming into &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/spio.v&quot;&gt;this design
component&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/rtclight.txt&quot;&gt;rtclight.txt&lt;/a&gt;:
Offers me access to a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Binary-coded_decimal&quot;&gt;BCD&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtctimer.v&quot;&gt;count-down timer&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcstopwatch.v&quot;&gt;stopwatch&lt;/a&gt;,
(with 10ms precision), and
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/rtcalarm.v&quot;&gt;alarm&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The basic &lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time core&lt;/a&gt; has been
around for quite some time, however I only recently took the time to split
it into its various component structures and to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
that all of them work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/hbconsole.txt&quot;&gt;hbconsole.txt&lt;/a&gt;:
This component adds the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
to the design, offering me access
into the design to read from or write to any component.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/hbconsole.txt&quot;&gt;This configuration file&lt;/a&gt;
also defines a console port that will be multiplexed with the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
over the serial port.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/bkram.txt&quot;&gt;bkram.txt&lt;/a&gt;:
The &lt;a href=&quot;https://www.arrow.com/en/campaigns/max1000&quot;&gt;MAX-1000&lt;/a&gt;
has three types of memory available to it.  The
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM memory&lt;/a&gt;,
defined by &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/bkram.txt&quot;&gt;this configuration
file&lt;/a&gt;,
is of course the fastest but most limited
memory.  As currently configured, the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip design&lt;/a&gt;
supports only 32768 bytes of memory, although
adjustments to this &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/bkram.txt&quot;&gt;configuration
file&lt;/a&gt;
can easily adjust that number down.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/memdev.v&quot;&gt;This block RAM component&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;has been formally
verified&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/flexpress.txt&quot;&gt;flexpress.txt&lt;/a&gt;:
This defines the interface to the (new)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;controller&lt;/a&gt;.
This also marks only the second time I’ve used my brand-new
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;“Universal” flash controller&lt;/a&gt;
in a project.&lt;/p&gt;

    &lt;p&gt;Yes, this
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;controller&lt;/a&gt;
has been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord wills&lt;/a&gt;, I’m hoping
to post about this “Universal”
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash&quot;&gt;flash controller&lt;/a&gt;
design in an upcoming article.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/sdram.txt&quot;&gt;sdram.txt&lt;/a&gt;:
This configures the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM controller&lt;/a&gt;.  When attached, the design
has access to the &lt;a href=&quot;https://www.winbond.com/resource-files/w9864g6jt_a03.pdf&quot;&gt;8MB SDRAM
chip&lt;/a&gt; on the
board.  Yes, the design works.&lt;/p&gt;

    &lt;p&gt;Even better, this
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM controller&lt;/a&gt;
has also been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;zipbones.txt&lt;/a&gt;:
Remember how I said this wasn’t the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZipSystem&lt;/a&gt;
distribution?
Without all of the peripherals kept next to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, I call the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
wrapper and interface to the rest of the design the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt;
since it is a bare-bones implementation of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  This &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipbones.txt&quot;&gt;configuration file
component&lt;/a&gt;,
therefore connects the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; with
the rest of the design.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has been &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally
verified&lt;/a&gt;,
although I have not done the same with either the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;ZipBones&lt;/a&gt; or the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;
wrappers yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Scopes&lt;/a&gt;:
As I was working with this design to get it to work, I used one
of three
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;Wishbone Scope&lt;/a&gt;
configurations.  &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/flashscope.txt&quot;&gt;One was for the flash&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/sdramscope.txt&quot;&gt;one for the SDRAM&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipscope.txt&quot;&gt;another for the CPU&lt;/a&gt;.
Since these aren’t permanent additions to the
design, they are currently commented out in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/Makefile&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Well, not quite.  I haven’t yet needed to use the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipscope.txt&quot;&gt;scope for the
ZipCPU&lt;/a&gt;
within &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;this project&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;Linker scripts&lt;/a&gt;:
There are four linker-script configuration files for the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;ArrowZip
repository&lt;/a&gt;, based upon four separate
memory configurations.  These were
designed to support first the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_bkram.txt&quot;&gt;minimal required memory necessary to test that
the CPU would work, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_bkram.txt&lt;/code&gt;&lt;/a&gt;, the next step up &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_flash_bkram.txt&quot;&gt;adding flash,
&lt;code class=&quot;highlighter-rouge&quot;&gt;mem_flash_bkram.txt&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_sdram_bkram.txt&quot;&gt;SDRAM and block RAM only, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_sdram_bkram.txt&lt;/code&gt;&lt;/a&gt;, and
finally the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/mem_all.txt&quot;&gt;entire memory architecture on the board, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_all.txt&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given all of &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data&quot;&gt;these various configuration
files&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
creates the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/topleve.v&quot;&gt;toplevel.v file&lt;/a&gt;
of &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt;.  This contains both
simulatable and non-simulatable components, and sometimes even vendor
specific components.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/main.v&quot;&gt;The main.v file&lt;/a&gt;
of the design is the top level
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulatable&lt;/a&gt;
component.  This is the file upon which
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;verilator&lt;/a&gt;
is run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/main_tb.cpp&quot;&gt;sim/main_tb.cpp&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/testb.h&quot;&gt;sim/testb.h&lt;/a&gt;
are the two main simulation files which, when coupled with simulators for the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/dbluartsim.cpp&quot;&gt;serial port&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/flashsim.cpp&quot;&gt;flash&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/sdramsim.cpp&quot;&gt;SDRAM&lt;/a&gt;
form the basis for &lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulating the design in a cycle accurate
fashion&lt;/a&gt; using
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;verilator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/board.h&quot;&gt;sw/zlib/board.h&lt;/a&gt;
describes the various peripherals within
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt; in a C-language friendly
way for any &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; programs to use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/regdefs.h&quot;&gt;sw/host/regdefs.h&lt;/a&gt;
maps C-language identifiers to their corresponding addresses within
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt;.  A similar
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/regdefs.cpp&quot;&gt;sw/host/regdefs.cpp&lt;/a&gt;
file matches command-line identifiers to these C-language identifiers, so
you can read from or write to
peripheral memory on a command line using
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/wbregs.cpp&quot;&gt;wbregs&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removing any one of the component files will update the files above, and leave
behind a working design without that component.  Likewise, adding a component
will do the same.&lt;/p&gt;

&lt;p&gt;At least, that’s how simple it is &lt;em&gt;supposed&lt;/em&gt; to be.  Unfortunately, I’ve
discovered several important parts of a design that don’t fit into this
methodology very well.  The biggest/worst culprit is clock generation.  If
your design needs multiple clocks, you’ll usually want to generate them from
a common/single PLL (if possible).  However, PLLs can be limited, and this
form of design generation would place all of the PLLs in separate component
files.  To handle this, there is a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/clock.txt&quot;&gt;clock.txt&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration file to generate all of the clocks used within the design.
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/&quot;&gt;This design&lt;/a&gt;
uses only two clocks–one for the system, and one for the external
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
memory interface.&lt;/p&gt;

&lt;p&gt;The second problem the approach currently has is that it doesn’t handle
multiple
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;s
very well (yet).  As such, the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/dlyarbiter.txt&quot;&gt;dlyarbiter.txt&lt;/a&gt;
handles merging the two
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus masters&lt;/a&gt;s,
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; and the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
into a single
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;bus master&lt;/a&gt;.
Were &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/dlyarbiter.txt&quot;&gt;this component&lt;/a&gt;
removed, &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;the design&lt;/a&gt;
would be broken and unable to operate.&lt;/p&gt;

&lt;p&gt;Still, I like how easy it is to reconfigure things using
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verilog-components&quot;&gt;Verilog Components&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. ArrowZips HDL directory structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/arrowzip-rtld.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;All of the various HDL (i.e. Verilog) components within the design can be
found in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl&quot;&gt;rtl&lt;/a&gt;
directory.&lt;/p&gt;

&lt;p&gt;Building the components of this system took a couple passes, though.  So the
first (very basic) designs can be found in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/simple&quot;&gt;rtl/simple&lt;/a&gt;
directory.  The demonstration design there includes not only an HDL based
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;,”
but also a very basic &lt;a href=&quot;/blog/2017/05/20/knight-rider.html&quot;&gt;Knight-Rider LED display
demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I needed those to prove that the vendor toolchain worked, and that I could
successfully load a design onto the board in the first place.&lt;/p&gt;

&lt;p&gt;Ever afterwards, I was able to start in on the main design, kept in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip&quot;&gt;rtl/arrowzip&lt;/a&gt;
directory, with common files to both kept in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/common&quot;&gt;rtl/common&lt;/a&gt;
directory.  Within the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip&quot;&gt;arrowzip&lt;/a&gt;
directory are several other subproject
directories, to include ones for both the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/cpu&quot;&gt;ZipCPU&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/hexbus&quot;&gt;debugging
bus&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/rtl/arrowzip/cpu&quot;&gt;CPU&lt;/a&gt;
code is itself copied almost verbatim from the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/rtl/cpu&quot;&gt;ZBasic repository&lt;/a&gt;,
which itself is copied (minus the formal properties) from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;Yes, if you scan my &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;github repositories&lt;/a&gt;,
you’ll find a lot of duplication and reuse.&lt;/p&gt;

&lt;p&gt;For example, when moving &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
from one design to the next, I usually only adjust the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/cpudefs.v&quot;&gt;CPU configuration
file&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;CPU
parameters&lt;/a&gt;,
with the latter being set by the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipbones.v&quot;&gt;zipbones.txt&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration file.&lt;/p&gt;

&lt;h2 id=&quot;simulation-files&quot;&gt;Simulation Files&lt;/h2&gt;

&lt;p&gt;I also maintain a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/sim/verilated/&quot;&gt;sim/verilated&lt;/a&gt;
directory, where the basic simulation sources for the design are stored.  The
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/automaster_tb.cpp&quot;&gt;main simulation file,
automaster_tb.cpp&lt;/a&gt;,
is used to start and drive the simulation.  Unlike some of my &lt;a href=&quot;/blog/2018/11/29/llvga.html&quot;&gt;graphical
simulation work&lt;/a&gt;, this
design has only the straight text interface for the time being.&lt;/p&gt;

&lt;p&gt;We’ve discussed many of the useful parts of building a simulation before, and
in this directory you’ll find me using all of them.  For example, there’s a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/sim/verilated/dbluartsim.cpp&quot;&gt;bridge from the simulated serial port to a TCP/IP port&lt;/a&gt;.  It’s not all that
different from when I &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;originally presented the
concept&lt;/a&gt;.
The biggest difference is that I’ve realized many individuals only ever
have the one serial port in the design.  Therefore, I’ve split the serial
port into two streams based upon the high order bit.  If the high bit is set,
the serial port connects to the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
otherwise the console port.  The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/sim/verilated/dbluartsim.cpp&quot;&gt;serial port
bridge&lt;/a&gt;
splits these two streams apart, connecting the design’s one serial port to the
two TCP/IP ports–the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
and the console port.&lt;/p&gt;

&lt;p&gt;This allows me to both load the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
as well as to interact with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
over the same serial port, although the end-result is that the two ports will
only even supports 7-bit serial instead of the full 256-possible characters
typically associated with 8-bit serial.&lt;/p&gt;

&lt;p&gt;There are also other various simulation components within this directory.  For
example, there’s a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/flashsim.cpp&quot;&gt;flash simulator tuned for Dual SPI
operation&lt;/a&gt;,
as well as an &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sim/verilated/sdramsim.cpp&quot;&gt;SDRAM
simulator&lt;/a&gt;.
This way, the &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;host software can interact with the simulator and not
realize that anything is
different&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another very useful component, used both by the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipload.cpp&quot;&gt;zipload&lt;/a&gt;
program in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host/&quot;&gt;sw/host&lt;/a&gt;
directory as well as the program loader in the simulation directory, is the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sim/verilated/zipelf.cpp&quot;&gt;zipelf&lt;/a&gt; module.
This software module a wrapper on top of
libelf,
allowing me to easily decompose a design into the various components that
need to be loaded in order to run, where each component consists of a (word
aligned) &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sim/verilated/zipelf.h&quot;&gt;starting address, a length, and a data
section&lt;/a&gt;.
Other parts of the &lt;a href=&quot;https://www.skyfree.org/linux/references/ELF_Format.pdf&quot;&gt;ELF data
structure&lt;/a&gt; have been
stripped out for simplicity, since they are not needed by the loader.&lt;/p&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;One of my earlier designs&lt;/a&gt; had only
the one software subdirectory.  This directory contained only host support
programs for the repository.  Imagine my surprise when a confused user tried
to load a host support program, compiled for either the PC or the ARM, onto
the board in order to have the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; run it!&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. ArrowZips Software directory structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/arrowzip-swd.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Since that time, I’ve typically split my software directories into two or three
subdirectories.  One contains &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;host software&lt;/a&gt; for running on your PC connected to the FPGA board,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/board&quot;&gt;another&lt;/a&gt;
contains &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; programs
for running within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; contained within the design,
and a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/zlib&quot;&gt;third&lt;/a&gt;
contains the missing portions of the
&lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;C-library&lt;/a&gt;–more on that in a moment.&lt;/p&gt;

&lt;h4 id=&quot;host-programs&quot;&gt;Host Programs&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/host&quot;&gt;sw/host&lt;/a&gt;
directory contains a variety of programs that you can run from your
host machine, typically a PC.  These programs communicate with the either
the design or the simulation over the same
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging port&lt;/a&gt;.  This
can be very helpful in case I need to debug some interaction or other, since &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;I
can then run the same (broken) program in the simulation as I can on the design
itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ve discussed many of the basic host programs already.  They are, again:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipload.cpp&quot;&gt;zipload&lt;/a&gt;:  Used to load a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; design into
memory, whether into
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
or &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Passing ‘-r’ to this program will also start the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; once it is loaded.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipdbg.cpp&quot;&gt;zipdbg&lt;/a&gt;:
This is the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s debugger.
We’ve &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;discussed how this works before&lt;/a&gt;.
It basically halts the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;, and &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;then tells you
what registers had what values within
them&lt;/a&gt;.
It’s not a &lt;a href=&quot;https://en.wikipedia.org/wiki/Debugger&quot;&gt;source level debugger&lt;/a&gt;,
so if you want to use it make sure you have a copy of your program’s
(dis)assembly on hand.&lt;/p&gt;

    &lt;p&gt;Yes, one of my “TODO” items is to get &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;gdb&lt;/a&gt;
up and running on the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
Instead, I’ve been spending so much time just enjoying
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
and proving new design components that I haven’t gotten that far along yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/wbregs.cpp&quot;&gt;wbregs&lt;/a&gt;:
This is my basic access program for command line interaction with a
(perhaps not yet working) design.  I use it to command actions by hand, to
see what will happen and then to read results back.  It’s really useful for
ad-hoc interaction, but after using this program for a while  I will typically
write any real interaction I want into C++.  My fingers can only type so fast,
and I often like to go faster.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: A Network Based Controller&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/netdbg.svg&quot; alt=&quot;A Network Based FPGA Controller&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/netuart.cpp&quot;&gt;netuart&lt;/a&gt;:
We discussed this above.  It connects to the serial port of the
design, and &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;bridges between that serial port and a pair of TCP/IP
ports&lt;/a&gt;,
as shown in Fig 5 above.  As mentioned above, the serial port carries
both &lt;a href=&quot;/blog/2017/06/26/dbgbus-verilator.html&quot;&gt;debugging bus
commands&lt;/a&gt; as well
as user serial port commands, and a separate TCP/IP port accesses each
of these.  The two streams are also 7-bit only, since they use the eighth
bit to determine which stream is in use.&lt;/p&gt;

    &lt;p&gt;Key to this design is the baud rate, set in the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration file(s), captured by the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/regdefs.h&quot;&gt;regdefs.h&lt;/a&gt;
file, which is then used to set the baud rate on this interface.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipstate.cpp&quot;&gt;zipstate&lt;/a&gt;:
Sometimes, it can be hard to know if the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt; is doing something, or if the
program it was running has somehow crashed and halted it.  The
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/zipstate.cpp&quot;&gt;zipstate&lt;/a&gt; 
program reads the &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;CPU status
register&lt;/a&gt;
and tries to decode it into a (semi-legible) line of text.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/dumpflash.cpp&quot;&gt;dumpflash&lt;/a&gt;:
Reads and then dumps the flash of the device onto a file.  When
using the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;Hexbus&lt;/a&gt;
debugging bus implementation, dumping the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
can take a &lt;em&gt;LONG&lt;/em&gt; time.  Sadly, there’s not enough room on the design
for my &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;higher performance bus
bridge&lt;/a&gt;, so
another solution may be needed.  Perhaps capturing the first 64kB or so from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and then loading a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
program to compress the rest?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashid.cpp&quot;&gt;flashid&lt;/a&gt;:
Used to read the manufacturer’s ID off of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory chip&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This was a very important part of the debugging the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash
controller&lt;/a&gt;,
because the read-manufacturer-ID command produces a
&lt;em&gt;known answer&lt;/em&gt;.  Therefore I could use it to tell if my
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;controller&lt;/a&gt;
reads were working at all, or if for example they were off by a bit or two.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the directory contains a series of C++ files supporting the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;.
A &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashscope.cpp&quot;&gt;flashscope&lt;/a&gt;
file for debugging the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/dualflexpress.v&quot;&gt;flash controller&lt;/a&gt;’s interaction with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/sdramscope.cpp&quot;&gt;sdramscope&lt;/a&gt;
for debugging the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;.
While there is a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/auto-data/zipscope.txt&quot;&gt;configuration file&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data/&quot;&gt;auto-data configuration
directory&lt;/a&gt;
to create a third scope for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;,
I haven’t (yet) needed it within this design.  So far, everything has worked.&lt;/p&gt;

&lt;p&gt;Yeah, right, I know.  Okay, so everything &lt;em&gt;almost&lt;/em&gt; worked.  I found a subtle
bug in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
associated with what was essentially an endless logic loop, when using the
early branching functionality with &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
configured into its non-pipelined mode.  That I found and fixed first with
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;
and then I left a formal property in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to keep it from happening again later.&lt;/p&gt;

&lt;h4 id=&quot;zlib-the-c-library-stubs&quot;&gt;ZLib: The C-Library Stubs&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; currently supports the
&lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;newlib C-library&lt;/a&gt;.  This is a highly
configurable version of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;
that is very appropriate for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;
experimentation, new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Embedded_system&quot;&gt;embedded CPU&lt;/a&gt;s,
etc.  &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;The library&lt;/a&gt;, however,
depends upon several functionality stubs that need to be provided by the
implementation.&lt;/p&gt;

&lt;p&gt;Two particular stubs are critical to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; operation: the serial port
input stub, &lt;code class=&quot;highlighter-rouge&quot;&gt;_inbyte&lt;/code&gt;, and the output stub, &lt;code class=&quot;highlighter-rouge&quot;&gt;_outbyte&lt;/code&gt;.  These are really all
the I/O the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; currently supports
using the &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;newlib C-library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other projects, such as
&lt;a href=&quot;https://openrisc.io/&quot;&gt;OpenRISC&lt;/a&gt;, use symbols that can be resolved at link
time for their I/O accesses.  To tell if the peripheral is present within the
design, these projects will check if the symbol’s value is NULL before
attempting to access the peripheral.  The really neat part of this approach is
that the same &lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
dependent stubs may be used across many projects.&lt;/p&gt;

&lt;p&gt;In my infinite wisdom, or perhaps more likely my utter folly, I chose a
different path for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
I didn’t really want my peripheral drivers to need to check if the peripheral
was available in run time.  That seemed to make more sense to me to be done
at build time, rather than run time.  As a result, when you build the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s version of the
&lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;newlib C-library&lt;/a&gt;,
you won’t get a complete library.  You still need to build the component stubs.&lt;/p&gt;

&lt;p&gt;Most of these stubs are copied from one implementation to the next, with only
little adjustment beyond the address of the peripheral used.  You can find
them in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/syscalls.c&quot;&gt;syscalls&lt;/a&gt;
file.&lt;/p&gt;

&lt;p&gt;There’s also a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt; in
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/zlib/&quot;&gt;this same directory&lt;/a&gt;
as well.  &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;We’ve discussed
it before&lt;/a&gt;.
It basically copies program instructions and data from any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
to the volatile RAM memory within the design.&lt;/p&gt;

&lt;p&gt;I’ll admit, I was somewhat surprised when I built my first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Booting&quot;&gt;bootloader&lt;/a&gt;.  A
&lt;a href=&quot;https://en.wikipedia.org/wiki/Booting&quot;&gt;bootloader&lt;/a&gt;
had been a big black box to me, and I didn’t understand how it worked.  Once
I had the opportunity to build my own, I was surprised at how simple
it was.  Indeed, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Booting&quot;&gt;bootloader&lt;/a&gt;
is &lt;em&gt;nothing more than a glorified memory copy!&lt;/em&gt;  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
performs up to three memory copies.  First, it copies any high-speed
instructions, those that need to be loaded into block RAM instead of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
into the block RAM.  It then copies the rest of the design into
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
Finally, the third copy is really more of a
&lt;a href=&quot;http://www.cplusplus.com/reference/cstring/memset/&quot;&gt;memset&lt;/a&gt;:
it zeros all of the &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;global data structures that don’t have
initial values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of these choices have consequences, however, which we’ll start
discussing in the next section.&lt;/p&gt;

&lt;h4 id=&quot;the-swboard-directory-where-zipcpu-programs-reside&quot;&gt;The sw/board directory, where ZipCPU programs reside&lt;/h4&gt;

&lt;p&gt;We’ve finally gotten to &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/board/&quot;&gt;the directory
containing the&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s demonstration
programs, the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/cputest.c&quot;&gt;CPU test&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/memtest.c&quot;&gt;memory test&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/hello.c&quot;&gt;hello world&lt;/a&gt;.
While I’ve  tried to keep
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/sw/board/&quot;&gt;this directory&lt;/a&gt;
simple, there are quite the few surprises in it for
someone who might not be familiar with programming a device that may, or
may not, have the memory on it that you expect.&lt;/p&gt;

&lt;p&gt;Most of this complexity is hidden in the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/Makefile&quot;&gt;Makefile&lt;/a&gt;.
It’s set up so that you can just type&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to build the demonstration programs.&lt;/p&gt;

&lt;p&gt;That’s great, until you want to build your own.  So let’s dig through this
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/Makefile&quot;&gt;Makefile&lt;/a&gt;
a bit to understand how it works.&lt;/p&gt;

&lt;p&gt;Years ago, I worked on a program where I needed to build the same design
for multiple architectures.  In that environment, I learned to create an
object directory for partial compilation products (i.e. &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object
files&lt;/a&gt;).
Since then, I’ve gone through several rounds of learning to put &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object
files&lt;/a&gt;
into such a directory.&lt;/p&gt;

&lt;p&gt;The first step is to define a directory to place
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object files&lt;/a&gt;, with the
computer architecture name as part of the directory name.  I like to usee
&lt;code class=&quot;highlighter-rouge&quot;&gt;obj-zip&lt;/code&gt; for 
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; object files, &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-arm&lt;/code&gt;
for ARM files, and &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-pc&lt;/code&gt; for your basic x86-64 files.
Once defined, we’ll then build an object file directory with that name.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;OBJDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; obj-zip
&lt;span class=&quot;c&quot;&gt;#
# .... sometime later
#
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;define&lt;/span&gt;	&lt;span class=&quot;err&quot;&gt;mk-objdir&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;@bash&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(OBJDIR)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(OBJDIR)/;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;endef&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This make function silently calls a command-line bash script, to check if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;$(OBJDIR)&lt;/code&gt; directory exists.  If not, it creates the directory silently.&lt;/p&gt;

&lt;p&gt;The second step is to set up a series of C-flags that can be used to compile
any program.  I like to use &lt;code class=&quot;highlighter-rouge&quot;&gt;-O3&lt;/code&gt;, mostly because I end up staring at
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;assembly&lt;/a&gt; often and
I get really annoyed by less-than optimal code.  I also want to reference
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s generated
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/zlib/board.h&quot;&gt;board.h&lt;/a&gt;
file, containing all of the decisions going into creating the design–what
peripherals are located at what memory addresses, etc., as well as the
design.h file which can be used to adjust which peripherals are
actually built or not.  This means I need to capture these two directories
in my &lt;code class=&quot;highlighter-rouge&quot;&gt;$(CFLAGS)&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -O3 -I ../zlib -I../../rtl/arrowzip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this definition, I can build
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object files&lt;/a&gt;
from C code.  The following generic rule, will make a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object file&lt;/a&gt;
from any corresponding .c file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(OBJDIR)/%.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%.c&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mk-objdir&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CC)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CFLAGS)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -c $&amp;lt; -o $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yea, I know it looks cryptic.  Yes, I will confess I visit the &lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html&quot;&gt;Makefile
documentation page&lt;/a&gt;
more often than not to look up the strange symbols such
as &lt;code class=&quot;highlighter-rouge&quot;&gt;$&amp;lt;&lt;/code&gt; (the first dependency, i.e. the .c file) and &lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt; (the file
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; is
trying to build, i.e. the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object file&lt;/a&gt;).
Notice, though, that it automatically checks if the &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-zip&lt;/code&gt; directory
exists prior to trying to build anything, and that it creates the
directory if not.&lt;/p&gt;

&lt;p&gt;You might also notice a similar script, right next to that primary build
script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(OBJDIR)/%.s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%.c&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mk-objdir&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CC)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CFLAGS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(DUMPRTL)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -S $&amp;lt; -o $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’ve ever needed to debug &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt;, you’ll recognize
the&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DUMPRTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -fdump-rtl-all&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; option.  It tells &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; to
dump the output from all of its intermediate stage, one stage
at a time, from the time it starts getting specific with
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;assembly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What this rule really does is to compile my .c file into
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU assembly&lt;/a&gt;
and then stop–that’s the meaning of the &lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt; flag.  This can be really
useful when you need to debug the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt;,
or alternatively when your program isn’t doing what you think it should and
you don’t know why.&lt;/p&gt;

&lt;p&gt;Of course, all of these bugs have finally been worked out of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, right?  Right??&lt;/p&gt;

&lt;p&gt;Ahem, moving right along, let’s move to the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  If you
are familiar with basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt;
options, you’ll be expecting to build a program with a line similar to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc program.c -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This really only works when you already know where in your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_space&quot;&gt;address space&lt;/a&gt; you want
to place all the parts of your design.  This is accomplished by way of a
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  For
almost all of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
I’ve ever worked with before FPGA-based
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft microprocessors&lt;/a&gt;,
this script was built into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt;
and I never saw it until I tried to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;compiler&lt;/a&gt; back end for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
However, for an
FPGA
based
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;CPU&lt;/a&gt;
where the memory size might change from one build to the next, this is not
nearly as reasonable.&lt;/p&gt;

&lt;p&gt;For this reason, the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/tree/master/auto-data/&quot;&gt;AutoFPGA
scripts&lt;/a&gt;
have directed
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to build several
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
for us.  There’s a
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/bkram.ld&quot;&gt;block RAM only script,
&lt;code class=&quot;highlighter-rouge&quot;&gt;bkram.ld&lt;/code&gt;&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/flash.ld&quot;&gt;block RAM with flash script, &lt;code class=&quot;highlighter-rouge&quot;&gt;flash.ld&lt;/code&gt;&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/sdram.ld&quot;&gt;block RAM with SDRAM script, &lt;code class=&quot;highlighter-rouge&quot;&gt;sdram.ld&lt;/code&gt;&lt;/a&gt;,
and a &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/board.ld&quot;&gt;basic use them all script,
&lt;code class=&quot;highlighter-rouge&quot;&gt;board.ld&lt;/code&gt;&lt;/a&gt;.
To select between these,
&lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; accepts a &lt;code class=&quot;highlighter-rouge&quot;&gt;-T ldscript.ld&lt;/code&gt;
command line option, changing our basic build command to something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld program.c -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, if we’ve already placed our component
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_file&quot;&gt;object file&lt;/a&gt;
into &lt;code class=&quot;highlighter-rouge&quot;&gt;obj-zip&lt;/code&gt;, it might look more like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld obj-zip/program.o -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This only gets us part of the way.  We still need to include the
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;.
Normally, this
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;library&lt;/a&gt;
would be included for you in the default options built
into the compiler.  It would be integrated in such a way that when you type,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld obj-zip/program.o -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you’ll automatically get something closer to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zip-gcc -T board.ld -L ../zlib/ obj-zip/program.o -lc -lgcc -o program&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What are these extra arguments?  We’ve already discussed the &lt;code class=&quot;highlighter-rouge&quot;&gt;-T&lt;/code&gt; argument
to specify a
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;-L ../zlib&lt;/code&gt; argument tells &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; where to look for
any libraries.  &lt;code class=&quot;highlighter-rouge&quot;&gt;-lc&lt;/code&gt; tells &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt; to include the
&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot;&gt;C-library&lt;/a&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;-lgcc&lt;/code&gt; tells it to include the &lt;a href=&quot;https://wiki.osdev.org/Libgcc&quot;&gt;soft-operator library, such as the
soft-floating point support&lt;/a&gt; for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, since in my wonderful wisdom (or folly) I insisted on leaving parts
of the library undefined and board dependent, we’ll need to provide the
remaining command line information.  As a result, here’s the rule to build
“&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;.”&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LFLAGS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; -T &lt;span class=&quot;nv&quot;&gt;$(LDSCRIPT)&lt;/span&gt; -L../zlib
&lt;span class=&quot;nv&quot;&gt;LIBS&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; -lc -lzarrow -lgcc
&lt;span class=&quot;c&quot;&gt;#
# ...
#
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(OBJDIR)/hello.o board.ld $(LIB)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CC)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(CFLAGS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(LFLAGS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(LIBS)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -o $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This captures most of the confusing parts of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; software
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/board/Makefile&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This should also give you the insight you need to build your own
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; programs for the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;ArrowZip project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/&quot;&gt;ArrowZip design&lt;/a&gt;
could really use some better demo’s, it’s complete enough to
work with as is.  That said, I still have two big problems with it.&lt;/p&gt;

&lt;p&gt;First, it looks like I got a bit greedy with the system.  Of the
8,064 logic elements, I’ve used 5,566 or roughly 69% of them.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
reason for being was always to be low logic and out of the way.
Using 69% of the logic resources on a given board is hardly “out of the way.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/cpudefs.v&quot;&gt;Removing the multiply, divide, compressed instruction set support,
dual-instruction prefetch, and early branching
support&lt;/a&gt; from the
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/rtl/arrowzip/cpu/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
brings the total logic usage down to 4,602 logic elements, or about 57% of the
available logic elements.  Removing the &lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time
clock&lt;/a&gt; as well brings the logic
usage down to 4,066 logic elements, or 52% of the device.  The problem with
removing multiplies, divides, and compressed instructions, though, is that
it means the &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;library support&lt;/a&gt;
needs to be rebuilt without these instructions.  While doable, it would mean
I’d need a different main &lt;a href=&quot;https://www.sourceware.org/newlib/&quot;&gt;library&lt;/a&gt;
build for different designs–those with and those without these special
instructions.&lt;/p&gt;

&lt;p&gt;My second criticism of this design as currently implemented is that writing
to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; and verifying
the result is painfully slow.  Looking over the current transaction, it seems
quite wasteful to transfer the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
values back and forth over the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
so many times.  A short &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
helper program, working in conjunction with the &lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;flash
driver&lt;/a&gt;,
should be able to mitigate that problem.&lt;/p&gt;

&lt;p&gt;Finally, I’d still like to implement an interface to the
&lt;a href=&quot;https://www.st.com/resource/en/datasheet/cd00274221.pdf&quot;&gt;accelerometer&lt;/a&gt;.
While this isn’t really that hard to do, I haven’t yet decided on the ideal
interface for doing so.  Therefore, after the upgrades to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/arrowzip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;driver&lt;/a&gt;,
this will probably be my next goal/focus with this device.  Well, that and I’d
still like to build this project using &lt;a href=&quot;https://www.clifford.at/yosys/&quot;&gt;Yosys&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And unto man he said, Behold, the fear of the LORD, that is wisdom; and to depart from evil is understanding. (Job 28:28)&lt;/em&gt;</description>
        <pubDate>Tue, 12 Mar 2019 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/03/12/arrowzip.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/03/12/arrowzip.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Using Sequence Properties to Verify a Serial Port Transmitter</title>
        <description>&lt;p&gt;For those who have been reading &lt;a href=&quot;https://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;,
you’ll know that most of my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
work has involved the immediate assertion subset of the SystemVerilog
Assertion language.  I’d like to take this opportunity to discuss some of my
frustrations using &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;,
and illustrate how I was able to replicate much of the functionality I needed
from &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;
with immediate assertions alone.&lt;/p&gt;

&lt;p&gt;For this discussion, we’ll use the example of a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;serial port
transmitter&lt;/a&gt;
I built long ago.&lt;/p&gt;

&lt;h2 id=&quot;the-first-serial-port-transmitter&quot;&gt;The First Serial Port Transmitter&lt;/h2&gt;

&lt;p&gt;One of my early Verilog projects after starting &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist Technology,
LLC&lt;/a&gt; was to build a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve only learned later, at &lt;a href=&quot;https://orconf.org/2017/&quot;&gt;ORCONF2017&lt;/a&gt; to be exact,
that building a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial
port&lt;/a&gt; is highly controversial.  At issue is, why should anyone rebuild the wheel?  There are so many
&lt;a href=&quot;https://opencores.org/projects&quot;&gt;serial ports available on line, examples to look
at&lt;/a&gt;, etc., that some would argue that it
hardly makes sense to build one more.  The “market” is quite saturated.&lt;/p&gt;

&lt;p&gt;I also discovered, long after implementing my own
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt; “the right way” that there’s
a well established interface between a computer and a serial port based upon
the &lt;a href=&quot;https://en.wikipedia.org/wiki/16551_UART&quot;&gt;16550 serial port&lt;/a&gt;.  Of course,
mine was done “right” from the beginning just because it was mine–we need not
go over all of the flaws with that logic today, but there is something to be
said for having pride in your own workmanship.  On the other hand, I’m sure
we can all be critical of an interface that takes multiple steps to configure,
and that even requires paging in and out bytes of data.  We can also be
highly critical of a &lt;a href=&quot;https://opencores.org/projects/uart16550&quot;&gt;buggy
implementation&lt;/a&gt; that can be caused
to send data that it was never commanded to sent.  (It’s amazing what a little
bit of &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; can
find …)&lt;/p&gt;

&lt;p&gt;Yes, I have enjoyed the reality that my own
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt; can
be completely configured by writing one 32-bit word to the configuration
register, as shown in Fig 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. One 32-bit word can completely configure a UART&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blog/master/doc/spec.pdf&quot;&gt;&lt;img src=&quot;/img/wbuart-setup.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hence, in &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;one 32-bit write&lt;/a&gt; you can configure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rate&lt;/a&gt;, specified as an
integer divider of the clock.  This integer divider is shown in Fig. 1 as
&lt;code class=&quot;highlighter-rouge&quot;&gt;Baud CLKS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Whether or not hardware flow control is to be used, shown in Fig. 1 as
&lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Whether the serial port would transmit 5, 6, 7, or 8 bit characters.  These
are the &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits in Fig. 1.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt;, which can be
either no parity, even or odd parity, or even mark or space fixed parity
values–as specified by bits &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; (use parity), &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; (fixed parity) and
&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; (type of parity).&lt;/li&gt;
  &lt;li&gt;If the stop bit is a single stop bit, or rather two stop bits.  This is
specified by bit &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; in the setup register.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A separate write to the data register could send a &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter#Break_condition&quot;&gt;break
condition&lt;/a&gt;
down the line.&lt;/p&gt;

&lt;p&gt;But why did &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;my serial port&lt;/a&gt; need all this
functionality?  Well, ahm, … it didn’t.  It only needed it because I wanted
to build a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full
featured&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;.
Hence, I implemented &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;every feature that a serial port could or should
have&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why not? Coding is fun, right?&lt;/p&gt;

&lt;p&gt;Sure, but does it work?&lt;/p&gt;

&lt;p&gt;Well, I tested the 8 bit character, with one stop bit and
no &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt; at a
variety of &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rates&lt;/a&gt;.  That worked
quite well.&lt;/p&gt;

&lt;p&gt;… and this is the problem with a lot of both &lt;a href=&quot;https://opencores.org&quot;&gt;open&lt;/a&gt;
and closed source digital design these days.&lt;/p&gt;

&lt;p&gt;It’s one thing to design something that’s easy to do because it’s fun.  It’s
something else entirely to fully verify that all of this (cough unused)
functionality even works.  Indeed, the greater the functionality, the greater
the number of modes something has, the more complex the verification problem
becomes.  How did I know that the design would work if I later asked it to
operate in a mode I had never tested nor verified?  I didn’t.  Worse, when such
a time would come later, I’d likely be &lt;a href=&quot;/zipcpu/2019/02/04/debugging-that-cpu.html&quot;&gt;trying to verify something
else&lt;/a&gt;
and not expecting a bug in a “working”
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
component.&lt;/p&gt;

&lt;p&gt;This is neither &lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot;&gt;black box&lt;/a&gt;
nor &lt;a href=&quot;https://en.wikipedia.org/wiki/White-box_testing&quot;&gt;white box&lt;/a&gt; verification.
It is ticking box verification.&lt;/p&gt;

&lt;p&gt;But the story goes on.&lt;/p&gt;

&lt;h2 id=&quot;the-simplified-serial-port-transmitter&quot;&gt;The Simplified Serial Port Transmitter&lt;/h2&gt;

&lt;p&gt;The first problem I had with my one-size fits all serial port was that it
wouldn’t fit in a &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;small
design&lt;/a&gt;.  It just had &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;way too much
logic&lt;/a&gt;.
So I simplified it.  Since I only ever used one &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud
rate&lt;/a&gt;, I created a parameter to fix the
number of clocks per &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; to a constant
value.  Since I only ever used 8-data bits, 1 stop bit, and no
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;–a protocol sometimes called
&lt;a href=&quot;https://en.wikipedia.org/wiki/8-N-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8N1&lt;/code&gt;&lt;/a&gt;,
I removed all of the other functionality from the core.&lt;/p&gt;

&lt;p&gt;These simplifications lead to my
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;txuartlite&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;rxuartlite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
cores.&lt;/p&gt;

&lt;p&gt;At one time, I was scrounging for logic elements so hard that I even
parameterized the number of bits in the integer clock divider.  Perhaps
24-bits was too many.  Yes, design space has been tight.&lt;/p&gt;

&lt;p&gt;These two cores became a mainstay of many of my designs–especially if I was
going to use a fixed &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rate&lt;/a&gt; with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/8-N-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8N1&lt;/code&gt;&lt;/a&gt;,
protocol.  How often was that?  Essentially all the time.&lt;/p&gt;

&lt;p&gt;But I said this article was about
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;,
so let’s move on to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verifying&lt;/a&gt;
my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;&lt;em&gt;lite&lt;/em&gt; transmitter
core&lt;/a&gt; with
some &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SystemVerilog
sequences&lt;/a&gt;.
Once you see how easy and awesome these 
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
can be, we’ll then transition to looking at the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;fully functional transmitter
implementation&lt;/a&gt;,
and discuss how
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
can be used to verify it.&lt;/p&gt;

&lt;h2 id=&quot;verifying-the-simplified-transmitter&quot;&gt;Verifying the Simplified Transmitter&lt;/h2&gt;

&lt;p&gt;If you want to know how to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
yourself, this probably isn’t the article for you.  Check out my
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;If you want to know how to verify the receiver, then I’ll caution you that the
proof of my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;my lite
receiver&lt;/a&gt;
isn’t trivial.  It’s an &lt;a href=&quot;/formal/2018/05/31/clkswitch.html&quot;&gt;asynchronous
proof&lt;/a&gt; that involves
two separate &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domains&lt;/a&gt;–one
for the receiver and another subtly different clock for the
(assumed) transmitter.  The proof of &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;this
receiver&lt;/a&gt; was
one of the more challenging proofs I have done–so there’s little likelihood
I can fit it into this blog article.  You are more than welcome to check out
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/rxuartlite.v&quot;&gt;the code and formal
properties&lt;/a&gt;
yourself if you would like.&lt;/p&gt;

&lt;p&gt;No, today we’re going to discuss the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
transmitter.  I’m also going to assume you know how to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
transmitter, and so I’m only
going to discuss a couple of details associated with the implementation.&lt;/p&gt;

&lt;p&gt;First, the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;serial port
transmitter&lt;/a&gt;
is built around a state machine.  This state machine has ten separate states:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TXUL_BIT_ZERO&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	TXUL_BIT_ONE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h1&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_TWO	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h2&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_THREE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h3&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_FOUR	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h4&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_FIVE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h5&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_SIX	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h6&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_BIT_SEVEN	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h7&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_STOP	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;h8&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	TXUL_IDLE	4&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;hf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll probably adjust these in due time so that they are defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;localparam&lt;/code&gt;s
instead of macros, but these are the state names today.  Notice how there are
nine transmitting states and an idle state, and that they aren’t all sequential.&lt;/p&gt;

&lt;p&gt;The second thing to note is that my design has a &lt;a href=&quot;/blog/2017/06/02/generating-timing.html&quot;&gt;basic clock
divider&lt;/a&gt;, kept
in two parts.  First, there’s the countdown clock.  The logic below has been
simplified, but you should get the idea.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Start transmitting a new byte
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCKS_PER_BAUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Transmission is finished
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Count down the number of clocks in a baud
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// interval
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Start the next baud interval for the next
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// start, data, or stop bits
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCKS_PER_BAUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, there’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; value.  This is a registered
value designed to be equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;baud_counter == 0&lt;/code&gt;.  As a reminder,
if you ever find yourself drafting code to do something like this, you’d
want to place a reminder in your draft code to,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baud_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;the
design&lt;/a&gt;
has a basic state machine,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// r_busy needs to be set coming into here
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// STATE_IDLE
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Immediately start us off with a start bit
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_BIT_ZERO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// One clock tick in each of these states ...
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`TXUL_STOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start bit, 8-d bits, stop-b
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`TXUL_IDLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;shift register,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and output bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Set the start bit on writes
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Set the data bit.
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;None of this should look strange to you.  If it does, please check out my
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; for a discussion of how to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
and why.&lt;/p&gt;

&lt;p&gt;I’m just presenting this as a quick background, because I’d like to discuss the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
used to verify this core.&lt;/p&gt;

&lt;p&gt;Why
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;?
Because I was looking for a use for them.  Because I wanted to be able to
teach them to others.  Because they are a part of the SystemVerilog standard.
Because … well, I wanted to figure out what they were worth.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. A Basic UART transmission&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/serialtx.png&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic “contract” associated with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
is that upon any request to send a character, provided you aren’t already busy,
that you then send that character as shown in Fig 2 on the right.&lt;/p&gt;

&lt;p&gt;This is fairly easy to express in
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html&quot;&gt;SVA&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOCKS_PER_BAUD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you aren’t familiar with this notation, this says that …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Following any clock where the module is given a write request,
and where the module isn’t busy (&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr &amp;amp;&amp;amp; !o_busy&lt;/code&gt;) …&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The port starts transmitting on the next clock.  That’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;|=&amp;gt;&lt;/code&gt; piece.
If the left side of the &lt;code class=&quot;highlighter-rouge&quot;&gt;|=&amp;gt;&lt;/code&gt; is true (it doesn’t need to be) then whatever
follows &lt;em&gt;must&lt;/em&gt; be the case.  Finally, throughout the whole
duration that the port is transmitting, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; must be true.&lt;/p&gt;

    &lt;p&gt;This &lt;em&gt;transmitting&lt;/em&gt; idea is captured by another
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SEND&lt;/code&gt;.  We’ll get to that next in a moment.  For now, notice that we are
passing two parameters to it.  The first of these is the (fixed) number
of clocks per baud, and the second is the data we wish to send.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the port has finished transmitting a character, the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; line
should be dropped, and the output wire should be high again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What about the &lt;code class=&quot;highlighter-rouge&quot;&gt;fsv_data&lt;/code&gt; value?  Well, it turns out that you can parameterize
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequences&lt;/a&gt;,
and so tailor them to their environment.  The values given
to them, though, are not necessarily constant.  If the design adjusts any
of the values, the properties within the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
adjust as well.&lt;/p&gt;

&lt;p&gt;This was not what I wanted.  I wanted to keep track of the byte value that
was requested.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr &amp;amp;&amp;amp; !o_busy&lt;/code&gt; is true, however, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; can be
changed as early as the next clock cycle.  Therefore, on a write request,
I captured the data for reference within my design later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 3. Serial port sequence assertion structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-seqstructure.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Good!  This makes sense so far, so let’s peel the onion back one step further
and dig into the &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
transmission consists of a start bit, 8-data bits (in this case)
followed by a stop bit, as shown above in Fig. 2 above.  Each of these “bits”
fills a &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval entirely.
Therefore, if we could represent a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval with a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
of its own, such as one I shall call &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;, we can now represent
these ten intervals with a single parameterized
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;hff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’ve never read something like this before, the big thing that you need to
know is that &lt;code class=&quot;highlighter-rouge&quot;&gt;##1&lt;/code&gt; means “on the next clock”.  Hence this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
reads that after the first &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL()&lt;/code&gt;, another one will start
immediately on the next clock, followed by another, and so on.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL()&lt;/code&gt;s themselves are parameterized, much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND()&lt;/code&gt;
sequence.  First, they are parameterized by the number of clocks per baud,
&lt;code class=&quot;highlighter-rouge&quot;&gt;CKS&lt;/code&gt;.  Then by the value that the output bit is supposed to have, &lt;code class=&quot;highlighter-rouge&quot;&gt;DAT&lt;/code&gt;.  This
works its way from bit zero all the way to bit 7.  They are then parameterized
by the value that the shift register is to have, &lt;code class=&quot;highlighter-rouge&quot;&gt;SR&lt;/code&gt;, and finally the value
that the state variable is to have, &lt;code class=&quot;highlighter-rouge&quot;&gt;ST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Putting all of these together, we can define a &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt; sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
comes in two parts.  The first part lasts &lt;code class=&quot;highlighter-rouge&quot;&gt;CKS-1&lt;/code&gt; clock intervals.
That’s what the &lt;code class=&quot;highlighter-rouge&quot;&gt;[*(CKS-1)]&lt;/code&gt; means at the end of the first expression.
The second part follows the &lt;code class=&quot;highlighter-rouge&quot;&gt;##1&lt;/code&gt;, and so comes on the next clock after the
first one.  This one is identical, save that &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; is now true
indicating the end of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval.  Put together, this one
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
will require &lt;code class=&quot;highlighter-rouge&quot;&gt;CKS&lt;/code&gt; clocks to complete.&lt;/p&gt;

&lt;p&gt;You might also notice a subtle bug in this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
property, having to deal with the number of clocks in the stop bit.  I’ve
left it in there in order to keep the logic minimal, but the sharp eye might
catch it.&lt;/p&gt;

&lt;p&gt;Don’t see it?  We’ll come back to it in the next section.&lt;/p&gt;

&lt;p&gt;Now, remember the &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;difficulties with using
induction&lt;/a&gt;?
Because of those, I have constrained &lt;em&gt;all&lt;/em&gt; of my state variables in this
one interval.  Well, all except the &lt;code class=&quot;highlighter-rouge&quot;&gt;baud_counter&lt;/code&gt;.  As long as the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
search depth lasts longer than one &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval, that shouldn’t be a problem.&lt;/p&gt;

&lt;p&gt;At this point in my story, I was rather excited!  So far, this was easy.  I
could &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;my
transmitter&lt;/a&gt;
using
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;,
each
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
used an appropriate abstraction, and so this was quite readable.  Yes, if you
look through
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;my code&lt;/a&gt;,
you’ll find many more assertions within it–probably even more than it requires.&lt;/p&gt;

&lt;p&gt;It was only when I returned on to my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;original, full-featured serial port
design&lt;/a&gt;
that I started having problems with these wonderful SystemVerilog
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verifying-the-full-featured-transmitter&quot;&gt;Verifying the Full-Featured Transmitter&lt;/h2&gt;

&lt;p&gt;My first approach to verifying the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full-featured
transmitter&lt;/a&gt;
was to adjust how the &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
was defined, and then to make
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
using my new and improved &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
for each of the 5, 6, 7, and 8-bit bytes.  Things then got interesting as
I tried to implement each of the different types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;,
but we’ll ignore that for now.  I’m not sure I ever figured out how to do that
using
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
properties.  However, I had bigger problems before I got to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt; bits.
It’s not that my design passed or failed, nor was it that I had an example
of a broken trace.  The problem I was suffering from was much worse.&lt;/p&gt;

&lt;p&gt;But let me slow down, and tell you how I ended up struggling with these
wonderful
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
properties.&lt;/p&gt;

&lt;p&gt;It started out simply enough: the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full featured
transmitter&lt;/a&gt;
allows you to adjust the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud rate&lt;/a&gt;.
That should be straightforward.  The problem was first that there was no way
to specify a &lt;em&gt;variable&lt;/em&gt; number of repeats of a step in a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.
The number of repeats, specified by &lt;code class=&quot;highlighter-rouge&quot;&gt;[*(CKS-1)]&lt;/code&gt; above, only worked because
&lt;code class=&quot;highlighter-rouge&quot;&gt;CKS&lt;/code&gt; was a parameter and thus fixed at synthesis time.  The &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full featured
serial port
transmitter&lt;/a&gt;, 
on the other hand, needed to be able to support a variable number of
clock cycles in each &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval
or it wouldn’t be able to support changing &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud
rates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, I adjusted the &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval sequence to have an undetermined number of clock cycles, and figured
I’d use other properties to force this to work based upon the constraints
found in &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt;.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; became true,
i.e. once the &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
counter reached zero, the solver would exit the sequence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;BAUD_INTERVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CKS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcl_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Four properties could capture each of the 5, 6, 7, or 8-bit transmit sequences&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-multiseq.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I then created various &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND5&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND6&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND7&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;SEND8&lt;/code&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;,
all composed of a variety of &lt;code class=&quot;highlighter-rouge&quot;&gt;BAUD_INTERVAL&lt;/code&gt;s within them:
7 &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
intervals in order to send 5-bit data, 8 for sending 6-bits data, etc.&lt;/p&gt;

&lt;p&gt;At this point, I was feeling good about &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;this
design&lt;/a&gt;.  Yes,
there were more
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
within it than in the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;lite
design&lt;/a&gt;.  Yes, the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
were more verbose.  Still, I was excited: I was finally getting the hang of &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SV
sequences&lt;/a&gt;
and starting to really enjoy using them!&lt;/p&gt;

&lt;p&gt;That’s when &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; failed to elaborate
my design.&lt;/p&gt;

&lt;p&gt;As it turns out, I had by now created so many states that
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
was suffering from a complete combinatorial explosion of states my
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
could be in.  Once &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
hit 2^16 possible states, it gave up with an error message.&lt;/p&gt;

&lt;p&gt;This took me by surprise.  There were only 20 states I counted in an 8-bit byte,
18 states in a 7-bit byte, and so forth.  How did
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; get to over 2^16 states?&lt;/p&gt;

&lt;p&gt;I asked the &lt;a href=&quot;https://symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt; team for some help,
and they created a special option which I could use to raise the limit.
Perhaps this might fit in 2^17 states?&lt;/p&gt;

&lt;p&gt;Nope.&lt;/p&gt;

&lt;p&gt;2^18 states?&lt;/p&gt;

&lt;p&gt;Not even.&lt;/p&gt;

&lt;p&gt;I went as high as somewhere between 2^22 and 2^24 states.  I don’t remember
the exact number anymore.  No matter what number it was,
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; plus my computer clearly couldn’t handle
it.  This left me unsure of how many states would’ve been required to
represent this updated design, since I was never able to expand them all.&lt;/p&gt;

&lt;p&gt;The problem stems from the fact that SystemVerilog requires that
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
be re-entrant.  That is, you can start a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
at any time–even if you are already in the middle of one.  In other
words, even though my design would only ever start on &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wr &amp;amp;&amp;amp; !o_busy&lt;/code&gt;,
and even though &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; would be true for the rest of the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;,
the underlying logic was still trying to account for all of the possibilities
where multiple
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
states might be active at a given time.&lt;/p&gt;

&lt;p&gt;Ouch.  This meant that nothing was working.  How was I ever going to verify
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;this design&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;poor-mans-sequences&quot;&gt;Poor Man’s Sequences&lt;/h2&gt;

&lt;p&gt;Eventually I figured out a solution to the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
problem.  My solution is something I’m going to call a “Poor man’s sequences.”
These sequences are built out of immediate assertions, and they don’t use any of
the SystemVerilog concurrent assertions that the free version of
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
doesn’t support.&lt;/p&gt;

&lt;p&gt;Need to implement an &lt;code class=&quot;highlighter-rouge&quot;&gt;A|=&amp;gt;B&lt;/code&gt; sequence?  This sequence says that if &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is
ever true, then &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; must be true on the next clock.  You may have noticed
that I have been writing,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to describe this case.&lt;/p&gt;

&lt;p&gt;Using concurrent assertions, you might’ve written&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using these “Poor man’s sequences”, you might also write,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See the idea?  Sure, it’s a bit longer and more verbose, but it captures the
idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; must be followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.  Indeed, this was how
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
was implementing my original logic anyway.&lt;/p&gt;

&lt;p&gt;What about a longer sequence?  Suppose I wanted a sequence of ten states,
such as I might use when transmitting an 8-bit byte over the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;.
How might that work?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can now make a set of assertions based upon what bit is a one within
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_sendbyte&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsv_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_uart_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What else can I do with this?  I can assert that only one bit of
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_sendbyte&lt;/code&gt; will ever be true at any time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;onehot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Okay, &lt;code class=&quot;highlighter-rouge&quot;&gt;$onehot()&lt;/code&gt; requires a
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
license.  On the other hand, if I add to each of my assertions which
unique state the design must be in, and if I do it in such a way that no
two assertions could ever be true at the same time, I can then create
something equivalent.&lt;/p&gt;

&lt;p&gt;Alternatively, I suppose I could’ve used a counter to describe each state
within this poor man’s sequence.
I’m not sure I have a good reason for not using a counter, other than
these bit-vector representations still maintained an appearance of supporting
the original SystemVerilog
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;–even
if they weren’t truly concurrent anymore.&lt;/p&gt;

&lt;p&gt;What about the assertions that the design is busy while it is transmitting,
but that it lowers its busy flag once the sequence is complete?
To do this, I need to extend my &lt;code class=&quot;highlighter-rouge&quot;&gt;sendbyte&lt;/code&gt; by one more state–the state in
which the &lt;code class=&quot;highlighter-rouge&quot;&gt;busy&lt;/code&gt; flag is dropped.  This one is a bit unusual.  Unlike the
others which all last a full &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval, this last state only lasts for one clock cycle at the most.
Hence, I can set and clear it as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Only allow sendbyte[10] to be true for one
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// clock cycle--the cycle where o_busy is false
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I can assert my property that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; should be true in the middle of
any character being sent, but false as soon as we are done.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_sendbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll admit that, while this is mighty expressive, the code that results seems
to explode in size.  It’s a shame I wasn’t being paid for the number of lines
of code I was writing.&lt;/p&gt;

&lt;p&gt;There’s also a really subtle bug here that took writing my
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; to discover: if the last stop bit has the same number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; clocks as every other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt; interval, than the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial port&lt;/a&gt;
will use one too many clock ticks per byte, as shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. If busy is true throughout all the baud intervals, a clock is lost at the transition between bytes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-xtrabit.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In order to make sure we can transmit at full speed, we’ll need to make certain
that the next byte can start &lt;em&gt;immediately&lt;/em&gt; at the end of the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval.  This means that on the &lt;em&gt;last clock&lt;/em&gt; of the final stop bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt;
must be low indicating that the core is ready to accept a new character
on last clock of the last character.  Instead, I had built my design so that
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_busy&lt;/code&gt; would stay high throughout the entire duration of the stop bit.&lt;/p&gt;

&lt;p&gt;The correct trace should’ve looked like Fig. 6 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. o_busy now goes low before the end of the stop bit, so the next byte can now start as soon as the last one finishes&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-xtrabit-gone.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is a subtle &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_serial_communication&quot;&gt;serial
port&lt;/a&gt;
bug that I wasn’t expecting in my own code.  Sure, I’d seen it in the code
of others, but in my own?&lt;/p&gt;

&lt;p&gt;Oops.&lt;/p&gt;

&lt;p&gt;But I digress.  Let’s get back to talking about these poor man’s
sequences again.&lt;/p&gt;

&lt;p&gt;It shouldn’t be too hard to imagine that this bit-vector approach could easily
be extended to handle 5, 6, 7 and 8 bit bytes.  Indeed, if you look within &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;my
serial port code&lt;/a&gt;,
you’ll find definitions for several sequences:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_five_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_six_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_seven_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_eight_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can also do one critical thing that the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SV
sequence&lt;/a&gt;,
approach could not do: I can assert that if any sequence is active, then no
other sequences are active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_five_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_six_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_seven_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_eight_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This plus the &lt;code class=&quot;highlighter-rouge&quot;&gt;$onehot()&lt;/code&gt; solution above fixes the explosion of states problem 
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; was struggling with.&lt;/p&gt;

&lt;p&gt;But what about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt; or
the optional second stop bit?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 7. Each byte could end with an optional parity bit, and either one or two stop-bits&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/txuart-stopseq.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Using &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SVA
sequence&lt;/a&gt;,
I had been struggling to figure out how to handle the
optional &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt; or the optional
extra stop bit.  Ideally, I’d want to define a single
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
that would follow any byte of data no matter how long, and that would
include all of my &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity&lt;/a&gt;
and stop bit options.&lt;/p&gt;

&lt;p&gt;This isn’t a problem with these poor man’s sequences, although all of the
options I needed to implement made it somewhat of a challenge.&lt;/p&gt;

&lt;p&gt;To handle all of these stop sequences, I created yet another bit vector.  If
ever we were at the end of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud&lt;/a&gt;
interval (i.e. if ever &lt;code class=&quot;highlighter-rouge&quot;&gt;zero_baud_counter&lt;/code&gt; were true), I could check the ends
of my various bit sequences to know if I should enter this new one.&lt;/p&gt;

&lt;p&gt;So, for the stop sequence, I created a three bit vector.  The first bit would
be true during the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parity_bit&quot;&gt;parity bit&lt;/a&gt;–if
there was one.  The second bit would
be true during the first of two stop bits, and the third bit would be true
for the final stop bit.  This sequence of states then looked something like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This would be equivalent to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//	disable_iff (i_reset || i_break)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_baud_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// We&#39;ll rebuild every bit of this sequence each time through
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// If we are coming from the parity bit ...
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dblstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// If there&#39;s two stop bits, go to bit &#39;1&#39;
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// otherwise go to the last stop bit
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Any time we come from the first of two stop bits,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// immediately go to the second.
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Now let&#39;s check for whether we need to enter the
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// stop bit sequence.  Following the last bit of any
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// of our 5, 6, 7, or 8-bit sequences, we&#39;ll enter this
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sequence of final bits.  This therefore merges these
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// sequences with a single stop sequence.
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_eight_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_seven_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_six_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_five_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_parity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// If we are using parity,
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//   go to the parity state
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dblstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// If we are using two stop bits, go to
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// the first of the two
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// In all other cases, go to the one
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// (and only) stop bit period
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;f_stop_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Asserting the properties of each of the various states is now a little bit
tedious, but it also works–something which it didn’t before.&lt;/p&gt;

&lt;p&gt;As a result, I can now say that I have managed to fully verify both my
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;stripped down serial port transmitter
core&lt;/a&gt;,
as well as the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuart.v&quot;&gt;full featured serial port
transmitter&lt;/a&gt;.
Yes, you heard me right, I verified that the core could handle any division
of the clock greater than two, 5, 6, 7 or
8 data bits, no parity, a fixed mark or space parity bit, odd or even
parity, and one or two stop bits–&lt;em&gt;and all combinations of those options&lt;/em&gt;!
The core can also handle changing &lt;a href=&quot;https://en.wikipedia.org/wiki/Baud&quot;&gt;baud
rates&lt;/a&gt;, something the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;lite core&lt;/a&gt;
could not.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’ve now started using this approach on several of my newer designs.  For
example, did you notice that at the bottom of my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite demonstration
code&lt;/a&gt;
I used a sequence like this to create a cover trace?  Or, if you’ve been
watching my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Quad-SPI flash
development&lt;/a&gt;,
you’ll notice I’ve used these poor man’s sequences for reading from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
continued reading from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
or reading and writing arbitrary bytes to the QSPI interface.&lt;/p&gt;

&lt;p&gt;Yes, I think I still like &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;SystemVerilog’s
sequence&lt;/a&gt;
language better.  It’s &lt;em&gt;very&lt;/em&gt; expressive.  However, there’s just some things
I haven’t figured out how to express within it that this (uglier) approach
using immediate assertions can handle.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Happy is the man that findeth wisdom, and the man that getteth understanding. (Prov 3:13)&lt;/em&gt;</description>
        <pubDate>Thu, 21 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2019/02/21/txuart.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2019/02/21/txuart.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Why does blinky make a CPU appear to be so slow?</title>
        <description>&lt;p&gt;Imagine if you will that you’ve just built a brand new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
How fast do you think your brand-new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
will be able to toggle a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO
pin&lt;/a&gt;?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Comparing several GPIO toggle rates&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/gpio.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The question is a fascinating one, and it applies to more than just home-brew
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft cores&lt;/a&gt;.
Several individuals for example have been surprised that the
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can’t toggle a
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO pin&lt;/a&gt;
very fast.  One individual &lt;a href=&quot;https://forum.digilentinc.com/topic/4930-arty-microblaze-speed-question&quot;&gt;measured his 82MHz
MicroBlaze CPU toggling an IO pin at
37kHz&lt;/a&gt;.
Another looked at his &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/Why-microblaze-loop-speed-is-40-times-slower-than-I-expected/td-p/111342&quot;&gt;80MHz MicroBlaze CPU, and measured his I/O toggle rate
only at 2.5MHz&lt;/a&gt;.
Still others measured a 100MHz
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt; toggling an I/O at 
&lt;a href=&quot;https://forums.xilinx.com/t5/7-Series-FPGAs/SDK-GPIO-implementation/td-p/784626&quot;&gt;1.7MHz&lt;/a&gt;
or &lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/AXI-GPIO-max-rate/td-p/484496&quot;&gt;2.3MHz&lt;/a&gt;.
The problem isn’t unique to
&lt;a href=&quot;https://en.wikipedia.org/wiki/MicroBlaze&quot;&gt;MicroBlaze&lt;/a&gt;
either.  Using a Zynq with a 250MHz
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
clock, someone else &lt;a href=&quot;https://forums.xilinx.com/t5/Evaulation-Boards/AXI_GPIO-too-slow/td-p/725431&quot;&gt;measured the IO pins toggle frequency at no more than
3.8 MHz&lt;/a&gt;.
Without insight into these architectures and their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementations, it’s hard to answer why these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
achieve the toggle rates they do.&lt;/p&gt;

&lt;p&gt;This isn’t true of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
implementation is entirely open and available for inspection.
It’s not closed source.  In other words, using an open source
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
like
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;this one&lt;/a&gt;
we should be able to answer the basic question, “Why do
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
toggle &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O pins&lt;/a&gt;
so slowly?”  We might even get so far as to answer the question of, “How much
I/O speed might I expect from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;?”
But this latter question is really
very
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
dependent, and we might be pushing our luck to answer it today.&lt;/p&gt;

&lt;p&gt;So, let’s take a look at a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt; controller.
We can then run some tests on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, to see how fast the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can toggle an LED from
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;software&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-basic-gpio-controller&quot;&gt;A Basic GPIO controller&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt;
controllers are a dime a dozen.  They are easy to build and easy to
implement.  If you are an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
developer and haven’t built your own
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt;
controller before, then let me encourage you to do so as a good exercise.&lt;/p&gt;

&lt;p&gt;For this article, I’ll just point out a couple features of the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO controller
I use&lt;/a&gt;
on many of my designs.  If you are a regular reader of this blog, you’ll
already know that I use the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone Bus&lt;/a&gt;.
You’ll also recognize the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone I/O signals from our earlier article on the
topic&lt;/a&gt;.  So
I’m not going to repeat those here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;My own GPIO
controller&lt;/a&gt;, one I
call &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO&lt;/a&gt;,
handles up to 16 inputs and 16 outputs as part of a single 32-bit
register.  The top
16-bits are input bits, whereas the bottom 16 are output bits.  Not all of
these bits need to be wired in any given design.  Further, all of the
input/output wires have fixed directions in this controller.
I basically judged that, at least on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
by the time you’ve wired everything up to build your design you already
know which direction the pins need to go.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://openrisc.io&quot;&gt;OpenRISC&lt;/a&gt; ecosystem offers a &lt;a href=&quot;https://github.com/openrisc/orpsoc-cores/blob/master/cores/gpio/gpio.v&quot;&gt;nice alternative
if you want to examine a controller where the pins have a programmable
direction&lt;/a&gt;,
but I digress.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO
controller&lt;/a&gt;,
adjusting an output bit requires writing to two
bits in the control word at once.  First, you want to set the new value of
the bit, but second, in order to avoid the need to set all of the other output
bits, you also need to set a second bit in the upper half of the register.
The software supporting &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;this
controller&lt;/a&gt;,
therefore includes the definitions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define GPIO_SET(WIRE)		(((WIRE)&amp;lt;&amp;lt;16)|(WIRE))
#define GPIO_CLEAR(WIRE)	((WIRE)&amp;lt;&amp;lt;16)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means that we can set a bit,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or even clear the same bit,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;without needing to first read the register and adjust the one bit of interest,
as in,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// This is not the WBIO approach:
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Setting a bit without hardware support
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Clearing a bit without hardware support
&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Verilog logic necessary to handle this is trivially simple to write,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_OUTPUTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The input logic is really irrelevant to our discussion today, but it’s not
much more than a &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;2FF
synchronizer&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A quick check for anything changing can be used to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_gpio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;… or at least something like that.  The actual implementation tries to
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;free up as much logic as
possible&lt;/a&gt;
by only adjusting a parameterizable &lt;code class=&quot;highlighter-rouge&quot;&gt;NOUT&lt;/code&gt; output bits and only
reading and testing for changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;NIN&lt;/code&gt; input bits.&lt;/p&gt;

&lt;p&gt;It really is just that basic.&lt;/p&gt;

&lt;p&gt;The logic is also fast.  As you can see, it only takes a single clock cycle
to toggle any &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;output
pins&lt;/a&gt;.
Surely this wouldn’t slow a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
down, right?&lt;/p&gt;

&lt;h2 id=&quot;running-a-zipcpu-program&quot;&gt;Running a ZipCPU program&lt;/h2&gt;

&lt;p&gt;If you are interested in trying out the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
in simulation, the &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic
repository&lt;/a&gt;
is one of the better repositories for that purpose.  Sure, I have
&lt;a href=&quot;/projects.html&quot;&gt;other repositories&lt;/a&gt; tailored for
specific boards, but
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;this one&lt;/a&gt;
 is fairly generic.&lt;/p&gt;

&lt;p&gt;To support this test, I recently added the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO module&lt;/a&gt;
to the repository, as well as the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/auto-data/gpio.txt&quot;&gt;WBGPIO AutoFPGA configuration
file&lt;/a&gt;.  One
run of &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
and this &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;new module&lt;/a&gt;
has been merged: new I/Os are created at the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/toplevel.v&quot;&gt;top
level&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/main.v&quot;&gt;main.v file&lt;/a&gt;
now connects it to my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO control&lt;/a&gt;
register has been added to the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/host/regdefs.h&quot;&gt;list of host accessible
registers&lt;/a&gt;,
and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board.board.h&quot;&gt;hardware definition header
file&lt;/a&gt;
now includes the defines necessary to access this peripheral.&lt;/p&gt;

&lt;p&gt;Pretty neat, huh?&lt;/p&gt;

&lt;p&gt;If you want to test it, you’ll need to build the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;tool chain&lt;/a&gt;.
You’ll find &lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;instructions for building the toolchain
here&lt;/a&gt;.
Once built, you should have &lt;code class=&quot;highlighter-rouge&quot;&gt;zip-gcc&lt;/code&gt; in your path.&lt;/p&gt;

&lt;p&gt;I placed a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;gpiotoggle.c&lt;/a&gt;
program in the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/sw/board&quot;&gt;sw/board&lt;/a&gt;
directory for you, and adjusted the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/Makefile&quot;&gt;makefile&lt;/a&gt;
so it should build one of several tests for us.  Feel free to examine &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;that
program&lt;/a&gt;,
and adjust it as you see fit should you wish to repeat or modify this test.&lt;/p&gt;

&lt;p&gt;Once you build &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;gpiotoggle&lt;/a&gt;,
you’ll then want to start the simulation.  The easiest way is to run
&lt;code class=&quot;highlighter-rouge&quot;&gt;main_tb&lt;/code&gt; from from the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/sim/verilated&quot;&gt;sim/verilated&lt;/a&gt;
directory, and to instruct it to load and run the 
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;gpiotoggle&lt;/a&gt;
program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sim/verilated
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;main_tb -d ../../sw/board/gpiotoggle&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; flag above turns on the internal debugging options.  In particular,
it tells the simulator to create a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
trace&lt;/a&gt;
file output that will be placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;trace.vcd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the program will go on forever, you’ll need to press a control-C to
kill it.  On my ancient computer, about five seconds is all that is required
to create 250MB file, which should be completely sufficient for our needs today.&lt;/p&gt;

&lt;p&gt;Once killed, you can pull the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace file&lt;/a&gt; up in
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;
to see how fast the LED toggled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;gtkwave trace.vcd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you have the trace up, pull in the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_gpio&lt;/code&gt; trace at the top level
and expand it.  You should get something like Fig. 2.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. A Simulation VCD trace, showing the GPIO pin(s) toggling&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-gtkwave-single-wide.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Don’t forget, you’ll have to scan past the program getting loaded by the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;
to get to the point where the I/O is toggling.  If you zoom into this
section where &lt;code class=&quot;highlighter-rouge&quot;&gt;o_gpio[0]&lt;/code&gt; toggles, you should see something like Fig. 3 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Zooming in on the trace, we can see a 700ns period&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-gtkwave-single.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Shall we see how fast we can toggle this pin?&lt;/p&gt;

&lt;h2 id=&quot;running-our-experiments&quot;&gt;Running our Experiments&lt;/h2&gt;

&lt;p&gt;Let’s run some experiments.  We’ll start slow, with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
disabled, and then slowly enable features along the way.&lt;/p&gt;

&lt;p&gt;Before starting, though, let me ask you to do one thing: take out a piece
of paper, and write onto it the fastest speed you expect the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to be able to toggle the
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O pin&lt;/a&gt;,
assuming that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
is running at 100MHz.&lt;/p&gt;

&lt;p&gt;Why 100MHz?  Well, it’s sort of my baseline
system clock speed, dating back to my work on the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;.  Since the 
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
offered a 100MHz clock input, I got used to using that speed for
development.  The reality is that some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
will run slower, such as the Spartan 6 or the iCE40,
and some will run faster.  One individual even reported running the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
at 150MHz.  100MHz just happens to be a nice number in between that makes
reading data from a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace file&lt;/a&gt;
easier–since each clock tick is 10ns.&lt;/p&gt;

&lt;p&gt;Now, fold that paper up with your prediction on it, and then let’s continue.&lt;/p&gt;

&lt;h4 id=&quot;starting-out-slow&quot;&gt;Starting out slow&lt;/h4&gt;

&lt;p&gt;Let’s start out as slow as we can, just to see how things improve by
adding more logic to our design.  If you go into the file
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;rtl/cpu/cpudefs.v&lt;/a&gt;,
you can edit the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
default configuration.  Let’s start by uncommenting the line defining
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt;.  We’ll also comment the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EARLY_BRANCHING&lt;/code&gt; definition,
and so disable it.  This is almost the lowest logic configuration of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.
We’ve just turned off the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline logic&lt;/a&gt;,
we’ve
turned off all caches and the pipelined data access mode.
(More about pipelined data access in a moment.)  If we wanted, we could also
disable the multiply and divide instructions, but those should be irrelevant
for the purposes of today’s test.&lt;/p&gt;

&lt;p&gt;Go ahead and rebuild the design now, by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; from the root directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# cd to the root directory, then&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s look at our &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;LED toggling
program&lt;/a&gt;.
The
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;program&lt;/a&gt;
contains many different approaches to toggling the LED.  We’ll work through
them one at a time.  We’ll start by using the following loop to toggle the LED.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gpiocmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpiocmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;gpiocmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that, because of how we built our
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;WBGPIO controller&lt;/a&gt;,
we don’t need to read from the output port prior to writing the new value in
order to ensure that we only toggle a single bit.&lt;/p&gt;

&lt;p&gt;I shouldn’t have to mention that for any type of test of this type, you need
to turn compiler optimizations on with &lt;code class=&quot;highlighter-rouge&quot;&gt;-O3&lt;/code&gt;.  Without optimization, this
little snippet of code will turn into,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  ; Create a stack frame, and save some registers to it so they can be
  ; recovered later.
  e00000:	e8 14 85 0c 	SUB        $20,SP         | SW         R0,$12(SP)
  e00004:	64 c7 40 10 	SW         R12,$16(SP)
  ; Now create a stack frame where our local variables may be stored
  e00008:	63 43 40 0c 	MOV        $12+SP,R12
  ; Save a copy of argc and argv (we won&#39;t be using them anyway
  e0000c:	0c c7 3f f8 	SW         R1,$-8(R12)
  e00010:	14 c7 3f f4 	SW         R2,$-12(R12)
  ; gpiocmd = 0x10000, or 65536.  Load this into a register, then store it into
  ; the stack location for gpio
  e00014:	0e 01 00 00 	LDI        $65536,R1
  e00018:	0c c7 3f fc 	SW         R1,$-4(R12)
  ; Load the address of our GPIO register into R1
  ; This is also the first instruction within our our while(1) loop
  e0001c:	0a 00 03 00 	LDI        0x00c0000c,R1  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00020:	0a 40 00 0c 
  ; Load gpiocmd into R0, and write that to the GPIO register
  e00024:	84 e4 85 88 	LW         -4(R12),R0     | SW         R0,(R1)
  ; Load gpiocmd back into R0, and XOR it with one
  e00028:	04 87 3f fc 	LW         -4(R12),R0
  e0002c:	01 00 00 01 	XOR        $1,R0
  ; Write the result back into gpiocmd
  e00030:	04 c7 3f fc 	SW         R0,$-4(R12)
  ; and loop back to the top of our while loop
  e00034:	78 83 ff e4 	BRA        @0x00e0001c    // e0001c &amp;lt;main+0x1c&amp;gt;_&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each instruction takes, at a minimum, one cycle.
You’ll see in a moment how difficult it can be to fetch each of these
many instructions.&lt;/p&gt;

&lt;p&gt;Part of the problem with this unoptimized implementation is that all of the
data values are kept in a local variable space in memory, never in any
registers.  As you’ll also see below, each &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; (store word) instruction
to write our &lt;code class=&quot;highlighter-rouge&quot;&gt;gpiocmd&lt;/code&gt; variable to memory can take many clock cycles.
Loads are worse, since the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
needs to wait for a load to complete before continuing.
In other words, this is a very slow way to toggle an
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;On the other hand, if you place variables into registers, such as placing
&lt;code class=&quot;highlighter-rouge&quot;&gt;gpiocmd&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;, you’ll get much faster code.  GCC’s &lt;code class=&quot;highlighter-rouge&quot;&gt;-O3&lt;/code&gt; applies
three levels of optimizations doing just this, so don’t forget to use it.
In this example, if you run a “make gpiotoggle.txt” from within the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/sw/board&quot;&gt;sw/board&lt;/a&gt; directory,
you’ll get both an optimized executable as well as a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
disassembly file.  If you look through that file, you can find
the main program generated from our C-code above.  I added some comments to it
below, to help it make more sense to a reader.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  ; gpiocmd = (1&amp;lt;&amp;lt;16)
  e00000:       0e 01 00 00     LDI        $65536,R1
  ; R2 = _gpio, the address of the WBGPIO&#39;s one control register
  e00004:       12 00 03 00     LDI        0x00c0000c,R2  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00008:       12 40 00 0c
  ; Here&#39;s the first instruction of our while loop: *_gpio = gpiocmd;
  e0000c:       0c c4 80 00     SW         R1,(R2)
  ; Now we toggle the bottom bit, gpiocmd ^= 1;
  e00010:       09 00 00 01     XOR        $1,R1A
  ; And repeat back to the beginning of our loop
  e00014:       78 83 ff f4     BRA        @0x00e0000c    // e0000c &amp;lt;main+0xc&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Within this main program are three instructions: one store instruction to
set the I/O, one XOR instruction to toggle the lower bit of the register &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;
containing our &lt;code class=&quot;highlighter-rouge&quot;&gt;gpiocmd&lt;/code&gt;, and then a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
always instruction to return to the top of the loop.&lt;/p&gt;

&lt;p&gt;This looks much better than the unoptimized version!&lt;/p&gt;

&lt;p&gt;So, let’s see … a quick back of the envelope estimate says that if we are
running at a 100MHz clock, these three instructions should take &lt;code class=&quot;highlighter-rouge&quot;&gt;10ns&lt;/code&gt; each,
so we should be able to toggle our LED every &lt;code class=&quot;highlighter-rouge&quot;&gt;30ns&lt;/code&gt;, right?&lt;/p&gt;

&lt;p&gt;In this case, with &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt; defined, it takes &lt;code class=&quot;highlighter-rouge&quot;&gt;350ns&lt;/code&gt; to toggle
the LED once, or &lt;code class=&quot;highlighter-rouge&quot;&gt;700ns&lt;/code&gt; per cycle.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;I/O pin&lt;/a&gt;
therefore toggles at 1.4MHz.&lt;/p&gt;

&lt;p&gt;Wow.  What just happened?!&lt;/p&gt;

&lt;p&gt;If you examine a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
trace&lt;/a&gt;,
you’ll see something like Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. VCD trace showing the CPU pipeline signals associated with toggling an LED&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-gtkwave-single-all.png&quot;&gt;&lt;img src=&quot;/img/toggle-gtkwave-single-all-snap.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; can be rather confusing
to understand.  First, you need to know the meanings of the various
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus signals&lt;/a&gt;,
the names of the four bus interfaces shown, mem_ (the CPU
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;memory controller&lt;/a&gt;),
pf_ (the CPU
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;),
zip_ (the combined memory/prefetch bus), and wb_ (the &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;master
bus&lt;/a&gt;
within the system), as well as the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU pipeline signals&lt;/a&gt;
such
as pf_valid (theer’s a valid instruction coming out of the prefetch stage),
dcd_valid (a valid instruction has come out of the instruction decoder),
op_valid (operands are ready to be used by the execution units) and
wr_reg_ce (a value may now be written to the register file).  At the end of all
of that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;new_pc&lt;/code&gt; signal indicating that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
has been detected at the end of the pipeline.&lt;/p&gt;

&lt;p&gt;While I &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;covered the basics of what these signals meant
before&lt;/a&gt;, the overall
trace can be difficult to follow.  Therefore, I’ve summarized the signals
from this trace in Fig. 5 below–to make for easy reading.  You should also
be able to click on the figure for an expanded version that might be easier
to view.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Toggling an LED with a basic prefetch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-slow-single.svg&quot;&gt;&lt;img src=&quot;/img/toggle-slow-single.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Basically, any time there’s an instruction at the output of a particular stage,
instead of just listing the stage valid signal, I’ve  also placed the
instruction’s name into the figure as well–so you can see the instruction work
its way through the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let’s spend some time examining Fig 5.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
basically shows just one cycle in this loop.&lt;/p&gt;

&lt;p&gt;Within the trace, you can see the three instructions of our loop marked as
&lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;The timing within this trace is driven primarily by the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;,
shown in the &lt;code class=&quot;highlighter-rouge&quot;&gt;I-Bus&lt;/code&gt; line at the top.  (This captures the &lt;code class=&quot;highlighter-rouge&quot;&gt;pf_cyc&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;pf_stb&lt;/code&gt; lines from Fig. 4 further up.)
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;We discussed this particular prefetch and how it
works&lt;/a&gt;
some time ago.  In
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;that discussion&lt;/a&gt;,
I showed some clearer timing diagrams when illustrating how it would work.
In this chart, I’ve now collapsed the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC &amp;amp; STB&lt;/code&gt; signal into the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC &amp;amp; ACK&lt;/code&gt; signal into the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; cycle and &lt;code class=&quot;highlighter-rouge&quot;&gt;WAIT&lt;/code&gt; in between for those
times when &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC &amp;amp; !STB &amp;amp; !ACK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But, why are their four wait cycles?  To answer that question, let me direct
your attention to Fig. 6 to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. Bus signals for a memory access&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-memack.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, you can see that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
starts a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;memory cycle&lt;/a&gt;.
by setting its cycle and strobe lines.  It then takes one clock cycle to
arbitrate between the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
and the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;,
creating a STB signal that actually gets broadcast across the bus.  As
currently configured, the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM memory&lt;/a&gt;
takes two cycles to return.  While we could drop this to one cycle, the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;
was configured for two cycles in this test.  One cycle would be just one clock
faster on every
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;
operation.  The next problem is in the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
where we have to select a result from among many items that might respond.
Hence, an additional clock is taken to multiplex among these many
possible answers.  Finally, there’s an additional clock cycle to get our
data back into the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why are so many clocks involved?  Are they required?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 7. ZBasic&#39;s bus structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-bus.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To answer this question, let’s look at the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structure for the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic&lt;/a&gt;
design, shown on the left.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in this figure
contains two
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
drivers.  Because the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Von_Neumann_architecture&quot;&gt;Von Neumann
architecture&lt;/a&gt;, there is
only one &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus interface&lt;/a&gt;
leaving the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;.
(Not shown in the picture is a second
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpu/wbarbiter.v&quot;&gt;arbiter&lt;/a&gt;
dealing with the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/zipsystem.v&quot;&gt;ZipSystem&lt;/a&gt;.)
Once the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; leaves the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;,
it is then merged with the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;.  An
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/wbpriarbiter.v&quot;&gt;arbiter&lt;/a&gt;
then selects between the &lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;two bus
masters&lt;/a&gt;.  However,
by this point in time there’s now
been &lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;too much combinatorial logic for the clock
period&lt;/a&gt;.
In order to maintain a high clock speed, a
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/busdelay.v&quot;&gt;delay&lt;/a&gt;
needs to be inserted on the path to the primary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This gets us to the master &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus
strobe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what about the delay in the acknowledgement?&lt;/p&gt;

&lt;p&gt;The purpose of the acknowledgment delay is basically the same thing: to
&lt;a href=&quot;/blog/2017/09/18/clocks-for-sw-engineers.html&quot;&gt;reduce the necessary amount of logic within one clock
period&lt;/a&gt;.
In particular, our bus implementation contains a &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;large case
statement&lt;/a&gt;
controlling the return data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;casez&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;scope_sdcard_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;flctl_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sdcard_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;uart_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rtc_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wb_sio_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;bkram_ack&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b1??????&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope_sdcard_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b01?????&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flctl_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b001????&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdcard_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b0001???&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b00001??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtc_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b000001?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_sio_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;mb&quot;&gt;7&#39;b0000001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bkram_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_idata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flash_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This takes time.  To keep the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
speed up, this case statement was given it’s own clock period.  Indeed,
there’s yet another clock taken to get back through the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/busdelay.v&quot;&gt;bus delay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hence, when you count it all out, fetching an instruction using &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;this
prefetch&lt;/a&gt;
takes five cycles within
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;this deslgn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, why were there six cycles shown in the trace in Fig. 5 above?  Because an
extra cycle was used within the priority prefetch/memory arbiter.  That
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpu/wbdblpriarbiter.v&quot;&gt;priority arbiter&lt;/a&gt;
defaults to offering access to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;memory
unit&lt;/a&gt; over the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;.  An extra
clock is required to switch from
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;data&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt; access.
This makes perfect sense when the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch uses an instruction
cache&lt;/a&gt;,
but the priority probably needs to switch when it isn’t.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 8. GPIO peripheral access timing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/toggle-gpioack.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The timing associated with accessing the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO device&lt;/a&gt;
to toggle the LED is similar.  The big difference is that
there’s only a single clock delay within the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, 1.4MHz is a good start.  Let’s consider this the pretest: we can do
better.  The only problem is that doing better will cost us
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;more logic&lt;/a&gt;.
Therefore, we’ll need to adjust our &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;configuration
option(s)&lt;/a&gt;
to control how much logic will be used.&lt;/p&gt;

&lt;h4 id=&quot;adding-a-better-fetch-routine&quot;&gt;Adding a better fetch routine&lt;/h4&gt;

&lt;p&gt;Some time ago, &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;I discussed how to build a prefetch that would fetch two
instructions at once&lt;/a&gt;.
Let’s take a look at the difference we might expect by using &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;this “better”
prefetch&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dblfetch.v&quot;&gt;unit&lt;/a&gt;.
To enable &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;this second/alternate
prefetch&lt;/a&gt;,
we’ll comment the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt; option and uncomment the
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DOUBLE_FETCH&lt;/code&gt; option from within the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;CPU configuration
file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example trace from this updated configuration is shown above in
Fig. 9 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 9. Toggling an LED with our pipelind prefetch&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-slow-double.svg&quot;&gt;&lt;img src=&quot;/img/toggle-slow-double.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The big difference between this trace and the one in Fig. 5 above is that the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;strobe signals&lt;/a&gt;
are now
three cycles long, and there are two acknowledgement cycles.  Given that the
first strobe cycle deals with the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpu/wbdblpriarbiter.v&quot;&gt;priority
arbiter&lt;/a&gt;
focusing on &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;data
access&lt;/a&gt;
instead of the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction
fetch&lt;/a&gt;, we’re still
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;fetching two instructions&lt;/a&gt;
in eight cycles now instead
of one instruction in seven cycles.  Clearly doubling the speed of the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
should speed up our algorithm, right?&lt;/p&gt;

&lt;p&gt;Well, yes, just not much.  We went from taking 700ns down to 580ns per cycle.&lt;/p&gt;

&lt;p&gt;What happened?  Why aren’t we going any faster?&lt;/p&gt;

&lt;p&gt;In this case, the problem is the fact that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
isn’t fully
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Yes, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is a &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;fully pipelined
CPU&lt;/a&gt;.
This requires multiple copies of the internal CPU data structures–one per
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline stage&lt;/a&gt;.
This also requires some
rather elaborate stall calculation logic.  To create a non-pipelined
CPU, such as we have been testing so far, the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
stall logic has been simplified and many of the stages share data.  In
other words: the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
instructions take several exclusive clock cycles to complete in this mode.&lt;/p&gt;

&lt;p&gt;The next problem is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction has to wait at the output of the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
until it has been accepted into the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode unit&lt;/a&gt;.
This will keep the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
from getting another instruction until the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; has moved
into the decode operands stage.&lt;/p&gt;

&lt;p&gt;As you might expect, the store word instruction takes five cycles on the data
bus to finally complete.  This means that we took a whole eight cycles to
execute this one instruction before the next instruction could enter
the instruction decode stage.&lt;/p&gt;

&lt;p&gt;Sure, the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction executes faster, taking only four clocks,
but during this time &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is waiting for the memory cycle to complete before starting this
instruction.&lt;/p&gt;

&lt;p&gt;Worse, the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instruction cannot be fetched until the CPU accepts
the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction from the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the next instruction is finally available, it’s a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt; always
instruction (BRA).  When this instruction gets to the write-back stage, the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;
has to reset itself and start fetching the next instruction from a new
address: the result of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;.  This also means we just aborted an ongoing
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;prefetch&lt;/a&gt;
memory operation for the instruction that would’ve followed the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt;
operation, had it not been a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all, we are now taking &lt;code class=&quot;highlighter-rouge&quot;&gt;290ns&lt;/code&gt; for three instructions, or just under &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;ten
clocks per instruction&lt;/a&gt;.
At this rate we can toggle our LED at &lt;code class=&quot;highlighter-rouge&quot;&gt;1.7MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That doesn’t feel like much of an improvement over the last
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/prefetch.v&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What if we turned on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelining logic&lt;/a&gt;?
Would that help?&lt;/p&gt;

&lt;h4 id=&quot;going-full-pipeline&quot;&gt;Going full pipeline&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;Pipelining&lt;/a&gt;
allows the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to execute multiple instructions at the same time.  To do this, instruction
processing is split into stages, with the effect that multiple instructions
can be processed at once–with one instruction in each
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline stage&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. The ZipCPU&#39;s pipeline structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.png&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you may recall, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;five basic pipeline
stages&lt;/a&gt;:
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;, decode,
&lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;read-operands&lt;/a&gt;,
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;execute ALU/mem/divide&lt;/a&gt;,
and write-back, as shown in Fig. 10 on the right.  In general,
each instruction takes one clock cycle to work through each stage,
although most of my charts today just show when the outputs of all the given
stages are valid, with the exception that the &lt;code class=&quot;highlighter-rouge&quot;&gt;WB&lt;/code&gt; (write-back) line shows when
the input of the write-back stage is valid.&lt;/p&gt;

&lt;p&gt;All that said, if you execute multiple instructions at once, the result should
be faster, right?&lt;/p&gt;

&lt;p&gt;Let’s find out!&lt;/p&gt;

&lt;p&gt;In order to enable the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU
pipeline&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;configuration
file&lt;/a&gt;,
both the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_DOUBLE_FETCH&lt;/code&gt;
and the earlier &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_SINGLE_FETCH&lt;/code&gt; options need to be commented out.  This
also enables the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/pfcache.v&quot;&gt;instruction
cache&lt;/a&gt;,
in order to be able to feed the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
enough instructions to keep it busy.  Just to give us something to examine
later, let’s also turn off the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
early branching, and the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;pipelined bus&lt;/a&gt;
capability.  (More on that later.)  We can do this by commenting the
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EARLY_BRANCHING&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPELINED_BUS_ACCESS&lt;/code&gt; configuration options.
Turning off the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;
is a bit more difficult, since it requires setting &lt;code class=&quot;highlighter-rouge&quot;&gt;LGDCACHE&lt;/code&gt; to zero in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/auto-data/zipmaster.txt&quot;&gt;configuration file&lt;/a&gt;
and then rerunning
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once done, we can run our three instruction loop again.&lt;/p&gt;

&lt;p&gt;You can see the basic results in the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
shown in Fig. 11 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. Toggling an LED with full CPU pipelining enabled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-pip-noearly.svg&quot;&gt;&lt;img src=&quot;/img/toggle-pip-noearly.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Wait, I thought
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU pipelines&lt;/a&gt;
were supposed to be able to execute with one instruction in every stage?
What’s with all the empty stages?&lt;/p&gt;

&lt;p&gt;We’ll pick up the story after the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction gets into the write-back stage.  This forces the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
to be cleared, so all the work we’ve done on any subsequent instructions
needs to be thrown away.&lt;/p&gt;

&lt;p&gt;Ouch!  That’ll slow us down.&lt;/p&gt;

&lt;p&gt;Second, in addition to killing our
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;,
we also suffer a clock in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction
cache&lt;/a&gt;
due to switching between cache lines.  This manifests itself in an extra clock
before &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; shows on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PF&lt;/code&gt; line, as well as an extra clock between the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instructions on that same line.  After the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
our first instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; is ready to move through our
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
after two cycles.  However, the cycle after &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; is valid in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PF&lt;/code&gt; stage
is empty again.  Why?  Because we are again switching cache lines: &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; is
the last instruction in a given cache line.  Our
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache implementation&lt;/a&gt;
requires an extra instruction cycle when switching cache lines.&lt;/p&gt;

&lt;p&gt;Why?  Shouldn’t a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache&lt;/a&gt;
be able to deliver one &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;instruction per
cycle&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Yes, perhaps it should.  However, the cache tag is stored in block RAM.
Therefore, it costs us one cycle to look up the cache tag, and a second
cycle to compare if its the right tag.  (I really need to blog about this.)
With some optimization, we can skip this in the great majority of
cases, but every now and then an access crosses cache lines and must suffer
a stall.&lt;/p&gt;

&lt;p&gt;Once we get to the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction
cache&lt;/a&gt;
seems to be doing well.&lt;/p&gt;

&lt;p&gt;A second optimization in the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
implementation allows the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; to complete before the &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; instruction does.
This only works for store instructions, not data load instructions.  Because
store instructions don’t modify any registers, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
doesn’t need to hold the next instruction waiting for a result.&lt;/p&gt;

&lt;p&gt;This optimization doesn’t apply to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instructions however.  Looking at this
stall, I’m not sure I can explain it very well.  I have a vague recollection
of some complication forcing this, but I might need to go back and re-examine
that stall logic.  That’s the fun thing about examining traces in detail,
though–you see all kinds of things you might not have been expecting.&lt;/p&gt;

&lt;p&gt;Of course, since the early branching we’re going to discuss in the next section
is such a cheap optimization, costing &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;so few extra logic
elements&lt;/a&gt;, that I
hardly ever run the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
without it as we have just done here.&lt;/p&gt;

&lt;p&gt;In the end, this took us &lt;code class=&quot;highlighter-rouge&quot;&gt;120ns&lt;/code&gt; to execute these three instructions
and toggle our LED, or 4 &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;clock cycles per
instruction&lt;/a&gt;.  This
leads to &lt;code class=&quot;highlighter-rouge&quot;&gt;240ns&lt;/code&gt; per LED cycle, or &lt;code class=&quot;highlighter-rouge&quot;&gt;4.2MHz&lt;/code&gt;.  While this is better than
&lt;code class=&quot;highlighter-rouge&quot;&gt;580ns&lt;/code&gt; per cycle, it’s still a far cry from the speed I’d expect from a
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can do better.&lt;/p&gt;

&lt;h4 id=&quot;early-branching&quot;&gt;Early Branching&lt;/h4&gt;

&lt;p&gt;Perhaps you noticed in the last section all the instructions filling the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
that had to be thrown out when the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction was encountered.  This is unfortunate.  Let’s do better in this
section.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has the capability of recognizing certain
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instructions
from within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode stage&lt;/a&gt; This allows the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode stage&lt;/a&gt;
to send any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
always instructions directly to the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;.  This
also allows the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
to fill back up while the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction bubble works its way through the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to enable this early branching capability, we’ll uncomment and set
the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_EARLY_BRANCHING&lt;/code&gt; flag within the configuration file.&lt;/p&gt;

&lt;p&gt;With this new configuration, we’re now down to &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;60ns&lt;/code&gt; per three
instructions&lt;/a&gt;
to toggle the I/O, or &lt;code class=&quot;highlighter-rouge&quot;&gt;120ns&lt;/code&gt; per cycle, for a cycle rate now of 8.3MHz.
You can see the resulting trace shown in Fig. 12 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Toggling an LED with both pipelining and early branching enabled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-piped.svg&quot;&gt;&lt;img src=&quot;/img/toggle-piped.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unlike our previous figures, I’m now showing multiple toggles in this trace.
Why?  Because I can!  The
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
is now that short that I can fit multiple toggles in a single image.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
starts out much as before, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt;, the stall, and then the
&lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instructions coming from the instruction
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
unit.&lt;/p&gt;

&lt;p&gt;This time, however, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instruction is in the decode stage, the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
stage is invalidated and the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cache&lt;/a&gt;
gets sent to get the next instruction in the loop.&lt;/p&gt;

&lt;p&gt;While there appear to be some further room for optimization here, the data
bus is now completely loaded.  As a result, the only way we might go faster
would be to speed up the data bus by, for example, simplifying the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structure or removing some of the peripherals.&lt;/p&gt;

&lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;8.3MHz&lt;/code&gt; is much faster than we started, it’s still much slower than
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s
clock speed.  Indeed, looking over our program, if our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
had no stalls at all, we would only ever be able to do &lt;code class=&quot;highlighter-rouge&quot;&gt;60ns&lt;/code&gt; per cycle, or
&lt;code class=&quot;highlighter-rouge&quot;&gt;16.6MHz&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;pipelined-multiple-bus-accesses&quot;&gt;Pipelined Multiple Bus Accesses&lt;/h4&gt;

&lt;p&gt;What if we wanted our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
to toggle this LED faster?  Speeding up the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;I-cache&lt;/a&gt;
won’t help, nor would better branching logic.  Right now, our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
is the bottleneck.  It’s at its highest speed.  Hence, we can’t push any
more instructions into our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
if we are stuck waiting four cycles for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus cycle&lt;/a&gt;
to complete.  While we might be able to shave a clock cycle off in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementation latency, doing that would essentially strip the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;ZBasic SoC&lt;/a&gt;
down so bare that it could no longer be used for general purpose processing.&lt;/p&gt;

&lt;p&gt;That leaves only one way to go faster: to stuff more than one store in each
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
transaction.&lt;/p&gt;

&lt;p&gt;The first step towards making this happen is to uncomment the
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPELINED_BUS_ACCESS&lt;/code&gt; parameter in the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/cpu/cpudefs.v&quot;&gt;CPU configuration file&lt;/a&gt;,
and then to rebuild the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;ZBasic&lt;/a&gt;
simulator.&lt;/p&gt;

&lt;p&gt;This time, let’s update our
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/wbgpio.v&quot;&gt;GPIO&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;toggling
software&lt;/a&gt;
as well.  Instead of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; instruction, let’s instead issue
back-to-back set and clear instructions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also compiles into a three instruction loop, like before, but this time
it’s slightly different.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  e00000:       0a 00 03 00     LDI        0x00c0000c,R1  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00004:       0a 40 00 0c 
  e00008:       1e 01 00 01     LDI        $65537,R3
  e0000c:       13 40 df ff     MOV        $-1+R3,R2
  e00010:       9d 88 95 88     SW         R3,(R1)        | SW         R2,(R1)
  e00014:       78 83 ff f8     BRA        @0x00e00010    // e00010 &amp;lt;main+0x10&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, we have two store instructions in a row followed by our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
always instruction.  Further, the two store word instructions use
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
compressed instruction set encoding, so both are shown as part
of the same instruction word.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;memory
controller&lt;/a&gt;
that has the ability to issue multiple subsequent memory
requests.  This is the controller we just selected by enabling
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPELINED_BUS_ACCESS&lt;/code&gt;.  Issuing multiple
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus requests&lt;/a&gt;,
however, has some requirements in order to avoid crossing devices
and thus losing acknowledgments or getting any results out of order.
Specifically, multiple requests must be to the same identical, or to
subsequent, addresses.  Hence these two store word instructions
will be placed into the same memory transfer.&lt;/p&gt;

&lt;p&gt;To understand what that might look like, let’s take a look at Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Issuing two write operations on consecutive clocks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-pipemem2.svg&quot;&gt;&lt;img src=&quot;/img/toggle-pipemem2.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first thing to notice is that we are now issuing two back to back store
word requests of the bus.  (The &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB STB
lines&lt;/a&gt;
are high for two consecutive cycles, while the stall lines are low.)  These
two instructions fly through the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; logic in
adjacent clock periods.  Hence, when the acknowledgments
come back, they are still together.&lt;/p&gt;

&lt;p&gt;If you look down at the LED line, you’ll also notice the two changes are made
back to back.  First the LED is set, then it is cleared.  Then nothing happens
until the next
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus cycle&lt;/a&gt;.
This means we now have a duty cycle of only 14%.  Sure, we’re
toggling faster, now at a rate of &lt;code class=&quot;highlighter-rouge&quot;&gt;70ns&lt;/code&gt; per cycle or equivalently at
a rate of 14MHz, but we now lost the 50% duty cycle we once had in our
original square wave.&lt;/p&gt;

&lt;p&gt;Next, did you notice that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
now issues a valid instruction immediately following the &lt;code class=&quot;highlighter-rouge&quot;&gt;BRA&lt;/code&gt; instruction
from the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decode
stage&lt;/a&gt;?
This is because we aren’t crossing cache lines anymore.&lt;/p&gt;

&lt;p&gt;Further, did you notice the instructions highlighted in blue?  These represent
the first half of the decompressed compressed instructions.  Since the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
knows nothing about the compressed instruction encoding, all of the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;prefetches control
state&lt;/a&gt;
is captured by the stall signal–independent of the blue marking.  The
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decoder&lt;/a&gt;
is the first to recognize the compressed instruction, and so I’ve then split
the store word instruction word into &lt;code class=&quot;highlighter-rouge&quot;&gt;SW1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SW2&lt;/code&gt; representing the first
and second store word instruction respectively.&lt;/p&gt;

&lt;p&gt;Finally, notice how the first &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt; instruction gets stuck in the read-operands
stage for an extra three cycles.  This is due to the fact that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;memory unit&lt;/a&gt;
is busy, and so these commands cannot (yet) issue until the two memory
acknowledgements come back.  Just to help illustrate this, I added the
data bus &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; signal back into my trace summary, outlining the time when the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
is busy.  The first store instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;SW1&lt;/code&gt;, cannot issue until this
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;memory cycle&lt;/a&gt;
finishes.  Hence we are still limited by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
speed.&lt;/p&gt;

&lt;p&gt;Can we do better than &lt;code class=&quot;highlighter-rouge&quot;&gt;14MHz&lt;/code&gt;?  What if we unrolled our loop a bit and so
packed eight store instructions per loop?  Our C code would now look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gpio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO_CLEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with the associated assembly code,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;00e00000 &amp;lt;main&amp;gt;:
  e00000:	0a 00 03 00 	LDI        0x00c0000c,R1  // c0000c &amp;lt;_kram+0xc0000c&amp;gt;
  e00004:	0a 40 00 0c 
  e00008:	1e 01 00 01 	LDI        $65537,R3
  e0000c:	13 40 df ff 	MOV        $-1+R3,R2
  e00010:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e00014:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e00018:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e0001c:	9d 88 95 88 	SW         R3,(R1)        | SW         R2,(R1)
  e00020:	78 83 ff ec 	BRA        @0x00e00010    // e00010 &amp;lt;main+0x10&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How fast would you expect this loop to toggle our LED?&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. Issuing eight write operations on consecutive clocks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/toggle-pipemem.svg&quot;&gt;&lt;img src=&quot;/img/toggle-pipemem.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As you can see from Fig. 14 above, we are now toggling our LED four times in
&lt;code class=&quot;highlighter-rouge&quot;&gt;130ns&lt;/code&gt;, for a rough rate of &lt;code class=&quot;highlighter-rouge&quot;&gt;30MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is finally starting to look like we might expect from a
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.  We’re still taking a pretty big
hit from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
which is also forcing the ongoing memory operation to be flushed.&lt;/p&gt;

&lt;p&gt;Might we go further?  Certainly!  If you check the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;GPIO toggling
program&lt;/a&gt;,
there’s an example within it that now toggles our LED 72 times in &lt;code class=&quot;highlighter-rouge&quot;&gt;770ns&lt;/code&gt;.
At first I didn’t believe this would be possible, since the instruction
stream would now cross multiple cache lines.  If the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
isn’t kept filled, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;memory
controller&lt;/a&gt;
will break the extended memory cycle.  However, in this case, because
there are so many compressed instructions, the extra cache cycles associated
with crossing cache lines aren’t noticed.&lt;/p&gt;

&lt;p&gt;This gives us our ultimate LED toggling rate of &lt;code class=&quot;highlighter-rouge&quot;&gt;47MHz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s also the time to check your notes.  Remember how I asked you to scribble
down the speed you expected at first, indicating how fast you felt a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
could toggle a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO
pin&lt;/a&gt;?  Go ahead,
take a peek at your scribbled note.  How close did you come to the results
we just presented?&lt;/p&gt;

&lt;h2 id=&quot;other-bus-implementations&quot;&gt;Other Bus Implementations&lt;/h2&gt;

&lt;p&gt;I would be remiss if I didn’t point out two things regarding other
implementations.&lt;/p&gt;

&lt;p&gt;First, the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone Classic implementation found in the Wishbone B3
specification&lt;/a&gt;
requires a minimum of three cycles per
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
access, and doesn’t allow multiple transactions to be in flight at once.
At best, this would have limited us to &lt;code class=&quot;highlighter-rouge&quot;&gt;120ns&lt;/code&gt; per cycle and our &lt;code class=&quot;highlighter-rouge&quot;&gt;8.3MHz&lt;/code&gt;
number above.  At worst, this will slow down the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
operation from
100MHz down to 50MHz.  However, this is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
structure used by the &lt;a href=&quot;https://openrisc.io&quot;&gt;OpenRISC&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, while the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI bus&lt;/a&gt;
is more universally accepted than the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
Bus&lt;/a&gt;,
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;default AXI-lite
implementation&lt;/a&gt;
can’t handle once access per clock.  At best, it can only do one access
every other clock.  At that rate, your best speed would only ever be &lt;code class=&quot;highlighter-rouge&quot;&gt;90ns&lt;/code&gt;
per loop (assuming only two toggles, or one LED cycle per loop), not &lt;code class=&quot;highlighter-rouge&quot;&gt;70ns&lt;/code&gt; per
loop.  Likewise, if you tried to do the 72 toggles per loop using
that demo &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI&lt;/a&gt;-lite
peripheral, you’d be stuck at &lt;code class=&quot;highlighter-rouge&quot;&gt;24MHz&lt;/code&gt; instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;47MHz&lt;/code&gt; mentioned above.&lt;/p&gt;

&lt;p&gt;My whole point here is that if speed is important to you, then your choice of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
matters.&lt;/p&gt;

&lt;p&gt;These same observations apply to your choice of
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
implementation as well.  However, without any insight into how the various
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
projects have implemented their interconnects, it’s a bit difficult to
compare them.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We’ve now examined several implementations of
&lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;blinky&lt;/a&gt;
from the standpoint of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
What sorts of conclusions can we draw?
Perhaps the first and most obvious conclusion is that the speed of
&lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;blinky&lt;/a&gt;
&lt;em&gt;depends&lt;/em&gt;.  Just because
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;your processor&lt;/a&gt;
runs at 100MHz doesn’t mean you’ll be able to
&lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;blink&lt;/a&gt;
an LED at anywhere near that rate.  The closest we managed to get was 47MHz.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Our first two examples showed how critical the
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;’s
performance is to overall
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
speed.  Indeed, reality is usually worse than these examples.  Our &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sw/board/gpiotoggle.c&quot;&gt;code
above&lt;/a&gt;
ran from an on-chip
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM component&lt;/a&gt;.
Had we been trying to read instructions from an external
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
or even &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
our performance would’ve likely been an order of magnitude worse.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We saw several examples of how an ongoing memory operation would bring the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to a halt.  A really fast
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
therefore, can only go as fast as its memory unit and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
will let it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;Pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
are commonly known for being able to retire one &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;instruction
per clock&lt;/a&gt;.
Here we saw several examples where a
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
wasn’t able to retire &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;one instruction per
clock&lt;/a&gt;.
.  We saw examples where the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;prefetch&lt;/a&gt;
couldn’t keep the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
filled with instructions, where an ongoing
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;memory operation&lt;/a&gt;
forced the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt; to stall,
and where a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
instruction forced the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; to clear the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;All of these realities are known for keeping a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
number of &lt;a href=&quot;https://en.wikipedia.org/wiki/Instructions_per_cycle&quot;&gt;instructions per clock
cycle&lt;/a&gt;
lower than the ideal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We saw the importance of a good early branching scheme.  While the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
doesn’t really implement a traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_predictor&quot;&gt;branch prediction&lt;/a&gt; scheme,
it’s early branching mechanism can often compensate.  Just adding this
capability to our
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
under test nearly doubled its performance from 4.7MHZ to 8.3 MHz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At one point, we got to the point where our performance was entirely
dominated by the speed of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction.  The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;
could run faster, but the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
could not.  In many ways, I might argue that this test does more to measure a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
speed than it measures the speed of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
The only problem with that argument is that you can still mess up the
speed of &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
implementation.  Hence the I/O speed really depends upon both the speed of
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
as well as the speed of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also learned that we could cheat the whole system if we could stuff
multiple store requests into the same memory transaction, yielding our
highest total toggle rate but yet distorting the square wave produced.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, I should point out that computers aren’t optimized for toggling LEDs,
so in many ways this is a very poor measure of how fast a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can perform.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;s
are optimized for executing instructions and for …
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s!
&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_multitasking&quot;&gt;Multi-tasking&lt;/a&gt;!
By the time you limit your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
down to three instructions
only, you’ve really destroyed the power your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
had initially to
execute arbitrary instructions, to execute diverse functions, to handle
&lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt;s
and more.&lt;/p&gt;

&lt;p&gt;You might argue that this is like taking a semi-tractor, filling the trailer
with a single loaf of bread, and taking it out onto the race track.  That’s
not what it was designed for!&lt;/p&gt;

&lt;p&gt;On the other hand, if you really wanted to toggle an LED quickly, why not
just do it from Verilog?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;initiali&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That design is a whole lot simpler than all the work we just spent to get our
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to toggle an LED at high speed, and it uses far fewer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;resources&lt;/a&gt;,
while toggling our LED at a whole 50MHz!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And he gave some, apostles; and some, prophets; and some, evangelists; and some, pastors and teachers (Eph 4:11)&lt;/em&gt;</description>
        <pubDate>Sat, 09 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/02/09/cpu-blinky.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/02/09/cpu-blinky.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Debugging a CPU</title>
        <description>&lt;p&gt;This is the story of finding a bug in the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It starts much like any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
story: somewhere else.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Digilent&#39;s Arty Board&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/arty-board.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; replaced the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip within their
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board.
They also created a line of new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
boards, so my
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
board has now been
rebranded as the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty A7&lt;/a&gt;.  I never realized there was a difference until
&lt;a href=&quot;https://github.com/ZipCPU/openarty/issues/2&quot;&gt;someone wrote to tell me the design didn’t work
anymore&lt;/a&gt;.  With a
&lt;a href=&quot;https://forum.digilentinc.com/topic/16908-arty-a7-flash-chip&quot;&gt;little bit of digging&lt;/a&gt;,
he and I discovered that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip had changed.  The new &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip wasn’t just another chip from the same vendor, it was now from a
different vendor entirely: from
&lt;a href=&quot;https://www.micron.com/~/media/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf&quot;&gt;Micron&lt;/a&gt;
to Spansion.&lt;/p&gt;

&lt;p&gt;This broke my old &lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;flash controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not a problem, I thought to my self, I was hoping to write a blog article on
how to build a &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Universal Quad SPI flash
controller&lt;/a&gt;.
This &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new controller&lt;/a&gt; needed to be tested and proven in real hardware.  Let me just place
this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;universal
controller&lt;/a&gt;
into my &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; design and then all
shall be well.  Indeed, all shall be better: my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;universal Quad SPI flash
controller&lt;/a&gt;
runs at twice the speed.  This will be a nice upgrade!&lt;/p&gt;

&lt;p&gt;But what about the differences between the two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chips?  I can use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to help me select between configurations of this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;universal flash
controller&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Original OpenArty Design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/openarty.svg&quot;&gt;&lt;img src=&quot;/img/openarty.svg&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The only problem is that the &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt;
design wasn’t an
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; design
to begin with.
Ok, that’s not really a problem, we can update the
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; design so that it
uses &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
That will make it even easier to test my &lt;a href=&quot;https://github.com/ZipCPU/wbhyperram&quot;&gt;HyperRAM
controller&lt;/a&gt;
as part of my &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; project as well.&lt;/p&gt;

&lt;p&gt;The next problem is that the original
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; design requires an &lt;a href=&quot;https://store.digilentinc.com/pmod-usbuart-usb-to-uart-interface/&quot;&gt;external
serial port&lt;/a&gt;
in addition to the one on the board.  This may have kept folks from using the
design, and so my newer designs have been multiplexing a console port onto the
serial debugging port.  This is a fairly simple upgrade, so we can do that too.&lt;/p&gt;

&lt;p&gt;Further, when I was struggling to get the
&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash controller&lt;/a&gt;
working, I had just had a bad experience with the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on the iCE40s that had
&lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;forced me to change my default linker script(s)&lt;/a&gt;.  After a quick upgrade to &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, it now &lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;supports multiple custom
linker scripts&lt;/a&gt;,
but that now meant that the
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;bootloader&lt;/a&gt;
needed to change as well.&lt;/p&gt;

&lt;p&gt;Other things had changed and needed to be updated as well.  For example, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; had now been
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;.  I
found a &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;lot of bugs in that
process&lt;/a&gt; some time ago,
and so I was excited to be updating the design with the new
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the middle of this, I chose to switch to Vivado 2018.3 from Vivado 2016.3.&lt;/p&gt;

&lt;p&gt;Is this starting to sound all too familiar?&lt;/p&gt;

&lt;p&gt;Years ago, when I studied Software Engineering, we would call each of these a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Small_matter_of_programming&quot;&gt;“Small matter of Programming” or
SMOP&lt;/a&gt;.  This is
said in a tongue-in-cheek fashion, however, because &lt;em&gt;nothing&lt;/em&gt; is truly ever a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Small_matter_of_programming&quot;&gt;“Small matter of
Programming”&lt;/a&gt;.  As
an engineer I also tend to (inappropriately) judge each of these changes to be
small and simple matters.&lt;/p&gt;

&lt;p&gt;The result was that, with so many changes, I was threatening to violate the
fundamental assumption of all debugging: “There’s only ever one bug in the
design.”  Sure, I know, that gets violated all the time, but think about it:
most debugging methodologies can only handle one bug at a time.&lt;/p&gt;

&lt;p&gt;So, today’s blog post is about the “final” bug in this process, and one I
certainly wasn’t expecting.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;We’ll pick up the story from the point where I was working on my new &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.
In my mind, this was the only big thing that had changed in this design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt; hadn’t significantly changed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;It passed its self test&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It now passed
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
in &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;many different
configurations&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This verified instructions up to the input of the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;.  &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;All instructions
were known to be properly performed, the pipeline timing was known to not
drop or skip instructions, and for not inserting instructions.  Further,
the difficult part of making sure memory instructions were not issued
unless I was willing to commit to them had also been
verified&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had just recently found and fixed the bug that had prevented &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; from
starting at an arbitrary address.  &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/zipload.html&quot;&gt;The
loader&lt;/a&gt;
could now load a program and start it from any address–not just the reset
address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
simulator is supposed to be able to load any program into the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
bypassing the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/zipload.cpp&quot;&gt;loader&lt;/a&gt;.
This is primarily useful if you want to bypass writing to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; via the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp&quot;&gt;flash driver&lt;/a&gt;
using the cycle-accurate &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sim/verilated/flashsim.cpp&quot;&gt;flash simulator&lt;/a&gt;,
when you didn’t expect a bug in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; interaction.
Why wait to program the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;?
The only problem was that this simulation loader had a bug in
it that kept it from starting &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
at any address, restricting it to starting from the reset address only.&lt;/p&gt;

    &lt;p&gt;This bug had now been found and fixed, and the “WARNING” statement indicating
the presence of the bug has been removed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt; now has a new
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This one I knew worked.  I’d also
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
it, and ran it through
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulations&lt;/a&gt;,
so I could be confident that this worked.  Or … could I?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
passed its &lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt; tests&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was ready.  That was the easy part.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
updates, those were a bit harder.  I had now switched conventions
regarding how I referenced peripherals.  All peripherals at fixed addresses
now had names starting with an underscore like &lt;code class=&quot;highlighter-rouge&quot;&gt;_flash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_sdram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_clrleds&lt;/code&gt;,
and so forth.  These all had to be changed, and so the
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/master/sw/board&quot;&gt;ZipCPU
software&lt;/a&gt; all
needed to be adjusted.&lt;/p&gt;

&lt;p&gt;I also wanted to bring up the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
with fewer capabilities–just to work one by
one through them.  This meant a limited
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
build, but it also broke many of the programs that now depended upon
non-existant hardware registers–since they weren’t part of the limited
build.  This was easily fixed through the per-component &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; macros
provided by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, but
it still required software to be updated to use those macros.&lt;/p&gt;

&lt;p&gt;That brought me to the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new flash
controller&lt;/a&gt;.
I knew this &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
was ready, but not yet hardware proven.  That was okay, since I was going to
use this opportunity to verify my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new universal QSPI flash
controller&lt;/a&gt;
worked on real hardware, to finish testing the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp&quot;&gt;driver for
it&lt;/a&gt;
and to blog about it next.  I just needed to get it working–at 2x the clock
and data speeds.  I expected this to take a bit of work.&lt;/p&gt;

&lt;p&gt;Indeed, the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;
took a lot of work.  I struggled to &lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug471_7Series_SelectIO.pdf&quot;&gt;read and understand the timing of
both Xilinx’s &lt;code class=&quot;highlighter-rouge&quot;&gt;IDDR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ODDR&lt;/code&gt;
modules&lt;/a&gt;.
I was struggling with things like the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; writing properly, but not
reading properly.  Or, perhaps worse, it would read &lt;em&gt;mostly&lt;/em&gt; properly.  This
killed my
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/zipload.cpp&quot;&gt;loader&lt;/a&gt;,
since I would write the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
program to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and then
attempt to read my data back in order to verify
it was correctly written.  If the reads were only somewhat reliable, then my
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/flashdrvr.cpp&quot;&gt;flash driver&lt;/a&gt;
would always try to reprogram the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
This reprogramming happened nearly all the time, even when reloading the same
program with the same instructions, indicating that something was broken.&lt;/p&gt;

&lt;p&gt;This also left me wondering if
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was reading the right program from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a while, I went forward with this “broken”
&lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;flash controller&lt;/a&gt;
anyway.&lt;/p&gt;

&lt;p&gt;I got as far as the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;demonstration program that is designed to demonstrate the Arty’s 100MHz MII
ethernet port&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;This software&lt;/a&gt;
handles &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP
transactions&lt;/a&gt;, while
sending &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;pings&lt;/a&gt;
to a nearby host.  It’s also supposed to be able to respond to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;pings&lt;/a&gt;
request.  The program was failing.  For some reason it was locking
up mid-design.&lt;/p&gt;

&lt;p&gt;I figured it must be a problem with my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;new flash
controller&lt;/a&gt;.
Perhaps
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was misreading its instructions from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this post isn’t about the bug in the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;,
that can wait for a later post, it is important that you understand what was
going on because it sets the background for what follows.  Basically, I was
able to write anything I wanted to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
without any problems, but reads were unreliable.  It might
be that they were 99.99% reliable and then there would be a bit flipped.  I
figured this could only be a timing problem, and that I was going to need
to write and blog about how to build a synchronization circuit.&lt;/p&gt;

&lt;p&gt;In other words, when the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;network
program&lt;/a&gt;
failed, I had no idea where within the design to look for the problem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/maxslug&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAX BAXTER&lt;/code&gt; from twitter&lt;/a&gt; suggested
I change the drive strength on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  The
&lt;a href=&quot;https://www.micron.com/~/media/documents/products/data-sheet/nor-flash/serial-nor/n25q/n25q_128mb_3v_65nm.pdf&quot;&gt;Micron&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip has several
control registers, among them are the Extended Volatile configuration register
and the Extended Non-Volatile configuration register.  Both of these registers
can be used to adjust the drive strength in Ohms.  (Drive strength?  Shouldn’t
the units of drive strength be Amps and not Ohms?)  The first adjustment I
tried worked, and so my &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;,
was finally working!&lt;/p&gt;

&lt;p&gt;So the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;network ping
program&lt;/a&gt;
should too, right?&lt;/p&gt;

&lt;p&gt;Wrong.&lt;/p&gt;

&lt;p&gt;Okay, that was my last working hypothesis.  Now what’s wrong?&lt;/p&gt;

&lt;h2 id=&quot;symptoms&quot;&gt;Symptoms&lt;/h2&gt;

&lt;p&gt;So let’s start by taking stock of this situation.  My goal at this point is to
verify that the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v&quot;&gt;MII Ethernet
controller&lt;/a&gt;
was fully functional, even after redesigning the top level of the project to
use &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;Flash controller&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;My new flash controller&lt;/a&gt;
now worked.  It could read and write the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; at an SPI clock rate
twice what it was before, and now equal to the system clock rate.
If I wrote a design to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; at this point, I could
read it back at any time to verify the correct design has been written.&lt;/p&gt;

    &lt;p&gt;There were now no more differences between the data I wrote to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; and the data I read
back out, so I figured there were no more bugs in the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Packet transactions required to get a ping response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ping.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;My goal was to test whether or not I could send and receive packets
via the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet port&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I have a &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;“manual” approach to sending a packet and receiving a
packet&lt;/a&gt;.
This doesn’t use the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; at all,
but rather controls the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v&quot;&gt;networking
device&lt;/a&gt;
through the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging port&lt;/a&gt;.
I could even do this via a shell script if I wanted–only it’s harder to
calculate/verify a CRC from a shell script.  Indeed, this &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;manual ping
program&lt;/a&gt;
was how I originally built and tested the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v&quot;&gt;network
controller&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;manual approach&lt;/a&gt;
isn’t very useful for debugging a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;
interaction, though, since a proper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;
exchange requires an &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP
request&lt;/a&gt;, then
an &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP response&lt;/a&gt;,
followed by sending the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping packet&lt;/a&gt;
itself, as shown in Fig 3 on the right.  The &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/host/manping.cpp&quot;&gt;manual
approach&lt;/a&gt;
sends one packet and then waits until the first response is received.  This
isn’t enough to get a &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping
response&lt;/a&gt;
from my host machine.&lt;/p&gt;

    &lt;p&gt;What I really wanted to know, was whether the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping
response&lt;/a&gt;
was received from my host machine.  Once my desktop/host receives the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping
request&lt;/a&gt;
from my &lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;
board, it then needs to send an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP request&lt;/a&gt; to
my board, get an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP response&lt;/a&gt;,
and then finally return the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;That’s a lot of network transactions that are required just to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The good news is that you can debug what goes over the channel using
&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;.  Using
&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;, I discovered …&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;That the network wasn’t working at all initially.  I traced this down to
a failure to send the reference clock to the PHY chip in the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;That the &lt;a href=&quot;https://en.wikipedia.org/wiki/MAC_address&quot;&gt;MAC address&lt;/a&gt;
from my device was being left at zero.  I traced this down to what might
be a compiler issue.  (I’ll need to come back to this, as it’s been “fixed”
but hasn’t been fully chased down.)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;That my host computer is sending
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP responses&lt;/a&gt;,
but that they aren’t getting properly
received.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;These could all be fixed fairly easily, once I realized what was taking place.
Fixing these issues got me further along, just not quite there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Eventually, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; system
hangs and stops running.&lt;/p&gt;

    &lt;p&gt;I could tell this by using &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
variables&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As you may recall, I can &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;read and write any value within
my design&lt;/a&gt;
using &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; using in the
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; distribution accepts an
optional parameter telling it where to find a map file defining where all the
variables are in memory.  The map file itself is generated by the linker,
so there’s no extra work in that part.  As an example, I can read the
variable &lt;code class=&quot;highlighter-rouge&quot;&gt;user_heartbeats&lt;/code&gt; by running,&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;wbregs -m simple_ping.map user_heartbeats&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I knew my program had stopped once this number had stopped incrementing.
  This is also how I can (somewhat) tell what’s going on within my design even
  while a program is running, without needing to stop it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; hung, the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
also failed.  Indeed, if you bring up the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;,
it hangs waiting for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to respond to it.&lt;/p&gt;

    &lt;p&gt;This is disappointing.
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
isn’t supposed to work like that.&lt;/p&gt;

    &lt;p&gt;During this time, I can reset
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
to get into the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;,
but doing so causes the system flags and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
to get reset.  Hence, I can’t tell if
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode or user
mode&lt;/a&gt; when it crashed,
nor if it was in
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;
could I tell what the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt; was set to.&lt;/p&gt;

    &lt;p&gt;Looking at the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user
space&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
suggested that the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user space&lt;/a&gt;
program always stopped at a compressed instruction.  Had I looked closer,
I might have noticed that it wasn’t always stopping at the same compressed
instruction and realized the bug.&lt;/p&gt;

    &lt;p&gt;I wrote this evidence off as not clear enough to use.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ever been in this situation?&lt;/p&gt;

&lt;p&gt;Now let me ask, how would you approach debugging this issue?&lt;/p&gt;

&lt;h2 id=&quot;examining-the-tools&quot;&gt;Examining the tools&lt;/h2&gt;

&lt;p&gt;Let’s take a quick look at the tools we have available to work with to find
this bug.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Often the first method I turn to when I have a bug like this is “Voodoo
computing.”&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Defn: Voodoo Computer&lt;/p&gt;

      &lt;p&gt;To change what isn’t broken, in an effort to fix what is&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;In good voodoo programming fashion, I disabled the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;It didn’t help.&lt;/p&gt;

    &lt;p&gt;I tried playing with the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetctrl.v&quot;&gt;network control port&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;It didn’t help either.&lt;/p&gt;

    &lt;p&gt;In many ways, most of the on-line forum requests I find, on either Digilent’s
or Xilinx’s site, are Voodoo programming requests.  “I don’t know what’s
going on, so I changed something I didn’t understand, and now my design
still doesn’t work.”&lt;/p&gt;

    &lt;p&gt;Sure, “Voodoo computing” feels good, but it rarely leads you any closer to
understanding what is going on within the design.  On the other hand, your
likelihood of success with Voodoo computer is still better than your
likelihood of winning the lottery.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The other end of the spectrum of bug-fixing approaches is to guarantee that
you never have the bug in the first place.  That’s the purpose of both &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; and
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;My CPU&lt;/a&gt;
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;passed both formal
verification&lt;/a&gt;
and &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;simulation&lt;/a&gt;,
but was still failing in this instance.&lt;/p&gt;

    &lt;p&gt;Now what?  I went back and double checked the proof of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; and the
network control interface.  They still passed.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;While you might be able to
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;simulate&lt;/a&gt;
a commercial CPU, it is unlikely that you’ll ever be able to
get access to the code or formal properties necessary to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; one.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As I mentioned above, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
fails&lt;/p&gt;

    &lt;p&gt;Normally, I’d try to see what’s going on within the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;.
However, a failing
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
doesn’t help much.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Most commercial CPU’s have a debugger you can use.  Sometimes it helps.
Often, as in this case, it doesn’t since few debuggers can examine a
program struggling with interrupt and non-interrupt contexts.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;Global Variables&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;My &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
program contains a variety of &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
variables&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pkts_received&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replies_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_requests_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;arp_pkt_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_pkt_invalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;arp_missed_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arp_non_broadcast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ip_pkts_received&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_pkts_invalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;icmp_echo_requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icmp_invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ping_reply_address_not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ping_replies_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ping_reply_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_tx_packets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;user_heartbeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I do this on purpose.  Each of these particular variables is a
  counter of some type.  I can then use them to see if or when things
  are happening with &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; or not.&lt;/p&gt;

&lt;p&gt;By compiling my &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
  program with the linker flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wl,-Map=simple_ping.map&lt;/code&gt;, the linker will
  then create a file for me containing the final addresses of all these
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variables&lt;/a&gt;.  Indeed,
  this is the very reason why they are
  &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global&lt;/a&gt;&lt;/em&gt; and not
  &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/Local_variable&quot;&gt;local&lt;/a&gt;&lt;/em&gt;
  variables: so that they will have a fixed address in memory.&lt;/p&gt;

&lt;p&gt;If you scroll through this map file, you’ll find lines looking like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; .bss           0x000000000700c490       0x68 obj-zip/simple_ping.o
                0x000000000700c490                gbl_picv
                0x000000000700c494                subbeats
                0x000000000700c498                heartbeats
                0x000000000700c49c                pkt_id
                0x000000000700c4a0                router_mac_addr
                0x000000000700c4a8                ping_rx_count
                0x000000000700c4ac                ping_tx_count
                0x000000000700c4b0                ping_mac_addr
                0x000000000700c4b8                user_heartbeats
                0x000000000700c4bc                user_tx_packets
                0x000000000700c4c0                ping_reply_err
                0x000000000700c4c4                ping_replies_sent&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These lines are created as the linker places the
  &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
  object file into my executable.  At that time, these variables can be found
  within the
  &lt;a href=&quot;https://en.wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;.
  Once these values are placed within the final executable, their addresses
  are then given on the left hand side, with the variables names on the right.&lt;/p&gt;

&lt;p&gt;Originally, I would read values from this list by looking up their addresses
  and then reading them with my &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt;
  command&lt;/a&gt;.
  This command implements a basic &lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;peek/poke
  capability&lt;/a&gt;
  within the design.  The result might look something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./wbregs 0x0700c498
0700c498 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] 00000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would tell me that
  &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
  had never gotten to the &lt;code class=&quot;highlighter-rouge&quot;&gt;heartbeats++&lt;/code&gt; statement, and so I could
  track down what was taking place across interrupts even–without
  needing to disturb the running &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this case, I knew
  &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
  was failing.  These &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
  variables&lt;/a&gt; gave me a good
  idea of &lt;em&gt;where&lt;/em&gt; it was failing.  I just had no idea &lt;em&gt;why&lt;/em&gt; it was failing.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This approach would work well with any CPU, commercial or otherwise,
as long as your design has some form of
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
within it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BREAK statements&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; supports a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;break instruction,
&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;&lt;/a&gt;.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction takes an optional immediate value, although
it doesn’t do anything different between one immediate value and any
other.  When
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
encounters a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction&lt;/a&gt;
in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;,
all processing halts and waits for the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
to rescue it.  If
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
encounters a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction&lt;/a&gt;
in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;user mode&lt;/a&gt;,
you can choose to have the statement halt
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
(the default), or just to return to
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;A &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction&lt;/a&gt;
can be added to any program by just calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_break()&lt;/code&gt; function from
your C/C++ source code.  This function call is treated specially by the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; GCC back end, which then
places a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;
instruction&lt;/a&gt; at that
point in the instruction stream.&lt;/p&gt;

    &lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Steps to Executing a Break-point&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/breakpoint.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;My intent has always been to &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;integrate this statement into the
debugger&lt;/a&gt;,
so that the &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;debugger can create break points to help debug a
program&lt;/a&gt;.
The debugger could then replace any user instruction with a &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;
instruction to create a breakpoint.  In order to continue,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would then return the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction to its original value and then step
forward by one instruction.  It could then replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt;
instruction so as to re-enable the breakpoint the next time it is seen.
This is still on my to do list, however.&lt;/p&gt;

    &lt;p&gt;Even without &lt;a href=&quot;/zipcpu/2017/07/14/cpu-debugging-needs.html&quot;&gt;break-point support in the
debugger&lt;/a&gt;,
break points have been one of my “go-to” approaches to debugging.  If you
know &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; hangs, you can often
bisect your code with &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; statements to slowly figure out where
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; hangs.  If it hits the
breakpoint, then the hang must’ve occurred after that instruction.&lt;/p&gt;

    &lt;p&gt;Because the break points are not (yet) supported by the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;,
though, you currently need to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction by recompiling
your program and reloading it.  It’s not pretty, but it works.&lt;/p&gt;

    &lt;p&gt;In this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction stopped
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
long before the problem.  So, it didn’t help (much).&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Many commercial CPUs have break point support as well.  This support
is usually integrated into the debuggers, and unavailable from the
compiler.  However, debuggers in general tend to struggle to handle
designs with interrupt contexts.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LEDs&lt;/p&gt;

    &lt;p&gt;We’ve discussed &lt;a href=&quot;/blog/2017/05/19/blinky.html&quot;&gt;using LEDs for debugging before&lt;/a&gt;.
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
can set the LEDs to any particular value of interest, and you can then use
the value of the LED register once
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
hangs to figure out where
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
hung, or in what kind of state it was in.  This is much like the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variables&lt;/a&gt; approach
listed earlier, save that LEDs can be used without the
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;debugging bus&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;one example&lt;/a&gt;, I set an LED on entering
an interrupt routine and cleared it on leaving the routine.  Seeing a dimly
lit LED was then my indication the design was still running.  In that
example, when/if the design halted, I could clearly see what state
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
was in at the time.&lt;/p&gt;

    &lt;p&gt;For this particular design, the LEDs got me closer.  Indeed, I was
able to bisect the code down to the loop where it failed.  It just
wasn’t close enough for me to figure out where the bug was coming from.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;This approach would also work nicely when debugging with any commercial CPU&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;Watchdog timer&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;I’ve often been successful debugging a design by using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt;.  My &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt; is essentially
identical to the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer we’ve discussed
earlier&lt;/a&gt;, with one
critical exception: when the timer goes off,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is reset.  You can then create a special bootloader to learn something about
what happened.&lt;/p&gt;

    &lt;p&gt;The trick to using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog timer&lt;/a&gt; is to sprinkle your code with
commands to set the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;count-down
timer&lt;/a&gt;
to some number greater than zero.  Once the timer reaches zero,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
resets.  In my case, this meant that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would halt, since I had it configured to halt on reset.&lt;/p&gt;

    &lt;p&gt;This approach may have been most useful to me when debugging my
&lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;S6SoC design&lt;/a&gt;, where I couldn’t fit the
&lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;debugging bus&lt;/a&gt;
into the design.  Once the &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt; would go off, &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; would read out to the
serial port the values from the internal
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone Scope&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/sw/dev/resetdump.s&quot;&gt;routine to do this was carefully hand-crafted in
assembly&lt;/a&gt;,
so that I could be sure nothing would over-write any critical portions of
the previous state.&lt;/p&gt;

    &lt;p&gt;I liked that debugging approach so much, that nearly every CPU design I’ve
put together since has had a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
connection within it.&lt;/p&gt;

    &lt;p&gt;In this case, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Watchdog_timer&quot;&gt;watchdog
timer&lt;/a&gt; felt useful but didn’t
provide me with any of the key information I needed to debug the problem.&lt;/p&gt;

    &lt;p&gt;I needed more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5: Looking back into the past&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/scope-past.svg&quot; alt=&quot;A scope that looks back in time&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This brings me back to my &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As you may remember, the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
is a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;-based scope.
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;It records any data you send it, and then stops some time following a
trigger&lt;/a&gt; after which
you’ll need to read the data out via the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;.  It
is not a JTAG scope, such as Xilinx’s ILA, but rather a scope that acts more
like an integrated peripheral to the design.  This means that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
can configure it as part of any program it might be running.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
has three big limitations.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;First, since it is a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;-based
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;,
your design needs a working and dependable peripheral
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
within it in order for it to work.&lt;/p&gt;

        &lt;p&gt;While the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone scope&lt;/a&gt;.
was built around the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;, I have other
versions for both Avalon and
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; busses.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Second, because it is a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;-based
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;,
it can only capture the width of the data
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; on every clock
period.  Since &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;my busses are all
32-bits wide&lt;/a&gt;,
this &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
will only ever capture 32-bit debugging words at any given time.&lt;/p&gt;

        &lt;p&gt;Yes, I keep telling myself that it would be easy to strap two
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scopes&lt;/a&gt;
together, but the reality is that I have never done the software work
necessary to make that possible.&lt;/p&gt;

        &lt;p&gt;But what to capture?  I’d like to capture every time a register is written,
both the name of the register (5-bits) and the value written to it
(32-bits).  This busts my 32-bit limit, and I’m not even done with my
requirements yet.  I’d also like to capture &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; requests.  In the case of
a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; read, I’d like to capture the read address (32-bits) and the
returned value (32-bits, but on a later clock).  In the case of a write,
I’d want to capture both the address (32-bits) and data written to the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
(another 32-bits).  I’d
also like to be able to “see” how long it takes the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; to return a value
(i.e. CYC, STB, WE, STALL, and ACK, or about 5 bits).
What else?  I’d definitely like to capture any branch targets (32-bits),
as well as all of the internal pipeline control flags within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;.&lt;/p&gt;

        &lt;p&gt;It should be pretty obvious that all of this information won’t fit within
a 32-bit word.&lt;/p&gt;

        &lt;p&gt;My current solution to this problem is to multiplex several words together
depending upon the conditions.&lt;/p&gt;

        &lt;p&gt;a. If &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; is
   halted, set the 32’bits to be the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline control
   signals&lt;/a&gt;.&lt;/p&gt;

        &lt;p&gt;b. If a register is written, record which register within
   &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;the set&lt;/a&gt;,
   and 26-bits of that registers value&lt;/p&gt;

        &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 6: Looking back into the past&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-dbg-reg.svg&quot; alt=&quot;Capturing any register writes&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

        &lt;p&gt;Fig 6. above shows the format of this word.  It starts with a &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;
   bit, to indicate if this was the word that triggered the scope.  The
   &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; following identifies this encoding.  It’s then followed by 4-bits
   identifying the register, and then 26-bits of the registers value.&lt;/p&gt;

        &lt;p&gt;c. Anytime the pipeline is cleared, such as if we are jumping to a new
   address, record the bottom 28 bits of the address.  (Ignore the subword
   address bits, though, since the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can only jump to addresses on
   word boundaries.)&lt;/p&gt;

        &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 7: On any jump, record the jump address&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-dbg-branch.svg&quot; alt=&quot;Recording the branch address&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

        &lt;p&gt;d. Otherwise, if there is a memory operation taking place this cycle,
   return 27-bits of the data being written (if it is a write cycle),
   otherwise return 27-bits of the address.&lt;/p&gt;

        &lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 8: On any memory operation, record either the address or the value&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-dbg-memory.svg&quot; alt=&quot;Recording a memory operation&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

        &lt;p&gt;e. Finally, if all else fails, just record the internal &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;CPU pipeline
   control signals&lt;/a&gt;.&lt;/p&gt;

        &lt;p&gt;These get kind of cluttered, so I’m not going to try to draw them here.
   Feel free to check out how &lt;code class=&quot;highlighter-rouge&quot;&gt;dbg_flags&lt;/code&gt; are set &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;within the
   ZipCPU&lt;/a&gt;
   if you are interested.&lt;/p&gt;

        &lt;p&gt;That’s four different possibilities, all nearly 32-bits in size.  The
first couple bits of each of these possibilities, stored in the MSBs,
are used to decode which of these possibilities was recorded.&lt;/p&gt;

        &lt;p&gt;One sad reality, though, is that my &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD writing
script&lt;/a&gt;
can’t handle non-constant bit-mappings.  In other words, when I need to
examine the captured data, I’ll end up looking at an ad-hoc textual
(&lt;a href=&quot;http://www.cplusplus.com/reference/cstdio/printf/&quot;&gt;printf&lt;/a&gt;) output
describing what’s going on.&lt;/p&gt;

        &lt;p&gt;It works, but it isn’t pretty.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The third limitation with any &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal logic
analyzer&lt;/a&gt;,
whether it be a &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone
Scope&lt;/a&gt;
or something else, is that the size of the memory buffer has to
compete with any other &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
RAM&lt;/a&gt;
requirements within the design.&lt;/p&gt;

        &lt;p&gt;In other words, even though the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;Wishbone Scope&lt;/a&gt;
can record values from within any design at the speed of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPUs&lt;/a&gt; clock, it cannot
do so for very long.  The only way to capture relevant data therefore is
to use some kind of trigger signal in order to tell us when to
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;stop recording&lt;/a&gt;,
as I illustrated in Fig. 5 above.&lt;/p&gt;

        &lt;p&gt;The other unfortunate consequence of adding a
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
into a design is that you might &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;need to adjust how much block
RAM&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; has available to it.
Using &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
this is the easy part.  &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;One value controls the size of the block
RAM&lt;/a&gt;, and
re-running &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
will adjust the address space, adjust the pointer of where the block
RAM is located that’s used by the bootloader, and &lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;build us a new linker
script&lt;/a&gt;
to be used when we’re using this smaller amount of block RAM.  Then, later,
when we remove the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
and change the block RAM usage number back,
we’ll return to our prior/original configuration.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;As with adjusting the block RAM size, the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; size can also
be adjusted by just changing a single number in the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/cpuscope.txt&quot;&gt;configuration&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Even better, the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
can be added (or removed) but just adding (or removing) the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;’s
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/cpuscope.txt&quot;&gt;configuration filename&lt;/a&gt;
to/from the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/Makefile&quot;&gt;command line&lt;/a&gt;.
All of the files then depending upon the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; can be rebuilt,
and pre-processor macros will be set so they can be built knowing whether or
not the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; is
built into the design or not.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, it was the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;,
together with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;,
that finally helped me find the bug.&lt;/p&gt;

&lt;p&gt;To do this, I had to modify the trigger for the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;.  That’s the
next part of this story.&lt;/p&gt;

&lt;p&gt;Normally, I have &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;’s
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; trigger off of
any internal exception that would cause
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; to halt unnaturally.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This wouldn’t work in this case, because the whole problem was that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; hung without properly halting.&lt;/p&gt;

&lt;p&gt;So I adjusted my trigger logic.  I chose to count the number of clocks
since the last valid instruction retired.&lt;/p&gt;

&lt;p&gt;Within the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, any time a
non-memory instruction retires, it sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;alu_pc_valid&lt;/code&gt; flag.  This tells
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;the CPU&lt;/a&gt;
that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
needs to be updated.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;alu_pc_valid&lt;/code&gt; isn’t true for many cycles, then
we can conclude that &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
must be hanging.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Look for a hang of 2048 cycles
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;debug_trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the idea.&lt;/p&gt;

&lt;p&gt;The problem is that I only want to know when
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; &lt;em&gt;hangs&lt;/em&gt;.  What if it hasn’t
been started in the first place?  What if I stop it in the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;?
What if &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is in &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;sleep mode waiting for an
interrupt&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;I needed to adjust the counter just slightly to avoid these cases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;        &lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg_trigger_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; will trigger after 2048 clocks of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
not updating the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But would this trigger on the bug?&lt;/p&gt;

&lt;h2 id=&quot;the-trace-result&quot;&gt;The Trace Result&lt;/h2&gt;

&lt;p&gt;Yes, the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
triggered!  The next time I ran
the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
program on &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; it hung as I hoped
and expected.  As a result, I could check the trace capability and see that,
yes, the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; had
triggered and there was a trace waiting for me.  (Yes, I’m skipping over
writing the software to read from the
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; and to decode
its results–&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;we’ve already discussed that
before&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Since we are working with text, and not
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD files&lt;/a&gt;, every line shows one
more clock step of what’s going on.  The lines will start with the location
within the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;’s
buffer, followed by the 32’bit word located there.  After that, the line
follows a custom ad-hoc decoding script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6059 04012512:      R1 &amp;lt;- 0x.0012512
     6060 0c7b3cd9:      R3 &amp;lt;- 0x.07b3cd9
     6061 0c7b3cda:      R3 &amp;lt;- 0x.07b3cda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll pick it up at line 6059 out of 8191.  While it can be annoying to page
through thousands of lines of output just looking for the bug, in this case,
the bug was at the bottom of the trace.  Further, once
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
halted, all the trace words were identical–making it easy to quickly scan
about two pages of information from the bottom of the trace to find the
bug.&lt;/p&gt;

&lt;p&gt;At line 6059, the trace looks fairly normal.
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
simply writes to registers &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;R3&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;R3&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Then there is a cycle where nothing is written to the registers.  This is
likely the result of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt; (compare) instruction.  Such an instruction
consumes one clock, but doesn’t write to any register values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6062 5885b440:      FLAGS 5885b440 CE[DOA ] V[PDO ] MCE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 9: Pipeline stages of the ZipCPU&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.svg&quot; alt=&quot;Pipeline steps of the ZipCPU&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAGS&lt;/code&gt; response contains a large bit-field.  To help understand it,
I’ve shown a model of the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;ZipCPU pipeline&lt;/a&gt; in
Fig. 9 on the right.&lt;/p&gt;

&lt;p&gt;I’ve tried to break out some of the trace fields in the line above.
For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;V[*]&lt;/code&gt; section tells me which pipeline stages have &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;valid
entries within them: the prefetch, decode, and read-operands
stage&lt;/a&gt;.  It also tells
me that the master CE (&lt;code class=&quot;highlighter-rouge&quot;&gt;MCE&lt;/code&gt;) signal, the signal that controls whether any
instruction transitions from the read operands stage to the execution units,
is high.  Given that we have valid instructions, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MCE&lt;/code&gt; is high, &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the
CPU&lt;/a&gt; is running at this trace point.
Finally, the trace line shows me &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;which pipeline stages are advancing.  These
are the ones with their respective &lt;code class=&quot;highlighter-rouge&quot;&gt;*_ce&lt;/code&gt; flags
high&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;As we discussed
before&lt;/a&gt;, the
basic pipeline operation follows as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prior_stage_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stage_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Copy data from the previous pipeline
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// stage to this stage, operating on it as
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// necessary
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the stage’s &lt;code class=&quot;highlighter-rouge&quot;&gt;CE&lt;/code&gt; line is high, the instruction moves from the previous
stage into the current stage stage.&lt;/p&gt;

&lt;p&gt;In this case, instructions will be advancing from the &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt;refetch to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;ecode stage, from the &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;ecode stage to the read &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;perands stage, and
from the read &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;perands stage to the &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;LU stage.  That’s the meaning of
the cryptic &lt;code class=&quot;highlighter-rouge&quot;&gt;CE[DOA ]&lt;/code&gt; field.  This is all good: the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt; is full,
and &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
is operating normally–it just so happens that it is not writing to any
register values on this cycle.  Again, this is normal.&lt;/p&gt;

&lt;p&gt;Following the compare (&lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt;) instruction, there’s a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch instruction&lt;/a&gt;.
This shows up as taking two clocks.  The first one is where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
is given a new value.  This is the same register write format we discussed
above in Fig. 6.  The second line shows where
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
actually sets the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;clears the pipeline&lt;/a&gt;.
This is the same format we showed in Fig. 7 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6063 3e801814:      PC &amp;lt;- 0x.2801814
     6064 41a00605:      JMP 0x06801814&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, we can finally identify where in the program code we are at.
By examining the disassembly of our
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;simple_ping&lt;/a&gt;
program, we find that we are in a tight loop waiting for a network packet to be
received, or for the seconds-hand on the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt; to advance.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;	while(((_netp-&amp;gt;n_rxcmd &amp;amp; ENET_RXAVAIL)==0)
				&amp;amp;&amp;amp;(_rtc-&amp;gt;r_clock == rtc))
			user_heartbeats++;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here you can see where I set one of those &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global
variables&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;user_heartbeats&lt;/code&gt;.
This allowed me to tell, when using the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_variable&quot;&gt;global variable&lt;/a&gt;
debugging approach, when the program was hung, since this value would stop
changing.&lt;/p&gt;

&lt;p&gt;Following the conditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
needed to &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;clear its
pipeline&lt;/a&gt;.  This
required a couple of clock cycles, which are shown in the trace lines below.
As before, the &lt;code class=&quot;highlighter-rouge&quot;&gt;CE[]&lt;/code&gt; block shows which pipeline stages, &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;ecode, &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;perands,
or &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;LU are accepting data, whereas the &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt;alid block shows which stages
actually have valid instructions within them.  Hence, we are now watching
a new instruction stream move into the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;.
The first of these new instructions will eventually write to the &lt;code class=&quot;highlighter-rouge&quot;&gt;R2&lt;/code&gt; register,
as shown below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6065 58810000:      FLAGS 58810000 CE[D   ] V[    ] MCE
     6066 58850000:      FLAGS 58850000 CE[D   ] V[P   ] MCE
     6067 5885a000:      FLAGS 5885a000 CE[DO  ] V[PD  ] MCE
     6068 5885b400:      FLAGS 5885b400 CE[DOA ] V[PDO ] MCE
     6069 087b3cda:      R2 &amp;lt;- 0x.07b3cda&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next instruction is a
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;load word instruction&lt;/a&gt;.
This instruction issues a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt;
transaction to read from location &lt;code class=&quot;highlighter-rouge&quot;&gt;0x03800000&lt;/code&gt; in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6070 70e00000:      MEM-R[0x.3800000] -&amp;gt; (Not Givn) (GBL)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;
hasn’t captured all 32-bits of that address, I can infer it from the fact
that my design doesn’t have more than 27-bits of address space,
and so the number of bits is sufficient.&lt;/p&gt;

&lt;p&gt;This read polls the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v&quot;&gt;network
interface&lt;/a&gt;,
to query if any packets have been read.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;(GBL)&lt;/code&gt; flag indicates that this read is from the global address space,
rather than the processor’s local peripheral address space.&lt;/p&gt;

&lt;p&gt;As you might imagine, reading a value from the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus&lt;/a&gt; stalls the
processor.  While there are waiting instructions in the prefetch, decode,
and read operands stages, nothing moves forward until this result comes
back–lest &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt; need to undo and
re-perform any instructions.  (The
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is not an
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Out-of-order_execution&quot;&gt;out-of-order&lt;/a&gt;”
machine.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6071 5884d00c:      FLAGS 5884d00c CE[    ] V[PDO ] MCE DCD-STALL MEM-BUSY&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While it is waiting, we get another flags trace line.  In this case, we can see
that the memory unit is busy, &lt;code class=&quot;highlighter-rouge&quot;&gt;MEM-BUSY&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;DCD-STALL&lt;/code&gt; is an indication that
there is an instruction in the decode stage of our
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
that is stalled.  We’ll come back to this later.&lt;/p&gt;

&lt;p&gt;The memory instruction takes about five clock cycles.  During this
time, nothing changes within &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;,
and so the &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;wishbone
scope&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/host/cpuscope.cpp&quot;&gt;control program&lt;/a&gt;
outputs the line &lt;code class=&quot;highlighter-rouge&quot;&gt;**** ****&lt;/code&gt; so we can tell that nothing is changing.&lt;/p&gt;

&lt;p&gt;Once the memory read operation is complete, the result is written to &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; **** ****
     6076 04020000:      R1 &amp;lt;- 0x.0020000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far this all looks good.  We haven’t hit the bug yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt;
then issues an
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;AND instruction&lt;/a&gt;,
to check whether or not the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/rtl/enetpackets.v&quot;&gt;network
interface&lt;/a&gt;
has received any packets.
The result of this instruction is zero: there are no pending packets waiting.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6077 04000000:      R1 &amp;lt;- 0x.0000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Based upon the zero flag, we then hit a conditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;,
and so we need to clear and load the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt; again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6078 3e80182c:      PC &amp;lt;- 0x.280182c
     6079 41a0060b:      JMP 0x0680182c
     6080 58810000:      FLAGS 58810000 CE[D   ] V[    ] MCE
     6081 58850000:      FLAGS 58850000 CE[D   ] V[P   ] MCE
     6082 5885a000:      FLAGS 5885a000 CE[DO  ] V[PD  ] MCE
     6083 5885b020:      FLAGS 5885b020 CE[DO M] V[PDO ] MCE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time, we’re going to read from address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x05800060&lt;/code&gt;: the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;real-time clock&lt;/a&gt; register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6084 71600018:      MEM-R[0x.5800060] -&amp;gt; (Not Givn) (GBL)
     6085 5884d00c:      FLAGS 5884d00c CE[    ] V[PDO ] MCE DCD-STALL MEM-BUSY
 **** ****
     6090 04012512:      R1 &amp;lt;- 0x.0012512&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x012512&lt;/code&gt;, from the
&lt;a href=&quot;https://github.com/ZipCPU/rtcclock&quot;&gt;clock&lt;/a&gt;
is in &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary-coded_decomal&quot;&gt;Binary Coded Decimal, or
BCD&lt;/a&gt;.  You might
read it as &lt;code class=&quot;highlighter-rouge&quot;&gt;1:25:12&lt;/code&gt;.  It indicates that it has now been one hour, twenty five
minutes, and twelve seconds since this design was initially loaded.  (No,
I never set the clock to real time–I was more focused on debugging all
this time.)&lt;/p&gt;

&lt;p&gt;Again, so far this looks normal.&lt;/p&gt;

&lt;p&gt;Then something different happens.  The trace ends.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     6091 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL
 **** ****
     8127 d884d000: TRIG FLAGS d884d000 CE[    ] V[PDO ] MCE DCD-STALL &amp;lt;--- TRIGGER
     8128 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL
 **** ****
     8191 5884d000:      FLAGS 5884d000 CE[    ] V[PDO ] MCE DCD-STALL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the trace location values: 6091, 8127, 8128, and then 8191.  These are
key.  &lt;code class=&quot;highlighter-rouge&quot;&gt;6091&lt;/code&gt; is expected–that’s the next clock cycle.  &lt;code class=&quot;highlighter-rouge&quot;&gt;8127&lt;/code&gt; is unexpected.
That means that we just spent 2036 cycles &lt;em&gt;doing nothing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Wait, I thought we set
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
to count 2048 cycles before setting the trigger on our
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;?
How did the count end up at 2036?&lt;/p&gt;

&lt;p&gt;It ended up at 2036 because we only counted
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
results, not results from the memory unit.  Our last valid
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
result was on cycle 6078, we we’re still good here.&lt;/p&gt;

&lt;p&gt;Or rather, we’re not good here:
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
just stopped.&lt;/p&gt;

&lt;p&gt;The good news is that we know what instruction we were executing.  If you run
&lt;code class=&quot;highlighter-rouge&quot;&gt;objdump&lt;/code&gt; on our executable, you can see an assembly listing showing the
instruction we just completed, and the context around it.  To generate a
listing, just type,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;zip-objdump -S -D simple_ping &amp;gt; simple_ping.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, I find listings of this type so valuable when debugging, that I have a
special &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target just to create
listings.  The target looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;%.txt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(OBJDUMP)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -S -D $^ &amp;gt; $@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will get turned into the command above any time I type&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make simple_ping.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;Make&lt;/a&gt; is smart enough to recognize, when I
type this, that if the source code for &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_ping&lt;/code&gt; has changed then it needs
to be rebuilt before dumping the assembly to &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_ping.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, I’ve recompiled this routine since capturing my trace.  As a result,
the assembly below that matches the loop in question doesn’t quite match
the trace.  Still, this was roughly the instruction we halted on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 7001808:	84 a8 97 88 	LW         (R5),R0        | MOV        R1,R2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The critical piece of this disassembly is that we were trying to execute a
two-instruction word, containing both a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;load word
instruction (&lt;code class=&quot;highlighter-rouge&quot;&gt;LW&lt;/code&gt;)&lt;/a&gt;
followed by a &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;register copy
(&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;) instruction&lt;/a&gt;.
(&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;assembly&lt;/a&gt;
reads left to right, hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt; instruction copies &lt;code class=&quot;highlighter-rouge&quot;&gt;R1&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;R2&lt;/code&gt;.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 10: ZipCPU ISA Quick Reference Sheet&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/nextgen.png&quot;&gt;&lt;img src=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/nextgen.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I introduced the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU
ISA&lt;/a&gt;,
I didn’t say much about compressed instructions.  Now, however, you need
to know a little bit about them to know what’s going on.  Fig. 10 at the right
shows my quick reference sheet of
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
instructions.  The first line shows the basic format of most instructions.
The second line shows the format of a compressed instruction.  It starts with
a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; in the MSB, followed by fifteen bits containing the first instruction,
an unused bit, then fifteen bits containing the second instruction.  The
opcodes for these compressed instructions are shown in the top half of the
third column: &lt;code class=&quot;highlighter-rouge&quot;&gt;SUB&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMP&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LW&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SW&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LDI&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; compressed instructions are
a little different from other architectures, because you cannot jump halfway
into a word.  All instruction words, whether compressed or not, are all word
aligned.  The assembler handles the compression, making certain for example that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branch&lt;/a&gt;
targets never get compressed into the middle of a compressed instruction word.&lt;/p&gt;

&lt;p&gt;Further, the 
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; disassembler displays both
instructions within a compressed instruction word on the same line, using
a &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; to separate them–as shown above.&lt;/p&gt;

&lt;p&gt;This will all come into play in a moment.&lt;/p&gt;

&lt;p&gt;From the trace we know that we executed the &lt;code class=&quot;highlighter-rouge&quot;&gt;LW&lt;/code&gt; instruction, but that the
&lt;code class=&quot;highlighter-rouge&quot;&gt;MOV&lt;/code&gt; instruction never made it into the execution unit(s).&lt;/p&gt;

&lt;p&gt;Why not?  What happened?&lt;/p&gt;

&lt;h2 id=&quot;moving-from-trace-to-bug&quot;&gt;Moving from trace to bug&lt;/h2&gt;

&lt;p&gt;When I finally got to this point, I had no idea why
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
might stall like that.&lt;/p&gt;

&lt;p&gt;Yes, it is
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;my CPU&lt;/a&gt;.  Yes, I did write &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;the code
for it&lt;/a&gt;.  Yes,
the &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;stall logic&lt;/a&gt;
is all my own handiwork.  Yes, I did just create this trace.  However,
when a design gets over 2500 lines, when you wrote it years ago, when
it has multiple options it can be built with …  it can become difficult
to remember all the details.  Worse, even if you do remember them, do
you know why this happened?&lt;/p&gt;

&lt;p&gt;So I turned to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead of proving that &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
“worked”, I wanted to prove that &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would never stall like this.  Hence, I wanted to say that: if there’s an
instruction in the read-operands stage,
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
should always proceed to the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;execution stage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So how might we write such an assertion?&lt;/p&gt;

&lt;p&gt;Well, if there’s a valid instruction in the read-operands stage, then it should
proceed to the execution stage, right?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;adf_ce_unconditional&lt;/code&gt; says the instruction will move forward into the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ALU&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DIV&lt;/code&gt;ide or (not-yet-written) &lt;code class=&quot;highlighter-rouge&quot;&gt;FPU&lt;/code&gt; (floating point unit), whereas
&lt;code class=&quot;highlighter-rouge&quot;&gt;mem_ce&lt;/code&gt; says the instruction will move into the memory unit.&lt;/p&gt;

&lt;p&gt;Only, that’s not quite right.  We don’t want to move forward if the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging unit&lt;/a&gt;
has requested that we halt.  In that case, &lt;code class=&quot;highlighter-rouge&quot;&gt;master_ce&lt;/code&gt; will be low.
We also don’t want to move forward on a reset, or anytime the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
is cleared.  Further, we don’t want to move to the execution stage
if any of the execution units is busy and its result might affect one
of our operands.&lt;/p&gt;

&lt;p&gt;So, let’s adjust our assertion.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This assertion fails.&lt;/p&gt;

&lt;p&gt;It has?  Aha!  Have I found my bug?&lt;/p&gt;

&lt;p&gt;I pulled up the trace to look.  This time, it’s a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
created by &lt;a href=&quot;https://symbiyosys.readthedocs.io&quot;&gt;SymbiYosys&lt;/a&gt;.  Not, this
assertion hasn’t found the bug.  Instead, all I found were examples of
other reasons why the instruction shouldn’t move forward.&lt;/p&gt;

&lt;p&gt;The execution units shouldn’t accept any more instructions if …&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If this is a &lt;code class=&quot;highlighter-rouge&quot;&gt;BREAK&lt;/code&gt; instruction, &lt;code class=&quot;highlighter-rouge&quot;&gt;op_break&lt;/code&gt;, the pipeline needs to stop just
before the instruction gets to the execution unit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
has halted on an error, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_break&lt;/code&gt; will be true and we’ll need to
make sure we are halted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we just retired an illegal instruction, we need to halt.  Similarly, if
the last memory instruction returned a bus error then we need to halt as
well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If there’s an interrupt pending or a trap was just executed,
&lt;code class=&quot;highlighter-rouge&quot;&gt;w_switch_to_interrupt&lt;/code&gt; will be true and we’ll need to switch to
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;supervisor mode&lt;/a&gt;.
In this case, the instruction in the read operands stage won’t move forward
into any of the execution units either.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list goes on.  In the end, I was surprised at how long it was.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_pc_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpu_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_switch_to_interrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alu_illegal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ibus_err_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ill_err_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idiv_err_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adf_ce_unconditional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, however,
&lt;a href=&quot;https://symbiyosys.readthedocs.io&quot;&gt;SymbiYosys&lt;/a&gt;
had found my bug for me.&lt;/p&gt;

&lt;p&gt;The problem was specific to the compressed instruction word.  In the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ISA&lt;/a&gt;,
two instruction words may optionally be packed into one, and the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has no ability
to restart any instructions mid-word (currently).  I may need to come back
and “fix” this later, but the approach was chosen to simplify the
instruction decoder: all instruction words start on word boundaries, some
instruction words contain two instructions.&lt;/p&gt;

&lt;p&gt;This was why the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt; failed:
it had to wait for the second part of the compressed instruction word to
complete before
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would halt, since there is (currently) no way to restart
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
mid-instruction word.&lt;/p&gt;

&lt;p&gt;This also means that I cannot jump into an interrupt mid-word.
The internal flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;w_switch_to_interrupt&lt;/code&gt; properly captures this logic.
The stall signal, however, did not.  That meant that any time the interrupt
signal went high in the middle of a two-instruction word, the interrupt logic
would wait for the second instruction to complete while the stall logic would
prevent the second instruction from starting.&lt;/p&gt;

&lt;p&gt;The conflicting logic lead to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Deadlock&quot;&gt;deadlock&lt;/a&gt; causing
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
to hang.&lt;/p&gt;

&lt;p&gt;The fix was simple: add a check to the stall logic so that we only stall
if an interrupt is pending &lt;em&gt;and&lt;/em&gt; we are on a single-instruction word or the
second instruction of a double-instruction word.&lt;/p&gt;

&lt;p&gt;Once fixed, my
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/simple_ping.c&quot;&gt;network ping program&lt;/a&gt;
worked as intended again.&lt;/p&gt;

&lt;h2 id=&quot;wasnt-the-cpu-formally-verified&quot;&gt;Wasn’t the CPU Formally Verified?&lt;/h2&gt;

&lt;p&gt;Some time ago, I wrote about &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;all of the bugs I found when formally verifying
this CPU&lt;/a&gt;.
I even went to &lt;a href=&quot;https://www.youtube.com/watch?v=7DHV_rJKSgo&quot;&gt;ORCONF 2018 to discuss all of the lessons I learned
while going through this process&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shouldn’t
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
have caught this bug?&lt;/p&gt;

&lt;p&gt;Yes, I suppose it should have.&lt;/p&gt;

&lt;p&gt;Why didn’t it?&lt;/p&gt;

&lt;p&gt;Because I never created a property asserting that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
would never stall indefinitely.&lt;/p&gt;

&lt;p&gt;I’ve now gone back to the proof and added a similar property to ensure that
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
will never stall in the decode stage either.&lt;/p&gt;

&lt;p&gt;This wasn’t the first time I found a bug in my now
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verified&lt;/a&gt;
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.
The first time was when I tried setting the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt; from the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging port&lt;/a&gt;.
You may recall, I mentioned fixing this bug above.  This oversight happened
for the same reason: My initial set of formal properties was incomplete.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;The CPU&lt;/a&gt; now has a set of debugging
interface properties, “proving” that the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugger&lt;/a&gt;
can set and adjust the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;’s state.&lt;/p&gt;

&lt;h2 id=&quot;what-about-simulation&quot;&gt;What about simulation?&lt;/h2&gt;

&lt;p&gt;What about
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;?
Could this bug have been caught during
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;?
Why wasn’t it?&lt;/p&gt;

&lt;p&gt;I suppose this bug could have been caught in
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, my current network packet simulator implements a loop-back mode only.
This isn’t sufficient for testing the complex interaction of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP requests&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP replies&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol&quot;&gt;ping requests and
replies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An online friend has recommended I try building a network simulator that
integrates into the Linux Kernel, so that other computers can actually interact
with my design while it is running in the simulator.  This would be a truly
awesome idea, and might well have caught this bug.  I might just need to update
my network simulation for this purpose.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;So what are some of the lessons we can learn from this whole exercise?&lt;/p&gt;

&lt;p&gt;First, your current bug may not be in the last place you looked.  I had just
worked on the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.
Mentally, my mind was in a bug hunting mode within the &lt;a href=&quot;https://github.com/ZipCPU/qspiflash/blob/master/rtl/qflexpress.v&quot;&gt;flash
controller&lt;/a&gt;.
Instead, the bug was somewhere else within my design–somewhere where I least
expected it.&lt;/p&gt;

&lt;p&gt;Second, the more things you change within a design, the more painful it is
to find and fix the bugs within it.  In many ways, I set myself up for problems
with the shear number of things I had changed to get here.  Understand, just
because I presented one or two of these problems above, doesn’t mean that these
were the only problems I had.&lt;/p&gt;

&lt;p&gt;Third, did you notice how many tools I was using to debug the design?
Besides the tools for debugging &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
listed above, I was also using &lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;
for debugging
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;the network&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging a
CPU&lt;/a&gt;
really crosses several disciplines.  While this is a “hardware” task,
look at what we needed to do in terms of support software along the way:
We needed a &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging
port&lt;/a&gt; to
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
(S/W+H/W), a &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt; to
gather a trace from within &lt;a href=&quot;/about/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;
(H/W), software to interpret that trace (S/W), a disassembly of the failing
program (compiler S/W), an understanding of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set (assembly
S/W)&lt;/a&gt;,
and finally &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;
to finally catch the bug in the end.&lt;/p&gt;

&lt;p&gt;That’s quite the cross-disciplinary task!&lt;/p&gt;

&lt;p&gt;This also means that, if you are interested in learning hardware design, there
are several prerequisites before you dive into CPU design.  The other way of
looking at it is that CPU design is a wonderful field of study where you will
be forced to learn all kinds of details of how CPUs work that you would never
learn otherwise.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And he informed me, and talked with me, and said, O Daniel, I am now come forth to give thee skill and understanding.&lt;/em&gt;</description>
        <pubDate>Mon, 04 Feb 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2019/02/04/debugging-that-cpu.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2019/02/04/debugging-that-cpu.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Building a custom yet functional AXI-lite slave</title>
        <description>&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The AXI4 bus requires five independent channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;Illustration, showing the five separate channels of the AXI4 bus&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Last year, we discussed &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;how to verify an AXI-lite slave
peripheral&lt;/a&gt;.  To do
this, we asked Vivado to generate an example &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite
peripheral&lt;/a&gt;
and then added a reference to an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite property
file&lt;/a&gt;
and about 20 more lines of code to our design.  Much to my surprise, Vivado’s
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;AXI-lite peripheral&lt;/a&gt;
didn’t pass &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;The core&lt;/a&gt;
failed because it didn’t properly drop the ready lines to prevent an incoming
transaction in the case where the outgoing acknowledgement channel was stalled.&lt;/p&gt;

&lt;p&gt;We also noticed that &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Xilinx’s demonstration
core&lt;/a&gt;
as designed could only ever ever process a single
transaction for every two clocks ticks, limiting its maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.  No
simple code adjustment would fix this.&lt;/p&gt;

&lt;p&gt;That post referenced &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;a core generated by Vivado
2016.3&lt;/a&gt;.
Since that time, I’ve also had a chance to
download and examine Vivado’s 2018.3 AXI-lite demonstration core.  While
superficial changes have been made to this example core, it still suffers
from the same basic design flaws: unless the outgoing ready signals on the two
acknowledgment channels, both for &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, are
dependably held high &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
will drop acknowledgments.  This is fundamentally bad, since it could cause a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
to lock up hard.  Worse, since it would be caused by the vendor’s
demonstration code, no one would think twice to examine it for an error.&lt;/p&gt;

&lt;p&gt;For the sake of those who wish to work with an
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt; slave peripheral,
let’s take a moment and examine how we might build a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;better AXI-slave&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;goals-for-any-bus-component&quot;&gt;Goals for any Bus Component&lt;/h2&gt;

&lt;p&gt;Whenever I build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component, whether it be a slave or a master, I start with three basic design
criteria.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component must maintain the rules of the road for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
it is on.  In the case of an &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite
bus&lt;/a&gt;, that means we need
to examine the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt; to determine how our
code must behave.&lt;/p&gt;

    &lt;table style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/fpropfile.png&quot; alt=&quot;What is a formal property file?&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

    &lt;p&gt;Once we’ve done that once, we can then capture this behavior in a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal
property file&lt;/a&gt;
that can then be used later to verify any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; component.
Such property files are great timesavers, since they typically only need
to be built once, and yet they can then be used to verify any number of
design components.&lt;/p&gt;

    &lt;p&gt;A common question I often get from corporate clients new to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
is, where do I start?  My answer is often, “Start by building property
files for the interfaces you support,” for this very reason: for a small
amount of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
work, you can get a tremendous return on your investment.&lt;/p&gt;

    &lt;p&gt;Today, we’ll be reaping a return on our &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;last AXI-lite
investment&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My next two goals are performance related.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Once the component obeys the rules of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
my next priority is maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.  A
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component must support the highest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
possible.  Think of it this way, the speed of the entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU portion of the
design&lt;/a&gt;
depends upon the speed of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
High performance is achieved by pipelining multiple transactions to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
in a group.  The higher the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; is, the faster the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
(or whatever
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master) can perform its functions.&lt;/p&gt;

    &lt;p&gt;Several individuals have posted both on
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx’s forum&lt;/a&gt; and
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent’s forum&lt;/a&gt;
about the MicroBlaze computer being
&lt;a href=&quot;/zipcpu/2019/02/09/cpu-blinky.html&quot;&gt;horrendously slow&lt;/a&gt;
[&lt;a href=&quot;https://forum.digilentinc.com/topic/4930-arty-microblaze-speed-question&quot;&gt;1&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Evaulation-Boards/AXI_GPIO-too-slow/td-p/725431&quot;&gt;2&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/Why-microblaze-loop-speed-is-40-times-slower-than-I-expected/td-p/111342&quot;&gt;3&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/7-Series-FPGAs/SDK-GPIO-implementation/td-p/784626&quot;&gt;4&lt;/a&gt;]
[&lt;a href=&quot;https://forums.xilinx.com/t5/Embedded-Processor-System-Design/AXI-GPIO-max-rate/td-p/484496&quot;&gt;5&lt;/a&gt;].
The measurement is typically made by examining how fast the processor can
toggle a &lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;general purpose
output&lt;/a&gt;
fed into an &lt;a href=&quot;https://en.wikikpedia.org/wiki/Oscilloscope&quot;&gt;oscilloscope&lt;/a&gt;.
While I’ll admit this isn’t a great measure of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
performance, it is a somewhat decent measure of peripheral
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
performance.
(Incidentally, the ZipCPU can toggle a GPIO peripheral about 12x
faster](/zipcpu/2019/02/09/cpu-blinky.html))&lt;/p&gt;

    &lt;p&gt;There is no reason why a basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/General-purpose_input/output&quot;&gt;GPIO&lt;/a&gt; driver,
as an example, needs two clocks for every transaction.&lt;/p&gt;

    &lt;p&gt;We’ll create a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
component in a moment that can handle one transaction
on every clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Minimum &lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;By &lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
I mean the number of clock cycles it takes from when the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
makes a request until the response comes back from the peripheral.  Most
of the clock cycles used during the request will be
consumed by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
first and then the interconnect, meaning that there isn’t all
that much that a peripheral designer can do to affect the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
associated with accessing his component.&lt;/p&gt;

    &lt;p&gt;What he can do, however, is make certain that he doesn’t &lt;em&gt;increase&lt;/em&gt; that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt; by how he
processes the request.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; requires that all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
signals must be registered on the clock edge.  This means that the minimum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;
through any &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;specification compliant&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-slave
peripheral&lt;/a&gt;
can never be better than a single clock cycle.  The
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;core&lt;/a&gt;
presented below will achieve this minimum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My last criteria, &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum
area&lt;/a&gt;,
is often lost after meeting the first three.  In general, a design that
meets the first three criteria is often so constrained that there’s not
much more you can do to achieve &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum
area&lt;/a&gt;.  This is why
the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;choice of a bus
standard&lt;/a&gt; is so
important to anyone designing for &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;low area/minimum
cost&lt;/a&gt;: design
choices have consequences.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall system performance depends upon the first three design goals.  High
performance is fairly easy to meet using the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;–which is
one of the reasons why I like it so much.  With
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite&lt;/a&gt;,
however, the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus requirements&lt;/a&gt; and
maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; goal can seem
contradictory.  It’s certainly not obvious, and so it’s worth illustrating
how to make this happen.&lt;/p&gt;

&lt;p&gt;Therefore let’s examine how to make an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite
slave&lt;/a&gt;.  I’ll
focus on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; based
design.  Indeed, if we do this right, then our design should be able to map into
block &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;.  (My first
draft didn’t meet this criteria.)  Either way the design approach will be quite
appropriate for a typical &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;register-based&lt;/a&gt;
slave peripheral.&lt;/p&gt;

&lt;p&gt;Finally, before beginning to look at how we’d do this, let’s just note that
of the two types of transactions, read and write, the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
read channel is simplest to implement.  Unlike the write channel, there’s only
the one request channel called the read address channel going into a read
transaction.  The write channel, on the other hand, requires both an address
and a data channel feeding it, as shown in Fig. 1 above.  Therefore let’s
examine the read channel first, and then apply the lessons we learn from the
read channel to the write channel in the following section.&lt;/p&gt;

&lt;h2 id=&quot;read-channel-processing&quot;&gt;Read Channel Processing&lt;/h2&gt;

&lt;p&gt;Sometimes I like to sprint into code and just see how far I can get.  In this
case, such a sprint into the read channel implementation appears easy:
every time we get an &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY &amp;amp;&amp;amp; S_AXI_ARVALID&lt;/code&gt; we want to set
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; on the next clock.  As long as &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; remains true, this
is sufficient for high speed interaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that we’re following Vivado’s notation here, and using &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt; to
describe any external signals, whereas we’ll use both the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_*&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_*&lt;/code&gt; prefixes to describe any internally generated
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. AXI-lite read transactions with S_AXI_RREADY high&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-rready.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, all with ARREADY held high&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 2 on the right illustrates how this scheme might work.  Following any
clock period where both &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt; are true,
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is set with the appropriate result on the next clock.  So far,
this is about as easy as
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;Wishbone&lt;/a&gt;
was.&lt;/p&gt;

&lt;p&gt;The problem with the approach outlined above is easily discovered
when we attempt to
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;verify its functionality&lt;/a&gt;.
It’s also the same basic logic the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Vivado generated
core&lt;/a&gt;
was been using: if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; were always true, this would pass as working
code.  Nothing in the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt;,
however, requires that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; be guaranteed to be true.  Indeed, I
have to believe the authors of the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
were quite proud of creating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interface that might respond to “&lt;a href=&quot;https://en.wikipedia.org/wiki/Backpressure_routing&quot;&gt;back
pressure&lt;/a&gt;”
as a stall on an outgoing channel is called.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 3. AXI-lite read transactions with S_AXI_RREADY high&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-rfails.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, with two lost due to RREADY being low&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 3 on the left shows what this naive implementation might lead to when
the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; line not held high.&lt;/p&gt;

&lt;p&gt;In particular, we are required to hold the outgoing data constant any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid &amp;amp;&amp;amp; !S_AXI_RREADY&lt;/code&gt;.  Did you notice how the blue transaction in this
figure got lost?  This would be a catastrophic bug in our code.  Notice also
how there’s an empty clock cycle in the return channel between the brown return
and the white return, precisely where the blue return should be?&lt;/p&gt;

&lt;p&gt;Two realities lead to this bug.  The first is that we need to stall, i.e. lower,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; line when the response ready, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, is low and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is high.  (The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-specification&lt;/a&gt;
is very clear that setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_rvalid&lt;/code&gt; line cannot depend up
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; being set initially.)  A straightforward implementation might
look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This implementation, however, would cause the bug shown above in Fig. 3 above:
the ready signal is only dropped &lt;em&gt;after&lt;/em&gt; a transaction is lost!  This is a
catastrophic bug.&lt;/p&gt;

&lt;p&gt;We could try to simplify this approach and just state that,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this would meet our
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus requirements&lt;/a&gt;, it would violate
our maximum &lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; goal.&lt;/p&gt;

&lt;p&gt;Another simple fix would be to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; signal combinatorially,
so that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Result of combinatorial axi_arready logic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-rcomb.svg&quot; alt=&quot;Trace showing multiple AXI-lite read transactions, where the AXI_ARREADY line is generated combinatorially&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This appears as though it might solve all of our problems.  A trace built upon
this logic is shown in Fig. 4 on the right.&lt;/p&gt;

&lt;p&gt;Only it doesn’t solve our problems.  It violates our first goal, since the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
is quite clear: all signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; included, must be registered.  That
is, they must all be  set on a clock edge.  Adjusting &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; to meet
this standard will force a single clock delay in processing.&lt;/p&gt;

&lt;p&gt;If we try to register &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; while maintaining a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
of one transaction per clock, then we are forced to deal
with accepting a transaction before we realize we should’ve been stalled.
Such a transaction will need to be
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;
within our core.&lt;/p&gt;

&lt;p&gt;We &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;studied how to do this back in 2017, under the name of a “buffered
handshake.”&lt;/a&gt;
&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;Eric LaForest has recently posted a similar description, only he
called it a “Skid Buffer”&lt;/a&gt;.
However, I have yet to present code that will perform this handshake here on
this blog.  Until now.&lt;/p&gt;

&lt;p&gt;Sadly, the design is not trivial.
&lt;a href=&quot;http://fpgacpu.ca/fpga/skid_buffer.html&quot;&gt;LaForest&lt;/a&gt;
makes it look easy, although I tend to get confused every time I try this.
Traces just don’t do it justice.  Therefore,
let’s examine how this might work through a series of figures.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. The master requests a read&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-1.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll start with Fig. 5 on the right.  This figure shows the beginning of the
transaction, as the master creates a read request to send to the
slave.  We’ll assume that all of the ready signals are true initially, so this
request is immediately accepted by the slave.&lt;/p&gt;

&lt;p&gt;This is the way we want things to work.&lt;/p&gt;

&lt;p&gt;Some might even argue that this is how slaves are normally accessed: one
cycle at a time separated by idle cycles on both sides.
This was something I discussed in &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf.pdf&quot;&gt;my 2016 ORCONF presentation as well&lt;/a&gt; (see slides 26-27), since
the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone classic bus&lt;/a&gt; can never
handle more than one transaction every three clocks as a result.
We’ll reflect for a moment on the reality that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
is more than capable of issuing multiple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
requests on adjacent clocks, and then we’ll ignore this piece of advice and
continue with a second access following immediately after the first one.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. The slave returns its first response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-2.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 6 illustrates the slave returning the initial request as a response to
the master.  This is on the next clock, so we are still meeting our maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
requirement of a single clock.  During this time, the master
sends a second request to the slave.&lt;/p&gt;

&lt;p&gt;Again, this is the way things are supposed to work.  We’re just pushing
data through at high speed, one transaction on every clock and meeting our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
requirements.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. The master stalls the response channel before the second response is accepted&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-3.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 7 shows the beginning of our problems.  In Fig. 7, the master
lowers his &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; signal (now shown in red), stalling the return
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
It will now take the slave another clock period, i.e. until Fig. 8, before
the slave can lower &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; since &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is required
to be a clocked signal.  This means that the slave must accept a second
request, the request marked number three in Fig. 7, while still waiting
for its second response to the master to be accepted.&lt;/p&gt;

&lt;p&gt;There’s no other way to do handle this new request than to
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt; this
transaction within the slave.  This means that that the slave will need to
hold on to two separate transactions any time the read address channel is
busy while the read response channel is stalled.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. The slave now needs to stall the address channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-4.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the next clock, shown in Fig. 8, the slave can finally lower the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; line to stall the input.  As we noted above, the slave is
required to hold onto both request number three and the second response as
long as the input ready line, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is stalling our whole system.
Failing to do this means that a transaction would get lost in this shuffle.&lt;/p&gt;

&lt;p&gt;Now that both request and response channels have stalled, the system can remain
in this state indefinitely.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. The master releases the response channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-5.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Eventually, the master will raise the ready line, as shown in Fig. 9 on
the right.  Once this happens, the second response can cross the channel.&lt;/p&gt;

&lt;p&gt;Further, the third request can move from the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;internal
buffer&lt;/a&gt;
to the output position on the next clock.&lt;/p&gt;

&lt;p&gt;Because it takes a clock edge to lower the stall signal, request number four
will remain stalled this cycle.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. The slave can now release the request channel&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-6.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now when we get to Fig. 10, the slave has finally raised its ready signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;, meaning request number four can proceed to the response
channel finishing our example.&lt;/p&gt;

&lt;p&gt;This is the concept we are going to try to implement below.&lt;/p&gt;

&lt;p&gt;Usually when I start to implement something like this, I create a buffer
is-valid signal to indicate that there’s valid information in the buffer.
However, if you look back over the last several charts, you can see that any
time &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; is low, there’s data in the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;.
Hence, we’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_ARREADY&lt;/code&gt; as our signal that we have something in
this extra
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
position.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. The read address stall lin doesn&#39;t go low until the buffer is full&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-dbl-7.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 11 illustrates the other situation that often confuses me, since I will
catch myself trying to stall the upstream channel anytime the downstream
channel is stalled.&lt;/p&gt;

&lt;p&gt;That’s not how this &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;
works, however.  To do this right,
the upstream channel should only stall if the downstream channel is stalled
&lt;em&gt;and&lt;/em&gt; if there’s an item in the buffer.  Both criteria need to be true.&lt;/p&gt;

&lt;p&gt;We’ll need this tidbit as we move forward.&lt;/p&gt;

&lt;p&gt;So let’s work through our downstream implementation first.&lt;/p&gt;

&lt;p&gt;The downstream response will be invalid following a reset (obviously), but
valid following any incoming request, stalled or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise if the response was valid before and the downstream response channel
was stalled, then we need to maintain the response on the output channel until
it has been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are the straightforward parts of this logic.&lt;/p&gt;

&lt;p&gt;The piece that isn’t quite as straight forward is that if the downstream channel
isn’t stalled, but yet there’s an item in our buffer and so &lt;code class=&quot;highlighter-rouge&quot;&gt;!axi_arready&lt;/code&gt;,
then we also want to set the output response channel as valid.  This was the
situation shown in Fig. 9 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In all other cases, we’ll release the response channel and lower our valid
signal, since all transactions have by now been accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what about the data content of this channel?&lt;/p&gt;

&lt;p&gt;First, I’m going to keep this simple.  Our slave will never return
any type of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;.
You can read about what I dislike about allowing slaves to create
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; in my &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
properties post&lt;/a&gt; if you
are interested.  Not returning any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; means the response
type is constant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_rresp&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OKAY&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was too easy.&lt;/p&gt;

&lt;p&gt;The response data payload is just a touch harder, although we can split into
three basic steps.&lt;/p&gt;

&lt;p&gt;First, on any valid read address transaction, we’ll set the address for
our &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;.
If our 
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
doesn’t contain a valid read request, then this will just be a don’t care
address.  Even better, as long as the buffer isn’t already full, then we can
set the
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
address independent of whether there’s a request we are accepting or not.
This helps to satisfy our minimum logic goal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dly_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second step is to determine which address to read from.  If our
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffer&lt;/a&gt;
has valid data in it, then we’ll want to read from this
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;
address, &lt;code class=&quot;highlighter-rouge&quot;&gt;dly_addr&lt;/code&gt;.  In all other cases we can read directly from the
address provided on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The third step is to do the actual read.  In the case of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;,
extraneous reads never hurt.  Therefore we can read any time the outgoing
channel isn’t stalled–regardless
of whether we have an active read request or not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If the outgoing channel is not stalled (above)
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// then read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you were implementing any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;hardware registers&lt;/a&gt;
instead of a block &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;,
this is where you would implement the read
from those &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;registers&lt;/a&gt;.
You might also to adjust this logic as well: sometimes read transactions have
side effects, such as in my
&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Cyclone-V&lt;/a&gt; design.
In that case, you’d want to add a bit more logic, perhaps even the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_READ_SIDEEFFECTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If 1. the outgoing channel is not stalled (above)
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// and 2. there&#39;s an outstanding (!axi_arready) or
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// incoming (S_AXI_ARVALID) read request, then
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// perform the read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_rdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rd_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That sets our response data.  Now for the upstream &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; which, as
I mentioned above, also determines when or if we have an item in our buffer.&lt;/p&gt;

&lt;p&gt;The logic here starts by looking downstream.  If we have something in our
buffer, that is if &lt;code class=&quot;highlighter-rouge&quot;&gt;!axi_arready&lt;/code&gt; is true, then as long as the downstream
channel remains stalled with &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; !S_AXI_RREADY&lt;/code&gt; the upstream
channel needs to remain stalled as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Outgoing channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If something is already in the buffer,
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// axi_arready needs to stay low
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the difficult part: If the downstream channel is stalled,
and the upstream channel is passing us data, then we need to accept the
request into our buffer and then immediately stall the upstream channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that we didn’t stall the upstream channel &lt;em&gt;until&lt;/em&gt; there was a valid item
in our buffer.  This is the detail I always get confused by which I illustrated
in Fig. 11 above.&lt;/p&gt;

&lt;p&gt;Finally, if the outgoing response channel isn’t stalled, then we can set
the read address ready line to be ready for the next transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all there is to it, although I personally find the pictures above
easier to understand than the code above.  Indeed, if it weren’t for the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
tools, I might’ve gotten this code quite wrong.&lt;/p&gt;

&lt;p&gt;One last figure in this section will illustrate how this logic works.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12. A demonstration of how reads work with this core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-read.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig. 12 shows the results from a rather complex cover statement found at the
end of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;the file&lt;/a&gt;.
Here you can see that, yes, we did meet our requirements for both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Latency_(engineering)&quot;&gt;latency&lt;/a&gt;.
The next piece of good news is that this logic passes our
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
test–but I’ll have more to say on that further down.  Finally, let me say
that I found Figs. 5-11 more instructive about what was going on that
the trace shown in Fig. 12 on the right.&lt;/p&gt;

&lt;p&gt;For now, let’s turn our attention to the more difficult transaction: the
write transaction.&lt;/p&gt;

&lt;h2 id=&quot;write-processing&quot;&gt;Write processing&lt;/h2&gt;

&lt;p&gt;We now need to apply the lessons we just learned from the read channel to the
write channel.  The first lesson is that we’ll need a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;,
and the second lesson is that the return ready signals will also indicate
negatively whether or not buffer is full.&lt;/p&gt;

&lt;p&gt;That’s the easy part.&lt;/p&gt;

&lt;p&gt;If only the write channel were as easy as the read channel.  Indeed, it would
be if we were able to guarantee that the write address and write data would
both arrive at our slave at the same time.  Sadly, this is not the case.  The
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;two channels, write address and write data, may be separated by up to two
clocks&lt;/a&gt;.  We’ll need to
synchronize those two channels here, however, since we can’t perform the
write transaction internal to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;our slave&lt;/a&gt;
without having both the required address and the required data.  That
then will be the challenge of this section.&lt;/p&gt;

&lt;p&gt;Let’s think this through for a moment before sprinting ahead this time.  We
can complete a write transaction any time the following three conditions hold.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The outgoing response channel must not be stalled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We must have the address of where we need to write.  This can be
either in our buffer, or coming directly from &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWADDR&lt;/code&gt;.  Yes, we’ll
need to buffer the address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We must have the data of what we wish to write as well.  This also includes
&lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;the write strobes&lt;/a&gt;,
indicating which bytes in our data word need to be written.  This channel
will also need to be buffered, just like the write address channel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As before, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_AWREADY&lt;/code&gt; to indicate that we have a value in
our address buffer, and &lt;code class=&quot;highlighter-rouge&quot;&gt;!S_AXI_WREADY&lt;/code&gt; to indicate that we have a value in our
data buffer.&lt;/p&gt;

&lt;p&gt;That’s going to be our basic approach.  Now let’s just work through the
various signals.&lt;/p&gt;

&lt;p&gt;Let’s start with the write address channel ready signal, and the logic that
would be appropriate if there were no write data channel.  That is, set the
ready on reset, then deal with the case where the outgoing buffer is stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now when I say that the outgoing buffer is stalled, I mean that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;
is true and so there’s a value waiting to be returned.  I also mean that
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; is false, meaning that this value can’t go any where.  This
leaves us with two conditions to check, as shown in Fig. 13 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Stall conditions if the response channel is already stalled&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-1.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If the output channel is stalled and our buffer is already full, then we need
to remain stalled.  This is the case shown on the right above.  Likewise if
the output channel is stalled and we just accepted a value, then we need to
lower the ready line of &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt;.  This is shown on the left above.
In either case, we need to drop the ready signal for this channel.  However,
if there’s nothing in our buffer and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; is low (not shown),
then we can just leave our buffer empty.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// The output channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If our buffer is full, remain stalled
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If the buffer is empty, accept one transaction
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// to fill it and then stall
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That wasn’t too bad, and it was roughly identical to what we did before.&lt;/p&gt;

&lt;p&gt;Now let’s look at the case where the output isn’t stalled, as shown in Fig. 14
below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. Two conditions preceeding a write address channel being ready&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-2.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left side of Fig. 14 shows the case where a write data is coming into our
core, and the right side shows the case where the write data is already within
our core and stalled.  In both cases, we’ll want to make certain that the write
address channel is ready to accept an associated address.&lt;/p&gt;

&lt;p&gt;But what’s happening on the write address channel?  It doesn’t matter.  Either
an address is coming in or it isn’t.  If no address comes in, then the
&lt;em&gt;write data&lt;/em&gt; channel will have to stall–not the &lt;em&gt;write address&lt;/em&gt; channel.
We are working through the write address channel, so that doesn’t impact
us here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is clear, and write data
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// are available
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s one final condition, shown below in Fig. 15.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15. What happens when the response channel is ready, but the address shows up before the data&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-3.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What happens when there’s no data available from the data channel and a valid
address shows up?  There’d be no data to go with it!  We’ll have to then stall
until there’s data ready.  Two examples of this are shown above in Fig. 15.
If neither example is fits, then we can set &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; otherwise we’ll
need to stall.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we were ready before, then remain ready unless an
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// address unaccompanied by data shows up
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you get all that?&lt;/p&gt;

&lt;p&gt;The write data ready signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wready&lt;/code&gt;, has the same identical logic as
that of the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; signal save that the write data and address channel
information are reversed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is stalled
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// The output channel is clear, and a write address
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// is available
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// if we were ready before, and there&#39;s no new data avaialble
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to cause us to stall, remain ready
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What does it mean to buffer the transaction in this context?  For the write
address channel, it means capturing the incoming address.  Remember,
our buffer is valid any time &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awready&lt;/code&gt; is low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Buffer the address
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same applies to the write data channel.  We’ll want to make a copy of it
any time we accept a value.  Then, if we end up accepting a value while the
output is stalled or likewise if we have no address, this will become the
buffered value waiting to be written to the address that hasn’t yet been given.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Buffer the data
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a moment we’ll do our write and move the operation to the output buffer.
But not until the address and data are synchronized.  Here, we pick between
either the buffered address or the incoming address for that write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read the write address from our &quot;buffer&quot;
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_waddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, we need to pick between the buffered data and the incoming data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Read the write data from our &quot;buffer&quot;
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is finally time to write to our &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_register&quot;&gt;slaves
registers&lt;/a&gt;.
Remember our three conditions for writing that we presented above?  Here
they are again: We can write if there’s a place available in the outgoing
channel, if we have a valid address, and if we have valid data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// If the output channel isn&#39;t stalled, and
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we have a valid address, and
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If we have valid data
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s been a while since &lt;a href=&quot;/zipcpu/2017/05/29/select-lines.html&quot;&gt;I’ve discussed byte enable or select
lines&lt;/a&gt;.  The basic
idea is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt; signal contains which of the various octets
on the bus should be written by the given value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;slv_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDR_LSB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;Vivado’s auto-generated slave core&lt;/a&gt;
uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop to walk through the various select lines and their associated
bytes.  While this works, I find it harder to read than the code above.
Further, since &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx requires&lt;/a&gt;
that the &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite bus&lt;/a&gt;
be only ever 32-bits wide, the code above should still be widely applicable.&lt;/p&gt;

&lt;p&gt;That leaves only one step left: adjusting &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bvalid&lt;/code&gt; to acknowledge
that a write has taken place.  The code below almost follows our three
conditions above, though it skips the first one.  As it turns out, it doesn’t
matter if the output is valid but the bus master isn’t ready:
we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; high either way using the logic below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// The outgoing response channel should indicate a valid write if ...
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 1. We have a valid address, and
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 2. We had valid data
&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// It doesn&#39;t matter here if we are stalled or not
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// We can keep setting ready as often as we want
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oops, I forgot one: as with the read channel, our write response won’t return
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;axi_bresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OKAY&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s what it takes to write to an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI slave
peripheral&lt;/a&gt;
tuned for high
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;.
I hope the pictures along the way helped.  I know I tend to struggle getting
the logic right for a basic &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;
as we’ve done above.  Without the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verification component&lt;/a&gt;,
I’m not sure I’d have much confidence doing this.&lt;/p&gt;

&lt;p&gt;Fig. 16 below shows an example trace drawn from the logic of this core.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16.  Write demonstration through an improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left side of this trace shows several examples of how the logic might stall.
The right side, on the other hand, shows that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
truly can handle one transaction per clock.&lt;/p&gt;

&lt;p&gt;Shall we discuss what it takes to verify
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this design&lt;/a&gt;?
It’s actually &lt;em&gt;really&lt;/em&gt; easy to do now that we have a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
list&lt;/a&gt;
put together for the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite bus&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Verifying&lt;/a&gt;
this design isn’t all that much more difficult than &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;the last design
we verified&lt;/a&gt;.  Really,
it isn’t.&lt;/p&gt;

&lt;p&gt;The first step is to instantiate our set of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite bus
properties&lt;/a&gt;.
This big ugly block of code only looks that way because there are so many
signals associated with this protocol.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Allow a maximum of 2^4-1 or 15 transactions to be in flight at
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// any given time
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If I wasn’t interested in passing
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
I might be willing to stop right here.  However,
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
is a powerful tool and I’ve learned to depend on its ability to prove that
a design will maintain a set of properties for all time.&lt;/p&gt;

&lt;p&gt;So let’s look at the few properties that are necessary for passing the
&lt;a href=&quot;/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
step.&lt;/p&gt;

&lt;p&gt;Let’s start by examining three read properties.  First, if &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is
low, then there shouldn’t be any outstanding read transactions at all.  Our
code should match the counter from within our
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;property set&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, if the output is valid but stalled, then we may have accepted either
one or two read requests.  If we have something in our buffer, then
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; will be low and we will have accepted two requests.  In all other
examples, we’ll have only accepted one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those same properties can now be applied to our write channel, but with one
subtle difference.  The write channel contains two separate channels whose
counts must be checked.&lt;/p&gt;

&lt;p&gt;First, if the output is valid then each channel, address and data, must have
accepted at least one request.  The two channels may have accepted a second
request as well, but only if they currently have one
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand, if no output is valid, then each channel must either have
nothing outstanding, or it must have one valid and be waiting on the other
channel.  These two options are shown in Fig. 17 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 17. A demonstration of how reads work with this core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/demoaxil-wdbl-4.svg&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;They are described in properties below.  Note that it is an error for both
buffers to contain a value if &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_bvalid&lt;/code&gt; is false.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/demoaxi.sby&quot;&gt;script
for this core here&lt;/a&gt;.
Only twenty six steps are necessary to prove that we meet all of the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;bus
properties&lt;/a&gt;
I presented in our &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;last AXI-lite
article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cover-properties&quot;&gt;Cover properties&lt;/h2&gt;

&lt;p&gt;Only one requirement remains to be shown from our initial goals above.  We’ve
shown that we can meet our
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;bus interface requirements&lt;/a&gt;, but can
we truly accomplish maximum
&lt;a href=&quot;https://en.wikipedia.org/wiki/Throughput&quot;&gt;throughput&lt;/a&gt;
as we wanted?&lt;/p&gt;

&lt;p&gt;Let’s see if we can push four values through this slave, retiring one read
on each of four clocks.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RREADY&lt;/code&gt; will be true any time
a return value is accepted, than if this value is high for four clocks in
a row we’ll know
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;our core&lt;/a&gt;
has the ability to as fast as &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the
specification&lt;/a&gt;
will allow it to go.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why four clocks though?  Because I wanted some confidence that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
could truly handle retiring one request per clock without requiring it
be stalled while the pipeline filled up.&lt;/p&gt;

&lt;p&gt;The same approach applies to the return path.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That concludes our examination of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve now not only built an interface with a &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered
handshake&lt;/a&gt;,
but we’ve also managed to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt;
that it works.  Indeed, I would have no
confidence that this worked were it not for the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me share another secret with you: Often, while writing articles like this
one, I’ll find something I want to tweak in the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;example code I’m presenting&lt;/a&gt;.
Usually
this is to make the code easier to read and explain, although sometimes I
touch things up to remove extraneous logic as well.  However,
I also want to make certain that the slightly changed code still works.  As a
result, every time I make a change I’m re-running the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification
proof&lt;/a&gt; to
make certain I haven’t introduced changes in the process.  Usually this means
I can greatly simplify a design for presentation.  In this case, the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
tools also caught a check for &lt;code class=&quot;highlighter-rouge&quot;&gt;if (ready &amp;amp;&amp;amp; ready)&lt;/code&gt; instead of
&lt;code class=&quot;highlighter-rouge&quot;&gt;if (valid &amp;amp;&amp;amp; ready)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I might argue that
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
designs is really easy when
using &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;!  If you haven’t
tried it yourself, let me encourage you to do
so.  Just the ability to &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;verify an AXI-lite
core&lt;/a&gt; alone and find bugs
that Xilinx’s VIP wasn’t able to find should give you some confidence when using
the tool.  Wait, did I just say their VIP couldn’t find these bugs?  While I
really don’t know that to be the case, I am drawn to such a conclusion.  I mean,
why would they publish a broken code generator unless they had tried to verify
it only to receive a false positive suggesting that it worked when it didn’t?&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is now the second article in a short series about the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite
bus&lt;/a&gt;.  The
&lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;first article&lt;/a&gt;
discusses how I created the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite property
file&lt;/a&gt;
which was used to verify &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;the slave
implementation&lt;/a&gt;
we discussed above.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;repository containing&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
also contains several bridge cores to include an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axlite2wbsp.v&quot;&gt;AXI-lite to
wishbone core&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axilite.v&quot;&gt;wishbone to AXI-lite
bridge&lt;/a&gt; and
even a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to full AXI
bridge&lt;/a&gt;.  If you
look around, you might also notice that I have a similar property files posted
there for both the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fwb_slave.v&quot;&gt;Wishbone&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d like to come back to this topic in the future and discuss a &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full
AXI&lt;/a&gt;
to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
bridge as well as the properties necessary to verify it.  That
project and post, however, will need to wait for another day.&lt;/p&gt;

&lt;p&gt;Another potential future post would be to discuss how easy it can be to build
the complex cover statements used to demonstrate
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;this core&lt;/a&gt;
above.  Such an approach would &lt;a href=&quot;/formal/2019/02/21/txuart.html&quot;&gt;offer an alternative to the &lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;s that
SVA supports&lt;/a&gt; but which the
free version of &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;
does not.  That will also need to wait for another day as well.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Judgment also will I lay to the line, and righteousness to the plummet: and the hail shall sweep away the refuge of lies, and the waters shall overflow the hiding place. (Is 28:17)&lt;/em&gt;</description>
        <pubDate>Sat, 12 Jan 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2019/01/12/demoaxilite.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/01/12/demoaxilite.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ZipCPU highlights from 2018</title>
        <description>&lt;p&gt;It’s hard to believe that the first full year of the &lt;a href=&quot;&quot;&gt;ZipCPU
blog&lt;/a&gt; has now come and gone.  Last year I only blogged
for a half a year, starting in May of 2017.  2018, however,
contained a full year of blogging.  The pace of the blog has settled down
a touch, adjusting from moving quickly early on, when I had nothing
better to do and a lot of designs to discuss, to the current pace
as I’ve had to spend my time building new designs to blog about
and even managing to make a touch of money along the way.&lt;/p&gt;

&lt;p&gt;Shall we look together across the last year and take stock in what has taken
place?&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 1.  My design methodology changed, once I experienced formal methods&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-with-formal.png&quot;&gt;&lt;img src=&quot;/img/2018-with-formal.png&quot; alt=&quot;&quot; width=&quot;463&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Towards the end of 2017, I &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;tried my hand at formal verification for the very
first time&lt;/a&gt;.
This was at the request of the &lt;a href=&quot;https://twitter.com/ico_TC/&quot;&gt;SymbiYosys
developers&lt;/a&gt;.  Since I was a poor contractor
with no contract at the time, I figured I had nothing to lose.  Much
to my surprise, I quickly discovered I wasn’t the awesome Verilog developer
I imagined myself to be.  Working my way &lt;a href=&quot;/blog/2018/01/22/formal-progress.html&quot;&gt;from core to core within the
ZipCPU&lt;/a&gt;,
I found and fixed bug after bug in components that I had thought were
“working”.&lt;/p&gt;

&lt;p&gt;I would’ve never found these bugs without using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2.  First formal methods course&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-formal-course.png&quot;&gt;&lt;img src=&quot;/img/2018-formal-course.png&quot; alt=&quot;&quot; width=&quot;463&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As a result, I became a &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;fast believer in formal
methods&lt;/a&gt;.  I
moved quickly, and even created a
&lt;a href=&quot;/projects.html&quot;&gt;formal verification course&lt;/a&gt;
which I was pleased to teach both at multiple corporate
facilities, and to several individuals online.  If this is something that
interests you, I’m currently charging $4,000 plus travel expenses to come to
your facility and teach formal verification to up to six individuals at
a time.  Alternatively, I have been known to teach one or two individuals
at a time via video chat.&lt;/p&gt;

&lt;p&gt;Perhaps what surprises me the most about my new-found love for
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
is that I’ve earned a bit of a reputation for being a formal verification
evangelist.  While others may see me this way, this is not how I envision
either myself or my own journey.  My goal has
never been formal verification as an end in itself.  My goal has always been
to earn a wage by producing working designs.  To date, I know of no better
method to do this than to use formal verification along the way.
It’s fast.  It’s easy.  It will lead you right to any bugs.&lt;/p&gt;

&lt;p&gt;This is also why the blog has shifted over the last year to placing so much
emphasis on formal verification: it works, it works well, and I also find
it to be a lot of fun.&lt;/p&gt;

&lt;h2 id=&quot;zipcpu-development&quot;&gt;ZipCPU Development&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 3. The ZipCPU&#39;s Structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.svg&quot; alt=&quot;&quot; width=&quot;463&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While the &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU’s ISA&lt;/a&gt;
has remained constant over the last year, that doesn’t
mean that there’s been no work done on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  The biggest news on this
front is that I was able to spend some time to &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verify the
ZipCPU as a whole&lt;/a&gt;,
and then present some of the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf2018.pdf&quot;&gt;lessons I’d learned at
ORCONF2018&lt;/a&gt;.  Perhaps
you’ve seen &lt;a href=&quot;https://www.youtube.com/watch?v=7DHV_rJKSgo&quot;&gt;the video of my
presentation&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Since that time, I’ve had the opportunity to go back and rework the proof
of the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  The proof is
now faster, cleaner, and “cheaper” (fewer clock cycles) than ever before.&lt;/p&gt;

&lt;p&gt;That’s not all, though.  The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
now runs on its first &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;iCE40 board–the ICO
board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other big improvements include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; now has a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;(formally
verified) data cache&lt;/a&gt;!&lt;/p&gt;

    &lt;p&gt;This is one of the first of several rather complex cores I’ve built where
I started with formal.  In hind sight, I’m not sure I could’ve built &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;this
data cache&lt;/a&gt;
without &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.  If the
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord wills&lt;/a&gt;,
I’ll have the opportunity to present &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;this cache
implementation&lt;/a&gt;
here on this blog.&lt;/p&gt;

    &lt;p&gt;I later came back to &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/dcache.v&quot;&gt;this
data cache&lt;/a&gt;
and optimized it for single cycle reads and writes, although peripheral
writes are still multicycle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;CPU proof now uses SymbiYosys
throughout&lt;/a&gt;.  The
result is faster and cleaner, and easier to verify multiple separate
configurations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I finally fixed the bug in the CPU that was preventing the simulation
script from starting the CPU at any location other than the reset address.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I found a way to optimize both the divide, and a regular &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/slowmpy.v&quot;&gt;shift and add
multiply&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/slowmpy.v&quot;&gt;optimized
multiply&lt;/a&gt;
uses less than 50% of the original logic,
whereas the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;(now optimized)
divide&lt;/a&gt;
uses about 20% less than before.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/zipcpu/2018/01/31/cpu-build.html&quot;&gt;ZipCPU toolchain&lt;/a&gt;
now supports soft floating point via the &lt;a href=&quot;https://wiki.osdev.org/libgcc&quot;&gt;libgcc
library&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; remains a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/raw/master/doc/spec.pdf&quot;&gt;highly
configurable CPU&lt;/a&gt;.  Over this
last year, configuration options have been carefully changed from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpudefs.v&quot;&gt;internal
macros&lt;/a&gt; to
parameters.  Such parameters are easier to control from the &lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;external
environment&lt;/a&gt;,
meaning that the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/cpudefs.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpudefs.v&lt;/code&gt;
file&lt;/a&gt;
now only sets the CPU default options–the
&lt;a href=&quot;/zipcpu/2018/12/20/sby-makefile.html&quot;&gt;environment&lt;/a&gt;
may still override them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All of the proofs have been rebuilt so that only the multiple clock
domain cores (not found internal to the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;) use the (now
superseded) &lt;a href=&quot;https://www.clifford.at/yosys/cmd_clk2fflogic.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clk2fflogic&lt;/code&gt;
yosys option&lt;/a&gt; option,
or its &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest/reference.html#options-section&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multiclock on&lt;/code&gt; SymbiYosys replacement&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If nothing else, I’d like to think that &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verifying a
CPU&lt;/a&gt; now ranks
me among the category of those who know how to do
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ri5cy&quot;&gt;Ri5cy!&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://www.symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt;, I’ve now had the
opportunity to formally verify a CPU that wasn’t one of my own designs.
Using &lt;a href=&quot;https://github.com/SymbioticEDA/riscv-formal&quot;&gt;riscv-formal&lt;/a&gt;, I
verified the &lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;Ri5cy soft core CPU&lt;/a&gt;.
Yes, I did find discrepancies between the operation of the
&lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;Ri5cy core&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/SymbioticEDA/riscv-formal&quot;&gt;riscv-formal&lt;/a&gt; formal
property list.  Those have been delivered to the
&lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;Ri5cy&lt;/a&gt; team,
and hopefully they have been fixed by now.  (I haven’t checked.)&lt;/p&gt;

&lt;p&gt;It still floors me that I’ve managed to go from knowing nothing about
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
to &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formally verifying not only my own
CPU&lt;/a&gt;,
but also &lt;a href=&quot;https://github.com/pulp-platform/riscv&quot;&gt;someone else’s CPU&lt;/a&gt;
in my first year of working with &lt;a href=&quot;https://symbiyosys.readthedocs.io/en&quot;&gt;SymbiYosys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Three thoughts come to mind.  First, I’m just getting started.  Second, this
has been a &lt;em&gt;lot&lt;/em&gt; of fun.  Third, if a beginning FPGA developer can do it,
so can a more experienced one.&lt;/p&gt;

&lt;h2 id=&quot;autofpga&quot;&gt;AutoFPGA&lt;/h2&gt;

&lt;p&gt;If you aren’t familiar with
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;,
then just remember: this is the tool I use to compose designs together.
It is designed to make it easy to reconfigure a design, by adding or removing
a peripheral.  Unlike its Vivado or Platform Designer counterparts,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
is open source, generates an open source interconnect, and does this
in a way where you can examine the source code of the process at every
step of the way.&lt;/p&gt;

&lt;p&gt;While I use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
religiously within &lt;a href=&quot;/projects.html&quot;&gt;my own projects&lt;/a&gt;,
I’ll also be the first to admit that
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;the project&lt;/a&gt;
isn’t all that mature.  It works well once a
project is set up that uses it, and it works well for pipelined
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone buses&lt;/a&gt;.
It does not (yet) work well for any other types of buses,
and I already know that the interconnect it generates would not pass &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification (yet)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
has seen quite a few upgrades over 2018.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I recently &lt;a href=&quot;/zipcpu/2018/12/22/autofpga-ld.html&quot;&gt;blogged about the AutoFPGA linker script generation
upgrade&lt;/a&gt;,
allowing it to create and support multiple types of linker scripts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
was designed from the beginning to allow a sort of script-inheritance,
I only started playing with it recently in my
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt;
project.  I like it!  It makes creating &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;WB
scope&lt;/a&gt;
scripts as simple as referencing the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/wbscope.txt&quot;&gt;prior
script&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/flashscope.txt&quot;&gt;only overriding the parts you need
to&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Constraint insertions&lt;/p&gt;

    &lt;p&gt;In &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;one of my designs&lt;/a&gt;, the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/enetpackets.v&quot;&gt;ethernet
core&lt;/a&gt;
runs at one clock speed and the core system clock speed at another.  This
has required the addition of many false paths into the constraint file
in order to support the &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;Wishbone
Scope&lt;/a&gt; that &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crosses
both clock domains&lt;/a&gt;.
Even though the &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/wbscope.v&quot;&gt;Wishbone
Scope&lt;/a&gt;
handles all of the &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock-domain
crossings&lt;/a&gt; properly,
Vivado complains about them.  These false paths keep Vivado from
complaining.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can now copy false path constraints from a configuration file to the
constraint file when the core is inserted into the design, or remove
them from the constraint file when the core is removed from the design.
This keeps Vivado from complaining, and makes it easier to reconfigure
the design with a &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;cross-clock&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;scope&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multiclock support&lt;/p&gt;

    &lt;p&gt;Some time ago, &lt;a href=&quot;/blog/2018/09/06/tbclock.html&quot;&gt;we discussed what it took to get multi-clock support from
Verilator&lt;/a&gt;.  This
technique is now working very nicely with 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
in more than one design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
work has involved the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus, version B4 in its simple pipelined mode&lt;/a&gt;.
Currently,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
only really supports this
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That said, &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;I’ve had to work with other bus structures as
well&lt;/a&gt;.  As I’m sure
you will reflect, there is &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;nothing more painful to debug than a broken bus
structure: it can take down the entire design, to include any debug structures
you have for finding and catching
bugs&lt;/a&gt;.  Therefore,
my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;bus bag of tricks&lt;/a&gt; now includes
formal properties for not only WB, but also the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/fav_slave.v&quot;&gt;Avalon&lt;/a&gt;
and &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;AXI-lite buses&lt;/a&gt;.
This also includes &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/rtl&quot;&gt;various formally verified
bridges&lt;/a&gt; between these
buses.&lt;/p&gt;

&lt;p&gt;Perhaps you recall &lt;a href=&quot;/formal/2018/12/28/axilite.html&quot;&gt;how easy it was to verify an AXI-lite peripheral, and to
find bugs within Xilinx’s demonstration
design&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;If the &lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord is willing&lt;/a&gt;, I
hope to add the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI bus&lt;/a&gt; to my
repertoire of buses I can formally verify with confidence.&lt;/p&gt;

&lt;p&gt;I’d also like to build a set of formal properties that can be used to
formally verify my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
bus interconnect.  I’m aware that there are some
subtle bugs within the interconnect as built, and I’d love to build a better
interconnect that could be formally verified to be bug free.  Specifically,
if you access more than one peripheral in the same bus cycle, you might
get your acknowledgments mixed or lost upon return.  If done properly,
this would place
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
one step above its competitors which can compose designs together, but cannot
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
that the sum of the parts even works in the end.&lt;/p&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;

&lt;p&gt;I’ve now counseled quite a few individuals on-line as they’ve worked
through their bachelor or even graduate theses.  Of those who have taken the
time to join me learning &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal
Verification&lt;/a&gt;,
none have been disappointed.  Here’s a quote from one particular
individual who was building first just a
&lt;a href=&quot;https://uknowledge.uky.edu/cgi/viewcontent.cgi?article=1250&amp;amp;context=gradschool_theses&quot;&gt;line-associative register set&lt;/a&gt;, and then a full-blown
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. A thankful student&#39;s experience&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/tweets/fl4shk-on-formal.png&quot;&gt;&lt;img src=&quot;/img/tweets/fl4shk-on-formal.png&quot; alt=&quot;&quot; width=&quot;954&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;There’s always a reason for &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; in
digital design.  This person was the lucky one.
His design worked when he handed it in.&lt;/p&gt;

&lt;p&gt;One other individual I remember started his journey on IRC and asked what
language he should learn.  I counseled him to learn Verilog, since the free
version of &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
works with Verilog.  He chose VHDL instead, since “Europeans
use VHDL more than Verilog”.  (Really??)  Two days after he started, he came
back on-line asking what was wrong with his design.  I then told him, had
he chosen to use the free
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
tools with Verilog, he would have had his answer right now.&lt;/p&gt;

&lt;p&gt;What do you think?  Do you think I might be a bit biased?  Perhaps.  But my
bias is towards what has worked for me, and I’ve now found more bugs in
my own designs using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
than I found with any of my prior testing approaches.&lt;/p&gt;

&lt;h2 id=&quot;beginners-tutorial&quot;&gt;Beginners Tutorial&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. A slide from the FSM tutorial&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/tutorial&quot;&gt;&lt;img src=&quot;/img/2018-tutorial-ledsequence.png&quot; alt=&quot;&quot; width=&quot;462&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this remains a work in progress, I have put together the
&lt;a href=&quot;/tutorial/&quot;&gt;first six of what I hope will be about ten lessons for beginning digital
designers&lt;/a&gt;.  These lessons tie
beginning level Verilog lessons together with
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;Verilator simulation and
co-simulation&lt;/a&gt;
lessons and even introduce the topic of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
as well.&lt;/p&gt;

&lt;p&gt;My thesis behind this work has been that too many students take a course
in Verilog that teaches them only the semantics of the language and nothing
about the skills they actually need to do design.  Worse, the new student
spends too many hours learning Verilog, and as a result learns the Verilog
syntax to describe simulation as well.  On top of that, the student then
gets the two confused when he comes to building his first
complex design.  So rather than taking separate courses in Verilog,
simulation, formal verification, and then (finally) FPGA design, the
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt; I’m working on mixes
lessons from all four of these topics together in order to teach
FPGA design.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 6.  The tutorial remains a work in progress&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/work-in-progress.png&quot; alt=&quot;&quot; width=&quot;134&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While I haven’t had that much feedback from the
&lt;a href=&quot;/tutorial&quot;&gt;tutorial&lt;/a&gt;, those who have
contacted me have either said it was wonderful, or they’ve
given me the feedback necessary to make it better.&lt;/p&gt;

&lt;p&gt;I’m looking forward to completing
&lt;a href=&quot;/tutorial&quot;&gt;this tutorial&lt;/a&gt;
in the new year, should the
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord be willing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;top-ten&quot;&gt;Top Ten&lt;/h2&gt;

&lt;p&gt;It’s now time to present the top ten articles on the ZipCPU blog from 2018!&lt;/p&gt;

&lt;p&gt;The fact that this is my second year with the blog means there
are now two different measures I can use to determine what the top ten
articles are.  I could list the top ten articles written this year by their
number of hits, or I  could list the top ten articles by number of hits
regardless of when they were written.  Even better, can’t we do both?&lt;/p&gt;

&lt;p&gt;So let’s start with the top ten articles written in 2018.  Along the way,
I’ll share how many hits each article has had, and how the article fairs
under a web-search for it.  I’ll use &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;
for this purpose, since I’m afraid
&lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; knows me well enough to tailor the results
and so show the &lt;a href=&quot;&quot;&gt;ZipCPU blog&lt;/a&gt; articles at the top of its
list.  Starting with number ten then:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. Cyclone-V design structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/de10-design.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;Debugging a Cyclone-V&lt;/a&gt;, with 935 hits&lt;/p&gt;

    &lt;p&gt;This year marked my first work with a Cyclone-V SoC+FPGA design.
I’m sure it will surprise no one to learn that it took a little more
creativity than normal to debug the design.  Having done that, there was
quite a surprise I found along the way.&lt;/p&gt;

    &lt;p&gt;Searching
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “cyclonev debugging”
yielded this article as the number one result.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. Interpolation by Superposition&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/interpolation-superposition.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2018/01/16/interpolation-is-convolution.html&quot;&gt;Interpolation is just a special type of convolution&lt;/a&gt;, with 940 hits&lt;/p&gt;

    &lt;p&gt;This was one of my big &lt;a href=&quot;/dsp/dsp.html&quot;&gt;DSP&lt;/a&gt; hits for
the year, proving that a signal
processing interpolator was nothing more than a convolution.  This is a
really big result for anyone into signal processing, simply because it
means that you can study your interpolation method in terms of the
Fourier transform of the filter representation of your interpolator.&lt;/p&gt;

    &lt;p&gt;Searching
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “interpolation convolution”
yielded this article as the number one result.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer: A simple countdown timer&lt;/a&gt;, with 1,091 hits&lt;/p&gt;

    &lt;p&gt;While I know I dig into some deep, difficult, and complex topics from time
to time, blogging about the ZipTimer was light and fun.  This article
followed the development of a counter all the way from being a simple
count-down counter, to an interval timer, to a programmable interrupt
timer peripheral.  As such, it has something for everyone from the
beginning designer on up to the SoC designer.&lt;/p&gt;

    &lt;p&gt;Oh, and yes, I even went so far as to show how you might formally verify
the timer peripheral as well.&lt;/p&gt;

    &lt;p&gt;This article was harder to find on 
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;.  It didn’t show up on either the
first or second page after searching for either
“FPGA interrupt timer” or
“programmable FPGA interrupt timer”.  It did show up as the number one
hit for “ZipTimer”, but that’s kind of cheating, so we won’t count that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/04/sim-mismatch.html&quot;&gt;Reasons why Synthesis might not match Simulation&lt;/a&gt;, with 1,143 hits&lt;/p&gt;

    &lt;p&gt;Those who’ve followed the blog know that I’ve dedicated it to keeping
digital design engineers out of &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;.  One of the more frustrating
positions to find yourself in is the one where everything works in the
simulation, but nothing works on the hardware.&lt;/p&gt;

    &lt;p&gt;I’ll admit, writing about this article today feels like DeJa Vu all over
again, simply because I’m struggling with this problem even today on a
design I’m working with.&lt;/p&gt;

    &lt;p&gt;A &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;
search for “Synthesis simulation mismatch” yield’s this article as number
eleven.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9: ZipCPU Instructions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-insns.png&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;A Quick Introduction to the ZipCPU Instruction
Set&lt;/a&gt;, with 1,326
hits&lt;/p&gt;

    &lt;p&gt;Thank you to all who have indicated an interest in the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ZipCPU’s ISA&lt;/a&gt;!  This
article presents a basic introduction to that ISA, explaining the basics
of how it is laid out.&lt;/p&gt;

    &lt;p&gt;Unlike many RISC-based CPUs, the ZipCPU only has a 5-bit opcode space.
This limits the number of possible instructions to roughly 32. Of course,
a CPU is more than just its opcodes, so the article also presents the
register set of the ZipCPU, the basic form of an instruction’s operands,
how most instructions can be executed conditionally, and much more.&lt;/p&gt;

    &lt;p&gt;It should come as no surprise that this is the top article returned
following a &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; search for
“ZipCPU instruction set.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. Basic Flash I/O chip pins&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-io-pins.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;How to build a SPI Flash Controller for an
FPGA&lt;/a&gt;, with 1,378 hits&lt;/p&gt;

    &lt;p&gt;Although it doesn’t show it on the hits for this page, this article really
starts out with a description of &lt;a href=&quot;/formal/2018/07/14/dev-cycle.html&quot;&gt;what formal development looks like in
practice&lt;/a&gt;.  That
description goes over the development of this &lt;a href=&quot;/2018/08/16/spiflash.html&quot;&gt;SPI flash
driver&lt;/a&gt;.  It was only some
time later, after I’d worked with the driver for a bit, that I wrote up
&lt;a href=&quot;/2018/08/16/spiflash.html&quot;&gt;this essay describing the SPI flash
driver&lt;/a&gt;, and what the
important parts to it are.&lt;/p&gt;

    &lt;p&gt;In many ways, I’m rather surprised and flattered that this article was
so well received.&lt;/p&gt;

    &lt;p&gt;Searching &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “spi flash controller”
yielded a touch of a surprise.  Their number one article referenced
my &lt;a href=&quot;https://opencores.org/projects/qspiflash&quot;&gt;Quad SPI Flash Controller on
OpenCores&lt;/a&gt;.  The number five
reference was this article.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. In an Asynchronous FIFO, the pointers need to cross clock domains&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/afifo-internals.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;Crossing clock domains with an Asynchronous FIFO&lt;/a&gt;, with 1,434 hits&lt;/p&gt;

    &lt;p&gt;To me, this &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO
article&lt;/a&gt; was
or at least should have been one of the big hits of the year.  In many
ways, I’m surprised this article didn’t take off with more hits than
a fourth place finisher.  An &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFO&lt;/a&gt; is just so useful
in so many designs, that any digital designer should really understand
how one is built.  Further, unlike &lt;a href=&quot;http://www.sunburst-design.com/papers/CummingsSNUG2002SJ_FIFO1.pdf&quot;&gt;other presentations you might come
across&lt;/a&gt;,
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;this presentation&lt;/a&gt; also
includes properties that can be
used to formally verify that an asychronous FIFO even works in the first
place.&lt;/p&gt;

    &lt;p&gt;If you’ve ever needed to move lots of data across a clock domain boundary,
and eventually we all need to do it, then you will want to read and
understand this article.&lt;/p&gt;

    &lt;p&gt;Searching &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “asynchronous FIFO”
yielded this article as number twelve on its list.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 12. Spectral representation of speech&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-echoes-burning-bush.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;An Open Source Pipelined FFT Generator&lt;/a&gt;, with 2,288 hits&lt;/p&gt;

    &lt;p&gt;Some of the readers of this blog had indicated that it felt like I was only
writing for hobbyists.  Because the focus of the blog has been on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, a design
built for low logic implementations, they felt that the tools and
techniques discussed here didn’t really apply well to the more
industrial applications they had come across in their experience.&lt;/p&gt;

    &lt;p&gt;While this is far from true, I can understand how they came to this
conclusion.  One of my difficulties, as an author, is to present
a complete topic in each article.  This limits the things I might post
about to things that can fit, from beginning to end, within a single
article.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/dsp/2018/10/02/fft.html&quot;&gt;This FFT article&lt;/a&gt;
pushed those limits.  While I didn’t discuss the FFT implementation in
its full gory detail, I did point out that 1) it had been formally
verified, 2) many of the pieces weren’t all that hard to do,
3) one or two were very hard, and 4) it discussed at a broad level how
I went about solving these issues.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; apparently thought this article
was a hit, since it comes up as number two following a search for
“FFT generator.”  I’m not sure this is a good or bad thing, since I have
to imagine that most folks looking for an “FFT generator” are looking
for something like FFTW.  Still, I’m flattered.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/tutorial&quot;&gt;Verilog Beginner’s Tutorial&lt;/a&gt;, with 2,706
hits.&lt;/p&gt;

    &lt;p&gt;In many ways, this isn’t a fair comparison: this web-page isn’t really
an blog or article on it’s own, but rather a tree node pointing to several
tutorial PDFs.  Unlike the blog pages, someone might visit this tutorial
page many times over.  However, I’m including it here because the number
of hits on this page was relatively high compared to all of my other
blog articles.&lt;/p&gt;

    &lt;p&gt;Looking for this page by searching on “verilog tutorial”
on &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; found nothing.  On the other hand,
a search for “beginning Verilog tutorial” found this tutorial as number
seven on their search results.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;If the Lord wills&lt;/a&gt;,
we’ll bump this result higher next year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;About the ZipCPU&lt;/a&gt;, with 12,710 hits&lt;/p&gt;

    &lt;p&gt;Like the &lt;a href=&quot;/tutorial&quot;&gt;Verilog Beginner’s Tutorial&lt;/a&gt;,
this isn’t really a blog post.  However, it did go viral this year after
someone posted it to Hacker News.  Because it got so much attention,
it only makes sense to list it here.&lt;/p&gt;

    &lt;p&gt;How viral did this page become?  Well, you can see in Fig. 13 below.
Fig. 13 shows the distribution of &lt;a href=&quot;&quot;&gt;ZipCPU.com&lt;/a&gt;
page views across all of 2018.  The hits for this &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU about
page&lt;/a&gt; form the largest spike
in page views over the course of the entire year.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13.  2018 Page Views of the ZipCPU blog&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-yearly-pageviews.png&quot;&gt;&lt;img src=&quot;/img/2018-yearly-pageviews.png&quot; alt=&quot;&quot; width=&quot;961&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It should come as no surprise that a search for “ZipCPU” using
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; yield’s the &lt;a href=&quot;&quot;&gt;blog&lt;/a&gt;
first, and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;about page for the
ZipCPU&lt;/a&gt; second.&lt;/p&gt;

&lt;p&gt;Let’s now look at our top hits overall for the year, this time including
articles written in 2017 as well as those written in 2018.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 14: A Generic Filter Implementation structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-form.svg&quot; alt=&quot;Generic FIR implementation structure&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;10&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;Implementing the Moving Average (Boxcar)
filter&lt;/a&gt;, with 3,653 hits&lt;/p&gt;

    &lt;p&gt;As you may recall, a 
&lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;boxcar filter&lt;/a&gt; is a
very basic filter that just averages values together.  It’s a very basic
filtering component, one that is easy to build and easy to use.  This
article describes that component, and was apparently well received last
year.&lt;/p&gt;

    &lt;p&gt;If you search &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “Moving average
filter, verilog”, this comes up as the number two answer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;9&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;Minimizing FPGA Resource Utilization&lt;/a&gt;, with 3,658 hits&lt;/p&gt;

    &lt;p&gt;This article traces many of the design choices I needed to make in order
to get a multi-processing system running on a Spartan 6/LX9.  It’s a fun
article, explaining the basics of what LUTs are and how to count LUTs
when reading your code.&lt;/p&gt;

    &lt;p&gt;As I understand things, I think this particular article went viral last
year before I was counting page views.  By the time I started counting
page views, it was no longer the highest hitting page.  This year, it
comes back again as number nine.&lt;/p&gt;

    &lt;p&gt;A quick search on “minimizing LUTs” using
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; turns this up this article as its
number one search result.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 15: The CORDIC problem description&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cordic-problem-setup.svg&quot; alt=&quot;Setting up a CORDIC&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;8&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;Using a CORDIC to calculate sines and cosines in an FPGA&lt;/a&gt;, with 3,967 hits&lt;/p&gt;

    &lt;p&gt;If you are doing DSP, you need a sine wave.  The standard
“textbook” way of generating a sine wave is to use a CORDIC.
In 2017, I spent a lot of time developing both what a CORDIC was,
&lt;a href=&quot;/dsp/2017/08/30/cordic.html&quot;&gt;how to use it to generate a sine or cosine
wave&lt;/a&gt;, &lt;a href=&quot;/dsp/2017/09/01/topolar.html&quot;&gt;how to use it to
evaluate an arctangent&lt;/a&gt;,
and even &lt;a href=&quot;/dsp/2017/10/02/cordic-tb.html&quot;&gt;how to verify it through
simulation&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I’m looking forward to demonstrating next year,
&lt;a href=&quot;https://www.blueletterbible.org/kjv/jas/4/15&quot;&gt;Lord willing&lt;/a&gt;,
that there’s a &lt;a href=&quot;https://github.com/ZipCPU/cordic/blob/master/rtl/quadtbl.v&quot;&gt;better, lower logic
approach&lt;/a&gt;
that you can use that just requires two FPGA DSP elements (i.e.
multiplies).&lt;/p&gt;

    &lt;p&gt;This is the nineteenth search result for “CORDIC” using
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;.  The fact that the &lt;a href=&quot;https://github.com/ZipCPU/cordic&quot;&gt;github
repository containing the CORDIC code presented
here&lt;/a&gt; is number
twelve was a bit of a surprise.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 16: FPGA designers start further along in the design process than ASIC designers&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;&lt;img src=&quot;/img/fpga-v-asic.svg&quot; alt=&quot;FPGA vs ASIC internals&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;7&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;FPGAs vs ASICs&lt;/a&gt;, with 4,536 hits&lt;/p&gt;

    &lt;p&gt;Every now and then I like to thump my chest and think that I’m doing
the same things ASIC designers do.  Then I have to come back and review
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;this article&lt;/a&gt; to get
put back in my place.  This article is popular enough that I have to
believe there are others out there who are sharing my delusions.&lt;/p&gt;

    &lt;p&gt;Searching for “FPGA ASIC” on
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; yielded this article as number
seven.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;6&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Taking a New Look at Verilator&lt;/a&gt;, with 4,622 hits&lt;/p&gt;

    &lt;p&gt;This is my basic introduction to Verilator article.  I reference it a lot.
It’s also referenced from the Verilator web-site, so that might explain
the number of page views here.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; surprised me with this one too.
Searching for “Verilator” yielded this article as number seventeen in
its list.  The surprise was that number 16 was &lt;a href=&quot;/blog/2018/09/06/tbclock.html&quot;&gt;my article on how
to handle multiple clocks using
Verilator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;5&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/dsp/2017/07/11/simplest-sinewave-generator.html&quot;&gt;The simplest sinewave generator within an FPGA&lt;/a&gt;, with 4.850 hits&lt;/p&gt;

    &lt;p&gt;Didn’t I say generating sinewaves was a fundamental DSP task?  This article
looks at the easy ways of doing that.  These aren’t necessarily the best
ways, but that depends upon your application.&lt;/p&gt;

    &lt;p&gt;Searching
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “simple sinewave” yielded this
article as number seven.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 17: FIFO with data&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fifo-rdwr.svg&quot; alt=&quot;Example FIFO read/write pointers&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;Getting the basic FIFO right&lt;/a&gt;, with 5,613 hits&lt;/p&gt;

    &lt;p&gt;I really need to revisit this article.  While I think it’s basically a good
article, it presents a FIFO with &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N&lt;/code&gt; storage elements as having
&lt;code class=&quot;highlighter-rouge&quot;&gt;(2^N)-1&lt;/code&gt; usable elements.  The
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;
article shows how to get that last item into the FIFO for a minimal cost.
This is another item on my to-do list–but not on my list of new year’s
resolutions.&lt;/p&gt;

    &lt;p&gt;I’m sure there’s a better
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; search term, but neither “FIFO”
nor even “FPGA FIFO” are turning up a reference to this page.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 18. The Max 1000&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/max1k-picture.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/12/16/max1k.html&quot;&gt;Arrow’s Max-1000: A gem for all the wrong reasons&lt;/a&gt;, with 5,850 hits&lt;/p&gt;

    &lt;p&gt;I’d like to think that this article was written before Trenz and Arrow
got their act together with the Max-1000 FPGA development board.  I’m
looking forward to coming back to my &lt;a href=&quot;https://github.com/ZipCPU/arrowzip&quot;&gt;Max-1000
project&lt;/a&gt; and running the ZipCPU on this
board.  It hasn’t happened yet.  This article shares my frustrations with
the board.&lt;/p&gt;

    &lt;p&gt;Perhaps I should be concerned that this article is listed as number three
overall for the year?&lt;/p&gt;

    &lt;p&gt;If you search for “max-1000 fpga review” on
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt;, this article comes up as the number
seven search result.  Strangely enough, my &lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX
review&lt;/a&gt;
comes up as result number eight.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 19: The Two Flip-flop CDC solution&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-dbl-clock.svg&quot; alt=&quot;Crossing clock domains via two flip-flops&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;Some Simple Clock-Domain Crossing Solutions&lt;/a&gt;, with 7,074 hits&lt;/p&gt;

    &lt;p&gt;Every FPGA designer needs to learn about clock-domain crossings.  This
article is my entry article into describing the basics of and the problems
with clock domain crossings.  I’m honored that it shows this favorably.&lt;/p&gt;

    &lt;p&gt;This one makes the number eleven search result position, following a
search of
&lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; for “clock domain crossing”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;1&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/about/zipcpu.html&quot;&gt;About the ZipCPU&lt;/a&gt;, with 12,710 hits&lt;/p&gt;

    &lt;p&gt;The about page for the ZipCPU remains the number one hit for the year
overall.  Thank you to everyone who made that possible!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-audience&quot;&gt;The Audience&lt;/h2&gt;

&lt;p&gt;Let me share one other fascinating chart with you before closing.  Fig. 20
below shows the number of page views in December 2018 against the number of
page views in December 2017.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 20. A comparison of web hits in December 2018 with December 2017&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/2018-yearly-comparison.png&quot;&gt;&lt;img src=&quot;/img/2018-yearly-comparison.png&quot; alt=&quot;&quot; width=&quot;961&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first obvious conclusion is that web hits are up.  The actual number
reflects a 60% increase in web hits over last year.  Thank you.&lt;/p&gt;

&lt;p&gt;The next very fascinating conclusion is that the number of hits is very
cyclic on a weekly basis.  The blog gets many more hits Monday through
Friday than it does on Saturday or Sunday.  This tells me that the majority
of individuals looking at the &lt;a href=&quot;&quot;&gt;ZipCPU blog&lt;/a&gt;
are professional developers, and not so much the hobbyists.  Thank you
again.  This is encouraging, although it wasn’t at all what I was expecting.&lt;/p&gt;

&lt;h2 id=&quot;happy-new-year&quot;&gt;Happy New Year&lt;/h2&gt;

&lt;p&gt;To all of have chosen to read and share this blog, and to all who have been
encouraged by it, let me wish you a hearty, “Thank You” and a “Happy New
Year”!  I’m looking forward to the year coming, and to continuing my
blogging work here.  Let me also wish you success in your chosen FPGA
endeavors this year.  I pray that your work would be blessed by the
Lord as well, lest you find yourself stuck and wasting time in &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The blessing of the LORD, it maketh rich, and he addeth no sorrow with it.
(Prov 10:22)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;May God bless you and your efforts.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Rejoice in the Lord alway: and again I say, Rejoice.  (Phil 4:4)&lt;/em&gt;</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2019/01/01/top-ten.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2019/01/01/top-ten.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Using a formal property file to verify an AXI-lite peripheral</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A &lt;a href=&quot;http://zedboard.org/product/microzed&quot;&gt;MicroZed Board&lt;/a&gt;&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://zedboard.org/product/microzed&quot;&gt;&lt;img src=&quot;/img/microzed.png&quot; alt=&quot;&quot; width=&quot;319&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt; has become prominent as a
defacto standard for working with either
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; or
&lt;a href=&quot;https://www.intel.com/content/www/us/en/fpga/devices.html&quot;&gt;Intel&lt;/a&gt; supplied &lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;IP
cores&lt;/a&gt;.
This common standard is intended to make it easy to interface a design to one
of a variety of System on a Chip cores,
such as Xilinx’s MicroBlaze or &lt;a href=&quot;https://www.altera.com/literature/hb/nios2/n2cpu_nii5v1.pdf&quot;&gt;Intel’s
NiosII&lt;/a&gt;.
The bus is also used by &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;,
and so it is a natural fit for both
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
and &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc.html&quot;&gt;Soc+FPGA&lt;/a&gt;
products.&lt;/p&gt;

&lt;p&gt;While this is all well and good,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; is a beast to work with.
Achieving both correct performance, as well as high speed performance, can
be a challenge.  Today, we’ll limit ourselves to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite bus&lt;/a&gt;: a version of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; that
supports neither bursts, nor locking, nor transaction ID’s, nor varying
quality of service guarantees.
While I’d like to imagine that these simplifications have made it easy enough
for a beginner to be able to work with it, I would have to imagine that
most beginners who have tried to work with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
used by either the
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
or &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc.html&quot;&gt;Soc+FPGA&lt;/a&gt;
chips haven’t found it to be the simple protocol they were hoping for.&lt;/p&gt;

&lt;p&gt;It has certainly been anything but simple for me.&lt;/p&gt;

&lt;p&gt;Today, let’s take a look at how you can use a set of formal properties to
work with an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt; slave–both to
verify that it works as well as to query how well it works.  Along the way,
I’ll demonstrate how easy it us to use this set of formal properties
to find the problems in an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;AXI-lite slave
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-axi-lite-bus&quot;&gt;The AXI-lite Bus&lt;/h2&gt;

&lt;p&gt;Some time ago, I wrote &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;an article describing how to build a simple
wishbone peripheral&lt;/a&gt;.&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;A simple wishbone
peripheral&lt;/a&gt;
only needed to respond to a request,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;an acknowledgment,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;some returned data,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a (never) stall signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  That’s all the signaling required for a &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;basic Wishbone
peripheral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If only &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; were as easy.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. The AXI bus is composed of five separate channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Instead of one read-write request channel, and one acknowledgment-response
channel, &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; has five such channels.  For writing values to the bus, there’s
the write address channel, the write data channel, and the write response
channel.  For reading values from the bus, there’s a read address-request
channel and a read response channel.&lt;/p&gt;

&lt;p&gt;For today, let’s just discuss the AXI-lite version of this interface.  Unlike
the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI specification&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt; removes a lot of capability from this
interaction.  Perhaps the biggest differences are that, with
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;, any
read and write request can only reference one piece of data at a time,
and that there is no need to provide unique identifiers for each transaction.
There are other more minor differences as well.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
has no requirement to
implement locking, quality of service, or any cache protocols.
Once these differences are accounted for,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
becomes almost as &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;easy to verify as a Wishbone (WB)
transaction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, building an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite peripheral&lt;/a&gt; is still a challenge,
but verifying an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
peripheral?  Not so much.&lt;/p&gt;

&lt;p&gt;The key to these transactions are the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals.
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; is used to signal a &lt;em&gt;valid&lt;/em&gt; request or acknowledgment.  The two
signals together form a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;.
One side of the channel will set a
&lt;em&gt;valid&lt;/em&gt; signal when it has information to send, whether request or
acknowledgment, while the other side controls a &lt;em&gt;ready&lt;/em&gt; signal.  You
may recognize this from our prior discussion of the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;simple handshake method
of pipeline control&lt;/a&gt;.
The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
also contains a very specific requirement: asserting the
&lt;em&gt;valid&lt;/em&gt; signal can never be dependent upon the &lt;em&gt;ready&lt;/em&gt; signal for the same
channel.&lt;/p&gt;

&lt;p&gt;Perhaps you may remember with the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;WB specification&lt;/a&gt;
that it takes a hand shake to make a bus request.  Both &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt;
(from the master) and &lt;code class=&quot;highlighter-rouge&quot;&gt;!STALL&lt;/code&gt; (from the slave) must be true in order for a
request to be accepted.  The same is basically true of 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; only the names have changed:
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; must be true for a bus request to be accepted by the
slave.  This &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signal is similar to the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; signal, while &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; is similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;!STALL&lt;/code&gt; signal.&lt;/p&gt;

&lt;p&gt;However, unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
has separate channels for reading and writing, and each of these channels
has its own &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt; signal set.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; also requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt;
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
on acknowledgments, both for read and separately for write acknowledgments.&lt;/p&gt;

&lt;h4 id=&quot;axi-lite-read&quot;&gt;AXI-lite Read&lt;/h4&gt;

&lt;p&gt;Perhaps it might make sense to walk through an example or two.  Fig. 2
therefore shows several example
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
read transactions from the perspective of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;.
In this example, I’ve chosen to use &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
convention where the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals are in all capitals, although this loses the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_*&lt;/code&gt; prefix
that I enjoy using to indicate which signals are inputs and which are outputs.
(We’ll switch back later, when we get to the
formal property set.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Several AXI-lite read transactions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-read.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Each request starts with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
master raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal,
signaling that it wants to initiate a read transaction.  Together with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal, the master will also place the address of the desired
read on the bus.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;The slave&lt;/a&gt;
will respond to this request by raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; signal,
although
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the specification&lt;/a&gt;
sets forth several comments about this.  For example, the slave can
set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; before or in response to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal.  Further, all the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
outputs are not allowed to be dependent combinatorially on the inputs,
but must instead be registered.
Beyond that, the slave can stall the bus as required by the implementation.&lt;/p&gt;

&lt;p&gt;A read transaction request takes place when both
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; are true on the same clock.&lt;/p&gt;

&lt;p&gt;Looking back at Fig 2, you can see four such read transaction requests being
made.&lt;/p&gt;

&lt;p&gt;As with the transaction requests, the acknowledgments also only take place when
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, the signals from the acknowledgment channel,
are both true.  Because responses must be registered, the earliest the slave
can acknowledge a signal is on the clock following the request.&lt;/p&gt;

&lt;p&gt;Let’s now turn our attention to the acknowledgments shown in Fig 2.  In
this example,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
acknowledge the request on the clock after the request is made.  Since
the master holds &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; high, the acknowledgment only needs to be high
for one transaction.  Further, in addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
will also set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt;, the result of the read, and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt;, an
indicator of any potential error conditions.  As with the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt;
signal above, these two signals are part of the acknowledgment transaction
as well.&lt;/p&gt;

&lt;p&gt;The more interesting transaction may be the high speed transaction shown
at the end of the trace in Fig 2.  Judging from this transaction, if the
master wishes to transmit at its fastest speed, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this particular
core&lt;/a&gt;
will only ever support a rate of one request every other clock.&lt;/p&gt;

&lt;p&gt;Working from
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the spec&lt;/a&gt;,
just a couple of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal verification
properties&lt;/a&gt;
will help keep us from running into problems.  From what we’ve learned
examining the figures above, the following basic properties would seem prudent.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is raised, it must remain high until
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is true but the slave hasn’t yet raised
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt; must remain constant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Similarly, once the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; reply acknowledgment request is raised,
it must also remain high until &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RRESP&lt;/code&gt; are both true.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As with the read address channel, while &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is true and the
master has yet to raise &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, both
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; must remain constant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For every request with &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt;, there must follow
one clock period sometime later where &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;our development of the WB
properties&lt;/a&gt;, there is
no bus abort capability in the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus
protocol&lt;/a&gt;.  As a result, following
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus error&lt;/a&gt;,
you’ll still need to deal with any remaining acknowledgments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Just to keep things moving, we’ll also want to insist that after some
implementation defined minimum number of clock ticks waiting the slave
must raise &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The same applies to the reverse link: the master should not be allowed to
hold &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; low indefinitely while &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is high.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll add a couple more
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;properties&lt;/a&gt;
beyond these below, but for now these should suffice to capture most of what
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
requires.&lt;/p&gt;

&lt;p&gt;That’s how reads work, so let’s now go on and examine the write path.&lt;/p&gt;

&lt;h4 id=&quot;axi-lite-write-example&quot;&gt;AXI-lite Write Example&lt;/h4&gt;

&lt;p&gt;While the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; read channel above may appear to be straightforward, the write
channel is anything but.  The write address channel is designed to allow a
single “burst” request to indicate a desire to write to multiple addresses,
closely followed by a burst of data on the write data channel.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;,
unlike the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt;,
has no burst write support.  Every
address request must be accompanied by a single piece of associated write data.
To make matters worse, the two channels are only loosely synchronized, forcing
the slave to synchronize to them internally.&lt;/p&gt;

&lt;p&gt;Were &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; tied to &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; tied to
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt;, the slave’s write channel logic would collapse into the basic
read problem discussed above.  Alas, this is not so.  The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
slave is thus forced to try to synchronize these two channels in order to
make sense of the transaction.&lt;/p&gt;

&lt;p&gt;Fig. 3 shows a basic set of write transactions illustrating this problem.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Some example write transactions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first three transactions within Fig. 3 shows the bounds set on the
synchronization of the channels.  Note that I found these bounds within
Xilinx’s documentation.  They are not present in
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the specification itself&lt;/a&gt;,
as far as I can tell.  Since they simplify the problem
significantly, I’ve chosen to &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;implement them as part of this property
set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at and discuss each of the transactions shown in Fig. 3 above.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first transaction is as simple as one might like.  Both write address
and write data requests show up at the same time.  On the following clock
the respective &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; signals are set, and then the acknowledgment
takes place on the third clock where &lt;code class=&quot;highlighter-rouge&quot;&gt;*BVALID&lt;/code&gt; is set.&lt;/p&gt;

    &lt;p&gt;Let’s note two things about this picture.  First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; signals
are kept low until the request is made.  This is not required of the bus
and in general slows the bus down.  Second, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; signal is
held high.  The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;particular core we are demonstrating&lt;/a&gt;
will fail if this is not the case.  We’ll come back to that in a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second transaction illustrates one of the bounds on the write channels:
Xilinx’s rules allow the write address valid signal to show up no more than
two clocks before the write data.  In this example, the slave holds the two
&lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; lines low until the clock after both are valid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The third transaction illustrates the other bound: the write data channel
may arrive up to one clock before the write address channel.  As with the
previous example, this slave holds the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; lines low until
both are present.  The acknowledgment then takes place on the next clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final three transactions are part of a speed test measuring how fast
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
can handle subsequent transactions.  In the case of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this slave&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
waits until both &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt; signals are high
before raising the ready signal.  This wait period limits the
speed of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this slave core&lt;/a&gt;
to one transaction every two clocks.&lt;/p&gt;

    &lt;p&gt;If the Lord wills, I’d like to also present &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;another AXI-slave
core&lt;/a&gt; with
much better throughput performance, but that will need to remain for another
day.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;This protocol&lt;/a&gt; suggests a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;couple formal
properties&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals should remain high until their respective
&lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; signal is also high.  This applies to both the write address
channel, the write data channel, as well as the acknowledgment channel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The data associated with each channel should be constant from when the
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signal is set until both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are set together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also discussed the two Xilinx imposed limits above as well.&lt;/p&gt;

    &lt;p&gt;– The write data channel may become active no more than one clock before
   the write address channel, and&lt;/p&gt;

    &lt;p&gt;– The write address channel may become active no more than two clocks before
   the write data channel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, there should be no more than one acknowledgment per write
request.  Well, it’s a bit more complex than that.  Both write address
and write data channels will need to be checked, so that there is never
any write acknowledgment until a request has previously been received
on both of those two channels.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;using-a-formal-property-set&quot;&gt;Using a Formal Property Set&lt;/h2&gt;

&lt;p&gt;Further on in this article, we’ll dive into the weeds of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;how to express the
formal properties necessary to specify an AXI-lite bus
interaction&lt;/a&gt;.  For now,
I’d like to discuss what you can do with such a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I currently have Vivado 2016.3 installed on my computer.  Is it out of date?
Yes.  However, it works for me.  Xilinx has had problems breaking things when
they make updates, so I hesitate to update Vivado lest I break something that
is already working.&lt;/p&gt;

&lt;p&gt;That said, &lt;a href=&quot;https://www.xilinx.com/video/hardware/creating-an-axi-peripheral-in-vivado.html&quot;&gt;this
video&lt;/a&gt;
from Xilinx describes how to create an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;peripheral core&lt;/a&gt;.
I followed similar instructions, and received a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;default demonstration AXI-lite peripheral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then added a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal property section&lt;/a&gt;
to the bottom of this core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////////////
//
// Formal Verification section begins here.
//
// The following code was not part of the original Xilinx demo.
//
////////////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important part of this property section is the reference to our
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal AXI-lite property
file&lt;/a&gt;.
Since the properties require some counters in order to make certain that
exactly one response is given to every transaction, let’s set a width for
those counters and declare them here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this particular design&lt;/a&gt;,
a four bit counter is really overkill, but it will work for us.&lt;/p&gt;

&lt;p&gt;Then, we connect the various signals associated with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;our core&lt;/a&gt;.
The parameters have fairly well defined meanings.  The data width
is the number of data bits in the bus.  The address width is the number of
bits required to describe a single octet in the data stream.  This is different
from
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
which has only the number of bits necessary to describe a word address.
We’ll ignore the extra bits for now, since they are fairly irrelevant here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Connect our slave to the AXI-lite property set
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we wanted to stop here and only run a bounded model check, we could do
that.  However, with just a couple of more
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;properties&lt;/a&gt;
we can make certain &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this
design&lt;/a&gt;
will pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
as well–or not, as we’ll see in a moment.&lt;/p&gt;

&lt;p&gt;For example,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
will only ever allow a single transaction.  Further, once that transaction
request has been made, but before the acknowledgment, the appropriate
acknowledgment valid flag will be high.  Not only that, but when the
acknowledgment valid flag is high is the only time we’ll have one pending
transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
does not allow the number of outstanding requests on the write address channel
to differ at all from those on the write data channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, we create a very simple &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.sby&quot;&gt;SymbiYosys
script&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
cvr
prf

[options]
cvr: mode cover
cvr: depth 60
prf: mode prove
prf: depth 40

[engines]
smtbmc

[script]
read -formal xlnxdemo.v
read -formal faxil_slave.v
prep -top xlnxdemo

[files]
xlnxdemo.v
faxil_slave.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.sby&quot;&gt;This script&lt;/a&gt;
describes
&lt;a href=&quot;/formal/2018/12/20/sby-makefile.html&quot;&gt;two tasks&lt;/a&gt;.  One task,
named &lt;code class=&quot;highlighter-rouge&quot;&gt;cvr&lt;/code&gt;, will check the cover properties in this core.  Since we haven’t
introduced any yet, we’ll come back to this task in a moment.  The second
task, &lt;code class=&quot;highlighter-rouge&quot;&gt;prf&lt;/code&gt;, will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
meets &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;all of the
properties&lt;/a&gt;
required of any
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
core–basically all of the properties mentioned above.&lt;/p&gt;

&lt;p&gt;Now, when we run
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to check the safety properties (i.e. the assertions),&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% sby -f xlnxdemo.sby prf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The proof fails almost immediately.&lt;/p&gt;

&lt;p&gt;This first problem comes from the fact that none of the various signal
registers are given appropriate initial values.  While I personally consider
this to be a bug, many individuals will consider this irrelevant in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
that depends upon a reset like this one does.  Therefore, let’s just quietly
fix &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
with some initial statements and go on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// The following lines are only questionable a bug
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And again the design fails.  This time it fails with the trace shown in Fig.
4 to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 4.  Xilinx&#39;s demonstration code drops a write acknowledgment&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-write-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this image, you can see two write transactions.  I’ve colored them with
two different colors, to help separate the two and make this example easier
to follow.  The image differs, however,
from our previous write example in Fig 3 above simply because the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; signal is not held high.  As a result, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;
transaction is not immediately acknowledged until &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; has been
valid for a whole clock.  By that time, however, the logic within &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
has lost the reality that there is a second transaction that needs to be
acknowledged as well.  Hence, once &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
drops the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; line, a transaction has been lost.&lt;/p&gt;

&lt;p&gt;If we want to move on and look for other problems, we could bandage over this
bug with an assumption.  While you’d never want to do this in production
code, sometimes it is helpful to move on in order to find some other problem.
In this case, a simple assumption causes this error to go away.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, when we run the tools again the design still fails.  Looking at the
trace reveals that it is failing for the same basic bug again, only now the
problem is found within the read channel, as shown in Fig 5.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5.  Xilinx&#39;s demonstration code drops a read acknowledgment&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-read-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is always high, just like we did with
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, this failure also vanishes and now &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
can be
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified for all time&lt;/a&gt;
using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a little looking, and a quick trace capability, it
doesn’t take long to chase down the bug.  You can see the problem below
as it exists for the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; signal.  Basically, the core allowed
this signal to go high before it knew that the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; signal would
be acknowledged.&lt;/p&gt;

&lt;p&gt;If you page through the code, you’ll find the always block, shown below,
that sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; signal.  It starts with a basic, almost
boilerplate, reset function to clear &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;7&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Early on in the operation, though, we find the bug.  In particular,
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; is set irrespective of whether the result channel is stalled
and there’s no place to hold the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// indicates that the slave has acceped the valid read address
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Read address latching
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just a touch of extra logic will fix this for us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// indicates that the slave has acceped the valid read address
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Read address latching
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A similar fix to the write channel and the design should pass nicely.&lt;/p&gt;

&lt;h3 id=&quot;cover&quot;&gt;Cover&lt;/h3&gt;

&lt;p&gt;The check above encourages us that this design will not violate any of our
safety properties, but will it work?  Or, rather, how well can it be made
to work?  To answer that question, let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Cover properties are known as &lt;em&gt;liveness&lt;/em&gt; properties, versus the assertion
properties which are known as &lt;em&gt;safety&lt;/em&gt; properties.  When a &lt;em&gt;safety&lt;/em&gt; property
fails, a trace is created showing how the property may be made to fail.
However, when a &lt;em&gt;safety&lt;/em&gt; property succeeds you know the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; will always
be valid and so no trace is created.  Cover properties are the opposite.  A
cover property succeeds if there is at least one way to make the statement
true.  In that case, a trace is generated.  More generally, one trace is
generated for &lt;em&gt;every&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement within a design, or the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
check will fail.&lt;/p&gt;

&lt;p&gt;Within the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;,
there are two cover properties just to make certain the design is able to
function.  These properties verify that both a read and write operation are
able to succeed using the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What I want to do now is to check performance, and we can use a cover
property for that purpose.&lt;/p&gt;

&lt;p&gt;Let’s see if we can retire four write instructions in four clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s also test whether we can retire four read requests in four clocks
as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two tests would be easier to express with concurrent assertions,
such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Writes
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Reads
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wow, those are nice to work with!&lt;/p&gt;

&lt;p&gt;I personally like the four clock test, because sometimes there is a single
stage within the design somewhere that can queue up an answer and so succeed
on a two clock test.  A four clock test on a design this simple will only
succeed if the core can truly retire one instruction on every clock.&lt;/p&gt;

&lt;p&gt;Not surprisingly, this test fails.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;This particular
core&lt;/a&gt;
is &lt;em&gt;unable&lt;/em&gt; to handle a one transaction per clock throughput.&lt;/p&gt;

&lt;p&gt;If high speed were your goal, then, you would say the core is &lt;em&gt;crippled&lt;/em&gt;.
(Yes, I have an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;alternative
core&lt;/a&gt;
if you want something that uses
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
and yet has better performance.)&lt;/p&gt;

&lt;p&gt;We could adjust the two tests and make them check for one instruction retiring
on every other clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// First a write check
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Now a read check
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This test now succeeds.&lt;/p&gt;

&lt;p&gt;If you choose to examine &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;the formal properties within the
core&lt;/a&gt;,
you’ll notice there is also a very large set of code at the bottom to
set up two rather complicated cover traces.  We’ve already reviewed the
results of those complex cover statements in Figs. 2 and 3 above.&lt;/p&gt;

&lt;h3 id=&quot;exhaustive-coverage-exponential-complexity&quot;&gt;Exhaustive Coverage, Exponential Complexity&lt;/h3&gt;

&lt;p&gt;The first lesson of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
is that it is &lt;em&gt;exhaustive&lt;/em&gt;.  Every possible input, output, and register
combination are checked to determine whether a property holds or not.  As
you might imagine, this creates an exponential
explosion in complexity that can be hard to manage.  This can often discourage
a learner from trying
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
in the first place.&lt;/p&gt;

&lt;p&gt;To put that whole argument into perspective, know this: I have a series of
not one or two but twelve separate
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
proofs in my &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;Wishbone to AXI
bridge(s) repository&lt;/a&gt;.  It takes me less
than two minutes to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
&lt;em&gt;all&lt;/em&gt; of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;cores&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, consider what we’ve done: for the price of a small insertion of
code into our design, referencing a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;pre-written property set&lt;/a&gt;,
and for the cost of only a handful of other core-specific properties,
we’ve managed to find, fix, and then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
core.  After you’ve done this once or twice, you’ll find that the whole
verification process takes only minutes to set up, and less than that
to get your first trace.
This makes it very easy for me, when I want to reply to someone’s request for
help on either
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s or
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent’s forum&lt;/a&gt;s, to quickly review their
code and provide a comment on it.&lt;/p&gt;

&lt;p&gt;Fixing the code?  Well, that can take more time.&lt;/p&gt;

&lt;p&gt;So just what does &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property
set&lt;/a&gt;
look like?&lt;/p&gt;

&lt;h2 id=&quot;axi-lite-properties&quot;&gt;AXI-lite Properties&lt;/h2&gt;

&lt;p&gt;We’ve already discussed most of the properties above, all that remains
now is to lay out the details and write the immediate assertions to accomplish
these tasks.  The basic properties were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Requests must wait to be accepted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Acknowledgments can only follow requests&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All responses must return in a known number of cycles&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Waiting requests should not be held waiting more than some maximum delay&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step in writing
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property set&lt;/a&gt;
will be to create several configuration parameters that can be used to
configure &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;the properties&lt;/a&gt;
to match the needs of our design.  Shown below is the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite slave property set&lt;/a&gt;,
and the various configuration parameters within it.&lt;/p&gt;

&lt;p&gt;The first configuration parameter is the width of the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// The width of the data bus
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fixed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While most of my work is done with a 32-bit bus, the property set should
be generic enough to allow bus widths of other sizes, such as 8, 16, 64, or
128 bits.  Why might you want 128 bits?  Because
&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;many designs&lt;/a&gt;
including
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR SDRAM&lt;/a&gt;’s
can transfer 128-bits or more per clock.&lt;/p&gt;

&lt;p&gt;Following the number of data bits, &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH&lt;/code&gt; controls the number
of bits used to describe an address within the peripheral.  This needs to be
a sufficient number of bits necessary to access every octet within the address
space of the slave, even though we are going to ignore the sub-word address
bits for now.  (There’s only one requirement of them, associated with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt; signal, and I haven’t coded that up yet.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, since I find &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_DATA_WIDTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH&lt;/code&gt; rather
cumbersome to type, I’m going to create two short-cut names: DW for the
data bus width, and AW for the address width.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some implementations add
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
cache flags to the address request.
These flags indicate whether the transaction is to be bufferable,
non-bufferable, cachable, non-cachable, or more.  I’m not personally using
these flags.  However, to handle both cores with and without these bits,
we’ll use the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_HAS_CACHE&lt;/code&gt;.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_HAS_CACHE&lt;/code&gt; is set,
the slave will assume particular values for &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_awcache&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_arcache&lt;/code&gt;, indicating
that the write is to be done to the cache or through the cache.  This is
probably more important for an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
master than the slave, but since the two are mirrors of each other, we’ll
keep it in here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_HAS_CACHE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometimes I need to verify a write-only
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI interface&lt;/a&gt;, such as in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilwr2wbsp.v&quot;&gt;this AXI-lite
write-channel to wishbone
bridge&lt;/a&gt;.  In
that case, I’ll want to assume the read channel is idle and remove the read
channel cover check.  &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_READS&lt;/code&gt; can be set to make this happen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_NO_READS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_WRITES&lt;/code&gt; is the analog to &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_READS&lt;/code&gt;.  If
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_WRITES&lt;/code&gt; is set, then the proof will assume the write channel
is idle, and remove the write channel cover check.  This is used by my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilrd2wbsp.v&quot;&gt;AXI-lite read-channel to wishbone
bridge core&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_NO_WRITES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
defines three separate possible responses: an OK response,
a slave produced an error response, or an interconnect produced
an error response.  If a particular slave cannot produce any
form of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus error&lt;/a&gt;,
it makes sense to disallow it.  Clearing
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_BRESP&lt;/code&gt; to zero will disallow any form of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; on the write channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//  The same is true for F_OPT_RRESP for the read channel
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx’s AXI reference
guide&lt;/a&gt;
requires a rather lengthy reset of 16 clock periods.  If the slave
(or master) being verified isn’t creating that reset, then it makes sense
to just assume the reset is present.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_ASSUME_RESET&lt;/code&gt; configures
the core to do just that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to insure that there is only one acknowledgment for every
request received, we’ll need to count requests and acknowledgments
and compare our signals to these counters.  &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt; specifies
the number of bits to be used for those counters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re going to insist that no transaction remains stalled for more
than some maximum number of clock cycles, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt;.  This also
keeps the design and traces moving during our proof.  While the constraint
placed upon the design as a result is somewhat artificial, you can adjust
it to match what you would expect within your design environment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our last parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt;, is used to make certain that,
following a request, the result will be returned to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt;
master within a given number of clock cycles.  The number of cycles to wait
is very implementation dependent, so it needs to be a configuration parameter.
We set it here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY=12&lt;/code&gt; is overkill for the demonstration designs
in the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;wishbone to AXI bridge repository&lt;/a&gt;
we are taking our examples from.
However, &lt;a href=&quot;/blob/2018/08/16/spiflash.html&quot;&gt;other designs&lt;/a&gt;
have needed delays of &lt;code class=&quot;highlighter-rouge&quot;&gt;65&lt;/code&gt; clocks or more, so this is an appropriate
configuration parameter.&lt;/p&gt;

&lt;p&gt;Let me add one other note on these two clock durations: the shorter
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt; are, the faster your proof will complete.&lt;/p&gt;

&lt;p&gt;Let’s now move on from the parameters within the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
file&lt;/a&gt;
to the inputs and outputs of the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;module&lt;/a&gt;
itself.  Since this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;
is my own code rather than Xilinx’s,
I’m also going to switch notations to one I am familiar with.  Inputs
to any core in my notation start with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_&lt;/code&gt;, outputs begin with an &lt;code class=&quot;highlighter-rouge&quot;&gt;o_&lt;/code&gt;.
Further, only constant values such as parameter or macros will use all
capitals.  Finally, since the core we will be writing is a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;,
all of the interface wires will be inputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// System clock
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// AXI write address channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Slave is ready to accept
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write address
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write Cache type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write Protection type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write address valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI write data channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Write data ready
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write data
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write strobes
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI write response channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write response
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Write reponse valid
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Response ready
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI read address channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address ready
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read Cache type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read Protection type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI read data channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Read response
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Read reponse valid
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Read data
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, almost.  We’re also going to create
three outputs, as shown below, so that assertions may be
connected to our various counters to constrain them to the implementation
using them.  Such constraints are &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;necessary in order to pass induction, as
we’ve discussed before&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since checking for transactions can be somewhat tedious below, I’ll declare
some simple transaction abbreviations here.  These are basically abbreviations
for when both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are true indicating that either a
transaction or or an acknowledgment
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
completes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// wire	w_fifo_full;
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rd_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_ard_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wr_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_ard_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wr_req&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rd_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m also trying something new with this property set.  Since bus slave
properties are very similar to those for the master, save only that the
assumptions and assertions are swapped, I’m going to create two macros:
&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSUME&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSERT&lt;/code&gt;.  These are defined from the perspective of
the slave to be &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; respectively.  Within the master,
these definitions will naturally swap.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SLAVE_ASSUME&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	SLAVE_ASSERT	assert&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using a macro like this makes it easier to run
&lt;a href=&quot;http://meldmerge.org&quot;&gt;meld&lt;/a&gt;
on both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;slave&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master&lt;/a&gt;
property files when making updates.  This way the actual logic differences
stand out more.  Interested in seeing how well this works?  Just install
&lt;a href=&quot;http://meldmerge.org&quot;&gt;meld&lt;/a&gt;, download the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;wb2axip&lt;/a&gt; repository, then &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/bench/formal&quot;&gt;bench/formal&lt;/a&gt;
directory and run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;meld faxil_slave.v faxil_master.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to see how easy it is to spot differences between the two cores.&lt;/p&gt;

&lt;h4 id=&quot;reset-properties&quot;&gt;Reset Properties&lt;/h4&gt;

&lt;p&gt;I’ve struggled a bit with the &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;reset properties for
AXI&lt;/a&gt;.
Specifically, what
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
is it that actually creates the reset that needs to be verified here?
That core should have the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;assertions&lt;/a&gt;
applied to it.  However, the reset is often defined by some other module
within the design.  Hence, we’ll either
assert or assume the reset is initially set based instead on the
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_ASSUME_RESET&lt;/code&gt; parameter from above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME_INIITAL_RESET&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_INIITAL_RESET&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx requires that the AXI reset be asserted for a minimum of 16 clock
cycles&lt;/a&gt;.
Our first step is to count the number of cycles the reset signal is active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If ever the reset is released, &quot;reset&quot; the reset-length
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// counter back to zero.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Otherwise, just quietly increment the counter until we get
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to 15
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then make (assumptions) or assertions about the reset signal to make
certain it is held long enough.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME_RESET&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_RESET&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, now that we know our design meets its reset requirements, we can
create some properties regarding what must happen as a result of a reset.
Specifically, we’ll require that following any reset, the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt;
flags should be set to zero.&lt;/p&gt;

&lt;p&gt;We’re also going to apply this to the very first clock cycle of the design, by
also checking for &lt;code class=&quot;highlighter-rouge&quot;&gt;!f_past_valid&lt;/code&gt; and by applying these properties through
&lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; statements.  As you may recall, this was the issue
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/xlnxdemo.v&quot;&gt;Xilinx core&lt;/a&gt;
had above with its (missing) initial statements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Nothing should be returned or requested on the first clock
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Same thing, but following any reset as well
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moving on to the response signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BRESP&lt;/code&gt; for the write channel and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; for the read channel, we’ll note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b01&lt;/code&gt; pattern is
the only pattern disallowed by the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
specification&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Exclusive access not allowed
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exclusive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;stability-properties&quot;&gt;Stability Properties&lt;/h4&gt;

&lt;p&gt;The rule we discussed above was that the signals that are coupled with
any transaction should be held constant as long as the transaction remains
outstanding (i.e. valid but not ready).  This is a basic
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
that we also required when building our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
properties.  Let’s capture that
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
property here in this context.&lt;/p&gt;

&lt;p&gt;Simply put using concurrent assertions, we could express this as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternately, in order to use the immediate assertions supported by the free
version of &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;, we’ll
need to put a little more work into this.
First, we want to avoid the first clock period and any clock period following
a reset.  This is to make sure our properties deal with valid data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, for each channel, we’ll write out the properties in question.  Basically
if the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; was true on the previous cycle but the &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; was false,
then the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; should remain true and the associated data should be stable.&lt;/p&gt;

&lt;p&gt;For the write address channel, the first of five, this property looks like
the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Write address channel
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply to all other incoming channels
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The other channel properties are nearly identical, so we’ll skip them for
brevity here.  The important part to remember is that we will &lt;em&gt;assume&lt;/em&gt;
properties of the input, and &lt;em&gt;assert&lt;/em&gt; properties of our local state and any
outputs.  Hence, in this case we’ll assume the properties of the write address
channel, the write data channel, and the read address channel, but &lt;em&gt;assert&lt;/em&gt;
properties of the two acknowledgment channels.&lt;/p&gt;

&lt;h4 id=&quot;maximum-delay&quot;&gt;Maximum Delay&lt;/h4&gt;

&lt;p&gt;We said above that no channel should remain stalled for more than a finite
number of clock cycles.  Such a stall would be defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID &amp;amp;&amp;amp; !*READY&lt;/code&gt;.
Let’s check that property for each channel here, but only if we were given
an &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt; value greater than zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_STALL_COUNT&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_wstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_arstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_bstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_rstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To create a check constraining how many clock cycles a design may be allowed
to stall a channel, we’re going to have to first count the number of stalls.&lt;/p&gt;

&lt;p&gt;I’ll show the write address channel stall count here, and skip the others
for brevity again.&lt;/p&gt;

&lt;p&gt;I should also mention, it took me several rounds to get this count just right.
So, here’s the basic logic:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Anytime we either reset the core, or anytime there’s no pending write
request, or the write address request is accepted, the write address
bus isn’t stalled and we set the counter back to zero.  This much was
straightforward, and matches my first draft.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Likewise any time we are waiting for the other write channel, in this case
the write data channel, to request a transaction we also set the counter to
zero.  This allows the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/xlnxdemo.v&quot;&gt;Xilinx AXI-lite demo
code&lt;/a&gt; to stall
the bus as long as it wants while waiting for the other channel to
synchronize.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If we are waiting for the write channel to be valid
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// then don&#39;t count stalls
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Here’s the part that caught me by surprise though: we only want to accumulate
stalls on this request channel if the back end isn’t stalled.  Hence if
there’s no waiting acknowledgment, or likewise if the acknowledgment that
is waiting has just been accepted, then and only then do we count a stall
against the write address channel for not being ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Finally, &lt;em&gt;assert&lt;/em&gt; that the number of stalls is within our limit.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;very&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;similar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why would we &lt;em&gt;assert&lt;/em&gt; this?  Because the stall signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt;, is
an output of the slave core, and we always place assertions on outputs and
assumptions on inputs.&lt;/p&gt;

&lt;p&gt;Hence, if you look down through the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;property
file&lt;/a&gt;
a bit further, you’ll see an assumption made for the read acknowledgment
channel.  Why is this an assumption?  Because it is dependent upon the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; &lt;em&gt;input&lt;/em&gt; to the core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, all of these assumptions will swap with their assertion counterparts
when we go to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;AXI-lite master property
set&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;xilinx-constraints&quot;&gt;Xilinx Constraints&lt;/h4&gt;

&lt;p&gt;Remember the two Xilinx constraints?  The additional rules to make things work?
Here they are written out.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The address line will never be more than two clocks ahead of
 the write data channel, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The write data channel will never be more than one clock
ahead of the address channel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I found these rules in a DDR3 IP core module usage guide, though I can’t seem
to find that guide right now.  However, since they’ve helped make
the various proofs complete, I’ve chosen to include these rules here.&lt;/p&gt;

&lt;p&gt;Let’s express these as
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal properties&lt;/a&gt;.
First, if there was a write address request two clocks ago, and no
intervening write data request, then we want to assume a write data request now.&lt;/p&gt;

&lt;p&gt;Ok, not quite, that’s missing a key detail: it is possible that the write
address request of two clocks ago &lt;em&gt;followed&lt;/em&gt; a write data request.  That means
we’ll also have to check that the number of write data and write
address requests were equal two clocks ago, or there had been more write
address requests.&lt;/p&gt;

&lt;p&gt;This is another one of those properties where a concurrent assertion would
make the most sense,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We could also express this same property as an immediate assertion.  It’s
uglier and harder to read, but it still works well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second rule is simpler since it only covers two clock periods instead of
three.  It’s the same basic thing, just with the channels reversed and one less
clock period.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together these two properties will keep the two channels roughly synchronized
with one another.  Making the actual synchronization work within the peripheral
code will still remain a challenge.&lt;/p&gt;

&lt;h4 id=&quot;compare-the-number-of-acknowledgments-to-requests&quot;&gt;Compare the number of acknowledgments to requests&lt;/h4&gt;

&lt;p&gt;The next rule we want to check is that for every acknowledgment,
there must have been one and only one request.&lt;/p&gt;

&lt;p&gt;No matter how we do this, we’ll need to start by counting the number of
outstanding requests.  This count goes as follows: following any reset,
the number of outstanding requests must be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise anytime we have accepted a request, or had an acknowledgment
on the return channel accepted, but not both, the count will adjust.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please notice that I didn’t use a pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements here, such as
if there’s been a write address channel request then increment the counter,
else if there’s been a write response then decrement the counter.  I’ve tried
that approach several times in the past, but I always seem to get burned
by it.  Why?  Because of the cases the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements don’t cover, usually
the case where there’s both a request and an acknowledgment on the same clock
cycle.&lt;/p&gt;

&lt;p&gt;Two other counters, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_axi_wr_outstanding&lt;/code&gt; based upon the write data channel
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_axi_rd_outstanding&lt;/code&gt; based upon the read channel, are defined similarly.&lt;/p&gt;

&lt;p&gt;We can now start creating some properties using these count values.  First,
we want to make certain our counters never overflow.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, in order to guarantee that the counters never overflow, we’ll
need to insist that the channel stops making a request one clock earlier.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might notice that these are all a series of assertions–for both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;slave&lt;/a&gt;.
They are not &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSERT()&lt;/code&gt;ions, but rather regular assertions.
This somewhat violates our
rule, that we only make assertions of local state and outputs.  However,
if an assumption is required to keep this number lower, that assumption
should really exist within the implementation defined code.  Hence we’ll just
use regular assertions here.&lt;/p&gt;

&lt;p&gt;Finally, to make certain that acknowledgments do follow requests, we can make
a couple of assertions.  The three counters above make these assertions
really easy.&lt;/p&gt;

&lt;p&gt;First, on any write acknowledgment, there must be at least one outstanding
write address request that needs to be acknowledged.  Likewise, there also
needs to be one write data request that needs to be acknowledged.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that I’m applying the test every time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_bvalid&lt;/code&gt; is true,
not every time &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wr_ack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awr_ack&lt;/code&gt;, nor every time
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID &amp;amp;&amp;amp; S_AXI_BREADY&lt;/code&gt;.  In other words, before even attempting
an acknowledgment, the respective counter should be greater than one.&lt;/p&gt;

&lt;p&gt;A second thing to notice is that I’m not excepting the case where a request
is being made on the same cycle.  Such an acknowledgment, dependent only on
a combinatorial expression of the inputs, is specifically disallowed by the
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;AXI specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The assertion for the read channel is nearly identical to those for the write
channel above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This guarantees we’ll never respond to the bus unless a prior request has
been made.&lt;/p&gt;

&lt;p&gt;We haven’t yet guaranteed that every request will get a response.  For that, we
need to count the number of clock cycles following a request to when a response
should taken place.&lt;/p&gt;

&lt;h4 id=&quot;maximum-response-delay-check&quot;&gt;Maximum Response Delay Check&lt;/h4&gt;

&lt;p&gt;The maximum response delay check is just that: checking that every request
gets a response within a maximum number of clock periods.  This number of clock
periods is captured by the configuration parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt;.  Setting
this parameter to zero will disable this check.&lt;/p&gt;

&lt;p&gt;As with the other tests, we’ll start by counting how long a request remains
unacknowledged or outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_MAX_DELAY&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_wr_ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This count is very similar to the stall count above.  We’ll examine the
read portion below, although the write count portion is similar.  For a read,
we’ll only count up if the reset is inactive, no acknowledgment is pending,
and there exists an outstanding read that has not been acknowledged.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then assert that the counter must remain less than the maximum
acknowledgment delay.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the last of the safety properties necessary to determine that a core
abides by the rules of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I originally started working with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;, I would
stop once I’d finished writing my assertions and assumptions.
I’ve since been burned multiply times by believing that a core worked when I’d
somehow missed something internally, or perhaps assumed one property too many.
For that reason, let’s add in some &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; properties.&lt;/p&gt;

&lt;h4 id=&quot;cover-properties&quot;&gt;Cover Properties&lt;/h4&gt;

&lt;p&gt;As a final property category, it’s important to have some assurance that a
given
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;slave core&lt;/a&gt;
can handle a write request,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_NO_WRITES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a read request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_NO_READS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, upon any
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
run in cover mode, the formal solver will find
some path from reset, through either read or write request, through whatever
operation the slave needs to do within its implementation, all the way to the
acknowledgment being accepted.  In many cases, this will also showcase the
logic within the slave, giving you a trace you can use when debugging so
that you can make sure you are implementing your logic properly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’d like to say that it only took me one weekend to build &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;.
That’s roughly true.  Interface property lists such as &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this
one&lt;/a&gt;
really aren’t that hard or difficult to build for a given application.  Even
better, the basic properties tend to remain the same from one application to
the next.  For example, we’re still using the same basic
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
properties here that we used for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus&lt;/a&gt;, only now we are
using different names for the signals.&lt;/p&gt;

&lt;p&gt;However, it has taken some work on my part to build some example &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/rtl&quot;&gt;bus
bridges&lt;/a&gt; and a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;demonstration
AXI-lite slave core&lt;/a&gt;
to give &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property
list&lt;/a&gt;
some good exercise.  Further, I’ve been using
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;
to check the
functionality of other AXI-slaves that I’ve found on-line, so I have some
decent confidence that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;
work.&lt;/p&gt;

&lt;p&gt;As we’ve seen above, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
can be used to diagnose and then fix any &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite
core&lt;/a&gt;, such as the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;one produced
by Vivado that we discussed above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even better, I’ve been able to use &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
to create &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;a core&lt;/a&gt;
that outperforms &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;Xilinx’s AXI-lite demonstration
core&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;This
new example core&lt;/a&gt;
can handle one read or write transaction request and thus acknowledgment
on every clock, and it can keep this speed up indefinitely.  Now, if only
the interconnect would maintain that speed, you’d have a peripheral that runs
a full twice as fast.&lt;/p&gt;

&lt;p&gt;Just to give you a hint for what this core might do, here’s an example
write trace from this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;new core&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 6.  Write demonstration through an improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 7.  Read demonstration through the improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-read.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s an example read trace in Fig. 7 on the right.&lt;/p&gt;

&lt;p&gt;Want to know how to build an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
with this kind of throughput?  Check out the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;buffered handshake approach to
pipeline signaling&lt;/a&gt;
and then stay tuned.  That will likely be my next post on the topic of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what about the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt;?  While I have a
full &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to full AXI bridge&lt;/a&gt;,
I have yet to build a property file that would describe the 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt; properly.  Worse,
I’ve put a lot of time into trying to build such a file.
Too much time, in fact, so I really can’t afford to put much more time into it.&lt;/p&gt;

&lt;p&gt;I’m sure I’ll get it soon enough, but given the amount of work it has taken
me so far, it’s not very likely to be an open source core in the near
future.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And it came to pass, when the king had heard the words of the book of the law, that he rent his clothes. (2Kings 22:11)&lt;/em&gt;</description>
        <pubDate>Fri, 28 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2018/12/28/axilite.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/12/28/axilite.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>AutoFPGA&#39;s linker script support gets an update</title>
        <description>&lt;p&gt;It’s been a while since &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;I’ve discussed
AutoFPGA&lt;/a&gt;.  If you
remember from &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;my introduction to
it&lt;/a&gt;, it’s a System on
a Chip composition tool designed to compose a design together from multiple
components.  While most of the work it does consists of copying tags from a
configuration file to one of several output files, it will also assign
addresses to peripherals on a bus and create an interconnect to connect
those peripherals together.&lt;/p&gt;

&lt;p&gt;I’ve now used &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; on several of &lt;a href=&quot;/projects.html&quot;&gt;my projects&lt;/a&gt;.  I used it
first on my &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip&lt;/a&gt;
&lt;a href=&quot;/projects.html&quot;&gt;project&lt;/a&gt;.  I maintain a
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;ZipCPU simulation test capability in ZBasic&lt;/a&gt;,
another project that uses &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  My iCE40 designs, both
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;ICOZip&lt;/a&gt; for the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;icoboard&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;TinyZip&lt;/a&gt; for the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt;, both use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  Even
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; is slowly getting an
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;upgrade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why?  Because (when done right) it makes it &lt;em&gt;easy&lt;/em&gt; to compose systems from
other components.  Components may be added to or removed from a design simply
by adding or removing them from the 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line and rebuilding.&lt;/p&gt;

&lt;p&gt;Why not other tools?  Because I really didn’t want to learn another language
besides the &lt;a href=&quot;/tutorial&quot;&gt;Verilog&lt;/a&gt;,
&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial&quot;&gt;C++&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;,
and so forth that I already work with.  But aren’t
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
scripts a new language in themselves?
To some extent this is true, although the purpose of 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
remains being a tool that does its job and gets out of the way.&lt;/p&gt;

&lt;p&gt;However, when I went to build a design for the
&lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, I
discovered a big hole in
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s
capabilities.  While it has always created linker scripts,
the script it has created hasn’t had the flexibility required to handle
such diverse designs as the very spartan
&lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;
as well as the more full featured &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys
Video&lt;/a&gt;
board from &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-problem&quot;&gt;Understanding the problem&lt;/h2&gt;

&lt;p&gt;To understand the problem, we’ll need to take a look at how memory is used
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
design.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
within an &lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
needs access to memory for several purposes.  It needs
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;place to store its instructions&lt;/a&gt;,
another space for &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;global data
structures&lt;/a&gt;,
another space for allocable data structures commonly called a
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and finally
a &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack space&lt;/a&gt;
to support local variables.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A common address space layout&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-segments.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One common arrangement of the address space to support these &lt;a href=&quot;https://wikipedia.org/wiki/Memory_segmentation&quot;&gt;various
purposes&lt;/a&gt;
contains a keep out region near
zero, followed by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;code instructions&lt;/a&gt;,
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;data structures&lt;/a&gt;,
the &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and then a
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack&lt;/a&gt;
in that order, as shown in Fig 1.  The
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack&lt;/a&gt;
typically starts at the
end of memory and grows upwards with each subroutine call, whereas the
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;
typically starts at the end of global variable memory and grows downwards
with each &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;However, &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
systems tend not to have one monolithic type of memory.  They
typically have several memory types within any design.  These basic
memories include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash memory&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is a slow non-volatile memory.  It is great for initial instructions
to get a program off the ground.  Since it is slow to access, it may not
be ideal to execute programs from, although small designs may need to do
just that.&lt;/p&gt;

    &lt;p&gt;The two big details you need to know are that
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;
is slow, and it is very difficult to write to as part of a program.
This makes it really good as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt; memory, but not so
great for other purposes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;Block RAM&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is the ideal type of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
you’d want to use in any system.  It is fast.  It’s simple to use and
create.  The cost to access one part of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
is the same as the cost to access any other part of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The big downside of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;?
You only have a limited amount of it.  For
example, the iCE40HX8k FPGA typically has only about 8kB of usable
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Yes, the data sheet will claim 16kB of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Realistically, some of that 16kB will be used &lt;a href=&quot;/2018/07/21/zipcpu-icoboard.html&quot;&gt;elsewhere in the
design&lt;/a&gt;, so the most
you are likely to get is probably going to be about 8kB of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;Static RAM (SRAM)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is similar to
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
but not quite as fast or as simple to work with.  Like
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
it is volatile.  However, it tends to be off chip, slower to access,
fairly easy to build &lt;a href=&quot;https://github.com/zipCPU/icozip/blob/master/rtl/icozip/sramdev.v&quot;&gt;a
controller&lt;/a&gt; for,
and it also cheap enough that you can have more memory than
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
The drawback is the technology within:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
tends to use more power and take more room than the &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;dynamic types of
RAM&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;One cool feature of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
is that if you ignore it, and don’t cut the power,
the memory doesn’t change.  As a result,
&lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;
once had a &lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;Nexys board design&lt;/a&gt;
that allowed you to load the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
with one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
configuration, and then swap
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
configurations.  Sadly, the &lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;board with this
capability&lt;/a&gt;
is no longer actively marketed and there may only be a small number of
&lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;these boards&lt;/a&gt;
left.  As I understand the story, &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;
struggled to get the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt; chips they
needed to continue manufacturing the boards, and so they were forced to
switch to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;Synchronous, Dynamic Random Access Memory (SDRAM)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The big grandaddy of all RAM devices tend to be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s.&lt;/p&gt;

    &lt;p&gt;By this I’m going to include not only the simpler
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s,
but also the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR_SDRAM&quot;&gt;DDR&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR2_SDRAM&quot;&gt;DDR2&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;s.
Since these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
devices are built out of capacitors,
the memory can be made compact, and so they are inexpensive to manufacture,
and therefore some of the cheapest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; devices
to purchase.  The
biggest drawbacks to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
are that the controllers tend to be complex,
and the access latency tends to be high.  How hard are the controllers?  Well,
let’s just say that I have yet to complete my first working
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
&lt;a href=&quot;https://opencores.org/projects/wbddr3&quot;&gt;controller&lt;/a&gt;.  I know it’s possible,
since &lt;a href=&quot;https://www.librecores.org/enjoy-digital/litedram&quot;&gt;LiteDRAM&lt;/a&gt; has
built some awesome
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
controllers.
Other than that,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s
tend to be high volume low cost devices.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;Hyperram&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A newcomer to the digital design space are the
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;Hyperram chips&lt;/a&gt;.
These really belong in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
category above, since they tend to be built from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s
internally.  The big difference is that
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;s
have a simpler interface that is easy to build a controller for.  Likewise,
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;s
tend to have lower latencies than many other DDR
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
solutions, since the complex
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
array control is handled within the
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;
chip itself.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, so that’s what we have to play with.  What might an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_space&quot;&gt;address space&lt;/a&gt;
look like with these various types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;s?&lt;/p&gt;

&lt;h4 id=&quot;block-ram-only&quot;&gt;Block RAM Only&lt;/h4&gt;

&lt;p&gt;The simplest memory configuration we might build would be a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; only
configuration.  This configuration would be built as though there were no
other memories in the system.  It would typically consist of a keep-out
address range near zero, addresses for the various peripherals, then the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
address itself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Block RAM and peripherals only&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-bkram.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, the problem with this configuration is that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
is both limited and volatile:
it won’t have the values we need within it when we power up our new design, or
later when we reset our design.  Still, this is a great memory model if you
are first bringing up your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
and you haven’t yet debugged any other types of memory.&lt;/p&gt;

&lt;p&gt;I’ll admit I’ve even thought about segmenting the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
into both a read only component, or block ROM if you will, and a volatile
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
component.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Block RAM and Block ROM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-bkrom.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Why would I do this?  Because it seems like few processors measure their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;
performance in the absence of their bus.  Were I to build a system
like this, I might be able to measure the speed of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set&lt;/a&gt;
independent of the bus implementation.&lt;/p&gt;

&lt;p&gt;Of course, the problem with both of these designs is that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; is scarce.
What else might we use?&lt;/p&gt;

&lt;h4 id=&quot;block-ram-and-flash-rom-together&quot;&gt;Block RAM and Flash ROM together&lt;/h4&gt;

&lt;p&gt;Most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s,
have a &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;SPI flash&lt;/a&gt;
of some type which can be used as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; itself exists for the
purpose of storing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
power up configuration, but typically there’s 75% of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
left over once that is done.  Hence, you get this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM memory&lt;/a&gt;.
for “free” with the price of your board.&lt;/p&gt;

&lt;p&gt;When
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
isn’t enough, or alternatively when you want your program to
run from non-volatile memory, this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is available to you.  Indeed, some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
boards don’t really have much more than
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
devices to act as memories as discussed above.  Examples of these boards
include the &lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, the
&lt;a href=&quot;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&quot;&gt;iCEBreaker board&lt;/a&gt;,
and the &lt;a href=&quot;https://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod
S6&lt;/a&gt;.
This leads to a memory space such as Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Flash (ROM) and Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The original linker script I used for &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;my CMod S6
design&lt;/a&gt; placed all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;CPU instructions&lt;/a&gt;
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; following the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
configuration, and all the
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;data memory&lt;/a&gt; into the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
This configuration is shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Flash based instruction layout&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash-loaded.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, the ‘D’ below the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; represents
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;global data&lt;/a&gt;,
‘H’ represents the &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and
the ‘S’ represents the 
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;Stack&lt;/a&gt; memory.
Likewise the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
memory area would start following the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
configuration data, shown here as &lt;code class=&quot;highlighter-rouge&quot;&gt;FPGA&lt;/code&gt;.
This would then be followed by a bootloader ‘B’, traditional instructions
&lt;code class=&quot;highlighter-rouge&quot;&gt;Insns&lt;/code&gt; and any constant program data &lt;code class=&quot;highlighter-rouge&quot;&gt;Const&lt;/code&gt;.  The purpose of the bootloader
was to move any pre-initialized global data, shown here as &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;, to
the beginning of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the design failed to meet my real-time speed requirements, driven by the
need for an audio output, I then came back and placed certain instructions,
those in critical sections of my code that needed to run at high speed, into the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;–copying
them from their original location
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  This new configuration
is shown in Fig 6 below, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; section denoting these high speed
instructions that needed to be copied to
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
by the bootloader &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Placing critical instructions in Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash-kernel.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While I managed to solve this challenge, it was a challenge that needed to be
solved and the solution I found won’t necessarily work for all designs.
Imagine, for example, if I wanted to load the C-library into 
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.  It’s not
going to fit no matter how you try to squeeze it.  (It’s not a pair of Levi’s)
Therefore, given that &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is slow, you might wish to move up to a faster
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; type:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;flash-and-sdram&quot;&gt;Flash and SDRAM&lt;/h4&gt;

&lt;p&gt;Some of my larger devices, such as my
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty A7&lt;/a&gt;
or my
&lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video&lt;/a&gt;
boards, have a
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
as well.  The &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA2-LX25 SoC&lt;/a&gt;
I have also works with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
just not a &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;.
Either way, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
chip provides a lot of memory, allowing programs to copy themselves from the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash device&lt;/a&gt;
to the
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM device&lt;/a&gt;.
This could easily fit the model above, only we would now replace the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
Not only that, for speed we could copy our instructions from the extremely slow
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
onto the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Copying all data to the SDRAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-sdram.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But what about that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;?
How might we use it now?&lt;/p&gt;

&lt;p&gt;The classic answer would be to use all of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
on your device as caches for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
This would mitigate the latency found within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;flash-block-ram-and-sdram&quot;&gt;Flash, Block RAM, and SDRAM&lt;/h4&gt;

&lt;p&gt;Alternatively, we could place certain memories, at our discretion, within the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
I’ve often done this with the stack memory, but you could also do
this with any kernel memory that needed to be low-latency as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. Placing the stack and critical instructions into Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-sdram-kernel.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id=&quot;flash-block-ram-and-hyperram&quot;&gt;Flash, Block RAM, and HyperRAM&lt;/h4&gt;

&lt;p&gt;Now, just when you think you have everything figured out, someone will give you
an auxiliary memory chip, such as this
&lt;a href=&quot;https://1bitsquared.com/products/pmod-hyperram&quot;&gt;Hyperram from one bit-squared&lt;/a&gt;,
and you’ll wonder how to integrate it with the rest of your system.
It may never be a permanent fixture to any given design, or it may be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
the &lt;a href=&quot;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&quot;&gt;iCEBreaker&lt;/a&gt; was
was lacking.  Either way, you now need to quickly and easily
reconfigure the design you once had working.&lt;/p&gt;

&lt;p&gt;My whole point is that, in the realm of reconfigurable memory spaces, the
place where you want to keep all the various parts of your software programs
will likely keep changing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
was just given an upgrade to handle just that issue.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-linker-script-file&quot;&gt;The basic Linker Script File&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
that I build tend to have four parts to them.  First, the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;script&lt;/a&gt;
describes a pointer to the first instruction the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
will execute.  The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html&quot;&gt;second block declares the various
memories&lt;/a&gt;
on board.
The third part declares some fixed pointers that can then be referenced
from within my code.  Finally, the &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/SECTIONS.html&quot;&gt;fourth part describes how the various
components of my design will be laid out in
memory&lt;/a&gt;.  Let’s take a
look at what this might look like.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;following&lt;/a&gt;
is an &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;generated script&lt;/a&gt;
to handle a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; only
configuration on the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt; platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;Binutils&lt;/a&gt;
supports &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Script-Format.html&quot;&gt;script comments delimited by &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;*/&lt;/code&gt;&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;The generated
script&lt;/a&gt;
therefore begins with a block of legalese comments, followed by
the entry point for your program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*******************************************************************************
*
* Filename:	./bkram.ld
*
* Project:	OpenArty, an entirely open SoC based upon the Arty platform
*
*---- Skipped comments
/*******************************************************************************
*/
ENTRY(_start)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important part of this section is the &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRY()&lt;/code&gt; command, which 
specifies that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
entry point will be &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt;.  This label will be set
by the linker to point to the entry point in your code.  For the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
this is always the first instruction in the instruction address space.&lt;/p&gt;

&lt;p&gt;As for the legalese, if you don’t like my legalese then feel free to replace it
with your own.  The legalese in the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; output
files is copied from a file I typically call
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/legalgen.txt&quot;&gt;legalgen.txt&lt;/a&gt;,
and introduced through
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
via a &lt;code class=&quot;highlighter-rouge&quot;&gt;@LEGAL=&lt;/code&gt; tag in the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/global.txt&quot;&gt;global.txt&lt;/a&gt;
file.  Further, as the owner of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, I assert
no ownership rights over the designs you create with it, just over the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
code itself–which is released under
&lt;a href=&quot;https://www.gnu.org/licenses/lgpl-3.0.en.html&quot;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second section is the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section.  This section lists the address
location and length of every physical memory component within the system.
The comment you see in this section below was added by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
It is one of many throughout the various
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated files to help guide you through the process of creating and updating
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MEMORY
{
	/* To be listed here, a slave must be of type MEMORY.  If the slave
	* has a defined name in its @LD.NAME tag, it will be listed here
	* under that name.  The permissions are given by the @LD.PERM tag.
	* If no permission tag exists, a permission of &#39;r&#39; will be assumed.
	*/
	   bkram(wx) : ORIGIN = 0x05000000, LENGTH = 0x00020000
	   flash(rx) : ORIGIN = 0x06000000, LENGTH = 0x01000000
	   sdram(wx) : ORIGIN = 0x08000000, LENGTH = 0x08000000
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section contains a list of all peripherals that contained
a &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE&lt;/code&gt; key with a &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; value.  If you recall,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
works off of configuration files containing
&lt;code class=&quot;highlighter-rouge&quot;&gt;@KEY=VALUE&lt;/code&gt; statements.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE&lt;/code&gt; key currently supports one of
four types of peripherals: &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OTHER&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt;.
What makes &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; peripherals different is that they are included in the
linker script &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section above.  You can read more about this in my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/autofpga/blob/master/doc/icd.txt&quot;&gt;icd.txt&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ORIGIN&lt;/code&gt; value is assigned by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; when
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; assigns
addresses.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH&lt;/code&gt; value, indicating the
size of the peripheral, is given by the &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR&lt;/code&gt; tag times the byte-width
of the bus the peripheral is on.  Hence an &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8000&lt;/code&gt; will create
a &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20000&lt;/code&gt; as shown above for a 32-bit wide bus.&lt;/p&gt;

&lt;p&gt;The names given above come from either the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.NAME&lt;/code&gt; tag within the peripheral,
or the peripheral’s name itself as found within its &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;The point is that as your design is composed, and the memories given addresses,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
supports this reconfiguration by creating and populating the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section
of the linker script.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Simple-Assignments.html&quot;&gt;next section contains a variety of symbol declarations and
assignments&lt;/a&gt;.
These symbol names, if defined and used within your C/C++ code, will be
replaced with the values given below.&lt;/p&gt;

&lt;p&gt;First, all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; peripherals are given names and values pointing
to the beginning of their memory regions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* For each defined memory peripheral, we also define a pointer to that
* memory.  The name of this pointer is given by the @LD.NAME tag within
* the memory peripheral&#39;s configuration
*/
_bkram    = ORIGIN(bkram);
_flash    = ORIGIN(flash);
_sdram    = ORIGIN(sdram);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, if there is an &lt;code class=&quot;highlighter-rouge&quot;&gt;LD.DEFNS&lt;/code&gt; tag within the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; script,
its value will be copied into this section as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* LD.DEFNS */
_kram  = 0; /* No high-speed kernel RAM */
_ram   = ORIGIN(bkram);
_rom   = 0;
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together, the sections above tell the linker that we have three types of
memories,
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
It identifies the origins of those memories, their lengths, and then
creates symbols so that your code can access these values.&lt;/p&gt;

&lt;p&gt;Next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;_kram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_ram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_rom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_stack&lt;/code&gt; symbols are used by
the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;ZipCPU’s
bootloader&lt;/a&gt;
to load items from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;
into a high-speed kernel
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; (i.e. 
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;, if used)
or otherwise into regular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
(i.e. an &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;).
Finally, the top of the
&lt;a href=&quot;https://wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt;
is set to be the end of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; section
in this design.&lt;/p&gt;

&lt;p&gt;These are just symbols assigned to values.  We haven’t described any real
linking yet.  Those instructions are found in the next section.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/SECTIONS.html&quot;&gt;last section describes where the various segments of your program
need to be placed into
memory&lt;/a&gt;.  In &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;this
example&lt;/a&gt;,
I define a new memory section starting at the origin of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
aligned on units of 4 octets, and filled with a series of segments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* LD.SCRIPT */
SECTIONS
{
       .ramcode ORIGIN(bkram) : ALIGN(4) {
               _boot_address = .;
               _kram_start = .;
               _kram_end = .;
       		_ram_image_start = . ;
               *(.start) *(.boot)
               *(.kernel)
               *(.text.startup)
               *(.text*)
               *(.rodata*) *(.strings)
               *(.data) *(COMMON)
               }&amp;gt; bkram
       _ram_image_end = . ;
       .bss : ALIGN_WITH_INPUT {
               *(.bss)
               _bss_image_end = . ;
               } &amp;gt; bkram
       _top_of_heap = .;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are also a series of assignments in this section as well.  These define
both values that will be used by the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;,
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;_ram_image_start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_bss_image_end&lt;/code&gt;, as well as an ending value
which will then be the pointer to the beginning of the heap, &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/bootloader.h&quot;&gt;simple pair of lines within your C++
code&lt;/a&gt;,
such as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will allow you to get the value of this &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt; value, and to initialize
the &lt;code class=&quot;highlighter-rouge&quot;&gt;heap&lt;/code&gt; pointer with it.&lt;/p&gt;

&lt;p&gt;But what about those sections?  Here are some of their basic meanings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start) *(.boot)&lt;/code&gt;: These two segments are
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 specific segments.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start)&lt;/code&gt; segment is used by the
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 to make certain the startup code is the first set of instructions
 following the reset address–which is typically the beginning of
 the &lt;code class=&quot;highlighter-rouge&quot;&gt;SECTIONS&lt;/code&gt; area although not in this case.  The most important part of
 this startup code is that it sets the
 &lt;a href=&quot;https://wikipedia.org/wiki/Call_stack&quot;&gt;stack pointer&lt;/a&gt; that everything
 else will depend upon, and then jumps to the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;.
 When the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 returns, it then jumps to your &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function.  When &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; returns,
 it halts the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.boot)&lt;/code&gt; code is another &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 section where I place the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 instructions.&lt;/p&gt;

    &lt;p&gt;Both of these need to come early in the code order, primarily for the times
 when I need to copy instructions from
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
 to
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;–although
 they aren’t necessarily used in this example.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.kernel)&lt;/code&gt;: I created this
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; specific section to support my
 &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;S6SoC project&lt;/a&gt;.  Any code
 placed in this section will be copied to the fastest
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
 in the project (&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
 RAM&lt;/a&gt;), in case the
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
 has code that must run at high speed.&lt;/p&gt;

    &lt;p&gt;Both the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.kernel)&lt;/code&gt; section as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.boot)&lt;/code&gt;
 sections are unknown to the
 &lt;a href=&quot;https://www.gnu.org/software/binutils&quot;&gt;binutils linker&lt;/a&gt;
 or &lt;a href=&quot;https://gcc.gnu.org&quot;&gt;GCC&lt;/a&gt;.  The code to be placed
 in these sections must specifically be marked as such.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.text*)&lt;/code&gt;: These sections contain the instructions for the program in
 question.  Now that we have all the nastiness above out of the way, we can
 actually place these sections, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.text.startup)&lt;/code&gt; section among
 these placed into memory first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.rodata*) *(.strings) *(.data) *(COMMON)&lt;/code&gt;: These sections contain the
 read-only (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;) data used by my program, any strings within the
 program, and finally any global data structures with initial values.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 needs to copy these sections into their places, but nothing else is required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.bss)&lt;/code&gt;: The final section is the
 &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;.
 Unlike the other segments above, where the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 just needs to copy them into place, the
 &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;
 needs to be cleared to all zeros.  This is where any uninitialized
 global variables within your program will be placed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s one other thing you need to know about this section, the &lt;code class=&quot;highlighter-rouge&quot;&gt;}&amp;gt; bkram&lt;/code&gt;
notation.  This means that the section just described should be allocated
a place in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt; device.  Something else you might see is
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&amp;gt; bkram AT&amp;gt;flash&lt;/code&gt;.  This means that the section needs to be placed into
&lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;, and that your code needs to be linked as though the section were
placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;.  However, it is first placed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt; memory
area, and left there for your
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
to copy it into &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that you know what the various sections of this file are, and how the
segments within your program will be allocated among them, what happens if
we want to do something else?&lt;/p&gt;

&lt;h4 id=&quot;multiple-linker-configurations&quot;&gt;Multiple Linker Configurations&lt;/h4&gt;

&lt;p&gt;Originally, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
created one linker script, called &lt;code class=&quot;highlighter-rouge&quot;&gt;board.ld&lt;/code&gt;, and adjusted it based upon
the peripherals available to it.  For example, it could handle designs with
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
but couldn’t really do much with
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;s.
This worked great for some designs, such as those with a massive amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
as shown in Fig. 7 or 8 above, but horrible for others, such as Fig. 2
through 6 above.&lt;/p&gt;

&lt;p&gt;As an example, if I wanted a design to run from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; alone,
such as to test the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
itself apart from its memory peripherals with
the form in Fig. 2 above, this one size fits all
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
would have be inadequate.  Likewise, if I had a design that didn’t have enough
room in &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
to copy the various program segments into (imagine the C-library here), the
stock linker script wouldn’t work either.  While I could create a script by
hand for each of these scenarios, such as I was &lt;a href=&quot;https://github.com/ZipCPU/tinyzip/blob/master/sw/board/boardram.ld&quot;&gt;starting to
do&lt;/a&gt;
in my &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;TinyZip design&lt;/a&gt;, that script would
then need to be updated by hand every time the addresses in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; region changed.&lt;/p&gt;

&lt;p&gt;This was getting annoying.&lt;/p&gt;

&lt;p&gt;To deal with this, I just recently created some new
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; tags for
creating &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt;: If present in a given configuration file,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
will create a 
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
and write it out to the named file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt;: If present, these definitions will be added to the definitions
section of the new linker script.&lt;/p&gt;

    &lt;p&gt;Well, sort of.  What if a design has multiple linker script configuration
files?  In this case, the components that have no &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tags will have
their &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt; tags copied to all linker scripts, while the components
with an &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tag will have their &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt; tag copied
into the linker script defined by that component only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.SCRIPT&lt;/code&gt;: This tag, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;SECTION&lt;/code&gt; component above,
will be copied into the linker script associated with the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tag
in the same component verbatim, although with variable substitution
applied.  So, for example, if our design creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;RESET_ADDRESS&lt;/code&gt;
tag within the peripheral named &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; (i.e. having a &lt;code class=&quot;highlighter-rouge&quot;&gt;PREFIX&lt;/code&gt; tag
of &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;, then we might reference &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(zip.RESET_ADDRESS)&lt;/code&gt; to get a
copy of what that address was here in this location.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several former linker tags have kept their functionality, but now have new
names.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.NAME&lt;/code&gt;: This is the name of the memory component, as found in the
linker script.  In the example above, we had names of &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;sdram&lt;/code&gt;.  This tag used to be called &lt;code class=&quot;highlighter-rouge&quot;&gt;@LDSCRIPT.NAME&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.PERM&lt;/code&gt;: The &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section of a linker script requires a permission
string.  The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html#MEMORY&quot;&gt;binutils
documentation&lt;/a&gt;
calls this a set of attributes.  So far, I’ve only used &lt;code class=&quot;highlighter-rouge&quot;&gt;rx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wx&lt;/code&gt; for
executable &lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;
and executable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
respectively.  &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html#MEMORY&quot;&gt;Other possible attributes are defined can be
found in the binutils
documentation&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; does
nothing more than copy then from your design file to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section of the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Remember, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;  is primarily a copy-paste tool with the ability to compose bus interconnects,
and a limited variable substitution and expression evaluation capability
sprinkled within.  Similarly, another of the goals of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; was
that when it’s work was done, the computer generated files would be
comprehensible, rather than your more typical computerese.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.ENTRY&lt;/code&gt;: If present, this will define the entry symbol for a given
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.
If not specified, this will default to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt; symbol as above.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This updated method of generating custom
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
has now worked so well for me that I have several
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
defined for the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; upgrade to
my &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/&quot;&gt;OpenArty&lt;/a&gt; project:
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/mem_bkram_only.txt&quot;&gt;one for block RAM
only&lt;/a&gt;,
another for &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/mem_flash_bkram.txt&quot;&gt;flash plus block
RAM&lt;/a&gt;,
and I’ll be adding a third for flash, block RAM, and SDRAM support.
Even better, using this approach, adding
support for a
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM controller&lt;/a&gt;
should be just as simple as copying the controller components to my
RTL directory (or a subdirectory of it) and
adding the
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
linker script configuration to my design.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Working with one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
design across many different hardware components and
capabilities can be a challenge.  It can be difficult to take a basic
design and rapidly configure it for a new set of hardware, or to maintain
support across several different hardware implementations.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can handle many of these reconfiguration needs, to make reconfiguring
designs from one hardware configuration to another easier.&lt;/p&gt;

&lt;p&gt;Even better,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
generation just got an upgrade to help it deal with the need for multiple
different memory configurations–either between designs or even within the
same design.&lt;/p&gt;

&lt;p&gt;Of course, the unwritten reality of this article is that I don’t really want to
spend my time writing
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  I would
rather be spending my time getting my new
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM&lt;/a&gt;
to work.  This is just my way of trying to simplify the massive configuration
challenges I have along the way.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Let him that stole steal no more: but rather let him labour, working with his hands the thing which is good, that he may have to give to him that needeth. (Eph 4:28)&lt;/em&gt;</description>
        <pubDate>Sat, 22 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2018/12/22/autofpga-ld.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2018/12/22/autofpga-ld.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Makefiles for formal proofs with SymbiYosys</title>
        <description>&lt;p&gt;It seems that the more I work with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, the more options it accumulates.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. &lt;a href=&quot;/about/zipcpu.html&quot;&gt;A CPU&lt;/a&gt; with lots of options&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/zipcpu-config.png&quot;&gt;&lt;img src=&quot;/img/zipcpu-config.png&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I simplified the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU options&lt;/a&gt;
somewhat to present Fig. 1, but you can see &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;all the CPU options and their
settings&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/&quot;&gt;ZipCPU GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First it was the prefetch: I built a &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;basic
prefetch&lt;/a&gt;, then &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;one
that can issue two bus requests at
once&lt;/a&gt;, then &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;one with
a fullly integrated
I-cache&lt;/a&gt;.  In
each case, I wanted more performance but didn’t want to give up the ability of
building the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in an extremely
low logic configuration.&lt;/p&gt;

&lt;p&gt;Then it was &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;the
multiplies&lt;/a&gt;:
not every board I worked with had the embedded DSP elements required for
hardware accelerated multiplies.  Indeed, some that had embedded
DSP elements couldn’t handle a 32x32 bit multiply within a single clock
(Spartan 6).  This forced me into two separate multiplication implementations.
Then, the fact that the iCE40 has &lt;em&gt;no&lt;/em&gt; DSPs lead to an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/slowmpy.v&quot;&gt;additional
multiplication
implementation&lt;/a&gt;
just to handle that environment.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. The pipeline structure of the ZipCPU&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.png&quot; alt=&quot;&quot; width=&quot;531&quot; /&gt;&amp;gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;initial memory
subsystem&lt;/a&gt;,
while working, was cripplingly slow.  A &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;faster memory subsystem was written to
replace it&lt;/a&gt;,
and then a proper &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;
was written to replace that.  On top of that, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can optionally support a
&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html&quot;&gt;lock instruction for atomic
access&lt;/a&gt;,
a compressed instruction set, a set of CPU-local peripherals, and more.&lt;/p&gt;

&lt;p&gt;If those weren’t enough changes, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/idecode.v&quot;&gt;instruction
decoder&lt;/a&gt; needs to
support all of the various instruction set extensions.  Lock instructions need
to be honored by the memory module, unless no lock instruction is implemented.
Multiplication instructions need to be honored if enabled, while creating
illegal instruction exceptions if not.  Some of the options need special
decoding, such as the simulation instructions or the early
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branching&lt;/a&gt;
instructions.&lt;/p&gt;

&lt;p&gt;This leaves me with an ongoing and growing problem: how do you
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;a core&lt;/a&gt;
that has so many options associated with it?&lt;/p&gt;

&lt;p&gt;Let’s look at this problem from both the standpoint of the
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
script file, as well as a supporting
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;symbiyosys-tasks&quot;&gt;SymbiYosys Tasks&lt;/h2&gt;

&lt;p&gt;While the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is highly
configurable, it doesn’t make sense to test every permutation of the various
configurations.  Therefore, let’s look over some of the more common
configuration settings used by the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  More than that, we’ll give
each of these configurations names.  These names will us remember the
configuration set, as well as helping to make our
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
configuration simpler in a moment.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;dcache&lt;/p&gt;

    &lt;p&gt;This new option describes a configuration that uses the brand new
(&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;,
Xilinx Series-7 proven) &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;.  If
you want performance from the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
this is no-holds barred attempt at high speed and full features.&lt;/p&gt;

    &lt;p&gt;This is the configuration I am testing within my
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; project, in case you want to
see it in action.  (You may need to check out the &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;autoarty
branch&lt;/a&gt; where it exists
today.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;piped&lt;/p&gt;

    &lt;p&gt;Prior to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;, this
configuration was the no-holds barred high speed, full
featured &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; version.  It
describes a fully pipelined implementation containing an
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;multiplies&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divides&lt;/a&gt;,
compressed instruction set, and early branching capability.  (The
early branching capability allows you to branch from the decode stage,
without waiting for the later stages.  It applies only to unconditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branches&lt;/a&gt;.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nopipe&lt;/p&gt;

    &lt;p&gt;This is the same thing, only we shut down everything we don’t need: no
pipeline CPU (forcing a minimum of 3 clocks per instruction), no
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;multiplies&lt;/a&gt;,
no &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divide
instructions&lt;/a&gt;,
but still supports the compressed instruction set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lowlogic&lt;/p&gt;

    &lt;p&gt;Much to my surprise, the no-pipelined option wasn’t as small as I needed to
get for some implementations, so this version drops the compressed
instruction set support.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ice40&lt;/p&gt;

    &lt;p&gt;Didn’t we get rid of enough stuff yet?&lt;/p&gt;

    &lt;p&gt;Apparently not.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/formal/2017/07/21/zipcpu-icoboard.html&quot;&gt;iCE40 doesn’t support distributed
RAM&lt;/a&gt;.  All reads
from the register file need to go directly into a register first, and only
on the next clock can we do anything with them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
we can declare different “tasks” to verify each of these
configurations.  The following code declares five such “tasks”, one on
each line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
dcache		full_proof      dcache
piped		full_proof      no_dcache
nopipe		nopipe          no_dcache
lowlogic	nopipe		no_dcache
ice40		nopipe          no_dcache	nobkram&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the format of this section.  It starts with a &lt;code class=&quot;highlighter-rouge&quot;&gt;[tasks]&lt;/code&gt; line.  Every
line thereafter begins with the name of a task.  In our case, these represent
the various configurations we just outlined above.  The second half of the line
is more interesting.  This consists of a series of labels which will also be
accepted as task names later.  That way, we can specify &lt;code class=&quot;highlighter-rouge&quot;&gt;ice40&lt;/code&gt; and get
all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;nopipe&lt;/code&gt; (non-pipelined) options, together with the &lt;code class=&quot;highlighter-rouge&quot;&gt;no_dcache&lt;/code&gt;
option and the more critical &lt;code class=&quot;highlighter-rouge&quot;&gt;nobkram&lt;/code&gt; option.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. One command per line&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/sby-taskcmd.svg&quot; alt=&quot;taskname: yosys-cmd&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;How might we use this?  There are two basic approaches.  First, we can begin
any line following in our
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
script with a task name followed by a colon.  Once done, everything
following is only executed if that given task name is the active
task.  This applies to the aliased names as well, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;full_proof&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;no_dcache&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[options]
mode prove
depth 18
dcache:   depth  9
piped:    depth 14
nopipe:   depth 11
lowlogic: depth 10
ice40:    depth 11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far, this is kind of interesting but not all that useful.&lt;/p&gt;

&lt;p&gt;Let’s consider some other things &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; offers.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;,
you can set a macro.  You might recognize macros by their Verilog usage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Define a macro, NO_DISTRIBUTED_RAM
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	NO_DISTRIBUTED_RAM&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NO_DISTRIBUTED_RAM&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Code that only gets executed if `NO_DISTRIBUTED_RAM` is defined
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Code that only gets executed if `NO_DISTRIBUTED_RAM` is not defined
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One problem with this sort of declaration is that it isn’t clear whether the
macro defined in one file will remain active in another.&lt;/p&gt;

&lt;p&gt;Alternatively, we could use a
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_read.html&quot;&gt;command to set this macro&lt;/a&gt;
but only for some configurations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[script]
nobkram: read -define -DNO_DISTRIBUTED_RAM
read -define -DZIPCPU
#
# ... files the ZipCPU depends upon have been skipped here
# for brevity
#
read -formal zipcpu.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This defines the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_DISTRIBUTED_RAM&lt;/code&gt; across all input files, but only
if &lt;code class=&quot;highlighter-rouge&quot;&gt;nobkram&lt;/code&gt; is the active task.  Likewise, &lt;code class=&quot;highlighter-rouge&quot;&gt;ZIPCPU&lt;/code&gt; is defined for all
tasks.  This latter definition is how I handle &lt;a href=&quot;/formal/2018/12/18/skynet.html&quot;&gt;telling submodules if they
are being verified as separate modules or as submodules
instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another very useful &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
command is the &lt;a href=&quot;http://www.clifford.at/yosys/cmd_chparam.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chparam&lt;/code&gt;
command&lt;/a&gt;.  You can use this to change
the value of any parameter within your logic.  As examples, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has several high
level parameters.  Perhaps you may have noticed some of them in Fig 1. above.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;IMPLEMENT_FPU&lt;/code&gt; is a single bit parameter
that controls whether the (still not yet existent) floating point unit (FPU)
is included.  As a more relevant example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LGDCACHE&lt;/code&gt; controls the size
of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
and whether the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
is included at all.  If this value is set to zero, no
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;
will be included in the build, whereas if it is non-zero it sets the size
of the cache.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Associating multiple lines with a given script&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/sby-taskcmd-set.svg&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For this, we’ll use the second approach for specifying task-configurations,
as shown in Fig. 4 on the right.  In this case, we can start a set of
task-specific commands using the task name and a colon on a line by itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;chparam -set IMPLEMENT_FPU    0 zipcpu

dcache:
chparam -set OPT_LGDCACHE    10 zipcpu

no_dcache:
chparam -set OPT_LGDCACHE     0 zipcpu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This process is continued until either another task name, or
until a line containing two &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;s by themselves.  Hence, the definition of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;full_proof&lt;/code&gt; &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; configuration shown
below, as well as the minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;nopipe&lt;/code&gt;-lined option and the even more
minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;lowlogic&lt;/code&gt; option.  When done, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; line specifies that all the
tasks join together again for the lines following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;full_proof:
chparam -set IMPLEMENT_MPY    1 zipcpu
chparam -set IMPLEMENT_DIVIDE 1 zipcpu
chparam -set EARLY_BRANCHING  1 zipcpu
chparam -set OPT_CIS          1 zipcpu
chparam -set OPT_PIPELINED    1 zipcpu

nopipe:
chparam -set IMPLEMENT_MPY    0 zipcpu
chparam -set IMPLEMENT_DIVIDE 0 zipcpu
chparam -set EARLY_BRANCHING  0 zipcpu
chparam -set OPT_CIS          1 zipcpu
chparam -set OPT_PIPELINED    0 zipcpu

lowlogic:
chparam -set OPT_CIS 0 zipcpu
--

prep -top zipcpu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, just the one command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;sby -f zipcpu.sby&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
the entire
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in &lt;em&gt;all&lt;/em&gt; of these various
configurations.  For each configuration,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will create a directory,
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_dcache&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_full&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_lowlogic&lt;/code&gt;.  Within this
directory, you’ll find the &lt;code class=&quot;highlighter-rouge&quot;&gt;logfile.txt&lt;/code&gt; containing the standard output from
the run.  You can use this to find out whether your design passed that proof,
or if not what assertion or cover statement failed.  You’ll also find an
&lt;code class=&quot;highlighter-rouge&quot;&gt;engine_0&lt;/code&gt; directory with any trace files within it.  (Why &lt;code class=&quot;highlighter-rouge&quot;&gt;engine_0&lt;/code&gt;?
Because I tend to only ever use one
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
engine.  Otherwise you might have other engines as well.)&lt;/p&gt;

&lt;h2 id=&quot;using-make-to-drive-symbiyosys&quot;&gt;Using Make to drive SymbiYosys&lt;/h2&gt;

&lt;p&gt;There’s one other thing
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
provides that is very valuable from a scripting standpoint.  Upon
completion,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will create an empty file in the newly created results
directory indicating the results of the run.  Example files include
&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FAIL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UNKNOWN&lt;/code&gt;.  This file makes it easy to create a
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.
to support several
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
runs, and we only need use the &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file to do it.&lt;/p&gt;

&lt;p&gt;Let’s pick an example component to verify, such as the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer
that we discussed earlier&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;timer itself&lt;/a&gt;
has no real configuration options, so to verify it we could just place the
following two lines into our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
however, will make a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; upon every run.
Once this directory exists, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will no longer run our proof.  However, if
we tell &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; is just a
name of something to do and not a file, we can create the functionality we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/bench/formal/Makefile&quot;&gt;This Makefile&lt;/a&gt;
will now command a
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
proof everytime we try to &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;But what if the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;
hasn’t changed?  Why should we re-verify it if &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;the code within
it&lt;/a&gt;
hasn’t changed, and if it passed the last time?&lt;/p&gt;

&lt;p&gt;Here is where &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; starts to shine.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer/PASS&lt;/code&gt; is a file, created
upon successful completion of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
pass, we can tell
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;
that this file is created from the files the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;.
depends upon.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer/PASS&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;../../rtl/peripherals/ziptimer.v&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, anytime the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;ziptimer.v file&lt;/a&gt;
changes, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
it again.  Further, should the proof fail, the &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file will not get
created, and so the next time we call
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; it will attempt to create this
file again until our proof passes.&lt;/p&gt;

&lt;p&gt;What if we wanted to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt;
a lot of things?  Rather than running 
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; many times, once per target, we might
instead start our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;
with a list of proofs, containing both the components as well as larger proofs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;TESTS &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TESTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; zipcpu
&lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TESTS)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; is the default &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target,
as defined by being the first target within our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;,
then all of the tests named in &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TESTS)&lt;/code&gt; will get built, er … verified.&lt;/p&gt;

&lt;p&gt;Let’s clean this up a little more with some definitions.  Since I like to keep
my &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/bench/formal&quot;&gt;scripts&lt;/a&gt;
separate from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/rtl&quot;&gt;my Verilog
files&lt;/a&gt;, it might help
to use a name for that path to simplify it.  Here, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;RTL&lt;/code&gt;.  Once
defined, this value will get substituted anytime we reference &lt;code class=&quot;highlighter-rouge&quot;&gt;$(RTL)&lt;/code&gt;.
Likewise we’ll shorten the name of our target &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;RTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; ../../rtl

&lt;span class=&quot;nv&quot;&gt;TMR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; ziptimer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also define the names of our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal wishbone
property sets&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;MASTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/fwb_master.v
&lt;span class=&quot;nv&quot;&gt;SLAVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/ex/fwb_slave.v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Putting all this together, the script now says that …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt; is a “phony” target that doesn’t build a file.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;To build &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt; we need to first build &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt;.  Why the extra step?
Just so that we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;make ziptimer&lt;/code&gt; later, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;make
ziptimer/PASS&lt;/code&gt; or worse &lt;code class=&quot;highlighter-rouge&quot;&gt;make ziptimer_timerconfiguration/PASS&lt;/code&gt; for
every
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
configuration we might have.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(TMR)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR)/PASS&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Finally, we can call
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
our &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;.
This proof is dependent upon not only the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;code for the timer
itself&lt;/a&gt;,
but also a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;list of formal wishbone
properties&lt;/a&gt;.
These are called dependency files, or sometimes just dependencies
for short, because the validity of our proof &lt;em&gt;depends&lt;/em&gt; upon these files.
By listing these dependencies to the right of the &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will only
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
our &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
if either the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt; file is missing, or if one of the
dependency files is newer than the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(TMR)/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR).sby $(RTL)/peripherals/$(TMR).v $(SLAVE)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(TMR)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is exactly what we want from a
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;!
Running  &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will run all of our &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; proofs,
but once all the logic is
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified&lt;/a&gt;,
running
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will just return a message telling
us it has nothing to do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
make: Nothing to be &lt;span class=&quot;k&quot;&gt;done for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;all&#39;&lt;/span&gt;.
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But how shall we handle the multiple configurations we discussed earlier?&lt;/p&gt;

&lt;p&gt;Why not set up one proof per configuration?&lt;/p&gt;

&lt;p&gt;Let’s examine the proof of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;core&lt;/a&gt;
itself.  Remember how we had so many configurations above?  What if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file associated with each configuration was a
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; zipcpu
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Proofs to build
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$(CPU)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)_dcache/PASS $(CPU)_piped/PASS&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;$(CPU)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)_nopipe/PASS $(CPU)_lowlogic/PASS $(CPU)_ice40/PASS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Files the proofs depend upon
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPUDEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/&lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/cpuops.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/idecode.v &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/pipemem.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/memops.v			  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/wbdblpriarb.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/fwb_counter.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/cpudefs.v  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	f_idecode.v abs_div.v abs_prefetch.v abs_mpy.v &lt;span class=&quot;nv&quot;&gt;$(MASTER)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(SLAVE)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby
&lt;span class=&quot;c&quot;&gt;# Now one line for each proof, to build the respective &amp;lt;sbydir&amp;gt;/PASS files
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$(CPU)_dcache/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby dcache

&lt;span class=&quot;nl&quot;&gt;$(CPU)_piped/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby piped

&lt;span class=&quot;nl&quot;&gt;$(CPU)_nopipe/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby nopipe

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;idea&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;point&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once accomplished, one simple command,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will run all of the proofs we have described within our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.
This includes calling &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt; every one of
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s various configurations.&lt;/p&gt;

&lt;p&gt;Once completed, or even before, you can run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make -n&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to see what proofs have yet to be completed, or equivalently which proofs have
failed–assuming in the latter case that
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; has completed.&lt;/p&gt;

&lt;p&gt;Of course, the problem with using &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n&lt;/code&gt; to determine which proofs have
failed is what happens after only one proof fails.  After the first proof
fails, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will give you no
information about whether or not the remaining proofs might pass.
Alternatively, if you don’t want
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; to stop on the first failed proof,
you can instead run,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make -k&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Want to use all of your host processors multiple cores?  You could specify
&lt;code class=&quot;highlighter-rouge&quot;&gt;make -k -j &amp;lt;ncpus&amp;gt;&lt;/code&gt; to use all &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ncpus&amp;gt;&lt;/code&gt; of them.  However, this might
leave some of your build cores overloaded during induction.  For
this reason, I’ve considered running &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n -j &amp;lt;ncpus/2&amp;gt;&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;What’s all this good for?  Well, for me this means I can verify my brand new
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;instruction cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/idecode.v&quot;&gt;instruction decoder&lt;/a&gt;,
several arbiters, … and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
itself
from one &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command.  If the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command fails, I can go back and
examine the respective &lt;code class=&quot;highlighter-rouge&quot;&gt;logfile.txt&lt;/code&gt;s to see why.  Likewise, if I want
to know what proofs need to be re-accomplished, I can just type &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n&lt;/code&gt;
to see what &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; would try to build if you ran it again.&lt;/p&gt;

&lt;p&gt;With a little more work, I could split the list of Verilog files, &lt;code class=&quot;highlighter-rouge&quot;&gt;$(CPUDEPS)&lt;/code&gt;,
into a more finer grained list, so that all of the CPU configurations
don’t need to be re-verified every time one file, used only by some
configurations, changes.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;When I first started using this approach of testing multiple configurations
automatically using
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;,
I immediately found several errors within code that I had assumed was working.
The first bug was in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/memops.v&quot;&gt;memory
component&lt;/a&gt;,
where it wasn’t properly handling a misaligned address exception (an option
that wasn’t checked by default).  The second bug was within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;I-cache&lt;/a&gt;,
that I am hoping to blog about soon.  Since I had only verified the safety
properties within it, that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;s given the assumptions, I hadn’t
noticed that certain assumptions rendered the &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;proof
vacuous&lt;/a&gt;.
Now, using these multiple configurations, I can both prove the assertions
and run cover to be even more certain that the various
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; components work.&lt;/p&gt;

&lt;p&gt;So even though I’ve only started using this approach in the most recent
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu&quot;&gt;release of the ZipCPU&lt;/a&gt;, because of the
bugs I’ve found with it using this new approach, I now like it so much that
I’m likely to slowly modify all of the
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;s
within my &lt;a href=&quot;/projects.html&quot;&gt;various projects&lt;/a&gt; to use this
approach as I have opportunity.  Even if the core in question isn’t
configurable, I’m going to make certain I do this in order to guarantee that
the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; checks run automatically.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Then I saw, and considered it well: I looked upon it, and received instruction. (Prov 24:32)&lt;/em&gt;</description>
        <pubDate>Thu, 20 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2018/12/20/sby-makefile.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2018/12/20/sby-makefile.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Swapping assumptions and assertions doesn&#39;t work</title>
        <description>&lt;p&gt;If there’s one thing I hate, it’s admitting I’m wrong.  Today, I need to do
that.&lt;/p&gt;

&lt;p&gt;One of the very real and practical difficulties of working with
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
is managing the complexity.
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal methods&lt;/a&gt;
are roughly exponential in their complexity.  Practically, this means that
there is a limit to the complexity of any design that you wish to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;.
This means that the engineer using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;formal tools&lt;/a&gt;
needs to carefully consider what parts of the design to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;,
and how to carefully break the entire design into smaller pieces that can
verified individually.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;I discussed one possible way of doing this
before&lt;/a&gt;,
as part of aggregating
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
modules together.  The basic approach I used was to
verify the smaller “leaf” sub-modules, and then to aggregate up to larger
modules.  When aggregating up, I used an approach suggested to me by
&lt;a href=&quot;https://www.onespin.com&quot;&gt;another&lt;/a&gt;:
swap the assumptions with the assertions of the submodule.  That way, you
verify that the assumptions made within the submodule hold as part of verifying
the parent module.&lt;/p&gt;

&lt;p&gt;Pictorially, I explained this concept using Fig 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 1. Invariants applied to a parent/leaf module hierarchy&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/invariance-external.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This picture shows the verification process in two parts.  The first part,
on the left,
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifies&lt;/a&gt;
the submodule(s).  These are verified as independent modules from the parent.&lt;/p&gt;

&lt;p&gt;For the second part of the verification shown in Fig. 1, the parent modules
are verified, with the submodules beneath them.  In this case, the assumptions
about the submodules inputs are transformed into assertions, and the assertions
within the submodule are then transformed into assumptions.  The idea is that
if you’ve already proven that the assertions of the submodule hold given the
assumptions, then all you need do is to verify the assumptions of the submodule
and you then know that the assertions will pass.&lt;/p&gt;

&lt;p&gt;I’ve now used this logic within many of my designs, and I’ve been very pleased
with it.&lt;/p&gt;

&lt;p&gt;The only problem with it?  It doesn’t work.  It can lead to false negatives,
where you believe your design works when in actuality it does not.&lt;/p&gt;

&lt;h2 id=&quot;skynet&quot;&gt;Skynet&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. &lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt;, the fictional AI system created by Cyberdyne Systems that tried to destroy all of humanity&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skynet.jpg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/oe1cxw&quot;&gt;Clifford Wolf&lt;/a&gt; was kind enough to provide the
necessary counter example, framed in terms of 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt;, the fictional
defense machine that decided to kill all humans as part of the back story
for &lt;a href=&quot;https://en.wikipedia.org/wiki/Terminator_(franchise)&quot;&gt;Terminator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It goes like this, suppose we have a simple design that determines whether
or not all humanity should be destroyed.  The designers of this system were
smart enough to formally verify it, and so they had a strong confidence that
humanity would never be destroyed.&lt;/p&gt;

&lt;p&gt;Because of the logic flaw we’ll be discussing today, their confidence was
a false confidence.&lt;/p&gt;

&lt;p&gt;Imagine their logic was something as simple as logic below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;skynet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we obviously don’t want to kill everyone, we add a formal section to this
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet logic&lt;/a&gt;
to make certain &lt;code class=&quot;highlighter-rouge&quot;&gt;o_kill_all_humans&lt;/code&gt; will never be asserted,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
on &lt;a href=&quot;/examples/skynet.v&quot;&gt;this logic&lt;/a&gt; will assure us that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
will never decide to destroy all of humanity.&lt;/p&gt;

&lt;p&gt;If only the story stopped there.&lt;/p&gt;

&lt;h2 id=&quot;placing-skynet-in-within-cyberdyne-systems&quot;&gt;Placing Skynet in within Cyberdyne Systems&lt;/h2&gt;

&lt;p&gt;The problem lies in the next step.  Using the approach we discussed before,
we’ll replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; statements with macros.  These
macros are defined depending upon whether or not we are
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
the &lt;a href=&quot;/examples/skynet.v&quot;&gt;submodule (skynet)&lt;/a&gt;,
or its parent–&lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Cyberdyne
Systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do this, we’ll start by creating the various macros, depending upon whether
or not &lt;code class=&quot;highlighter-rouge&quot;&gt;SUBMODULE&lt;/code&gt; is defined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SUBMODULE&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assume&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	ASSERT	assert&lt;span class=&quot;cp&quot;&gt;
`else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assert&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	ASSERT	assume&lt;span class=&quot;cp&quot;&gt;
`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using these macros, we can then rewrite our two formal properties:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, as long as SUBMODULE remains defined, we can still prove that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
will not destroy all humans.&lt;/p&gt;

&lt;p&gt;Let’s add
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;’s &lt;a href=&quot;/examples/skynet.v&quot;&gt;parent module, Cyberdyne
Systems&lt;/a&gt;.  We’ll keep
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt;
simple: there’s no logic within it at all.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyberdyne_systems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;skynet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;determine_fate_of_humanity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, nothing in the logic of
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt; prevents
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
from being corrupted and killing all humans.&lt;/p&gt;

&lt;p&gt;By design this proof should fail, alerting us to the possibility that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt; was never properly constrained.&lt;/p&gt;

&lt;p&gt;It does not fail.  Instead, &lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt;
releases a monster.  Why wasn’t it caught during
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;what-went-wrong&quot;&gt;What went wrong?&lt;/h2&gt;

&lt;p&gt;We did everything right so far: We
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt; that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
would never
kill all humans as long as the input was never equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;.  We
even asserted that the input would never equal &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;, and this
assertion passed.  We then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
both components together, proving that humanity was safe.  However, you
can see from inspection that &lt;em&gt;nothing&lt;/em&gt; keeps the input from being
&lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happened?  Why didn’t this proof fail when it should have?&lt;/p&gt;

&lt;p&gt;The problem is simple: the critical assertion, that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_kill_all_humans&lt;/code&gt;, 
would never be true was converted into an assumption.  Assumptions, if you will
recall, limit the space of what the solver examines.  They take precedence
over assertions.  In this case, the assertion turned assumption
prevented &lt;code class=&quot;highlighter-rouge&quot;&gt;i_input&lt;/code&gt; from becoming &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt; within the solver since
this would’ve caused the assumption to be violated.&lt;/p&gt;

&lt;h2 id=&quot;rescuing-this-logic&quot;&gt;Rescuing this logic&lt;/h2&gt;

&lt;p&gt;There are a couple of things we can do to try to “rescue” this method, none
of them are truly as nice as the initial method appeared to be in the first
place.  We can:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Remove all of the logic within
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;,
leaving only the formal properties behind.&lt;/p&gt;

    &lt;p&gt;Because there’s no logic between the input assumptions, now turned into
assertions, and the output assertions, now turned into assumptions, the
output could be anything depending upon the choice of the solver.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep the logic within
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;,
replace the original submodule assumptions
with an assertion, and then remove all of the local assertions.&lt;/p&gt;

    &lt;p&gt;Sadly, this approach doesn’t work with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
as it can leave the local registers within a module unconstrained.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace the assumptions with assertions, but leave the original assertions
untouched.  Hence we would have only &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; properties within the
submodule design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ASSERT&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SUBMODULE&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assume&lt;span class=&quot;cp&quot;&gt;
`else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assert&lt;span class=&quot;cp&quot;&gt;
`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how I am personally going to move forward when aggregating modules.
   It is simple and robust.  The only problem is that the complexity only
   increases upon aggregation.&lt;/p&gt;

&lt;p&gt;Indeed, if you apply this method to
   &lt;a href=&quot;/examples/skynet.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skynet.v&lt;/code&gt;&lt;/a&gt;,
   you’ll find that the
   parent proof fails (as desired), revealing that nothing is keeping
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt; from killing
   all humans.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;If we could adjust the formal engine, there would be another approach.&lt;/p&gt;

    &lt;p&gt;Normally, during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
all of the assertions are treated as assumptions
until the last step.  This allows these assertions to constrain the design
until the last step, helping the design enter into a valid state during the
run-up to the final stage of the proof.  Then, in that final state, the
assertions are applied and the design succeeds or fails.&lt;/p&gt;

    &lt;p&gt;If we could create a third type of assertion, let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert&lt;/code&gt; for
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
assertion, another approach might work.  &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert()&lt;/code&gt;
would be ignored during the base case prior to the induction.  During the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;inductive&lt;/a&gt;
step, &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert()&lt;/code&gt;
would apply as an assumption for the first &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; steps of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
and then get ignored on the last step leaving behind all of the other
assertions.&lt;/p&gt;

    &lt;p&gt;Of course, this would only work if the first pass (submodule) verification
evaluated &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert&lt;/code&gt; as though it were a true assertion.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps you are wondering how likely it is that this flawed approach,
discussed above, would result in a false alarm.  While I haven’t been keeping
score, I’ve seen problems in many of my proofs that had used this approach.
The rate may even be as high as thirty percent or more, depending upon the
design.  It’s high enough that you cannot ignore it.  Indeed, the proof I
was working on this morning passed until I “fixed” it with one of the
approaches above, revealing a false alarm due to this approach.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The bottom line is that the &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;approach to formal aggregation that I presented
earlier&lt;/a&gt; doesn’t work,
leading instead to a false confidence that your “formally verified” design
works.&lt;/p&gt;

&lt;p&gt;I’m slowly converting my own logic to use approach 3 above, and recommend
that if you’ve been using this approach that you consider doing so as well.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;A little leaven leaveneth the whole lump.  (Gal 5:9)&lt;/em&gt;</description>
        <pubDate>Tue, 18 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2018/12/18/skynet.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/12/18/skynet.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
  </channel>
</rss>
