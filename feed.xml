<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 28 Dec 2018 21:15:00 -0500</pubDate>
    <lastBuildDate>Fri, 28 Dec 2018 21:15:00 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Using a formal property file to verify an AXI-lite peripheral</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A &lt;a href=&quot;http://zedboard.org/product/microzed&quot;&gt;MicroZed Board&lt;/a&gt;&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://zedboard.org/product/microzed&quot;&gt;&lt;img src=&quot;/img/microzed.png&quot; alt=&quot;&quot; width=&quot;319&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt; has become prominent as a
defacto standard for working with either
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; or
&lt;a href=&quot;https://www.intel.com/content/www/us/en/fpga/devices.html&quot;&gt;Intel&lt;/a&gt; supplied &lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;IP
cores&lt;/a&gt;.
This common standard is intended to make it easy to interface a design to one
of a variety of System on a Chip cores,
such as Xilinx’s MicroBlaze or &lt;a href=&quot;https://www.altera.com/literature/hb/nios2/n2cpu_nii5v1.pdf&quot;&gt;Intel’s
NiosII&lt;/a&gt;.
The bus is also used by &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;,
and so it is a natural fit for both
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
and &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc.html&quot;&gt;Soc+FPGA&lt;/a&gt;
products.&lt;/p&gt;

&lt;p&gt;While this is all well and good,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; is a beast to work with.
Achieving both correct performance, as well as high speed performance, can
be a challenge.  Today, we’ll limit ourselves to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite bus&lt;/a&gt;: a version of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; that
supports neither bursts, nor locking, nor transaction ID’s, nor varying
quality of service guarantees.
While I’d like to imagine that these simplifications have made it easy enough
for a beginner to be able to work with it, I would have to imagine that
most beginners who have tried to work with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
used by either the
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
or &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc.html&quot;&gt;Soc+FPGA&lt;/a&gt;
chips haven’t found it to be the simple protocol they were hoping for.&lt;/p&gt;

&lt;p&gt;It has certainly been anything but simple for me.&lt;/p&gt;

&lt;p&gt;Today, let’s take a look at how you can use a set of formal properties to
work with an &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt; slave–both to
verify that it works as well as to query how well it works.  Along the way,
I’ll demonstrate how easy it us to use this set of formal properties
to find the problems in an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;AXI-lite slave
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-axi-lite-bus&quot;&gt;The AXI-lite Bus&lt;/h2&gt;

&lt;p&gt;Some time ago, I wrote &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;an article describing how to build a simple
wishbone peripheral&lt;/a&gt;.&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;A simple wishbone
peripheral&lt;/a&gt;
only needed to respond to a request,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;an acknowledgment,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;some returned data,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a (never) stall signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila!  That’s all the signaling required for a &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;basic Wishbone
peripheral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If only &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; were as easy.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. The AXI bus is composed of five separate channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Instead of one read-write request channel, and one acknowledgment-response
channel, &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; has five such channels.  For writing values to the bus, there’s
the write address channel, the write data channel, and the write response
channel.  For reading values from the bus, there’s a read address-request
channel and a read response channel.&lt;/p&gt;

&lt;p&gt;For today, let’s just discuss the AXI-lite version of this interface.  Unlike
the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI specification&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt; removes a lot of capability from this
interaction.  Perhaps the biggest differences are that, with
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;, any
read and write request can only reference one piece of data at a time,
and that there is no need to provide unique identifiers for each transaction.
There are other more minor differences as well.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
has no requirement to
implement locking, quality of service, or any cache protocols.
Once these differences are accounted for,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
becomes almost as &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;easy to verify as a Wishbone (WB)
transaction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, building an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;AXI-lite peripheral&lt;/a&gt; is still a challenge,
but verifying an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
peripheral?  Not so much.&lt;/p&gt;

&lt;p&gt;The key to these transactions are the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals.
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; is used to signal a &lt;em&gt;valid&lt;/em&gt; request or acknowledgment.  The two
signals together form a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;.
One side of the channel will set a
&lt;em&gt;valid&lt;/em&gt; signal when it has information to send, whether request or
acknowledgment, while the other side controls a &lt;em&gt;ready&lt;/em&gt; signal.  You
may recognize this from our prior discussion of the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;simple handshake method
of pipeline control&lt;/a&gt;.
The &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI specification&lt;/a&gt;
also contains a very specific requirement: asserting the
&lt;em&gt;valid&lt;/em&gt; signal can never be dependent upon the &lt;em&gt;ready&lt;/em&gt; signal for the same
channel.&lt;/p&gt;

&lt;p&gt;Perhaps you may remember with the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;WB specification&lt;/a&gt;
that it takes a hand shake to make a bus request.  Both &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt;
(from the master) and &lt;code class=&quot;highlighter-rouge&quot;&gt;!STALL&lt;/code&gt; (from the slave) must be true in order for a
request to be accepted.  The same is basically true of 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; only the names have changed:
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; must be true for a bus request to be accepted by the
slave.  This &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signal is similar to the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; signal, while &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; is similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;!STALL&lt;/code&gt; signal.&lt;/p&gt;

&lt;p&gt;However, unlike
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
has separate channels for reading and writing, and each of these channels
has its own &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt; signal set.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; also requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;READY&lt;/code&gt;
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
on acknowledgments, both for read and separately for write acknowledgments.&lt;/p&gt;

&lt;h4 id=&quot;axi-lite-read&quot;&gt;AXI-lite Read&lt;/h4&gt;

&lt;p&gt;Perhaps it might make sense to walk through an example or two.  Fig. 2
therefore shows several example
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
read transactions from the perspective of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;.
In this example, I’ve chosen to use &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
convention where the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
signals are in all capitals, although this loses the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_*&lt;/code&gt; prefix
that I enjoy using to indicate which signals are inputs and which are outputs.
(We’ll switch back later, when we get to the
formal property set.)&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Several AXI-lite read transactions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-read.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Each request starts with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
master raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal,
signaling that it wants to initiate a read transaction.  Together with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal, the master will also place the address of the desired
read on the bus.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;The slave&lt;/a&gt;
will respond to this request by raising the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; signal,
although
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the specification&lt;/a&gt;
sets forth several comments about this.  For example, the slave can
set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; before or in response to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; signal.  Further, all the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
outputs are not allowed to be dependent combinatorially on the inputs,
but must instead be registered.
Beyond that, the slave can stall the bus as required by the implementation.&lt;/p&gt;

&lt;p&gt;A read transaction request takes place when both
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; are true on the same clock.&lt;/p&gt;

&lt;p&gt;Looking back at Fig 2, you can see four such read transaction requests being
made.&lt;/p&gt;

&lt;p&gt;As wish the transaction requests, the acknowledgments also only take place when
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, the signals from the acknowledgment channel,
are both true.  Because responses must be registered, the earliest the slave
can acknowledge a signal is on the clock following the request.&lt;/p&gt;

&lt;p&gt;Let’s now turn our attention to the acknowledgments shown in Fig 2.  In
this example,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
acknowledge the request on the clock after the request is made.  Since
the master holds &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; high, the acknowledgment only needs to be high
for one transaction.  Further, in addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;
will also set &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt;, the result of the read, and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt;, an
indicator of any potential error conditions.  As with the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWADDR&lt;/code&gt;
signal above, these two signals are part of the acknowledgment transaction
as well.&lt;/p&gt;

&lt;p&gt;The more interesting transaction may be the high speed transaction shown
at the end of the trace in Fig 2.  Judging from this transaction, if the
master wishes to transmit at its fastest speed, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this particular
core&lt;/a&gt;
will only ever support a rate of one request every other clock.&lt;/p&gt;

&lt;p&gt;Working from
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the spec&lt;/a&gt;,
just a couple of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal verification
properties&lt;/a&gt;
will help keep us from running into problems.  From what we’ve learned
examining the figures above, the following basic properties would seem prudent.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is raised, it must remain high until
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID&lt;/code&gt; is true but the slave hasn’t yet raised
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARADDR&lt;/code&gt; must remain constant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Similarly, once the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; reply acknowledgment request is raised,
it must also remain high until &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RRESP&lt;/code&gt; are both true.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As with the read address channel, while &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is true and the
master has yet to raise &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt;, both
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RDATA&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; must remain constant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For every request with &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARVALID &amp;amp;&amp;amp; S_AXI_ARREADY&lt;/code&gt;, there must follow
one clock period sometime later where &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID &amp;amp;&amp;amp; S_AXI_RREADY&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Unlike &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;our development of the WB
properties&lt;/a&gt;, there is
no bus abort capability in the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus
protocol&lt;/a&gt;.  As a result, following
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus error&lt;/a&gt;,
you’ll still need to deal with any remaining acknowledgments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Just to keep things moving, we’ll also want to insist that after some
implementation defined minimum number of clock ticks waiting the slave
must lower &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The same applies to the reverse link: the master should not be allowed to
hold &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; low indefinitely while &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; is high.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll add a couple more
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;properties&lt;/a&gt;
beyond these below, but for now these should suffice to capture most of what
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
requires.&lt;/p&gt;

&lt;p&gt;That’s how reads work, so let’s now go on and examine the write path.&lt;/p&gt;

&lt;h4 id=&quot;axi-lite-write-example&quot;&gt;AXI-lite Write Example&lt;/h4&gt;

&lt;p&gt;While the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt; read channel above may appear to be straightforward, the write
channel is anything but.  The write address channel is designed to allow a
single “burst” request to indicate a desire to write to multiple addresses,
closely followed by a burst of data on the write data channel.
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;,
unlike the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt;,
has no burst write support.  Every
address request must be accompanied by a single piece of associated write data.
To make matters worse, the two channels are only loosely synchronized, forcing
the slave to synchronize to them internally.&lt;/p&gt;

&lt;p&gt;Were &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; tied to &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt; tied to
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WREADY&lt;/code&gt;, the slave’s write channel logic would collapse into the basic
read problem discussed above.  Alas, this is not so.  The
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
slave is thus forced to try to synchronize these two channels in order to
make sense of the transaction.&lt;/p&gt;

&lt;p&gt;Fig. 3 shows a basic set of write transactions illustrating this problem.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Some example write transactions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first three transactions within Fig. 3 shows the bounds set on the
synchronization of the channels.  Note that I found these bounds within
Xilinx’s documentation.  They are not present in
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;the specification itself&lt;/a&gt;,
as far as I can tell.  Since they simplify the problem
significantly, I’ve chosen to &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;implement them as part of this property
set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at and discuss each of the transactions shown in Fig. 3 above.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first transaction is as simple as one might like.  Both write address
and write data requests show up at the same time.  On the following clock
the respective &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; signals are set, and then the acknowledgment
takes place on the third clock where &lt;code class=&quot;highlighter-rouge&quot;&gt;*BVALID&lt;/code&gt; is set.&lt;/p&gt;

    &lt;p&gt;Let’s note two things about this picture.  First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; signals
are kept low until the request is made.  This is not required of the bus
and in general slows the bus down.  Second, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; signal is
held high.  The &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;particular core we are demonstrating&lt;/a&gt;
will fail if this is not the case.  We’ll come back to that in a moment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second transaction illustrates one of the bounds on the write channels:
Xilinx’s rules allow the write address valid signal to show up no more than
two clocks before the write data.  In this example, the slave holds the two
&lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; lines low until the clock after both are valid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The third transaction illustrates the other bound: the write data channel
may arrive up to one clock before the write address channel.  As with the
previous example, this slave holds the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*WREADY&lt;/code&gt; lines low until
both are present.  The acknowledgment then takes place on the next clock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final three transactions are part of a speed test measuring how fast
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
can handle subsequent transactions.  In the case of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this slave&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the slave&lt;/a&gt;,
waits until both &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWVALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WVALID&lt;/code&gt; signals are high
before creating raising the ready signal.  This wait period limits the
speed of
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this slave core&lt;/a&gt;
to one transaction every two clocks.&lt;/p&gt;

    &lt;p&gt;If the Lord wills, I’d like to also present &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;another AXI-slave
core&lt;/a&gt; with
much better throughput performance, but that will need to remain for another
day.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;This protocol&lt;/a&gt; suggests a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;couple formal
properties&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signals should remain high until their respective
&lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; signal is also high.  This applies to both the write address
channel, the write data channel, as well as the acknowledgment channel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The data associated with each channel should be constant from when the
&lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; signal is set until both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are set together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also discussed the two Xilinx imposed limits above as well.&lt;/p&gt;

    &lt;p&gt;– The write data channel may become active no more than one clock before
   the write address channel, and&lt;/p&gt;

    &lt;p&gt;– The write address channel may become active no more than two clocks before
   the write data channel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, there should be no more than one acknowledgment per write
request.  Well, it’s a bit more complex than that.  Both write address
and write data channels will need to be checked, so that there is never
any write acknowledgment until a request has previously been received
on both of those two channels.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;using-a-formal-property-set&quot;&gt;Using a Formal Property Set&lt;/h2&gt;

&lt;p&gt;Further on in this article, we’ll dive into the weeds of &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;how to express the
formal properties necessary to specify an AXI-lite bus
interaction&lt;/a&gt;.  For now,
I’d like to discuss what you can do with such a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I currently have Vivado 2016.3 installed on my computer.  Is it out of date?
Yes.  However, it works for me.  Xilinx has had problems breaking things when
they make updates, so I hesitate to update Vivado lest I break something that
is already working.&lt;/p&gt;

&lt;p&gt;That said, &lt;a href=&quot;https://www.xilinx.com/video/hardware/creating-an-axi-peripheral-in-vivado.html&quot;&gt;this
video&lt;/a&gt;
from Xilinx describes how to create an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;peripheral core&lt;/a&gt;.
I followed similar instructions, and received a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;default demonstration AXI-lite peripheral&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then added a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal property section&lt;/a&gt;
to the bottom of this core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////////////////////////
//
// Formal Verification section begins here.
//
// The following code was not part of the original Xilinx demo.
//
////////////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important part of this property section is the reference to our
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal AXI-lite property
file&lt;/a&gt;.
Since the properties require some counters in order to make certain that
exactly one response is given to every transaction, let’s set a width for
those counters and declare them here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this particular design&lt;/a&gt;,
a four bit counter is really overkill, but it will work for us.&lt;/p&gt;

&lt;p&gt;Then, we connect the various signals associated with the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
to
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;our core&lt;/a&gt;.
The parameters have fairly well defined meanings.  The data width
is the number of data bits in the bus.  The address width is the number of
bits required to describe a single octet in the data stream.  This is different
from
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;,
which has only the number of bits necessary to describe a word address.
We’ll ignore the extra bits for now, since they are fairly irrelevant here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Connect our slave to the AXI-lite property set
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_S_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_AWREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WSTRB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_WREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARPROT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RRESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we wanted to stop here and only run a bounded model check, we could do
that.  However, with just a couple of more
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;properties&lt;/a&gt;
we can make certain &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this
design&lt;/a&gt;
will pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
as well–or not, as we’ll see in a moment.&lt;/p&gt;

&lt;p&gt;For example,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
will only ever allow a single transaction.  Further, once that transaction
request has been made, but before the acknowledgment, the appropriate
acknowledgment valid flag will be high.  Not only that, but when the
acknowledgment valid flag is high is the only time we’ll have one pending
transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise,
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
does not allow the number of outstanding requests on the write address channel
to differ at all from those on the write data channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, we create a very simple &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.sby&quot;&gt;SymbiYosys
script&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
cvr
prf

[options]
cvr: mode cover
cvr: depth 60
prf: mode prove
prf: depth 40

[engines]
smtbmc

[script]
read -formal xlnxdemo.v
read -formal faxil_slave.v
prep -top xlnxdemo

[files]
xlnxdemo.v
faxil_slave.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.sby&quot;&gt;This script&lt;/a&gt;
describes
&lt;a href=&quot;/formal/2018/12/20/sby-makefile.html&quot;&gt;two tasks&lt;/a&gt;.  One task,
named &lt;code class=&quot;highlighter-rouge&quot;&gt;cvr&lt;/code&gt;, will check the cover properties in this core.  Since we haven’t
introduced any yet, we’ll come back to this task in a moment.  The second
task, &lt;code class=&quot;highlighter-rouge&quot;&gt;prf&lt;/code&gt;, will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;this core&lt;/a&gt;
meets &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;all of the
properties&lt;/a&gt;
required of any
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite protocol&lt;/a&gt;
core–basically all of the properties mentioned above.&lt;/p&gt;

&lt;p&gt;Now, when we run
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to check the safety properties (i.e. the assertions),&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;% sby -f xlnxdemo.sby prf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The proof fails almost immediately.&lt;/p&gt;

&lt;p&gt;This first problem comes from the fact that none of the various signal
registers are given appropriate initial values.  While I personally consider
this to be a bug, many individuals will consider this irrelevant in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
that depends upon a reset like this one does.  Therefore, let’s just quietly
fix &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
with some initial statements and go on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// The following lines are only questionable a bug
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wready&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_bvalid&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rvalid&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And again the design fails.  This time it fails with the trace shown in Fig.
4 to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 4.  Xilinx&#39;s demonstration code drops a write acknowledgment&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-write-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this image, you can see two write transactions.  I’ve colored them with
two different colors, to help separate the two and make this example easier
to follow.  The image differs, however,
from our previous write example in Fig 3 above simply because the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; signal is not held high.  As a result, the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt;
transaction is not immediately acknowledged until &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; has been
valid for a whole clock.  By that time, however, the logic within &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
has lost the reality that there is a second transaction that needs to be
acknowledged as well.  Hence, once &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
drops the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID&lt;/code&gt; line, a transaction has been lost.&lt;/p&gt;

&lt;p&gt;If we want to move on and look for other problems, we could bandage over this
bug with an assumption.  While you’d never want to do this in production
code, sometimes it is helpful to move on in order to find some other problem.
In this case, a simple assumption causes this error to go away.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, when we run the tools again the design still fails.  Looking at the
trace reveals that it is failing for the same basic bug again, only now the
problem is found within the read channel, as shown in Fig 5.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig. 5.  Xilinx&#39;s demonstration code drops a read acknowledgment&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-xilinx-read-fail.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RREADY&lt;/code&gt; is always high, just like we did with
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt;, this failure also vanishes and now &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;the
core&lt;/a&gt;
can be
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified for all time&lt;/a&gt;
using
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a little looking, and a quick trace capability, it
doesn’t take long to chase down the bug.  You can see the problem below
as it exists for the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_ARREADY&lt;/code&gt; signal.  Basically, the core allowed
this signal to go high before it knew that the &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RVALID&lt;/code&gt; signal would
be acknowledged.&lt;/p&gt;

&lt;p&gt;If you page through the code, you’ll find the always block, shown below,
that sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; signal.  It starts with a basic, almost
boilerplate, reset function to clear &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARESETN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;7&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Early on in the operation, though, we find the bug.  In particular,
&lt;code class=&quot;highlighter-rouge&quot;&gt;axi_arready&lt;/code&gt; is set irrespective of whether the result channel is stalled
and there’s no place to hold the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// indicates that the slave has acceped the valid read address
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Read address latching
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just a touch of extra logic will fix this for us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// indicates that the slave has acceped the valid read address
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	          &lt;span class=&quot;c1&quot;&gt;// Read address latching
&lt;/span&gt;	          &lt;span class=&quot;n&quot;&gt;axi_araddr&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ARADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	          &lt;span class=&quot;n&quot;&gt;axi_arready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A similar fix to the write channel and the design should pass nicely.&lt;/p&gt;

&lt;h3 id=&quot;cover&quot;&gt;Cover&lt;/h3&gt;

&lt;p&gt;The check above encourages us that this design will not violate any of our
safety properties, but will it work?  Or, rather, how well can it be made
to work?  To answer that question, let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Cover properties are known as &lt;em&gt;liveness&lt;/em&gt; properties, versus the assertion
properties which are known as &lt;em&gt;safety&lt;/em&gt; properties.  When a &lt;em&gt;safety&lt;/em&gt; property
fails, a trace is created showing how the property may be made to fail.
However, when a &lt;em&gt;safety&lt;/em&gt; property succeeds you know the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; will always
be valid and so no trace is created.  Cover properties are the opposite.  A
cover property succeeds if there is at least one way to make the statement
true.  In that case, a trace is generated.  More generally, one trace is
generated for &lt;em&gt;every&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement within a design, or the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
check will fail.&lt;/p&gt;

&lt;p&gt;Within the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;,
there are two cover properties just to make certain the design is able to
function.  These properties verify that both a read and write operation are
able to succeed using the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What I want to do now is to check performance, and we can use a cover
property for that purpose.&lt;/p&gt;

&lt;p&gt;Let’s see if we can retire four write instructions in four clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s also test whether we can retire four read requests in four clocks
as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two tests would be easier to express with concurrent assertions,
such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Writes
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Reads
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wow, those are nice to work with!&lt;/p&gt;

&lt;p&gt;I personally like the four clock test, because sometimes there is a single
stage within the design somewhere that can queue up an answer and so succeed
on a two clock test.  A four clock test on a design this simple will only
succeed if the core can truly retire one instruction on every clock.&lt;/p&gt;

&lt;p&gt;Not surprisingly, this test fails.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/xlnxdemo.v&quot;&gt;This particular
core&lt;/a&gt;
is &lt;em&gt;unable&lt;/em&gt; to handle a one transaction per clock throughput.&lt;/p&gt;

&lt;p&gt;If high speed were your goal, then, you would say the core is &lt;em&gt;crippled&lt;/em&gt;.
(Yes, I have an &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;alternative
core&lt;/a&gt;
if you want something that uses
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
and yet has better performance.)&lt;/p&gt;

&lt;p&gt;We could adjust the two tests and make them check for one instruction retiring
on every other clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// First a write check
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_BREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Now a read check
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_AXI_ACLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RVALID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_AXI_RREADY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This test now succeeds.&lt;/p&gt;

&lt;p&gt;If you choose to examine &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;the formal properties within the
core&lt;/a&gt;,
you’ll notice there is also a very large set of code at the bottom to
set up two rather complicated cover traces.  We’ve already reviewed the
results of those complex cover statements in Figs. 2 and 3 above.&lt;/p&gt;

&lt;h3 id=&quot;exhaustive-coverage-exponential-complexity&quot;&gt;Exhaustive Coverage, Exponential Complexity&lt;/h3&gt;

&lt;p&gt;The first lesson of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
is that it is &lt;em&gt;exhaustive&lt;/em&gt;.  Every possible input, output, and register
combination are checked to determine whether a property holds or not.  As
you might imagine, this creates an exponential
explosion in complexity that can be hard to manage.  This can often discourage
a learner from trying
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
in the first place.&lt;/p&gt;

&lt;p&gt;To put that whole argument into perspective, know this: I have a series of
not one or two but twelve separate
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
proofs in by &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;Wishbone to AXI
bridge(s) repository&lt;/a&gt;.  It takes me less
than two minutes to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
&lt;em&gt;all&lt;/em&gt; of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;cores&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, consider what we’ve done: for the price of a small insertion of
code into our design, referencing a
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;pre-written property set&lt;/a&gt;,
and for the cost of only a handful of other core-specific properties,
we’ve managed to find, fix, and then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
core.  After you’ve done this once or twice, you’ll find that the whole
verification process takes only minutes to set up, and less than that
to get your first trace.&lt;/p&gt;

&lt;p&gt;This makes it very easy for me, when I want to reply to someone’s request for
help on either
&lt;a href=&quot;https://forums.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s or
&lt;a href=&quot;https://forum.digilentinc.com&quot;&gt;Digilent’s forum&lt;/a&gt;s, to quickly review their
code and provide a comment on it.  Fixing the code?  Well, that can take more
time.&lt;/p&gt;

&lt;p&gt;So just what does this property set look like?&lt;/p&gt;

&lt;h2 id=&quot;axi-lite-properties&quot;&gt;AXI-lite Properties&lt;/h2&gt;

&lt;p&gt;We’ve already discussed most of the properties above, all that remains
now is to lay out the details and write the immediate assertions to accomplish
these tasks.  The basic properties were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Requests must wait to be accepted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Acknowledgments can only follow requests&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All responses must return in a known number of cycles&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Waiting requests should not be held waiting more than some maximum delay&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step in writing
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property set&lt;/a&gt;,
will be to create several configuration parameters that can be used to
configure &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;the properties&lt;/a&gt;
to match the needs of our design.  Shown below is the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;AXI-lite slave property set&lt;/a&gt;,
and the various configuration parameters within it.&lt;/p&gt;

&lt;p&gt;The first configuration parameter is the width of the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faxil_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// The width of the data bus
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fixed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While most of my work is done with a 32-bit bus, the property set should
be generic enough to allow bus widths of other sizes, such as 8, 16, 64, or
128 bits.  Why might you want 128 bits?  Because
&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;many designs&lt;/a&gt;
including
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR SDRAM&lt;/a&gt;’s
can transfer 128-bits or more per clock.&lt;/p&gt;

&lt;p&gt;Following the number of data bits, &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH&lt;/code&gt; controls the number
of bits used to describe an address within the peripheral.  This needs to be
a sufficient number of bits necessary to access every octet within the address
space of the slave, even though we are going to ignore the sub-word address
bits for now.  (There’s only one requirement of them, associated with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_WSTRB&lt;/code&gt; signal, and I haven’t coded that up yet.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AXI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wordsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, since I find &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_DATA_WIDTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C_AXI_ADDR_WIDTH&lt;/code&gt; rather
cumbersome to type, I’m going to create two short-cut names: DW for the
data bus width, and AW for the address width.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_DATA_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;			&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_AXI_ADDR_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some implementations add
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
cache flags to the address request.
These flags indicate whether the transaction is to be bufferable,
non-bufferable, cachable, non-cachable, or more.  I’m not personally using
these flags.  However, to handle both cores with and without these bits,
we’ll use the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_HAS_CACHE&lt;/code&gt;.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_HAS_CACHE&lt;/code&gt; is set,
the slave will assume particular values for &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_awcache&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_arcache&lt;/code&gt;, indicating
that the write is to be done to the cache or through the cache.  This is
probably more important for an
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
master than the slave, but since the two are mirrors of each other, we’ll
keep it in here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_HAS_CACHE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sometimes I need to verify a write-only
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI interface&lt;/a&gt;, such as in &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilwr2wbsp.v&quot;&gt;this AXI-lite
write-channel to wishbone
bridge&lt;/a&gt;.  In
that case, I’ll want to assume the read channel is idle and remove the read
channel cover check.  &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_READS&lt;/code&gt; can be set to make this happen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_NO_READS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_WRITES&lt;/code&gt; is the analog to &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_READS&lt;/code&gt;.  If
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_NO_WRITES&lt;/code&gt; is set, then the proof will assume the write channel
is idle, and remove the write channel cover check.  This is used for my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axilwr2wbsp.v&quot;&gt;AXI-lite read-channel to wishbone
bridge&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_NO_WRITES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI&lt;/a&gt;
defines three separate possible responses: an OK response,
a slave produced an error response, or an interconnect produced
an error response.  If a particular slave cannot produce any
form of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus error&lt;/a&gt;,
it makes sense to disallow it.  Clearing
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_BRESP&lt;/code&gt; to zero will disallow any form of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; on the write channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_BRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//  The same is true for F_OPT_RRESP for the read channel
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_RRESP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx’s AXI reference
guide&lt;/a&gt;
requires a rather lengthy reset of 16 clock periods.  If the slave
(or master) being verified isn’t creating that reset, then it makes sense
to just assume the reset is present.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_ASSUME_RESET&lt;/code&gt; configures
the core to do just that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to insure that there is only one acknowledgment for every
request received, we’ll need to count requests and acknowledgments
and compare our signals to these counters.  &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt; specifies
the number of bits to be used for those counters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re going to insist that no transaction remains stalled for more
than some maximum number of clock cycles, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt;.  This also
keeps the design and traces moving during our proof.  While the constraint
placed upon the design as a result is somewhat artificial, you can adjust
it to match what you would expect within your design environment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our last parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt;, is used to make certain that,
following a request, the result will be returned to the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI bus&lt;/a&gt;
master within a given number of clock cycles.  The number of cycles to wait
is very implementation dependent, so it needs to be a configuration parameter.
We set it here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY=12&lt;/code&gt; is overkill for the demonstration designs
in the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;wishbone to AXI bridge repository&lt;/a&gt;
we are taking our examples from.
However, &lt;a href=&quot;/blob/2018/08/16/spiflash.html&quot;&gt;other designs&lt;/a&gt;
have needed delays of &lt;code class=&quot;highlighter-rouge&quot;&gt;65&lt;/code&gt; clocks or more, so this is an appropriate
configuration parameter.&lt;/p&gt;

&lt;p&gt;Let me add one other note on these two clock durations: the shorter
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXDELAY&lt;/code&gt; are, the faster your proof will complete.&lt;/p&gt;

&lt;p&gt;Let’s now move on from the parameters within the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
file&lt;/a&gt;
to the inputs and outputs of the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;module&lt;/a&gt;
itself.  Since this &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;
is my own code rather than Xilinx’s,
I’m also going to switch notations to one I am familiar with.  Inputs
to any core in my notation start with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_&lt;/code&gt;, outputs begin with an &lt;code class=&quot;highlighter-rouge&quot;&gt;o_&lt;/code&gt;.
Further, only constant values such as parameter or macros will use all
capitals.  Finally, since the core we will be writing is a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;formal property
set&lt;/a&gt;,
all of the interface wires will be inputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// System clock
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// AXI write address channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Slave is ready to accept
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write address
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_awcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write Cache type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_awprot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write Protection type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write address valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI write data channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Write data ready
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write data
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write strobes
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI write response channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write response
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Write reponse valid
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Response ready
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI read address channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address ready
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_araddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_arcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read Cache type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_arprot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read Protection type
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Read address valid
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// AXI read data channel signals
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Read response
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Read reponse valid
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_axi_rdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Read data
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, almost.  We’re also going to create
three outputs, as shown below, so that assertions may be
connected to our various counters to constrain them to the implementation
using them.  Such constraints are &lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;necessary in order to pass induction, as
we’ve discussed before&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since checking for transactions can be somewhat tedious below, I’ll declare
some simple transaction abbreviations here.  These are basically abbreviations
for when both &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; are true indicating that either a
transaction or or an acknowledgment
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
completes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// wire	w_fifo_full;
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rd_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_ard_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axi_wr_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_ard_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wr_req&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_rd_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m also trying something new with this property set.  Since bus slave
properties are very similar to those for the master, save only that the
assumptions and assertions are swapped, I’m going to create two macros:
&lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSUME&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSERT&lt;/code&gt;.  These are defined from the perspective of
the slave to be &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; respectively.  Within the master,
these definitions will naturally swap.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SLAVE_ASSUME&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	SLAVE_ASSERT	assert&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using a macro like this makes it easier to run
&lt;a href=&quot;http://medlmerge.org&quot;&gt;meld&lt;/a&gt;
on both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;slave&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master&lt;/a&gt;
property files when making updates.  This way the actual logic differences
stand out more.  Interested in seeing how well this works?  Just install
&lt;a href=&quot;http://medlmerge.org&quot;&gt;meld&lt;/a&gt;, download the
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;wb2axip&lt;/a&gt; repository, then &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/bench/formal&quot;&gt;bench/formal&lt;/a&gt;
directory and run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;meld faxil_slave.v faxil_master.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to see how easy it is to spot differences between the two cores.&lt;/p&gt;

&lt;h4 id=&quot;reset-properties&quot;&gt;Reset Properties&lt;/h4&gt;

&lt;p&gt;I’ve struggled a bit with the &lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;reset properties for
AXI&lt;/a&gt;.
Specifically, what
&lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core&quot;&gt;core&lt;/a&gt;
is it that actually creates the reset that needs to be verified here?
That core should have the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;assertions&lt;/a&gt;
applied to it.  However, the reset is often defined by some other module
within the design.  Hence, we’ll either
assert or assume the reset is initially set based instead on the
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_ASSUME_RESET&lt;/code&gt; parameter from above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME_INIITAL_RESET&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_INIITAL_RESET&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;Xilinx requires that the AXI reset be asserted for a minimum of 16 clock
cycles&lt;/a&gt;.
Our first step is to count the number of cycles the reset signal is active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// If ever the reset is released, &quot;reset&quot; the reset-length
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// counter back to zero.
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Otherwise, just quietly increment the counter until we get
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to 15
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then make (assumptions) or assertions about the reset signal to make
certain it is held long enough.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_ASSUME_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME_RESET&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSERT_RESET&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_reset_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, now that we know our design meets its reset requirements, we can
create some properties regarding what must happen as a result of a reset.
Specifically, we’ll require that following any reset, the various &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt;
flags should be set to zero.&lt;/p&gt;

&lt;p&gt;We’re also going to apply this to the very first clock cycle of the design, by
also checking for &lt;code class=&quot;highlighter-rouge&quot;&gt;!f_past_valid&lt;/code&gt; and by applying these properties through
&lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; statements.  As you may recall, this was the issue
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/xlnxdemo.v&quot;&gt;Xilinx core&lt;/a&gt;
had above with its (missing) initial statements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Nothing should be returned or requested on the first clock
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Same thing, but following any reset as well
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moving on to the response signals, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BRESP&lt;/code&gt; for the write channel and
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_RRESP&lt;/code&gt; for the read channel, we’ll note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;2&#39;b01&lt;/code&gt; pattern is
the only pattern disallowed by the &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI
specification&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Exclusive access not allowed
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rresp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exclusive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;stability-properties&quot;&gt;Stability Properties&lt;/h4&gt;

&lt;p&gt;The rule we discussed above was that the signals that are coupled with
any transaction should be held constant as long as the transaction remains
outstanding (i.e. valid but not ready).  This is a basic
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
that we also required when building our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB&lt;/a&gt;
properties.  Let’s capture that
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
property here in this context.&lt;/p&gt;

&lt;p&gt;Simply put using concurrent assertions, we could express this as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wstrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bresp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternately, in order to use the immediate assertions supported by the free
version of &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;, we’ll
need to put a little more work into this.
First, we want to avoid the first clock period and any clock period following
a reset.  This is to make sure our properties deal with valid data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, for each channel, we’ll write out the properties in question.  Basically
if the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; was true on the previous cycle but the &lt;code class=&quot;highlighter-rouge&quot;&gt;*READY&lt;/code&gt; was false,
then the &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID&lt;/code&gt; should remain true and the associated data should be stable.&lt;/p&gt;

&lt;p&gt;For the write address channel, the first of five, this property looks like
the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Write address channel
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply to all other incoming channels
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The other channel properties are nearly identical, so we’ll skip them for
brevity here.  The important part to remember is that we will &lt;em&gt;assume&lt;/em&gt;
properties of the input, and &lt;em&gt;assert&lt;/em&gt; properties of our local state and any
outputs.  Hence, in this case we’ll assume the properties of the write address
channel, the write data channel, and the read address channel, but &lt;em&gt;assert&lt;/em&gt;
properties of the two acknowledgment channels.&lt;/p&gt;

&lt;h4 id=&quot;maximum-delay&quot;&gt;Maximum Delay&lt;/h4&gt;

&lt;p&gt;We said above that no channel should remain stalled for more than a finite
number of clock cycles.  Such a stall would be defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;*VALID &amp;amp;&amp;amp; !*READY&lt;/code&gt;.
Let’s check that property for each channel here, but only if we were given
an &lt;code class=&quot;highlighter-rouge&quot;&gt;F_AXI_MAXWAIT&lt;/code&gt; value greater than zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_STALL_COUNT&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_wstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_arstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_bstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_rstall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To create a check constraining how many clock cycles a design may be allowed
to stall a channel, we’re going to have to first count the number of stalls.&lt;/p&gt;

&lt;p&gt;I’ll show the write address channel stall count here, and skip the others
for brevity again.&lt;/p&gt;

&lt;p&gt;I should also mention, it took me several rounds to get this count just right.
So, here’s the basic logic:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Anytime we either reset the core, or anytime there’s no pending write
request, or the write address request is accepted, the write address
bus isn’t stalled and we set the counter back to zero.  This much was
straightforward, and matches my first draft.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Likewise any time we are waiting for the other write channel, in this case
the write data channel, to request a transaction we also set the counter to
zero.  This allows the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/xlnxdemo.v&quot;&gt;Xilinx AXI-lite demo
code&lt;/a&gt; to stall
the bus as long as it wants while waiting for the other channel to
synchronize.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If we are waiting for the write channel to be valid
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// then don&#39;t count stalls
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Here’s the part that caught me by surprise though: we only want to accumulate
stalls on this request channel if the back end isn’t stalled.  Hence if
there’s no waiting acknowledgment, or likewise if the acknowledgment that
is waiting has just been accepted, then and only then do we count a stall
against the write address channel for not being ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Finally, &lt;em&gt;assert&lt;/em&gt; that the number of stalls is within our limit.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;very&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;similar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Why would we &lt;em&gt;assert&lt;/em&gt; this?  Because the stall signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_AWREADY&lt;/code&gt;, is
an output of the slave core, and we always place assertions on outputs and
assumptions on inputs.&lt;/p&gt;

&lt;p&gt;Hence, if you look down through the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;property
file&lt;/a&gt;
a bit further, you’ll see an assumption made for the read acknowledgment
channel.  Why is this an assumption?  Because it is dependent upon the
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BREADY&lt;/code&gt; &lt;em&gt;input&lt;/em&gt; to the core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rstall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, all of these assumptions will swap with their assertion counterparts
when we go to the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;AXI-lite master property
set&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;xilinx-constraints&quot;&gt;Xilinx Constraints&lt;/h4&gt;

&lt;p&gt;Remember the two Xilinx constraints?  The additional rules to make things work?
Here they are written out.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The address line will never be more than two clocks ahead of
 the write data channel, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The write data channel will never be more than one clock
ahead of the address channel.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I found these rules in a DDR3 IP core module usage guide, though I can’t seem
to find that guide right now.  However, since they’ve helped make
the various proofs complete, I’ve chosen to include these rules here.&lt;/p&gt;

&lt;p&gt;Let’s express these as
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal properties&lt;/a&gt;.
First, if there was a write address request two clocks ago, and no
intervening write data request, then we want to assume a write data request now.&lt;/p&gt;

&lt;p&gt;Ok, not quite, that’s missing a key detail: it is possible that the write
address request of two clocks ago &lt;em&gt;followed&lt;/em&gt; a write data request.  That means
we’ll also have to check that the number of write data and write
address requests were equal two clocks ago, or there had been more write
address requests.&lt;/p&gt;

&lt;p&gt;This is another one of those properties where a concurrent assertion would
make the most sense,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We could also express this same property as an immediate assertion.  It’s
uglier and harder to read, but it still works well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second rule is simpler since it only covers two clock periods instead of
three.  It’s the same basic thing, just with the channels reversed and one less
clock period.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together these two properties will keep the two channels roughly synchronized
with one another.  Making the actual synchronization work within the peripheral
code will still remain a challenge.&lt;/p&gt;

&lt;h4 id=&quot;compare-the-number-of-acknowledgments-to-requests&quot;&gt;Compare the number of acknowledgments to requests&lt;/h4&gt;

&lt;p&gt;The next rule we want to check is that for every acknowledgment,
there must have been one and only one request.&lt;/p&gt;

&lt;p&gt;No matter how we do this, we’ll need to start by counting the number of
outstanding requests.  This count goes as follows: following any reset,
the number of outstanding requests must be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise anytime we have accepted a request, or had an acknowledgment
on the return channel accepted, but not both, the count will adjust.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_awr_req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axi_wr_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please notice that I didn’t use a pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements here.  I’ve tried
that approach several times in the past, but I always seem to get burned
by it.  Why?  Because of the cases the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements don’t cover, usually
the case where there’s both an request and an acknowledgment on the same clock
cycle.&lt;/p&gt;

&lt;p&gt;Two other counters, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_axi_wr_outstanding&lt;/code&gt; based upon the write data channel
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_axi_rd_outstanding&lt;/code&gt; based upon the read channel, are defined similarly.&lt;/p&gt;

&lt;p&gt;We can now start creating some properties using these count values.  First,
we want to make certain our counters never overflow.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, in order to guarantee that the counters never overflow, we’ll
need to insist that the channel stops making a request one clock earlier.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_awvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_wvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_arvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might notice that these are all a series of assertions–for both
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_master.v&quot;&gt;master&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;slave&lt;/a&gt;.
They are not &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_ASSERT()&lt;/code&gt;ions, but rather regular assertions.
This somewhat violates our
rule, that we only make assertions of local state and outputs.  However,
if an assumption is required to keep this number lower, that assumption
should really exist within the implementation defined code.  Hence we’ll just
use regular assertions here.&lt;/p&gt;

&lt;p&gt;Finally, to make certain that acknowledgments do follow requests, we can make
a couple of assertions.  The three counters above make these assertions
really easy.&lt;/p&gt;

&lt;p&gt;First, on any write acknowledgment, there must be at least one outstanding
write address request that needs to be acknowledged.  Likewise, there also
needs to be one write data request that needs to be acknowledged.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_awr_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_wr_outstanding&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice here that I’m applying the test every time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_axi_bvalid&lt;/code&gt; is true,
not every time &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_wr_ack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;axi_awr_ack&lt;/code&gt;, nor every time
&lt;code class=&quot;highlighter-rouge&quot;&gt;S_AXI_BVALID &amp;amp;&amp;amp; S_AXI_BREADY&lt;/code&gt;.  In other words, before even attempting
an acknowledgment, the respective counter should be greater than one.&lt;/p&gt;

&lt;p&gt;A second thing to notice is that I’m not excepting the case where a request
is being made on the same cycle.  Such an acknowledgment, dependent only on
a combinatorial expression of the inputs, is specifically disallowed by the
&lt;a href=&quot;https://www.xilinx.com/support/documentation/ip_documentation/ug761_axi_reference_guide.pdf&quot;&gt;AXI specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The assertion for the read channel is nearly identical to those for the write
channel above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This guarantees we’ll never respond to the bus unless a prior request has
been made.&lt;/p&gt;

&lt;p&gt;We haven’t yet guaranteed that every request will get a response.  For that, we
need to count the number of clock cycles from request to when a response
should have taken place.&lt;/p&gt;

&lt;h4 id=&quot;maximum-response-delay-check&quot;&gt;Maximum Response Delay Check&lt;/h4&gt;

&lt;p&gt;The maximum response delay check is just that: checking that every request
gets a response within a maximum number of clock periods.&lt;/p&gt;

&lt;p&gt;As with the other tests, we’ll start by counting how long a request remains
unacknowledged or outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHECK_MAX_DELAY&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_wr_ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This count is very similar to the stall count above.  We’ll examine the
read portion below, although the write count portion is similar.  For a read,
we’ll only count up if the reset is inactive, no acknowledgment is pending,
and there exists an outstanding read that has not been acknowledged.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_reset_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then assert that the counter must remain less than the maximum
acknowledgment delay.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`SLAVE_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_axi_rd_ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_AXI_MAXDELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the last of the safety properties necessary to determine that a core
abides by the rules of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;.  I used to stop right there,
but I’ve been burned as a result by believing that a core worked when I’d
somehow missed something internally.  For that reason, let’s add in some
&lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; properties.&lt;/p&gt;

&lt;h4 id=&quot;cover-properties&quot;&gt;Cover Properties&lt;/h4&gt;

&lt;p&gt;As a final property category, it’s important to have some assurance that a
given
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;slave core&lt;/a&gt;
can handle a write request,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_NO_WRITES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_bready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a read request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_NO_READS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_axi_rready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, upon any
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
run in cover mode, the formal solver will find
some path from reset, through either read or write request, through whatever
operation the slave needs to do within its implementation, all the way to the
acknowledgment being accepted.  In many cases, this will also showcase the
logic withing the slave, giving you a trace you can use when debugging so
that you can make sure you are implementing your logic properly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’d like to say that it only took me one weekend to build &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;.
That’s roughly true.  Interface property lists, such as
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this one&lt;/a&gt;
really aren’t that hard or difficult to build for a given application.  Even
better, the basic properties tend to remain the same from one application to
the next.  For example, we’re still using the same basic
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;handshake&lt;/a&gt;
properties here that we used for the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;WB bus&lt;/a&gt;, only now we are
using different names for the signals.&lt;/p&gt;

&lt;p&gt;However, it has taken some work on my part to build some example &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/tree/master/rtl&quot;&gt;bus
bridges&lt;/a&gt; and a &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;demonstration
AXI-lite slave core&lt;/a&gt;
to give &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;this property
list&lt;/a&gt;
some good exercise.  Further, I’ve been using
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;
to check the
functionality of other AXI-slaves that I’ve found on-line, so I have some
decent confidence that
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these properties&lt;/a&gt;
work.&lt;/p&gt;

&lt;p&gt;As we’ve seen above, &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
can be used to diagnose and then fix any &lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite
core&lt;/a&gt;, such as the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;one produced
by Vivado that we discussed above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even better, I’ve been able to use &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/formal/faxil_slave.v&quot;&gt;these
properties&lt;/a&gt;
to create &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;a core&lt;/a&gt;
that outperforms &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/bench/xlnxdemo.v&quot;&gt;Xilinx’s AXI-lite demonstration
core&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;This
new example core&lt;/a&gt;
can handle one read or write transaction request and thus acknowledgment
on every clock, and it can keep this speed up indefinitely.  Now, if only
the interconnect would maintain that speed, you’d have a peripheral that runs
a full twice as fast.&lt;/p&gt;

&lt;p&gt;Just to give you a hint for what this core might do, here’s an example
write trace from this
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/demoaxi.v&quot;&gt;new core&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 6.  Write demonstration through an improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-write.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here’s an example read trace.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig. 7.  Read demonstration through the improved AXI-lite core&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/axil-demo-read.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Want to know how to do this?  Stay tuned.  That will likely be my next post
on the topic of
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;AXI-lite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what about the
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt;?  While I have a
full &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;Wishbone to full AXI bridge&lt;/a&gt;,
I have yet to build a property file that would describe the 
&lt;a href=&quot;/doc/axi-spec.pdf&quot;&gt;full AXI protocol&lt;/a&gt; properly.  Worse,
I’ve put a lot of time into trying to build such a file.
Too much time, in fact, so I really can’t afford to put much more time into it.&lt;/p&gt;

&lt;p&gt;The problem I’ve been struggling with has been the burst modes.&lt;/p&gt;

&lt;p&gt;I’m sure I’ll get it soon enough, but given the amount of work it has taken
me so far, it’s not very likely to be an open source core in the near
future.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And it came to pass, when the king had heard the words of the book of the law, that he rent his clothes. (2Kings 22:11)&lt;/em&gt;</description>
        <pubDate>Fri, 28 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2018/12/28/axilite.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/12/28/axilite.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>AutoFPGA&#39;s linker script support gets an update</title>
        <description>&lt;p&gt;It’s been a while since &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;I’ve discussed
AutoFPGA&lt;/a&gt;.  If you
remember from &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;my introduction to
it&lt;/a&gt;, it’s a System on
a Chip composition tool designed to compose a design together from multiple
components.  While most of the work it does consists of copying tags from a
configuration file to one of several output files, it will also assign
addresses to peripherals on a bus and create an interconnect to connect
those peripherals together.&lt;/p&gt;

&lt;p&gt;I’ve now used &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; on several of &lt;a href=&quot;/projects.html&quot;&gt;my projects&lt;/a&gt;.  I used it
first on my &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip&lt;/a&gt;
&lt;a href=&quot;/projects.html&quot;&gt;project&lt;/a&gt;.  I maintain a
&lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;ZipCPU simulation test capability in ZBasic&lt;/a&gt;,
another project that uses &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  My iCE40 designs, both
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;ICOZip&lt;/a&gt; for the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;icoboard&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;TinyZip&lt;/a&gt; for the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt;, both use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  Even
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; is slowly getting an
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;upgrade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why?  Because (when done right) it makes it &lt;em&gt;easy&lt;/em&gt; to compose systems from
other components.  Components may be added to or removed from a design simply
by adding or removing them from the 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
command line and rebuilding.&lt;/p&gt;

&lt;p&gt;Why not other tools?  Because I really didn’t want to learn another language
besides the &lt;a href=&quot;/tutorial&quot;&gt;Verilog&lt;/a&gt;,
&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial&quot;&gt;C++&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;,
and so forth that I already work with.  But aren’t
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
scripts a new language in themselves?
To some extent this is true, although the purpose of 
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
remains being a tool that does its job and gets out of the way.&lt;/p&gt;

&lt;p&gt;However, when I went to build a design for the
&lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, I
discovered a big hole in
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s
capabilities.  While it has always created linker scripts,
the script it has created hasn’t had the flexibility required to handle
such diverse designs as the very spartan
&lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;
as well as the more full featured &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys
Video&lt;/a&gt;
board from &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-problem&quot;&gt;Understanding the problem&lt;/h2&gt;

&lt;p&gt;To understand the problem, we’ll need to take a look at how memory is used
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
design.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
within an &lt;a href=&quot;https://en.wikipedia.org/wiki/System_on_a_chip&quot;&gt;SoC&lt;/a&gt;
needs access to memory for several purposes.  It needs
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;place to store its instructions&lt;/a&gt;,
another space for &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;global data
structures&lt;/a&gt;,
another space for allocable data structures commonly called a
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and finally
a &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack space&lt;/a&gt;
to support local variables.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A common address space layout&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-segments.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One common arrangement of the address space to support these &lt;a href=&quot;https://wikipedia.org/wiki/Memory_segmentation&quot;&gt;various
purposes&lt;/a&gt;
contains a keep out region near
zero, followed by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;code instructions&lt;/a&gt;,
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;data structures&lt;/a&gt;,
the &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and then a
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack&lt;/a&gt;
in that order, as shown in Fig 1.  The
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;stack&lt;/a&gt;
typically starts at the
end of memory and grows upwards with each subroutine call, whereas the
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;
typically starts at the end of global variable memory and grows downwards
with each &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;However, &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
systems tend not to have one monolithic type of memory.  They
typically have several memory types within any design.  These basic
memories include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash memory&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is a slow non-volatile memory.  It is great for initial instructions
to get a program off the ground.  Since it is slow to access, it may not
be ideal to execute programs from, although small designs may need to do
just that.&lt;/p&gt;

    &lt;p&gt;The two big details you need to know are that
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;
is slow, and it is very difficult to write to as part of a program.
This makes it really good as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt; memory, but not so
great for other purposes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;Block RAM&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is the ideal type of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
you’d want to use in any system.  It is fast.  It’s simple to use and
create.  The cost to access one part of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
is the same as the cost to access any other part of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The big downside of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;?
You only have a limited amount of it.  For
example, the iCE40HX8k FPGA typically has only about 8kB of usable
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Yes, the data sheet will claim 16kB of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
Realistically, some of that 16kB will be used &lt;a href=&quot;/2018/07/21/zipcpu-icoboard.html&quot;&gt;elsewhere in the
design&lt;/a&gt;, so the most
you are likely to get is probably going to be about 8kB of
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;Static RAM (SRAM)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is similar to
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
but not quite as fast or as simple to work with.  Like
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
it is volatile.  However, it tends to be off chip, slower to access,
fairly easy to build &lt;a href=&quot;https://github.com/zipCPU/icozip/blob/master/rtl/icozip/sramdev.v&quot;&gt;a
controller&lt;/a&gt; for,
and it also cheap enough that you can have more memory than
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
The drawback is the technology within:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
tends to use more power and take more room than the &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;dynamic types of
RAM&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;One cool feature of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
is that if you ignore it, and don’t cut the power,
the memory doesn’t change.  As a result,
&lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;
once had a &lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;Nexys board design&lt;/a&gt;
that allowed you to load the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
with one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
configuration, and then swap
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
configurations.  Sadly, the &lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;board with this
capability&lt;/a&gt;
is no longer actively marketed and there may only be a small number of
&lt;a href=&quot;https://store.digilentinc.com/nexys-4-artix-7-fpga-trainer-board-limited-time-see-nexys4-ddr/&quot;&gt;these boards&lt;/a&gt;
left.  As I understand the story, &lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt;
struggled to get the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt; chips they
needed to continue manufacturing the boards, and so they were forced to
switch to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;Synchronous, Dynamic Random Access Memory (SDRAM)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The big grandaddy of all RAM devices tend to be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s.&lt;/p&gt;

    &lt;p&gt;By this I’m going to include not only the simpler
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s,
but also the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR_SDRAM&quot;&gt;DDR&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR2_SDRAM&quot;&gt;DDR2&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;s.
Since these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
devices are built out of capacitors,
the memory can be made compact, and so they are inexpensive to manufacture,
and therefore some of the cheapest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; devices
to purchase.  The
biggest drawbacks to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
are that the controllers tend to be complex,
and the access latency tends to be high.  How hard are the controllers?  Well,
let’s just say that I have yet to complete my first working
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
&lt;a href=&quot;https://opencores.org/projects/wbddr3&quot;&gt;controller&lt;/a&gt;.  I know it’s possible,
since &lt;a href=&quot;https://www.librecores.org/enjoy-digital/litedram&quot;&gt;LiteDRAM&lt;/a&gt; has
built some awesome
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
controllers.
Other than that,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s
tend to be high volume low cost devices.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;Hyperram&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A newcomer to the digital design space are the
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;Hyperram chips&lt;/a&gt;.
These really belong in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
category above, since they tend to be built from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;s
internally.  The big difference is that
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;s
have a simpler interface that is easy to build a controller for.  Likewise,
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;s
tend to have lower latencies than many other DDR
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
solutions, since the complex
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
array control is handled within the
&lt;a href=&quot;https://www.cypress.com/products/hyperram-memory&quot;&gt;HyperRAM&lt;/a&gt;
chip itself.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, so that’s what we have to play with.  What might an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Address_space&quot;&gt;address space&lt;/a&gt;
look like with these various types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;s?&lt;/p&gt;

&lt;h4 id=&quot;block-ram-only&quot;&gt;Block RAM Only&lt;/h4&gt;

&lt;p&gt;The simplest memory configuration we might build would be a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; only
configuration.  This configuration would be built as though there were no
other memories in the system.  It would typically consist of a keep-out
address range near zero, addresses for the various peripherals, then the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
address itself.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Block RAM and peripherals only&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-bkram.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course, the problem with this configuration is that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
is both limited and volatile:
it won’t have the values we need within it when we power up our new design, or
later when we reset our design.  Still, this is a great memory model if you
are first bringing up your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
and you haven’t yet debugged any other types of memory.&lt;/p&gt;

&lt;p&gt;I’ll admit I’ve even thought about segmenting the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
into both a read only component, or block ROM if you will, and a volatile
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
component.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. Block RAM and Block ROM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-bkrom.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Why would I do this?  Because it seems like few processors measure their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dhrystone&quot;&gt;Dhrystone&lt;/a&gt;
performance in the absence of their bus.  Were I to build a system
like this, I might be able to measure the speed of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set&lt;/a&gt;
independent of the bus implementation.&lt;/p&gt;

&lt;p&gt;Of course, the problem with both of these designs is that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; is scarce.
What else might we use?&lt;/p&gt;

&lt;h4 id=&quot;block-ram-and-flash-rom-together&quot;&gt;Block RAM and Flash ROM together&lt;/h4&gt;

&lt;p&gt;Most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s,
have a &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;SPI flash&lt;/a&gt;
of some type which can be used as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; itself exists for the
purpose of storing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
power up configuration, but typically there’s 75% of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
left over once that is done.  Hence, you get this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM memory&lt;/a&gt;.
for “free” with the price of your board.&lt;/p&gt;

&lt;p&gt;When
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
isn’t enough, or alternatively when you want your program to
run from non-volatile memory, this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is available to you.  Indeed, some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
boards don’t really have much more than
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
devices to act as memories as discussed above.  Examples of these boards
include the &lt;a href=&quot;/blog/2018/10/05/tinyfpga.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, the
&lt;a href=&quot;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&quot;&gt;iCEBreaker board&lt;/a&gt;,
and the &lt;a href=&quot;https://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod
S6&lt;/a&gt;.
This leads to a memory space such as Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. Flash (ROM) and Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The original linker script I used for &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;my CMod S6
design&lt;/a&gt; placed all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_segment&quot;&gt;CPU instructions&lt;/a&gt;
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; following the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
configuration, and all the
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;data memory&lt;/a&gt; into the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
This configuration is shown in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. Flash based instruction layout&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash-loaded.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, the ‘D’ below the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; represents
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment&quot;&gt;global data&lt;/a&gt;,
‘H’ represents the &lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Heap&quot;&gt;heap&lt;/a&gt;, and
the ‘S’ represents the 
&lt;a href=&quot;https://wikipedia.org/wiki/Data_segment#Stack&quot;&gt;Stack&lt;/a&gt; memory.
Likewise the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
memory area would start following the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
configuration data, shown here as &lt;code class=&quot;highlighter-rouge&quot;&gt;FPGA&lt;/code&gt;.
This would then be followed by a bootloader ‘B’, traditional instructions
&lt;code class=&quot;highlighter-rouge&quot;&gt;Insns&lt;/code&gt; and any constant program data &lt;code class=&quot;highlighter-rouge&quot;&gt;Const&lt;/code&gt;.  The purpose of the bootloader
was to move any pre-initialized global data, shown here as &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;, to
the beginning of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the design failed to meet my real-time speed requirements, driven by the
need for an audio output, I then came back and placed certain instructions,
those in critical sections of my code that needed to run at high speed, into the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;–copying
them from their original location
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  This new configuration
is shown in Fig 6 below, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; section denoting these high speed
instructions that needed to be copied to
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
by the bootloader &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. Placing critical instructions in Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-flash-kernel.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While I managed to solve this challenge, it was a challenge that needed to be
solved and the solution I found won’t necessarily work for all designs.
Imagine, for example, if I wanted to load the C-library into 
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.  It’s not
going to fit no matter how you try to squeeze it.  (It’s not a pair of Levi’s)
Therefore, given that &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is slow, you might wish to move up to a faster
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; type:
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;flash-and-sdram&quot;&gt;Flash and SDRAM&lt;/h4&gt;

&lt;p&gt;Some of my larger devices, such as my
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty A7&lt;/a&gt;
or my
&lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video&lt;/a&gt;
boards, have a
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
as well.  The &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA2-LX25 SoC&lt;/a&gt;
I have also works with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
just not a &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;.
Either way, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
chip provides a lot of memory, allowing programs to copy themselves from the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash device&lt;/a&gt;
to the
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM device&lt;/a&gt;.
This could easily fit the model above, only we would now replace the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
Not only that, for speed we could copy our instructions from the extremely slow
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
onto the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Copying all data to the SDRAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-sdram.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But what about that
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;?
How might we use it now?&lt;/p&gt;

&lt;p&gt;The classic answer would be to use all of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;
on your device as caches for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
This would mitigate the latency found within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;flash-block-ram-and-sdram&quot;&gt;Flash, Block RAM, and SDRAM&lt;/h4&gt;

&lt;p&gt;Alternatively, we could place certain memories, at our discretion, within the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;.
I’ve often done this with the stack memory, but you could also do
this with any kernel memory that needed to be low-latency as well.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. Placing the stack and critical instructions into Block RAM&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ld-sdram-kernel.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id=&quot;flash-block-ram-and-hyperram&quot;&gt;Flash, Block RAM, and HyperRAM&lt;/h4&gt;

&lt;p&gt;Now, just when you think you have everything figured out, someone will give you
an auxiliary memory chip, such as this
&lt;a href=&quot;https://1bitsquared.com/products/pmod-hyperram&quot;&gt;Hyperram from one bit-squared&lt;/a&gt;,
and you’ll wonder how to integrate it with the rest of your system.
It may never be a permanent fixture to any given design, or it may be the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
the &lt;a href=&quot;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&quot;&gt;iCEBreaker&lt;/a&gt; was
was lacking.  Either way, you now need to quickly and easily
reconfigure the design you once had working.&lt;/p&gt;

&lt;p&gt;My whole point is that, in the realm of reconfigurable memory spaces, the
place where you want to keep all the various parts of your software programs
will likely keep changing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
was just given an upgrade to handle just that issue.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-linker-script-file&quot;&gt;The basic Linker Script File&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
that I build tend to have four parts to them.  First, the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;script&lt;/a&gt;
describes a pointer to the first instruction the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
will execute.  The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html&quot;&gt;second block declares the various
memories&lt;/a&gt;
on board.
The third part declares some fixed pointers that can then be referenced
from within my code.  Finally, the &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/SECTIONS.html&quot;&gt;fourth part describes how the various
components of my design will be laid out in
memory&lt;/a&gt;.  Let’s take a
look at what this might look like.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;following&lt;/a&gt;
is an &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;generated script&lt;/a&gt;
to handle a
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; only
configuration on the
&lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Arty&lt;/a&gt; platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;Binutils&lt;/a&gt;
supports &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Script-Format.html&quot;&gt;script comments delimited by &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;*/&lt;/code&gt;&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;The generated
script&lt;/a&gt;
therefore begins with a block of legalese comments, followed by
the entry point for your program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*******************************************************************************
*
* Filename:	./bkram.ld
*
* Project:	OpenArty, an entirely open SoC based upon the Arty platform
*
*---- Skipped comments
/*******************************************************************************
*/
ENTRY(_start)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important part of this section is the &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRY()&lt;/code&gt; command, which 
specifies that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
entry point will be &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt;.  This label will be set
by the linker to point to the entry point in your code.  For the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
this is always the first instruction in the instruction address space.&lt;/p&gt;

&lt;p&gt;As for the legalese, if you don’t like my legalese then feel free to replace it
with your own.  The legalese in the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; output
files is copied from a file I typically call
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/legalgen.txt&quot;&gt;legalgen.txt&lt;/a&gt;,
and introduced through
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
via a &lt;code class=&quot;highlighter-rouge&quot;&gt;@LEGAL=&lt;/code&gt; tag in the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/auto-data/global.txt&quot;&gt;global.txt&lt;/a&gt;
file.  Further, as the owner of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;, I assert
no ownership rights over the designs you create with it, just over the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
code itself–which is released under
&lt;a href=&quot;https://www.gnu.org/licenses/lgpl-3.0.en.html&quot;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second section is the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section.  This section lists the address
location and length of every physical memory component within the system.
The comment you see in this section below was added by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.
It is one of many throughout the various
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
generated files to help guide you through the process of creating and updating
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
configuration files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MEMORY
{
	/* To be listed here, a slave must be of type MEMORY.  If the slave
	* has a defined name in its @LD.NAME tag, it will be listed here
	* under that name.  The permissions are given by the @LD.PERM tag.
	* If no permission tag exists, a permission of &#39;r&#39; will be assumed.
	*/
	   bkram(wx) : ORIGIN = 0x05000000, LENGTH = 0x00020000
	   flash(rx) : ORIGIN = 0x06000000, LENGTH = 0x01000000
	   sdram(wx) : ORIGIN = 0x08000000, LENGTH = 0x08000000
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section contains a list of all peripherals that contained
a &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE&lt;/code&gt; key with a &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; value.  If you recall,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
works off of configuration files containing
&lt;code class=&quot;highlighter-rouge&quot;&gt;@KEY=VALUE&lt;/code&gt; statements.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;@SLAVE.TYPE&lt;/code&gt; key currently supports one of
four types of peripherals: &lt;code class=&quot;highlighter-rouge&quot;&gt;SINGLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OTHER&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt;.
What makes &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; peripherals different is that they are included in the
linker script &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section above.  You can read more about this in my
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/autofpga/blob/master/doc/icd.txt&quot;&gt;icd.txt&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ORIGIN&lt;/code&gt; value is assigned by
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; when
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; assigns
addresses.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH&lt;/code&gt; value, indicating the
size of the peripheral, is given by the &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR&lt;/code&gt; tag times the byte-width
of the bus the peripheral is on.  Hence an &lt;code class=&quot;highlighter-rouge&quot;&gt;@NADDR&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8000&lt;/code&gt; will create
a &lt;code class=&quot;highlighter-rouge&quot;&gt;LENGTH&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x20000&lt;/code&gt; as shown above for a 32-bit wide bus.&lt;/p&gt;

&lt;p&gt;The names given above come from either the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.NAME&lt;/code&gt; tag within the peripheral,
or the peripheral’s name itself as found within its &lt;code class=&quot;highlighter-rouge&quot;&gt;@PREFIX&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;The point is that as your design is composed, and the memories given addresses,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
supports this reconfiguration by creating and populating the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section
of the linker script.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Simple-Assignments.html&quot;&gt;next section contains a variety of symbol declarations and
assignments&lt;/a&gt;.
These symbol names, if defined and used within your C/C++ code, will be
replaced with the values given below.&lt;/p&gt;

&lt;p&gt;First, all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; peripherals are given names and values pointing
to the beginning of their memory regions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* For each defined memory peripheral, we also define a pointer to that
* memory.  The name of this pointer is given by the @LD.NAME tag within
* the memory peripheral&#39;s configuration
*/
_bkram    = ORIGIN(bkram);
_flash    = ORIGIN(flash);
_sdram    = ORIGIN(sdram);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, if there is an &lt;code class=&quot;highlighter-rouge&quot;&gt;LD.DEFNS&lt;/code&gt; tag within the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; script,
its value will be copied into this section as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* LD.DEFNS */
_kram  = 0; /* No high-speed kernel RAM */
_ram   = ORIGIN(bkram);
_rom   = 0;
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together, the sections above tell the linker that we have three types of
memories,
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;.
It identifies the origins of those memories, their lengths, and then
creates symbols so that your code can access these values.&lt;/p&gt;

&lt;p&gt;Next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;_kram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_ram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_rom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_stack&lt;/code&gt; symbols are used by
the &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;ZipCPU’s
bootloader&lt;/a&gt;
to load items from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;
into a high-speed kernel
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; (i.e. 
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;, if used)
or otherwise into regular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
(i.e. an &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;).
Finally, the top of the
&lt;a href=&quot;https://wikipedia.org/wiki/Call_stack&quot;&gt;stack&lt;/a&gt;
is set to be the end of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; section
in this design.&lt;/p&gt;

&lt;p&gt;These are just symbols assigned to values.  We haven’t described any real
linking yet.  Those instructions are found in the next section.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/SECTIONS.html&quot;&gt;last section describes where the various segments of your program
need to be placed into
memory&lt;/a&gt;.  In &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/board/bkram.ld&quot;&gt;this
example&lt;/a&gt;,
I define a new memory section starting at the origin of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;,
aligned on units of 4 octets, and filled with a series of segments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* LD.SCRIPT */
SECTIONS
{
       .ramcode ORIGIN(bkram) : ALIGN(4) {
               _boot_address = .;
               _kram_start = .;
               _kram_end = .;
       		_ram_image_start = . ;
               *(.start) *(.boot)
               *(.kernel)
               *(.text.startup)
               *(.text*)
               *(.rodata*) *(.strings)
               *(.data) *(COMMON)
               }&amp;gt; bkram
       _ram_image_end = . ;
       .bss : ALIGN_WITH_INPUT {
               *(.bss)
               _bss_image_end = . ;
               } &amp;gt; bkram
       _top_of_heap = .;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are also a series of assignments in this section as well.  These define
both values that will be used by the
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;,
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;_ram_image_start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_bss_image_end&lt;/code&gt;, as well as an ending value
which will then be the pointer to the beginning of the heap, &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/bootloader.h&quot;&gt;simple pair of lines within your C++
code&lt;/a&gt;,
such as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_top_of_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will allow you to get the value of this &lt;code class=&quot;highlighter-rouge&quot;&gt;_top_of_heap&lt;/code&gt; value, and to initialize
the &lt;code class=&quot;highlighter-rouge&quot;&gt;heap&lt;/code&gt; pointer with it.&lt;/p&gt;

&lt;p&gt;But what about those sections?  Here are some of their basic meanings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start) *(.boot)&lt;/code&gt;: These two segments are
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 specific segments.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start)&lt;/code&gt; segment is used by the
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 to make certain the startup code is the first set of instructions
 following the reset address–which is typically the beginning of
 the &lt;code class=&quot;highlighter-rouge&quot;&gt;SECTIONS&lt;/code&gt; area although not in this case.  The most important part of
 this startup code is that it sets the
 &lt;a href=&quot;https://wikipedia.org/wiki/Call_stack&quot;&gt;stack pointer&lt;/a&gt; that everything
 else will depend upon, and then jumps to the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;.
 When the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 returns, it then jumps to your &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function.  When &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; returns,
 it halts the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.boot)&lt;/code&gt; code is another &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
 section where I place the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 instructions.&lt;/p&gt;

    &lt;p&gt;Both of these need to come early in the code order, primarily for the times
 when I need to copy instructions from
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
 to
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;–although
 they aren’t necessarily used in this example.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.kernel)&lt;/code&gt;: I created this
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; specific section to support my
 &lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;S6SoC project&lt;/a&gt;.  Any code
 placed in this section will be copied to the fastest
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
 in the project (&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block
 RAM&lt;/a&gt;), in case the
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
 has code that must run at high speed.&lt;/p&gt;

    &lt;p&gt;Both the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.kernel)&lt;/code&gt; section as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.start)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.boot)&lt;/code&gt;
 sections are unknown to the
 &lt;a href=&quot;https://www.gnu.org/software/binutils&quot;&gt;binutils linker&lt;/a&gt;
 or &lt;a href=&quot;https://www.gcc.org&quot;&gt;GCC&lt;/a&gt;.  The code to be placed
 in these sections must specifically be marked as such.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.text*)&lt;/code&gt;: These sections contain the instructions for the program in
 question.  Now that we have all the nastiness above out of the way, we can
 actually place these sections, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;*(.text.startup)&lt;/code&gt; section among
 these placed into memory first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.rodata*) *(.strings) *(.data) *(COMMON)&lt;/code&gt;: These sections contain the
 read-only (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;) data used by my program, any strings within the
 program, and finally any global data structures with initial values.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 needs to copy these sections into their places, but nothing else is required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*(.bss)&lt;/code&gt;: The final section is the
 &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;.
 Unlike the other segments above, where the
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
 just needs to copy them into place, the
 &lt;a href=&quot;https://wikipedia.org/wiki/.bss&quot;&gt;BSS segment&lt;/a&gt;
 needs to be cleared to all zeros.  This is where any uninitialized
 global variables within your program will be placed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s one other thing you need to know about this section, the &lt;code class=&quot;highlighter-rouge&quot;&gt;}&amp;gt; bkram&lt;/code&gt;
notation.  This means that the section just described should be allocated
a place in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt; device.  Something else you might see is
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&amp;gt; bkram AT&amp;gt;flash&lt;/code&gt;.  This means that the section needs to be placed into
&lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;, and that your code needs to be linked as though the section were
placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;.  However, it is first placed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt; memory
area, and left there for your
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/autoarty/sw/zlib/crt0.c&quot;&gt;bootloader&lt;/a&gt;
to copy it into &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that you know what the various sections of this file are, and how the
segments within your program will be allocated among them, what happens if
we want to do something else?&lt;/p&gt;

&lt;h4 id=&quot;multiple-linker-configurations&quot;&gt;Multiple Linker Configurations&lt;/h4&gt;

&lt;p&gt;Originally, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
created one linker script, called &lt;code class=&quot;highlighter-rouge&quot;&gt;board.ld&lt;/code&gt;, and adjusted it based upon
the peripherals available to it.  For example, it could handle designs with
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;,
but couldn’t really do much with
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;Flash&lt;/a&gt; and
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt;s.
This worked great for some designs, such as those with a massive amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
as shown in Fig. 7 or 8 above, but horrible for others, such as Fig. 2
through 6 above.&lt;/p&gt;

&lt;p&gt;As an example, if I wanted a design to run from
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;block RAM&lt;/a&gt; alone,
such as to test the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
itself apart from its memory peripherals with
the form in Fig. 2 above, this one size fits all
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
would have be inadequate.  Likewise, if I had a design that didn’t have enough
room in &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
to copy the various program segments into (imagine the C-library here), the
stock linker script wouldn’t work either.  While I could create a script by
hand for each of these scenarios, such as I was &lt;a href=&quot;https://github.com/ZipCPU/tinyzip/blob/master/sw/board/boardram.ld&quot;&gt;starting to
do&lt;/a&gt;
in my &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;TinyZip design&lt;/a&gt;, that script would
then need to be updated by hand every time the addresses in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; region changed.&lt;/p&gt;

&lt;p&gt;This was getting annoying.&lt;/p&gt;

&lt;p&gt;To deal with this, I just recently created some new
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; tags for
creating &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt;: If present in a given configuration file,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
will create a 
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
and write it out to the named file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt;: If present, these definitions will be added to the definitions
section of the new linker script.&lt;/p&gt;

    &lt;p&gt;Well, sort of.  What if a design has multiple linker script configuration
files?  In this case, the components that have no &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tags will have
their &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt; tags copied to all linker scripts, while the components
with an &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tag will have their &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.DEFNS&lt;/code&gt; tag copied
into the linker script defined by that component only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.SCRIPT&lt;/code&gt;: This tag, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;SECTION&lt;/code&gt; component above,
will be copied into the linker script associated with the &lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.FILE&lt;/code&gt; tag
in the same component verbatim, although with variable substitution
applied.  So, for example, if our design creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;RESET_ADDRESS&lt;/code&gt;
tag within the peripheral named &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; (i.e. having a &lt;code class=&quot;highlighter-rouge&quot;&gt;PREFIX&lt;/code&gt; tag
of &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;, then we might reference &lt;code class=&quot;highlighter-rouge&quot;&gt;@$(zip.RESET_ADDRESS)&lt;/code&gt; to get a
copy of what that address was here in this location.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Several former linker tags have kept their functionality, but now have new
names.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.NAME&lt;/code&gt;: This is the name of the memory component, as found in the
linker script.  In the example above, we had names of &lt;code class=&quot;highlighter-rouge&quot;&gt;bkram&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;sdram&lt;/code&gt;.  This tag used to be called &lt;code class=&quot;highlighter-rouge&quot;&gt;@LDSCRIPT.NAME&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.PERM&lt;/code&gt;: The &lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section of a linker script requires a permission
string.  The &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html#MEMORY&quot;&gt;binutils
documentation&lt;/a&gt;
calls this a set of attributes.  So far, I’ve only used &lt;code class=&quot;highlighter-rouge&quot;&gt;rx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wx&lt;/code&gt; for
executable &lt;a href=&quot;https://en.wikipedia.org/wiki/Read-only_memory&quot;&gt;ROM&lt;/a&gt;
and executable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
respectively.  &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/MEMORY.html#MEMORY&quot;&gt;Other possible attributes are defined can be
found in the binutils
documentation&lt;/a&gt;.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; does
nothing more than copy then from your design file to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;MEMORY&lt;/code&gt; section of the
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Remember, &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;  is primarily a copy-paste tool with the ability to compose bus interconnects,
and a limited variable substitution and expression evaluation capability
sprinkled within.  Similarly, another of the goals of
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; was
that when it’s work was done, the computer generated files would be
comprehensible, rather than your more typical computerese.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LD.ENTRY&lt;/code&gt;: If present, this will define the entry symbol for a given
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.
If not specified, this will default to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt; symbol as above.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This updated method of generating custom
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
has now worked so well for me that I have several
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker scripts&lt;/a&gt;
defined for the
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; upgrade to
my &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/&quot;&gt;OpenArty&lt;/a&gt; project:
&lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/mem_bkram_only.txt&quot;&gt;one for block RAM
only&lt;/a&gt;,
another for &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty/mem_flash_bkram.txt&quot;&gt;flash plus block
RAM&lt;/a&gt;,
and I’ll be adding a third for flash, block RAM, and SDRAM support.
Even better, using this approach, adding
support for a
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM controller&lt;/a&gt;
should be just as simple as copying the controller components to my
RTL directory (or a subdirectory of it) and
adding the
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
linker script configuration to my design.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Working with one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
design across many different hardware components and
capabilities can be a challenge.  It can be difficult to take a basic
design and rapidly configure it for a new set of hardware, or to maintain
support across several different hardware implementations.
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
can handle many of these reconfiguration needs, to make reconfiguring
designs from one hardware configuration to another easier.&lt;/p&gt;

&lt;p&gt;Even better,
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;’s
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;
generation just got an upgrade to help it deal with the need for multiple
different memory configurations–either between designs or even within the
same design.&lt;/p&gt;

&lt;p&gt;Of course, the unwritten reality of this article is that I don’t really want to
spend my time writing
&lt;a href=&quot;https://sourceware.org/binutils/docs/ld/Scripts.html&quot;&gt;linker script&lt;/a&gt;.  I would
rather be spending my time getting my new
&lt;a href=&quot;https://github.com/ZipCPU/wbhyperram/tree/dev&quot;&gt;HyperRAM&lt;/a&gt;
to work.  This is just my way of trying to simplify the massive configuration
challenges I have along the way.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Let him that stole steal no more: but rather let him labour, working with his hands the thing which is good, that he may have to give to him that needeth. (Eph 4:28)&lt;/em&gt;</description>
        <pubDate>Sat, 22 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2018/12/22/autofpga-ld.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2018/12/22/autofpga-ld.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Makefiles for formal proofs with SymbiYosys</title>
        <description>&lt;p&gt;It seems that the more I work with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, the more options it accumulates.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. &lt;a href=&quot;/about/zipcpu.html&quot;&gt;A CPU&lt;/a&gt; with lots of options&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/zipcpu-config.png&quot;&gt;&lt;img src=&quot;/img/zipcpu-config.png&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I simplified the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU options&lt;/a&gt;
somewhat to present Fig. 1, but you can see &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;all the CPU options and their
settings&lt;/a&gt;
in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/&quot;&gt;ZipCPU GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First it was the prefetch: I built a &lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;basic
prefetch&lt;/a&gt;, then &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;one
that can issue two bus requests at
once&lt;/a&gt;, then &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;one with
a fullly integrated
I-cache&lt;/a&gt;.  In
each case, I wanted more performance but didn’t want to give up the ability of
building the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in an extremely
low logic configuration.&lt;/p&gt;

&lt;p&gt;Then it was &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;the
multiplies&lt;/a&gt;:
not every board I worked with had the embedded DSP elements required for
hardware accelerated multiplies.  Indeed, some that had embedded
DSP elements couldn’t handle a 32x32 bit multiply within a single clock
(Spartan 6).  This forced me into two separate multiplication implementations.
Then, the fact that the iCE40 has &lt;em&gt;no&lt;/em&gt; DSPs lead to an &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/slowmpy.v&quot;&gt;additional
multiplication
implementation&lt;/a&gt;
just to handle that environment.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. The pipeline structure of the ZipCPU&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu.png&quot; alt=&quot;&quot; width=&quot;531&quot; /&gt;&amp;gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/memops.v&quot;&gt;initial memory
subsystem&lt;/a&gt;,
while working, was cripplingly slow.  A &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pipemem.v&quot;&gt;faster memory subsystem was written to
replace it&lt;/a&gt;,
and then a proper &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;
was written to replace that.  On top of that, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; can optionally support a
&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html&quot;&gt;lock instruction for atomic
access&lt;/a&gt;,
a compressed instruction set, a set of CPU-local peripherals, and more.&lt;/p&gt;

&lt;p&gt;If those weren’t enough changes, the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/idecode.v&quot;&gt;instruction
decoder&lt;/a&gt; needs to
support all of the various instruction set extensions.  Lock instructions need
to be honored by the memory module, unless no lock instruction is implemented.
Multiplication instructions need to be honored if enabled, while creating
illegal instruction exceptions if not.  Some of the options need special
decoding, such as the simulation instructions or the early
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branching&lt;/a&gt;
instructions.&lt;/p&gt;

&lt;p&gt;This leaves me with an ongoing and growing problem: how do you
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;a core&lt;/a&gt;
that has so many options associated with it?&lt;/p&gt;

&lt;p&gt;Let’s look at this problem from both the standpoint of the
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
script file, as well as a supporting
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;symbiyosys-tasks&quot;&gt;SymbiYosys Tasks&lt;/h2&gt;

&lt;p&gt;While the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is highly
configurable, it doesn’t make sense to test every permutation of the various
configurations.  Therefore, let’s look over some of the more common
configuration settings used by the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  More than that, we’ll give
each of these configurations names.  These names will us remember the
configuration set, as well as helping to make our
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
configuration simpler in a moment.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;dcache&lt;/p&gt;

    &lt;p&gt;This new option describes a configuration that uses the brand new
(&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;,
Xilinx Series-7 proven) &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;.  If
you want performance from the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;,
this is no-holds barred attempt at high speed and full features.&lt;/p&gt;

    &lt;p&gt;This is the configuration I am testing within my
&lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;OpenArty&lt;/a&gt; project, in case you want to
see it in action.  (You may need to check out the &lt;a href=&quot;https://github.com/ZipCPU/openarty/tree/autoarty&quot;&gt;autoarty
branch&lt;/a&gt; where it exists
today.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;piped&lt;/p&gt;

    &lt;p&gt;Prior to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data
cache&lt;/a&gt;, this
configuration was the no-holds barred high speed, full
featured &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; version.  It
describes a fully pipelined implementation containing an
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;instruction cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;multiplies&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divides&lt;/a&gt;,
compressed instruction set, and early branching capability.  (The
early branching capability allows you to branch from the decode stage,
without waiting for the later stages.  It applies only to unconditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Branch_(computer_science)&quot;&gt;branches&lt;/a&gt;.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nopipe&lt;/p&gt;

    &lt;p&gt;This is the same thing, only we shut down everything we don’t need: no
pipeline CPU (forcing a minimum of 3 clocks per instruction), no
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/mpyop.v&quot;&gt;multiplies&lt;/a&gt;,
no &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divide
instructions&lt;/a&gt;,
but still supports the compressed instruction set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lowlogic&lt;/p&gt;

    &lt;p&gt;Much to my surprise, the no-pipelined option wasn’t as small as I needed to
get for some implementations, so this version drops the compressed
instruction set support.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ice40&lt;/p&gt;

    &lt;p&gt;Didn’t we get rid of enough stuff yet?&lt;/p&gt;

    &lt;p&gt;Apparently not.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/formal/2017/07/21/zipcpu-icoboard.html&quot;&gt;iCE40 doesn’t support distributed
RAM&lt;/a&gt;.  All reads
from the register file need to go directly into a register first, and only
on the next clock can we do anything with them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
we can declare different “tasks” to verify each of these
configurations.  The following code declares five such “tasks”, one on
each line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tasks]
dcache		full_proof      dcache
piped		full_proof      no_dcache
nopipe		nopipe          no_dcache
lowlogic	nopipe		no_dcache
ice40		nopipe          no_dcache	nobkram&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the format of this section.  It starts with a &lt;code class=&quot;highlighter-rouge&quot;&gt;[tasks]&lt;/code&gt; line.  Every
line thereafter begins with the name of a task.  In our case, these represent
the various configurations we just outlined above.  The second half of the line
is more interesting.  This consists of a series of labels which will also be
accepted as task names later.  That way, we can specify &lt;code class=&quot;highlighter-rouge&quot;&gt;ice40&lt;/code&gt; and get
all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;nopipe&lt;/code&gt; (non-pipelined) options, together with the &lt;code class=&quot;highlighter-rouge&quot;&gt;no_dcache&lt;/code&gt;
option and the more critical &lt;code class=&quot;highlighter-rouge&quot;&gt;nobkram&lt;/code&gt; option.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. One command per line&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/sby-taskcmd.svg&quot; alt=&quot;taskname: yosys-cmd&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;How might we use this?  There are two basic approaches.  First, we can begin
any line following in our
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
script with a task name followed by a colon.  Once done, everything
following is only executed if that given task name is the active
task.  This applies to the aliased names as well, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;full_proof&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;no_dcache&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[options]
mode prove
depth 18
dcache:   depth  9
piped:    depth 14
nopipe:   depth 11
lowlogic: depth 10
ice40:    depth 11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far, this is kind of interesting but not all that useful.&lt;/p&gt;

&lt;p&gt;Let’s consider some other things &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; offers.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;,
you can set a macro.  You might recognize macros by their Verilog usage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Define a macro, NO_DISTRIBUTED_RAM
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	NO_DISTRIBUTED_RAM&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NO_DISTRIBUTED_RAM&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Code that only gets executed if `NO_DISTRIBUTED_RAM` is defined
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Code that only gets executed if `NO_DISTRIBUTED_RAM` is not defined
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One problem with this sort of declaration is that it isn’t clear whether the
macro defined in one file will remain active in another.&lt;/p&gt;

&lt;p&gt;Alternatively, we could use a
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
&lt;a href=&quot;http://www.clifford.at/yosys/cmd_read.html&quot;&gt;command to set this macro&lt;/a&gt;
but only for some configurations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[script]
nobkram: read -define -DNO_DISTRIBUTED_RAM
read -define -DZIPCPU
#
# ... files the ZipCPU depends upon have been skipped here
# for brevity
#
read -formal zipcpu.v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This defines the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_DISTRIBUTED_RAM&lt;/code&gt; across all input files, but only
if &lt;code class=&quot;highlighter-rouge&quot;&gt;nobkram&lt;/code&gt; is the active task.  Likewise, &lt;code class=&quot;highlighter-rouge&quot;&gt;ZIPCPU&lt;/code&gt; is defined for all
tasks.  This latter definition is how I handle &lt;a href=&quot;/formal/2018/12/18/skynet.html&quot;&gt;telling submodules if they
are being verified as separate modules or as submodules
instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another very useful &lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
command is the &lt;a href=&quot;http://www.clifford.at/yosys/cmd_chparam.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chparam&lt;/code&gt;
command&lt;/a&gt;.  You can use this to change
the value of any parameter within your logic.  As examples, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has several high
level parameters.  Perhaps you may have noticed some of them in Fig 1. above.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;IMPLEMENT_FPU&lt;/code&gt; is a single bit parameter
that controls whether the (still not yet existent) floating point unit (FPU)
is included.  As a more relevant example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_LGDCACHE&lt;/code&gt; controls the size
of the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
and whether the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
is included at all.  If this value is set to zero, no
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;
will be included in the build, whereas if it is non-zero it sets the size
of the cache.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4. Associating multiple lines with a given script&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/sby-taskcmd-set.svg&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For this, we’ll use the second approach for specifying task-configurations,
as shown in Fig. 4 on the right.  In this case, we can start a set of
task-specific commands using the task name and a colon on a line by itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;chparam -set IMPLEMENT_FPU    0 zipcpu

dcache:
chparam -set OPT_LGDCACHE    10 zipcpu

no_dcache:
chparam -set OPT_LGDCACHE     0 zipcpu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This process is continued until either another task name, or
until a line containing two &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;s by themselves.  Hence, the definition of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;full_proof&lt;/code&gt; &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; configuration shown
below, as well as the minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;nopipe&lt;/code&gt;-lined option and the even more
minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;lowlogic&lt;/code&gt; option.  When done, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; line specifies that all the
tasks join together again for the lines following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;full_proof:
chparam -set IMPLEMENT_MPY    1 zipcpu
chparam -set IMPLEMENT_DIVIDE 1 zipcpu
chparam -set EARLY_BRANCHING  1 zipcpu
chparam -set OPT_CIS          1 zipcpu
chparam -set OPT_PIPELINED    1 zipcpu

nopipe:
chparam -set IMPLEMENT_MPY    0 zipcpu
chparam -set IMPLEMENT_DIVIDE 0 zipcpu
chparam -set EARLY_BRANCHING  0 zipcpu
chparam -set OPT_CIS          1 zipcpu
chparam -set OPT_PIPELINED    0 zipcpu

lowlogic:
chparam -set OPT_CIS 0 zipcpu
--

prep -top zipcpu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, just the one command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;sby -f zipcpu.sby&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
the entire
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in &lt;em&gt;all&lt;/em&gt; of these various
configurations.  For each configuration,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will create a directory,
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_dcache&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_full&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcpu_lowlogic&lt;/code&gt;.  Within this
directory, you’ll find the &lt;code class=&quot;highlighter-rouge&quot;&gt;logfile.txt&lt;/code&gt; containing the standard output from
the run.  You can use this to find out whether your design passed that proof,
or if not what assertion or cover statement failed.  You’ll also find an
&lt;code class=&quot;highlighter-rouge&quot;&gt;engine_0&lt;/code&gt; directory with any trace files within it.  (Why &lt;code class=&quot;highlighter-rouge&quot;&gt;engine_0&lt;/code&gt;?
Because I tend to only ever use one
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
engine.  Otherwise you might have other engines as well.)&lt;/p&gt;

&lt;h2 id=&quot;using-make-to-drive-symbiyosys&quot;&gt;Using Make to drive SymbiYosys&lt;/h2&gt;

&lt;p&gt;There’s one other thing
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
provides that is very valuable from a scripting standpoint.  Upon
completion,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
will create an empty file in the newly created results
directory indicating the results of the run.  Example files include
&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FAIL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UNKNOWN&lt;/code&gt;.  This file makes it easy to create a
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.
to support several
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
runs, and we only need use the &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file to do it.&lt;/p&gt;

&lt;p&gt;Let’s pick an example component to verify, such as the &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer
that we discussed earlier&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;timer itself&lt;/a&gt;
has no real configuration options, so to verify it we could just place the
following two lines into our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
however, will make a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; upon every run.
Once this directory exists, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will no longer run our proof.  However, if
we tell &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; is just a
name of something to do and not a file, we can create the functionality we want.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/bench/formal/Makefile&quot;&gt;This Makefile&lt;/a&gt;
will now command a
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
proof everytime we try to &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; target.&lt;/p&gt;

&lt;p&gt;But what if the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;
hasn’t changed?  Why should we re-verify it if &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;the code within
it&lt;/a&gt;
hasn’t changed, and if it passed the last time?&lt;/p&gt;

&lt;p&gt;Here is where &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; starts to shine.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer/PASS&lt;/code&gt; is a file, created
upon successful completion of the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
pass, we can tell
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;
that this file is created from the files the
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;ZipTimer&lt;/a&gt;.
depends upon.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ziptimer/PASS&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;ziptimer/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;../../rtl/peripherals/ziptimer.v&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;sby -f ziptimer.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, anytime the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;ziptimer.v file&lt;/a&gt;
changes, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will attempt to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
it again.  Further, should the proof fail, the &lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file will not get
created, and so the next time we call
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; it will attempt to create this
file again until our proof passes.&lt;/p&gt;

&lt;p&gt;What if we wanted to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt;
a lot of things?  Rather than running 
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; many times, once per target, we might
instead start our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;
with a list of proofs, containing both the components as well as larger proofs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;TESTS &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ziptimer&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TESTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; zipcpu
&lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TESTS)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; is the default &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target,
as defined by being the first target within our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;,
then all of the tests named in &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TESTS)&lt;/code&gt; will get built, er … verified.&lt;/p&gt;

&lt;p&gt;Let’s clean this up a little more with some definitions.  Since I like to keep
my &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/bench/formal&quot;&gt;scripts&lt;/a&gt;
separate from &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/master/rtl&quot;&gt;my Verilog
files&lt;/a&gt;, it might help
to use a name for that path to simplify it.  Here, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;RTL&lt;/code&gt;.  Once
defined, this value will get substituted anytime we reference &lt;code class=&quot;highlighter-rouge&quot;&gt;$(RTL)&lt;/code&gt;.
Likewise we’ll shorten the name of our target &lt;code class=&quot;highlighter-rouge&quot;&gt;ziptimer&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;RTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; ../../rtl

&lt;span class=&quot;nv&quot;&gt;TMR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; ziptimer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also define the names of our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal wishbone
property sets&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;MASTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/fwb_master.v
&lt;span class=&quot;nv&quot;&gt;SLAVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/ex/fwb_slave.v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Putting all this together, the script now says that …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt; is a “phony” target that doesn’t build a file.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;To build &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)&lt;/code&gt; we need to first build &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt;.  Why the extra step?
Just so that we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;make ziptimer&lt;/code&gt; later, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;make
ziptimer/PASS&lt;/code&gt; or worse &lt;code class=&quot;highlighter-rouge&quot;&gt;make ziptimer_timerconfiguration/PASS&lt;/code&gt; for
every
&lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
configuration we might have.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(TMR)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR)/PASS&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Finally, we can call
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
our &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;.
This proof is dependent upon not only the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/ziptimer.v&quot;&gt;code for the timer
itself&lt;/a&gt;,
but also a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;list of formal wishbone
properties&lt;/a&gt;.
These are called dependency files, or sometimes just dependencies
for short, because the validity of our proof &lt;em&gt;depends&lt;/em&gt; upon these files.
By listing these dependencies to the right of the &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will only
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
our &lt;a href=&quot;/zipcpu/2018/04/17/ziptimer.html&quot;&gt;timer&lt;/a&gt;
if either the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt; file is missing, or if one of the
dependency files is newer than the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(TMR)/PASS&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;$(TMR)/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(TMR).sby $(RTL)/peripherals/$(TMR).v $(SLAVE)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(TMR)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.sby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is exactly what we want from a
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;!
Running  &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will run all of our &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt; proofs,
but once all the logic is
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verified&lt;/a&gt;,
running
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will just return a message telling
us it has nothing to do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
make: Nothing to be &lt;span class=&quot;k&quot;&gt;done for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;all&#39;&lt;/span&gt;.
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But how shall we handle the multiple configurations we discussed earlier?&lt;/p&gt;

&lt;p&gt;Why not set up one proof per configuration?&lt;/p&gt;

&lt;p&gt;Let’s examine the proof of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;core&lt;/a&gt;
itself.  Remember how we had so many configurations above?  What if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;PASS&lt;/code&gt; file associated with each configuration was a
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; target?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; zipcpu
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Proofs to build
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$(CPU)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)_dcache/PASS $(CPU)_piped/PASS&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;$(CPU)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPU)_nopipe/PASS $(CPU)_lowlogic/PASS $(CPU)_ice40/PASS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Files the proofs depend upon
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPUDEPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/&lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/cpuops.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/idecode.v &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/pipemem.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/core/memops.v			  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/wbdblpriarb.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/ex/fwb_counter.v &lt;span class=&quot;nv&quot;&gt;$(RTL)&lt;/span&gt;/cpudefs.v  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	f_idecode.v abs_div.v abs_prefetch.v abs_mpy.v &lt;span class=&quot;nv&quot;&gt;$(MASTER)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(SLAVE)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby
&lt;span class=&quot;c&quot;&gt;# Now one line for each proof, to build the respective &amp;lt;sbydir&amp;gt;/PASS files
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$(CPU)_dcache/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby dcache

&lt;span class=&quot;nl&quot;&gt;$(CPU)_piped/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby piped

&lt;span class=&quot;nl&quot;&gt;$(CPU)_nopipe/PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(CPUDEPS)&lt;/span&gt;
	sby -f &lt;span class=&quot;nv&quot;&gt;$(CPU)&lt;/span&gt;.sby nopipe

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;idea&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;point&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once accomplished, one simple command,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will run all of the proofs we have described within our
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;.
This includes calling &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;verify&lt;/a&gt; every one of
the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s various configurations.&lt;/p&gt;

&lt;p&gt;Once completed, or even before, you can run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make -n&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to see what proofs have yet to be completed, or equivalently which proofs have
failed–assuming in the latter case that
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; has completed.&lt;/p&gt;

&lt;p&gt;Of course, the problem with using &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n&lt;/code&gt; to determine which proofs have
failed is what happens after only one proof fails.  After the first proof
fails, &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; will give you no
information about whether or not the remaining proofs might pass.
Alternatively, if you don’t want
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; to stop on the first failed proof,
you can instead run,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make -k&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Want to use all of your host processors multiple cores?  You could specify
&lt;code class=&quot;highlighter-rouge&quot;&gt;make -k -j &amp;lt;ncpus&amp;gt;&lt;/code&gt; to use all &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ncpus&amp;gt;&lt;/code&gt; of them.  However, this might
leave some of your build cores overloaded during induction.  For
this reason, I’ve considered running &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n -j &amp;lt;ncpus/2&amp;gt;&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;What’s all this good for?  Well, for me this means I can verify my brand new
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dcache.v&quot;&gt;data cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;instruction cache&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/idecode.v&quot;&gt;instruction decoder&lt;/a&gt;,
several arbiters, … and the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
itself
from one &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command.  If the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command fails, I can go back and
examine the respective &lt;code class=&quot;highlighter-rouge&quot;&gt;logfile.txt&lt;/code&gt;s to see why.  Likewise, if I want
to know what proofs need to be re-accomplished, I can just type &lt;code class=&quot;highlighter-rouge&quot;&gt;make -n&lt;/code&gt;
to see what &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; would try to build if you ran it again.&lt;/p&gt;

&lt;p&gt;With a little more work, I could split the list of Verilog files, &lt;code class=&quot;highlighter-rouge&quot;&gt;$(CPUDEPS)&lt;/code&gt;,
into a more finer grained list, so that all of the CPU configurations
don’t need to be re-verified every time one file, used only by some
configurations, changes.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;When I first started using this approach of testing multiple configurations
automatically using
&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt;,
I immediately found several errors within code that I had assumed was working.
The first bug was in the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/memops.v&quot;&gt;memory
component&lt;/a&gt;,
where it wasn’t properly handling a misaligned address exception (an option
that wasn’t checked by default).  The second bug was within the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;I-cache&lt;/a&gt;,
that I am hoping to blog about soon.  Since I had only verified the safety
properties within it, that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;s given the assumptions, I hadn’t
noticed that certain assumptions rendered the &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;proof
vacuous&lt;/a&gt;.
Now, using these multiple configurations, I can both prove the assertions
and run cover to be even more certain that the various
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; components work.&lt;/p&gt;

&lt;p&gt;So even though I’ve only started using this approach in the most recent
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu&quot;&gt;release of the ZipCPU&lt;/a&gt;, because of the
bugs I’ve found with it using this new approach, I now like it so much that
I’m likely to slowly modify all of the
&lt;a href=&quot;https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html&quot;&gt;Makefile&lt;/a&gt;s
within my &lt;a href=&quot;/projects.html&quot;&gt;various projects&lt;/a&gt; to use this
approach as I have opportunity.  Even if the core in question isn’t
configurable, I’m going to make certain I do this in order to guarantee that
the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; checks run automatically.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Then I saw, and considered it well: I looked upon it, and received instruction. (Prov 24:32)&lt;/em&gt;</description>
        <pubDate>Thu, 20 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/zipcpu/2018/12/20/sby-makefile.html</link>
        <guid isPermaLink="true">https://zipcpu.com/zipcpu/2018/12/20/sby-makefile.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>Swapping assumptions and assertions doesn&#39;t work</title>
        <description>&lt;p&gt;If there’s one thing I hate, it’s admitting I’m wrong.  Today, I need to do
that.&lt;/p&gt;

&lt;p&gt;One of the very real and practical difficulties of working with
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
is managing the complexity.
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal methods&lt;/a&gt;
are roughly exponential in their complexity.  Practically, this means that
there is a limit to the complexity of any design that you wish to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;.
This means that the engineer using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;formal tools&lt;/a&gt;
needs to carefully consider what parts of the design to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;,
and how to carefully break the entire design into smaller pieces that can
verified individually.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;I discussed one possible way of doing this
before&lt;/a&gt;,
as part of aggregating
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
modules together.  The basic approach I used was to
verify the smaller “leaf” sub-modules, and then to aggregate up to larger
modules.  When aggregating up, I used an approach suggested to me by
&lt;a href=&quot;https://www.onespin.com&quot;&gt;another&lt;/a&gt;:
swap the assumptions with the assertions of the submodule.  That way, you
verify that the assumptions made within the submodule hold as part of verifying
the parent module.&lt;/p&gt;

&lt;p&gt;Pictorially, I explained this concept using Fig 1.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 1. Invariants applied to a parent/leaf module hierarchy&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/invariance-external.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This picture shows the verification process in two parts.  The first part,
on the left,
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifies&lt;/a&gt;
the submodule(s).  These are verified as independent modules from the parent.&lt;/p&gt;

&lt;p&gt;For the second part of the verification shown in Fig. 1, the parent modules
are verified, with the submodules beneath them.  In this case, the assumptions
about the submodules inputs are transformed into assertions, and the assertions
within the submodule are then transformed into assumptions.  The idea is that
if you’ve already proven that the assertions of the submodule hold given the
assumptions, then all you need do is to verify the assumptions of the submodule
and you then know that the assertions will pass.&lt;/p&gt;

&lt;p&gt;I’ve now used this logic within many of my designs, and I’ve been very pleased
with it.&lt;/p&gt;

&lt;p&gt;The only problem with it?  It doesn’t work.  It can lead to false negatives,
where you believe your design works when in actuality it does not.&lt;/p&gt;

&lt;h2 id=&quot;skynet&quot;&gt;Skynet&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. &lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt;, the fictional AI system created by Cyberdyne Systems that tried to destroy all of humanity&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/skynet.jpg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/oe1cxw&quot;&gt;Clifford Wolf&lt;/a&gt; was kind enough to provide the
necessary counter example, framed in terms of 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt;, the fictional
defense machine that decided to kill all humans as part of the back story
for &lt;a href=&quot;https://en.wikipedia.org/wiki/Terminator_(franchise)&quot;&gt;Terminator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It goes like this, suppose we have a simple design that determines whether
or not all humanity should be destroyed.  The designers of this system were
smart enough to formally verify it, and so they had a strong confidence that
humanity would never be destroyed.&lt;/p&gt;

&lt;p&gt;Because of the logic flaw we’ll be discussing today, their confidence was
a false confidence.&lt;/p&gt;

&lt;p&gt;Imagine their logic was something as simple as logic below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;skynet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we obviously don’t want to kill everyone, we add a formal section to this
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet logic&lt;/a&gt;
to make certain &lt;code class=&quot;highlighter-rouge&quot;&gt;o_kill_all_humans&lt;/code&gt; will never be asserted,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
on &lt;a href=&quot;/examples/skynet.v&quot;&gt;this logic&lt;/a&gt; will assure us that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
will never decide to destroy all of humanity.&lt;/p&gt;

&lt;p&gt;If only the story stopped there.&lt;/p&gt;

&lt;h2 id=&quot;placing-skynet-in-within-cyberdyne-systems&quot;&gt;Placing Skynet in within Cyberdyne Systems&lt;/h2&gt;

&lt;p&gt;The problem lies in the next step.  Using the approach we discussed before,
we’ll replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; statements with macros.  These
macros are defined depending upon whether or not we are
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
the &lt;a href=&quot;/examples/skynet.v&quot;&gt;submodule (skynet)&lt;/a&gt;,
or its parent–&lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Cyberdyne
Systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do this, we’ll start by creating the various macros, depending upon whether
or not &lt;code class=&quot;highlighter-rouge&quot;&gt;SUBMODULE&lt;/code&gt; is defined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SUBMODULE&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assume&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	ASSERT	assert&lt;span class=&quot;cp&quot;&gt;
`else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assert&lt;span class=&quot;cp&quot;&gt;
`define&lt;/span&gt;	ASSERT	assume&lt;span class=&quot;cp&quot;&gt;
`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using these macros, we can then rewrite our two formal properties:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;32&#39;hdeadbeef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;cp&quot;&gt;`ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_kill_all_humans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, as long as SUBMODULE remains defined, we can still prove that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
will not destroy all humans.&lt;/p&gt;

&lt;p&gt;Let’s add
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;’s &lt;a href=&quot;/examples/skynet.v&quot;&gt;parent module, Cyberdyne
Systems&lt;/a&gt;.  We’ll keep
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt;
simple: there’s no logic within it at all.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyberdyne_systems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;skynet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;determine_fate_of_humanity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_kill_everyone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endmodule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, nothing in the logic of
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt; prevents
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
from being corrupted and killing all humans.&lt;/p&gt;

&lt;p&gt;By design this proof should fail, alerting us to the possibility that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt; was never properly constrained.&lt;/p&gt;

&lt;p&gt;It does not fail.  Instead, &lt;a href=&quot;/examples/skynet.v&quot;&gt;Cyberdyne&lt;/a&gt;
releases a monster.  Why wasn’t it caught during
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;what-went-wrong&quot;&gt;What went wrong?&lt;/h2&gt;

&lt;p&gt;We did everything right so far: We
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt; that
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;
would never
kill all humans as long as the input was never equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;.  We
even asserted that the input would never equal &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;, and this
assertion passed.  We then
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;
both components together, proving that humanity was safe.  However, you
can see from inspection that &lt;em&gt;nothing&lt;/em&gt; keeps the input from being
&lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happened?  Why didn’t this proof fail when it should have?&lt;/p&gt;

&lt;p&gt;The problem is simple: the critical assertion, that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_kill_all_humans&lt;/code&gt;, 
would never be true was converted into an assumption.  Assumptions, if you will
recall, limit the space of what the solver examines.  They take precedence
over assertions.  In this case, the assertion turned assumption
prevented &lt;code class=&quot;highlighter-rouge&quot;&gt;i_input&lt;/code&gt; from becoming &lt;code class=&quot;highlighter-rouge&quot;&gt;32&#39;hdeadbeef&lt;/code&gt; within the solver since
this would’ve caused the assumption to be violated.&lt;/p&gt;

&lt;h2 id=&quot;rescuing-this-logic&quot;&gt;Rescuing this logic&lt;/h2&gt;

&lt;p&gt;There are a couple of things we can do to try to “rescue” this method, none
of them are truly as nice as the initial method appeared to be in the first
place.  We can:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Remove all of the logic within
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;,
leaving only the formal properties behind.&lt;/p&gt;

    &lt;p&gt;Because there’s no logic between the input assumptions, now turned into
assertions, and the output assertions, now turned into assumptions, the
output could be anything depending upon the choice of the solver.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep the logic within
&lt;a href=&quot;/examples/skynet.v&quot;&gt;Skynet&lt;/a&gt;,
replace the original submodule assumptions
with an assertion, and then remove all of the local assertions.&lt;/p&gt;

    &lt;p&gt;Sadly, this approach doesn’t work with
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
as it can leave the local registers within a module unconstrained.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace the assumptions with assertions, but leave the original assertions
untouched.  Hence we would have only &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; properties within the
submodule design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ASSERT&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SUBMODULE&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assume&lt;span class=&quot;cp&quot;&gt;
`else&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`define&lt;/span&gt;	ASSUME	assert&lt;span class=&quot;cp&quot;&gt;
`endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how I am personally going to move forward when aggregating modules.
   It is simple and robust.  The only problem is that the complexity only
   increases upon aggregation.&lt;/p&gt;

&lt;p&gt;Indeed, if you apply this method to
   &lt;a href=&quot;/examples/skynet.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skynet.v&lt;/code&gt;&lt;/a&gt;,
   you’ll find that the
   parent proof fails (as desired), revealing that nothing is keeping
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Skynet_(Terminator)&quot;&gt;Skynet&lt;/a&gt; from killing
   all humans.&lt;/p&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;If we could adjust the formal engine, there would be another approach.&lt;/p&gt;

    &lt;p&gt;Normally, during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
all of the assertions are treated as assumptions
until the last step.  This allows these assertions to constrain the design
until the last step, helping the design enter into a valid state during the
run-up to the final stage of the proof.  Then, in that final state, the
assertions are applied and the design succeeds or fails.&lt;/p&gt;

    &lt;p&gt;If we could create a third type of assertion, let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert&lt;/code&gt; for
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
assertion, another approach might work.  &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert()&lt;/code&gt;
would be ignored during the base case prior to the induction.  During the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;inductive&lt;/a&gt;
step, &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert()&lt;/code&gt;
would apply as an assumption for the first &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; steps of
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;,
and then get ignored on the last step leaving behind all of the other
assertions.&lt;/p&gt;

    &lt;p&gt;Of course, this would only work if the first pass (submodule) verification
evaluated &lt;code class=&quot;highlighter-rouge&quot;&gt;iassert&lt;/code&gt; as though it were a true assertion.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps you are wondering how likely it is that this flawed approach,
discussed above, would result in a false alarm.  While I haven’t been keeping
score, I’ve seen problems in many of my proofs that had used this approach.
The rate may even be as high as thirty percent or more, depending upon the
design.  It’s high enough that you cannot ignore it.  Indeed, the proof I
was working on this morning passed until I “fixed” it with one of the
approaches above, revealing a false alarm due to this approach.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The bottom line is that the &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;approach to formal aggregation that I presented
earlier&lt;/a&gt; doesn’t work,
leading instead to a false confidence that your “formally verified” design
works.&lt;/p&gt;

&lt;p&gt;I’m slowly converting my own logic to use approach 3 above, and recommend
that if you’ve been using this approach that you consider doing so as well.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;A little leaven leaveneth the whole lump.  (Gal 5:9)&lt;/em&gt;</description>
        <pubDate>Tue, 18 Dec 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/formal/2018/12/18/skynet.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/12/18/skynet.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Building a video controller: it&#39;s just a pair of counters</title>
        <description>&lt;p&gt;When I first started working with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s on my
own, the board I started with was a
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board.
As a new student of &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design, and particularly one on a budget, I wanted to create a series of
designs that would eventually use all of the hardware ports of that board.
You know, get the most for your money?  Hence the question, how best should I
use the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; port?&lt;/p&gt;

&lt;p&gt;My original thought was to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;
port was to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;screen buffer&lt;/a&gt;, and then
to display that buffer.  The only problem was that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;screen buffer&lt;/a&gt;
big enough to hold a &lt;code class=&quot;highlighter-rouge&quot;&gt;640*480&lt;/code&gt; screen requires 307kB of buffer space, and the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board didn’t have any external RAM memory, and the Artix-735T
sold on the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board didn’t have enough block RAM for such a buffer.&lt;/p&gt;

&lt;p&gt;How to solve this?&lt;/p&gt;

&lt;p&gt;Eventually, I settled on an approach that used a 25MHz pixel clock and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.  Of course, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
wasn’t fast enough to drive the 25MHz
pixel clock, so I instead run-length encoded the image data and dropped the
bits per pixel down to a four bit value that could then used in a color table
lookup to get full 12’bit color which was all that the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3&lt;/a&gt;
board supported.&lt;/p&gt;

&lt;p&gt;If you’ve worked with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
for a while, you’ll quickly recognize that every step in this increasingly
complex processing chain is an opportunity for things to break.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; controller
needs to work perfectly, the memory reader that feeds the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
needs to work perfectly, and then the decoder needs to work perfectly.
One missed pixel and the entire decompression chain will produce a garbage
output for the rest of the frame.&lt;/p&gt;

&lt;p&gt;Oh, and did I mention the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
was also trying to use the memory on this little board at the same time?&lt;/p&gt;

&lt;p&gt;The traditional way I’ve seen others decode things like this in the past is to
use some form of scope applied to the horizontal and vertical sync’s of the
video image.  This would confirm that the video sync signals were being
properly sent to the screen.  The problem with this approach is that you’ll
never have enough fingers to get a trace from all of the video wires and,
worse, even if you did you’d struggle to decipher the traces without any other
context.&lt;/p&gt;

&lt;p&gt;As I’m sure you can imagine, this approach didn’t work for me.&lt;/p&gt;

&lt;p&gt;The reason it didn’t work is that the image might decode nicely for half the
screen, and then somehow get off cut and then it would degrade into
decompressed chaos.  Well, that and I didn’t own an oscilloscope until much
later.&lt;/p&gt;

&lt;p&gt;Instead, I chose a different approach:
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based video simulation.  Using a video simulator, I could slow things down and
even stop the simulation anytime something “wrong” showed up on the screen and
go back and debug whatever the problem was.&lt;/p&gt;

&lt;p&gt;Today, let’s talk about how &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;the simulator
works&lt;/a&gt;, and then walk through a
demonstration design that will draw some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;color bars&lt;/a&gt;
onto a simulated video screen.&lt;/p&gt;

&lt;h2 id=&quot;the-vga-simulator&quot;&gt;The VGA Simulator&lt;/h2&gt;

&lt;p&gt;If you’ve never tried &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;this VGA simulator&lt;/a&gt;
before, you can &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;find it on
github&lt;/a&gt;, separated into its own repository.
The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;simulator&lt;/a&gt; depends upon the gtkmm-3.0
library, and so on the libgtkmm-3.0-dev Ubuntu package.  (It might even run
on Windows under &lt;a href=&quot;/blog/2017/07/28/cygwin-fpga.html&quot;&gt;Cygwin&lt;/a&gt;,
I just haven’t tried it.)  If you have both
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
and this library installed, you should be able to run the demo by typing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;git clone https://github.com/ZipCPU/vgasim
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vgasim
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;make
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;bench/cpp
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;./main_tb -g 640x480&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. VGA Simulation Test Color Bars&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-testimg.png&quot;&gt;&lt;img src=&quot;/img/llvga-testimg.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If all goes well, you should see the image at the right within a window on your
screen.  You can kill the program by either typing control-C in your bash
window, or by clicking on the close box of the window it creates.&lt;/p&gt;

&lt;p&gt;Let’s examine this image for a moment.&lt;/p&gt;

&lt;p&gt;First, the image in Figure 1 very carefully has a white box around the border
of the image.  This box denotes the first and last pixel of every line,
as well as the first and last line of every frame.  It’s an important test for
this reason first: it shows if you’ve lost any pixels due to timing, as these
will otherwise fall off the screen.&lt;/p&gt;

&lt;p&gt;Second, the image explores the color space of your video output.  Notice the
many shades of red, green, blue, and gray at the bottom of the image.&lt;/p&gt;

&lt;p&gt;Third, but perhaps not so obvious, no image would be possible without creating
a proper &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; signal.  This means
that behind the scenes, there needed to be horizontal and vertical sync channels
as well as three serial streams of data that all had to line up properly
together.&lt;/p&gt;

&lt;p&gt;Finally, it just &lt;em&gt;looks&lt;/em&gt; like an &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;old fashioned TV test
image&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2. Framebuffer Demo&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-fulldemo.png&quot;&gt;&lt;img src=&quot;/img/llvga-fulldemo.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If this isn’t enough to get your interest, then let me offer some other
capabilities found within the repository.  First, if you have the screen space
to run the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;simulator&lt;/a&gt; with a sub-window of
1280x1024 (&lt;code class=&quot;highlighter-rouge&quot;&gt;main_tb&lt;/code&gt; with no arguments), you can see the results of a more
typical &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt;
implementation, shown (shrunken) in Fig. 2 on the left.&lt;/p&gt;

&lt;p&gt;The third demonstration within the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA
simulation&lt;/a&gt; repository is that of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; input
simulator, such as might come from a camera.  This simulation is built as the
&lt;code class=&quot;highlighter-rouge&quot;&gt;simcheck&lt;/code&gt; executable within the same &lt;code class=&quot;highlighter-rouge&quot;&gt;bench/cpp&lt;/code&gt; directory.  To run it,
simply type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;simcheck&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before, you can kill this simulation by either Ctrl-C or clicking the close
button on the window.&lt;/p&gt;

&lt;p&gt;What does this input/camera simulator do?  It creates a
&lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; inputs to a design.  It
creates these inputs from a input image obtained from the top left corner
of your screen.  You can then process that input within your
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilated&lt;/a&gt;
Verilog design to your hearts content.
Alternatively, you can send the inputs from the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; input simulator directly
into the regular &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulator&lt;/a&gt; to
see it on the screen.&lt;/p&gt;

&lt;p&gt;What’s really fun about this camera simulator is when you overlap the output
window with the camera “input” area, you can get some really neat effects,
such as are shown in Fig 3. below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3. The output from the VGA input simulator fed directly into the simulation window&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-camsim.png&quot;&gt;&lt;img src=&quot;/img/llvga-camsim.png&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this image, the window at the top left is the same
&lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulation&lt;/a&gt; output display program
shown in Fig. 1.  What’s different is the second window just to the right and
below it.  This is the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulation&lt;/a&gt;
output that just reflects the source information to the simulated output.
The third “window” showing further to the right is the recursive effect
I was just mentioning.  In reality, there’s no “window” there, but just a
recreation of the top left 640x480 pixels of the image.&lt;/p&gt;

&lt;p&gt;Shall we dig into the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;simulator&lt;/a&gt; a bit
and see how to use it?&lt;/p&gt;

&lt;h2 id=&quot;the-wiring&quot;&gt;The Wiring&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulator&lt;/a&gt; is based around the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; signaling standard.  Yes, I know this
is an older standard, but it’s also an easy one to learn from.  I do have an
HDMI simulator lying around that is very likely to eventually join this
repository …&lt;/p&gt;

&lt;p&gt;But back to &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; standard consists of five signals.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_vsync&lt;/code&gt;, the Vertical sync (pronounced “sink”), 1’bit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_hsync&lt;/code&gt;, the Horizontal sync (pronounced “sink”), 1’bit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_red&lt;/code&gt;, Red pixel component, up to 8’bits&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_grn&lt;/code&gt;, Green, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_blu&lt;/code&gt;, Blue, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The simulator accepts any color depth up to 8-bits per pixel.  Anything over 8-bits,
and it just pays attention to the top 8-bits.&lt;/p&gt;

&lt;p&gt;To use the simulator with your design, you need to build a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/main_tb.cpp&quot;&gt;test-bench wrapper&lt;/a&gt; around the design, tell the test bench what resolution
you want the window to have, and then call the video subsystem to pay attention
to video events while running your design.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;verilated.h&amp;gt;
#include &quot;Vyourdesign.h&quot;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;testb.h&quot;
#include &quot;vgasim.h&quot;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// ....
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;main_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Verilated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;test_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hres&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1280&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vres&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TESTBENCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// tb-&amp;gt;opentrace(&quot;vga.vcd&quot;);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, within the &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method of this test
bench&lt;/a&gt;,
the simulator is called with the output values from your
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt; core:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_grn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_blu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vyourdesign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s how you hook up your design, but what do those various signals
carry?&lt;/p&gt;

&lt;p&gt;Let’s consider the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_hsync&lt;/code&gt;, or horizontal sync, signal first.  In an old
fashioned cathode ray-tube monitor, this &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; signal would tell the underlying
ray subsystem when to quickly move back from the right side to the left side
of the screen.&lt;/p&gt;

&lt;p&gt;The signal itself is an active low signal, as shown in Fig. 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4. The Horizontal Synch Signal&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-hsync.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The signal should be high at all times except during the Horizontal Synch
pulse, where it is low.  Between the sync pulse and the data is the “back
porch”, and then again on the other side between the data and the sync is
a “front porch”.  While these may seem to be just idle clock periods, they
are actually carefully timed and required by the video subsystem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;The simulator&lt;/a&gt; needs to be told what these
time periods are.  This is done within the
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/videomode.h&quot;&gt;videomode.h&lt;/a&gt;
file, a portion of which is shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;VIDEOMODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 640 664 736 760 480 482 488 525
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;640 656 752 800&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;480 490 492 521&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;720 760 816 856&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;480 482 488 525&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;483&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;768 808 864 912&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;setline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;483 485 491 525&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here you’ll see that, internal to the simple WIDTHxHEIGHT video mode call,
horizontal and vertical video mode lines are set according to the old &lt;a href=&quot;https://en.wikipedia.org/wiki/XFree86_Modeline&quot;&gt;XFree86
modeline&lt;/a&gt; “standard”,
as illustrated in Fig. 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5. The four numbers within a mode line&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-counter.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first number is the number of valid pixels in the line, it counts from the
left to the width of the line.  Don’t be confused by Fig. 5 trying to show
the relationship of the sync line to the valid pixel data, the sync line
is high during this period.  The second number includes the additional
width of the front porch, but remains measured from the left edge.  The
third number adds the width of the sync, while the fourth number
is the total number of pixel clock intervals before the pattern repeats.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. A basic video image, showing both horizontal and vertical sync regions&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-twin-syncs.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The vertical sync mode is similar.  It also consists of the same intervals:
valid pixel (line) data, back porch, sync, and front porch.
The big difference is that instead of counting pixel clocks, the vertical mode
line counts horizontal lines.  Further, these horizontal lines are counted
from the beginning of the horizontal sync interval.  This yields to the
apparent discontinuity shown in Fig 6. on the right.  This discontinuity only
exists, however, because we’ve chosen to place the image at the top-left
of our coordinate system.  Had we started at the beginning of the horizontal
and video sync joint intervals, there would be no apparent discontinuity.&lt;/p&gt;

&lt;p&gt;Fig. 6 should also give you a good idea of how to start building a basic video
system: with horizontal and vertical position counters.  Let’s try that,
and see how far we can get!&lt;/p&gt;

&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/design.v&quot;&gt;demonstration
design&lt;/a&gt;
within this &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA
simulation repository&lt;/a&gt; consists of
a couple basic components, as shown in Fig. 7.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. Demonstration Video Design Components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-demofiles.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s quickly walk through the pieces of this design, and then spend some
time digging into the
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;llvga.v&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;vgatestsrc.v&lt;/a&gt;
components.&lt;/p&gt;

&lt;p&gt;The overall design consists of both a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/memdev.v&quot;&gt;memory
device&lt;/a&gt;
and a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;video frame
controller&lt;/a&gt;.
We’ve &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;discussed this memory device
before&lt;/a&gt;, so we need not
discuss it again here.  The
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;
is controlled by a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone&lt;/a&gt;
&lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;master&lt;/a&gt;
and video controller,
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;wbvgaframe.v&lt;/a&gt;.
Within this controller, there’s
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;a component&lt;/a&gt;
to read frame-data from the memory using the memory/bus clock,
and then to cross clocks via an
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;
to the pixel clock domain.  Once in the pixel clock domain, pixels
are then fed to the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;low level VGA signal
generator&lt;/a&gt;.
Internal to this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower level VGA signal
generator&lt;/a&gt;
is the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test-source
generator&lt;/a&gt;
that produced the image shown in Fig 1 above.&lt;/p&gt;

&lt;p&gt;While we’ve discussed many of these components on the blog before,
such as the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;, the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;wishbone bus&lt;/a&gt;,
and the
&lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous FIFO&lt;/a&gt;,
there are several components of this design that we haven’t discussed before.
Today, let’s examine the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower-level VGA
generator&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test-bar signal
generator&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8: Lower Level VGA Controller Ports&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-ports.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower-level VGA signal
generator&lt;/a&gt;
is designed to interact with the pixel generation subsystem
(&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;wbvgaframe.v&lt;/a&gt;),
and to produce the necessary video signal outputs in order to generate the
images above.  Here you can see in Fig. 8 the ports necessary to do this.
We’ve already discussed the ports on the right above, albeit under slightly
different names.  The new ports are those on the left.  While the reset
port might be obvious, the others might need a bit more explaining.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_pixclk&lt;/code&gt;  I normally name all my incoming clock signals &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;.  This
has become habit forming to me.  Not so with this module.  In the case
of many video signals, the pixel clock runs at a different rate from the
main system clock.  Hence, I’ve reserved &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt; for other parts of my
design.  This component acts upon the pixel clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_pixclk&lt;/code&gt;, alone.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_test&lt;/code&gt; is a flag that I use to tell the controller to produce the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;test bars output&lt;/a&gt;
I demonstrated in Fig 1. above.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;i_test&lt;/code&gt; is not set, the controller
will source its pixels externally from &lt;code class=&quot;highlighter-rouge&quot;&gt;i_rgb_pix&lt;/code&gt;, otherwise it will
source the pixels from the internal &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;VGA test source
generator&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; is the first of three pipeline control signals used to help the
pixel generator, either
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;imgfifo.v&lt;/a&gt; or
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;vgatestsrc.v&lt;/a&gt;
in this design, know when to generate to pixels.
It functions very much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;!stall&lt;/code&gt; signal in the “simple
handshake” &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline strategy we presented
earlier&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Only, this signal is a little trickier than a negated stall signal.  The
pixel generator is expected to set up a pipeline filled with pixels
and then wait for this signal to go high.  Once this signal goes high,
pixel data will flow.  The pixel generator needs to be careful to &lt;em&gt;never&lt;/em&gt;
let the pixel feed buffer empty, or catestrophic things may happen.
(i.e., the display won’t show the image we want)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal is used to indicate that the last pixel in the
row has been consumed, and the pixel generator is free to flush any
line buffers and start over if it wishes to.&lt;/p&gt;

    &lt;p&gt;In this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/demo.v&quot;&gt;demonstration
design&lt;/a&gt;,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal is only used by the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test image
generator&lt;/a&gt;.
We’ll look at that further down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last pipeline indication signal is the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal.  This
signal is very much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal, save that it indicates the
end of the frame as well as the end of the line.  This signal is to be
true on the last pixel of the frame, and then only.  The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;demonstration frame
buffer&lt;/a&gt;
uses this signal to flush its buffers and start reading from the top of the
image.&lt;/p&gt;

    &lt;p&gt;In the old arcade days, this signal might create a “vertical refresh”
interrupt to signal the start of the vertical refresh period.  This
was a time when screen memory was not being read and so software
could quickly draw to the screen in a way that wouldn’t flicker.
Such “&lt;a href=&quot;https://en.wikipedia.org/wiki/Flicker_(screen)#Software_artifacts&quot;&gt;Flickering&lt;/a&gt;”
can be caused by a software update to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame
buffer&lt;/a&gt;, typically consisting
of both an erase operation and a redraw, taking place during the active
portion of the image, so that the user sees alternately the “erased”
portion and the newly drawn portion.  This can be fixed by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_buffering#Double_buffering_in_computer_graphics&quot;&gt;double
buffering&lt;/a&gt;,
so that the partially drawn image never ends up in the
live &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt;.
Doing so requires knowing when to swap buffers, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt;
signal will facilitate that request.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower-level VGA
generator&lt;/a&gt; may be
the simplest component of the entire display system:  &lt;em&gt;It’s just a pair of
counters!&lt;/em&gt;  So, let’s see how much this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;low-level VGA
controller&lt;/a&gt;
can accomplish from two separate counters.&lt;/p&gt;

&lt;p&gt;First, let’s accept as inputs all of the various components of the two
&lt;a href=&quot;https://en.wikipedia.org/wiki/XFree86_Modeline&quot;&gt;video mode lines&lt;/a&gt;.
These are simply passed through from the top-level
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/main_tb.cpp&quot;&gt;simulation&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hporch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vporch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as inputs to the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/rtl/demo.v&quot;&gt;top level
design&lt;/a&gt;, and
then down on to this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower level
controller&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we are going to allow these values to be practically anything within
this &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;lower level
controller&lt;/a&gt;,
they do require a particular order between them.  Specifically, they need
to be strictly increasing,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;i_hm_width  &amp;lt; i_hm_porch &amp;lt; i_hm_synch &amp;lt; i_hm_raw, and
i_vm_height &amp;lt; i_vm_porch &amp;lt; i_vm_synch &amp;lt; i_vm_raw&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and there is a minimum width and height.  When we get to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;,
we can use the following assumption to capture this required ordering.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;12&#39;h10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;12&#39;h10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will force the width to be at least ten pixels wide, likewise for
vertical.  The other three numbers of each mode line are also required
to be in strict increasing order.&lt;/p&gt;

&lt;p&gt;This allows us to create a simple counter to keep track of our horizontal
position.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A similar counter can be used to keep track of our vertical position.&lt;/p&gt;

&lt;p&gt;Well, it’s not quite that simple.  We also need to generate the horizontal
sync signal as well as our pipeline control signals.  The obvious signal
we could set within this same loop is the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal.  As discussed
above, this signal is true for one-clock only at the very last pixel of any
line.&lt;/p&gt;

&lt;p&gt;The next item to create in this block is a little less obvious.  This is the
&lt;code class=&quot;highlighter-rouge&quot;&gt;hrd&lt;/code&gt; signal.  We’ll use this in a bit to indicate a valid pixel, but we’ll
need to couple it with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;vrd&lt;/code&gt; signal from the vertical direction first.&lt;/p&gt;

&lt;p&gt;Put together, this expands our logic a bit more, but it’s still fundamentally
a counter–we just set two other signals within this block as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// First pixel is always valid
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can you still see the basic &lt;code class=&quot;highlighter-rouge&quot;&gt;hpos&lt;/code&gt; counter within there?&lt;/p&gt;

&lt;p&gt;Fig. 9 below shows a trace of this simple logic, focused at the end of the line.
For this trace, the line width was set to 640 pixels, hence &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt;
is true on pixel &lt;code class=&quot;highlighter-rouge&quot;&gt;639&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; drops on the first non-pixel: &lt;code class=&quot;highlighter-rouge&quot;&gt;640&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 9: End-of-line logic trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-hpostrace1.png&quot;&gt;&lt;img src=&quot;/img/llvga-hpostrace1.png&quot; alt=&quot;&quot; width=&quot;954&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In a similar fashion, Fig. 10 below shows the same trace, but zoomed out far
enough so that you can see a full between-line interval.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 10: Horizontal Sync trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-hpostrace2.png&quot;&gt;&lt;img src=&quot;/img/llvga-hpostrace2.png&quot; alt=&quot;&quot; width=&quot;956&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;During this interval,
you may notice that our valid pixel signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;, goes low before the
horizontal sync becomes active (low), and stays low for some period after
the sync becomes inactive again but before the valid pixels start up again.&lt;/p&gt;

&lt;p&gt;The vertical counter is similar.  The biggest difference is that the
vertical counter changes at the end of the horizontal front porch, just as
the horizontal sync signal becomes active.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Realistically, the new frame begins at the top
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// of the next frame.  Here, we define it as the end
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// last valid row.  That gives any software depending
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// upon this the entire time of the front and back
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// porches, together with the sync pulse width time,
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// to prepare to actually draw on this new frame before
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// the first pixel clock is valid.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps you noticed that we didn’t set &lt;code class=&quot;highlighter-rouge&quot;&gt;vrd&lt;/code&gt; above.  Since this signal is
so simple, it can quietly fit into its own block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;vrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;vrd &amp;amp;&amp;amp; hrd&lt;/code&gt; will always be true one clock before a valid pixel, as marked
by &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;.  We’ll call this pre-signal &lt;code class=&quot;highlighter-rouge&quot;&gt;w_rd&lt;/code&gt;, to indicate that we are using
combinatorial logic (i.e. a wire) for this purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vrd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll except the very &lt;code class=&quot;highlighter-rouge&quot;&gt;first frame&lt;/code&gt; from this calculation, just to make
certain we’ve given the pixel generator a chance to see the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt;
signal before starting.  Creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; signal is then just as simple
as registering this &lt;code class=&quot;highlighter-rouge&quot;&gt;w_rd&lt;/code&gt; signal on the next pixel clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a fashion similar to our &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal, we’ll create an
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal in case our pixel generation logic needs to do some
work to prepare for the next frame.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see these vertical signals together with our horizontal signals in
Fig. 11 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 11: Vertical Sync trace&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-vpostrace1.png&quot;&gt;&lt;img src=&quot;/img/llvga-vpostrace1.png&quot; alt=&quot;&quot; width=&quot;954&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; will only ever be true when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; is also
true: both are true on the last pixel of a line.  The difference, of course,
is that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; is only true on the last pixel of the last line.
We’ll use this property later to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally constrain&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Likewise, Fig 12 shows the same trace, but only zoomed out so that we can
see many lines at once.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig 12: Vertical Sync trace, showing many lines&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;/img/llvga-vpostrace2.png&quot;&gt;&lt;img src=&quot;/img/llvga-vpostrace2.png&quot; alt=&quot;&quot; width=&quot;956&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Not only can we see many lines at once, but Fig 12 also shows a full vertical
blanking interval, including the front porch, sync, and back porch.  You can
recognize these by noticing the relationship of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vsync&lt;/code&gt; to the valid data
marked by &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt;.  You can also see where the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal is placed
relative to the rest of the intervals: right at the last pixel of the entire
frame.&lt;/p&gt;

&lt;p&gt;If you’ve never dealt with video before, it really is just this simple: the
synchronization portion is nothing more than a pair of counters!  We’ve
added additional signals to indicate when line endings and frame endings
take place, but that’s really all there is to it.&lt;/p&gt;

&lt;p&gt;Since this is just that simple, verifying this component is also very simple.
Let’s discuss that next.&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-our-counters&quot;&gt;Formally Verifying our Counters&lt;/h2&gt;

&lt;p&gt;When I
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
a module, I like to think of that module in terms
of a “contract”.  This “contract” is sort of a black box description of
what I expect from the module.  In many ways the study of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verification&lt;/a&gt;
then becomes the study of how to answer the question, “what sort of &lt;em&gt;contract&lt;/em&gt;
is appropriate for what I’m building”?&lt;/p&gt;

&lt;p&gt;In this case, I’d first want to verify that I am creating the synchronization
signals as required.&lt;/p&gt;

&lt;p&gt;We can start with the horizontal sync.  Before the end of the front porch,
the sync should be inactive (high).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then between the end of the front porch and the end of the synchronization
section, the horizontal sync should be active (low).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, between the end of the synchronization period and the end of the
line period, the synchronization should be inactive (high).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This exact same logic applies to the vertical synchronization period as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Same thing for vertical
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wow, how simple could that be?&lt;/p&gt;

&lt;p&gt;Have we fully constrained our video controller?  Not quite.&lt;/p&gt;

&lt;p&gt;We still need to make certain that the horizontal position is properly
incrementing.  (But the code says it is …)  For this, let’s just check the
past value and contrain the current one based upon that.  If the past value
is at or beyond the last pixel of the line, then we should be starting on
a new line on this clock.  Otherwise, we should be incrementing our horizontal
pointer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The vertical counter is similar, save that it only increments at the beginning
edge of the horizontal sync period, otherwise it should be the same in all
cases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two constraints, however, aren’t enough to keep the two counters within
their limits.  To do that, we need to insist that they are less than the
proper raw widths.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Without these last two assertions, the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction step&lt;/a&gt;
might start our design way out of bounds.  Indeed, you should always
assert that any state variables are within bounds!  That’s the purpose of
these last two assertions.&lt;/p&gt;

&lt;p&gt;At this point, we’ve created enough assertions to guarantee that a monitor
capable of synchronizing to this signal will do so.&lt;/p&gt;

&lt;p&gt;Everything else is icing on the cake.&lt;/p&gt;

&lt;p&gt;We first have our &lt;code class=&quot;highlighter-rouge&quot;&gt;o_rd&lt;/code&gt; value which will signal to the part of the design
that sends us pixels that we just accepted a pixel.  This value should be
true during any valid pixel period.  We can check this simply with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That leaves two other signals: the newline signal and the new frame
signal.  The newline signal is true on the last clock period of any line.
We can assert that here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newframe&lt;/code&gt; signal needs to be true at the same time as
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt;, but only on the last valid line.  Otherwise this should be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is one catch in all of this simplicity: our assertions above will
fail if the video mode is changed.  This I found annoying, since I had
written the code above to be self correcting upon any mode changes, yet I
struggled to find a way to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
this code as self correcting–the
solver just kept changing the mode line every chance it could.  As a
compromise, I only check the above properties if the video frame is
stable.  To do that, I capture the video mode for the last clock, both
horizontal and vertical mode signals,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i_hm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_hm_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_porch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_synch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_vm_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_last_vmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_hmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_last_vmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_last_hmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I know these are stable when their values are the same as they were one clock
ago.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_stable_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_stable_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_vmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_hmode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While I could assume that the mode was always stable, I would like to make
this design able to change modes.  (The simulator cannot change modes, but
this portion of the design can.)  For this, I just insist that the modes
are identical unless the reset line is high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_stable_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can also hear some of you asking, why did I create &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_hmode&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_vmode&lt;/code&gt;?  Why not just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; operator?  Even better, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt; operator, short hand for &lt;code class=&quot;highlighter-rouge&quot;&gt;X == $past(X)&lt;/code&gt;, would perfectly describe
our situation.  Why not just say instead,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_hmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_vmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The answer is subtle, and reveals a bit about how
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; works.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(X)&lt;/code&gt; operator, though, requires
a clock.  Because of that, it isn’t evaluated until the next clock edge.
(This is why assertion failures for clocked blocks appear at the penultimate
clock edge.)&lt;/p&gt;

&lt;p&gt;Where this becomes a problem is when the design fails at the final clock
edge, because the assumption hasn’t taken effect yet.  By creating our own
version of &lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt; above using &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_hmode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_vmode&lt;/code&gt;, we can
force the mode to be stable on the last cycle–even before the rising edge
would evaluate a &lt;code class=&quot;highlighter-rouge&quot;&gt;$stable(X)&lt;/code&gt; operator.&lt;/p&gt;

&lt;h2 id=&quot;the-test-pattern-generator&quot;&gt;The Test Pattern Generator&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 13: Calculating a best color&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-srcmux.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s now turn our attention to creating the test pattern.  This
&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;generator&lt;/a&gt;
works by calculating a color for each line, and then selecting the right
color from among all of the line colors as shown in Fig. 13 on the right.&lt;/p&gt;

&lt;p&gt;Well, not quite.  Selecting from among 480+ line colors might be more logic
than I’d want to use for a simple &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test pattern
generator&lt;/a&gt;.
Here’s the secret: colors are generated in bands.&lt;/p&gt;

&lt;p&gt;What may not be obvious is that the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test pattern
generator&lt;/a&gt;
segments the
screen into 16x16 sections.  Determining what color to generate is mostly
just a matter of determining which 16x16 location the current pixel is within.
Note that these may not have been the proportions of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_card&quot;&gt;original test
cards&lt;/a&gt;
from which these images are (loosely) drawn–but they make the math easy for us
and so we use them here.&lt;/p&gt;

&lt;p&gt;Calculating the section at issue comes back to the same issue of counters
again.  The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test pattern
generator&lt;/a&gt;
uses one counter for horizontal position, and another for vertical–just like
the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/llvga.v&quot;&gt;low-level
controller&lt;/a&gt;
we just examined above.&lt;/p&gt;

&lt;p&gt;Let’s start by following the horizontal counter, &lt;code class=&quot;highlighter-rouge&quot;&gt;hpos&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On every new line, this counter resets to zero.  Further, on every valid
pixel, the counter moves forward.  There’s no checking whether or not the
counter has reached the full width, since that is done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_newline&lt;/code&gt;
flag.&lt;/p&gt;

&lt;p&gt;What may be curious, though, are the two values &lt;code class=&quot;highlighter-rouge&quot;&gt;hbar&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hedge&lt;/code&gt;.
These variables are associated with dividing the screen into sixteen horizontal
regions.  Specifically, the idea is that &lt;code class=&quot;highlighter-rouge&quot;&gt;hbar&lt;/code&gt; is the current horizontal pixel
location times 16 and divided by the width.&lt;/p&gt;

&lt;p&gt;The problem is division within an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; is hard.  How can it be avoided?&lt;/p&gt;

&lt;p&gt;The first step towards avoiding this is to divide the width by sixteen.
This is easily done by right shifting the screen width by four.  We can
then count bins across the screen, where &lt;code class=&quot;highlighter-rouge&quot;&gt;hedge&lt;/code&gt; is the end of the next bin.&lt;/p&gt;

&lt;p&gt;If you look at Fig. 14 below, you can see how well our division matched
the screen.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: center&quot;&gt;&lt;caption&gt;Fig. 14: Dividing the image width into 16&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-testhdiva.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We can now calculate the colors for the long top bars using a basic case
statment.  If we are in the first position, output a black, otherwise if
we are in the second position, etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_yellow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_yellow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The actual colors are defined as constants earlier in the file.&lt;/p&gt;

&lt;p&gt;After the main bars at the top,
the alternate colored bars beneath them and lining up with them,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_magenta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_cyan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;as well as the thicker and wider bars underneath those.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purplish_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purplish_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purplish_blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkest_gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dark_gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkest_gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logic for all three sections is identical at this point.&lt;/p&gt;

&lt;p&gt;You may also wish to note that, just like we did with the ALU, we are
calculating color bars even when we’ll be outputting the color from a
different bar.  We’ll do a downselect in a moment to get the right color
for each row.&lt;/p&gt;

&lt;p&gt;Indeed, when it comes to generating row information, the logic is very
similar to the horizontal logic above.  We divide the screen by sixteen,
and keep track of which sixteenth of the screen we are within at any
given time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;1&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yedge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The biggest difference between this logic and the horizontal logic is the
&lt;code class=&quot;highlighter-rouge&quot;&gt;dline&lt;/code&gt; item.  This is used to keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_newline&lt;/code&gt; signals following the
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_newframe&lt;/code&gt;, but before the first line of the image, from adjusting our
counter.  Perhaps you’ll recall from Fig. 12 above that the horizontal sync’s,
and so the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_newline&lt;/code&gt; signal, continued even during the vertical blanking
period.  &lt;code class=&quot;highlighter-rouge&quot;&gt;dline&lt;/code&gt; above helps us avoid counting lines during this period.&lt;/p&gt;

&lt;p&gt;You can see how well we did this in Fig. 15 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 15: Dividing the image vertically into 16 parts&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-testvdiv.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We can then determine the final outgoing pixel by selecting on which sixteenth
of the image vertically we are on.  This is captured by the &lt;code class=&quot;highlighter-rouge&quot;&gt;yline&lt;/code&gt; value
we just calculated above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Long top bar
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Narrow mid bar
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Thick/wide bars
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fatbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Gradient line
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a final step, we place a white border around our image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&#39;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That just about explains everything!  The only thing we’ve left out is the
gradient sections.&lt;/p&gt;

&lt;p&gt;The gradient sections were a bit more challenging.  To do them properly, the
image needed to be fully divided, so that a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; would smoothly
go from zero to overflow as it crossed from one edge of the image to another.
This means that we need to add to &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; a value equal to one divided by the
image width on every clock tick.  Well call this the step size, &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we knew what &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt; was, the logic would be as simple as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_rd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;FRACB&lt;/code&gt; bits in width, then &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt; needs to be
set to &lt;code class=&quot;highlighter-rouge&quot;&gt;2^FRACB / width&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ouch!  Divides are hard in digital logic.  Do we really have to do a divide?&lt;/p&gt;

&lt;p&gt;Can we cheat instead?  In this case, we certainly can!&lt;/p&gt;

&lt;p&gt;Let’s check at the end of every line how close we came.  If we went too far,
then let’s lower &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;, otherwise if &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; didn’t go far enough, we’ll
increase &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;.  It’s a basic control loop solution, and it will take
roughly &lt;code class=&quot;highlighter-rouge&quot;&gt;2^FRACB/width&lt;/code&gt; lines to converge (remember, there are &lt;code class=&quot;highlighter-rouge&quot;&gt;FRACB&lt;/code&gt; bits
in our &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt;.  In other words, we’ll converge within about a
hundred lines for 640x480 resolution, or about 64 lines for a 1280x1024
resolution..  This is usually enough to hide the fact that the divide hasn’t
converged until the time that the value is needed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16: Dividing the image horizontally in 16&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/llvga-testhdivb.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So, here’s the code for the divide:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Start over if the width changes
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_newline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// On the newline, our hfrac value is whatever it ended up
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// getting to at the end of the last line
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If we didn&#39;t get far enough to the other side,
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// go faster next time.
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// If we went too far, and so wrapped around
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// then don&#39;t go as far next time
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how we just increment or decrement &lt;code class=&quot;highlighter-rouge&quot;&gt;h_step&lt;/code&gt; based upon how close
we got to the right answer at the end of the line.&lt;/p&gt;

&lt;p&gt;Now that we have this fractional counter that wraps at the line width,
we can calculate gradient values for our gradient sections.  We’ll set the
output (again) depending upon which sixteenth of the horizontal we are in.
Only this time, we’ll use the top four bits of this fractional counter
to determine the section.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_pixclk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you get past this &lt;code class=&quot;highlighter-rouge&quot;&gt;FRACB-4&lt;/code&gt; bit, everything should be incrementing
nicely from the left of the interval to the right.&lt;/p&gt;

&lt;p&gt;Our first actual section is red.  For this color, we want red pixels ranging
from zero to maximum, and then no blue or grean.  (&lt;code class=&quot;highlighter-rouge&quot;&gt;mid_off&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h0&lt;/code&gt;).
During this section, we also know that &lt;code class=&quot;highlighter-rouge&quot;&gt;hfrac[FRACB-5:0]&lt;/code&gt; will be slowly
counting from zero to overflow as well.  If we add a higher order bit,
we can get this gradual counter to gently cross two intervals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Red
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// First gradient starts with a 1&#39;b0
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Second repeats, but starting with a 1&#39;b1
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;BPC&lt;/code&gt; here is the number of “bits-per-pixel”)&lt;/p&gt;

&lt;p&gt;A black section, one sixteenth width in length, separates the gradient
sections.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Green is roughly the same as red, save only that the first color (red) and the
last color (blue) are set to zero.  Blue is set similarly.  Indeed, if you
understand how we did red above, these last two colors are really just the
same thing repeated for a different color.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Green
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Blue
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;h7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;h9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final section is the gray gradient.  This one follows the same logic,
only we wish to spread it across four regions instead of two.  Hence, we’ll
force the top two bits to increment across four steps, and use what’s
left of the fractional counter to gradually increment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Gray
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;hd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hfrac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRACB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;4&#39;he&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endcase&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it for the &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/vgatestsrc.v&quot;&gt;test
design&lt;/a&gt;.
Did you notice the format of the logic?
In general, everything but the &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; cordinate based variables reset on an
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_newline&lt;/code&gt;.  Colors were then chosen for each horizontal region, and then a
(nearly final) color choice was made by examining which vertical region
we were in.  The last step was to add a white border around the screen,
just to make certain we have our timing right.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Success with video really depends upon your ability to debug your logic.
The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulator&lt;/a&gt; can make that easier,
by allowing you to “see” how your logic actually creates images.  Not only
that, but because it is a simulation, you can get access to every wire
and every flip-flop within it.  Want to see how fast the division
converges?  Want to see what the various video signals look like in
practice?  Or stop halt a simulation on an error?  The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA
simulator&lt;/a&gt; can do all that and more.&lt;/p&gt;

&lt;p&gt;We also walked through several pieces of a demonstration video design.
We discussed the generation of the various video signals, and even
walked through how they could be used to create a video test-signal.
That said, in many ways we didn’t walk through the critical piece of code
required for any &lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt; based
design–&lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;the code&lt;/a&gt;
that reads from the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Framebuffer&quot;&gt;frame buffer&lt;/a&gt; in memory
and sends a valid pixel to our low level controller.  This, however,
we’ll need to leave for next time.&lt;/p&gt;

&lt;p&gt;I know that some have said that
&lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt; is an outdated standard.
Everything is moving to &lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt; and beyond.
Unlike &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt; is a bit more difficult
to generate and work with.  There are more steps to it and more protocol
missteps that can be made.  That said, when I get to the point where I’m ready
to post the HDMI simulator, you’ll see that it isn’t all that much more
complicated than the &lt;a href=&quot;https://en.wikipedia.org/wiki/VGA_connector&quot;&gt;VGA&lt;/a&gt;
simulator we’ve just looked through.  Indeed, the same could be
said of the MIPI based CSI-2 simulator I have …&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For now we see through a glass, darkly; but then face to face: now I know in part; but then shall I know even as also I am known. (1Cor 13:12)&lt;/em&gt;</description>
        <pubDate>Thu, 29 Nov 2018 00:00:00 -0500</pubDate>
        <link>https://zipcpu.com/blog/2018/11/29/llvga.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/11/29/llvga.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Accessing the registers of a SoC+FPGA</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A DE-10 Nano&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/de10-deskpic.jpg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, &lt;a href=&quot;/blog/2018/02/09/first-cyclonev.html&quot;&gt;I wrote about my experiences with Terasic’s
DE10-Nano&lt;/a&gt;, a design
based around Intel (formerly Altera)’s &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;SoC+FPGA
Cyclone-V&lt;/a&gt;
design.  If you’ve never worked with designs like this, the terminology
typically separates the SoC
(i.e. an &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;) from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
with the terms Processing System (PS, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;)
and the Programming Logic (PL, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;These combined SoC+FPGA designs are an attempt to gain the best of both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
worlds.  By combining the two together, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
can control the logic taking place on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
This control includes being able to load designs onto the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;,
and to then control those designs from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory-mapped I/O register&lt;/a&gt;.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is in an ideal position to control peripherals and their timing in detail.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is also in an ideal position to be a data accelerator.
Both of these applications require that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
be able to communicate with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
at high speed.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 24px&quot;&gt;&lt;caption&gt;Fig 2. Communications channels between ARM and FPGA&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-axi-interconnects.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;Cyclone-V&lt;/a&gt;
chip on the &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;DE-10&lt;/a&gt;,
like other SoC+FPGA designs, has a high speed data path directly from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
and again in the reverse direction as shown in Fig 2.
These will form the topic of this article.&lt;/p&gt;

&lt;p&gt;Today, I’d like to focus on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
side of this connection–the side where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; is
controlled by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
We’ll ignore, and postpone for a later day, all of the details
associated with building the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
half of this connection, and focus solely on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
side of this connection.  For now, I’ll only say of that connection that
I &lt;em&gt;highly&lt;/em&gt; recommend you
&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formally verify&lt;/a&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
side since it can be &lt;em&gt;so&lt;/em&gt; difficult to debug.&lt;/p&gt;

&lt;p&gt;Further, I’m going to walk through two examples that can be used
for this purpose.  The first should work well on any generic &lt;a href=&quot;https://en.wikipedia.org/wiki/Microcontroller&quot;&gt;microcontroller&lt;/a&gt;
with no &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management_unit&quot;&gt;memory management unit
(MMU)&lt;/a&gt; support,
and the second should work not only for the
&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;DE-10&lt;/a&gt;,
but also for any &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
memory mapped interface including
&lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-7000.html&quot;&gt;Zynq&lt;/a&gt;
designs, the
&lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;,
the &lt;a href=&quot;https://beagleboard.org/bone&quot;&gt;Beagle Bone&lt;/a&gt;, and even other
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
based &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory-mapped I/O
register&lt;/a&gt; designs.&lt;/p&gt;

&lt;p&gt;I should pause to note that there’s a discussion to be had regarding whether
or not this code should be done within user space at all rather than in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_System&quot;&gt;Operating System&lt;/a&gt;.
There are strong arguments for both, so I’ll just leave that
discussion for another day.&lt;/p&gt;

&lt;p&gt;So, without further ado, shall we discuss how to get access to fixed-address
registers from within a design?&lt;/p&gt;

&lt;h2 id=&quot;fixed-addressing&quot;&gt;Fixed Addressing&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Fixed address&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-paddr.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For your simpler non-&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Microcontroller&quot;&gt;microcontroller&lt;/a&gt;
based designs, the interface is very straightforward and simple, though it
requires knowing about a part of the C language that isn’t usually used
outside of hardware programming: the
&lt;a href=&quot;http://www.drdobbs.com/cpp/volatile-the-mutithreaded-programmers-b/184403766/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;&lt;/a&gt;
keyword.&lt;/p&gt;

&lt;p&gt;Suppose you have an interface at a known address, &lt;code class=&quot;highlighter-rouge&quot;&gt;0xc045010&lt;/code&gt;, shown as the
“user pointer” in Fig 3. on the right.  Let’s pretend
that it’s a reference to a device controller that occupies four 32-bit words
in our address space.  A good example of this might be the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;WBUART&lt;/a&gt; serial port.  That peripheral has
four word-length registers controlling it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;WBUART_S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;u_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;u_fifo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;u_rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WBUART&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d like to be able to read from these registers within your own code.
To do that, you need a pointer to them.  The way to create a pointer
to a fixed address in C++ is,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WBUART&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WBUART&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc045010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s parse this line.&lt;/p&gt;

&lt;p&gt;At the most basic level, we have just described a pointer to a
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART&lt;/code&gt;&lt;/a&gt;
structure in memory, and we’ve named this pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;uart&lt;/code&gt; and given
it an initial address of &lt;code class=&quot;highlighter-rouge&quot;&gt;0xc045010&lt;/code&gt; to point at.&lt;/p&gt;

&lt;p&gt;Peeling the onion back one further, the &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; dictates that this pointer
references a constant location in the address space.  It cannot
change.  This is appropriate if ever the device in question will always have
the same address space location.  Hence, we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART *const uart&lt;/code&gt;.  In
this declaration, order matters.  &lt;code class=&quot;highlighter-rouge&quot;&gt;const WBUART *uart&lt;/code&gt; would have declared a
pointer to a constant &lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART uart&lt;/code&gt; structure.  That’s not what we want.  We
want &lt;em&gt;constant pointer&lt;/em&gt; to a structure of elements that isn’t necessarily
constant.&lt;/p&gt;

&lt;p&gt;The next part of this definition is the
&lt;a href=&quot;http://www.drdobbs.com/cpp/volatile-the-mutithreaded-programmers-b/184403766/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;&lt;/a&gt;
part.  This instructs the compiler that the value at this location in memory
might change apart from the program it is compiling changing it.&lt;/p&gt;

&lt;p&gt;To explain this, imagine you want to transmit a character.  In the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART&lt;/code&gt;&lt;/a&gt;
interface, the &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0100&lt;/code&gt; bit of the transmit register returns a status field
indicating whether or not the register is busy.  If this bit is set, the
transmitter is busy or the transmit queue is non-empty.  If this bit is clear,
then the interface is idle.  For this task, let’s wait until the interface
is idle and then write a byte out of the serial port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Wait for the transmit port to become available
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the character out the transmitter
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This sort of loop, waiting for something to happen, is called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;polling&lt;/a&gt;.
It is one of several ways to wait for an event within a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.
In this case, we are waiting for the
&lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WBUART&lt;/code&gt;&lt;/a&gt;
transmitter to become idle.&lt;/p&gt;

&lt;p&gt;A compiler might look at this code an notice that nothing within this
function is modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;uart-&amp;gt;u_tx&lt;/code&gt;.  It might then consider itself justified
in treating this value as a constant, and pulling it out of the loop.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Send the character out the transmitter
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This “optimized” implementation will only read from the peripheral register
once, and then either hang forever (if the interface is initially busy),
or move in.  This is clearly not what we want, since with this “optimized”
implementation we’ll never know when &lt;code class=&quot;highlighter-rouge&quot;&gt;uart-&amp;gt;u_tx&lt;/code&gt; changes!&lt;/p&gt;

&lt;p&gt;From the compiler’s standpoint, this optimization makes sense: you read the
value, and it doesn’t see anything changing it, so it only reads the value
from memory once.&lt;/p&gt;

&lt;p&gt;The compiler needs to be told that this value can change for reasons other
than the instructions it can examine within your code.  This is the purpose
of the
&lt;a href=&quot;http://www.drdobbs.com/cpp/volatile-the-mutithreaded-programmers-b/184403766/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;&lt;/a&gt;
keyword in our definition above.&lt;/p&gt;

&lt;p&gt;What about the &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; term?  This tells the compiler that only the code in
the current file will reference this value.  This keeps the compiler from
placing this constant value in global memory somewhere.  The address can
then be compiled into the object code as a fixed immediate value.&lt;/p&gt;

&lt;p&gt;For designing interfaces to match most simple SoC design components, this is
enough.  If on the other hand the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
has a &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management_unit&quot;&gt;MMU&lt;/a&gt;, like most
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/X86&quot;&gt;x86&lt;/a&gt; processors
(and more), then the fixed address may not be accessable to the program,
or it may be accessable at a different &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual
address&lt;/a&gt;.  In these cases,
the above approach will not work and you will need to get some help from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_System&quot;&gt;Operating System&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dealing-with-the-mmu---designing-the-interface&quot;&gt;Dealing with the MMU - Designing the Interface&lt;/h2&gt;

&lt;p&gt;Declaring a constant pointer value, such as we did in the last section, isn’t
sufficient to access memory in a system that permits a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual address
space&lt;/a&gt;.
In that case, every process might reference the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address&lt;/a&gt;
using
a different pointer value (&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual
address&lt;/a&gt;).&lt;br /&gt;
The trick in this case is
determining how to get a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual
address&lt;/a&gt;
that will map to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical addresses&lt;/a&gt; of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;peripheral registers&lt;/a&gt;
in question.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 24x&quot;&gt;&lt;caption&gt;Fig 4. I/O operations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-operations.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When &lt;a href=&quot;/blog/2017/06/29/sw-dbg-interface.html&quot;&gt;we built our debugging
bus&lt;/a&gt;, we used the
routines &lt;code class=&quot;highlighter-rouge&quot;&gt;readio(addr)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;writeio(addr,value)&lt;/code&gt; to access registers within
a traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
see Fig 4.  To read a register, one might write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a similar fashion, you could write to a register controlled by a &lt;a href=&quot;/blog/2017/05/22/a-vision-for-controlling-fpgas.html&quot;&gt;debugging
bus&lt;/a&gt;
by writing,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m going to try to maintain this interface (somewhat), although that’s
really more than is required when interacting with a SoC+FPGA.&lt;/p&gt;

&lt;p&gt;In the Intel SoC+FPGA design, there are a couple of memory regions that can
be mapped like this.  For the purpose of this example, let’s focus on the
light-weight interface, although aside from changing a couple of constants
in the design below, the result would be the same for any other shared
memory region, such as the heavy weight interface or the fixed
&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;ARM&lt;/a&gt;
internal peripheral registers.&lt;/p&gt;

&lt;p&gt;So let’s design the C++ header file necessary to work with such an interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef	LWMAP_H
#define	LWMAP_H
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;assert.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &quot;hps.h&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll call our interface &lt;code class=&quot;highlighter-rouge&quot;&gt;LWMAP&lt;/code&gt;, since it is going to map the lightweight
memory region of the
&lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;Cyclone-V SoC&lt;/a&gt;
on the
&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;DE-10 Nano&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;LWMAP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can look up in the
&lt;a href=&quot;https://www.intel.com/content/www/us/en/products/programmable/soc/cyclone-v.html&quot;&gt;Cyclone-V&lt;/a&gt;
&lt;a href=&quot;https://www.intel.com/content/www/us/en/programmable/documentation/sfo1410143707420.html&quot;&gt;device handbook&lt;/a&gt;, HPS-FPGA Bridges chapter,
the region of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical addresses&lt;/a&gt;
assigned to this lightweight
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory map&lt;/a&gt;.
This region ranges from &lt;code class=&quot;highlighter-rouge&quot;&gt;0xff200000&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0xff400000&lt;/code&gt;.  It references an
area within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
side of the design that the SoC portion of the chip can interact
with.  We’ll label the first address of this range the &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt; address,
and the number of addresses within this range the &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_SPAN&lt;/code&gt;.  We’ll also
define a third value, &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_MASK&lt;/code&gt;, that we can use to force an address to
be in this range–even if it is outside of the range.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;LW_REGS_BASE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;LW_REGS_MASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step will be to get a pointer that we can then later use to address
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address&lt;/a&gt; range.
We’ll place this pointer into the &lt;code class=&quot;highlighter-rouge&quot;&gt;m_base&lt;/code&gt; value above, and we’ll do it when
we instantiate or LWMAP object.  We’ll come back to the details of this in
a moment, since in many ways these details are the critical piece of this
whole post.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Fixed address terms&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-terms.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We’ll use the name &lt;code class=&quot;highlighter-rouge&quot;&gt;APPCODE_BASE&lt;/code&gt; to reference the location of our user
peripherals within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
address space.  In general &lt;code class=&quot;highlighter-rouge&quot;&gt;APPCODE_BASE&lt;/code&gt; will
lie between &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE+LW_REGS_SPAN&lt;/code&gt;.  This is one
of those values provided to my design from the &lt;a href=&quot;https://www.intel.com/content/www/us/en/programmable/products/design-software/fpga-design/quartus-prime/features/qts-platform-designer.html&quot;&gt;Intel Platform
Designer&lt;/a&gt;.
Since I chose the name AppCode for my design, short for the very generic
“application code”, the name of my application design is &lt;code class=&quot;highlighter-rouge&quot;&gt;APPCODE_BASE&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPCODE_BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first function will be to write to this &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory mapped I/O
region&lt;/a&gt;.
Given an address within this space and a value, let’s write the value to our
address.  Since &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; generates octet
addresses, we’ll need to shift our address right by two in order to get the
address of 32-bit word.  (&lt;a href=&quot;https://www.gcc.org&quot;&gt;GCC&lt;/a&gt; will optimize this
away.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The process of reading from a register within this &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory mapped I/O
region&lt;/a&gt; is nearly identical.
However, instead of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; to the register, we’ll just return the
value at that address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_MASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;av&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It might be nice to just simply write &lt;code class=&quot;highlighter-rouge&quot;&gt;pic_value = lwmap[R_PIC]&lt;/code&gt;.  This
requires a fairly trivial overload of the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sadly, these &lt;code class=&quot;highlighter-rouge&quot;&gt;writeio&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;readio&lt;/code&gt; operations are only so useful.  In many
ways they don’t feal like the natural way of accessing an interface.  For this
purpose, &lt;code class=&quot;highlighter-rouge&quot;&gt;lea(addr)&lt;/code&gt; calculates and returns the effective address of &lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt; so
it can be used without &lt;code class=&quot;highlighter-rouge&quot;&gt;writeio&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;readio&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPCODE_BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif	// LWMAP_H&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How would we use this interface?  In just about the same way we did before
when we were working with the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging
bus&lt;/a&gt;.
First, at the beginning of any application, we’d create an object
of class &lt;code class=&quot;highlighter-rouge&quot;&gt;LWMAP&lt;/code&gt;.  Then we could repeatedly read a register
from the interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txuart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// While busy
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_UART_TX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_UART_TX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, if we wanted to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;lea&lt;/code&gt; approach, we could simplify this code
further.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;txuart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbl_lwmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_UART_TX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uart_tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;R_UART_TX&lt;/code&gt; peripheral register is used here for illustration
purposes only.  Your design may, or may not, have an &lt;code class=&quot;highlighter-rouge&quot;&gt;R_UART_TX&lt;/code&gt; register
depending on whether or not you put one in there.&lt;/p&gt;

&lt;p&gt;Of these two approaches, &lt;code class=&quot;highlighter-rouge&quot;&gt;readio(addr)&lt;/code&gt; vs using &lt;code class=&quot;highlighter-rouge&quot;&gt;lea(addr)&lt;/code&gt;, I’m torn between
which I like more.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;lea(addr)&lt;/code&gt; approach is simpler to read, while the
&lt;code class=&quot;highlighter-rouge&quot;&gt;readio(addr)&lt;/code&gt; is easier to use if you want to run your software on a design
within a Verilator simulation.&lt;/p&gt;

&lt;p&gt;This is what we want to accomplish: the ability to read or write
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory mapped I/O&lt;/a&gt;
registers from within a process running in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual address space&lt;/a&gt;.
The only question remaining is, how do we set this up in the first place?
That’s the topic of the next section.&lt;/p&gt;

&lt;h2 id=&quot;implementing-the-interface&quot;&gt;Implementing the interface&lt;/h2&gt;

&lt;p&gt;The secret sauce to making this entire design work lies in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;LWMAP&lt;/code&gt; constructor that we just glossed over above.  Let’s take a moment
to look through and understand it now.&lt;/p&gt;

&lt;p&gt;We’ll skip past some useful header includes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;assert.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// hps.h is built by Intel&#39;s sopc-create-header-files program
// It defines some of our constants for us.  You may or may not
// need it in your design.
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;hps.h&quot;
#include &amp;lt;time.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;lwmap.h&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that out of the way, we can build our constructor method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This constructor will depend upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mem&lt;/code&gt; interface within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux&quot;&gt;Linux&lt;/a&gt; system.  This interface will
give us access to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;raw physical address
space&lt;/a&gt;.  Hence,
we’ll start by opening it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/dev/mem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_SYNC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ERROR: could not open &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/dev/mem&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. Accessing a memory mapped peripheral using a virtual address&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/socfpga-vaddr.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Our next and critical step will be to map this “file”, that is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address space&lt;/a&gt;
device of the system, into a region of memory within our
process.  In our case, that memory starts at &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt;
and continues for &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_SPAN&lt;/code&gt; addresses.  We’re creating a shared memory
map, so other processes can use this memory as well (watch out for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrent_computing&quot;&gt;concurrency issues&lt;/a&gt;!),
and we’re mapping our file (i.e. the memory) based upon the file descriptor
&lt;code class=&quot;highlighter-rouge&quot;&gt;m_fd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is done with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mmap&lt;/code&gt; system call&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROT_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROT_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;MAP_SHARED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This gives us an address, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_base&lt;/code&gt;, that we can then use to reference the
&lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_BASE&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical
address&lt;/a&gt;.
Offsets from that address, up to &lt;code class=&quot;highlighter-rouge&quot;&gt;LW_REGS_SPAN&lt;/code&gt; in
distance, will continue to map to this space.&lt;/p&gt;

&lt;p&gt;The last step is to check for errors, and exit if this operation failed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_FAILED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ERROR: mmap() failed, &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you are all done with this interface and no longer need access to any
of the peripheral registers from within your application, you can release
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;memory mapped region&lt;/a&gt;.
and close the file descriptor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LWMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;munmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LW_REGS_SPAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ERROR: munmap() failed, &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the basic concept: &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;map&lt;/a&gt; a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;peripheral&lt;/a&gt;
residing at a &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_address&quot;&gt;physical address&lt;/a&gt;
onto a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_address_space&quot;&gt;virtual page&lt;/a&gt;
within your processes address space, and then access it like
you would any other variable.  Writes to that address will write to the
peripheral, and reads will read from it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Normally, I focus on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
issues when designing in Verilog.  Today’s post has been a bit different.  It
represents the other half of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
processing world.  If you want to access an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
core via a &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory-mapped_I/O&quot;&gt;memory-mapped I/O
register&lt;/a&gt; from C or C++,
you’ll need one of the techniques mentioned above.&lt;/p&gt;

&lt;p&gt;While I’d like to say that this process is simply and easy, I originally learned
it by word of mouth, and then later struggled to find this information when
I looked for it.  Since this information is so important for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;+&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
designs, I’ve chosen to include it here.&lt;/p&gt;

&lt;p&gt;Before we leave this topic, though, let me just ask: Did you catch the
reference to how software could be written to run on both the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
connected to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
as well as from
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;?
That will be important if you ever need to work with a design like this.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Salt is good: but if the salt have lost his savour, wherewith shall it be seasoned?  It is neither fit for the land, nor yet for the dunghill; but men cast it out. He that hath ears to hear, let him hear.  (Luke 14:34-35)&lt;/em&gt;</description>
        <pubDate>Sat, 03 Nov 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/11/03/soc-fpga.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/11/03/soc-fpga.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Taking a look at the TinyFPGA BX</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The TinyFPGA BX&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/TinyFPGA-BX.png&quot; alt=&quot;&quot; width=&quot;202&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, I wrote a &lt;a href=&quot;/blog/2017-12/16/max1k.html&quot;&gt;review of the MAX-1000 FPGA board&lt;/a&gt; sold by
&lt;a href=&quot;https://www.trenz-electronic.de/en&quot;&gt;Trenz&lt;/a&gt;.  Today, I’d like to share my thoughts on another small &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
development board: the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; board.&lt;/p&gt;

&lt;p&gt;If you’ve paid attention to the boards I like to purchase, I have a particular
love for the smaller &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards.  Examples include the
&lt;a href=&quot;http://www.xess.com/shop/product/xula2-lx25&quot;&gt;XuLA2-LX25&lt;/a&gt;,
&lt;a href=&quot;http://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod S6&lt;/a&gt;,
and the &lt;a href=&quot;/blog/2017-12/16/max1k.html&quot;&gt;MAX-1000&lt;/a&gt;.
These boards have all pin-holes for connections, running around the edges of
the board.  As a result, they either have very few peripherals, or these
boards are rife with possibilities and just waiting for a fun electronics
project.  Your choice.&lt;/p&gt;

&lt;p&gt;That said, this is probably a character flaw on my own part, because I’ve
never been comfortable with a soldering iron.  In reality, I shouldn’t be
so concerned.  At the extremely low cost of these small boards–and
particularly the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA
BX&lt;/a&gt;, I can afford a soldering failure,
or two, or perhaps even twenty, and I would quickly learn to be a better
engineer as a result.&lt;/p&gt;

&lt;p&gt;But let’s dig into the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, and
see what we can do with something like this special board.&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-bx&quot;&gt;TinyFPGA BX&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; is a bare bones
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
board.  And, when I say bare bones, that’s
exactly what you have.  The board contains:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;a href=&quot;http://ww1.microchip.com/downloads/en/DeviceDoc/20005625B.pdf&quot;&gt;ultra low power 16MHz clock MEMs
oscillator&lt;/a&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;http://www.adestotech.com/wp-content/uploads/DS-AT25SF081_45.pdf&quot;&gt;1MB SPI flash, capable of QSPI
mode&lt;/a&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A power LED and a user controlled LED, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A reset button to reload the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; from &lt;a href=&quot;}/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A USB connection for programming the board&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An iCE40 LP8k FPGA.  This FPGA has 7680 4-LUTs, and is supported by a fully
open source toolchain consisting of &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;, &lt;a href=&quot;http://www.clifford.at/icestorm&quot;&gt;ice-storm&lt;/a&gt;, and now &lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;NextPNR&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This iCE40 also has 16kB of block RAM.&lt;/p&gt;

    &lt;p&gt;When I tried to place the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on this board, I quickly discovered I’d
never be able to use all of that blockRAM for &lt;a href=&quot;/about/zipcpu.html&quot;&gt;my CPU&lt;/a&gt;.  Since the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
uses block RAM for more than one purpose (RAM, CPU registers, serial port
FIFO, etc.), this effectively limited the size of the block
RAM device available for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to 8kB.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;Oh, I almost forgot, one of the great strengths of the board is that it has
24 digital I/O’s with which you can do whatever with.  These I/O’s are brought
out to pins on the edge of the board.  Indeed, the strength of the board, as
in other boards of this minimalist variety, lies in what you can do with these
I/O’s.&lt;/p&gt;

&lt;p&gt;What really sets the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; apart,
though, is how it handles the USB port.&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-usb&quot;&gt;TinyFPGA USB&lt;/h2&gt;

&lt;p&gt;Most of the programmable &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards I have include an &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.dpf&quot;&gt;FTDI
FT2232H&lt;/a&gt;
chip connected to the USB port.  This chip contains all the hardware necessary
to both program the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, and to connect a basic serial port from your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design to your host computer.&lt;/p&gt;

&lt;p&gt;Not so with the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;.  This is perhaps the biggest thing that sets the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; apart from other &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; solutions: &lt;em&gt;it has no auxilliary chip for
dealing with the USB&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Instead, the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; requires &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design logic to communicate over the USB
port–if at all.&lt;/p&gt;

&lt;p&gt;I’ll be honest, before I discovered the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;, I thought it was impossible
to program an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; to communicate over the USB in a raw fashion like that.
The &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt; proves me wrong.&lt;/p&gt;

&lt;p&gt;Here’s how this works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When you power up the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;, it immediately loads
an initial “&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;”
design onto the board–much like a lot of microcontrollers, such as the PIC.
This is not your user design.  Instead, this is a design that will either
load your design, or communicate with the board over USB, and so allow you
to write a user design to the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Fig 2. on the right shows the basic
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory segregation.
The first 165kB is used by this USB enabled boot-loader, the next 165kB
is used  by the user design, and the rest of the flash is available to your
design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. Flash Memory by the Section&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tinyfpga-flash-layout.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Using the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-B-Series/tree/master/programmer&quot;&gt;TinyFPGA BX python
tools&lt;/a&gt;,
you can communicate with this &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;
and load your design into the next 165kB of
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, when you are ready and with the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;
plugged in, a USB command can be sent to the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; to cause it to switch to the user design.
This uses the iCE40 WARMBOOT primitive to cause the iCE40 to load a
new design from a non-zero address within &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory.&lt;/p&gt;

    &lt;p&gt;Once complete, your user design starts running.  If your design doesn’t
have USB capability within it, then you won’t have USB connectivity again
until you restart the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ever after, the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; will load your design after waiting a second or
two on startup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To return to the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; mode, you either need to press the reset button,
pull power from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, or
issue your own command to the WARMBOOT
primitive from within your own design to cause the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; to
reload itself from the zero address.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this is to say that the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; doesn’t really
provide the same functionality that the &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.dpf&quot;&gt;FTDI
chip&lt;/a&gt;
did.  Under this design concept, you cannot load a design onto the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; without also loading it onto the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; first.
There is no usable JTAG port to directly load the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; apart from
loading it into the &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;,
or to debug the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
using vendor tools.  Further, if you want a USB console port to your board,
then you may need to design and and add it yourself.&lt;/p&gt;

&lt;p&gt;It’s a pretty neat design concept.  Better yet, it’s all open source!  You can
look up how the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;does
it&lt;/a&gt;, and then modify
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;that design&lt;/a&gt;
for your own purposes.&lt;/p&gt;

&lt;h2 id=&quot;practical-consequences&quot;&gt;Practical Consequences&lt;/h2&gt;

&lt;p&gt;There are, however, some practical consequences of both the design concept
and the hardware on the board.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Because loading your design onto the board requires a design already loaded
onto the board, you’ll need to be careful not to erase, overwrite, or
otherwise damage the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; design.&lt;/p&gt;

    &lt;p&gt;If you do, you haven’t quite bricked your board.  However, you will then
be stuck trying to reload the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; design back onto the board using
the SPI pads (not pins, nor pin holes, but pads) on the back of the board.&lt;/p&gt;

    &lt;p&gt;While this may sound scary, the reality is that if you are going to be
soldering or otherwise wiring this board into your own project somewhere,
then you already have the skills to do this–even if it is a hassle.
Indeed, if you look at the underside of the board, you’ll be able to see
small pin-prick indents in the pads there, showing you where pins were used
to connect to the design to load the &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; initially.&lt;/p&gt;

    &lt;p&gt;If this is still more than you bargained for, then &lt;a href=&quot;https://www.tindie.com&quot;&gt;Tindie&lt;/a&gt; sells a &lt;a href=&quot;https://www.tindie.com/products/loglow/tinyfpga-bx-breakout-revision-a&quot;&gt;breakout
board&lt;/a&gt;
for the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; for only $11 that should give you access to these
SPI pins for this purpose as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to USB enable your own design, there are some consequences.
First, the USB &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; requires about 1k LUTs out of a board containing
only 7.6k LUTs in the first place.  Placing this &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;, or other USB
design, into your &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design will limit what you can do with your own
design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The really ugly part of this setup is that neither
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;nextpnr&lt;/a&gt; nor
&lt;a href=&quot;https://github.com/YosysHQ/arachne-pnr&quot;&gt;arachne-pnr&lt;/a&gt;
support multiple clock timing-driven placement (yet), nor does the
&lt;a href=&quot;https://github.com/cliffordwolf/icestorm/tree/main/icetime&quot;&gt;icetime timing checker&lt;/a&gt; within the
&lt;a href=&quot;https://www.clifford.at/icestorm&quot;&gt;icestorm toolkit&lt;/a&gt;.  Think this through.
The USB design used by the bootloader runs at 48MHz.  It is very much wed
to this speed, and it would be difficult to change it.  If your user design
doesn’t run at 48MHz, you’ll be stuck either using the proprietary
tool-chain or waiting for dual-clock support in
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;nextpnr&lt;/a&gt;.
(&lt;a href=&quot;https://github.com/YosysHQ/arachne-pnr&quot;&gt;Arachne-pnr&lt;/a&gt;, though maintained,
is no longer under active development.)&lt;/p&gt;

    &lt;p&gt;Just to give you a feel for timing, my own
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; runs at 100MHz on a Xilinx
Artix-7.  &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;It runs at 80MHz on a
Spartan 6&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;It runs at 50MHz on
an iCE40 HX8k&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;It runs at 25 MHz on
the iCE40 LP8k&lt;/a&gt; found within the
&lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;.
(&lt;a href=&quot;https://github.com/cliffordwolf/icestorm/tree/main/icetime&quot;&gt;icetime&lt;/a&gt;
gives the design a 30MHz maximum clock speed.)  Without being able to route
my design for two separate clocks, my design will not have USB support.&lt;/p&gt;

    &lt;p&gt;Or would they?  The ice40 boards do have an &lt;code class=&quot;highlighter-rouge&quot;&gt;SB_IO&lt;/code&gt; primitive that provides
support for a DDR capability …&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What does this mean for me?&lt;/p&gt;

&lt;p&gt;First, the small block RAM space on the chip is too small to hold the
&lt;a href=&quot;https://sourceware.org/newlib&quot;&gt;newlib&lt;/a&gt; C-library.  Hence, if I want to run
&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt; I’ll need
to store as much library code as I can in the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.  I’ll need to be
extra careful that, in this process, I don’t affect the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;.  In addition, 
&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;
will need 2 wires dedicated to my &lt;a href=&quot;https://store.digilentinc.com/pmod-usbuart-usb-to-uart-interface/&quot;&gt;USB-UART PMod&lt;/a&gt;, just so I can see the result
and interact with my design–assuming that I can’t get a USB console to work.&lt;/p&gt;

&lt;p&gt;I’m also very thankful that the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA
BX&lt;/a&gt; (now) supports all the wires
necessary for &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;QSPI flash&lt;/a&gt;!
That will help to help keep the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;CPU speed up
there&lt;/a&gt;, in spite
of the non-pipelined CPU configuration (the only one that would fit).&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-and-fpga-hell&quot;&gt;TinyFPGA and FPGA Hell&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; has a USB protocol driver.  This was one of the things
that surprised me and caught my attention when I first discovered this board.
In particular, I was curious to know how Luke Valenty built it.  The USB
specification is rather large and complex.  I had to ask: What design method
did Valenty use to get this interaction up and running?&lt;/p&gt;

&lt;p&gt;So I asked.  Valenty was more than happy to share how he had (or rather hadn’t)
avoided &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt; during his design
process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I notice the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;
design includes a USB capability.  Can you tell my readers anything about
how you went about building it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards use a dedicated USB interface chip to enable programming
and communication between the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; and a host computer.  The most popular
choice is an &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.dpf&quot;&gt;FTDI chip&lt;/a&gt;.
This chip costs as much as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; itself!  I
had a goal of developing a small and cost-effective &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board and I
really wanted to deliver.  I have a lot of experience with USB, so I
decided to implement the USB interface fully on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; itself.
The ICE40 FPGAs have a multiboot capability that allows for multiple
configuration bitstreams to be stored in the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;SPI flash&lt;/a&gt; and loaded at will
by the design.  This allowed me to develop a USB &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; in a similar
way that microcontrollers can bootload themselves over serial or  USB
interfaces.&lt;/p&gt;

  &lt;p&gt;The plan was to test the design on the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; hardware against a real
USB host.  I had no testbench for simulation nor did I have any 
&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formal assertions or assumptions&lt;/a&gt;.  This was a terrible idea and I
spent a lot of time debugging issues on real hardware and implementing
workarounds in the original programmer software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I’m not a board designer myself, so I have the advantage of examining a
  canned &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design for the board I’m working with before I ever start.
  Even better, I can return to that design if I think there might be a
  hardware problem with the board I am working with.&lt;/p&gt;

&lt;p&gt;As a board supplier, can you share anything about what it took to get a
  first initial design running on the board?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because I didn’t have any simulation or &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; environment,
I had to do all my testing and debugging on the real hardware.  This
involved running tests on the board while connected to a USB host and
spying out internal signals to extenal pins so I can capture them on my
logic analyzer.  Debugging issues required me to make educated guesses
about what signals might help me to debug an issue and rerunning the test multiple times while capturing different groups of signals until the issue could be identified and fixed.&lt;/p&gt;

  &lt;p&gt;This was a long turnaround between seeing an issue, root-causing it, and
verifying a fix.  It took quite some time and long nights to get the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; working reliably on all platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Did you ever find yourself stuck in &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA
  Hell&lt;/a&gt; while designing and
  building the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, in fact, any time I go back to the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; I have
to be very careful how I make changes.  I have since added a simulation
test bench and suite of tests, but making changes is still quite difficult.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Did you use any simulation or &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; techniques?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nope, and this was a major folly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Would you recommend this approach to others?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is pretty much the worst way to go about developing a digital design.
In the end I was able to get the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; to work
very well, but I spent a substantial amount of time working through issues
that would have been trivial to find with a simulation testbench and/or
with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; techniques.&lt;/p&gt;

  &lt;p&gt;I am currently working on a rewrite of the USB core and
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; using
&lt;a href=&quot;http://m-labs.hk/migen/index.html&quot;&gt;Migen&lt;/a&gt; and a unit test methodology.
The design is broken down into small
and simple components that are then unit tested individually to ensure
they behave as expected.  This process is proving to be far easier, less
time-consuming, and is creating a more robust design.  If
&lt;a href=&quot;http://m-labs.hk/migen/index.html&quot;&gt;Migen&lt;/a&gt; ever
gets support for &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formal assertions and assumptions&lt;/a&gt; I would be very
interested in trying them out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Finally, what do you see as the biggest selling point of the
  &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; over and above other
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
  boards that may be out there today?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; board is great to
me because it’s completely open and very small.  You have a lot of freedom
to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
in any way in which you feel without paying extra money for components or
peripherals you are not using.  It’s a great way to create new and unique
projects that take advantage of the power of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.  The
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://discourse.tinyfpga.com&quot;&gt;Discourse server&lt;/a&gt;
has some excellent examples of projects the community has come up with:
&lt;a href=&quot;https://discourse.tinyfpga.com/c/tinyfpga-projects&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;h2 id=&quot;using-the-tinyfgpa&quot;&gt;Using the TinyFGPA&lt;/h2&gt;

&lt;p&gt;I hope I haven’t given you the wrong idea about the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; above.  It is designed to be a very minimalist
iCE40 FPGA board.  It fills that role quite nicely.  Even better,
it is supported by an entirely open source &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; tool chain.&lt;/p&gt;

&lt;p&gt;If this is your first project, then do be prepared to do some hand wiring
to connect your favorite devices/peripherals to the board.&lt;/p&gt;

&lt;p&gt;Others have already been very successful with this board.  These users have
proved that you can play pong, pac man, or even space invaders on the board.
Still others have ported the picoSoC project including a picoRV RISC-V CPU to
the board.  In other words, it’s not so spare that you can’t do anything with
it, but it might test your creativity.  Hopefully that’s why you are in the
market for a board like this in the first place.&lt;/p&gt;

&lt;p&gt;Me?  Well, it shouldn’t surprise you to know that I’m more interested in
placing a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; onto the board.&lt;/p&gt;

&lt;p&gt;Will the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; fit?  Yes.  With a
special hardware multiply unit, the normal divide unit, together with the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;pipelined fetch unit&lt;/a&gt;
and compressed instruction support, a &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;minimum ZipCPU
build&lt;/a&gt; uses 5437 logic elements out of 7680,
or about 70%.  Yes, I rewrote both the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/slowmpy.v&quot;&gt;multiply&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divide&lt;/a&gt; units
to get the &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;logic
count&lt;/a&gt; this low.  I
could go lower if I wanted by removing some of these extra features.  My goal,
however, was to leave enough room at the end so that I could incorporate a USB
based serial port.  Sadly, I might end up waiting a while on that.&lt;/p&gt;

&lt;p&gt;Perhaps I’ll just &lt;a href=&quot;https://store.digilentinc.com/pmod-gps-gps-receiver&quot;&gt;GPS enable my
device&lt;/a&gt; instead.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Seest thou a man diligent in his busines?  He shall stand before kings; he shall not stand before mean men.  (Prov 22:29)&lt;/em&gt;</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/10/05/tinyfpga.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/10/05/tinyfpga.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>To my new readers and my new twitter followers, welcome!</title>
        <description>&lt;p&gt;If you are new here, I’d like to take this personal opportunity to welcome you
to the &lt;a href=&quot;https://zipcpu.com/&quot;&gt;ZipCPU blog&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I discuss FPGA design methodology, completed designs,
&lt;a href=&quot;/dsp/dsp.html&quot;&gt;DSP&lt;/a&gt;, &lt;a href=&quot;/formal/formal.html&quot;&gt;formal
methods&lt;/a&gt;, and more.  I’ve also been known
to &lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;tweet&lt;/a&gt; about the same as well.  If you
aren’t &lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;following me on twitter&lt;/a&gt;, then let me
invite you to do so–or you’ll miss the weekly formal verification quizzes.
The blog also has an &lt;a href=&quot;/feed.xml&quot;&gt;RSS feed&lt;/a&gt;, and
you are welcome to subscribe to it, although I have been known to wait some
time after posting before updating the &lt;a href=&quot;/feed.xml&quot;&gt;RSS feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are a beginner, the blog is loosely built so that the simpler topics
are the older ones that you’ll find at the bottom of the page.  I would
therefore recommend you start reading the blog from the oldest articles to
the newest.  If you do so, you’ll also notice my methods have changed somewhat
as well–I didn’t use &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;
at first.  Perhaps one day I’ll organize all of my posts into a textbook.
Such a textbook would be built around the premise that design engineers
spend the most of their time debugging, and so it would focus on not only
learning designs, but
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;,
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
and &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;troubleshooting as
well&lt;/a&gt;.
As such, it would have the three thrusts of learning shown below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Tentative Digital Design Learning Outline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/course-outline.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Until that time, these posts will remain organized by date only, somewhat
disorganized by ability level, and topically disorganized.  While I have tried
to sort the &lt;a href=&quot;/topics.html&quot;&gt;site by topic here&lt;/a&gt;, I’ve also
discovered in the process that the major categories overlap, so
&lt;a href=&quot;/topics.html&quot;&gt;that page&lt;/a&gt; has only been somewhat successful.&lt;/p&gt;

&lt;p&gt;I also teach a two-day on-site course in
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
using a commercial version
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
with support for VHDL, Verilog, SystemVerilog, and the full SystemVerilog
assertion language.  That course is more organized than these blog articles
are.  If you are interested,
&lt;a href=&quot;https://www.symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt;
handles the scheduling on my behalf.&lt;/p&gt;

&lt;p&gt;While I enjoy and welcome discussion, there is &lt;a href=&quot;/blog/2017/08/01/advertising.html&quot;&gt;no discussion
capability&lt;/a&gt; on &lt;a href=&quot;https://zipcpu.com/&quot;&gt;this
blog&lt;/a&gt;, and some topics just don’t fit
in &lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;tweets&lt;/a&gt;.  (Sorry.)  Depending upon the
type of discussion you would like, feel free to either ask on
&lt;a href=&quot;https://webchat.freenode.net&quot;&gt;freenode&lt;/a&gt;’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;#yosys&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;##FPGA&lt;/code&gt; channels (you will need to get a free account) where I am
known as ZipCPU, or alternatively on &lt;a href=&quot;https://www.reddit.com&quot;&gt;Reddit&lt;/a&gt; where I
try to monitor both the &lt;a href=&quot;https://www.reddit.com/r/FPGA&quot;&gt;FPGA&lt;/a&gt; and the
&lt;a href=&quot;https://www.reddit.com/r/yosys&quot;&gt;yosys&lt;/a&gt; channels as well.
If you ask a yosys question that is too difficult for me on
&lt;a href=&quot;https://www.reddit.com/r/yosys&quot;&gt;reddit&lt;/a&gt;, I’ve been known to bring it up to
Clifford at our weekly meetings, and answer it then.  For such questions,
&lt;a href=&quot;https://www.reddit.com/r/yosys&quot;&gt;reddit replies&lt;/a&gt; can take a couple of days.&lt;/p&gt;

&lt;p&gt;You should also know that I am a Christian, and I am not ashamed of it.  My own
life has been dedicated to the service of Christ, and that now includes this
blog.  You can expect occasional articles on
&lt;a href=&quot;/blog/2017/08/12/caused-to-lie.html&quot;&gt;ethics&lt;/a&gt;,
morality,
and &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;Christianity&lt;/a&gt;,
verses at the end of each post, and even
&lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;tweets&lt;/a&gt; on such topics from time to time.&lt;/p&gt;

&lt;p&gt;My Christian beliefs are centered around a literal interpretation of the Bible.
This includes a belief in a &lt;a href=&quot;https://www.blueletterbible.org/kjv/exo/20/11&quot;&gt;6-day
creation&lt;/a&gt;
that took place roughly six-thousand years ago, a belief that God will
&lt;a href=&quot;https://www.blueletterbible.org/kjv/2pe/3/7&quot;&gt;cause the end of this world&lt;/a&gt;
rather than any man-induced climate change, a firm belief that a &lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/22/36&quot;&gt;free people
should be an armed people&lt;/a&gt;,
and more.&lt;/p&gt;

&lt;p&gt;These beliefs have also led me to very strong right-wing political views.&lt;/p&gt;

&lt;p&gt;My point is simply this: if these things will offend you, and they have
offended some, then consider this as your fair warning.&lt;/p&gt;

&lt;p&gt;If you are still interested in the &lt;a href=&quot;https://zipcpu.com/&quot;&gt;ZipCPU
blog&lt;/a&gt;, and even more if you find it valuable,
then please consider supporting it.  The &lt;a href=&quot;https://zipcpu.com/&quot;&gt;ZipCPU
blog&lt;/a&gt; is supported entirely through
donations made by folks such as you, as well as my own love of helping and
encouraging others.  If you have benefited from the blog, then let me invite
you to &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;contribute a small sum on a monthly
basis&lt;/a&gt;.  Should you do so, you’ll also have
access to another discussion forum on &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;Patreon&lt;/a&gt;,
where I write occasional messages to my sponsors, ask them about what topics
might interest them and so on.  I also have some designs, such as a WB to
AXI-lite bridge, an AXI-lite to WB bridge, together with an AXI-lite formal
property file, which are available to sponsors only.  Using this formal
property file, it’s easy to show how and why Xilinx’s example AXI peripheral
code is broken.&lt;/p&gt;

&lt;p&gt;Either way, welcome, and I hope to have had the opportunity to encourage you
in your own journey while you are here.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;From that time many of his disciples went back, and walked no more with him. (John 6:66)&lt;/em&gt;</description>
        <pubDate>Thu, 04 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/10/04/welcome.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/10/04/welcome.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>An Open Source Pipelined FFT Generator</title>
        <description>&lt;p&gt;Have you ever tried to simulate a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt; algorithm using &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;, only to
then realize that your design required an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
and that all you had was a proprietary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
implementation?  Perhaps you
then looked for open source alternatives among the &lt;a href=&quot;https://opencores.org/projects?expanded=DSP core&quot;&gt;DSP
cores&lt;/a&gt; on
&lt;a href=&quot;https://opencores.org&quot;&gt;OpenCores&lt;/a&gt;, only to find that the particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
size you needed wasn’t supported, or that it required more
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s
than your board had?  Perhaps the open core you found didn’t work, and you
were unable to either verify the core by re-running the formal verification
or by running the test bench.&lt;/p&gt;

&lt;p&gt;This happened to me when I set out to build one of my first &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; designs: a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Positioning_System&quot;&gt;GPS&lt;/a&gt; processing algorithm.  However, in my case, things were worse.  I needed an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
that could process two incoming samples per clock, or I would have
no chance of applying my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
based &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Positioning_System&quot;&gt;GPS&lt;/a&gt;
processing algorithm in real time.&lt;/p&gt;

&lt;p&gt;Since building this core, I’ve discovered how universally applicable an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
core is.  As a result, I’ve expanded the initial
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
capability that I had built in order to handle some of the
more common use cases.  Not only does this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
process a high speed input at
two samples per clock, but it can now handle the typical case of one input
sample per clock, or even half or a third of that rate.  Part of my hope
with this change is to be able to easily process audio samples at rates
much slower than the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline&lt;/a&gt;
can handle.&lt;/p&gt;

&lt;p&gt;Why not implement a block
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
then?  That’s a good question.  For now, my simple is simply
one project at a time.&lt;/p&gt;

&lt;p&gt;Today, I’d like to introduce &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT core
generator&lt;/a&gt;, show you how to generate
a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;custom FFT core&lt;/a&gt;
for your own purposes, and then discuss how I’ve gone about
formally verifying the components of the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the core&lt;/a&gt;.
Yes, it has been formally verified–at least, most of it has.  But I’ll get
to that in a moment.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-fft&quot;&gt;What is an FFT&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Spectral representation of speech&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-echoes-burning-bush.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you aren’t familiar with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;, then you
should know that it is a very important part of &lt;em&gt;many&lt;/em&gt; engineering applications.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s are
an important part of any digital &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectrum_analyzer&quot;&gt;spectrum
analyzer&lt;/a&gt;.
You’re likely to find one of these in just about any good electronics lab.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s can
also be used when implementing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectrogram&quot;&gt;spectrogram&lt;/a&gt;, such as the
one shown in Fig 1. on the right, or Fig 2 below.  Such
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectrogram&quot;&gt;spectrogram&lt;/a&gt;s make
it easier to understand artifacts of speech and other sounds, or even
radio frequency waveforms, by visual inspection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolutions&lt;/a&gt; and/or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-correlation&quot;&gt;correlations&lt;/a&gt; can often be
implemented much faster and cheaper using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation
of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This means that &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;digital
filters&lt;/a&gt; can be
implemented with &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;
enabled &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolutions&lt;/a&gt;
faster/better/cheaper.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;
are used to understand and analyze &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_system&quot;&gt;control
systems&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I was personally surprised at how easy it became to study and understand
a &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;PLL&lt;/a&gt;s implementation
once &lt;a href=&quot;https://www.amazon.com/Phaselock-Techniques-Floyd-M-Gardner/dp/0471430633/&quot;&gt;Gardner rewrote
it&lt;/a&gt;
using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Z-transform&quot;&gt;Z-transform&lt;/a&gt;, a
variant of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fifth, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;s
are used not only in &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;filter&lt;/a&gt;
implementations, but they are also used in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parks-MccClellan_filter_design_algorithm&quot;&gt;filter
design&lt;/a&gt;
process.  We’ve
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;discussed this somewhat&lt;/a&gt;
already.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, just like you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; to evaluate
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;filter&lt;/a&gt;
implementations, you can also use them to &lt;a href=&quot;/dsp/2018/01/16/interpolation-is-convolution.html&quot;&gt;evaluate and compare interpolator
implementations&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Indeed, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;transform&lt;/a&gt;
is so ubiquitous in &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;digital signal
processing&lt;/a&gt;
that it can be hard to avoid: it is the &lt;a href=&quot;/dsp/2017/11/22/fltr-response.html&quot;&gt;&lt;em&gt;natural way of expressing a signal
or linear operation in a time-independent fashion&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. An FSK decomposed with FFT based processing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-fsk.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;&lt;em&gt;Fast&lt;/em&gt; Fourier
Transform (FFT)&lt;/a&gt;
is a specific implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;, that drastically
reduces the cost of implementing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; Prior to the
invention of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt; could only
be calculated the hard way with &lt;code class=&quot;highlighter-rouge&quot;&gt;N^2&lt;/code&gt; multiplication operations per transform
of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; points.  Since &lt;a href=&quot;https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm&quot;&gt;Cooley and
Tukey&lt;/a&gt;
&lt;a href=&quot;http://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf&quot;&gt;published&lt;/a&gt;
their algorithmic implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;,
they can now be calculated with &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N log_2(N))&lt;/code&gt; multiplies.&lt;/p&gt;

&lt;p&gt;Needless to say, the invention of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; immediately
started to transform
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;signal processing&lt;/a&gt;.
But let’s back up and understand a little more about what a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; is first.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt; is
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_map&quot;&gt;linear operator&lt;/a&gt; that decomposes
a signal from a representation in time, to a time-less representation in
frequency.  This is done via a continuous-time &lt;a href=&quot;https://en.wikipedia.org/wiki/Projection_(linear_algebra)&quot;&gt;projection
operator&lt;/a&gt;
applied across all time to an incoming signal,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Projection_(linear_operator)&quot;&gt;projecting&lt;/a&gt;
the incoming signal onto a set of &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex
exponential&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Basis_function&quot;&gt;basis
functions&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-fourier-transform.png&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is the definition you will first come across when studying
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;.
This form above is easy to work with mathematically with
just pen and paper–as long as you don’t try to calculate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;
of &lt;code class=&quot;highlighter-rouge&quot;&gt;e^{j 2pi ft}&lt;/code&gt; across all time–something which only
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dirac_delta_function&quot;&gt;questionably converges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two problems with this nice mathematical definition when it comes
to working with an engineering reality.&lt;/p&gt;

&lt;p&gt;The first problem is that digital algorithms don’t operate upon continuous
signals very well.  Computers and other &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;digital signal
processors&lt;/a&gt;
do a much better job with
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt;&lt;/em&gt;
signals.  Hence, we’ll switch from discussing the
pure &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt; shown above and examine the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;Discrete-time Fourier
transform&lt;/a&gt;
instead.  For this, we’ll switch from a continuous incoming signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;x(t)&lt;/code&gt;, to its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt;
representation, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt;.  The &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;Discrete-time Fourier
transform&lt;/a&gt;
can then be applied to our signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-discrete-fourier.png&quot; alt=&quot;&quot; width=&quot;327&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;discrete-time
transform&lt;/a&gt;
works very nicely for representing the response of certain
&lt;a href=&quot;/dsp/2017/11/22/fltr-response.html&quot;&gt;digital filters&lt;/a&gt;,
it’s still not all that practical.&lt;/p&gt;

&lt;p&gt;This brings us to the second problem: Computers can’t handle an infinite
number of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;,
nor can they handle an infinite number potential frequencies.  Both of these
need to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt;
and finite.&lt;/p&gt;

&lt;p&gt;Fixing this second problem brings us to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-fast-dft.png&quot; alt=&quot;&quot; width=&quot;291&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, not only is the &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt; used in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;this transform&lt;/a&gt;
discrete, but the frequency index, &lt;code class=&quot;highlighter-rouge&quot;&gt;k/N&lt;/code&gt;, is as well.&lt;/p&gt;

&lt;p&gt;All three of these representations are very tightly related.  Indeed, it can
be argued that under certain conditions, such as those of a sufficiently
band limited and time limited signal, each of these three operators
can be said to be roughly equivalent.&lt;/p&gt;

&lt;p&gt;Ouch.  Did I just say that?  The
mathematician within me is screaming that this statement is in gross error.
Mathematically, there are major and significant differences between these
transforms.  Practically, however, only this last transform can ever be
computed digitally.  Therefore, the first two expressions of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; and then the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;discrete time Fourier
transform&lt;/a&gt;
can only ever be digitally approximated by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps I should just leave this point by saying these three representations
are tightly related.&lt;/p&gt;

&lt;p&gt;It is this third representation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;, known as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete
Fourier transform&lt;/a&gt;,
that we’ll be discussing the implementation of today.  I’m also going to argue
that this is the only representation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;
that can be numerically computed for any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt; finite
sequence, but I’ll be glad to invite you to prove me wrong.&lt;/p&gt;

&lt;p&gt;If you look at the form above, you can see it takes as input &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; data
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt;,
and calculates one summation across those inputs for every value of &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; to
produce &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
out, &lt;code class=&quot;highlighter-rouge&quot;&gt;X[k/N]&lt;/code&gt;.  Given that there’s a complex multiplication
required for every term in that summation of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; numbers, and that there are
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; relevant outputs, this will cost &lt;code class=&quot;highlighter-rouge&quot;&gt;N^2&lt;/code&gt; painful multiplications to calculate.&lt;/p&gt;

&lt;p&gt;If we just left things there,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;this transform&lt;/a&gt;,
would be so hard to calculate that no one would ever use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm&quot;&gt;Cooley and
Tukey&lt;/a&gt;,
however, described a way that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;
can be decomposed into two transforms, each of them being half the size of
the original, for the cost of only &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; multiplies.  If you then repeat this
&lt;code class=&quot;highlighter-rouge&quot;&gt;log_2(N)&lt;/code&gt; times, you’ll get to a one point transform, for a total cost of
&lt;code class=&quot;highlighter-rouge&quot;&gt;N log_2(N)&lt;/code&gt; multiplies.  At this cost point, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;
becomes relevant.  Indeed, it becomes a significant and fundamental
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt; operation.&lt;/p&gt;

&lt;p&gt;Let’s take a moment to scratch the surface of how this is done, using the
“decimation in frequency” approach to decomposing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
that is used within
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core&lt;/a&gt;.  It involves first
splitting the summation into two parts, one containing the low numbered
terms and one containing the higher numbered terms.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-bisum.png&quot; alt=&quot;&quot; width=&quot;566&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left term captures the first half of the summation, whereas the right term
captures the second half.&lt;/p&gt;

&lt;p&gt;If you look at the two summation terms above, you’ll see that they share a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;e^{-j2pi kn/N}&lt;/code&gt;.  We can factor this common term out to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-subfft.png&quot; alt=&quot;&quot; width=&quot;537&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once factored, this almost looks like the same summation we started with, only
in a recursive form.  The difference is that we are now calculating a smaller
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;, summing
over only half as many points as before.  The big difference is a subtle
modification to the inside.&lt;/p&gt;

&lt;p&gt;To draw this out, let us consider even and odd frequency bins, &lt;code class=&quot;highlighter-rouge&quot;&gt;2k&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2k+1&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dif-prebutterfly.png&quot; alt=&quot;&quot; width=&quot;711&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We can simplify this further by the simple fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; raised to any
integer multiple of &lt;code class=&quot;highlighter-rouge&quot;&gt;2pi&lt;/code&gt; will be one.  Similarly, &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; raised to any odd
integer multiple of &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt; will be negative one.  This allows just a touch more
simplification.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dif-butterfly.png&quot; alt=&quot;&quot; width=&quot;681&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This means that with just a little bit of manipulation, we can split the
calculation of one &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;
into the calculation of two similar &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;,
each that are only half the size of the original.&lt;/p&gt;

&lt;p&gt;The frequency independent &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex
number&lt;/a&gt; in the second line,
&lt;code class=&quot;highlighter-rouge&quot;&gt;e^{-j 2pi n/N}&lt;/code&gt; is commonly known as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;generated
pipeline FFT&lt;/a&gt; will
use a lookup table to avoid the need to calculate this on the fly.&lt;/p&gt;

&lt;p&gt;Reducing an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; by
pairs of frequencies in this fashion is accomplished via what’s called a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Butterfly_diagram&quot;&gt;butterfly&lt;/a&gt;.  In the code
we’ll discuss below, we’ll use the term &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FFT
stage&lt;/code&gt;&lt;/a&gt; to reference
decomposing an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; into
two smaller &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s,
and we’ll call the calculation of the values within the parenthesis above
a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;butterfly&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I said I was going to gloss over the gory details, so I’ll start doing so here.
These details are readily available to anyone who wishes to look them up.&lt;/p&gt;

&lt;p&gt;However, there is one important detail associated with which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Butterfly_diagram&quot;&gt;butterflies&lt;/a&gt;
are applied to that I don’t want to skip.  From the equations above, you can
see that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Butterfly_diagram&quot;&gt;butterfly&lt;/a&gt;
will be applied to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n+N/2&lt;/code&gt;.  What’s not so obvious is that we can then repeat
this same decomposition using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n+N/4&lt;/code&gt;, and we can then repeat the decomposition again.&lt;/p&gt;

&lt;p&gt;The other important detail in this process is that the result will be produced
in a &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bit-reversal_permutation&quot;&gt;bit-reversed&lt;/a&gt;&lt;/em&gt;
order.  You can see some of that above.  Notice how the values &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n+N/2&lt;/code&gt;
were used to calculate frequencies &lt;code class=&quot;highlighter-rouge&quot;&gt;2k&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2k+1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well come back to some of these details in a bit when we discuss how
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core&lt;/a&gt;
was verified.&lt;/p&gt;

&lt;h2 id=&quot;running-the-core-generator&quot;&gt;Running the Core Generator&lt;/h2&gt;

&lt;p&gt;If you want to try out the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;core
generator&lt;/a&gt;, you’ll need to download and
build it first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/ZipCPU/dblclockfft
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I like to think that &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the project&lt;/a&gt;
doesn’t have any dependencies.  It would be more realistic to point out that
it depends upon &lt;a href=&quot;https://www.gnu.org/software/gcc&quot;&gt;GCC&lt;/a&gt; (or other C compiler),
&lt;a href=&quot;https://www.gnu.org/software/binutils/&quot;&gt;binutils&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;make&lt;/a&gt;, and a
basic Linux environment.  (This is currently necessary for creating
directories, etc.)  The various bench tests currently require
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
though some require &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;
as well, and the formal proofs of the various components require
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
and both the
&lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;yices&lt;/a&gt; and
&lt;a href=&quot;https://boolector.github.io&quot;&gt;boolector&lt;/a&gt;
engines.  Neither
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;,
nor &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
or the formal engines, are required to use the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;core
generator&lt;/a&gt;, however.  Feel free to
correct me if there’s anything I’m missing here.&lt;/p&gt;

&lt;p&gt;Once the “&lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;make&lt;/a&gt;” command completes, you
should have an &lt;code class=&quot;highlighter-rouge&quot;&gt;fftgen&lt;/code&gt; program in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sw/&lt;/code&gt; subdirectory within the core.
That’s what we’ll be working with.&lt;/p&gt;

&lt;p&gt;Need an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;?  Let’s get
started using &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this coregen&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Suppose you want a 128-pt
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  You can
simply run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a directory &lt;code class=&quot;highlighter-rouge&quot;&gt;fft-core&lt;/code&gt;, into which it will place the Verilog
code for this &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, and
the various hex files for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle
factor&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Of course, in any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
bit size is closely related to &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;logic
usage&lt;/a&gt; within
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;the core&lt;/a&gt;,
and so it can be very important to control bit size.  The example above will
create an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; with a
default input bit-width of 16-bits per input.  Not only that, but this width
will grow at one bit for every two stages.&lt;/p&gt;

&lt;p&gt;Would you rather have an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; with a 12-bit
input width?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a 128-pt
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
with 12-bit inputs and 16-bit outputs.&lt;/p&gt;

&lt;p&gt;What if you only wanted a 12-bit output?  You could limit the internal bit
growth, and hence the output size, to only 12-bits by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;-m 12&lt;/code&gt; to your
command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default, this will use &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle
factor&lt;/a&gt;s
(constant approximations of those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;s)
of 12-bits–the same size as the input bit width.&lt;/p&gt;

&lt;p&gt;What if that’s not enough?  An
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;s
the same width as the data will suffer from some amount of &lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;truncation
error&lt;/a&gt;.  We can
increase the number of bits used by these &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle
factor&lt;/a&gt;s to help reduce this
&lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;truncation error&lt;/a&gt;.
Let’s increase them by making them two bits longer than the data at every stage.
To do this, we’ll add &lt;code class=&quot;highlighter-rouge&quot;&gt;-x 2&lt;/code&gt; to our command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will reduce the &lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;internal truncation
error&lt;/a&gt; associated with
calculating the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.
This &lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;truncation error&lt;/a&gt;
will decrease until about &lt;code class=&quot;highlighter-rouge&quot;&gt;-x 4&lt;/code&gt; or so, after which adding additional bits
bits is not likely to yield any significant additional improvements.&lt;/p&gt;

&lt;p&gt;Voila!  A wonderful &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Well, not quite.  The big problem with this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
is that we’ve used &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;hand-generated shift-add multiplication
logic&lt;/a&gt; for
many stages.  These soft-multiplies are expensive, and may well consume all
of the logic within your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
If you are instead using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; that
provides hardware accelerated multiplies (i.e.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements),
then you can authorize the core to use some limited number of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements.&lt;/p&gt;

&lt;p&gt;For example, let’s build an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
using no more than 15
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; by adding
&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 15&lt;/code&gt; to our command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2 -p 15&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, all of the multiplies within five of the seven stages of our
128-pt &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; will now use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;hardware multipliers&lt;/a&gt;,
at three multiplies per stage.  The last two stages don’t use any multiplies,
since they can be accomplished simply using additions and subtractions.&lt;/p&gt;

&lt;p&gt;On the other hand, if your signal will come into the core at no more than one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
every other clock cycle, then you can drop the number of multiplies
used per stage from three down to two.&lt;/p&gt;

&lt;p&gt;This is the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; parameter.  &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 2&lt;/code&gt; will cause the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
to assume that you’ll never give it two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
on adjacent clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2 -p 15 -k 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will now use &lt;code class=&quot;highlighter-rouge&quot;&gt;2(N-2)&lt;/code&gt; multiplies for a &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N&lt;/code&gt; point
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, of which
no more than 15 of these (&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 15&lt;/code&gt;) will use your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements.&lt;/p&gt;

&lt;p&gt;Need to use fewer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements?
Suppose no more than every third value required
a multiply?  Then we could do &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 3&lt;/code&gt;, and use no more than one multiply per
stage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2 -p 15 -k 3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This could be very valuable when processing an audio signal, for example, that
only ever has less than one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
every thousand clock ticks.&lt;/p&gt;

&lt;p&gt;Other options of interest include &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; to generate an inverse
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; (conjugates the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;s),
&lt;code class=&quot;highlighter-rouge&quot;&gt;-2&lt;/code&gt; to generate an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
that can ingest two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock, and so on.&lt;/p&gt;

&lt;p&gt;Indeed, you can just run &lt;code class=&quot;highlighter-rouge&quot;&gt;fftgen -h&lt;/code&gt; to get a list of all of the options &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this
FFT core generator&lt;/a&gt; will support.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./fftgen -h
USAGE:	fftgen [-f &amp;lt;size&amp;gt;] [-d dir] [-c cbits] [-n nbits] [-m mxbits] [-s]
	-1	Build a normal FFT, running at one clock per complex sample, or
		(for a real FFT) at one clock per two real input samples.
	-a &amp;lt;hdrname&amp;gt;  Create a header of information describing the built-in
		parameters, useful for module-level testing with Verilator
	-c &amp;lt;cbits&amp;gt;	Causes all internal complex coefficients to be
		longer than the corresponding data bits, to help avoid
		coefficient truncation errors.  The default is 4 bits longer
		than the data bits.
	-d &amp;lt;dir&amp;gt;  Places all of the generated verilog files into &amp;lt;dir&amp;gt;.
		The default is a subdirectory of the current directory
		named fft-core.
	-f &amp;lt;size&amp;gt;  Sets the size of the FFT as the number of complex
		samples input to the transform.  (No default value, this is
		a required parameter.)
	-i	An inverse FFT, meaning that the coefficients are
		given by e^{ j 2 pi k/N n }.  The default is a forward FFT, with
		coefficients given by e^{ -j 2 pi k/N n }.
	-k #	Sets # clocks per sample, used to minimize multiplies.  Also
		sets one sample in per i_ce clock (opt -1)
	-m &amp;lt;mxbits&amp;gt;	Sets the maximum bit width that the FFT should ever
		produce.  Internal values greater than this value will be
		truncated to this value.  (The default value grows the input
		size by one bit for every two FFT stages.)
	-n &amp;lt;nbits&amp;gt;	Sets the bitwidth for values coming into the (i)FFT.
		The default is 16 bits input for each component of the two
		complex values into the FFT.
	-p &amp;lt;nmpy&amp;gt;  Sets the number of hardware multiplies (DSPs) to use, versus
		shift-add emulation.  The default is not to use any hardware
		multipliers.
	-s	Skip the final bit reversal stage.  This is useful in
		algorithms that need to apply a filter without needing to do
		bin shifting, as these algorithms can, with this option, just
		multiply by a bit reversed correlation sequence and then
		inverse FFT the (still bit reversed) result.  (You would need
		a decimation in time inverse to do this, which this program does
		not yet provide.)
	-S	Include the final bit reversal stage (default).
	-x &amp;lt;xtrabits&amp;gt;	Use this many extra bits internally, before any final
		rounding or truncation of the answer to the final number of
		bits.  The default is to use 0 extra bits internally.
$&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll admit this &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;FFT generator
project&lt;/a&gt; remains a bit of a work
in progress, there’s just so much more I’d like to do!  For example, it
currently only calculates a complex
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  There’s a
real-to-complex stage that needs to be implemented in order to do real
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s.  I’d also like
to implement a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm&quot;&gt;decimation in
time&lt;/a&gt;
algorithm, since having both will allow me to (optionally, under some
pass-through implementations) remove the &lt;a href=&quot;https://github.com/ZipCPU/dblclock/blob/master/rtl/bitreverse.html&quot;&gt;bit reversal
stage&lt;/a&gt;.
Eventually, I’d love to build a block processing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; as well.
All of these items are on my to-do list for
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;this core&lt;/a&gt;,
they just haven’t been done yet.&lt;/p&gt;

&lt;p&gt;Still, it currently works as advertised.  Care to try it?&lt;/p&gt;

&lt;h2 id=&quot;interfacing-with-the-fft-core&quot;&gt;Interfacing with the FFT Core&lt;/h2&gt;

&lt;p&gt;Once you’ve generated an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;,
it’s then time to try it out.  To do that, you’ll need to connect it up to
your design.  The generated core has a couple of basic input ports, shown
below and in Fig 3.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fftmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Basic Pipelined FFT Ports&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-ports.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;These basic ports are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt; should be self explanatory.  This core consists of synchronous logic
only, and everything is synchronous to the clock input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; is a positive edge synchronous reset signal.  If you would rather
an asynchronous reset, there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; option to generate logic using
asynchronous negative edge resets.  However, since I tend not to use them,
I haven’t tested this option much.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is a global CE signal.  It is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; on every clock where a valid
new &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
is available on the input.  It’s very useful for processing signal
that may be at a rate slower than the system clock, such as &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;we discussed
some time
ago&lt;/a&gt;.
Once &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; becomes true, one data
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
will come out of the core and be valid on every clock cycle that
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is high.&lt;/p&gt;

    &lt;p&gt;If you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 3&lt;/code&gt; options, you’ll need to guarantee that
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is never true twice in two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
or twice in three
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
respectively, to allow the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; a chance to compute the data.&lt;/p&gt;

    &lt;p&gt;While this breaks the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;assumptions I described earlier for the global CE
signal&lt;/a&gt;,
specifically that nothing should act if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is false, doing so allows the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; to share multiplication elements when possible.&lt;/p&gt;

    &lt;p&gt;One final note here: if you want or need to control when the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; starts
processing, or specifically which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt; is the
first &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt; of
the frame, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; input for that purpose.  The first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt; value
where &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is true and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; is false will be the first value into
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; is actually a pair of values, both real and imaginary, stuffed
into one signal bus.  The real portion is placed in the upper bits, and the
imaginary portion is placed in the lower or least significant bits.  Both
values are in traditional twos complement format, just stuffed together into
a single input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; is the output of one &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; bin from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  It is in the exact
same format as &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;, save only that the output bit-widths used in
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; may be different from the input bit-widths used in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;If you can’t remember what bitwidths the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; was generated for, just check
the &lt;code class=&quot;highlighter-rouge&quot;&gt;IWIDTH&lt;/code&gt; (input width) and &lt;code class=&quot;highlighter-rouge&quot;&gt;OWIDTH&lt;/code&gt; (output width) local parameters in
the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftmain.v&quot;&gt;main, or toplevel, FFT core
file&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; is the last output in the port list.  This signal will be true
when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; contains the first output bin coming out of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  This will be
the zero frequency bin.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; signal is provided to allow any
following logic to synchronize to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; frame structure.&lt;/p&gt;

    &lt;p&gt;The core does not produce an input synchronization signal to signal the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
of the frame.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the core is configured to handle two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock, the data ports and port names are subtly adjusted.  The new
ports are:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 24px&quot;&gt;&lt;caption&gt;Fig 4. Pipelined FFT Ports, two samples per clock&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-dblports.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_right&lt;/code&gt; replace &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; when/if you want an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; that processes two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock.  They have the same format as &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;.
The difference is that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_left&lt;/code&gt; is processed as though it came before
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_right&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_right&lt;/code&gt; are the output values that replace &lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt;.
As with the two-sample per clock &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; inputs, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_right&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_left&lt;/code&gt; is the “first” output of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_right&lt;/code&gt; is the second
one.  Hence, if you include the bit reversal step then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_left&lt;/code&gt; will
refer to an even output bin, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_right&lt;/code&gt; will only ever carry information
for odd output bins.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The particular core generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;fftgen&lt;/code&gt; is a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, rather than a
block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  This means
that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is always
busy after accepting the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;.
Once the first &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; is true, then
valid data is coming out of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  On every
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
thereafter where &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is true, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
will produce another output
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may be familiar with another
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation,
that of a block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
implementation.  In a block
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, a single block of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
would be provided to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; engine, after which
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; engine would
become busy and not accept any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;.  Once a
block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; finishes
processing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
given to it, then it becomes ready for a second block.  As a
result, a block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; may
have other external signals beyond the ones shown above.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation
I am discussing today, however, is only a straight
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verifying-an-fft&quot;&gt;Verifying an FFT&lt;/h2&gt;

&lt;p&gt;This blog &lt;a href=&quot;/about/about.html&quot;&gt;remains dedicated&lt;/a&gt; to keeping
students out of &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;.
So, how did I make certain that &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT
implementation&lt;/a&gt; worked?&lt;/p&gt;

&lt;p&gt;Let me begin by saying that
“&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;”
gains a new meaning when working with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s are difficult
to understand internally, particularly because it can be difficult to validate
the data midway through.  Yes, I’ve written multiple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
implementations, both in software and now in hardware.  Yes, I’ve gone through
the mathematics.  That doesn’t mean they are simple.  Even with full access
to every internal signal within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
they can still be a bear to debug.  Indeed, I still get surprised at the end
of this rather complex transform when signals suddenly pass through it properly.&lt;/p&gt;

&lt;p&gt;Now that I’ve said all that, it should come as no surprise that debugging the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is really a story
in itself.  Let me try telling what I can of it.&lt;/p&gt;

&lt;p&gt;When I first built the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;,
it was to support a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Positioning_System&quot;&gt;GPS&lt;/a&gt; processing
accelerator.  I had a hard time limit that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; needed to meet,
or the accelerated operation wouldn’t meet real time requirements.  I became
concerned during this process that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; wouldn’t be
fast enough, so I built an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; that could process
two &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock.&lt;/p&gt;

&lt;p&gt;To verify this initial
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, I created &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;test
benches&lt;/a&gt;
for all of the components.  The test bench would work by running data
through each component of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  At the same time,
I would double check the output values within the C++ driver of my various
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;test benches&lt;/a&gt;.
At first, the data was carefully chosen to find specific potential flaws
within the various &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
components.  Later tests then threw random data through the component(s) to
prove their functionality.&lt;/p&gt;

&lt;p&gt;Perhaps walking through an example might help explain this.&lt;/p&gt;

&lt;h3 id=&quot;initial-butterfly-verification&quot;&gt;Initial Butterfly Verification&lt;/h3&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. A Decimation in Frequency Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-butterfly.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As an example of this initial functional verification method, let’s consider the
implementation of the butterfly shown on the right.  This should look
familiar to you, as we discussed the equation for this earlier.  It’s
known as a “radix-2” decimation in frequency &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; butterfly, and it’s a
primary component within the design.  Indeed, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is formed around
calculating this operation repeatedly.&lt;/p&gt;

&lt;p&gt;If we let&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-twiddle.png&quot; alt=&quot;W = e^{-j2pi n/N}&quot; width=&quot;145&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then we can represent this butterfly as,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-butterfly-implementation.png&quot; alt=&quot;&quot; width=&quot;217&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;x0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;x1&lt;/code&gt; are &lt;em&gt;complex&lt;/em&gt; inputs to the butterfly, &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; is a complex
exponential constant coefficient, and &lt;code class=&quot;highlighter-rouge&quot;&gt;y0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y1&lt;/code&gt; are complex outputs.&lt;/p&gt;

&lt;p&gt;We can break this operation down further, and write&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-butterfly-real.png&quot; alt=&quot;&quot; width=&quot;347&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If this looks complicated while reading it, relax.  It’s much more complicated
in its actual implementation.&lt;/p&gt;

&lt;p&gt;There are several problems with implementing this equation that aren’t
immediately apparent from just reading it.  The least of these problems are the
four multiplies.  Because multiplication is so expensive, I used a three
multiply alternative in the actual implementation.  But I digress.&lt;/p&gt;

&lt;p&gt;Originally, the test bench would just create one line of text output per clock.
This line would include the time step, then the inputs to the module, and
finally the outputs from the module–all on the same line.  Sometimes, I’d even
place intermediate values on the line as well.  The trick to making this work
was to halt as soon as an invalid value was returned from the core, so that
value could be examined.  The disadvantage with this approach is that there
are only so many values that can fit on a line that can be reasonably
comprehended.&lt;/p&gt;

&lt;p&gt;Eventually, I enabled &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
generation as well, and then began examining output files via
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;
in addition to the textual output.&lt;/p&gt;

&lt;p&gt;To test the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly
module&lt;/a&gt;, I
provided initial inputs where all values but one were zero.  I then provided
inputs to
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;this module&lt;/a&gt;
where the coefficients were plus or minus one or plus or minus Pi.&lt;/p&gt;

&lt;p&gt;To verify the proper functionality of the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;,
I repeated the calculation within C++ inside my
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;test
bench&lt;/a&gt;.
I then judged that, if the two matched, then the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;
worked.&lt;/p&gt;

&lt;p&gt;Once I tested all of the basic inputs outlined above, I then moved on to
throwing random values at the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;
to “prove” that it worked.  In reality,
this approach never “proved” anything, but it does help to provide some
assurance.  Eventually, I modified the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;test bench&lt;/a&gt;
so that it would
completely exhaust the entire space of possibilities.  Be aware, though, such
an exhaust can send massive amounts of text to your output stream, and fill
up 42GB (or more) of &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace
files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The annoying problem with this approach to debugging is the sheer size of the
data that needs to be searched through and processed once a bug is detected.
A recent run, as an example, generated 42GB of
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD data&lt;/a&gt;.
Ouch!  That can be hard to process with
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;,
and generating file size that large has been known to impact the user
response time of my computer.  I know I’ve wondered at times if my CPU needs to
be given a hard reset, or just left to continue.&lt;/p&gt;

&lt;p&gt;Still, this is a good example of how &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT
core&lt;/a&gt; was originally tested.  Indeed,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;these bench tests&lt;/a&gt;
remain within &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the repository&lt;/a&gt;.
There are test benches for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;regular
butterflies&lt;/a&gt;,
for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/hwbfly_tb.cpp&quot;&gt;hardware assisted
butterflies&lt;/a&gt;
(those using &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s),
for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/fftstage_tb.cpp&quot;&gt;basic FFT radix-2
stages&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/qtrstage_tb.cpp&quot;&gt;penultimate FFT
stage&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;final FFT
stage&lt;/a&gt;.
There’s also a test bench for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/bitreverse_tb.cpp&quot;&gt;bit reversal
stage&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/fft_tb.cpp&quot;&gt;FFT as a
whole&lt;/a&gt;.
These &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;test benches&lt;/a&gt;
still work, and they are available for inspection and test within &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the
repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;making-the-fft-general-purpose&quot;&gt;Making the FFT General Purpose&lt;/h3&gt;

&lt;p&gt;Recently, I came back to &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT core
generator&lt;/a&gt; to see if I could make turn it
into a general purpose
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, instead of one
that could only operate in a two-sample per clock mode.  Two big things
changed in this process.&lt;/p&gt;

&lt;p&gt;First, in hind sight, I realized many of the “special modules” of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
could be parameterized into a few simple Verilog modules.  For example, the
2048 point radix-2 stage was fundamentally identical to the 64-point radix-2
stage with only a few differences that could be captured by parameters.&lt;br /&gt;
Likewise, the inverse
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
code was identical to the forward
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; code, save
only that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;s
needed to be conjugated.  In the end, only the top level component and the
coefficient files truly needed the core generator approach.&lt;/p&gt;

&lt;p&gt;The second big change was that I wanted to support three versions of all of the
butterflies, both &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;the one using the soft
multiplies&lt;/a&gt;
and the one using the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hard
multiplies&lt;/a&gt;.
I needed one version of each that would handle one operation
per clock, one that would multiplex the three multiplies across two
multiplication elements, and a third implementation that would multiplex the
three multiplies across three multiplication elements.&lt;/p&gt;

&lt;p&gt;There were other minor changes as well.  For example, the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;bit reversal
stage&lt;/a&gt;
needed to be rewritten to handle one value per clock, as did the
final radix-2 stage of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  Further, the
core components had initially been written without setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt;, and without using &lt;code class=&quot;highlighter-rouge&quot;&gt;verilator -Wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a result, the minor change of adding support for three types of single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
at a time streams turned into a major rewrite of the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That also meant that everything needed to be reverified.  Test benches
needed to be updated and … searching through GB of files for bugs that
might or might not show up was becoming &lt;em&gt;really&lt;/em&gt; annoying.&lt;/p&gt;

&lt;p&gt;So, I switched to using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
to verify this &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.
Once I had proved that the simple modules of &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the
FFT&lt;/a&gt; worked, there were only a few
modules left.  That’s when it became personal: would it be possible to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt; the
entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Hold that thought.&lt;/p&gt;

&lt;p&gt;For now, let’s walk through a quick discussion of how each section was verified.&lt;/p&gt;

&lt;h4 id=&quot;bit-reversal&quot;&gt;Bit-Reversal&lt;/h4&gt;

&lt;p&gt;The bit reversal stage works by first writing a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; output into a piece
of block RAM memory.  When the second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; output starts
coming into &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;the bit-reversal
core&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;the
core&lt;/a&gt;
then switches to writing this new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; into a second
block RAM area.  Then as more data comes in,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;the core&lt;/a&gt;
ping-pongs between the two sections of memory.&lt;/p&gt;

&lt;p&gt;Now, at the same time the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;bit reversal
stage&lt;/a&gt;
is writing incoming data into one memory area, it is also reading out
from the other memory in a bit-reversed order.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. The bit-reversal stage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-bitreverse.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To formally verify the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;bit reversal
stage&lt;/a&gt;,
I let the formal tool pick an
arbitrary address (and memory area) , and then applied the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;basic memory proof&lt;/a&gt;
to that address.  Further, any time a value is written into this
special address, I assert that it wasn’t full before.  When this special value
is read out of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;,
I also assert that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is outputting the
right value.  In between, I assert that the memory contains my value of
interest.  It’s the &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;same three basic properties we’ve already
discussed&lt;/a&gt;, and it worked
quite well in this context.&lt;/p&gt;

&lt;h4 id=&quot;last-stage&quot;&gt;Last-Stage&lt;/h4&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. The butterfly to the last stage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-laststage.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/laststage.v&quot;&gt;last
stage&lt;/a&gt;
of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is special.
It implements the same radix-2 butterfly
as any other stage, save that 1) it operates on adjacent pairs of data and
2) the complex exponential evaluates to either plus or minus one.  That
means all the work can be done using adds and subtracts–no multiplies are
required.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-laststage.png&quot; alt=&quot;&quot; width=&quot;196&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I struggled to get this simple operation right, I groaned at having to
build another test bench.  I just wanted this thing to work and building and
maintaining all those test benches were getting painful.  Couldn’t I just
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;prove&lt;/a&gt; that &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/laststage.v&quot;&gt;my
code&lt;/a&gt;
would work first using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;So I created a formal properties section in the laststage.v, and recorded
a copy of the data that came into the core within that section.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I could then verify that the data going out matched the known
butterfly
equations.  First, there was the output that was the sum of the two inputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_syncd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then there was the output that was their difference.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_syncd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are a couple important things to note here.  First, I didn’t use
&lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; to capture the incoming data.  &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; works great for expressing
values for one (or more) clocks ago.  The problem with this implementation
was the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; value.  Were this value always &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt;, or even always alternating
&lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; might have been useful.  However, I needed to make
certain that the formal proof properly checked whether &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; was used
properly.  That meant I had to allow the formal solver to pick when &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;
was high and when it wasn’t.  Hence, the output value, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_val = {o_r,o_i}&lt;/code&gt;
might depend upon &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(i_val,2)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(i_val,3)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(i_val,4)&lt;/code&gt;,
or … you get the idea.&lt;/p&gt;

&lt;p&gt;A little more logic was required to make certain I knew which of the two
values to output at any given time, &lt;code class=&quot;highlighter-rouge&quot;&gt;y0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;y1&lt;/code&gt;, but no more logic than
that was required.&lt;/p&gt;

&lt;p&gt;At this point, I started to get excited by the idea of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
parts and pieces of &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT&lt;/a&gt;.
Assertions like this weren’t that hard, and they could be easily made.&lt;/p&gt;

&lt;p&gt;So I moved on to the next module, the &lt;code class=&quot;highlighter-rouge&quot;&gt;qtrstgae.v&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-penultimate-fft-stage&quot;&gt;The Penultimate FFT Stage&lt;/h4&gt;

&lt;p&gt;I call the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/qtrstage.v&quot;&gt;second to the last FFT stage the quarter
stage&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;qtrstage&lt;/code&gt;.  This is the stage that applies two radix-2 butterflies to pairs
within every set of four points.  There were points 0 and 2, and points 1 and 3.&lt;/p&gt;

&lt;p&gt;Like the &lt;code class=&quot;highlighter-rouge&quot;&gt;laststage&lt;/code&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/qtrstage.v&quot;&gt;this stage&lt;/a&gt;
also required only additions and subtractions
to implement the necessary multiplies required by the butterfly.  Unlike the
&lt;code class=&quot;highlighter-rouge&quot;&gt;laststage&lt;/code&gt;, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factors&lt;/a&gt;
in this penultimate stage required multiplication by &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;-j&lt;/code&gt;.
This can still be implemented with additions and subtractions–I just needed
to keep track of which values these additions and subtractions were applied to.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-qtrstage.png&quot; alt=&quot;&quot; width=&quot;258&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you expand the last equation into its complex components, you’ll see
that it truly can be represented by just additions and subtractions.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-qtrstage-mpy.png&quot; alt=&quot;&quot; width=&quot;251&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For this stage, I tried the same basic proof approach as the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/laststage.v&quot;&gt;prior
stage&lt;/a&gt;.
I created the sum and difference values, and verified that these indeed
matched as they were supposed to.  This logic was no more difficult than
before.  Aside from breaking the output into its real and imaginary
portions,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_o_real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_o_imag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_o_real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_o_imag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I could then verify each of the various output real and imaginary values,
depending upon which state, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_state&lt;/code&gt;, the core was in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_syncd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_o_real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_o_imag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These were the three easy proofs, &lt;code class=&quot;highlighter-rouge&quot;&gt;bitreverse&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;laststage&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;qtrstage&lt;/code&gt;.
How was I going to then prove the butterflies?  Those depended upon a
multiply, and formal tools tend to &lt;em&gt;really&lt;/em&gt; struggle with multiplies.&lt;/p&gt;

&lt;h4 id=&quot;the-hardware-assisted-butterfly&quot;&gt;The Hardware Assisted Butterfly&lt;/h4&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. A Decimation in Frequency Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-butterfly.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;This FFT core generator&lt;/a&gt;
uses two separate types of butterfly implementations.
The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;first&lt;/a&gt;
uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements
within those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
that have them.  The core simply makes the assumption that &lt;code class=&quot;highlighter-rouge&quot;&gt;A * B&lt;/code&gt; can
be implemented by the synthesizer in hardware.  The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;second butterfly
implementation&lt;/a&gt;
uses a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;logic
multiply&lt;/a&gt;
implementation built specifically for this core.
Each of the two butterfly implementations has its own Verilog file, so we’ll
discuss them separately.  In this section, we’ll discuss the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware assisted
butterfly&lt;/a&gt;
that uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;
elements.&lt;/p&gt;

&lt;p&gt;When I started this major update, I had a working &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware assisted butterfly
implementation&lt;/a&gt;.
In that original implementation, everything moved forward anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; was
true, and it required three hardware assisted multiplication elements
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; blocks)
to complete.&lt;/p&gt;

&lt;p&gt;However, if you are using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; with only
90 &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s that need to
be shared between other operations (i.e. &lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;high speed
filters&lt;/a&gt;), those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s
can become very precious.  How precious?  When I built my first asynchronous
sample rate converter, I quickly ran out of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;
elements before finishing.
Were I to use an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
in addition to such a poor design (it’s since been fixed), I might not have
enough &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s to make
it work.&lt;/p&gt;

&lt;p&gt;So I looked again at this algorithm to see if I could spare some multiplies.
What if the signal didn’t arrive at the rate of one sample every clock?
What if I could instead insist that the incoming data was less than half that 
speed, so there would always be an idle cycle between any two clock periods
where &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; was true?  If that were the case, I could then share one
multiplication element between two of the three multiplies I needed to compute.&lt;/p&gt;

&lt;p&gt;Alternatively, what if the signal didn’t arrive at a rate of every other clock,
but would arrive no faster than every third clock?  I might then share the
hardware multiply between the three separate multiplies I needed to calculate.&lt;/p&gt;

&lt;p&gt;You can see the possibilities in Fig 9 on the right.&lt;/p&gt;
&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Multiplies per FFT stage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-dsp-cost.png&quot; alt=&quot;541&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This required modifying my &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware butterfly
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I managed to do this without too much fanfare, and without much work I modified
my bench test and could get the hardware
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; to pass.  I did
the same for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;regular (non-hardware assisted)
butterfly&lt;/a&gt;
as well.  The problem was that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
kept failing in practice.  It passed the component bench testing step,
but yet still failed.&lt;/p&gt;

&lt;p&gt;In frustration, I switched verification methods to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hadn’t wanted to do this at first.  I am painfully aware that
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
really struggle to handle multiplies, and these butterfly implementations both
depended heavily upon the multiply.  How could I test an algorithm that
required multiplies, without running into this trouble?&lt;/p&gt;

&lt;p&gt;The solution for me came from the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
concept of abstraction, something I have yet to discuss on this blog.
(It’s a part of my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
&lt;a href=&quot;/projects.html&quot;&gt;class&lt;/a&gt;,
and on my to do list for the blog.)&lt;/p&gt;

&lt;p&gt;We’ll start with the basics.  Here was the code I wanted to verify.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Third clock, pipeline = 3
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//   As desired, each of these lines infers a DSP48
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;rp_one&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1c_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rp_two&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2c_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rp_three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3c_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From processing the previous two modules, I knew how to set up a verification
test of the result: I’d copy the inputs into a memory delay line on every
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;, and then verify the result at the end given the incoming values.&lt;/p&gt;

&lt;p&gt;I also knew that the hard multiply implementation “worked”.  This was the one
using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s.
Hence I didn’t need to verify that the multiply worked.  Any tool that
allowed me to do this was one where the multiply was supported and worked.
I was willing to trust my tools.&lt;/p&gt;

&lt;p&gt;I wasn’t willing to trust &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;my own multiplication
implementation&lt;/a&gt;–but
we’ll come back to that in a moment.&lt;/p&gt;

&lt;p&gt;So I replaced the hardware multiplies with something that was nearly equivalent,
an abstraction.  In &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/abs_mpy.v&quot;&gt;this
abstraction&lt;/a&gt;,
the results were allowed to be any value,
chosen by the tools, but meeting three criteria: 1) zero times anything is
zero, 2) one times anything preserves the initial value, 3) negative one
times anything negates the other operand, and 4) the same concept, but
applied to higher powers of two instead of just one.  &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/abs_mpy.v&quot;&gt;This
abstraction&lt;/a&gt;
isn’t really a multiply, it just maintains some of the properties of
multiplication.&lt;/p&gt;

&lt;p&gt;You can examine it here in the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/abs_mpy.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;abs_mpy.v&lt;/code&gt;
file&lt;/a&gt;
if you would like.&lt;/p&gt;

&lt;p&gt;So, I replaced my multiplies with this abstraction.  Here it is for the
highest speed case where a data value could come in at any time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pre_rp_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pre_rp_three&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;abs_mpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;onei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1c_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;abs_mpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;twoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2c_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;abs_mpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;threei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3c_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rp_one&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rp_two&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rp_three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_three&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then later, within the formal property section of the code, I allowed the
formal tool to pick what data would come into the core and what coefficient
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;)
would come in.  I insisted upon my rules of multiplication
with one and zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Start by double checking that our delay line is valid,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// similar to f_past_valid
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_startup_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_sr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sumrx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_si&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sumix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aux_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_dlyaux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_difrx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_difix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;f_difrx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_widecoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_widecoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_widecoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;f_widecoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I found an amazing number of bugs in this fashion.&lt;/p&gt;

&lt;p&gt;Even better, the proof completes.&lt;/p&gt;

&lt;p&gt;The only problem was, at this point in my development, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; still didn’t
work.&lt;/p&gt;

&lt;p&gt;So I kept working.&lt;/p&gt;

&lt;h4 id=&quot;the-soft-butterfly&quot;&gt;The Soft Butterfly&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; has a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;second
butterfly implementation&lt;/a&gt;,
one that uses no hardware
accelerated multiplies.  Instead, it uses a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;(rather poor) multiplication
implementation&lt;/a&gt;
in logic.  I say &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;this
implementation&lt;/a&gt;
is rather poor simply because I haven’t yet optimized it, and because I know
that &lt;a href=&quot;https://github.com/ZipCPU/fwmpy&quot;&gt;better implementations&lt;/a&gt; exist.
In my case, I wanted a single multiplication implementation that could be
parameterized and yet apply to all bit-widths.  Worse, that implementation
needs to know what its own processing delay is.  My bare-bones,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;basic implementation&lt;/a&gt;
does all of the above, it just could be better.  &lt;a href=&quot;https://github.com/ZipCPU/fwmpy&quot;&gt;My own optimmized
multiplication implementations&lt;/a&gt; doesn’t meet
this criteria.&lt;/p&gt;

&lt;p&gt;In the story of this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
development, it was this part of the implementation
that was most problematic for me.  I didn’t dare replace the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;hand-built
multiply&lt;/a&gt;
within it with some abstraction, primarily because I didn’t trust it: I was
always concerned there was a latent bug within the multiply.  For
example, what if I didn’t get the delay right?&lt;/p&gt;

&lt;p&gt;This was also the stage that was responsible for several bugs that were a pain
to chase down.&lt;/p&gt;

&lt;p&gt;I ran &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;bench tests&lt;/a&gt;
on this stage in all three modes: continuous &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;s,
one clock between &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;s, and two clocks between &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;s.  When the design
failed, I adjusted each of these three elements to randomly include another
clock step with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; false.  The tests would pass, and the design would fail.&lt;/p&gt;

&lt;p&gt;The bug, as it turns out, was quite subtle.&lt;/p&gt;

&lt;p&gt;Because the delay within my &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;hand-made
soft-multiply&lt;/a&gt;
was dependent upon the bit width, and because this was captured by
a parameter, and because the way I set up my
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
tests only one parameter set was getting tested despite multiple parameters
(and hence multiply delays) being used by the full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;bench test&lt;/a&gt;
might pass for one set of multiplication bit-widths
and fail for the set that wasn’t bench tested.&lt;/p&gt;

&lt;p&gt;I didn’t find this bug until I started using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;,
although technically my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
approach suffers from the same problem of only testing some multiplication
bit-widths.&lt;/p&gt;

&lt;p&gt;For this &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;soft
butterfly&lt;/a&gt;,
I call it &lt;code class=&quot;highlighter-rouge&quot;&gt;butterfly.v&lt;/code&gt;, I created the same basic
properties I had been using for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware assisted
butterfly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To my immense relief, &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;this
butterfly&lt;/a&gt;
 failed to pass
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
(initially).  Indeed, it failed very quickly.  Why was this to my relief?
Because I had been struggling to find the bug.  It turns out, the bug was
associated with the remainder of the multiplication delay divided by two
or three–depending upon the mode.  A subtly different timing implementation
was required for each remainder, and I found that by using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, I could’ve found this using my test bench as well.  I just had two problems
when using it: First, I didn’t trust that it would try the right input
combination to trigger the bug.  Second, I was getting really tired of working
through GB &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I know what the problem was, the proof requires proving the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; for multiple
different potential parameter sets.
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; handles this nicely
using tasks–something I haven’t discussed much on the blog.  You can see the
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/butterfly.sby&quot;&gt;script I used here&lt;/a&gt;,
which includes the multiple task definitions if you are interested.&lt;/p&gt;

&lt;p&gt;My problem with this proof is that while it quickly found my bugs in minutes,
it struggled to prove that there are no bugs.  By “struggled” I mean the took
multiple days–so long that I never let it finish.&lt;/p&gt;

&lt;p&gt;So I dug back into the proof.  I set up criteria within every stage of the
multiply to guide the proof: if multiplying by zero, the result in the middle
should be zero, if by one, etc.  I could then verify that the multiply
would truly return zero on a zero input, or return the same value on a one
input.&lt;/p&gt;

&lt;p&gt;This still took forever.&lt;/p&gt;

&lt;p&gt;The difficulty of this proof is also why this article took so long to write.
I had the essential proofs working early on, but this one proof just seemed
to take forever.&lt;/p&gt;

&lt;p&gt;Part of the issue here is, how long are you willing to wait for a proof to
return?  I personally want my proofs to all return within about fifteen minutes.
I’ll tolerate two to three hours, but not without grumping about it.  However,
this proof was taking over 72 hrs+ before I’d kill it.  This is unacceptable.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. Butterfly RTL components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-butterfly-hierarchy.svg&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To understand the problem, consider Fig. 10.  I had verified the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;long binary
multiply implementation, &lt;code class=&quot;highlighter-rouge&quot;&gt;longbimpy&lt;/code&gt;&lt;/a&gt;.
I just wanted to prove some simple properties about the result, based upon the
initial values given to the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;.
I wanted to verify that my estimate of the number of clocks
required by the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;long binary
multiply&lt;/a&gt;
 matched the length of my FIFO.  I wanted
to verify that the coefficients and inputs still matched the outputs, and that
one coefficient wasn’t getting confused with another piece of data.&lt;/p&gt;

&lt;p&gt;To do this, I insisted that a zero coefficient must result in a zero result.
A one coefficient must duplicate the data, and vice versa for the data.  These
are bare simple multiplication properties, but though they are simplistic
they are sufficient for verifying if the right inputs are given to the
multiplies, and if the matching results are drawn from them.&lt;/p&gt;

&lt;p&gt;After about two weeks of running 48+ hrs proofs that I’d never allow to
complete, I finally figured out how to bring the solution time down to
something more reasonable.  The trick?  Asserting that the inputs to the
multiply matched the butterflies copy of what those inputs were.  This last
assertion connected the proofs taking place within the multiply, with the
proofs that were about to take place on the multiply’s outputs.&lt;/p&gt;

&lt;p&gt;This necessitated a change to the portlist of the multiply, a change that
only needs to be made for the formal proof and not otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;longbimpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_unsorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_unsorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_r&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_a_unsorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_b_unsorted&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;unsorted&lt;/code&gt; post-fix above references the number of bits in the values &lt;code class=&quot;highlighter-rouge&quot;&gt;i_a&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_b&lt;/code&gt;.  The algorithm internally sorts these two values so that the values
with the most bits is in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_b&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;*_unsorted&lt;/code&gt; values just describe the
values before the bitwidth sort.&lt;/p&gt;

&lt;p&gt;Then, internal to the butterfly itself, I assert that the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_a_unsorted&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_b_unsorted&lt;/code&gt; values match the ones within the module.  There’s a
bit of unwinding that needs to take effect, though, since the those values can
refer to any of the multiplies inputs depending upon the time step.  That
places these values into &lt;code class=&quot;highlighter-rouge&quot;&gt;fp_*_ic&lt;/code&gt; for the coefficient and &lt;code class=&quot;highlighter-rouge&quot;&gt;fp_*_id&lt;/code&gt; for
the data.&lt;/p&gt;

&lt;p&gt;The last step is to verify these two values match, for all three of the
multiplication input sets.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_startup_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_one_ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_two_ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_one_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_two_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_three_ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_p3c_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_three_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_p3d_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That assertion was sufficient to bring the proof time down from days to hours.&lt;/p&gt;

&lt;p&gt;I can handle hours.  I can’t handle days.&lt;/p&gt;

&lt;h4 id=&quot;full-fft-stages&quot;&gt;Full FFT Stages&lt;/h4&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. A Decimation in Frequency Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-fftstage.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Because the butterflies were so hard to prove, I hadn’t spend much time
trying to formally verify the separate &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; stages.  I had just tested and
verified that these worked using the traditional bench testing method–using
carefully chosen and random inputs.&lt;/p&gt;

&lt;p&gt;Then, later, I got to thinking: this FFT implementation is &lt;em&gt;so&lt;/em&gt; close to having
a full formal verification proof, why not just add this last piece to the
set?  So I dug into the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; stage component.&lt;/p&gt;

&lt;p&gt;In the language of this core generator, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; stage is that portion of the
core that accepts inputs and feeds a single radix-2 butterfly.  This
means, for an &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;-point FFT stage, the core needs to read &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; values into
memory, and then apply these values, the next &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; input values, and a stored
ROM coefficient to the butterfly core.  This butterfly core will return a pair
of values some number of clocks later.  The data then need to be separated
again.  One output value from the butterfly needs to go immediately to the
output, the other value must go into memory.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; values are output,
the butterfly becomes idle and the stored &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; values can be returned.&lt;/p&gt;

&lt;p&gt;Could this piece be &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Yes, it can.  To do this, though, I replaced the butterfly implementation
with a similar abstract implementation–like I had with the hardware multiply
when verifying the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;-enabled butterflies.
This abstract butterfly implementation returned arbitrary values selected by
the formal engine.  It also had a multiplication delay within it that would
be chosen by the formal engine, so that one proof could be made independent
of the final butterfly implementation and multiplier delay.&lt;/p&gt;

&lt;p&gt;Once done, the basic proof simply followed the &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;three basic memory
properties&lt;/a&gt;.
That is, I allowed the formal engine to pick an arbitrary address to the input
to the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftstage.v&quot;&gt;FFT
stage&lt;/a&gt;,
and then created a property to describe the inputs to the butterfly
on the clock of this address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyconst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any time the first value
to the butterfly showed up and got placed into memory, I’d capture that
value and assert that it remained in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I did the same on the second piece of data to enter the core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;f_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then asserted that these values would be sent to the butterfly one
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ib_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ib_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ib_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you notice how I checked that the coefficient, &lt;code class=&quot;highlighter-rouge&quot;&gt;ib_c&lt;/code&gt;, matched the ROM
memory, &lt;code class=&quot;highlighter-rouge&quot;&gt;cmem&lt;/code&gt;, for this value?  This is all the proof required for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then used roughly the &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;same set of properties
properties&lt;/a&gt;
on the other side of the butterfly.&lt;/p&gt;

&lt;p&gt;While I’d like to say that formally verifying this
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftstage.v&quot;&gt;FFT stage&lt;/a&gt;
helped me find some latent bug, that wasn’t the case this time.  Once
I debugged the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
properties, this part of the core “just worked.”&lt;/p&gt;

&lt;p&gt;The only thing was, I noticed that the block RAM read on the output path
wasn’t optimized for all block RAM implementations.  (Some internal RAM
reads require the result be registered.)  Because of the
formal properties, when I changed this implementation to something
more portable and better, I could make this change with confidence.&lt;/p&gt;

&lt;h4 id=&quot;how-much-was-verified&quot;&gt;How much was verified?&lt;/h4&gt;

&lt;p&gt;I like to say that I have formally verified the entire FFT.  You might even
hear me boasting of this.  This isn’t quite true.  I only verified &lt;em&gt;most&lt;/em&gt;
of the FFT.  (Queue the Princess Bride “mostly
dead quote here …)  I didn’t formally verify that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factors&lt;/a&gt;
were right, that the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;soft multiply
worked&lt;/a&gt;,
or that the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftmain.v&quot;&gt;top
level&lt;/a&gt; was
properly wired together.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 12. Proven components of the Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-proven.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To see how much was
formally verified, consider Fig 12 on the left.  Everything
but the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;long binary multiply,
&lt;code class=&quot;highlighter-rouge&quot;&gt;longbimpy&lt;/code&gt;&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftmain.v&quot;&gt;toplevel,
&lt;code class=&quot;highlighter-rouge&quot;&gt;fftmain&lt;/code&gt;&lt;/a&gt;,
has been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also only verified the components for particular parameter settings, not
necessarily the settings used within the generated design.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;soft binary multiply,
longbimpy&lt;/a&gt;,
was &lt;em&gt;functionally&lt;/em&gt; verified (i.e. verified by &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/mpy_tb.v&quot;&gt;test
bench&lt;/a&gt;),
in an exhaustive sense.  By that I mean that for a particular number of
coefficient bits, I tested every single multiply input looking for
problems.  While this may be overkill,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
was fast enough to do this in less than a minute.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Does your design need an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;?
Please consider
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core generator&lt;/a&gt;
for that purpose.  Using
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core generator&lt;/a&gt;,
you can create roughly any
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation.
Even better, because the core is completely open source, you can use this
implementation within a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
simulation in a way you’d never be able to do with a proprietary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; core generator.&lt;/p&gt;

&lt;p&gt;The second point I’d like to draw from this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; discussion is that,
yes,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
is up to an industrial formal verification task.  It can be applied to very
complex designs (no pun intended), piece by piece, just like we did with &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this
FFT core generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also note that we didn’t formally verify
the entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
at once.  Neither did we formally verify that known input test vectors would
produce known output vectors.  If we did our job right, this will be a
consequence.  Somehow I just still didn’t trust the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
until running known data signals through it.  Hence, I still used
simulation to ultimately verify that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
as a whole was working.&lt;/p&gt;

&lt;p&gt;Finally, if you’ve checked out my &lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;FFT-Demo&lt;/a&gt;
at all, you’ll see that an entire design using both co-simulated A/D,
&lt;a href=&quot;https://github.com/ZipCPU/fftdemo/blob/master/rtl/subfildown.v&quot;&gt;downsampling
filter&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, and
VGA output can all be simulated together.  In that case, all of the
components have been verified, but the full simulation of the entire
design is still very valuable.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;He that withholdeth corn, the people shall curse him: but blessing shall be upon the head of him that selleth it. (Prov 11:26)&lt;/em&gt;</description>
        <pubDate>Tue, 02 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/dsp/2018/10/02/fft.html</link>
        <guid isPermaLink="true">https://zipcpu.com/dsp/2018/10/02/fft.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>It&#39;s time for ORCONF 2018!</title>
        <description>&lt;p&gt;It’s time again for &lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt;!  For those who are not
familiar with &lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt;, I like to think of it as the
premier conference discussing &lt;a href=&quot;https://fossi-foundation.org&quot;&gt;Free and Open Source Silicon
(FOSSI)&lt;/a&gt;.  You can read more about the
&lt;a href=&quot;https://orconf.org&quot;&gt;conference here&lt;/a&gt;, or even read the &lt;a href=&quot;https://orconf.org/#presentations&quot;&gt;abstracts of the
presentations here&lt;/a&gt;,
although this latter link is likely to go stale before ORCONF-2019.
&lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt; tends to be a small conference, and nothing like
the giant IEEE conferences I’ve been to in the past.  I see this as a good
thing, because it means I will actually have a chance to meet and say hello
to everyone there.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/verilator_256_200_min.png&quot; alt=&quot;&quot; width=&quot;256&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This year, among the many wonderful presentations that I lined up, I am
especially looking forward to &lt;a href=&quot;https://www.veripool.org/users/3&quot;&gt;Wilson
Snyder&lt;/a&gt;’s presentation on a multithreaded
version of &lt;a href=&quot;https://www.veripool.org/projects/verilator/wiki/Intro&quot;&gt;Verilator&lt;/a&gt;.
That could really transform my simulations!&lt;/p&gt;

&lt;p&gt;Here’s his abstract:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; 4.0 - Open Simulation Goes Multithreaded&lt;/p&gt;

  &lt;p&gt;The primary author of
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;, the open source
high-speed Verilog simulator, announces fresh for this meeting
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; 4.0 with
multithreading, and how you can get your designs the fast(est),
free simulation.&lt;/p&gt;

  &lt;p&gt;Presented by &lt;a href=&quot;https://www.veripool.org/users/3&quot;&gt;Wilson Snyder&lt;/a&gt;, one of the
primary authors of Verilator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/orconf-2018-title.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I will also be presenting this year, as I have the last two.  My title is:
Lessons learned while formally verifying the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is a three-year old CPU
and &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ISA&lt;/a&gt; designed for
low logic FPGA’s.  One of the challenges of any CPU design, to include the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, is coming up with a
sufficiently robust test suite to exercise all of the possible logic flows
within &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;.  While &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; can be used
for this task, they are traditionally viewed as too computationally
expensive to formally verify something as complex as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;Contrary to this view, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has now been formally verified using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;.  As a result,
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;many bugs have been found and
fixed&lt;/a&gt;-bugs not
found previously using &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;canned test
cases&lt;/a&gt;.  Not only
that, it has also &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;become easier to
modify&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;the core
CPU&lt;/a&gt; as
necessary to achieve lower logic utilization, knowing that the solver will
find any bugs in the updated implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you haven’t chosen to join us at &lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt;, then rest
assured the staff are really good at posting the various presentations later.
I will also post a copy of my slides on GitHub and link to them here, &lt;a href=&quot;/blog/2017/09/12/orconf-2017-return-home.html&quot;&gt;as I
did last year&lt;/a&gt;.
This is a small consolation, though, for missing the richness of actually
meeting and discussing digital design topics with the likes of those who
will be attending, or the opportunity to ask questions of the speakers.&lt;/p&gt;

&lt;p&gt;On the other hand, if you will be joining us, then please take a moment to
introduce yourself!  I’d love to have the opportunity to meet those who
have encouraged me over the last couple of years.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Making request, if by any means now at length I might have a prosperous journey by the will of God to come unto you.  (Rom 1:10)&lt;/em&gt;</description>
        <pubDate>Tue, 18 Sep 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/09/18/orconf-2018.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/09/18/orconf-2018.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
