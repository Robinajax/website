<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstreeam FPGA design courses such as how to debug an FPGA design.
</description>
    <link>http://zipcpu.com/</link>
    <atom:link href="http://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Nov 2017 10:54:56 -0500</pubDate>
    <lastBuildDate>Fri, 10 Nov 2017 10:54:56 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>http://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>A Configurable Signal Delay Element</title>
        <description>&lt;p&gt;It’s always fun to design something simple every now and then–something that
doesn’t take too much thought, yet still fits a needed place in something you
are building.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Signal Delay Element&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/delayw.svg&quot; alt=&quot;Block Diagram showing the concept of a delay element: the incoming data line is split, one line gets delayed, both go through flip flops&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Today, let’s look at a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;.
This is a fundamental
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;signal processing&lt;/a&gt;
operation that takes a single stream and creates two streams–with the second
stream delayed by some programmable amount of samples from the first one.&lt;/p&gt;

&lt;p&gt;This is actually a very common
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;signal processing&lt;/a&gt;
need.  Imagine if you will that you had one piece of processing code that was
applied to the input, took many samples (&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;) to accomplish, and that the
result of this processing told you how to lock onto the signal that began
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; samples ago.&lt;/p&gt;

&lt;p&gt;A classic example of this would be a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;burst preamble&lt;/a&gt;–a
known sequence that occurs at the beginning of a burst transmission
to help you to synchronize to that transmission.  However, once synchronized,
you then want to go back and process any samples immediately following that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;.  Should you have any
delay in your &lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;
processing chain, then you’d need to go “back in time” to start processing
your signal immediately following this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;.  This is one purpose of a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, just for fun and to have a change-up from some more serious
and complex topics, let’s examine a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;simple delay
element&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pseudocode&quot;&gt;Pseudocode&lt;/h2&gt;

&lt;p&gt;At first blush, the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;logic for a delay
element&lt;/a&gt;.
seems quite simple: just delay the incoming samples by some variable amount.
Indeed, you might wish to start coding the algorithm together immediately
(I did).  You’d start with a delay of zero, and then build the logic for the
delay of one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
begin
	if (i_delay == 0)
	begin
		o_word &amp;lt;= i_word;
		o_delayed &amp;lt;= i_word;
	end else if (i_delay == 1)
	begin
		o_word &amp;lt;= i_word;
		o_delayed &amp;lt;= o_word;
	end else begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you’d get stuck.&lt;/p&gt;

&lt;p&gt;It’s right here at this point in the pseudocode that you need to transition
to a block RAM delay, and so you need a memory value read from block RAM.
We’ll call this value &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		o_word &amp;lt;= i_word;
		o_delayed &amp;lt;= memval;
	end
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ok, so we’ll need a memory.  That means we are going to want to write our
data into memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	mem[wraddr] &amp;lt;= i_word;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are also going to want to read it back out.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	memval &amp;lt;= mem[rdaddr];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And in order to make this all work, we’re going to need some memory address
manipulation code.  Most of this is straight boilerplate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
begin
	if (i_reset)
	begin
		wraddr &amp;lt;= 0;
		rdaddr &amp;lt;= ... // Something ... but what?
	end else if (i_ce)
	begin
		wraddr &amp;lt;= wraddr + 1&#39;b1;
		rdaddr &amp;lt;= rdaddr + 1&#39;b1;
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The read address, though, is not boilerplate.  It needs to be related to the
write address.  Indeed, this is perhaps the &lt;em&gt;only&lt;/em&gt; difficult part of building
a signal &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
element&lt;/a&gt;
such as this.&lt;/p&gt;

&lt;p&gt;So how should the read address relate to the write address?&lt;/p&gt;

&lt;p&gt;The first answer in this case would be that the read address should be less
than the write address by &lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; elements.  When you then try this code
within a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test bench&lt;/a&gt;,
you’ll find that this choice just doesn’t work.&lt;/p&gt;

&lt;p&gt;So let’s think this through a touch more.&lt;/p&gt;

&lt;h2 id=&quot;scheduling-the-memory-pipeline&quot;&gt;Scheduling the Memory Pipeline&lt;/h2&gt;

&lt;p&gt;To get the read and write address correct, let’s examine how our signals
would move through this pipeline.  We can build a pipeline schedule as we’ve
done before on &lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;.  You can see
the schedule for our delay logic shown in Fig 2.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Signal Delay Element&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/delayw-pipeline.svg&quot; alt=&quot;The stages of the delay pipeline&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic concept of this diagram is that variables that are valid at one
time step lead to new variables that are valid on the next.  So if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt;
is valid on one time step, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; will be valid on the next.  Likewise
if we write &lt;code class=&quot;highlighter-rouge&quot;&gt;i_data&lt;/code&gt; to memory using the &lt;code class=&quot;highlighter-rouge&quot;&gt;wraddr&lt;/code&gt; signal on one time step,
then the memory element, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem[wraddr]&lt;/code&gt; will have that value on the next time
step.&lt;/p&gt;

&lt;p&gt;Let’s follow what happens to this memory a touch further.  If after writing
to memory we immediately read from it into &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;, that will require a
read address, &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr&lt;/code&gt;.  We can then place this &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; into our output
delay element, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_delayed&lt;/code&gt; and be done.&lt;/p&gt;

&lt;p&gt;So how many clocks did that take?  Two.  Count the difference between when
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_delay&lt;/code&gt; was produced and when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_data&lt;/code&gt; was produced.  This is then our
minimum delay when using memory: two clocks.&lt;/p&gt;

&lt;p&gt;If you’ve been following this blog, you may remember going through this same
exercise when we &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;built a moving average
filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here, we can work out how the read address corresponds to the write
address.  In particular, if &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr == wraddr-1&lt;/code&gt;, then we are delaying by
two.  So what we want, then, is to have &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr = wraddr+1-i_delay&lt;/code&gt; and
that’s all the missing logic required to make this work.&lt;/p&gt;

&lt;p&gt;Ok, I’ll admit … I didn’t put any time into figuring out how to schedule
the pipeline.  I just built it wrong, and then adjusted the relationship between
&lt;code class=&quot;highlighter-rouge&quot;&gt;wraddr&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr&lt;/code&gt; in the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
until I got things right.  That should help illustrate for you, though, the
&lt;a href=&quot;/blog/2017/06/23/my-dbg-philosophy.html&quot;&gt;power of building a test bench and
simulating&lt;/a&gt;–rather
than just implementing something and then wondering what went wrong later.&lt;/p&gt;

&lt;h2 id=&quot;building-this&quot;&gt;Building this&lt;/h2&gt;

&lt;p&gt;So let’s build our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;final delay
element&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Much of this logic is the logic you might expect from our discussion above.&lt;/p&gt;

&lt;p&gt;For example, we need to increment the write address on every sample.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	wraddr = 0;
	always @(posedge i_clk)
		if (i_ce)
			wraddr &amp;lt;= wraddr + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may notice that this write address doesn’t depend upon a reset signal.
The reason is simply because it doesn’t need to.  As long as it increments by
one on every clock from whatever address it’s at, it will work.&lt;/p&gt;

&lt;p&gt;Likewise we are going to want to write our incoming samples into memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (i_ce)
			mem[wraddr] &amp;lt;= i_word;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difficult trick from above was that we need to make certain that the
read address equals the write address plus one minus the delay.  Making this
happen in clocked logic is a touch more difficult–particularly because of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline control
signal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So that we can keep the read address a fixed distance from the write address
any time the delay, herein called &lt;code class=&quot;highlighter-rouge&quot;&gt;w_delay&lt;/code&gt;–you’ll see
why in a bit, changes, we’ll violate the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;rules of the global
CE bit&lt;/a&gt;
and set this on every clock.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;CE&lt;/code&gt; is valid, we set the read address
to the write address minus the delay plus two–not one.  The two allows us
to compensate for the fact that the write address is also changing on this
clock.  However, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;CE&lt;/code&gt; line is low, then the write address isn’t changing
and the logic may appear more intuitive.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	rdaddr = one;
	always @(posedge i_clk)
		if (i_ce)
			rdaddr &amp;lt;= wraddr + two - w_delay;
		else
			rdaddr &amp;lt;= wraddr + one - w_delay;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have our read address, we can simply read from memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (i_ce)
			memval &amp;lt;= mem[rdaddr];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all this information, we can now make our delay logic.  You migt recognize
this from before–the delay of zero and the delay of one samples are identical.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if (i_ce)
	begin
		if (w_delay == 0)
		begin
			o_word &amp;lt;= i_word;
			o_delayed &amp;lt;= i_word;
		end else if (w_delay == 1)
		begin
			o_word &amp;lt;= i_word;
			o_delayed &amp;lt;= o_word;
		end else begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even the delay logic, which is implemented using memory, reads just about the
same as it did before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			o_word &amp;lt;= i_word;
			o_delayed &amp;lt;= memval;
		end
	end
endmodule&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty simple, right?&lt;/p&gt;

&lt;p&gt;Well, okay, so let’s get one touch fancier.  Right now this
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;
works off of a variable, user-selectable delay.  Suppose instead that you
wanted this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
element&lt;/a&gt;
to use a fixed delay instead.  You could just feed a constant value to
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; and allow the optimizer within the synthesizer to handle
everything that follows.  We’ll take a separate approach here.  We’ll
capture this desired fixed delay with a &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_DELAY&lt;/code&gt; parameter, and then use
this parameter to determine the delay any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_DELAY != 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;w_delay&lt;/code&gt; item I said we’d touch on later?  This value is set to
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_delay&lt;/code&gt; when the parameter isn’t forcing the delay amount, and &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_DELAY&lt;/code&gt;
when it is.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	w_delay = (FIXED_DELAY != 0) ? FIXED_DELAY : i_delay;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s a nice improvement to our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
component&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still, the overall design isn’t all that different from the one we started
out with–even with the details filled in.&lt;/p&gt;

&lt;h2 id=&quot;building-a-test-bench&quot;&gt;Building a Test Bench&lt;/h2&gt;

&lt;p&gt;Since this is a fairly simple component, we can discuss the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test bench&lt;/a&gt;
before we finally conclude–rather than separating the test bench into a
separate post.  The &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
for this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay
element&lt;/a&gt;
follows from the same principles I laid out
&lt;a href=&quot;/blob/2017/06/21/looking-at-verilator.html&quot;&gt;earlier&lt;/a&gt;,
when we examined
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;.
Basically, when you are using
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
your &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
is a C++ program that interacts with your design, and then compares
the responses from the design to known responses that we might expect.&lt;/p&gt;

&lt;p&gt;We’ll capture our parameters before starting, since our test will be dependent
upon them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTESTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setting up the main program itself is fairly boilerplate.  You need to make
certain you call the &lt;code class=&quot;highlighter-rouge&quot;&gt;commandArgs&lt;/code&gt; function to initialize
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;.
We’ll then declare our test class–wrapping it within the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/testb.cpp&quot;&gt;TESTB&lt;/a&gt;
class so that we can get clock ticks, resets, and 
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
generation code for free.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Verilated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vdelayw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first task will be to open a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace file&lt;/a&gt;
so that we can debug any problems later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opentrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delayw.vcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll reset our core, so that we can start this test in a known state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may recall from our &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;first formal methods
post&lt;/a&gt;
the problem associated with testing a reset in a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;:
that there are more combinations of when a reset can happen with respect to this
logic than I have the creativity to imagine.  It’s a problem we’re going to
ignore here, but a valid one and hence one worth remembering.&lt;/p&gt;

&lt;p&gt;We’re going to need our own copy of the delay memory, so that we can also create
our own delay here in C++ to compare the unit under test to.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s run our test across every delay that this
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;
may produce.
We’ll loop through each possible delay, testing and validating the results
along the way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGDLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first step, following any change in delay value, is to load up that
many values in the memory without testing any of the output delays.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To do this, we’ll generate a random number,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and to write it to our core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also record that number into our own memory copy at the same time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After loading one element per delay, we can now come back and test whether
or not the output was properly delayed.  We’ll check &lt;code class=&quot;highlighter-rouge&quot;&gt;NTESTS&lt;/code&gt; (512) of these
for each possible delay.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before, each test consists of creating a random value,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;writing that value to the core,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and recording a copy of it for ourselves.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can check whether or not the output from the core is the value from
&lt;code class=&quot;highlighter-rouge&quot;&gt;dly&lt;/code&gt; clocks ago.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_delayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, the tests are complete and all we need to do is close nicely.&lt;/p&gt;

&lt;p&gt;You may notice that, in the closing lines of the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;,
there’s no possibility for failure.  The reason is simply because a failure
to match will cause a failure above in the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statements, and so on
any failure we’ll never reach this point.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Simulation complete: %ld clocks&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_tickcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SUCCESS!!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it!  We’re all done with our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;test
bench&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you choose to look through the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/delayw_tb.cpp&quot;&gt;actual test
bench&lt;/a&gt;,
you will notice one more capability that we haven’t discussed here: a certain
amount of fuzzing the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; line.  Specifically, I ticked the clock once with
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; valid, and then ticked it some (random) number of additional clocks with
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; equal to zero–just to see if it affected the behavior of the core.
(It didn’t)&lt;/p&gt;

&lt;p&gt;All of this put together gives us confidence that this
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;
works as designed.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We’ve still got lots of other problems and examples to work through,
but it’s always fun to pick a simple one to go over that every one can
understand.&lt;/p&gt;

&lt;p&gt;For now, let’s think about what can be done with a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;delay element&lt;/a&gt;.
We’ve already discussed one example above:
synchronizing to a packet based upon a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Syncword&quot;&gt;preamble&lt;/a&gt;.
That wasn’t my purpose in building
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/delayw.v&quot;&gt;this element&lt;/a&gt;
today, though.  My own purpose is to allow me to measure the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_density&quot;&gt;Power Spectral Density (PSD)&lt;/a&gt;
in a waveform input—but we’ll leave that discussion for another day.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;But and if that evil servant shall say in his heart, My lord delayeth his coming ... (Matt 24:48)&lt;/em&gt;</description>
        <pubDate>Fri, 10 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/dsp/2017/11/10/delayw.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/11/10/delayw.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Building Formal Assumptions to Describe Wishbone Behaviour</title>
        <description>&lt;p&gt;No part of any system is as critical as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; that connects all of the
components together.  One misbehaving peripheral, or one tyrannical master,
and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
can be locked up until the next power cycle or internal reset.&lt;/p&gt;

&lt;p&gt;Making matters worse is the fact that it is very difficult to create a test
bench for every possible
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction.  Questions like, what happens if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request is abandoned, what happens if there’s a reset in the middle of the
request, what happens if … are all things that are difficult to capture
with a test bench.  This is simply due to the fundamental limitation of
test benches: they prove one path through your code, but not all paths
through your code.  From my own experience, test benches prove the “normal” path
through the code, whereas the formal methods will check for validity even
in the presence of abnormal things taking place.&lt;/p&gt;

&lt;p&gt;As a result,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interactions are ideal candidates for &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;.
Doing so, though, requires
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal rules&lt;/a&gt;
defining how the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction &lt;em&gt;must&lt;/em&gt; take place–rules which, if a peripheral or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master fails to follow, will cause the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
to fail in some fashion.&lt;/p&gt;

&lt;p&gt;Generating those rules for the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone
bus&lt;/a&gt; will be our task today.
Specifically, we’ll be looking at the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;B4 version of the Wishbone
specification&lt;/a&gt;,
and the pipeline form of interaction within
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;it&lt;/a&gt;.
Our presentation will start with a discussion of how the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
operates in general, and then a quick comparison between the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;B4&lt;/a&gt;
and &lt;a href=&quot;http://opencores.org/cdn/downloads/wbspec_b3.pdf&quot;&gt;B3&lt;/a&gt;
versions of the Wishbone specification.  We’ll then mention two other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
and point out some of the differences between the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
and these other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;.
Finally, we’ll present a list of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;
properties that can be used to verify the functionality of
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt; master.&lt;/p&gt;

&lt;h2 id=&quot;how-wishbone-works&quot;&gt;How Wishbone Works&lt;/h2&gt;

&lt;p&gt;If you are not familiar with how a
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
works, it is perhaps one of the simpler
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementations out there.
Here on &lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;
we’ve already discussed &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;how to build a Wishbone
slave&lt;/a&gt;.  We’ve
even walked through &lt;a href=&quot;/blog/2017/06/08/simple-wb-master.html&quot;&gt;how to build a Wishbone bus
master&lt;/a&gt;, and a basic
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;Wishbone
interconnect&lt;/a&gt;
as part of our &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus
implementation&lt;/a&gt; series.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Wishbone has two channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-wb-channels.svg&quot; alt=&quot;Two channels in a Wishbone bus&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;From a high level standpoint, the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
supports two channels of
information: a request channel which can be used to request either a read
or a write, and an acknowledgement channel which acknowledges the
transaction.  Further, while the request channel can be stalled at the slave’s
request, the response channel cannot.&lt;/p&gt;

&lt;p&gt;In order to dig in further, we’ll choose to examine the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
from the perspective of the master.  That means we’ll use the terms
given in Fig 2 for our &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
components:&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2: Wishbone Bus terms&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-wb-terms.svg&quot; alt=&quot;Wishbone logic names&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This name translation is mostly about conforming to &lt;a href=&quot;/about/gisselquist-technology.html&quot;&gt;Gisselquist
Technology&lt;/a&gt;’s
strict naming conventions: inputs begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_&lt;/code&gt;, outputs with &lt;code class=&quot;highlighter-rouge&quot;&gt;o_&lt;/code&gt;,
in/outs with &lt;code class=&quot;highlighter-rouge&quot;&gt;io_&lt;/code&gt;.  After that, I group all of the wires associated
with a particular interface together, and hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;_wb_&lt;/code&gt;.  For those
components I’ve worked on with two Wishbone interfaces, such as &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/busdelay.v&quot;&gt;this delay by
one clock IP
component&lt;/a&gt;,
I’ll give the other &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
another name such as &lt;code class=&quot;highlighter-rouge&quot;&gt;_dly_&lt;/code&gt; for the delayed
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.  Later on in this
post, I may reference bus wires by the specification name bus drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;_O&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;_I&lt;/code&gt; suffix when it is clear what I am referencing.&lt;/p&gt;

&lt;p&gt;By way of an introduction, let’s walk through a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request, such as the one shown in Fig 3.&lt;/p&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 3: A single Wishbone bus request&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/prefetch.svg&quot; alt=&quot;The trace for a single Wishbone bus request, as drawn from the ZipCPU prefetch&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This example is drawn from the single-instruction
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch&lt;/a&gt;.
That particular &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;
is the simplest of the four prefetch modules the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
supports, in that it only handles a single request at a time–perfect
for an introductory discussion!&lt;/p&gt;

&lt;p&gt;So, let’s walk through the steps in this request.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
starts out idle.  This idle is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt;
both being low.&lt;/p&gt;

    &lt;p&gt;While the bus is idle, none of the other signals are relevant–save that
the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt; insists that
the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; line be low.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master chooses to start a transaction, it raises the
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line.  On the same clock, the master places a request on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
This means that the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; is raised and the address is placed on
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr.&lt;/code&gt; Since this is a read request, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; is held low.&lt;/p&gt;

    &lt;p&gt;Had this been a write request, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; would’ve been raised, the data
to be written would be placed on &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_sel&lt;/code&gt; would be
filled out with one bit per byte in &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; indicating which bytes
are actually going to be written.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From here we move to the slave.  The slave has the opportunity to tell the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master that it’s not (yet) ready to receive the request.  It
does this by holding the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stall&lt;/code&gt; line high.  As soon as
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; is true and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stall&lt;/code&gt; is false, the request has been
accepted.&lt;/p&gt;

    &lt;p&gt;There are many reasons why a slave might not be ready to receive a request,
but most of the ones I’ve dealt with surround either the slave being busy
with its initialization sequence or processing another interaction.
For example, the &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;
for the
&lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;XuLA-LX25 SoC project&lt;/a&gt; requires
over 20k clocks to start up.  Once started, it can only transmit 16-bits
to or from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronous_dynamic_random-access_memory&quot;&gt;SDRAM&lt;/a&gt;
at a time.  For this reason, after startup, the &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;SDRAM
controller&lt;/a&gt;
needs to stall the bus during every other incoming transaction so as to
allow &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc/blob/master/rtl/wbsdram.v&quot;&gt;the SDRAM
controller&lt;/a&gt;
time to send (or receive) both 16-bit halves of any 32-bit transaction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the master has made its request of the slave, it
drops &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; on the first clock after &lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt;,
since at this point it knows that the slave has received its request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the slave’s response is ready, the slave will raise the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt;
line and places the data that’s been read (if this were a response to a read
request) onto the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the master sees the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; high, it ends the request by dropping
the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line and the transfer is complete.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simple, no?
Let’s try another example.&lt;/p&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4: A pair of Wishbone bus requests&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/dblfetch-ram.svg&quot; alt=&quot;The trace for a pair of Wishbone bus requests, as drawn from the ZipCPU prefetch named dblfetch&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig 4 shows an example, drawn from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;dblfetch
module&lt;/a&gt;.
This is another one of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s prefetch modules, with the
difference being that this one makes two back to back requests of the slave.&lt;/p&gt;

&lt;p&gt;This example starts out just like the last example.  However, once into
the example, there are some differences.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Instead of dropping &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; after the first time
&lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt;, the master leaves &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; high and
initiates a second request.  A new address is placed into &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_addr&lt;/code&gt; for
this second request as well.  Only after the second time
&lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt; is true does &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;this
master&lt;/a&gt;
release the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stb&lt;/code&gt; line, having now finished making both requests.&lt;/p&gt;

    &lt;p&gt;Since this example is being drawn from a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;prefetch&lt;/a&gt;
module, the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; line
is kept low.  Had this been a write request to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_we&lt;/code&gt; would’ve been kept high for this second request, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_sel&lt;/code&gt; would’ve been set as appropriate for a second
write request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The slave now response with two clocks with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; high.  The first
time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; is high, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; is set to the result of reading the
first address request.  On the second &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; contains
the results of reading from the second address.&lt;/p&gt;

    &lt;p&gt;It’s worth noting here that the two acknowledgements do not need to come
back to back.  On slower peripherals they may be separated by one or more
clocks.&lt;/p&gt;

    &lt;p&gt;Also, had the request been a write request instead of a read request,
everything would be the same at this step except that the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;
information would’ve been relevant when &lt;code class=&quot;highlighter-rouge&quot;&gt;(o_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall)&lt;/code&gt; while
the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data&lt;/code&gt; returned information would’ve been ignored.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;the
master&lt;/a&gt;
has received the responses from both requests, as evidenced
by the second &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; being returned, it ends the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle by lowering &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt;.  Once done, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
becomes idle again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s really all there is to it.  The whole of this is really quite simple.&lt;/p&gt;

&lt;p&gt;Or is it?  Once I started trying to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally prove&lt;/a&gt;
that a master and a slave were properly “behaving”, the formal solver started
to find more and more cases of interest.  For example,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when the master drops the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line mid-request?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when the slave never responds?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when the master wishes to change the request mid-cycle?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these are questions that will need to be answered in order to develop
a list of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;Wishbone
properties&lt;/a&gt;
to describe this interaction.&lt;/p&gt;

&lt;h2 id=&quot;wishbone-classic&quot;&gt;Wishbone Classic&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone specification&lt;/a&gt;
also defines another type of interaction, this one
known as “Wishbone classic”.  It is defined in both the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt; version of the standard,
as well as the original
&lt;a href=&quot;https://cdn.opencores.org/downloads/wbspec_b3.pdf&quot;&gt;Wishbone B3&lt;/a&gt;
version.&lt;/p&gt;

&lt;p&gt;When using the Wishbone classic version of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;,
the master is required to wait until the slave acknowledges the request
before it can start a new request, as shown in Fig 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Wishbone Classic&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-classic.svg&quot; alt=&quot;Wishbone classic trace of four requests&quot; width=&quot;680&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unlike the pipelined version of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
found in
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;, there are no stall
or strobe lines in the classic mode.  Instead, the lack of an acknowledgement
acts as a stall request.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6: Wishbone Pipeline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-pipeline.svg&quot; alt=&quot;Wishbone pipeline trace of four requests&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The unfortunate consequence of this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
implementation is that it takes
a &lt;em&gt;minimum&lt;/em&gt; of three clocks per transaction.  To illustrate this difference,
compare Fig 5 above to Fig 6 at the right showing a
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; &lt;em&gt;pipeline&lt;/em&gt;
interaction.  The pipeline mode can issue and receive the return from
one request per clock.&lt;/p&gt;

&lt;p&gt;Hence, the best case classic performance is &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; transactions in &lt;code class=&quot;highlighter-rouge&quot;&gt;3N&lt;/code&gt; clocks,
whereas for the pipeline mode you can achieve &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; transactions in &lt;code class=&quot;highlighter-rouge&quot;&gt;N+1&lt;/code&gt; clocks.&lt;/p&gt;

&lt;p&gt;The problem is compounded when you add circuit timing into the mix, since the
classic mode makes it very difficult to place synchronous/clocked components,
such as routers,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;arbiters&lt;/a&gt;,
or &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/busdelay.v&quot;&gt;delays&lt;/a&gt;,
between the master and slave without slowing down the overall system clock
speed–not just the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
throughput.&lt;/p&gt;

&lt;p&gt;The author(s) of the
&lt;a href=&quot;https://cdn.opencores.org/downloads/wbspec_b3.pdf&quot;&gt;Wishbone B3 specification&lt;/a&gt;
recognized this problem and so they offered a means of
extending the classic mode.  They extended Wishbone classic with
tag lines, both input and output, that can be optionally included with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Chief among these extra lines are the &lt;em&gt;cycle type indicator&lt;/em&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;CTI&lt;/code&gt;,
and the &lt;em&gt;burst length indicator&lt;/em&gt;.  Using these extra lines allows components
to interact from one side of a design to another.  For example, a slave can
start issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; after &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; without waiting for new requests if it knows
that further requests will be coming and that they will have incrementing
addresses.&lt;/p&gt;

&lt;p&gt;Understanding all of these other wires and indicators can add additional
complexity to a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; master.
For example, the master now needs to know which slaves support these
extra request wires and transaction types and which do not.  Likewise, the
any router or
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;arbiter&lt;/a&gt;
will need to know when these wires are relevant and when they are not, and
how shall they know this unless they decode all this extra logic?&lt;/p&gt;

&lt;p&gt;All of these are reasons the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
uses the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;
pipeline standard: it creates a single, efficient
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction standard.  If
all of the peripherals follow this same standard, then the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; (or any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master)
doesn’t need to keep track of which components interact in one fashion of the
interface and which interact in another, and slave’s don’t need to worry about
whether or not the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master will be sending additional requests or not–until
they are ready to see if an additional request is incoming.&lt;/p&gt;

&lt;h2 id=&quot;whats-missing-an-abort-capability&quot;&gt;What’s missing: an Abort Capability&lt;/h2&gt;

&lt;p&gt;There are two situations missing from the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone standard&lt;/a&gt;
that will need definition before we can discuss
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally proving&lt;/a&gt;
that a master or a slave conforms to the standard.  The first is how a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
is handled, and the second is how a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction may be aborted.&lt;/p&gt;

&lt;p&gt;We’ll start with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
There are several possible causes of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
The most obvious one is an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
generated by the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
when the given address doesn’t reference a
known slave.  Some slaves, notably those that contain
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
within them but not exclusively, may also generate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
Further, on those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
where security protections are in place, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
may be generated by a security fault.  The question is, how shall a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
be handled?&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7: Possible return signals&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-return.svg&quot; alt=&quot;Waveform diagram illustrating how all Wishbone requests result in either an ACK, RTY, or ERR return signal&quot; width=&quot;288&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone specification&lt;/a&gt;
states only that the response from a slave shall
either be an acknowledgement, a retry, or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
signal–never more than one
of these three for any transaction.  An example of this concept is shown
in Fig 7.  Fig 7 shows two transaction requests, the first ending in an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
and the second in an acknowledgement.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
indicates that a problem has or is taking place.  It isn’t immediately clear
how a successful transaction might follow one that is in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
As a result, the acknowledgement following an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
doesn’t really make sense.  Instead, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction really needs to be immediately terminated.&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 8: A different approach to Wishbone bus errors&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-return-err.svg&quot; alt=&quot;Waveform diagram illustrating how an error should abort a transaction&quot; width=&quot;288&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For this reason, I recommend that any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_err&lt;/code&gt; goes high, it should
remain high until the end of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; drops, as illustrated in Fig 8.
Further, to minimize the uncertainty associated with which transactions are
complete and which ones ended in an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;,
the stall line should be raised
together with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_err&lt;/code&gt; and also held high until &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is dropped.&lt;/p&gt;

&lt;p&gt;Alternatively, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction may be &lt;em&gt;aborted&lt;/em&gt; following an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;.
But how?  The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone spec&lt;/a&gt; doesn’t
discuss aborting transactions that have already been issued.&lt;/p&gt;

&lt;p&gt;Perhaps it may not seem all that important to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
abort.  This is not the case at all.  Two particular cases come to mind where a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
abort might be very useful.  The first is the case of a misbehaving peripheral.
Should a peripheral misbehave and not return an acknowledgement, it would
make sense to have a timeout following which the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction would be aborted.  The second case is that of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master that is given a warm reset
signal, while the rest of the items on the bus are not reset.  An example of
this might be the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
needing to abort an ongoing
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/peripherals/wbdmac.v&quot;&gt;DMA&lt;/a&gt;
transaction.  A third case, albeit a simple one, is that it would make sense
to abort a transaction following a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
as we discussed above.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9: Wishbone Abort&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/wb-abort.svg&quot; alt=&quot;A trace showing a Wishbone transaction being aborted&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For the purpose of our
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt; development
below, we’ll simply adopt the standard that any
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
transaction may be aborted by dropping the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line, as shown in Fig 9.&lt;/p&gt;

&lt;p&gt;In this figure, four
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction requests are issued, two acknowledgements
are received, and then the master aborts the transaction.  Let’s just dig
into this idea a little deeper.&lt;/p&gt;

&lt;p&gt;We’ll start with the simple: those transactions that have been acknowledged
prior to the abort (i.e.  the dropping of &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt;), will have been
completed.  In Fig 9, transactions &lt;code class=&quot;highlighter-rouge&quot;&gt;A0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;A1&lt;/code&gt; have completed.
All other outstanding requests have been left in an uncertain state: they
may or may not have been completed.&lt;/p&gt;

&lt;p&gt;Further, since the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; line is registered, &lt;code class=&quot;highlighter-rouge&quot;&gt;A2&lt;/code&gt;’s acknowledgement still
comes back–just on the clock after &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is dropped.  This acknowledgement
is the result of clocked logic: it cannot be canceled until a clock after the
abort.  However, the master knows nothing about the &lt;code class=&quot;highlighter-rouge&quot;&gt;A2&lt;/code&gt; request being
completed–since the return took place after the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; line was
dropped and the transaction aborted.  Likewise, the &lt;code class=&quot;highlighter-rouge&quot;&gt;A3&lt;/code&gt; transaction may
or may not have been completed, but the master received no feedback regarding
these transactions as a result.&lt;/p&gt;

&lt;p&gt;Since the standard really doesn’t discuss how
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;
&lt;em&gt;should&lt;/em&gt; be handled, nor
does it describe how to deal with the case where &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt; is dropped
mid-transaction, one might argue that these two capabilities are not &lt;em&gt;changes&lt;/em&gt;
in &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;the specification&lt;/a&gt;, but rather just
&lt;em&gt;clarifications&lt;/em&gt; of it.&lt;/p&gt;

&lt;h2 id=&quot;other-bus-standards&quot;&gt;Other bus standards&lt;/h2&gt;

&lt;p&gt;Two other common
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
standards warrant some quick comments: the &lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon
bus&lt;/a&gt; and the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10: Avalon bus has two basic channels, like the Wishbone&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-avalon-channels.svg&quot; alt=&quot;The Avalon Bus has separate read/write channels&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of these two, the
&lt;a href=&quot;https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon bus&lt;/a&gt;
is the closest to the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;
pipeline
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
in its definition.  Indeed, some of the wires, such as the
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;waitrequest&lt;/code&gt; and the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;stall&lt;/code&gt; lines, are virtually identical.  The chief differences from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
translation standpoint, however, are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt; has a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle line, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_cyc&lt;/code&gt;, whereas the
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon bus&lt;/a&gt;
does not.  This cycle line delimits when a particular transaction begins and
ends.  It is especially useful for &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;bus
arbiters&lt;/a&gt;
that need to
know when they can switch a slave from being connected to one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master to another.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon
specification&lt;/a&gt;
requires acknowledgements that distinguish between read and write
transactions.  Whereas the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; line indicates a valid response from a slave for either read or
write, the &lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon
specification&lt;/a&gt;
requires either a &lt;code class=&quot;highlighter-rouge&quot;&gt;readdatavalid&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;writeresponsevalid&lt;/code&gt; from the slave
for every transaction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon specification&lt;/a&gt; also defines support
for burst or block interactions, much like the part of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4 specification&lt;/a&gt;
that the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has never needed.&lt;/p&gt;

&lt;table style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 11: The AXI4 bus requires five independent channels&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/bus-axi-channels.svg&quot; alt=&quot;Illustration, showing the five separate channels of the AXI4 bus&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
in common usage today is the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AMBA AXI4 bus&lt;/a&gt;.
This bus appears to have every feature a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
could have.  First, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
has not one, not two, but &lt;em&gt;five&lt;/em&gt; separate channels associated with it, each of
which can be individually stalled, as illustrated in Fig 11.  These channels
are: a read address channel, a read data channel, a write address channel,
a write data channel, and a write acknowledgement channel.  Second, the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;
can (optionally) return items out of order–and so
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
requests need to be given identifiers so they can properly be reordered
(or routed) upon return.  The
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;
also maintains the concept of a burst, so that the address &lt;em&gt;channel&lt;/em&gt; can
announce a burst of some length, and the logic implementing the associated data
channel then needs to count items and their responses in order to support it.
There’s more too: “last” transaction indicators, privilege violations,
multiple types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
codes, cacheable transaction attributes, and more.
Unlike the simple &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt; outlined
here, the &lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;
is &lt;em&gt;much more complicated&lt;/em&gt;–really more so than it needs to be in my humble
opinion.&lt;/p&gt;

&lt;p&gt;One good thing about having both read and write channels, though, is that an
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4&lt;/a&gt;
based &lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt; doesn’t
need intermediate memory: it can read directly from one channel while writing
to another—assuming it’s not reading from and writing to the same peripheral,
such as memory.&lt;/p&gt;

&lt;p&gt;Yes, there is a simplified version of the
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt; that’s often called
AXI-lite.  While it can be much simpler to build a component slave
that responds to the AXI-lite protocol, certain features still make it more
difficult to work with than the other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
discussed above.  As an example, the
write request is issued across two channels, the write address and write
data channels, even though most slaves need these pieces of information on
the same clock cycle in order to work with them.  (The official solution
to this problem is to have the slave to stall the address line until both
address and data are available.)  A second difficult piece of complexity is
that, AXI-Lite requires a hand-shake on the return path, or &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; path, as
well as the request path.  Internally, this means is that an AXI peripheral
needs to be aware of stalls on this return path and either buffer any
responses within some form of FIFO, or stall the request path.&lt;/p&gt;

&lt;p&gt;If you are interested in reading further on this topic, consider comparing
the &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/wbm2axisp.v&quot;&gt;logic necessary to bridge&lt;/a&gt;
from the &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;,
to an
&lt;a href=&quot;http://www.gstitt.ece.ufl.edu/courses/fall15/eel4720_5721/labs/refs/AXI4_specification.pdf&quot;&gt;AXI4 bus&lt;/a&gt;,
or &lt;a href=&quot;https://github.com/ZipCPU/wb2axip/blob/master/rtl/axim2wbsp.v&quot;&gt;viceversa&lt;/a&gt;.
Neither IP component is simple.&lt;/p&gt;

&lt;p&gt;My point here is specifically this: if you are a hobbyist working from a
limited budget, then it doesn’t really make sense to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
that requires lots of logic per
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt; master or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
slave peripheral, rather than
implementing a simple &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
interface across all masters and peripherals.&lt;/p&gt;

&lt;h2 id=&quot;further-simplifying-the-wishbone&quot;&gt;Further Simplifying the Wishbone&lt;/h2&gt;

&lt;p&gt;For anyone who has followed the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
development, you’ll know that I have been trying to keep the logic required
for any &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction simple.  Why?  Simple because
&lt;a href=&quot;blog/2017/06/12/minimizing-luts.html&quot;&gt;logic costs money&lt;/a&gt;.
As such, I’ve simplified the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; signals that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; issues,
and that its peripherals respond to.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Everything I have created to interact with the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; does so in
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
pipeline mode &lt;em&gt;only&lt;/em&gt;.  It’s both simpler and faster than the classic mode.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are no retry signals nor tag signals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; signal is equivalent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOCK&lt;/code&gt; signal.  Once the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
grants a master access of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
based upon the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line, that master owns the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
until the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line is dropped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Slaves do not create
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;, the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
does.&lt;/p&gt;

    &lt;p&gt;I haven’t found a need for a slave to produce a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;.
ROM’s, for example, can quietly acknowledge write’s without performing any
action.  The consequence of this is merely that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master interacting with a particular peripheral is responsible for
interacting with that peripheral appropriately.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CYC may not be held indefinitely.&lt;/p&gt;

    &lt;p&gt;Although &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;the specification&lt;/a&gt;
explicitly allows a master to hold the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line high
indefinitely, doing so would prevent a second master from ever accessing
the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.
Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; needs to be dropped as soon as the transaction is
complete–assuming that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
isn’t being held open as part of a condition requiring a lock.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These rules are now sufficient enough that we can write a formal description
of a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;, one that we can then
use to formally verify a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master (or slaves) functionality.&lt;/p&gt;

&lt;h2 id=&quot;the-formal-rules&quot;&gt;The Formal Rules&lt;/h2&gt;

&lt;p&gt;To capture all of this &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
functionality, let’s create a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;formal Verilog
module&lt;/a&gt;
containing only assumptions and assertions together with any other logic
necessary to express those assumptions or assertions.  The goal of
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;this module&lt;/a&gt;
will be such that, if dropped into a
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
master IP component, this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;formal properties
module&lt;/a&gt;
can then be used to verify that the master’s interaction with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
is done properly.  (Other application specific properties may
still be required.)&lt;/p&gt;

&lt;p&gt;You can find a copy of &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;this module
here&lt;/a&gt;,
should you wish to follow along in the discussion below.&lt;/p&gt;

&lt;p&gt;The first thing to note about
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;this module&lt;/a&gt;
are the ports.  &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;This
module&lt;/a&gt;
contains all the ports necessary for a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interface, whether master or slave, together with the traditional clock and
(synchronous) reset ports.  In order to keep the state of the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
transaction, as viewed by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master, in sync with the state as seen by any other &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;formal
properties&lt;/a&gt;
within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master, three additional signals are in this port list
as well.  These are the count of the number of requests that have been made,
the number of acknowledgements received, and the number of outstanding
transactions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;module	formal_master(i_clk, i_reset,
		// The Wishbone bus
		i_wb_cyc, i_wb_stb, i_wb_we, i_wb_addr, i_wb_data, i_wb_sel,
			i_wb_ack, i_wb_stall, i_wb_idata, i_wb_err,
		f_nreqs, f_nacks, f_outstanding);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt;, controls the number of bits in these last three
signals.&lt;/p&gt;

&lt;p&gt;Internal to the module, we’ll create a helper variable, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_request&lt;/code&gt;, to contain
all the details of any
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
transaction request.  We’ll come back to this and use it later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	localparam	STB_BIT = 2+AW+DW+DW/8-1;
	wire	[STB_BIT:0]	f_request;
	assign	f_request = { i_wb_stb, i_wb_we, i_wb_addr, i_wb_data, i_wb_sel };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With these two parts aside, we can turn our attention to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;formal
properties&lt;/a&gt;
associated with creating
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transactions.&lt;/p&gt;

&lt;p&gt;The first property to assert will be that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
is initialized in a reset condition–no requests are being made, and the
reset line is high.  Further, we’ll assume that the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; lines
are also low upon startup.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	// Assume we start from a reset condition
	initial assert(i_reset);
	initial assert(!i_wb_cyc);
	initial assert(!i_wb_stb);
	//
	initial	assume(!i_wb_ack);
	initial	assume(!i_wb_err);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In general, we’ll &lt;em&gt;assume&lt;/em&gt; that any &lt;em&gt;inputs&lt;/em&gt; to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master obey the master’s formal properties below, while &lt;em&gt;asserting&lt;/em&gt; that
any of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master’s &lt;em&gt;outputs&lt;/em&gt; follow their properties.  A similar &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_slave.v&quot;&gt;companion
module&lt;/a&gt;,
appropriate for a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
slave, will &lt;em&gt;assume&lt;/em&gt; the &lt;em&gt;inputs&lt;/em&gt; to the bus slave from the master and
&lt;em&gt;assert&lt;/em&gt; the outputs of a bus slave–but that’s not the perspective we’ll
be using below.&lt;/p&gt;

&lt;p&gt;We also assert, on the clock following any &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; request, that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
has returned to this same idle state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_reset)))
	begin
		assert(!i_wb_cyc);
		assert(!i_wb_stb);
		//
		assume(!i_wb_ack);
		assume(!i_wb_err);
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, we’ll insist that all signals coming into or out of our &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;formal
property
module&lt;/a&gt;
can &lt;em&gt;only&lt;/em&gt; change on the positive edge of the clock.  Everything,
whether input or output, must be synchronous with the clock.  (A later upgrade
might be to create an asynchronous reset signal.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @($global_clock)
	if ((f_past_valid)&amp;amp;&amp;amp;(!$rose(i_clk)))
	begin
		assert($stable(i_reset));
		assert($stable(i_wb_cyc));
		assert($stable(f_request)); // The entire request should be stable
		//
		assume($stable(i_wb_ack));
		assume($stable(i_wb_stall));
		assume($stable(i_wb_idata));
		assume($stable(i_wb_err));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s work through the basics of creating a transaction request.&lt;/p&gt;

&lt;p&gt;First, as we discussed above, we’ll insist that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line following any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt; signal.
This will abort any ongoing transaction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_err))&amp;amp;&amp;amp;($past(i_wb_cyc)))
		assert(!i_wb_cyc);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
isn’t very clear about what can happen to the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line
when &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; is low.  Indeed, it is somewhat contradictory.  However, if we
insist that &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; can &lt;em&gt;only&lt;/em&gt; be high when &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; is also high, then it
simplifies the slave’s logic–as I discussed at
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/orconf.pdf&quot;&gt;ORCONF 2016&lt;/a&gt;.
Since this logic is usually easy to guarantee within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master–requiring no extra logic cost, we’ll insist upon it as a
formal property here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if (i_wb_stb)
			assert(i_wb_cyc);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt; is silent regarding
whether or not the bus request has any meaning while the &lt;code class=&quot;highlighter-rouge&quot;&gt;STALL&lt;/code&gt; line is high.
However, some slaves need to peek at the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
to know how to handle the next transaction.
For these slaves, we insist that once a request is placed onto the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
it cannot be changed until it is accepted.  Hence, if a request has been made
but the stall line remains high, then that same request must not change
on the next clock cycle–at least not until either an abort or the request
is accepted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_stb))&amp;amp;&amp;amp;($past(i_wb_stall))&amp;amp;&amp;amp;(i_wb_cyc))
	begin
		assert(i_wb_stb);
		assert($stable(f_request));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt; says nothing about
whether read and write requests can be mixed or not.  However, I am not
familiar of any situation where that makes any sense.  Therefore, we’ll
specifically prohibit the &lt;code class=&quot;highlighter-rouge&quot;&gt;WE&lt;/code&gt; (write enable) line from changing between
one request and the next.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_stb))&amp;amp;&amp;amp;(i_wb_stb))
			assert(i_wb_we == $past(i_wb_we));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To go one step further, we’ll insist that the &lt;code class=&quot;highlighter-rouge&quot;&gt;WE&lt;/code&gt; only change when there are
no outstanding requests–such as in a “read-modify-write” cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	// Within any given bus cycle, the direction may *only* change when
	// there are no further outstanding requests.
	always @(posedge i_clk)
		if ((f_past_valid)&amp;amp;&amp;amp;(f_outstanding &amp;gt; 0))
			assert(i_wb_we == $past(i_wb_we));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SEL&lt;/code&gt; (byte select) line(s) are an indication of which bytes within a word
should be written to the device.  To be meaningful, any write transaction
should assert one or more of these bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_wb_stb)&amp;amp;&amp;amp;(i_wb_we))
			assert(|i_wb_sel);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, let’s move on to the lines returned from the slave–primarily the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; lines.&lt;/p&gt;

&lt;p&gt;We’ll start by insisting that these two signals should never
be asserted unless the master is in the middle of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle and &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; is high.&lt;/p&gt;

&lt;p&gt;The one exception to this rule is in the case of an abort, where &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; goes
low before the slave has a chance to respond.  Thus, if &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; was low
(i.e. no &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle and no abort), then both &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; should be low on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_wb_cyc)))
	begin
		assume(!i_wb_ack);
		assume(!i_wb_err);
		// ...
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
makes it clear that both &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt; signals may
never be true on the same clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(*)
		assume((!i_wb_ack)||(!i_wb_err));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next two properties get into counting.  They have to deal with how
long a slave can take to accept a request, and how long the slave can take
to respond to the request once accepted.  Both are predicated upon some
parameterized number of counts.  If the respective count parameter is non-zero,
then the time limit property is applied.&lt;/p&gt;

&lt;p&gt;For the first property, we’ll assume that the slave can only stall the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
for &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_STALL&lt;/code&gt; counts–no more.  The purpose of this is just to
help to limit the search space for the formal verifier.  It is optional and
not strictly necessary, but you may find it to be useful.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate if (F_MAX_STALL &amp;gt; 0)
	begin : MXSTALL
		// ...
		reg	[(DLYBITS-1):0]		f_stall_count;

		initial	f_stall_count = 0;
		always @(posedge i_clk)
			if ((!i_reset)&amp;amp;&amp;amp;(i_wb_stb)&amp;amp;&amp;amp;(i_wb_stall))
				f_stall_count &amp;lt;= f_stall_count + 1&#39;b1;
			else
				f_stall_count &amp;lt;= 0;
		always @(posedge i_clk)
			if (i_wb_cyc)
				assume(f_stall_count &amp;lt; F_MAX_STALL);
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next optional property is the number of cycles to wait until the next
acknowledgement is received.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_ACK_DELAY&lt;/code&gt; is greater than zero,
these cycles will be counted and an assumption will limit this count so that
there are always this many or fewer cycles between acknowledgements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate if (F_MAX_ACK_DELAY &amp;gt; 0)
	begin : MXWAIT
		reg	[(DLYBITS-1):0]		f_ackwait_count;

		initial	f_ackwait_count = 0;
		always @(posedge i_clk)
			if ((!i_reset)&amp;amp;&amp;amp;(i_wb_cyc)&amp;amp;&amp;amp;(!i_wb_stb)
					&amp;amp;&amp;amp;(!i_wb_ack)&amp;amp;&amp;amp;(!i_wb_err))
			begin
				f_ackwait_count &amp;lt;= f_ackwait_count + 1&#39;b1;
				assume(f_ackwait_count &amp;lt; F_MAX_ACK_DELAY);
			end else
				f_ackwait_count &amp;lt;= 0;
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When I initially started proving bus properties, these two parameters,
&lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_STALL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_ACK_DELAY&lt;/code&gt; were very important for limiting how many
states the formal solver needed to examine.  In hind sight, I think the
three output ports can remove the need for these two properties–but I’ve left
these checks in place for the time being.&lt;/p&gt;

&lt;p&gt;We still need two more counters.  The first, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs&lt;/code&gt;, will count the number
of requests that have been made and accepted by the slave, while the second,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_nacks&lt;/code&gt;, will count the number of acknowledgements returned.  Both of these
counters will be returned to our parent module as outputs of this module.&lt;/p&gt;

&lt;p&gt;The number of requests accepted starts at zero, and returns to zero
upon any reset or the end of any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle.  While the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
cycle is active, this number will accumulate any time the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; is true
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;STALL&lt;/code&gt; signal is not–the indication that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
transaction request has been made.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	f_nreqs = 0;
	always @(posedge i_clk)
		if ((i_reset)||(!i_wb_cyc))
			f_nreqs &amp;lt;= 0;
		else if ((i_wb_stb)&amp;amp;&amp;amp;(!i_wb_stall))
			f_nreqs &amp;lt;= f_nreqs + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nacks&lt;/code&gt; counter is almost identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs&lt;/code&gt; counter, save that
the number of acknowledgements increments any time &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_ack&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_err&lt;/code&gt;
is true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	initial	f_nacks = 0;
	always @(posedge i_clk)
		if (!i_wb_cyc)
			f_nacks &amp;lt;= 0;
		else if ((i_wb_ack)||(i_wb_err))
			f_nacks &amp;lt;= f_nacks + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difference between the number of requests and the number of acknowledgements
is the number of outstanding requests.  Since &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nacks&lt;/code&gt; are both
registered, we avoid a second delay here by not registering &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding&lt;/code&gt;.
The result, though, is that we may need to trim it suddenly to zero anytime
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; is dropped.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assign	f_outstanding = (i_wb_cyc) ? (f_nreqs - f_nacks):0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
masters are known to only ever request a fixed number of values on
any transaction.  For example, the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;prefetch
module&lt;/a&gt;
that will only ever request one item from the bus, a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;dblfetch
module&lt;/a&gt;
that will only ever request two items, and a &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;pfcache
module&lt;/a&gt;
that will always request exactly one cache line.&lt;/p&gt;

&lt;p&gt;For these masters, the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt; parameter can be used to limit the
formal proof and force this maximum request limit.
If the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt; variable has been set to a value greater than zero,
then we insist that the number of requests and the number of acknowledgements
are always both less than this value.  This assertion is set into two parts.
First, if &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; is on then a new request is pending so the number
of requests must be less than &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt;.  Second, if &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; is false,
then the full number of requests may have been issued.  Further, we’ll also
insist that the number of outstanding requests remains one less than
&lt;code class=&quot;highlighter-rouge&quot;&gt;(1&amp;lt;&amp;lt;F_LGDEPTH)&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt; is the number of bits in our counters.
This guarantees that &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding&lt;/code&gt; will never roll over.  It also requires,
however, that the log, based two, of the maximum number of outstanding
transactions must be passed to our core in &lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt; is not specified, we’ll assume that the number of
outstanding requests is not allowed to roll over the maximum value and
back to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_wb_cyc)&amp;amp;&amp;amp;(F_MAX_REQUESTS &amp;gt; 0))
		begin
			if (i_wb_stb)
				assert(f_nreqs &amp;lt; F_MAX_REQUESTS);
			else
				assert(f_nreqs &amp;lt;= F_MAX_REQUESTS);
			assume(f_nacks &amp;lt;= f_nreqs);
			assert(f_outstanding &amp;lt; (1&amp;lt;&amp;lt;F_LGDEPTH)-1);
		end else
			assume(f_outstanding &amp;lt; (1&amp;lt;&amp;lt;F_LGDEPTH)-1);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
makes it very clear that there shall only be one acknowledgement (at most)
per request.  To capture this requirement, we simply insist within our formal
proof that if there are no outstanding requests, then there shall be no
incoming acknowledgements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((i_wb_cyc)&amp;amp;&amp;amp;(f_outstanding == 0))
		begin
			// ...
			assume(!i_wb_ack);
			// ...
		end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This same is not true of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;errors&lt;/a&gt;,
however.  A slave may produce a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
before accepting any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request.  However, a slave may not produce an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;error&lt;/a&gt;
if it has never been addressed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	always @(posedge i_clk)
		if ((!i_wb_stb)&amp;amp;&amp;amp;(f_outstanding == 0))
			assume(!i_wb_err);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we switch from requirements for all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
masters to the first of several optional properties.  These options are
controlled by parameters to the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/formal_master.v&quot;&gt;formal master properties
module&lt;/a&gt;.
The options insist upon properties not required by the protocol, but which may
be worth asserting for some masters.  As such, they are convenience properties
only, and therefore default to not being part of the test.&lt;/p&gt;

&lt;p&gt;The first of these is the source option.  If a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master is the &lt;em&gt;source&lt;/em&gt; of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
request, as opposed to being an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arbiter_(electronics)#Bus_arbiter&quot;&gt;arbiter&lt;/a&gt;
or adapter mid stream, then the request should start with both &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; lines going high together.  Since the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;
doesn’t require this, we list it here as optional.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	generate if (F_OPT_SOURCE)
	begin : SRC
		// ...
		always @(posedge i_clk)
			if ((f_past_valid)&amp;amp;&amp;amp;(!$past(i_wb_cyc))&amp;amp;&amp;amp;(i_wb_cyc))
				assert(i_wb_stb);
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_SOURCE&lt;/code&gt; is a master only parameter option, however.  By the time a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
interaction gets to the slave, the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line may go high or low without
actually affecting the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line of the slave.&lt;/p&gt;

&lt;p&gt;The next option is the read-modify-write option, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_RMW_BUS_OPTION&lt;/code&gt;.  If
this option is not set, the master must drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line following the last
acknowledgement.&lt;/p&gt;

&lt;p&gt;This doesn’t apply, though, to those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;buses&lt;/a&gt;
that may wish to hold the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
open (locked) between two transactions–such as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; requesting an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Atomicity_(database_systems)&quot;&gt;atomic&lt;/a&gt;
increment operation.  For these masters, the option should be left on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	parameter [0:0]		F_OPT_RMW_BUS_OPTION = 1;
	// ...
	generate if (!F_OPT_RMW_BUS_OPTION)
	begin
		// ...
		always @(posedge i_clk)
			if (f_outstanding == 0)
				assert((i_wb_stb)||(!i_wb_cyc));
		// ...
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In many ways, the master doesn’t care what happens on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
return
lines if the cycle line is low or if there’s no acknowledgement coming back,
so restricting these wires to known values makes a lot of sense.  This is the
purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_SHORT_CIRCUIT_PROOF&lt;/code&gt; option.  If set, it helps to limit
the formal search space and thus it is intended to make the proof simpler.&lt;/p&gt;

&lt;p&gt;On the other hand, if something within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;
master &lt;em&gt;does&lt;/em&gt; depend upon these values (when it shouldn’t), then we might want
to know about it.  For this reason, the option default is not to short circuit
the slave’s responses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	parameter [0:0]		F_OPT_SHORT_CIRCUIT_PROOF = 0;
	// ...
	generate if (F_OPT_SHORT_CIRCUIT_PROOF)
	begin
		always @(posedge i_clk)
		begin
			if (!i_wb_cyc)
			begin
				restrict(!i_wb_stall);
				restrict($stable(i_wb_idata));
			end else if ((!$past(i_wb_ack))&amp;amp;&amp;amp;(!i_wb_ack))
				restrict($stable(i_wb_idata));
		end
	end endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While not all masters are likely to make discontinuous requests, some might.
Therefore, we allow an option, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_DISCONTINUOUS&lt;/code&gt;, that can be set to
allow discontinuous requests.  If this option is not set, then once the
&lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line is dropped, we’ll insist that it cannot be raised again without
also dropping the &lt;code class=&quot;highlighter-rouge&quot;&gt;CYC&lt;/code&gt; line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	parameter	[0:0]	F_OPT_DISCONTINUOUS = 0;
	// ...
	generate if ((!F_OPT_DISCONTINUOUS)&amp;amp;&amp;amp;(!F_OPT_RMW_BUS_OPTION))
	begin : INSIST_ON_NO_DISCONTINUOUS_STBS
		always @(posedge i_clk)
			if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_cyc))&amp;amp;&amp;amp;(!$past(i_wb_stb)))
				assert(!i_wb_stb);
	end endgenerate

endmodule&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since any master that implements a “read-modify-write” cycle will need to
raise the &lt;code class=&quot;highlighter-rouge&quot;&gt;STB&lt;/code&gt; line after it has been initially dropped,
the generate above attempts to capture these conditions.&lt;/p&gt;

&lt;p&gt;Put together, any &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt; master
core, having the properties listed above, is guaranteed to interact properly
with a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone B4&lt;/a&gt;, pipelined
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_(computing)&quot;&gt;bus&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This post has been written following the lessons I’ve learned making
formal proofs for the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
prefetch modules
[&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/prefetch.v&quot;&gt;1&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/dblfetch.v&quot;&gt;2&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/pfcache.v&quot;&gt;3&lt;/a&gt;].  I’ve
also now tested other interactions with these properties, such as those of a
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/wbpriarbiter.v&quot;&gt;priority
arbiter&lt;/a&gt;
or those of a
Wishbone
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/aux/busdelay.v&quot;&gt;bus delay&lt;/a&gt;
component, and I’ve adjusted many of these components with the lessons
I’ve learned in this process.  As a result, we may yet come back to this topic
of formally verifying a &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;
master, but now that we’ve presented the basics any following posts will
reflect how these basics are applied to particular application-specific
situations.&lt;/p&gt;

&lt;p&gt;Until then, here’s a fun thought: on a &lt;a href=&quot;http://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;amp;No=1046&quot;&gt;recent application&lt;/a&gt;
I have been working on, I had the option of using an
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon bus&lt;/a&gt;.
Since all of my tools are (so far) written for the
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone bus&lt;/a&gt;,
I needed to either rebuild my tools, or to build a bridge to cross from
the one to the other.  Every transaction needed to go through this bridge,
so it is a very critical component of this design.
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal methods&lt;/a&gt;,
such as the ones we’ve discussed today, have given me confidence, even
before placing this bridge onto actual hardware, that it will work in
practice when I do.&lt;/p&gt;

&lt;p&gt;At some point, I may switch from this
&lt;a href=&quot;https://www.altera.com/literature/manual/mnl_avalon_spec.pdf&quot;&gt;Avalon&lt;/a&gt;
to
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;Wishbone&lt;/a&gt;
bridge to an
&lt;a href=&quot;https://github.com/ZipCPU/wb2axisp&quot;&gt;AXI to Wishbone bridge&lt;/a&gt; I built some
time ago, but I haven’t quite finished the proof of that component (yet).&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Every word of God is pure: he is a shield unto them that put their trust in him. (Prov 30:5)&lt;/em&gt;</description>
        <pubDate>Tue, 07 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://zipcpu.com/zipcpu/2017/11/07/wb-formal.html</link>
        <guid isPermaLink="true">http://zipcpu.com/zipcpu/2017/11/07/wb-formal.html</guid>
        
        
        <category>zipcpu</category>
        
      </item>
    
      <item>
        <title>The Interface to a Generic Filtering Testbench</title>
        <description>&lt;p&gt;We’ve now presented several approaches to filtering within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
on &lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;.  We talked about &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;two of
the simplest filters&lt;/a&gt;, a
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic filter implementation&lt;/a&gt;,
a &lt;a href=&quot;/dsp/2017/09/29/cheaper-fast-fir.html&quot;&gt;cheaper version of the
same&lt;/a&gt;, and even how
to build a &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;moving average
filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we haven’t discussed is how to test
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;these filters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just to make matters worse,
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;these filters&lt;/a&gt;
are only the tip of the iceberg of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
we’d like to test.  Not only do we have the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;current set of filters to test&lt;/a&gt;,
but I’d also like to present Verilog logic for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;Symmetric filters&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Half-band_filter&quot;&gt;Half-band filters&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_transform&quot;&gt;Hilbert transforms&lt;/a&gt;
and even some slower versions of those same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each of these filters is going to need a test bench.  At the same time,
these test benches are going to have a lot of code in common between
each other.  Let’s consider, today, what functionality a generic
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator based&lt;/a&gt;
filtering test bench requires, so that we can then create a filter test
bench engine that can be used, and modified if needed, to test all of these
filters.&lt;/p&gt;

&lt;h2 id=&quot;abstracting-a-logic-filter&quot;&gt;Abstracting a logic filter&lt;/h2&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Generic Filter portlist&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-ports.svg&quot; alt=&quot;A list of the ports of a generic filter: reset, setting taps (i_tap_wr, i_tap), and samples (i_ce, i_sample, and o_sample)&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first step is going to be abstracting what a filter looks like in
general so that one basic test bench can support many filters.  For this,
we can draw upon the design of our most
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic filter&lt;/a&gt;, and see a
set of ports looking roughly like Fig 1.  There’s an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; strobe
to clear the filter’s internal memory, an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap_wr&lt;/code&gt; signal to indicate that
the filter is being loaded with new taps through &lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap&lt;/code&gt;, and an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; signal
to indicate both that a new sample is ready at &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; and that a sample
is ready to be read out at &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sample&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Almost all of our &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
filters, to date, have had a form similar to this one.
The biggest exception is the &lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;boxcar
filter&lt;/a&gt;–but with a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/rtl/boxwrapper.v&quot;&gt;simple
wrapper&lt;/a&gt;
even this filter can be made to fit this form.&lt;/p&gt;

&lt;p&gt;Now, given this form, let’s consider the questions that need to be answered
by a test bench:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Does the filter have the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
we expect it to have?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does this filter faithfully apply the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
to any signal we give it?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will a carefully constructed input stream overflow the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
of this filter?  If the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filter&lt;/a&gt;,
what is it’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;
ripple and &lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;
depth (as measured)?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Infinite_impulse_response&quot;&gt;IIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;
will have different needs from 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;.
For now, we’ll just focus on the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
variety in determining how to abstract this test bench.&lt;/p&gt;

&lt;p&gt;Digital
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
based filters in particular also have some &lt;em&gt;properties&lt;/em&gt; that will affect
how we interact with them from one test bench to the next.  For many of our
filters, these are &lt;code class=&quot;highlighter-rouge&quot;&gt;parameter&lt;/code&gt;s within our design.  Those same parameters will
affect how we interact with the filter to answer the questions above.
The &lt;em&gt;properties&lt;/em&gt; that a test harness for all filters will need to know are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt;, the number of bits per input sample&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TW&lt;/code&gt;, the number of bits per tap&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OW&lt;/code&gt;, the number of bits per output sample&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELAY&lt;/code&gt;, the delay between an impulse input and the first sample that
responds to that input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NTAPS&lt;/code&gt;, the number of taps in the filter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NCLOCKS&lt;/code&gt;, the minimum number of clocks between successive input clock
 enables&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our purpose today will be to build a generic filtering test harness.  The goal
for this harness will be to handle all of the various
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
properties we just discussed above,
to interact with a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
of the form shown in Fig 1., and then to answer about the filter’s performance
based upon the questions above.  You can imagine that this test harness will
have the form shown in Fig 2, where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
itself fits within a virtual socket in this virtual test harness.&lt;/p&gt;

&lt;table style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: C++/Verilator Filtering Test Harness&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-tb-harness.svg&quot; alt=&quot;A picture showing inputs to a filter test harness, as well as conclusions one would like to draw&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The harness won’t quite be a complete test bench, but rather a component of
a complete test bench.  As such it should make it easier to build
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
test benches using this harness.&lt;/p&gt;

&lt;h2 id=&quot;building-a-test-harness&quot;&gt;Building a test harness&lt;/h2&gt;

&lt;p&gt;All of these actions and properties can easily be encapsulated by a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;C++ test
object&lt;/a&gt;
that will provide us conceptualized access to our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll need to make the C++ class that encapsulates this object easily
inheritable, as (for example) the meaning of the taps loaded into one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
(such as a generic one) might be very different from another (such
as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;symmetric filter&lt;/a&gt;).
Hence, most of these methods will be virtual.&lt;/p&gt;

&lt;p&gt;Let’s outline what &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.h&quot;&gt;one such filter test
harness&lt;/a&gt;
might look like.  We’ll let it inherit from a basic
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class, such as we’ve &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;discussed
before&lt;/a&gt;.
This
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class, if you recall, primarily provided us with the ability to &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt;
the clock by raising and then lowering the clock input pin, as well as
recording our simulation to a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD
file&lt;/a&gt;.  The final function of
this &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class is to give us access to a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt; function which will set
the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; pin and toggle the clock.&lt;/p&gt;

&lt;p&gt;We’ll define our test harness class with some defaults–things that can be
overridden later by the test bench that uses this harness.  Further, since
we don’t know what the class name of our actual filter is going to be until
build time, we’ll make the test harness class, &lt;code class=&quot;highlighter-rouge&quot;&gt;FILTERTB&lt;/code&gt;, a template class.
That way, the compiler can fill in the template details once they are known.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FILTERTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember all of those properties we said that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filter&lt;/a&gt; would have?
These will be variables of our object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The test harness will need to know what these properties are.
Hence, we’ll start out by handling the setting and referencing of these various
properties.  This won’t actually change anything about the
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; generated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; code itself,
nor will these values connect to the values often set by parameters within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
(though it probably should), these routines will just let the actual test
bench tell tell the test harness what properties are associated with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s the number of bits allocated to the input sample, IW.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;OW is the number of bits allocated to output samples.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;TW is the number of bits allocated to each of the taps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_tw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;DELAY is the number of clocks between an input and the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
response that it impacts.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Slower &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s,
may require multiple clocks between each global CE signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;.
We’ll keep track of this feature/capability in the CKPCE, the clocks
per CE parameter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CKPCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;CKPCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The minimum number of clocks per CE’s is just one, something enforced above.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NTAPS&lt;/code&gt; is the number of filter coefficients, or taps in this filter–it is the
length of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse
response&lt;/a&gt;.
Our test harness will use this to know how many samples following an
impulse need to be examined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll cache this &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse
response&lt;/a&gt;
(more later), so any time the number of taps changes (such as with the
&lt;a href=&quot;/dsp/2017/10/16/boxcar.html&quot;&gt;boxcar&lt;/a&gt; filter), the cache
will need to be reloaded as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clear_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now with those properties aside, we can start looking at methods (actions) this
filtering test harness will need to handle.  As you’ll notice from below,
we’ll make most of these virtual–so that different types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s can
change them if need be.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;We discussed&lt;/a&gt;
the &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method as a generic method that will call
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
and simply step the clock by one tick.  It will also record any results into
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;a VCD file&lt;/a&gt;
(or other file) that may need to be recorded–if desired.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may remember some time ago how I recommended &lt;a href=&quot;/dsp/2017/07/24/dsp-debugging.html&quot;&gt;debugging DSP algorithms
graphically&lt;/a&gt;.
That recommendation applies to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s
as well.  For those cases where you
want to output the results of your filtering operation to examine,
our test harness allows us to open a file wherein we’ll place both
input values and output values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;record_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to apply test vectors and receive independent results, we’ll need to
be able to reset the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to clear any internal state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For our test structure, we want to be able to load
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficients into our design.  This will involve sending a vector of integers,
of a given length, to the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap&lt;/code&gt; port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method will send the given data to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
as input samples, and return the result from applying the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method is nearly identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method, with the
single exception that the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt;s the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
first.  This will be important for
sending any particular test vectors to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;, and for making certain
that there aren’t any unintended consequences in the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As it will turn out, lots of methods are going to depend upon the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
Let’s overload the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator to return coefficients from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;that response&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, rather than calculating the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
over and over again, we’ll calculate it once and cache the results.  That
means that any time there is a change in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s coefficients,
we’ll need to be able to clear this cache.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;clear_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we have a method above for loading coefficients into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
let’s create another method that not only loads coefficients into our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
but also verifies that the resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
contains the coefficients that we want.&lt;/p&gt;

&lt;p&gt;As with many of these methods, this method is virtual so that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s
with less than generic tap structures, such as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;symmetric filter&lt;/a&gt;’s
as one example, can overload this function and provide their own test method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;testload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all of the above functionality, there’s no reason why we can’t apply
particular known inputs to this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
in order to measure its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;.
Since this is likely to be a common request, we’ll make a method for doing
this and place it into our test harness as well.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;nfreq&lt;/code&gt; describes how
many frequencies we are interested examining, and the result will be placed
into the &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt; buffer.
The algorithm will work by placing complex exponential test vectors into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;mag&lt;/code&gt; to control the amplitude of these test vectors,
with a &lt;code class=&quot;highlighter-rouge&quot;&gt;mag&lt;/code&gt; of one being the largest magnitude the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
will accept without overflow.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfreq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPLEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll add two further canned tests.  The first, &lt;code class=&quot;highlighter-rouge&quot;&gt;test_overflow()&lt;/code&gt;,
checks whether a carefully constructed input designed to overflow the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
does or does not.  A true value means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
passed this test.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;test_overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second test is appropriate for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filters&lt;/a&gt;
only.  This test will measure the highest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt; frequency, the lowest
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt; frequency, the depth of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;, and the ripple across the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;.  It will work for most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
functions, but perhaps not for all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filters&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;measure_lowpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ripple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Together, these are the methods (actions) we’ll teach our test harness how to
apply to all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s,
These methods are declared in &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.h&quot;&gt;this C++ header
file&lt;/a&gt;.
We’ll discuss &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;how to implement
them&lt;/a&gt;
in the next section.  For now, let me challenge you to ask the question: have
we gotten everything?  Are there other particular capabilities that a generic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
test harness should have–capabilities that we’ve overlooked?  Feel free to
write me and tell me about anything I’ve missed.&lt;/p&gt;

&lt;h2 id=&quot;test-harness-method-details&quot;&gt;Test harness method details&lt;/h2&gt;

&lt;p&gt;Let’s now turn to the details of how this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness is
implemented&lt;/a&gt;.
In general, we’ll just work our way through the various methods associated with
this &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness C++
class&lt;/a&gt;,
discussing how to implement each along the way.&lt;/p&gt;

&lt;h3 id=&quot;handling-different-data-widths&quot;&gt;Handling different data widths&lt;/h3&gt;

&lt;p&gt;The first thing we are going to implement is a helper method for adjusting the
number of bits in a number.  Since
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
will return numbers with only &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits in them, we’d like to be able to
sign extend these values to their full &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; capability.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, if the value is unsigned, we’ll also like to extend the value–this
time with zero bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are just two helper functions that we’ll need when sending bit limited
data to
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;, and when interpreting
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;’s
results.&lt;/p&gt;

&lt;h3 id=&quot;advancing-the-state-of-the-test-bench&quot;&gt;Advancing the state of the test bench&lt;/h3&gt;

&lt;p&gt;As you may recall from the discussion of the
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;TESTB&lt;/a&gt;
class, it has a &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method within it to handle toggling the clock for us.
What it doesn’t have is a means of recording samples for later study
with Matlab or
&lt;a href=&quot;https://www.gnu.org/software/octave/&quot;&gt;Octave&lt;/a&gt;.  We’ll create that here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see from above, anytime the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; flag is true, the input value
and corresponding output value will be written to a file (if open) for
later analysis.&lt;/p&gt;

&lt;h3 id=&quot;resetting-the-filter&quot;&gt;Resetting the Filter&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt; function just sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; signal for one clock tick.  Just
to be safe, we’ll make sure the other indication lines are zeros as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll use this function to make certain the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
starts from a clean state at the beginning of any tests.&lt;/p&gt;

&lt;p&gt;There is a consequence, though, to creating a clean test bench that only
provides expected and reasonable inputs, such as setting the reset with all of
these other inputs set to zero.  In particular, this method of testing logic
may not be as complete as a more formal approach that will examine all possible
inputs to our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
module–both the reasonable as well as the unreasonable.&lt;/p&gt;

&lt;p&gt;In our approach today, we’ll just stick to the reasonable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
inputs.&lt;/p&gt;

&lt;h3 id=&quot;applying-the-filter-to-a-known-input&quot;&gt;Applying the filter to a known input&lt;/h3&gt;

&lt;p&gt;The core function of any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_system&quot;&gt;linear filter operation&lt;/a&gt;
is to apply the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to a given set of data samples.  That’s the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; function
below.  We’ll start by making sure we’re not holding wires high from any prior
context that didn’t clean up properly behind itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;FILTERTB::apply(%d, ...)\n&quot;, nlen);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we’re set up, let’s walk through each of the input samples.
For each input sample, we’ll place it on the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; input to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
and then read the result from the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; output of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Make sure the CE line is high
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Strip off any excess bits
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Sign extend the result
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Although all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
we’ve looked at so far accept one input value
and produce one output value on each clock, not every
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is of this type.
There’s a lot to be gained by sharing resources across clocks if the
sample rate can be guaranteed to be less than half of the system clock rate.
To make sure that we can still test
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s
of this variety, we’ll tick our clock &lt;code class=&quot;highlighter-rouge&quot;&gt;m_nclk-1&lt;/code&gt; additional times
here–while holding &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is fundamentally how to feed any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filter&lt;/a&gt;,
so having this capability within our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test
harness&lt;/a&gt;,
only makes.&lt;/p&gt;

&lt;h3 id=&quot;loading-new-filter-coefficients&quot;&gt;Loading new filter coefficients&lt;/h3&gt;

&lt;p&gt;For any &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
that doesn’t have fixed taps, we’ll need to be able to load a new set of
coefficients into the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
As we’ve designed this, doing so requires setting the
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_tap_wr&lt;/code&gt; input, and then ticking the clock once to load each new coefficient
into the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;FILTERTB::load(%d, ...)\n&quot;, ntaps);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ntaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Strip off any excess bits
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we are done loading a new set of coefficients into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
we’ll clear our cached &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse
response&lt;/a&gt; values.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;clear_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These will need to be rebuilt, but we’ll hold off on that task until they
are referenced.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-results-from-a-test-vector&quot;&gt;Getting the results from a test vector&lt;/h3&gt;

&lt;p&gt;A function that is very similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method is the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method
below.  The idea behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method is that we wish to determine the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
response to a given test vector.  This method differs from the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt;
method in only a few small respects.&lt;/p&gt;

&lt;p&gt;First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; function begins with a &lt;code class=&quot;highlighter-rouge&quot;&gt;reset()&lt;/code&gt; to clear any internal
values within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; method didn’t clear any internal 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then call the filter &lt;code class=&quot;highlighter-rouge&quot;&gt;nlen&lt;/code&gt; times to feed the test vector into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
Well, not quite.  We’re going to pass the test vector followed by a series
of zeros–one for each delay value.  That way, we can quietly remove any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
delay effects from the test vectors response–something not done within the
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_tap_wr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tstcounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tstcounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the next difference: after the first &lt;code class=&quot;highlighter-rouge&quot;&gt;nlen&lt;/code&gt; samples, the next several
samples are all set to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Strip off any excess bits
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Sign extend the result
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, we’ll only record the results after an initial &lt;code class=&quot;highlighter-rouge&quot;&gt;DELAY()&lt;/code&gt; number of
samples have been passed into the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Discard : %2d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Deal with any filters requiring multiple clocks
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_nclks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TESTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you’ll see shortly, this &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; method is going to feature prominently
in any more sophisticated test—such as measuring the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
in the next section.&lt;/p&gt;

&lt;h3 id=&quot;measuring-the-impulse-response&quot;&gt;Measuring the Impulse Response&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt; of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is defined by its response to a single non-zero value.
Many of our test components will depend upon this value, so it’s important
that we have a means to both initially measure it, and then to use that
measurement later without requiring it to be measured over and again.  This is
the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator within the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test
harness&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our operator starts out with some very basic parameter checks, just to make
certain that we handle responses for out of bounds requests properly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Measuring a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
is actually just as simple as creating an
input to the filter with one non-zero entry (the first one), and then
recording how the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
responds to it, hence the name
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.
Here we do exactly that, save that we
we use the maximum negative value for our impulse.  We pick this choice for
two reasons: first, because the maximum negative value is larger in
magnitude than the maximum positive value and so this becomes a test for
overflow.  Second, by using a &lt;em&gt;really&lt;/em&gt; large number, we can also
make certain that our result isn’t lost when/if any
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;bits are dropped&lt;/a&gt;
at the end.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Create an input vector with a single impulse in it
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Set our one value to nonzero.  This is the impulse.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Apply the filter to the impulse vector
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get our test vector back, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
coefficient we are looking for will be the response from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
times the value of our impulse.  Hence, we’ll divide the initial impulse value
back out and record each sample of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Set our m_hk vector based upon the results
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we’ve determined the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
once, we’ll just look it up for future requests–sparing us the cycles of
calculating it over and over again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;checking-whether-the-filter-load-worked&quot;&gt;Checking whether the filter load worked&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;testload()&lt;/code&gt; function is simply a &lt;code class=&quot;highlighter-rouge&quot;&gt;load()&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficients function followed by a request for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;,
and then a comparison of whether or not the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
truly matches the one we wanted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;FILTERTB::testload(%d, ...)\n&quot;, nlen);
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll now compare the measured coefficient, &lt;code class=&quot;highlighter-rouge&quot;&gt;(*this)[k]&lt;/code&gt;, against the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficient we expect, found in &lt;code class=&quot;highlighter-rouge&quot;&gt;data[k]&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Err: Data[k] = %d != (*this)[k] = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll also insist that any coefficients beyond the ones we expect to set
should have been read as zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function has been made virtual so that other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; types,
such as those whose coefficients are partially fixed
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;symmetric&lt;/a&gt;),
&lt;a href=&quot;https://en.wikipedia.org/wiki/Half-band_filter&quot;&gt;half-band&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_transform&quot;&gt;Hilbert&lt;/a&gt;,
etc), may adjust both how their actual coefficients are loaded, and then also
how those loaded coefficients correspond with resulting
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;checking-for-overflow&quot;&gt;Checking for overflow&lt;/h3&gt;

&lt;p&gt;The purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;test_overflow()&lt;/code&gt; routine is to test whether or not, if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is given a carefully constructed input designed to overflow the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
that the filter will return the correct result.  If the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
response doesn’t match what we think it should,
this will be an indication of a potential overflow.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: The Overflow Check Test-Vector&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-overflow-chk.svg&quot; alt=&quot;A test vector for use when checking for overflow, having maximum values that match the signs of the filters impulse response&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The waveform (test vector) itself is chosen from all maximum values, as shown
in Fig 3.  In this figure, a desired
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
is shown in black.  The discretized version of that same response is shown in
blue–those are the results that the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator will return.  The samples
in red show the test vector we’ll use.&lt;/p&gt;

&lt;p&gt;The magnitude of the coefficients in the test vector is full scale–whether
the maximum positive integer that can be represented in &lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt; bits or the
maximum negative integer.  The signs are adjusted so that when the test
sequence lines up with the internal taps of our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
as shown in Fig 3,
the individual coefficients times the test vector’s coefficients will produce
the maximum possible positive value.  Once all these maximum possible positive
values are accumulated, we’ll have the maximum output value that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
can produce.  Any failure to match this maximum output value will be an
indication that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
couldn’t keep up with full-scale values.&lt;/p&gt;

&lt;p&gt;That will be our approach below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// printf(&quot;TESTING-BIBO\n&quot;);
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;maxv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// maxv = 1;
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// input[v] * (*this)[(NTAPS-1)-v]
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;maxv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we’ve put this test signal together, let’s see what the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
does with it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, for every one of those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
outputs, …&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;let’s calculate what the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
output &lt;em&gt;should have&lt;/em&gt; been.  This involves evaluating the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution equation&lt;/a&gt;
(the slow way), and then verifying that we get the output we expect.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTAPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It would also be nice to have some confidence that the test vector worked
as desired.  This is the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tested&lt;/code&gt; variables.
If the test vector works as desired, then it should hit (at some point) a
sweet spot where all of the signs line up.  If this happens, then we set
&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; to true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;tested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any failure of the output to match our calculated (expected) value indicates
that something went wrong–perhaps a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
overflow, perhaps something else in the implementation of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
Either way, you’ll want to know.
Here are two ways to find out: the assertion below, which will cause the test
to end abruptly with an error, and a boolean &lt;code class=&quot;highlighter-rouge&quot;&gt;pass&lt;/code&gt;.  Hence, if you comment
out the assertion, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pass&lt;/code&gt; boolean will still tell you the answer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, now that we are done comparing every output with its expected value,
let’s clean up any allocated values and return.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you may have noticed, this test not only checks that the output doesn’t
overflow, but it also offers a rudimentary check that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
even works in general–by comparing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;’s output to a
locally calculated &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;.
However, as a general &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution&lt;/a&gt;
checker, this routine is not sufficient.
For this reason, we’ll need some other tests to fully convince us
that this &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
works.&lt;/p&gt;

&lt;h3 id=&quot;saved-for-later&quot;&gt;Saved for Later&lt;/h3&gt;

&lt;p&gt;There are two other required components of this generic filtering &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness&lt;/a&gt;:
a function to calculate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt; of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfreq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;COMPLEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a second function to answer the question of how well did the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filters&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
actually match a desired response.  As we mentioned above, this second
function (as built) will only be relevant to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;lowpass filters&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTERTB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFLTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measure_lowpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ripple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Building these two components of our
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/filtertb.cpp&quot;&gt;test harness&lt;/a&gt;,
however, will have to wait for another day and another post.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And David girded his sword upon his armour, and he assayed to go; for he had not proved it.  And David said unto Saul, I cannot go with these; for I have not proved them.  And David put them off him.  (1Sam 39)&lt;/em&gt;</description>
        <pubDate>Sat, 04 Nov 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/dsp/2017/11/04/genfil-tb.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/11/04/genfil-tb.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Good Software Engineering Principles Apply to Students Too</title>
        <description>&lt;p&gt;Trust me, I get it.  I’ve been there.  You’ve got a project due and you are
struggling to get it to work.  It just needs to work.  It doesn’t need to
look good.  The instructor isn’t going to grade how well (or poorly) you
created your assignment.  That’s not the requirement.  The requirement is only
that it works, and the deadline is approaching.&lt;/p&gt;

&lt;p&gt;So … why do you need to practice good software engineering?&lt;/p&gt;

&lt;p&gt;Let’s look at a couple examples, shall we?&lt;/p&gt;

&lt;h2 id=&quot;magic-numbers&quot;&gt;Magic Numbers&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Don’t use magic numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic number&lt;/a&gt;
is a number that is neither one nor zero, and yet it gets placed
into your code with no explanation.&lt;/p&gt;

&lt;p&gt;Years ago, I had the opportunity to sit next to an engineer who was trying to
maintain a piece of software that predicted certain properties of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ionosphere&quot;&gt;ionosphere&lt;/a&gt;.  The code he was
working on had been written decades earlier, and it contained
tables of numbers within it.  These tables, however, came with no explanation
as to how they were derived.  The engineer working on this task showed these
numbers to me and asked, rhetorically, how shall I know if these numbers are
still valid?&lt;/p&gt;

&lt;p&gt;While it’s easy to argue that good software shouldn’t include numbers with no
explanation, such as this program did, what about throw away software?  Software
that only needs to work once?&lt;/p&gt;

&lt;p&gt;To answer that question, consider the example of a student who was trying to
implement a &lt;a href=&quot;/dsp/2017/08/30-cordic.html&quot;&gt;CORDIC algorithm&lt;/a&gt;
for class.  As you may recall from &lt;a href=&quot;/dsp/2017/08/30-cordic.html&quot;&gt;our discussion on how to build a CORDIC
algorithm&lt;/a&gt;, such an algorithm
depends upon a table of arctangents.  This student had dutifully calculated
and placed this table within his code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255412811&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;125657214&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;62581571&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31260178&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15626271&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7812658&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3906269&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1953127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;976562&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;488281&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;244140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;122070&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;61035&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30517&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15258&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7629&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;He then asked why his code wasn’t working.&lt;/p&gt;

&lt;p&gt;Looking over his code, it was impossible to know if he had gotten the table
right.  I didn’t know what formula he had used, or even if he
had gotten the formula right or not.  Further, aside from the problem
associated with knowing that the table was correct, there’s also the problem
of fixing the table once you discover an error since you would then need
to correct &lt;em&gt;every&lt;/em&gt; line in the table.  Oh, and did I mention that copying
tables by hand is prone to error in the first place?&lt;/p&gt;

&lt;p&gt;Consider the alternative, shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atnh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
		&lt;span class=&quot;c1&quot;&gt;// We want the arctan of 2^(-k-1)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// The angle, in radians, for the arctangent
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;drad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tanv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Scale this angle to 0..2^N-1 units, for N=32
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;atnh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Convert this value to an integer
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atnh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Stop if this integer ever becomes zero
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Add this value to the table
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;atanhAngles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ival&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Look at all of the math involved in getting this table right.  Consider what
would’ve happened if there was just one error in this code above.&lt;/p&gt;

&lt;p&gt;For these reasons, I will recommend that student’s not use pre-generated
numbers within their code.  If you really need a table of numbers for your
application (this is pretty common), then I would recommend that the code
necessary to populate your table also be distributed with the &lt;em&gt;magic numbers&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-rule-of-one-not-three&quot;&gt;The rule of one (not three)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Don’t repeat yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have to build an algorithm, build it once.  Build it right, use it
everywhere, but don’t repeat yourself.&lt;/p&gt;

&lt;p&gt;Wikipedia refers to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of
three&lt;/a&gt;
in computer programming.  The basic rule is that once you have three copies of
the same algorithm, then it is time to refactor all three versions of the
algorithm so that they reference the same single piece of working code.&lt;/p&gt;

&lt;p&gt;Allow me to argue that this rule applies &lt;em&gt;even more&lt;/em&gt; to students, and
&lt;em&gt;especially&lt;/em&gt; to code that hasn’t been proven yet–code that may still be buggy.&lt;/p&gt;

&lt;p&gt;Years ago I watched this lesson play out in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_engineering&quot;&gt;computer
engineering&lt;/a&gt; course. 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_engineering&quot;&gt;Computer engineering&lt;/a&gt;, for
those unfamiliar with it, is sort of a cross between &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_science&quot;&gt;computer
science&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical engineering&lt;/a&gt;.
As a result, the course included both individuals with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_science&quot;&gt;computer
science&lt;/a&gt;
background, such as myself, and others with more of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt;
background.  The projects in the course involved building various circuits with
computer chips and peripherals, and then programming the computer chip within
those circuits to do some instructor provided task.&lt;/p&gt;

&lt;p&gt;What I remember from the course is being surprised at how little the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical engineering&lt;/a&gt;
students were re-using their code.  We were writing code in 8086 assembly
at the time, and an example piece of code might be the software necessary to
send a string over a serial port.  My approach was to convert any code that I
needed more than once into functions that could then be called as often as I
needed them.  I considered this to be a standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_science&quot;&gt;computer
science&lt;/a&gt; principle.&lt;/p&gt;

&lt;p&gt;What I observed was that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt; students
ended up spending a lot of their time debugging the same software over and over.&lt;/p&gt;

&lt;p&gt;Please don’t get me wrong, I’m not trying to be critical of all &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt; students.
I’m just commenting about those I shared this class with who were kind enough
to allow me to look over their shoulders.  While it may be that these students
hadn’t yet learned this fundamental software lesson, I’d like to think that
other &lt;a href=&quot;https://en.wikipedia.org/wiki/Electrical_engineering&quot;&gt;electrical
engineering&lt;/a&gt;’s know
better.&lt;/p&gt;

&lt;p&gt;The problem is that buggy code needs to be fixed, and buggy code in more than
one place needs to be more than once.  Worse, if you aren’t (yet) certain that
the code in question works in the first place, and you are searching for bugs,
then it’s really easy to let a bug in one copy slip by you as you fix the other
copy.&lt;/p&gt;

&lt;p&gt;Time is tight, don’t waste it.&lt;/p&gt;

&lt;p&gt;For this reason, I recommend the &lt;em&gt;rule of one&lt;/em&gt; for students and anyone else
trying to get something to work for the first time.  Build it &lt;em&gt;once&lt;/em&gt;.
Don’t copy it—especially don’t copy it before you &lt;em&gt;know&lt;/em&gt; that it works.
Make a function and call that function instead.&lt;/p&gt;

&lt;p&gt;This also applies to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designer: reuse logic by separating it into its own module rather
than copying it multiple times across your code–&lt;em&gt;especially&lt;/em&gt; before you
know whether or not the logic even works, or if it is the right logic for
the job.&lt;/p&gt;

&lt;h2 id=&quot;data-types&quot;&gt;Data Types&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Store items with different meanings in different data types.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To put things simply, let the compiler (or synthesis tool) find as many
bugs for you as you can.&lt;/p&gt;

&lt;p&gt;I know, I’m a die-hard C-programmer who uses Verilog rather than VHDL.  You
might find it strange to hear this advice coming from me, but I’ll say it
anyway: let the tools find as many errors as you can.&lt;/p&gt;

&lt;p&gt;Use software data types to your advantage.  If a value will only be one of
a handful, use an enumerated type (in software) or set the number of bits for
that handful to the smallest number required in HDL.  If you have values
occupying, for example, several stages within a
&lt;a href=&quot;/dsp/2017/08/30-cordic.html&quot;&gt;CORDIC&lt;/a&gt;, each having &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;angle&lt;/code&gt; values, then don’t store those in an array.  Use a structure.&lt;/p&gt;

&lt;p&gt;In Verilog, run &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;verilator&lt;/a&gt;
and &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;use the -Wall
option&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can do the same in C++: Turn on the ‘-Wall’ compiler option.&lt;/p&gt;

&lt;p&gt;Software data types are there for a reason–use them to your advantage.&lt;/p&gt;

&lt;h2 id=&quot;pi-is-not-314159&quot;&gt;Pi is not 3.14159&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; Use the tools library to your advantage&lt;/p&gt;

&lt;p&gt;I remember hearing a sad satellite story from years ago about the difficulty
that the ground team was having while trying to track their satellite(s).
Sadly, the details of this story have left me.  Perhaps someone else remembers
and can fill me in.  What I remember from the story, though, was that when
all was said and done the problem was the software that declared &lt;code class=&quot;highlighter-rouge&quot;&gt;PI&lt;/code&gt; to be
&lt;code class=&quot;highlighter-rouge&quot;&gt;3.141&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On my Linux machine, PI is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;math.h&lt;/code&gt; as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define M_PI               3.14159265358979323846  &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* pi */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use this definition.  Even for students: use this definition.  Get into the
practice of using your tools–they are there for a reason.&lt;/p&gt;

&lt;h2 id=&quot;be-kind-to-others--your-grade-depends-upon-it&quot;&gt;Be kind to others–your grade depends upon it&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;Don’t bite the hand that feeds you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve had the wonderful opportunity to help many wayward students over the
years.  The one thing that turns me off, however, is the student who is
gets frustrated and then angry at whatever difficulty he is having.  This
angry student will then show up on whatever forum looking for help.  He’ll
swear at himself, he’ll yell, and destroy his own online reputation.&lt;/p&gt;

&lt;p&gt;Sometimes these individuals turn to the forums spewing filth at whoever
built the tool he’s using.  At this point, it doesn’t make a difference if
the tool is good or bad, this individual will turn others off from helping him.&lt;/p&gt;

&lt;p&gt;If you are getting angry then go take a walk.  Get some exercise.  If it’s
late at night, get some sleep.  Come back to the problem later when you have
a clearer mind.&lt;/p&gt;

&lt;p&gt;The last thing you want to do is to proclaim to all that you are hard to work
with, particularly when you need some help from others.&lt;/p&gt;

&lt;h2 id=&quot;patience&quot;&gt;Patience&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Principle:&lt;/strong&gt; &lt;em&gt;And not only so, but we glory in tribulations also: knowing that tribulation worketh patience; and patience, experience; and experience, hope&lt;/em&gt;
(Romans 5:3-4)&lt;/p&gt;

&lt;p&gt;Yeah, I get it, your project is do in a month, in a week, or even tomorrow.
I understand.  It’s late at night and it isn’t working.  I get it.  I’ve been
there.  However, getting stressed or anxious about it isn’t going to help you
get your design working any faster.&lt;/p&gt;

&lt;p&gt;Sound engineering requires diligent patience, discipline, and careful attention
to the smallest details.  This takes time.  It requires a cool and level
head.  Engineering problems can be subtle.  They can hide in the difference
between a ‘0’ and a zero.  Give yourself the time you need, and don’t try to
rush the job—even as the end is imminent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Corrolary:&lt;/strong&gt; &lt;em&gt;Give each project the time it needs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you can’t rush a project at the end, then front load the project and give
it the time it needs early on so that you don’t end up rushed at the end.
If your instructor gives you a couple of months, then trust him: he might know
something.  Start early.  You won’t be able to recover any wasted time later.&lt;/p&gt;

&lt;h2 id=&quot;prayer&quot;&gt;Prayer&lt;/h2&gt;

&lt;p&gt;While I’m sure there are many other software engineering principles, I’d
like to close with a final observation.  There have been &lt;em&gt;many&lt;/em&gt; times when
I’ve personally gotten stuck on one problem or another.  Maybe it’s getting
late and, after a long hard day, I still haven’t gotten a problem working.&lt;/p&gt;

&lt;p&gt;Let me share with you my personal secret weapon: prayer.  Put the project down
and take some time to pray.  &lt;em&gt;Trust God&lt;/em&gt; to take care of it, and then get some
sleep.  In the morning, pray again before returning to the problem.&lt;/p&gt;

&lt;p&gt;You’ll be amazed at how prayer both changes your outlook, as well as how
God can just suddenly reveal key details to you that you were missing before.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Rejoice, O young man, in thy youth; and let thy heart cheer thee in the days of thy youth, and walk in the ways of thine heart, and in the sight of thine eyes: but know thou, that for all these things God will bring thee into judgment. (Eccl 11:9)&lt;/em&gt;</description>
        <pubDate>Mon, 30 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/blog/2017/10/30/student-sw-engr.html</link>
        <guid isPermaLink="true">http://zipcpu.com/blog/2017/10/30/student-sw-engr.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Generating Pseudo-Random Numbers on an FPGA</title>
        <description>&lt;p&gt;At some point or other, when working with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s,
you will need a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;
number sequence.  Trust me, it’s just going to happen.&lt;/p&gt;

&lt;p&gt;In my case it happened this last week.  I needed to do some
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;channel estimation&lt;/a&gt;,
and I reasoned that a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt; sample stream
would make a nice input to
&lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;the channel&lt;/a&gt;.
Specifically, my ultimamte plan is to
transmit &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;
out of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
output pin at the fastest speed I can:
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds181_Artix_7_Data_Sheet.pdf&quot;&gt;950 Mbps&lt;/a&gt;
on my
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds180_7Series_Overview.pdf&quot;&gt;Artix-7&lt;/a&gt;
&lt;a href=&quot;https://store.digilentinc.com/arty-artix-7-fpga-development-board-for-makers-and-hobbyists/&quot;&gt;Arty&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board.
I can then receive the bits at the other end of
&lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;the channel&lt;/a&gt;, and
examine them to get an &lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;estimate of the channel
distortion&lt;/a&gt;.  If all goes
well, I should even be able to apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Channel_capacity&quot;&gt;Shannon’s Capacity
theorem&lt;/a&gt; to determine the
maximum speed of &lt;a href=&quot;https://store.digilentinc.com/pmod-cable-kit-12-pin&quot;&gt;the
channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All I needed to get started was a source of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One common source for 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom bits&lt;/a&gt;
in digital logic is a
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Linear Feedback Shift Register
(LFSR)&lt;/a&gt;.
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSRs&lt;/a&gt; are simple
to build and so they are commonly used for this purpose.  They have some
wonderful mathematical properties associated with them, guaranteeing a
certain amount of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandomness&lt;/a&gt;.
Be forwarned, however, the one thing
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s are not
is &lt;a href=&quot;https://wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator&quot;&gt;cryptographically random/secure&lt;/a&gt;.
&lt;em&gt;Do not use
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
in place of a proper
&lt;a href=&quot;https://wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator&quot;&gt;cryptographically secure sequence&lt;/a&gt;.&lt;/em&gt;
That said, they are worth learning how to create and use.&lt;/p&gt;

&lt;p&gt;Much of my &lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;System
Identification&lt;/a&gt;
project will need to wait for a later post.  Until that time, I’ll be
accepting gentlemen’s wagers (no money involved) regarding what this ultimate
maximum speed will be.&lt;/p&gt;

&lt;p&gt;Today’s topic though is just a simple discussion of how to implement an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
in Verilog.  We’ll skip the worst of the mathematics, although I would
recommend you look them up.&lt;/p&gt;

&lt;p&gt;Basically, the idea behind an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
is that given a current register state, I’ll call it a “fill”, you can
compute the next state via a linear combination of the bits in the current
state.  I’ll use the term “taps” or “polynomial” interchangeably to describe
this formula–although you might need to dig into more of the mathematics
to understand why.&lt;/p&gt;

&lt;p&gt;In this post, we’ll discuss these registers and how to create them
in Verilog.&lt;/p&gt;

&lt;h2 id=&quot;basic-math&quot;&gt;Basic Math&lt;/h2&gt;

&lt;p&gt;Let’s start, though, by looking at some very simple math.  This math involves
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;Galois Field&lt;/a&gt; having only
two elements, 0 and 1.  We’ll use the term
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt; to describe this field.&lt;/p&gt;

&lt;p&gt;If you are not familiar with what a
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;&lt;/em&gt; is in this
context, it’s simply a mathematical abstraction of a number system based upon
a set of values, together with the definitions of addition and multiplication
defined on those values.  The neat thing about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s is that much of
the math you are already likely to be familiar with is based upon
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s.  For example,
I’m going to guess that you are probably familiar with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;linaer algebra&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;Linaer algebra&lt;/a&gt;, though,
is all based upon 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s.
Although I learned 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;linaer algebra&lt;/a&gt; using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Integer&quot;&gt;integers&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Real_number&quot;&gt;real numbers&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot;&gt;complex numbers&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;linaer algebra&lt;/a&gt; is actually
based upon &lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt;s:
arbitrary algebraic systems with a defined set of values, as well as
two primary operations defined upon that set.&lt;/p&gt;

&lt;p&gt;We already said today’s topic would focus on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt; known as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;, and that this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field_(mathematics)&quot;&gt;field&lt;/a&gt; contains the
numbers zero and one.&lt;/p&gt;

&lt;p&gt;What we haven’t mentioned are the two two mathematical operators that define
this field: addition and multiplication.  Both are used in the implementation
of an &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The difference between the addition and multiplication operators you might be
familiar with, and the operators defined by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;, is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt; operators are followed by
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;.
Hence, the result will be a ‘1’ if the traditional addition (or
multiplication) result was odd, or ‘0’ if it was even.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: Addition in GF(2)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/gf2-add.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you look at the addition operator under
&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;,
you’ll find the first couple values to be what you expect:
&lt;code class=&quot;highlighter-rouge&quot;&gt;0+0=0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0+1=1&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;1+0=1&lt;/code&gt;.  Where things get a little interesting is when
adding &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1&lt;/code&gt; together.  In the traditional integer arithmetic you’re likely
familiar with, you’d get a &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.  In arithmetic over
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;,
you need to take the result
&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;,
and so &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1&lt;/code&gt; results in zero, as shown in Fig 1.&lt;/p&gt;

&lt;p&gt;Think about that operation again for a moment: &lt;code class=&quot;highlighter-rouge&quot;&gt;0+0=0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0+1=1&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;1+1=0&lt;/code&gt;.
That describes an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;exclusive or operation, or XOR&lt;/a&gt;.&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2: Multiplication in GF(2)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/gf2-multiply.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We’ll do the same thing for multiplication.  In this case, multiplying numbers
from the set of zero and one will only yield the result zero and one, so
you might not notice the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;modulo two&lt;/a&gt;.  Then,
when you look at the results as shown in Fig 2, you’ll quickly see that
multiplication over
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;
is nothing more than a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;bitwise-and&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given these two operators, let’s define a bit-vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;, whose elements
are either zero or one—elements from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.  We’ll also state that
this bit-vector has an initial value given by &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  In a similar
manner,
we can construct a linear operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;T(x)&lt;/code&gt;, that can be
applied to &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; to yield a new or updated value for &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; at the next
time-step.  This operator will be defined by another vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt;, but
we’ll come back to this in a moment.  For now, just remember that &lt;em&gt;any&lt;/em&gt;
linear operation on a finite set can be represented by a matrix–another
fact we’ll come back to.&lt;/p&gt;

&lt;p&gt;In pseudocode notation, an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
just applies the linear operator to the current &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; value over and over
again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sreg = INITIAL_FILL;
while(!armageddon)
	sreg &amp;lt;= T(sreg);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A key thing to point out, though, is that any linear operation on the all
zeros vector will always return the all zeros vector, hence &lt;code class=&quot;highlighter-rouge&quot;&gt;T(zero)==0&lt;/code&gt;.  As
we go along, we’ll need to be careful to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; from becoming zero.&lt;/p&gt;

&lt;p&gt;What makes
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s so special
is that as you apply this linear operator, the bottom bit will appear
to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom&lt;/a&gt;.  If you
choose your linear system well, an &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bit shift register will walk through
all possible &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N-1&lt;/code&gt; combinations before repeating–generating &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(N-1)&lt;/code&gt;
ones, and &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(N-1)-1&lt;/code&gt; zeros along the way.  You do need to be aware, though,
not all linear systems have this property.  Those that do are said to
create &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;Maximal Length
Sequences&lt;/a&gt;.
These &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequences&lt;/a&gt;, however,
tend to be well known, and &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1hnFigZpPEBg9hdFjImPzOgRsgZWAYupFBaTePN0BuAw/&quot;&gt;tables even
exist&lt;/a&gt;
containing examples of
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
that will generate anything from short
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom sequences&lt;/a&gt;
all the way up to &lt;em&gt;very long&lt;/em&gt; ones.&lt;/p&gt;

&lt;p&gt;Ok, I promised not to get deep into the math, but it is important to understand
that &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s
implement a &lt;em&gt;linear&lt;/em&gt; operation on a bit-vector.  These linear
operations can be represented as a matrix operation–but only if the
linear system described by the matrix follows the rules of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;galois&quot;&gt;Galois&lt;/h2&gt;

&lt;p&gt;As the &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;wikipedia article on LFSR&lt;/a&gt;s explains, there are two forms of expressing
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;s.  The first
is a Galois form, the second is known as the Fibonacci form.  Both will yield
the same sequences, although their initial parameters, &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;,
and their &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; values will be difference from one form to the other.
(Don’t worry, we’ll define these more formally in a moment.) Pictorially, a
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Galois shift register
implementation&lt;/a&gt;
looks like Fig 3.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3: A Galois Shift Register Configuration&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr-galois.svg&quot; alt=&quot;Picture of a Galois shift register&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s let the number of stages in this register be &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt;, and the initial
value of all of the stages given by &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  The last item needed
to implement a general purpose &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;Galois shift register
implementation&lt;/a&gt;
are the coefficients of the multiplies shown in the figure above.  We’ll
call these the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt;–mostly because they “tap-into” the shift register
sequence when one, and ignore it when zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;parameter	LN = ... ; // the size of your bit-vector
parameter	[(LN-1):0]	TAPS = ..., // some value in your design
				INITIAL_FILL = ... ;// Another design parameter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looking at Fig 3 again, you can see an input going through
several (&lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt;) stages
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;Flip-flops&lt;/a&gt;)
of processing to create an output.  That output is then
fed-back to affect the stages along the way.  Notice also the adds and the
multiplies.  These are the adds
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;)
and multiplies
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;AND&lt;/a&gt;)
we discussed in our last section.&lt;/p&gt;

&lt;p&gt;The multiplication values are given by the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; of the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.  They do
not change during sequence generation.
The mathematicians will describe the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; as the coefficients of a
polynomial in &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.
These coefficients can either be a one or a zero–as with everything in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;.
As we mentioned above, &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1hnFigZpPEBg9hdFjImPzOgRsgZWAYupFBaTePN0BuAw/&quot;&gt;specific
choices&lt;/a&gt;
will yield &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequences&lt;/a&gt;.
If you would rather, though, I tend to think of &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; as just a particular
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bit binary vector.&lt;/p&gt;

&lt;p&gt;One of the reasons why I wanted to point out, in the last section, that an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt; is nothing
but a linear operator over
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_field&quot;&gt;GF(2)&lt;/a&gt;, is that it allows us to
write out this formula as a series of linear equations.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-galois.png&quot; alt=&quot;Matrix equation for a Galois shift register&quot; width=&quot;665&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this form, I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;g_1&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;g_(N-1)&lt;/code&gt; to represent the taps.  The
bit vector,  &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, has &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; bits to it ranging from &lt;code class=&quot;highlighter-rouge&quot;&gt;x[0]&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;x[N-1]&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;x[MSB]&lt;/code&gt;.  This equation provides the formula for calculating the next
bit vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, from the last one.  It’s worth noting that the entire
matrix is nearly upper right triangular, save for the &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; coefficients in the
first column.&lt;/p&gt;

&lt;p&gt;Okay, so that’s the operation we want to perform.  Now, let’s finish &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_gal.v&quot;&gt;building
it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In pseudocode, I’m going to represent the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;’s in a register I’ll call &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;,
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;’s will be our &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; bit-vector parameter.&lt;/p&gt;

&lt;p&gt;The other value of interest is the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  For a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequence&lt;/a&gt;, the only
restriction on the &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; is that it &lt;em&gt;cannot be&lt;/em&gt; zero.  Any other
value is allowed.  This &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; will determine your starting point in
the random sequence created by the
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also have noticed the “input” in Fig 3.  We’ll set this to zero
for today’s task.  Setting it to another value has the effect of creating a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scrambler&quot;&gt;feed-through randomizer&lt;/a&gt;, rather than
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudorandomness&quot;&gt;pseudorandom number
generator&lt;/a&gt; we are building
today.&lt;/p&gt;

&lt;p&gt;The code necessary to implement a Galois shift register can be drawn directly
from Fig 3.  We’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; to describe the values in the register, so that
our output, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_bit&lt;/code&gt;, is just the LSB of &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;assign	o_bit = sreg[0];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On a reset, we’ll initialize &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; to our &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt;.  Likewise, we’ll use
the “global-CE” &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline
strategy&lt;/a&gt;,
so nothing is allowed to change unless &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is also true.  This will make our
circuit useful for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt;
tasks that need to run synchronously at data rates other than our clock rate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if (i_reset)
		sreg &amp;lt;= INITIAL_FILL;
	else if (i_ce)
	begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that aside, our logic is straight-forward.  On every clock, we move all
the bits forward by one step.  If the LSB is a one, we add
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;) the
&lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; vector to our state vector as the bits step forward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		if (sreg[0])
			sreg &amp;lt;= { 1&#39;b0, sreg[(LN-1):1] } ^ TAPS;
		else
			sreg &amp;lt;= { 1&#39;b0, sreg[(LN-1):1] };
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note how we checked for a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; bit in the bottom bit of &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;.  This is how to
implement the multiply.  If the bottom bit is a zero, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt; times
zero will be the zero vector which will not affect anything when added.  On
the other hand, if &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[0]&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, we’ll add the taps to our result.&lt;/p&gt;

&lt;p&gt;The astute observer may note here that &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS[LN-1]&lt;/code&gt; must be a one, or the
most significant bit (MSB) will be trivially zero.&lt;/p&gt;

&lt;p&gt;Incidentally, this version of an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
is &lt;em&gt;really&lt;/em&gt; easy to calculate in software, and its C++ equivalent is given
by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;LFSR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ... LN is given by 8*size(unsigned) below
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// ... define INITIAL_FILL, TAPS, etc
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;LFSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_FILL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INITIAL_FILL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Calculate the output value up front
&lt;/span&gt;		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Shift the register
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Use the output value to determine if the TAPS
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// need to be added (XORd) in
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look hard through the Linux kernel sources, you’ll even find an
implementation of &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/lib/crc32.c?h=v4.13.10&quot;&gt;this algorithm&lt;/a&gt;
 within them.  .
&lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/lib/crc32.c?h=v4.13.10&quot;&gt;There&lt;/a&gt;, though
it’s used to implement a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;Cyclic Redundancy Check
(CRC)&lt;/a&gt;
and so their input isn’t zero.&lt;/p&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_gal.v&quot;&gt;copy of the code for the
Galois&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
on &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;Github&lt;/a&gt;, as a part of
my &lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;filtering repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fibonacci&quot;&gt;Fibonacci&lt;/h2&gt;

&lt;p&gt;The other
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt; form is
the Fibonacci form.  The Fibonacci form of an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
is mathematically equivalent to the Galois
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
save that the outputs are calculated in a different manner, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAPS&lt;/code&gt;
need to be “reversed”.  The diagram in Fig 4 shows the basic form of the
Fibonacci &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: A Fibonacci Shift Register Configuration&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/lfsr.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, it’s the intermediate stages whose values are added
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;‘d)
together to produce an update value that is then added
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;‘d)
to the input.&lt;/p&gt;

&lt;p&gt;In many ways, this makes an ideal form for implementing an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;:
The feedback bit is usually calculated from just a small
number of taps (2-4) into the shift register, making it &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;fit within a single
LUT&lt;/a&gt; quite easily.
Another unique feature to this form is that the values in the shift
register aren’t modified between when they are originally calculated and
the output–making it possible to see then next &lt;code class=&quot;highlighter-rouge&quot;&gt;LN&lt;/code&gt; output bits by
just examining the shift register state.  (We’ll use this in our next
post on
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;’s,
showing how to generate more than one bit at a time.)&lt;/p&gt;

&lt;p&gt;As with the Galois
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;,
the Fibonacci version also implements a linear system.  This time, though,
it has a different structure.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-fibonacci.png&quot; alt=&quot;Matrix equation for a Fibonacci shift register&quot; width=&quot;687&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;where the &lt;code class=&quot;highlighter-rouge&quot;&gt;MSB&lt;/code&gt; is the feedback bit above.&lt;/p&gt;

&lt;p&gt;When it comes to implementation, the initial implementation steps are the
same as with the Galois implementation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if (i_reset)
		sreg &amp;lt;= INITIAL_FILL;
	else if (i_ce)
	begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difference is what you do to determine the next output bit.  When using
the Fibonacci form, we take an &lt;a href=&quot;https://en.wikipedia.org/wiki/Inner_product_space&quot;&gt;inner
product&lt;/a&gt; between or
bit-vector, &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt;, and our TAPS vector.  This is nothing more than a point by
point multiply (&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;AND&lt;/a&gt;),
followed by summing
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;)
all of the results of the multiplies together to create the new high order
bit.  As before, we’ll hold the “input” to zero, and so we get the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.cpp&quot;&gt;following
formula&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		sreg[(LN-2):0] &amp;lt;= sreg[(LN-1):1];
		sreg[LN-1] &amp;lt;= ^(sreg[(LN-1):0] &amp;amp; TAPS);
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s not often that you get a chance to use an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;XOR&lt;/a&gt;
reduction operator, however
this is one of those times.  Note the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;^(sreg[..] &amp;amp; TAPS)&lt;/code&gt;.  The
&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; in the front of this specifies that all of the values in &lt;code class=&quot;highlighter-rouge&quot;&gt;sreg[..] &amp;amp; TAPS&lt;/code&gt;
are to be added together, in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Exclusive_or&quot;&gt;modulo two sum&lt;/a&gt;–just
what we need to do here.&lt;/p&gt;

&lt;p&gt;This isn’t the only way to build a Fibonacci
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
For example, &lt;a href=&quot;http://www.xilinx.com/support/documentation/application_notes/xapp210.pdf&quot;&gt;this Xilinx app
note&lt;/a&gt;
discusses how to implement an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
using the shift register
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic blocks&lt;/a&gt;
within a &lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
&lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
development is different from
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.cpp&quot;&gt;mine&lt;/a&gt;
primarily because the
shift register &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic block&lt;/a&gt;
that &lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt; depended upon does not support a
reset signal.&lt;/p&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;copy of the code for this
Fibonacci&lt;/a&gt;
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
on &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;Github&lt;/a&gt;, also a part of
my &lt;a href=&quot;https://github.com/ZipCPU/dspfilters&quot;&gt;filtering repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would rather see this example in VHDL, there is a
&lt;a href=&quot;http://opencores.org/project,lfsr_random&quot;&gt;VHDL version&lt;/a&gt;
on &lt;a href=&quot;http://opencores.org&quot;&gt;OpenCores&lt;/a&gt; that you may find useful.&lt;/p&gt;

&lt;h2 id=&quot;test-bench&quot;&gt;Test Bench&lt;/h2&gt;

&lt;p&gt;I’ve also placed a test bench for each of these two shift register
implementations &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_gal_tb.cpp&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;here&lt;/a&gt;.
Since the two are nearly identical, I’ll walk through the salient portions
of one of them only.  For a more detailed description of how to build
a &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
based-test bench in general, please take a look at
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;this article&lt;/a&gt;.
The one thing we’ll do different here from many of my other projects is that
we’ll call &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; directly
rather than using a subclass–just because our simulation needs for
this component are so simple.&lt;/p&gt;

&lt;p&gt;You’ll find this test bench starts out very simply.  We call
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;’s
initialization routine, and declare a test bench based object upon our
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Verilated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Vlfsr_fib&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re also going to declare three more variables: &lt;code class=&quot;highlighter-rouge&quot;&gt;clocks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;nout&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ones&lt;/code&gt;.
We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;clocks&lt;/code&gt; variable to count the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;clocks&lt;/code&gt; we use, to keep
from overloading the user’s screen with numbers.  &lt;code class=&quot;highlighter-rouge&quot;&gt;nout&lt;/code&gt; will be used to
help us place spaces in the output, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ones&lt;/code&gt; will be used to count the
number of ones in our output.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;test bench&lt;/a&gt; also
assumes that our result will be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_length_sequence&quot;&gt;maximal length
sequence&lt;/a&gt;.  In this
case, there should be exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(LN)-1&lt;/code&gt; unique outputs (clock ticks before
&lt;code class=&quot;highlighter-rouge&quot;&gt;sreg&lt;/code&gt; equals one again), and &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(LN-1)&lt;/code&gt; ones in those outputs.  This will
be our evidence of success.&lt;/p&gt;

&lt;p&gt;Our next step will be to start our core with a reset pulse.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// reset our core before cycling it
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TRACE_POSEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TRACE_NEGEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TRACE_POSEDGE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TRACE_NEGEDGE&lt;/code&gt; are macros used to write the
simulation state to a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the reset is complete, we’ll assert that the shift register initial state
is &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.  While this doesn’t necessarily need to be the case, setting
&lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; to anything else within the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/lfsr_fib.v&quot;&gt;Verilog file&lt;/a&gt;
will necessitate coming back and updating it here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v__DOT__sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll move on to the simulation itself.  We’ll start out with
&lt;code class=&quot;highlighter-rouge&quot;&gt;16384&lt;/code&gt; clocks of simulation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;TRACE_POSEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;TRACE_NEGEDGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On each of these clocks, we’ll print an output bit to the screen.  This should
allow you to visually verify that the bits &lt;em&gt;look&lt;/em&gt; random.  We’ll place
spaces between every eight bits for easier reading as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_bit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;nout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if the shift register value ever returns to our &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_FILL&lt;/code&gt; of one,
then we know we’ve exhausted the sequence.  We can therefore break.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v__DOT__sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TRACE_CLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case you want to test for a &lt;em&gt;really long&lt;/em&gt; sequence, the &lt;code class=&quot;highlighter-rouge&quot;&gt;16k&lt;/code&gt; clocks
won’t be enough.  Rather than continue to fill your screen, the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;test bench&lt;/a&gt;
just quietly continues crunching here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v__DOT__sreg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_bit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a final step, let’s compare the number of clocks we used in our output
to determine whether or not the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/lfsr_fib_tb.cpp&quot;&gt;test bench&lt;/a&gt;
was ultimately successful.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Simulation complete: %d clocks (%08x), %d ones&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SUCCESS!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FAILURE!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, since I’m posting this, I’ve already proven it …&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There you go!  That’s all there is to building an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
and demonstrating that it works.&lt;/p&gt;

&lt;p&gt;Sadly, though, neither of our implementations today was sufficient for my
&lt;a href=&quot;https://en.wikipedia.org/wiki/System_identification&quot;&gt;channel estimation&lt;/a&gt;
problem at 950MHz.  Even if I &lt;em&gt;could&lt;/em&gt; run this logic that fast, the rest of my
logic wouldn’t be able to keep up.  As a result, we’ll need to come back to
this topic and see if we can’t build an
&lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;
that produces multiple outputs in parallel.&lt;/p&gt;

&lt;p&gt;Still, &lt;a href=&quot;https://wikipedia.org/wiki/Linear-feedback_shift_register&quot;&gt;LFSR&lt;/a&gt;’s are
a fundamental &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt;
tool, that’s easy to implement within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
Feel free to try yourself!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;I returned, and saw under the sun, that the race is not to the swift, nor the battle to the strong, neither yet bread to the wise, nor yet riches to men of understanding, nor yet favour to men of skill; but time and chance happeneth to them all.  (Eccl 9:11)&lt;/em&gt;</description>
        <pubDate>Fri, 27 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/dsp/2017/10/27/lfsr.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/10/27/lfsr.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>Some Simple Clock-Domain Crossing Solutions</title>
        <description>&lt;p&gt;In many ways,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
is the big
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bogeyman&quot;&gt;boogeyman&lt;/a&gt; within
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design.  It is hard to see when desk-checking a design, it doesn’t show up
on all simulations (certainly not with
&lt;a href=&quot;https://www.veripool.org/wiki/verilator/&quot;&gt;Verilator&lt;/a&gt;), your synthesis tool
can’t solve it, and timing analysis often just gets in the way of dealing
with it.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;Metastability&lt;/a&gt;,
though, can make your design unreliable.  If your design has a problem with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;,
then it might never work.  It might work today and not tomorrow.  It might
work perfectly for months, and then have a fatal flaw.&lt;/p&gt;

&lt;p&gt;In many ways,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
problems are the worst of all errors.  They are hard to trace.  You might
deliver to a customer a design that passes all of your internal tests,
only to have that (now) disgruntled customer tell you it doesn’t work.
Then, to add insult, when you get the hardware back to examine, it works again.
This is the nature of an unpredictable problem such as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ouch!&lt;/p&gt;

&lt;p&gt;So, what causes
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;?
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;Metastability&lt;/a&gt;
is caused when the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)#Timing_considerations&quot;&gt;set up and hold
time&lt;/a&gt;
requirements of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
aren’t met.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
then enters a state which is neither zero nor one, neither high nor low.  It
may be read by some of your logic as a zero, and by other parts of your logic
as a one.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;Metastability&lt;/a&gt;,
therefore, can cause your logic to do some very unpredictable and (apparently)
illogical things.&lt;/p&gt;

&lt;p&gt;For the digital designer,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
can take place any time a signal crosses from one clock domain to another.
This is called a “&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;Clock Domain
Crossing&lt;/a&gt;”, or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;, and it needs
some special engineering to be done properly.&lt;/p&gt;

&lt;p&gt;Today, therefore, let’s look at several basic solutions to solving
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;
issues.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-clock-domain&quot;&gt;What is a clock domain&lt;/h2&gt;

&lt;p&gt;If we need to pay special attention to &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;clock domain
crossings&lt;/a&gt;,
the first question that we need to answer is, just what is a “clock domain”?&lt;/p&gt;

&lt;p&gt;A “Clock Domain” is that portion of your circuitry that is generated and
processed by a single clock.  I like to build my component IP’s to use a
single master clock that I call, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;.  All of the registers, then, that are
set within such components on the positive edge of this &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt; clock signal
form a single clock domain.  Indeed, all of the registers set within an entire
design on the same edge of a same clock form a single clock domain.
Combinatorial logic based upon this register set is also within this same
clock domain.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: Four clock domains&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-domains.svg&quot; alt=&quot;Blobology image, showing four separate clock domains: asynchronous inputs, posedge clock_one, negedge clock_one, and posedge clock_two&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As an example, Fig 1 shows four separate clock domains within a design.
Perhaps this might make more sense, though, if we looked at how to recognize
these examples within some Verilog RTL.&lt;/p&gt;

&lt;p&gt;Let’s examine the positive edge of &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_one&lt;/code&gt;.  Any register set on the
positive edge of &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_one&lt;/code&gt; is within one clock domain–the yellow domain in
Fig 1.  Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_reg_one&lt;/code&gt; in the example below will be within this clock
domain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;reg	r_reg_one;
always @(posedge clock_one)
	r_reg_one &amp;lt;= (some_logic);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any logic can be created, based upon &lt;code class=&quot;highlighter-rouge&quot;&gt;r_reg_one&lt;/code&gt; and transitioning on
the positive edge of &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_one&lt;/code&gt;, without crossing a clock domain.  Hence,
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_pipe_one&lt;/code&gt; below is still within the same &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_one&lt;/code&gt; clock domain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;reg	[(N-1):0]	r_pipe_one;
always @(posedge clock_one)
	r_pipe_one &amp;lt;= { r_pipe_one[(N-2):0], r_reg_one };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to combinatorial logic as well, not just register logic.  Any
combinatorial logic depending only upon inputs created within the same
clock domain is also within that clock domain.  Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;w_wire_one&lt;/code&gt; below
remains within the &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_one&lt;/code&gt; clock domain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;wire	w_wire_one;

assign	w_wire_one = |r_pipe_one;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Anything depending upon another clock, though, is in a different clock domain.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_reg_two&lt;/code&gt; below is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;posedge clock_two&lt;/code&gt; clock domain,
shown in red in Fig 1 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge clock_two)
	r_reg_two &amp;lt;= (some_other_logic);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, the negative edge of a clock is a separate clock domain from the
positive edge of the same clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(negedge clock_one)
	r_reg_three &amp;lt;= ...;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So if that’s a clock domain, what’s a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;clock domain crossing&lt;/a&gt;?&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2: Clock Domain Crossings (CDCs)&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-crossing.svg&quot; alt=&quot;Blobology image, showing four separate clock domains: asynchronous inputs, posedge clock_one, negedge clock_one, and posedge clock_two&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;clock domain crossing
(CDC)&lt;/a&gt;
takes place anytime the inputs to a given
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
were set based upon something other than the clock edge used by that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;.
Fig 2 illustrates three examples of this that we’ll discuss below.&lt;/p&gt;

&lt;p&gt;The clearest example of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;
is when the inputs to a register, say &lt;code class=&quot;highlighter-rouge&quot;&gt;r_reg_two&lt;/code&gt;, are set based upon
one clock, &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_one&lt;/code&gt;, yet the output is set based upon a second
clock–in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_two&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge clock_two)
	r_reg_two &amp;lt;= (some_function_of r_reg_one);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also applies to crossing from the positive edge of one clock to the
negative edge of any clock as well.  Hence, the following is a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;,
since &lt;code class=&quot;highlighter-rouge&quot;&gt;r_reg_one&lt;/code&gt; was set on the &lt;code class=&quot;highlighter-rouge&quot;&gt;posedge clock_one&lt;/code&gt; whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;r_reg_three&lt;/code&gt; is
set on the negative edge of the same clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(negedge clock_one)
	r_reg_three &amp;lt;= (some_function_of r_reg_one);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The third type of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;clock domain crossing&lt;/a&gt;
you are likely to see is the asynchronous input. If you have an input whose
value isn’t changing on your clock, then setting any register based upon it
represents a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;clock domain crossing&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge clock_one)
	r_input &amp;lt;= i_value;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Classic examples of asynchronous inputs that need carefully engineered
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;’s
are buttons, switches,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter&quot;&gt;UART receivers&lt;/a&gt;’s, and incoming
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus&quot;&gt;SPI&lt;/a&gt;
clocks, although other examples abound.  You may even remember the struggle
I had crossing from an &lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt; pixel clock
domain to my memory clock domain, as I discussed in a
&lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.md&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem with all of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;’s
is that they need to be managed, so as to mitigate the risk of any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
being placed into a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastable&lt;/a&gt; state.
How to mitigate these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;’s
is the topic of the rest of this article.&lt;/p&gt;

&lt;h2 id=&quot;re-synchronizing-a-slow-logic-signal&quot;&gt;Re-synchronizing a slow logic signal&lt;/h2&gt;

&lt;p&gt;Chances are that, if you’ve only superficially looked into
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;’s
before, you’ve been told that the way to synchronize a value going from one
clock to another is to pass it through two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
clocked with the new clock, as shown in Fig 3.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: CDC solution: Two Flip-flops&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-dbl-clock.svg&quot; alt=&quot;Crossing clock domains via two flip-flops&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Each of the two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
in this figure is clocked with the clock from the new clock domain, whereas
the input to the first one was created within the old clock domain.  While the
result of the first one may have a high probability of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;,
the output of the second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
has a much lower probability of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some engineers will even recommend not two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
but three.  In many ways, how many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
you use is dependent upon your application space,
and how catastrophic any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
problems would be.&lt;/p&gt;

&lt;p&gt;Example code for this might look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge new_clock)
	{ new_val, xfer_pipe } &amp;lt;= { xfer_pipe, i_val };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;xfer_pipe&lt;/code&gt; is either one or two bits wide.&lt;/p&gt;

&lt;p&gt;The trick to remember in this process is that none of your code should
reference the output of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;(s)
in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastable&lt;/a&gt;
region of the transfer pipe, referred as &lt;code class=&quot;highlighter-rouge&quot;&gt;xfer_pipe&lt;/code&gt; above.  The value of
&lt;code class=&quot;highlighter-rouge&quot;&gt;xfer_pipe&lt;/code&gt; is the value in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
danger region, shown in Fig 3 above in red.  Instead, you should wait one
more clock and use &lt;code class=&quot;highlighter-rouge&quot;&gt;new_val&lt;/code&gt; (in this example) instead.&lt;/p&gt;

&lt;p&gt;This works nicely for cases where the value from the old clock domain changes
slowly–much slower than the frequency of the new clock domain’s clock.
Not all &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;
problems, though, are that simple.  Other problems require
different solutions, but almost all such solutions are dependent upon this
first basic method.&lt;/p&gt;

&lt;h2 id=&quot;asynchronous-reset-assertion-synchronous-release&quot;&gt;Asynchronous Reset Assertion, Synchronous Release&lt;/h2&gt;

&lt;p&gt;One particularly common example of a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt; is an
asynchronous reset.  I know I’ve given &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;beginners the advice of never using an
asynchronous reset&lt;/a&gt;.
I stand by this advice &lt;em&gt;for beginning
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designers&lt;/em&gt;.  [&lt;a href=&quot;https://forums.xilinx.com/t5/PLD-Blog/That-Dangerous-Asynchronous-Reset/ba-p/12856&quot;&gt;Xilinx Ref&lt;/a&gt;]
There comes a time,
though, when you need an asynchronous reset.&lt;/p&gt;

&lt;p&gt;For me, I last found myself &lt;em&gt;needing&lt;/em&gt; an asynchronous reset was when I needed
to reset a circuit whose clock I had stopped.  Without the clock, I couldn’t
reset the circuit and so I needed an asynchronous reset.&lt;/p&gt;

&lt;p&gt;The problem isn’t so much entering the reset state, the problem is
exiting the reset state.  The exit needs to be done synchronous to the
clock.  If it isn’t, you not only risk
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
problems, but you also risk some parts of your design getting released from
the reset state before (or after) others.
(This &lt;a href=&quot;https://forums.xilinx.com/t5/PLD-Blog/That-Dangerous-Asynchronous-Reset/ba-p/12856&quot;&gt;Xilinx Ref&lt;/a&gt; discusses some of that)&lt;/p&gt;

&lt;p&gt;Creating an asynchronous reset line with a synchronous release isn’t really
all that hard to do in Verilog.  Indeed, you might argue that the Verilog
solution below looks a lot like our two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
solution above.&lt;/p&gt;

&lt;p&gt;In this example, we assume an active low asynchronous reset, and we synchronize
the exit from this reset state using another active low signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;s_reset_n&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;reg	s_reset, r_pipe;
always @(posedge i_clk, negedge i_reset_n)
	if (!i_reset)
		{ s_reset_n, r_pipe } &amp;lt;= 2&#39;b00;
	else
		{ s_reset_n, r_pipe } &amp;lt;= { r_pipe, 1&#39;b1 };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;s_reset_n&lt;/code&gt; as an asynchronous active low reset signal
throughout your design.&lt;/p&gt;

&lt;p&gt;Engineers have argued about whether active high or active low resets are
better.  In general it doesn’t make a difference within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
however the peripherals the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
controls may have specific requirements.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
&lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;designers&lt;/a&gt;, on the
other hand, tend to like the active low reset.  Verilog designed to handle
both &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
implementations will likely need this circuitry therefore.&lt;/p&gt;

&lt;h2 id=&quot;the-cross-clock-handshake&quot;&gt;The Cross-clock Handshake&lt;/h2&gt;

&lt;p&gt;One of the problems with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt; chain
method of handling
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;’s is that
nothing guarantees that the input is stable long enough to know that the
output was received.  Sometimes, for example, you want a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;
method that can handle going from a slow clock to a fast clock, from a fast
clock to a slow clock, or even from one clock of unknown speed to another
clock having no known relationship to the first.  This calls for another
approach: the handshaking method, shown in Fig 4.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 4: A Request-acknowledgement hand-shake&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-dbl-ack.svg&quot; alt=&quot;Crossing clock domains with a handshake.  First a request crosses, then the acknowlegement returns.  When both are clear, a new request can take place&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this figure, two clock domains are shown, yellow and green, together with
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastable&lt;/a&gt;
region between the two shown in pink or red.  Time goes from top to bottom,
showing messages being passed back and forth from the two sides.&lt;/p&gt;

&lt;p&gt;The figure also shows how the hand-shaking method works.  The first thing
that happens is that a request is made from the old clock domain and then
passed to the new clock domain.  The request goes through the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;
region using the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
chain method described above.  Once it gets to the new clock domain,
an acknowledgement is sent back–also going through the same
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
chain method, but this time with the old clock driving the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt; chain.
Once the acknowledgement has been received, the request signal may be dropped
(cleared), at which point the new clock domain drops its acknowledgement flag.&lt;/p&gt;

&lt;p&gt;One trick of this method, though, is that no new request can be made until the
acknowledgement has been cleared.  This “I’m busy” region is shown in Fig 4
as a bright red bar, during which time no new requests may be sent.&lt;/p&gt;

&lt;p&gt;Let’s walk through this approach in Verilog, shall we?&lt;/p&gt;

&lt;p&gt;First, something starts this off by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;req&lt;/code&gt; register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge old_clock)
	req &amp;lt;= (some_logic);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This logic isn’t quite complete, but we’ll come back to it in a moment.&lt;/p&gt;

&lt;p&gt;Then, on the new clock, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
chain is used to receive this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;
request from the old clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge new_clock)
	{ new_req, xreq_pipe } &amp;lt;= { xreq_pipe, req };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the request has been received, it is immediately sent back to the original
clock in the form of an acknowledgement.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge old_clock)
	{ old_ack, xack_pipe } &amp;lt;= { xack_pipe, new_req };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only when this acknowledgement is low again are we ready to send any subsequent
requests.  Hence, we are busy from the time the original request is sent until
the time later when the acknowledgement is cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;assign	busy = (req)||(old_ack);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This then gives us the final logic we need to create our request in the
first place.  We can send a request any time we are not busy, and 
some event has happened that we wish to place on the other clock domain.
Once the acknowledgement has been received, we drop our request line
and wait for the acknowledgement to be dropped as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge old_clock)
	if ((!busy)&amp;amp;&amp;amp;(some_event))
		req &amp;lt;= 1&#39;b1;
	else if (old_ack)
		req &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, this is the basic handshaking method used within my
&lt;a href=&quot;https://github.com/ZipCPU/wbscope&quot;&gt;Wishbone scope&lt;/a&gt;
in order to send information, such as a reset scope command, from the bus clock
domain to the data clock domain and back again.&lt;/p&gt;

&lt;h2 id=&quot;signaling-a-rare-event&quot;&gt;Signaling a (rare) event&lt;/h2&gt;

&lt;p&gt;From here, we can build upon this idea to send an “event” from one domain
to another.  By “event”, I mean something that will only ever be true for
a single clock cycle.  To work, though, the event will need to be rare
enough that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;
circuit isn’t still busy handling the last event.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Passing an event across clocks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-stb.svg&quot; alt=&quot;An event crossing clock domains: first it triggers the request, and then the rising change in the acknowledgement triggers the event in the new domain&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic method, shown in Fig 5 above, is almost identical to what we did
before.  There are only two basic differences.&lt;/p&gt;

&lt;p&gt;The first difference is that we trigger off of a specific single-clock
event, rather than off of some yet to be defined logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge old_clock)
	if ((!busy)&amp;amp;&amp;amp;(i_stb))
		req &amp;lt;= 1&#39;b1;
	else if (old_ack)
		req &amp;lt;= 1&#39;b0;
assign	busy = (req)||(old_ack);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second difference is that we need to recognize a rising request signal
within the new clock domain.  This means that we need to keep track of the last
state of the request signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;last_req&lt;/code&gt;, in our pipeline request logic as well
as the rest of the pipeline request logic we used before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge new_clock)
	{ last_req, new_req, xreq_pipe } &amp;lt;= { new_req, xreq_pipe, req };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, any time the &lt;code class=&quot;highlighter-rouge&quot;&gt;last_req&lt;/code&gt;uest is low, but a &lt;code class=&quot;highlighter-rouge&quot;&gt;new_req&lt;/code&gt;uest has been
made, we know we need to generate the event under the new clock domain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge new_clock)
	o_stb &amp;lt;= (!last_req)&amp;amp;&amp;amp;(new_req);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can use this approach to send triggers from one clock domain,
such as the video refresh interrupt created within the video clock domain
to the interrupt controller which may be within the CPU’s clock domain.&lt;/p&gt;

&lt;h2 id=&quot;sending-a-group-of-wires-at-once&quot;&gt;Sending a group of wires at once&lt;/h2&gt;

&lt;p&gt;You can also use this transfer approach to send a group of wires at once.&lt;/p&gt;

&lt;p&gt;This was the approach I used when I wanted to send a byte’s worth of data
at once from the
&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-2-model-b/&quot;&gt;RPi&lt;/a&gt;
to the &lt;a href=&quot;http://www.latticesemi.com/iCE40&quot;&gt;iCE40&lt;/a&gt; on top of my
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;.  Since I was designing the
interface with no idea of how fast the two clocks would be relative to
one another, I needed a handshaking method to control the transfer of all
8-bits at once.  You can see the project that uses this approach
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;here&lt;/a&gt;.  The
&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-2-model-b/&quot;&gt;RPi&lt;/a&gt;
software can be found in &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/netpport.cpp&quot;&gt;sw/host/netpport.cpp&lt;/a&gt;,
whereas the Verilog half of the interface can be found in
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/pport/pport.v&quot;&gt;pport/pport.v&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How would we handle that?&lt;/p&gt;

&lt;p&gt;The first step would be to copy the data to a transfer region, and then
to set a “pre-transfer” signal indicating that the data was valid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge old_clock)
	if ((!busy)&amp;amp;&amp;amp;(!valid_data))
		transfer_data &amp;lt;= i_data;
		valid_data &amp;lt;= 1&#39;b1;
	end else if (old_ack)
		valid_data &amp;lt;= 1&#39;b0;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This needs to be done on the clock before the transfer starts.&lt;/p&gt;

&lt;p&gt;You can then perform a handshake to the other clock domain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge old_clock)
	if ((!busy)&amp;amp;&amp;amp;(valid_data))
	begin
		req &amp;lt;= 1&#39;b1;
	else if (old_ack)
		req &amp;lt;= 1&#39;b0;
assign	busy = (req)||(old_ack);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the changed acknowledgement has been received, the data can be copied
into &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
controlled by the new clock domain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge new_clock)
	if ((!last_req)&amp;amp;&amp;amp;(new_req))
		o_data &amp;lt;= transfer_data;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
chain is necessary to receive the transfer data, since the
hand shake approach has already guaranteed that the transfer data is valid.&lt;/p&gt;

&lt;p&gt;One other difference, though, is that you don’t want to acknowledge the other
side until the transfer has been completed.  Hence, you would have the
following for the acknowledgement,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge old_clock)
	{ old_ack, xack_pipe } &amp;lt;= { xack_pipe, last_req };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This guarantees that the data will remain stable throughout the copy.&lt;/p&gt;

&lt;h2 id=&quot;sending-a-stream-of-values&quot;&gt;Sending a stream of values&lt;/h2&gt;

&lt;p&gt;What we haven’t discussed is the idea of sending a stream of values from one
clock to the next.&lt;/p&gt;

&lt;p&gt;Perhaps you are trying to write video from a camera to memory.  In this case,
you might be receiving 24-bit pixels at a high (pixel) clock rate, but that
you need to write &lt;code class=&quot;highlighter-rouge&quot;&gt;128-bits&lt;/code&gt; of data at a time to your
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3-SDRAM&quot;&gt;DDR3-SDRAM&lt;/a&gt; memory at a lower rate.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6: A FIFO can cross clock domains&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-fifo-plain.svg&quot; alt=&quot;A FIFO can cross clock domains&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Alternatively, you might be wanting to store and forward results from a
high speed &lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;analog to digital converter
(A/D)&lt;/a&gt; across an
ethernet port.  Indeed, the example applies for a low speed &lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;A/D 
Converter&lt;/a&gt;
as well!  Perhaps you are consistently sending data to the
new clock domain, but you are only reading it out rarely, and in high speed
bursts at that.&lt;/p&gt;

&lt;p&gt;In both examples, you have a stream of data that needs to be moved from one
clock domain to another.&lt;/p&gt;

&lt;p&gt;The solution to this problem is to use a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;, such as the one shown in
Fig 6 above.  You may recall that &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;we’ve discussed FIFO’s
before&lt;/a&gt;.
Using such a &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;,
you can drive the input at one rate and the output at another.&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px;&quot;&gt;&lt;caption&gt;Fig 7: FIFO&#39;s need to manage other signals as well&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cdc-fifo.svg&quot; alt=&quot;A FIFO can cross clock domains&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The problem, though, is how do you build a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;crosses clock domains&lt;/a&gt;?
Specifically, you need to keep the source from writing if the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
is full, and you need to keep the sink from reading the output when the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
is empty–and both of these conditions depend on knowing information from the
other side of the 
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;.  Not only that,
but you need to be able to handle the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_domain_crossing&quot;&gt;CDC&lt;/a&gt;
with your reset circuitry as well.&lt;/p&gt;

&lt;p&gt;This, however, will need to remain the topic of a future post.&lt;/p&gt;

&lt;p&gt;Until then, if you are more interested in the topic,
Clifford E. Cummings of
&lt;a href=&quot;http://www.sunburst-design.com&quot;&gt;Sunburst Design&lt;/a&gt;
has written a &lt;a href=&quot;http://www.sunburst-design.com/papers/CummingsSNUG2008Boston_CDC.pdf&quot;&gt;wonderful, and rather extensive,
paper&lt;/a&gt;
on the topic.  I suspect you will find it to be very valuable–I certainly have.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;We know that we have passed from death unto life, because we love the brethren. He that loveth not his brother abideth in death. (1John 3:14)&lt;/em&gt;</description>
        <pubDate>Fri, 20 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/blog/2017/10/20/cdc.html</link>
        <guid isPermaLink="true">http://zipcpu.com/blog/2017/10/20/cdc.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>My first experience with Formal Methods</title>
        <description>&lt;p&gt;Clifford Wolf has written a nice tool, &lt;code class=&quot;highlighter-rouge&quot;&gt;yosys-smtbmc&lt;/code&gt;, based upon his
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; synthesys tool, that allows you to apply
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal methods&lt;/a&gt;
to your Verilog code.  The promise of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal methods&lt;/a&gt;
is that you can then mathematically &lt;em&gt;prove&lt;/em&gt; that your code works, or if not
then the formal solver should be able to tell you where your code is failing.&lt;/p&gt;

&lt;p&gt;I’ve only been working with these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;methods&lt;/a&gt;
for a week or so, but already there are some things I can share.&lt;/p&gt;

&lt;p&gt;The first project I tried applying these formal methods to was a simple
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;SPI-based A/D converter&lt;/a&gt;.  This particular
controller is designed to interact with a
&lt;a href=&quot;https://store.digilentinc.com&quot;&gt;Digilent&lt;/a&gt; &lt;a href=&quot;https://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain/&quot;&gt;product containing a
MEMs based microphone&lt;/a&gt;.  I’ve had
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;the project&lt;/a&gt;
built for some time, although I’ll admit I’ve never actually done anything
more with it than plug it in.&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;the project&lt;/a&gt; is simple enough, I
thought I’d try applying
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal methods&lt;/a&gt;
to it, to &lt;em&gt;prove&lt;/em&gt; that my controller worked.  Sure, I had a &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/wbmic_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
that I had built some time earlier to convince me that the project worked.
The &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/wbmic.v&quot;&gt;design&lt;/a&gt; worked
well against this &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/wbmic_tb.cpp&quot;&gt;test
bench&lt;/a&gt;,
so I didn’t expect to find many problems using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Imagine my surprise when I found several bugs instead.  Not only that, many of
those bugs were within my &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;FIFO
implementation&lt;/a&gt;–something
that I’d passed from one project to another for some time.  You see, when I
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;built my FIFO&lt;/a&gt; I only tested
it in a fashion such as a “reasonable” person might use it.  Under this
“reasonable use” scenario, the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
had done well.&lt;/p&gt;

&lt;p&gt;The formal prover, however, didn’t limit itself to what I considered
“reasonable” usage of the
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;FIFO&lt;/a&gt;.
It created underruns and overruns, wrote to the
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;FIFO&lt;/a&gt;
when it was full, and read from the
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;FIFO&lt;/a&gt;
when it was empty.
It even wrote &lt;em&gt;and&lt;/em&gt; read from the empty
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;FIFO&lt;/a&gt;
on the same clock, and it wrote and read from the full
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;FIFO&lt;/a&gt;
on the same clock as well.
When the internal logic didn’t “match” the criteria I gave the solver, it then
showed me where &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;my FIFO
code&lt;/a&gt;
didn’t properly handle these conditions.&lt;/p&gt;

&lt;p&gt;I guess I just didn’t have that much creativity when I created my &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/wbmic_tb.cpp&quot;&gt;test
bench&lt;/a&gt;
in the first place.&lt;/p&gt;

&lt;p&gt;Was the result worth it?  Keep in mind, I’ve never used
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;these methods&lt;/a&gt;
before.  So did I think it was worth it?  I think so.  I haven’t “proved”
all of my projects yet, nor do I know if I will be able to, but I have added
proofs to some of them—and found bugs as a result.&lt;/p&gt;

&lt;p&gt;Today, though, I’d like to share some of what I have learned.&lt;/p&gt;

&lt;h2 id=&quot;state-sets&quot;&gt;State Sets&lt;/h2&gt;

&lt;p&gt;If you’ve never worked with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal methods&lt;/a&gt;
before, the basic concept is that you will
go through your code and declare which states are valid and which are not.
You’ll then use a theorem prover to &lt;em&gt;mathematically&lt;/em&gt; &lt;em&gt;prove&lt;/em&gt; that you can
&lt;em&gt;never&lt;/em&gt; enter an invalid state from a valid one.  If the prover cannot
prove this, then typically you will have either a bug in your
code, or a bug in your formal assertions.&lt;/p&gt;

&lt;p&gt;You can think of the “state” as the values in all of your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s,
together with the values of all of your inputs.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: Bounded Model Check&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/formal-bmc.svg&quot; alt=&quot;BMC starts from a valid initial state, then wanders to see if it can get to an illegal state&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first step in yosys-smtbmc based theorem solving is the &lt;em&gt;bounded model
checker&lt;/em&gt; (BMC), figuratively shown in Fig 1.  This
part of the theorem solver starts your design in its initial state,
and then walks through all of the state transitions that it can, stepping your
logic forward from one time step to the next, just to see if any set of
conditions will drive your model to an invalid state.&lt;/p&gt;

&lt;p&gt;This may be the most straightforward part of using yosys-smtbmc, and the
easiest to understand.  The problem with the BMC step is that your time is
limited.  Therefore, you will only want to allow the BMC step to check some
finite number of transitions.  This number needs to be chosen carefully,
otherwise there may be states you might eventually get into over time that it
won’t find.&lt;/p&gt;

&lt;p&gt;You can also find these additional states via the second step:
the &lt;em&gt;induction&lt;/em&gt; step.&lt;/p&gt;

&lt;p&gt;The induction step is just like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_induction&quot;&gt;mathematical
induction&lt;/a&gt; you learned in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Precalculus&quot;&gt;Pre-calculus&lt;/a&gt;.  You
first prove that some property is true for the first value,
&lt;code class=&quot;highlighter-rouge&quot;&gt;n=1&lt;/code&gt;.  This was the purpose of the BMC step above.  If it is true for this
base case, you then proceed with the inductive step.  This step assumes that
your logic is within some initially valid state, say state &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, and it then
tries to prove that your logic will only transition to a valid state,
say state &lt;code class=&quot;highlighter-rouge&quot;&gt;n+1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s the idea.&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px&quot;&gt;&lt;caption&gt;Fig 2: The induction step&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/formal-induction.svg&quot; alt=&quot;Induction starts from a random valid state, and tries to prove that the state will never become invalid&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In practice, I’ve struggled with this induction step.  The challenge
to the designer with the induction step is that  you have to declare &lt;em&gt;every&lt;/em&gt;
unreachable state as invalid, or it might start processing from an
unreachable state you aren’t expecting.  As figure 2 shows, states
that are neither valid nor invalid,
but still states that the design will never reach, may easily become starting
states for induction.  It is therefore up to the designer to clearly
indicate that all states must be either valid or invalid.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: Unreachable states should be invalid&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/formal-unreachable.svg&quot; alt=&quot;To make induction work, all unreachable states should be declared as invalid&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let me try to explain this a touch better.  In a moment we’ll go over some
System Verilog statements that
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
will recognize.  These statements declare only the state that you cannot
get to.  They do this by either reducing the size of the total state space
examined, or by declaring particular states to be illegal.  That part is the
job of the formal specification designer.  The job of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal method&lt;/a&gt;
is to determine which states may be reached, and to then cross check these
states against the illegal ones.&lt;/p&gt;

&lt;p&gt;Perhaps a simple table, such as the one in Fig 4, might help to explain this.&lt;/p&gt;

&lt;table style=&quot;float: left; padding: 15px;&quot;&gt;&lt;caption&gt;Fig 4: Unreachable vs Invalid states&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/formal-chart.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What you want to know, as a designer, is whether or not there is any way that
you might reach an invalid state from a valid one.  Hence, you want to know if a
particular illegal state is reachable from a valid state.  This is the
purpose of &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal method&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;The part I struggled with while working through the induction step is that any
state that isn’t declared to be invalid might be a starting point for
induction–even if the state is unreachable.&lt;/p&gt;

&lt;p&gt;This should help give you an idea, should you try working with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal method&lt;/a&gt;s
yourself, that you need to make certain that unreachable states
are either declared to be invalid or removed from the set of possible states.&lt;/p&gt;

&lt;p&gt;Speaking of, that’s our next step: discussing how to declare states to be
invalid when using &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;formal-declarations&quot;&gt;Formal Declarations&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
can be made to understand some basic formal statements, drawn from a
subset of the System Verilog formal verification language.  This can be
frustrating for a new user of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal method&lt;/a&gt;s with
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;,
since most of the material on line discusses the full System Verilog formal
description language subset.  What &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
supports is much less than that.  Basically, 
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; supports &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;restrict()&lt;/code&gt;, and some expressions about transitions.  Let’s examine those
formal verification statements here.&lt;/p&gt;

&lt;p&gt;The first statement of interest is the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statement.  At first blush,
this statement works very much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statement within C/C++.
The value given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statement must be true, or you your design
isn’t working as desired.  &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;s do more than that, though.
&lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;s declare states that are invalid within your design.&lt;/p&gt;

&lt;p&gt;We’ll come back to that thought in a moment.&lt;/p&gt;

&lt;p&gt;The other thing you need to know about &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;s is that within a simulation,
if the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; is ever not true, the simulation will halt on a failure.
This allows you focus on what caused the problem within your design.&lt;/p&gt;

&lt;p&gt;The next basic statement is the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; statement.  This statement is like
the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;, but with the exception that the theorem prover doesn’t try to
prove that the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; statement is true.  Instead, it forces the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt;
to be true.  Any logic path that would cause the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; to be false
is quietly culled.  From the perspective of the state space that will be
examined, the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; statement removes particular states from the
realm of possibilities.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	last_clk = 1&#39;b0;
always @($global_clock)
	assume(i_clk == !last_clk);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will force the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt; input to the design to toggle with every
simulation step (that’s the meaning of the &lt;code class=&quot;highlighter-rouge&quot;&gt;$global_clock&lt;/code&gt;–it’s true on
every change of the time step).  States and state transitions where the
clock doesn’t toggle are just quietly removed from the realm of possibility.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; statements have one more feature: if during a simulation the
condition is &lt;em&gt;invalid&lt;/em&gt;, the simulation will halt with an error just as it would
if the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statement were false.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;restrict()&lt;/code&gt; instruction is similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; instruction.
Like &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;restrict()&lt;/code&gt; also reduces the size of the state space that
the theorem prover needs to work within.  In that way, a &lt;code class=&quot;highlighter-rouge&quot;&gt;restrict&lt;/code&gt; statement
is much like an &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; statement.
However, unlike the &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; statement, the &lt;em&gt;simulator&lt;/em&gt; will ignore any
&lt;code class=&quot;highlighter-rouge&quot;&gt;restrict()&lt;/code&gt; statements within your code.&lt;/p&gt;

&lt;p&gt;I’ve also found several functions to be very valuable: &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$rose()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;$fell()&lt;/code&gt;.  Since these are important,
let’s work our way through them.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; function has the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(expression, N)&lt;/code&gt;, for arbitrary
expressions, and positive integers, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;.  This statement returns the value
of the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; clocks ago.  Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(expression,1)&lt;/code&gt; references what
the expression evaluated to during the last clock.  The number of clocks
parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, defaults to one, so &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(expression)&lt;/code&gt; is just the same as
&lt;code class=&quot;highlighter-rouge&quot;&gt;$past(expression,1)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;System Verilog allows two more arguments to the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; function for a total
of four.  Not so with &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;, however you
may not find these extra arguments necessary either.  For example, the fourth
System Verilog argument to the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; function specifies what clock and
clock edge you are referencing the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; expression from.  Instead,
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
only allows expressions of &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; values within a clocked
always block, and so it uses the clock specified in the always statement to
define the clock the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; function is relative to.&lt;/p&gt;

&lt;p&gt;There is one other trick with the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; function: prior to the first
clock, the $past value is undefined and often assumed to be zero by many
formal theorem solvers.  You’ll need to be careful, therefore, not to expect
the $past value to reference any &lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; value within your logic.&lt;/p&gt;

&lt;p&gt;For this reason, I’ve gotten in the habit of creating a signal to tell me if
the past value is valid, such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	f_past_valid = 1&#39;b0;
always @(posedge i_clk)
	f_past_valid &amp;lt;= 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can then use &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; as part of an expression to determine whether or
not the inputs to a &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;wishbone
slave&lt;/a&gt; will not
change once the strobe goes high until the stall line is low.  Remember how
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;we discussed&lt;/a&gt;
that with &lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;wishbone&lt;/a&gt; nothing happens
until &lt;code class=&quot;highlighter-rouge&quot;&gt;(i_wb_stb)&amp;amp;&amp;amp;(!o_wb_stall)&lt;/code&gt;?  This means that once the
wishbone master
asserts the strobe signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt;, that it is likely to wait for the
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; signal to lower before changing the bus request details.
To capture this thought, we’ll assume that once &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt;
goes high, none of the bus request information will change until the
clock after &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; goes low:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_stb))&amp;amp;&amp;amp;($past_o_wb_stall))
	begin
		assume(i_wb_stb);
		assume(i_wb_we   == $past(i_wb_we));
		assume(i_wb_addr == $past(i_wb_addr));
		assume(i_wb_data == $past(i_wb_data));
		assume(i_wb_sel  == $past(i_wb_sel ));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, instead of assuming that the current value was equal to the
last value, we could have instead asserted that these values were &lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt;
for the same effect:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if ((f_past_valid)&amp;amp;&amp;amp;($past(i_wb_stb))&amp;amp;&amp;amp;($past_o_wb_stall))
	begin
		assume(i_wb_stb);
		assume($stable(i_wb_we));
		assume($stable(i_wb_addr));
		assume($stable(i_wb_data));
		assume($stable(i_wb_sel));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last of the basic commands you’ll want to know is the &lt;code class=&quot;highlighter-rouge&quot;&gt;$rose()&lt;/code&gt; command.
This command returns true or false depending on whether the signal given to
it has risen (positive edge) over the last clock period or not.&lt;/p&gt;

&lt;p&gt;This particular function is &lt;em&gt;very&lt;/em&gt; useful for telling the theorem prover that
your inputs are only going to change on the positive edge of the clock,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @($global_clock)
	// If it isn&#39;t the positive edge ...
	if (!$rose(i_wb_clk))
	begin
		// Then nothing changes
		assume(i_wb_stb);
		assume($stable(i_wb_we));
		assume($stable(i_wb_addr));
		assume($stable(i_wb_data));
		assume($stable(i_wb_sel));
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A similar &lt;code class=&quot;highlighter-rouge&quot;&gt;$fell()&lt;/code&gt; primitive exists as well for testing negative clock edges.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; provides one more helpful feature.
Anytime you use
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
to generate a formal description of your code, 
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; defines the &lt;code class=&quot;highlighter-rouge&quot;&gt;FORMAL&lt;/code&gt; flag.  Hence, you
can surround your formal properties with &lt;code class=&quot;highlighter-rouge&quot;&gt;ifdef&lt;/code&gt;’s, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;`ifdef	FORMAL
// ...
always @(posedge i_clk)
	assert(!illegal_state);
// ...
`endif&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These, therefore, are your basic  formal declaration statements:
&lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;restrict()&lt;/code&gt;.  They are helped by the functions
&lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$rose()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$fell()&lt;/code&gt;, and perhaps some others that I
haven’t learned yet.  (Remember, this is only my first week.)  &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;
declares statements to be illegal, and &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;restrict()&lt;/code&gt; are used
to limit the size of the state space.&lt;/p&gt;

&lt;p&gt;With these basic principles, let’s look at some formal theorem proving
concepts.&lt;/p&gt;

&lt;h2 id=&quot;basic-concept&quot;&gt;Basic concept&lt;/h2&gt;

&lt;p&gt;The basic approach to formally describing your program is to &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; that
the inputs will be valid, and then to &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; that the outputs are valid.
You may also wish along the way to &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; particular internal states
are valid as well.&lt;/p&gt;

&lt;p&gt;This works until you aggregate up one level, so that you have a higher level
module instantiating a lower level one.  In that case, you want to &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt;
the values that will be passed to the lower level module rather than
&lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt;ing them.&lt;/p&gt;

&lt;h2 id=&quot;a-fifo-example&quot;&gt;A FIFO example&lt;/h2&gt;

&lt;p&gt;Let’s work our way through a simple example–that of a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;.
In this case, we’ll examine the
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;FIFO&lt;/a&gt;
I just worked with for my &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;SPI-based microphone
ADC&lt;/a&gt; core.&lt;/p&gt;

&lt;p&gt;As you may remember from &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;our last
FIFO&lt;/a&gt; discussion, a
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; depends upon two
memory pointers: the write pointer, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_first&lt;/code&gt;, and the read pointer, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt;.
The only time &lt;code class=&quot;highlighter-rouge&quot;&gt;r_first&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt; are equal is when the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; is empty.
Likewise, the number of items within the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; is
determined by &lt;code class=&quot;highlighter-rouge&quot;&gt;r_first&lt;/code&gt; minus &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are some other rules associated with these two variables.
The first is that we cannot be allowed to read from the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
any time it is empty.  The second rule is that we cannot
write to the &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; when it
is full, unless we are also reading from the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; at the same time.
Any attempt to read from an empty
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;, or write to a full
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; should generate an error.&lt;/p&gt;

&lt;p&gt;In order to keep the state transitions from being dependent upon the
number of items in the 
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;, I pre-compute two values:
&lt;code class=&quot;highlighter-rouge&quot;&gt;will_overflow&lt;/code&gt;, which is true if the next write will overflow the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;will_underflow&lt;/code&gt;, which will be true if the next read will read from an
empty &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further, &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;this particular
FIFO&lt;/a&gt; also returns
a status value indicating 1) how many items are in the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;,
2) whether or not the FIFO is non-empty, and 3) whether or not the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
is past half-full.&lt;/p&gt;

&lt;p&gt;All of these details may also be derived from &lt;code class=&quot;highlighter-rouge&quot;&gt;r_first&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt; alone.  If
they don’t match, the &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
is in an illegal state.  Therefore, these properties are a perfect match
for learning
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal method&lt;/a&gt;s&lt;/p&gt;

&lt;p&gt;The first step is to gate all of our work so that the synthesis tool will
ignore it, unless we are working with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal verification methods&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;`ifdef	FORMAL
// ... ALl of our formal specifications go here
`endif // This goes at the end of our formal specification&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, within this &lt;code class=&quot;highlighter-rouge&quot;&gt;FORMAL&lt;/code&gt; block we want to make certain that the assumptions
we are going to make regarding our inputs will become asserts when this core
is included into a larger design.  We’ll do this by creating an &lt;code class=&quot;highlighter-rouge&quot;&gt;ASSUME&lt;/code&gt; macro
that we can use to constrain our inputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;`ifdef	SMPLFIFO
`define	ASSUME	assume
`else
`define	ASSUME	assert
`endif&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember that you only want to constrain via &lt;code class=&quot;highlighter-rouge&quot;&gt;ASSUME&lt;/code&gt; statements about
parameters that can be set by a higher level module, not external inputs.&lt;/p&gt;

&lt;p&gt;Earlier, I described what it would take to assume that the clock toggles.
We’ll repeat that here.  We’re also going to insist that this
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
starts in it’s reset state, by insisting that the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_rst&lt;/code&gt; line is initially
valid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial restrict(i_rst);

always @($global_clock)
begin
	restrict(i_clk == !f_last_clk);
	f_last_clk &amp;lt;= i_clk;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before leaving this beginning statement, let’s also insist that our
inputs &lt;em&gt;only&lt;/em&gt; change on the positive edge of the clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	if (!$rose(i_clk))
	begin
		`ASSUME($stable(i_rst));
		`ASSUME($stable(i_wr));
		`ASSUME($stable(i_data));
		`ASSUME($stable(i_rd));
	end
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also discussed above the need to know whether the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; function
would return valid results.  We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; register for this
purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	f_past_valid = 1&#39;b0;
always @(posedge i_clk)
	f_past_valid &amp;lt;= 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also highlights the fact that your formal verification logic may have
and use registers, just like the rest of your logic–even though you won’t
be using it within your design other than for formal verification.&lt;/p&gt;

&lt;p&gt;Next, let’s look at making sure that our helper logic works.&lt;/p&gt;

&lt;p&gt;First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_fill&lt;/code&gt; output should be equal to the number of
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
memory entries that are full.  This is given by the difference between
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_first&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt;.  Above, we chose to use a clocked register to hold this
value.  We did this for timing reasons, but there is the possibility that
we got this wrong.  So, let’s check it here.  Formally, one might say that
the state where &lt;code class=&quot;highlighter-rouge&quot;&gt;r_fill&lt;/code&gt; doesn’t equal this difference is an illegal state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;assign	f_fill = r_first - r_last;
always @(posedge i_clk)
begin
	assert(f_fill == r_fill);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, let’s move on to our empty flag.  Any time the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
is empty, we want to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;will_underflow&lt;/code&gt; flag.  In addition, we want
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_empty_n&lt;/code&gt; to be true any time we are not empty.  As I mentioned before, the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
is empty any time &lt;code class=&quot;highlighter-rouge&quot;&gt;r_first&lt;/code&gt; is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt;.  We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;f_fill&lt;/code&gt; from
above for this purpose.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	if (f_fill == 0)
	begin
		assert(will_underflow);
		assert(!o_empty_n);
	end else begin
		assert(!will_underflow);
		assert(o_empty_n);
	end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a similar value, any time the fill is one less than the number of items
in the buffer, then the buffer is “full”.  Let’s make sure we got that logic
right too.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		if (f_fill == {(LGFLEN){1&#39;b1}})
			assert(will_overflow);
		else
			assert(!will_overflow);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smplfifo.v&quot;&gt;code&lt;/a&gt;
also has a value, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_next&lt;/code&gt;, which is supposed to
reference the next value to be read.  To know if we got this right, let’s add
one to the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt; pointer,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;assign	f_next = r_last + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then look to see if &lt;code class=&quot;highlighter-rouge&quot;&gt;r_next&lt;/code&gt; equals this as desired,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	assert(r_next == f_next);
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, let’s examine the pointers under overflow and underflow conditions.
First, on any reset, both pointers will be set to zero and any output error
will be cleared.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
if (f_past_valid)
begin
	if ($past(i_rst))
		assert(!o_err);
	else begin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we are not in reset, we might have an underflow.  Let’s check.  If the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
was empty on the last clock, &lt;em&gt;and&lt;/em&gt; if there was a request to read from the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
on that clock, then we had an underflow.  In that case, assert that the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
read pointer, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_last&lt;/code&gt;, has not changed as a result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		// Underflow detection
		if (($past(i_rd))&amp;amp;&amp;amp;($past(r_fill == 0)))
		begin
			// This core doesn&#39;t report underflow errors,
			// but quietly ignores them
			//
			// assert(o_err);
			//
			// On an underflow, we need to be careful not
			// to advance the pointer.
			assert(r_last == $past(r_last));
		end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Had this pointer changed, the 
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
might accidentally jump from the empty state to the full state with garbage in
the buffer.  We want to avoid this.&lt;/p&gt;

&lt;p&gt;We do almost the same thing on an overflow condition, but there are just a
couple differences.
First, in the case of a read and write on the same clock while we are full,
no overflow has taken place.  Hence we need to check that a write without
a read has taken place.  That’s the first difference.  The second difference
is that this core reports overflow conditions, but not underflow conditions.
Hence, we assert that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_err&lt;/code&gt; is true on any overflow.  Likewise, on any
overflow we also assert that the &lt;code class=&quot;highlighter-rouge&quot;&gt;r_first&lt;/code&gt; pointer hasn’t changed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		//
		// Overflow detection
		if (($past(i_wr))&amp;amp;&amp;amp;(!$past(i_rd))
				&amp;amp;&amp;amp;($past(will_overflow)))
		begin
			// Make sure we report this result
			assert(o_err);

			// Make sure we didn&#39;t advance our write
			// pointer on overflow
			assert(r_first == $past(r_first));
		end
	end
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As with the underflow, a pointer change during an overflow condition can be
catastrophic as well.  It could cause the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
to suddenly become empty, losing any of the data within it.  This formal
check about tells the theorem prover that doing so would be illegal, and that
we want to know if anything would create such a condition.&lt;/p&gt;

&lt;p&gt;What we haven’t discussed are the
&lt;a href=&quot;http://symbiyosys.readthedocs.io/en/latest/quickstart.html&quot;&gt;instructions for installing&lt;/a&gt; 
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;, Symiyosys, and the various theorem
provers.  These may be found
&lt;a href=&quot;http://symbiyosys.readthedocs.io/en/latest/quickstart.html&quot;&gt;on line&lt;/a&gt;.
Neither have we discussed the
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/Makefile&quot;&gt;Makefile&lt;/a&gt;
I used to coordinate the proof, nor the &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/bench/cpp/smplfifo.ys&quot;&gt;yosys
config&lt;/a&gt;
that I used.  Feel free to examine these on your own if you would like.&lt;/p&gt;

&lt;h2 id=&quot;what-did-i-find&quot;&gt;What did I find?&lt;/h2&gt;

&lt;p&gt;You may recall from earlier that I found several errors in my
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; as a result of using
these methods.  If you are reading this, then you may be wondering just how
significant those errors were.  Here are some of the things I found:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Originally, I had said that a write during an underflow would only
take you out of the underflow condition if there was no read at the same
time.  This is wrong.&lt;/p&gt;

    &lt;p&gt;A write to an empty
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
will always succeed, independent of whether or not a read is taking place
at the same time, and a read from an empty
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;
should always fail–independent of a write taking place at the same time.&lt;/p&gt;

    &lt;p&gt;Fixing this required several changes throughout.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I hadn’t initialized all of my variables.  In particular, &lt;code class=&quot;highlighter-rouge&quot;&gt;r_next&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;r_fill&lt;/code&gt; weren’t originally initialized.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When calculating the number of elements in the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;,
I had assumed that if the &lt;code class=&quot;highlighter-rouge&quot;&gt;will_overflow&lt;/code&gt; value was true that any write to
the &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt; would
overflow the &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;.
This isn’t the case.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;will_overflow&lt;/code&gt; is true, then any write &lt;em&gt;without a
concurrent read&lt;/em&gt; will overflow the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;.
A read and write during the same clock period will not overflow the
&lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’d like, all of the changes are captured within the
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;github repository&lt;/a&gt;
on line, so you can review what I found
&lt;a href=&quot;https://github.com/ZipCPU/wbpmic/commit/01efb009ce963b536213f5e8e695acf1c93c2d84#diff-9ce5778d79774aac9ca5e898c621af07&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Please keep in mind, I’m only a beginner at
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal methods&lt;/a&gt;.
I’ve never used any of them before this week, but I’ve already found several
problems in my own code using them.  Are
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_methods&quot;&gt;formal methods&lt;/a&gt;
worth the effort?  Well, for me and in this example, they were.&lt;/p&gt;

&lt;p&gt;I’d like to come back to this topic in the future after I’ve learned some
more.  I’d also like to apply these methods to many other problems as well.
However, I’ve also got some problems which I’m not yet certain how to prove.
For example, while I’ve managed to prove a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/llqspi.v&quot;&gt;low level QSPI flash
driver&lt;/a&gt;,
I have yet to figure out how to prove the entire protocol.  Likewise, I’ve
managed to prove that my &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;UART transmitter
(lite)&lt;/a&gt; works,
but not yet the receiver or the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;entire IP
core&lt;/a&gt; including the &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/wbuart.v&quot;&gt;wishbone
interface&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, I think I’ll just see if I can’t prove my
&lt;a href=&quot;https://github.com/ZipCPU/wb2axip&quot;&gt;WB to AXI4 bridge&lt;/a&gt; next.
I think that would be useful for all.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Ye have heard that it hath been said, Thou shalt love thy neighbour, and hate thine enemy.  But I say unto you, Love your enemies, bless them that curse you, do good to them that hate you, and pray for them which despitefully use you, and persecute you (Matt 5:44)&lt;/em&gt;</description>
        <pubDate>Thu, 19 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/blog/2017/10/19/formal-intro.html</link>
        <guid isPermaLink="true">http://zipcpu.com/blog/2017/10/19/formal-intro.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Just some notes to new readers of the ZipCPU blog</title>
        <description>&lt;p&gt;If you’ve just recently started reading
&lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;,
then welcome!&lt;/p&gt;

&lt;p&gt;I’ve now been blogging for only five months.  I’ve hit quite a few topics, but
I’ve still got a lot more to present—many of them fun and fundamental
topics that I think everyone will enjoy.&lt;/p&gt;

&lt;p&gt;While I have your attention, let me point out two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;http://zipcpu.com/&quot;&gt;ZipCPU blog&lt;/a&gt; is funded entirely by
donations.&lt;/p&gt;

    &lt;p&gt;I hate pledge drives.  I really do.  We haven’t had one here, and I’d like
to avoid them.  If you like the blog, however, please consider &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;supporting
me on Patreon&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Those who &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;support me on Patreon&lt;/a&gt;
get a vote regarding where the blog goes next–both in the
&lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;open source projects&lt;/a&gt; I develop next, as well
in the posts I choose to post next.  Even if you choose not to
&lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;support me on Patreon&lt;/a&gt;, I’m still always
looking for ideas–so feel free to write me then anyway.&lt;/p&gt;

    &lt;p&gt;While I’m not opposed to advertisement, I will insist on a certain
advertisement quality and relevance before allowing any advertiser to post
on this site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m a touch surprised that only a few visitors have looked over my
&lt;a href=&quot;/topics.html&quot;&gt;topics page&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;/topics.html&quot;&gt;topics page&lt;/a&gt; is my notepad
of topics that I’d like to cover in the future.  After writing on
any particular topic from that list, I’ve replacing my “to write” note with a
link to the article(s) on that topic.  Sure, there have been topics that
haven’t fit into that page, but it’s the best guide I have for what topic
to write next.&lt;/p&gt;

    &lt;p&gt;At some point, I’ll collate multiple posts on a single topic together,
and then just link to a page containing all of those posts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I really dislike presenting code that doesn’t work.&lt;/p&gt;

    &lt;p&gt;All of the code presented on this site has been tested with
&lt;a href=&quot;https://www.veripool.org/wiki/verilator/&quot;&gt;Verilator&lt;/a&gt;,
and much of it has also been tested on an actual
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
Any code that is found to work with
&lt;a href=&quot;https://www.veripool.org/wiki/verilator/&quot;&gt;Verilator&lt;/a&gt;,
&lt;a href=&quot;/blog/2017/07/17/debugging-dbgbus.html&quot;&gt;but not on an actual&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is quietly fixed whenever I discover it.&lt;/p&gt;

    &lt;p&gt;My point here is just that building examples to share takes time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, let me invite you to take a look at the
&lt;a href=&quot;/topics.html&quot;&gt;topics page&lt;/a&gt;,
and then drop me a line and let me know what topics you’d be interested
in reading about in the future.&lt;/p&gt;

&lt;p&gt;My current project remains HDMI Video encoding/decoding, and the last topic
request survey suggested I should examine DSP topics.  Since then, we’ve
discussed not only how to generate sine and cosine waves, but also several
approaches to digital filtering.&lt;/p&gt;

&lt;p&gt;More recently, several individuals have been requesting a discussion of formal
methods, and in particular
&lt;a href=&quot;http://www.clifford.at/papers/2017/smtbmc-sby/slides.pdf&quot;&gt;yosys-smtbmc&lt;/a&gt;.
While I haven’t used formal methods before, I &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;just found a bunch of bugs
in some of my FIFO’s by using them&lt;/a&gt;, so that will need to be part of the story.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And they gave the money, being told, into the hands of them that did the work, that had the oversight of the house of the LORD: and they laid it out to the carpenters and builders, that wrought upon the house of the LORD (2Kings 12:11)&lt;/em&gt;</description>
        <pubDate>Wed, 18 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/blog/2017/10/18/upcoming.html</link>
        <guid isPermaLink="true">http://zipcpu.com/blog/2017/10/18/upcoming.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Implementing the Moving Average (Boxcar) filter</title>
        <description>&lt;p&gt;When we &lt;a href=&quot;/dsp/2017/08/19/simple-filter.html&quot;&gt;first examined
filtering&lt;/a&gt;, we looked at
the two simplest &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filters&lt;/a&gt;
I knew of: a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/smplfir.v&quot;&gt;filter that averages adjacent
values&lt;/a&gt;, and a
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/iiravg.v&quot;&gt;filter that recursively
averages&lt;/a&gt;
multiple numbers together.  These two simple filters required only a
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;few FPGA resources&lt;/a&gt;,
and so they were easy to implement.  Sadly, they weren’t very configurable and
so their filtering capability was quite limited.&lt;/p&gt;

&lt;p&gt;We then came back to the topic and discussed how to create a
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic Finite Impulse Response (FIR) filter&lt;/a&gt;.  Such a
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is &lt;em&gt;very&lt;/em&gt; configurable.  Using the approach I presented, you can describe &lt;em&gt;any&lt;/em&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filter&lt;/a&gt; in logic.
We then came back to the topic a bit later, and &lt;a href=&quot;/dsp/2017/09/29/cheaper-fast-fir.html&quot;&gt;discussed how to
create&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/fastfir.v&quot;&gt;a filter&lt;/a&gt;
that required fewer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;,
while still maintaining the complete configurability of any
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem with both of these generic approaches is their cost.  As with
most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filters&lt;/a&gt;,
this cost is often measured in the number of multiplies (i.e. the number of
taps).  While the number of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic block&lt;/a&gt;’s
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;
is also of interest, even this logic scales with the number of filter
taps required.&lt;/p&gt;

&lt;p&gt;As an example of this problem, suppose you wanted to select an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;FM&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/FM_broadcast_band&quot;&gt;broadcast&lt;/a&gt;
signal (200 kHz) from somewhere within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;FM&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/FM_broadcast_band&quot;&gt;broadcast band&lt;/a&gt; (87-108MHz
&lt;a href=&quot;https://en.wikipedia.org/wiki/Radio_frequency&quot;&gt;RF&lt;/a&gt;
in the US).  Now suppose you also wanted to do all of this processing within
your &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
and that you could afford a &lt;a href=&quot;https://store.digilentinc.com/arty-artix-7-fpga-development-board-for-makers-and-hobbyists/&quot;&gt;$99
Arty&lt;/a&gt; (plus an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;FM&lt;/a&gt; antenna, pre-amp, 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;ADC&lt;/a&gt;, etc.).
The &lt;a href=&quot;https://store.digilentinc.com/arty-artix-7-fpga-development-board-for-makers-and-hobbyists/&quot;&gt;Arty&lt;/a&gt; contains an
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds180_7Series_Overview.pdf&quot;&gt;Artix-7/35T&lt;/a&gt;
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
with 90 DSP slices.  That means you can implement 90 multiplies within your
logic on any given clock tick.  This would allow you to create a
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
with 89 taps.  (Most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;s
have an &lt;a href=&quot;https://en.wikipedia.org/wiki/Parks-McClellan_filter_design_algorithm&quot;&gt;odd number of
taps&lt;/a&gt;.) 
With an 89 tap &lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;generic
filter&lt;/a&gt;, you’d
only be able to get about a 6dB separation between your channel and any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;FM&lt;/a&gt; channel, and even
the rest of your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;ADC&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;.
Such performance is pitiful.  It’s a far cry from the 70dB that I was taught
to design to.  Indeed, it would take an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_impulse_response&quot;&gt;FIR&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
of roughly &lt;em&gt;ten thousand&lt;/em&gt; taps to provide a required 70dB separation.&lt;/p&gt;

&lt;p&gt;Not only does the
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds180_7Series_Overview.pdf&quot;&gt;Artix 7/35T&lt;/a&gt; (&lt;a href=&quot;https://www.digikey.com/product-detail/en/xilinx-enc/XC7A35T-1FTG256C/122-1910-ND/5039074&quot;&gt;$35&lt;/a&gt;)
on the &lt;a href=&quot;https://store.digilentinc.com/arty-artix-7-fpga-development-board-for-makers-and-hobbyists/&quot;&gt;$99 Arty&lt;/a&gt;
not have this many taps, &lt;em&gt;none of the
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
&lt;a href=&quot;https://www.xilinx.com/support/documentation/data_sheets/ds180_7Series_Overview.pdf&quot;&gt;7-series parts&lt;/a&gt;
 has enough multiplies (DSP blocks) to implement a filter this large&lt;/em&gt;.
The closest is the heftiest Virtex-7, which has 2,820 DSP elements.  I couldn’t
find this on &lt;a href=&quot;https://www.digikey.com&quot;&gt;Digikey&lt;/a&gt; today, though.  The
closest Virtex 7 that I can find today on &lt;a href=&quot;https://www.digikey.com&quot;&gt;Digikey&lt;/a&gt;
is the &lt;a href=&quot;https://www.digikey.com/product-detail/en/xilinx-inc/XC7V2000T-1FHG1761C/XC7V2000T-1FHG1761C-ND/3925283&quot;&gt;Virtex 7/2000T with 2,160 DSP blocks for
$18,000&lt;/a&gt;.  In other words, money won’t buy you
out of this problem.&lt;/p&gt;

&lt;p&gt;On the other hand, if you could
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
your signal down to less than 2MHz, without using any multiplies, you can then
save your multiplies for a later step when you could share a single multiply
between multiple taps.  Indeed, if you could do that then you might be able to
select an &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;FM&lt;/a&gt; channel
for the cost of only a pair of multiplies–sparing your other 88 multiplies for
some other purpose.&lt;/p&gt;

&lt;p&gt;This is where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
comes into play.
A &lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
requires no multiplies, only two additions, two incrementing pointers, and
some block RAM.  Although the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;filter&lt;/a&gt;
has a &lt;code class=&quot;highlighter-rouge&quot;&gt;-13&lt;/code&gt; dB &lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;, applying the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;filter&lt;/a&gt;
in a cascaded fashion &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; times would give you a
&lt;code class=&quot;highlighter-rouge&quot;&gt;-13 * N&lt;/code&gt; dB
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;.
Six rounds of
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;such a filter&lt;/a&gt;
may well be sufficient, especially when each
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
round uses only a
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;minimum amount&lt;/a&gt; of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
logic.&lt;/p&gt;

&lt;p&gt;So, let’s take a look at what it takes to implement a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
(I’ll call it a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Boxcar_function&quot;&gt;boxcar&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;,
based upon the fact that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Impulse_response&quot;&gt;impulse response&lt;/a&gt;
of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Boxcar_function&quot;&gt;boxcar function&lt;/a&gt;.)
We’ll start by examining how to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; in general,
and then discuss an initial (broken) implementation of such a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.
We’ll then simplify the basic idea a bit more, and show
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;an example&lt;/a&gt;
of how a “&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;boxcar filter&lt;/a&gt;” &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;might
be implemented&lt;/a&gt;.
We’ll then round out the discussion with a discussion on performance,
explaining what sort of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;response&lt;/a&gt;
you might expect from this filter.&lt;/p&gt;

&lt;h2 id=&quot;the-formula&quot;&gt;The Formula&lt;/h2&gt;

&lt;p&gt;Since what we’re doing might not look so clear when we dig into &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;the code
itself&lt;/a&gt;, let’s
pause for a moment first to discuss what we are intending to do.
Our goal is to create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
that adds an adjacent &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; samples together.  As time progresses, the values
that will get averaged together will also rotate through our window as well.
This is why the operation is called a
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;”: because
the choice of which samples get averaged together moves with time.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: A Generic Filter Implementation structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-form.svg&quot; alt=&quot;Generic FIR implementation structure&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let’s back up a small step first, though.  If you recall
&lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;from before&lt;/a&gt;,
a &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/fastfir.v&quot;&gt;generic FIR
filter&lt;/a&gt;
has the form shown in Fig 1.  In that figure, you can see how each incoming
input sample goes into a delay line (at the top) and, at each stage of the
delay line, gets multiplied by a constant.  (The constant isn’t shown.)
All of the multiplication products are then added together to form the output.&lt;/p&gt;

&lt;p&gt;Formally, we might write the operation of this filter as,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-convolution.png&quot; alt=&quot;Formula for an FIR Convolution&quot; width=&quot;388&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;where there are &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; taps to the filter, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt; is a sequence of input samples,
&lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt; is the sequence of &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficients, and &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]&lt;/code&gt; is the output of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; fits this form as well,
with the unique feature that all the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
coefficients, &lt;code class=&quot;highlighter-rouge&quot;&gt;h[k]&lt;/code&gt; are all ones.  This means that the multiplies are all
by one, and so they they can be removed from the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hence, you might draw this simplified
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
as shown in Fig 2, without the multiplies.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: A Conceptual Moving Average Implementation structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-mvavg-form.svg&quot; alt=&quot;A conceptual moving average filter implementation structure&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Formally, we might write this as,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-mvavg-raw.png&quot; alt=&quot;Moving Average filter&quot; width=&quot;216&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With this simplification, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
has turned into nothing more than a
summation of a set of input values made on every clock tick.&lt;/p&gt;

&lt;p&gt;Even in this form, we’re not ready to implement this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt; yet.
Instead, consider what would happen if we subtracted two of these &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]&lt;/code&gt;
values from each other.  You can see this conceptually in Fig 3.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3: Subtracting one output from another&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fir-mvavg-subtract.svg&quot; alt=&quot;Moving averages--subtracting the previous output from the current one&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Did you catch that?  The difference between two adjacent outputs of our
filter, &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]-y[n-1]&lt;/code&gt; is given by the difference between two input samples,
&lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]-x[n-N]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mathematically, we could write this as,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-mvavg.png&quot; alt=&quot;Moving Average filter simplified&quot; width=&quot;356&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This subtle change in formula, from the generic formula for a convolution to
the one above, will spare us a lot of logic–allowing us to use a running
accumulator and a block RAM instead of hardware multiplies and a lot of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flops&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further, despite this formula referencing &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n-1]&lt;/code&gt;, it is &lt;em&gt;not&lt;/em&gt; an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Infinite_impulse_response&quot;&gt;IIR filter&lt;/a&gt;.
Careful design will keep it from becoming one.&lt;/p&gt;

&lt;p&gt;Let’s look at how we might
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;implement&lt;/a&gt;
this &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-equations&quot;&gt;The Basic Equations&lt;/h2&gt;

&lt;p&gt;A very quick, though incomplete, draft of this algorithm might look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
if (i_ce)
begin
	// Write the incoming sample to memory
	mem[wraddr] &amp;lt;= i_sample;
	wraddr &amp;lt;= wraddr + 1&#39;b1;

	// Read the x[n-N] value from memory
	memval &amp;lt;= mem[rdaddr];
	rdaddr &amp;lt;= rdaddr + 1&#39;b1;

	// Subtract x[n-N] from the incoming sample, x[n]
	// sub = x[n] - x[n-N]
	sub &amp;lt;= (i_sample - memval);

	// Add the result to the last output
	// y[n] = y[n-1] + sub = y[n-1]+x[n]-x[n-N]
	acc &amp;lt;= acc + sub;

	// rounded() is shorthand for what we wish to do
	// but not really valid Verilog
	o_result &amp;lt;= rounded(acc);
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Walking through this implementation, our first step was to write this
new sample to memory, and update our write pointer.  At the same time, we
read the value out from &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; samples ago, and updated our read pointer.&lt;/p&gt;

&lt;p&gt;We then subtracted the value we read from memory, &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; also known as
&lt;code class=&quot;highlighter-rouge&quot;&gt;x[n-N]&lt;/code&gt;, from the new value, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt;, we just received.  The
result of that subtraction was then added into our accumulator, &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]&lt;/code&gt;, just
like we discussed in the last section.  The final step was to
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;round&lt;/a&gt;
the output to the desired number of bits and we were done.&lt;/p&gt;

&lt;p&gt;You’ll find by the end of this article that our finished
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;algorithm&lt;/a&gt;,
is not going to be all that much more complex than the algorithm above,
although you may also find that it doesn’t look much like the algorithm above.&lt;/p&gt;

&lt;h2 id=&quot;reset&quot;&gt;Reset&lt;/h2&gt;

&lt;p&gt;The first problem with our first attempt is making certain that the
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;the filter&lt;/a&gt;
has a proper initial value.  One mistake in the accumulator, one mistake
that gets &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]&lt;/code&gt; wrong, and
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;this filter&lt;/a&gt;
might be turned into an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Infinite_impulse_response&quot;&gt;IIR filter&lt;/a&gt; with
an unwanted DC offset.  To keep that from happening, let’s create a reset
capability so that we can guarantee the filter starts in a known configuration.&lt;/p&gt;

&lt;p&gt;Specifically, at the time of reset, the accumulator must be set to zero,
as with any intermediate calculation values, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other thing we’ll need to pay attention to is the memory.  One difficulty
when using block RAM, as with all memories I know of, is that there’s no
circuitry for initializing all of our memory at once.  Instead, we’ll
“pretend” the memory is zero for a number of clocks following a reset, and
then we’ll use the memory as normal.&lt;/p&gt;

&lt;p&gt;Hence, we’ll need to modify our code such as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
if (i_reset)
begin
	acc &amp;lt;= 0;
	full &amp;lt;= 1&#39;b0;
	sub  &amp;lt;= 0;
	wraddr &amp;lt;= 0;
	rdaddr &amp;lt;= -navg;
end else if (i_ce)
begin
	wraddr &amp;lt;= wraddr + 1&#39;b1;
	rdaddr &amp;lt;= rdaddr + 1&#39;b1;
	//
	full &amp;lt;= (full)||(rdaddr == 0);
	if (full)
		// Value read from memory is valid
		sub &amp;lt;= i_sample - memval;
	else
		// Value read from memory was never initialized
		// We&#39;ll assume here that it is zero
		sub &amp;lt;= i_sample;

	acc &amp;lt;= acc + sub.
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This creates a new value, &lt;code class=&quot;highlighter-rouge&quot;&gt;full&lt;/code&gt;, which we can use to determine whether the
memory value is valid or not.&lt;/p&gt;

&lt;p&gt;These are the big broad-brush differences between the quick draft above,
and what we’re about to present below.  Our next step, then, will be to build
our final algorithm.&lt;/p&gt;

&lt;h2 id=&quot;the-actual-algorithm&quot;&gt;The Actual Algorithm&lt;/h2&gt;

&lt;p&gt;Let’s now use the lessons from above to build our &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;verilog
algorithm&lt;/a&gt;.
Feel free to examine the &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;final code
here&lt;/a&gt;,
as you follow along below.&lt;/p&gt;

&lt;p&gt;As a step number one, we’ll make &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;this
filter&lt;/a&gt;
as generic as we can.  To do that, we’ll parameterize our input width,
&lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt;, and output width, &lt;code class=&quot;highlighter-rouge&quot;&gt;OW&lt;/code&gt;.  Further, we’ll parameterize the number of
averages allowable, which we shall controll by the log (based two) of the
maximum number of averages, &lt;code class=&quot;highlighter-rouge&quot;&gt;LGMEM&lt;/code&gt;.  This will allow us to average by
any amount between &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;(1&amp;lt;&amp;lt;LGMEM)-1&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;parameter	IW=16,		// Input bit-width
		LGMEM=6,	// Size of the memory
		OW=(IW+LGMEM);	// Output bit-width&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hence, if you want to average fifty-five 16-bit values together, you’d set &lt;code class=&quot;highlighter-rouge&quot;&gt;IW&lt;/code&gt;
to 16 and &lt;code class=&quot;highlighter-rouge&quot;&gt;LGMEM&lt;/code&gt; to 6.  If you want an output without any
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;rounding&lt;/a&gt;,
then the output width, &lt;code class=&quot;highlighter-rouge&quot;&gt;OW&lt;/code&gt;,
&lt;a href=&quot;/dsp/2017/07/21/bit-growth.html&quot;&gt;needs to be set to&lt;/a&gt;
the input width plus the log of the number of averages.  In the example of
averaging fifty-five 16-bit items together, this means we’d need an output
width of &lt;code class=&quot;highlighter-rouge&quot;&gt;16+6&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;OW=22&lt;/code&gt;.  Any fewer output bits than that will require
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;rounding&lt;/a&gt;
the internal result to the desired number of output bits.&lt;/p&gt;

&lt;p&gt;We’ll also allow the number of averages to be configurable as well–or not,
if the &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_NAVG&lt;/code&gt; parameter is set.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_NAVG&lt;/code&gt; is set, then the number
of averages will be fixed, and set by an &lt;code class=&quot;highlighter-rouge&quot;&gt;INITIAL_AVG&lt;/code&gt; parameter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;parameter [0:0]	FIXD_NAVG=1&#39;b0;	// True if number of averages is fixed

// Always assume we&#39;ll be averaging by the maximum amount, unless told
// otherwise.  Minus one, in two&#39;s complement, will become this number
// when interpreted as an unsigned number.
parameter [(LGMEM-1):0]	INITIAL_AVG = -1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXED_NAVG&lt;/code&gt; is not set, we’ll allow the user to set the number of averages
they want.  However, because of the dependence of the feedback relationship,
&lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n-1]&lt;/code&gt;, we’ll insist that the number of averages must not change
except on an &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; signal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;wire	[(LGMEM-1):0]	w_requested_navg;
assign w_requested_navg = (FIXED_NAVG) ? INITIAL_NAVG : i_navg;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we’ll see later, the only part of our algorithm that depends upon this
number of averages is the initial/reset value of the memory read address.
For this reason, we won’t store the value in a register.  We’ll come back to
this later when we discuss the read address.&lt;/p&gt;

&lt;p&gt;That brings us to the logic required for accessing memory–both writing and
then reading.  Of these two, the write address is simple: we’ll start writing
to the first address of memory (address zero) on our first data
sample, and then rotate through memory locations from there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	wraddr = 0;
always @(posedge i_clk)
	if (i_reset)
		wraddr &amp;lt;= 0;
	else if (i_ce)
		wraddr &amp;lt;= wraddr + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What that means, though, is that we have to implement the time difference
between the initial value and the value &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; samples ago using the &lt;em&gt;read&lt;/em&gt;
memory address.  We’ll do so by initializing the read address to the negative
number of averages.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	rdaddr = 0;
always @(posedge i_clk)
	if (i_reset)
		rdaddr &amp;lt;= -w_requested_navg;
	else if (i_ce)
		rdaddr &amp;lt;= rdaddr + 1&#39;b1;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As with the write address, we increment the read address on every sample clock.&lt;/p&gt;

&lt;p&gt;Following the address calculation, we’ll write out incoming sample to memory,
and read our delayed sample from memory as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if (i_ce)
		mem[wraddr] &amp;lt;= i_sample;

// ...

initial	memval = 0;
always @(posedge i_clk)
	if (i_ce)
		memval &amp;lt;= mem[rdaddr];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far, this is all straightforward.  Other than initial values, we haven’t
really deviated from our initial draft above.  However, things get a little
trickier when adding the input sample to this logic.  In particular, if we
want our input value to be aligned with the output of the memory read, &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;,
associated with &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n-N]&lt;/code&gt;, then we’ll need to delay the input by one sample.&lt;/p&gt;

&lt;p&gt;It’s not really that obvious why this would be so.  Why does the input need to
be delayed by a sample?  The answer has to do with pipeline scheduling.
So, let’s look at how the internal values within our algorithm get set on
subsequent clocks, as shown in Fig 4.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: Scheduling the moving average pipeline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mvavg-pipeline.svg&quot; alt=&quot;Table, showing when the various values are getting assigned&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This figure shows a list of all of our internal registers, binned within the
clocks they are set within–starting on the clock before a particular sample,
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample[t]&lt;/code&gt;, is provided, &lt;code class=&quot;highlighter-rouge&quot;&gt;t-1&lt;/code&gt; until four clocks later at &lt;code class=&quot;highlighter-rouge&quot;&gt;t+4&lt;/code&gt;.  Hence, since &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt; depends upon &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr&lt;/code&gt;, it
shows in the clock following the one when &lt;code class=&quot;highlighter-rouge&quot;&gt;rdaddr&lt;/code&gt; gets set.  Likewise, since
the memory is set following the write address being set, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem[wraddr]&lt;/code&gt; gets
set following &lt;code class=&quot;highlighter-rouge&quot;&gt;wraddr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While our presentation through &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;the
code&lt;/a&gt; below
is going to be in chronological order, from time &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;t+4&lt;/code&gt;, the chart
above was built/scheduled backwards.  &lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; is the
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;rounded&lt;/a&gt;
version of &lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;.  It took
one clock to calculate.  &lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt; is the sum of the last accumulator and the
result of the subtraction, &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt;.  Further, we know that we want to subtract
our new input value from the last memory value, &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;So why do we have the register &lt;code class=&quot;highlighter-rouge&quot;&gt;preval&lt;/code&gt; in this pipeline chart?  It doesn’t
seem to do anything, so why is it there?&lt;/p&gt;

&lt;p&gt;The answer is simple: we needed to delay the input by one clock in order to get
it to line up with the memory that was just written and then read.&lt;/p&gt;

&lt;p&gt;For example, let’s suppose we only wished to average one
element–a pass-through filter.  Hence, we’d want to add
our new value, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt;, and subtract the prior value, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n-1]&lt;/code&gt;, delayed by only
one clock.  Given that’s what we want to do, let’s follow that new value through
this pipeline schedule in Fig 5 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Tracing the last sample through the moving average pipeline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mvavg-pipeline-trace.svg&quot; alt=&quot;Table, showing when the various values are getting assigned&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample[t-1]&lt;/code&gt; shows up at time &lt;code class=&quot;highlighter-rouge&quot;&gt;t-1&lt;/code&gt;, and gets written into memory,
&lt;code class=&quot;highlighter-rouge&quot;&gt;mem[wraddr]&lt;/code&gt;, at time
&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;.  It can then be read at time &lt;code class=&quot;highlighter-rouge&quot;&gt;t+1&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;memval&lt;/code&gt;, and then subtracted
from the new value at &lt;code class=&quot;highlighter-rouge&quot;&gt;t+2&lt;/code&gt; to create &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt;.  This time, &lt;code class=&quot;highlighter-rouge&quot;&gt;t+2&lt;/code&gt;, is the earliest
the last value can be read back from memory.  This is also the time when we
need our new value, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt;–one clock after it shows up.  To get the new sample
value from when it is given to us into this clock period, we need to delay it
by a single cycle, placing it into &lt;code class=&quot;highlighter-rouge&quot;&gt;preval&lt;/code&gt; for that purpose.&lt;/p&gt;

&lt;p&gt;The logic necessary to do this is trivial–unlike the reasoning behind it above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	preval = 0;
always @(posedge i_clk)
	if (i_reset)
		preval &amp;lt;= 0;
	else if (i_ce)
		preval &amp;lt;= i_sample;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The other thing we’re going to need to know, at the same time we want to
know the value we just read from memory, is whether we’ve written enough
times to the memory for the values read out of the memory to be valid.  I’ve
chosen to call this &lt;code class=&quot;highlighter-rouge&quot;&gt;full&lt;/code&gt;, to indicate that the tapped-delay line memory has
been filled.&lt;/p&gt;

&lt;p&gt;Since we initialized the write address at zero, and then wrote to the zero
address in our first clock, we know that the value read from memory will
be valid as soon as we read from the zero address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	full   = 1&#39;b0;
always @(posedge i_clk)
	if (i_reset)
		full &amp;lt;= 0;
	else if (i_ce)
		full &amp;lt;= (full)||(rdaddr==0);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve now set all of the values shown in the time &lt;code class=&quot;highlighter-rouge&quot;&gt;t+1&lt;/code&gt; column from Figs 4 and 5
above, so we’ll move on to the next clock.  In this clock, we’ll subtract
the sample falling off the end of our average list from our new sample.  We’ll
place this result into &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	sub = 0;
always @(posedge i_clk)
if (i_reset)
	sub &amp;lt;= 0;
else if (i_ce)
begin
	if (full)
		sub &amp;lt;= { preval[(IW-1)], preval }
				- { memval[(IW-1)], memval };
	else
		sub &amp;lt;= { preval[(IW-1)], preval };
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest is simple.  We add this difference to our accumulated value, creating
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;our filter&lt;/a&gt;’s
output value, &lt;code class=&quot;highlighter-rouge&quot;&gt;y[n]&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;initial	acc = 0;
always @(posedge i_clk)
	if (i_reset)
		acc &amp;lt;= 0;
	else if (i_ce)
		acc &amp;lt;= acc + { {(LGMEM-1){sub[IW]}}, sub };&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final stage of our pipeline
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;rounds&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;our filter&lt;/a&gt;’s
outputs to the number of bits requested by the parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;OW&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;generate
if (IW+LGMEM == OW)
	// No rounding required, output is the acc
	assign	rounded = acc;
else if (IW+LGMEM == OW + 1)
	// Need to drop one bit, round towards even
	assign	rounded = acc + { {(OW){1&#39;b0}}, acc[1] };
else // if (IW+LGMEM &amp;gt; OW + 1)
	// Drop more than one bit, rounding towards even
	assign	rounded = acc + {
			{(OW){1&#39;b0}}, acc[(IW+LGMEM-OW)],
			{(IW+LGMEM-OW-1){!acc[(IW+LGMEM-OW)]}} };
endgenerate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we are done
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;rounding&lt;/a&gt;
the output value, we’ll take an extra clock stage
to deal with any delay associated with
&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;rounding&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;always @(posedge i_clk)
	if (i_reset)
		o_result &amp;lt;= 0;
	else if (i_ce)
		o_result &amp;lt;= rounded[(IW+LGMEM-1):(IW+LGMEM-OW)];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While we might’ve skipped this delay if we didn’t need to drop any bits,
doing so would cause our filter to have a different delay depending on how
it was configured.  Rather than deal with that maintenance headache, the
result is always delayed
(&lt;a href=&quot;/dsp/2017/07/22/rounding.html&quot;&gt;rounded&lt;/a&gt;
or not) by one clock here.&lt;/p&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;frequency response&lt;/a&gt;
of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is well known.  It’s easy enough to calculate that it makes a good assignment
for the beginning student.  It’s given by,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-mvavg-H.png&quot; alt=&quot;H = sin(pi fN)/sin(pi f)&quot; width=&quot;308&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you examine this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_response&quot;&gt;response&lt;/a&gt;,
it’s really not that great.  At best, you can get a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;
of -13 dB from
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;this filter&lt;/a&gt;.
That’s better than the -6dB
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt; from our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Frequency_modulation&quot;&gt;FM&lt;/a&gt;
example above, but still a far cry from the -70dB we might like.&lt;/p&gt;

&lt;p&gt;On the other hand, if you cascade &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;  filters
of this type together, you can get a much deeper
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;.
To illustrate this,
Fig 6 below shows, in blue, the response of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
that averages five adjacent values together.  The other lines on the chart show
what happens after cascading
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;this filter&lt;/a&gt;
with itself two, three, four, five, or six times.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6: Moving average frequency response&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/mvavg-response.png&quot; alt=&quot;Image showing this filters response function&quot; width=&quot;714&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt; code used to create this
figure can be found
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/bench/cpp/boxcar.m&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two important things to notice from this figure.  First, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;
of the filter, when cascaded, can get &lt;em&gt;very&lt;/em&gt; deep.  After cascading six of
these together, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stopband&quot;&gt;stopband&lt;/a&gt;
is &lt;code class=&quot;highlighter-rouge&quot;&gt;-78&lt;/code&gt; dB–pretty impressive.  The second thing to notice is that the
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Passband&quot;&gt;passband&lt;/a&gt;”
is no longer flat.  As a result, we’ll need to follow
&lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;this filter&lt;/a&gt;
with another one to clean up any distortion of our signal of interest.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Moving_average&quot;&gt;moving average&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
is a far cry from a well-designed
&lt;a href=&quot;https://en.wikipedia.org/wiki/Low-pass_filter&quot;&gt;low-pass filter&lt;/a&gt;, it’s also a
very simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;filter&lt;/a&gt;
to implement.  From an engineering trade-off standpoint, this simplicity
makes it a very attractive component for dealing with many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt;
requirements on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’re not done with our lessons on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filtering&lt;/a&gt;,
though.  I’ve still got plans to discuss
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_phase&quot;&gt;symmetric filters&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Half-band_filter&quot;&gt;half-band filters&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_transform&quot;&gt;Hilbert transforms&lt;/a&gt;,
and more.  Further, I’d like to discuss not only their high speed
implementations, but also some slower implementations that would be appropriate
for those designs where there are many clocks between input samples.&lt;/p&gt;

&lt;p&gt;Even at that, we’re not done, since &lt;a href=&quot;https://github.com/ZipCPU/dspfilters/blob/master/rtl/boxcar.v&quot;&gt;the filter
above&lt;/a&gt;,
when cascaded with itself any number of times and &lt;em&gt;followed by a downsampler&lt;/em&gt;,
can be built without needing a block RAM.&lt;/p&gt;

&lt;p&gt;We are also going to want to
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;discuss how to go about proving that these
filters work&lt;/a&gt;.  What sort of
test bench is appropriate for testing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_filter&quot;&gt;digital filters&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;These, however, are lessons still to come.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Lo, this only have I found, that God hath made man upright; but they have sought out many inventions. (Eccl 7:29)&lt;/em&gt;</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/dsp/2017/10/16/boxcar.html</link>
        <guid isPermaLink="true">http://zipcpu.com/dsp/2017/10/16/boxcar.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>FPGAs vs ASICs</title>
        <description>&lt;p&gt;I’ve now been developing on &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;Field Programmable Gate Arrays
(FPGA)&lt;/a&gt;’s
for about seven or eight years.  I have heard of &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;Application-specific
integrated circuit
(ASIC)&lt;/a&gt;
development, but I’ve never done any work with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s.&lt;/p&gt;

&lt;p&gt;So I thought I’d ask some folks about them: is
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
development the same as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; development?
Is it just a matter of using a different set of tools?  Indeed, how
hard would it be to present my own designs as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
capable designs?&lt;/p&gt;

&lt;p&gt;As I started to ask around, I got quite the earful in return.  At the risk of
pontificating about what I know nothing about, I’ll try to share some of what
I learned here.  Feel free to write me and correct any misconceptions
I might have.&lt;/p&gt;

&lt;h2 id=&quot;differences-betweeen-fpga-and-asic-development&quot;&gt;Differences betweeen FPGA and ASIC development&lt;/h2&gt;

&lt;p&gt;The first thing I learned was that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
developers have a much easier task. Unlike
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s,
an &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design starts from a completely blank tableau.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1: FPGA designers start further along in the design process&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fpga-v-asic.svg&quot; alt=&quot;FPGA vs ASIC internals&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Whereas on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
you start out with a large array of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic block&lt;/a&gt;s,
clock buffers,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;’s,
on-chip
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;’s, I/O buffers,
(de)serializers, power distribution networks and more,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
development
starts further down into the weeds.  This means  that these components must
either be purchased, come from the manufacture as part of a library, or they
must be individually developed for use within any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design.&lt;/p&gt;

&lt;p&gt;The next big difference is the design cycle.  Simple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designs may be built within an afternoon, or even a couple of weeks for a
moderately more complex design.  Indeed, such designs fit nicely into the
academic calendar and make great school engineering projects.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2: (Simplified) FPGA Design Cycle&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fpga-design-flow.svg&quot; alt=&quot;Simplified FPGA design cycle&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is not true of &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design.&lt;/p&gt;

&lt;table style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3: ASIC Design Cycle&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/asic-design-flow.svg&quot; alt=&quot;Simplified ASIC design cycle&quot; width=&quot;380&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Specifically, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
manufacturing cycle alone can take many weeks
(months) before you get your chip back, at which point you then need to
integrate it onto a circuit board and test it.  Iterative development of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s
takes months longer (and $M more) per iteration than the minutes it can take
with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s the drawbacks.  What about the benefits?
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
technology offers higher speeds and lower power solutions beyond what an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
can provide.  Speed differences between the two design methods can easily be
10x or more.  Further, an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design may be reverse engineered from its bitstream, whereas reverse
engineering an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
is much harder.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: FPGA vs ASIC benefits&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fpga-v-asic-list.svg&quot; alt=&quot;FPGA vs ASIC Benefits Table&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Wow!  Does this mean I could run my
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
with a 1GHz clock, just by switching from an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
based design to an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design?  I like it!&lt;/p&gt;

&lt;p&gt;So, just how bad are those drawbacks?&lt;/p&gt;

&lt;p&gt;Well, the first big drawback is the cost.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design is expensive.  Just paying for a single run of a single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design can cost many millions of dollars.  For a large number of chips, this
price can be cheaper than the cost of purchasing a large number of similarly
capable
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s.
For single one-off designs, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
is typically much cheaper.&lt;/p&gt;

&lt;p&gt;There are also several other differences from the standpoint of the designer.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Standard Cell’s&lt;/p&gt;

    &lt;p&gt;Originally,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design involved drawing and placing &lt;a href=&quot;https://en.wikipedia.org/wiki/Bipolar_junction_transistor&quot;&gt;bipolar
transistors&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/MOSFET&quot;&gt;N-FET&lt;/a&gt;’s into
a design.  Since every manufacturer’s process was different, these designs
also needed to change from one manufacturer to another.  Tools were
available to help, but these tools were incompatible from one manufacturer
to another.  As a result, designs that worked with one manufacturer’s
process could not easily be transferred to another manufacturer’s process.&lt;/p&gt;

    &lt;p&gt;This changed with the invention of &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;Standard Cell&lt;/a&gt;’s.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;Standard Cell&lt;/a&gt;’s are similar to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic blocks&lt;/a&gt;
within
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
that form the basic logic unit for all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
logic.  In the same manner that arbitrary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
logic can be created from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;lookup tables (LUT)&lt;/a&gt;
within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
arbitrary logic can be created using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;standard cell&lt;/a&gt;’s within
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s.
The biggest difference, though, is that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;standard cell&lt;/a&gt;’s
tend to be at a much lower logic level than
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;logic blocks&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;As an example, the
&lt;a href=&quot;http://opencircuitdesign.com/qflow&quot;&gt;QFlow&lt;/a&gt;
open-source
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
development tool set uses a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;standard cell&lt;/a&gt;
library provided by
&lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/&quot;&gt;vlsirch.ecen.okstate.edu&lt;/a&gt;.
Their &lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/stdcell_datasheet/tsmc025/&quot;&gt;tsmc025&lt;/a&gt;
library consists of
&lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/stdcell_datasheet/tsmc025/data/AND2X1.html&quot;&gt;AND&lt;/a&gt; gates,
&lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/stdcell_datasheet/tsmc025/data/OR2X1.html&quot;&gt;OR&lt;/a&gt; gates,
&lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/stdcell_datasheet/tsmc025/data/NAND2X1.html&quot;&gt;NAND&lt;/a&gt; gates,
&lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/stdcell_datasheet/tsmc025/data/DFFPOSX1.html&quot;&gt;D-flip flops&lt;/a&gt;,
&lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/stdcell_datasheet/tsmc025/data/MUX2X1.html&quot;&gt;2-1 MUX&lt;/a&gt;’s,
&lt;a href=&quot;https://vlsiarch.ecen.okstate.edu/flows/stdcell_datasheet/tsmc025/data/DFFPOSX1.html&quot;&gt;clock buffers&lt;/a&gt;’s,
and more, but no six or eight input
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUTs&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Still, the impact of &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;standard cell&lt;/a&gt; technology was huge.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;Standard cell&lt;/a&gt;s made it possible for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_description_language&quot;&gt;Hardware Description Languages (HDL)&lt;/a&gt;, such as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Verilog&quot;&gt;Verilog&lt;/a&gt;
and &lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt;, to start to proliferate
since synthesis tools could turn an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_description_language&quot;&gt;HDL&lt;/a&gt;
design into design based upon &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;standard
cell&lt;/a&gt;s.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clocks&lt;/p&gt;

    &lt;p&gt;A second big difference between
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design is the clock.  The difference is two fold.  First,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
have many resources designed to create and adjust clocks.  Second,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
have dedicated clock routing networks.  Neither of these come for free on an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;.
Let’s discuss each of these in detail.&lt;/p&gt;

    &lt;p&gt;First, most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
have clock management resources within them.  These
resources allow you to change the frequency of a clock, and adjust its
phase.  These clock management resources are vital to creating a variety of
I/O interfaces.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;standard cell&lt;/a&gt;
libraries often don’t have these components within them.  The reason,
according to &lt;a href=&quot;http://anysilicon.com/asic-pll-design-overview&quot;&gt;AnySilicon&lt;/a&gt;,
is that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt; needs of an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer vary too much from one design to the next.  This makes it
difficult to grab a simple off the shelf
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
and place it into your design.  It also means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer needs to pay to procure a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot;&gt;PLL&lt;/a&gt;
designed to his problem’s needs.&lt;/p&gt;

    &lt;p&gt;The second problem was that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
have dedicated clock routing networks, while
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s
do not.  This means that an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer must design the clock routing network for his design together
with the logic routing that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
developers are familiar with.  Unlike the logic routing networks used by both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s,
&lt;em&gt;clock&lt;/em&gt; routing networks need to be designed so that the clock arrives at
every &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
at (roughly) the same time–making clock and logic routing more difficult.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reset&lt;/p&gt;

    &lt;p&gt;I know that &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;I have told beginners never to use an asynchronous
reset&lt;/a&gt;.
That advice applies to beginners, and specifically to beginning
(&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;)
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designers only.&lt;/p&gt;

    &lt;p&gt;The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer &lt;em&gt;needs&lt;/em&gt; the reset capability.&lt;/p&gt;

    &lt;p&gt;Unlike
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s where
initial &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
conditions can be specified, and where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
circuitry will quietly take care to set all of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt; to the
initial values you specify,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s within
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designs start with random initial values.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; statement
within &lt;a href=&quot;https://en.wikipedia.org/wiki/Verilog&quot;&gt;Verilog&lt;/a&gt; just doesn’t
get synthesized by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
tools.  This means that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer needs to use the reset wire in order to force any hardware
registers/&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
into known initial conditions.&lt;/p&gt;

    &lt;p&gt;On an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;,
the reset wire is often an active low wire.  It is also used to keep the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s
logic from triggering, and hence from drawing power, until the power within
the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
is steady and reliable.&lt;/p&gt;

    &lt;p&gt;This also brings up a host of timing issues, since the global reset may
be asynchronously asserted, and there is typically an asynchronous
propagation delay across the design.  This affects both asserting the
reset as well as de-asserting the reset.&lt;/p&gt;

    &lt;p&gt;The bottom line, though, is that circuits that didn’t need reset logic
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
often require it when implemented within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On-chip RAM&lt;/p&gt;

    &lt;p&gt;On-chip block
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
is an important part of any chip design.
Indeed, all of my own &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
designs depend upon block
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;.
I used it for fast, &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/rtl/memdev.v&quot;&gt;local
memory&lt;/a&gt;, for
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/pfcache.v&quot;&gt;cached
memory&lt;/a&gt;
structures,
&lt;a href=&quot;https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)&quot;&gt;FIFO&lt;/a&gt;’s
and more.  On-chip &lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
however, doesn’t come for free for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer.&lt;/p&gt;

    &lt;p&gt;While it is possible to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt; out of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;standard cell&lt;/a&gt;s,
the resulting performance (area, power, speed, etc) is often
unacceptable.&lt;/p&gt;

    &lt;p&gt;This places the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer in the position where he needs to purchase (or design his own) the
design for any on-chip
&lt;a href=&quot;https://en.wikipedia.org/wiki/Random-access_memory&quot;&gt;RAM&lt;/a&gt;
he’d like to have.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I/O peripherals&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
I/O pins can often handle multiple I/O standards.  These standards, while
possible for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer to implement, also come at a cost.&lt;/p&gt;

    &lt;p&gt;How about the input deserializers and output serializers that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
offer?  These fundamental components of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
make many I/O communication standards possible.
As with the multiple I/O standard capability, these essential I/O components
don’t come standard to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer either.&lt;/p&gt;

    &lt;p&gt;That’s the bad news.  The good news is that, at the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
level, you can build I/O designs that are very difficult to create within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
Examples include
&lt;a href=&quot;https://en.wikipedia.org/wiki/HDMI&quot;&gt;HDMI&lt;/a&gt; pre-filters,
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR_SDRAM&quot;&gt;DDR memory&lt;/a&gt; drivers,
&lt;a href=&quot;https://en.wikipedia.org/wiki/USB&quot;&gt;USB&lt;/a&gt; interface drivers,
and even analog I/O components such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Analog-to-digital_converter&quot;&gt;analog to digital
converters&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital-to-analog_converter&quot;&gt;digital to analog
converters&lt;/a&gt;.  As
with the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design experience, many companies will sell you these components as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Power&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s have
wires running through them to deliver a sufficient amount of power to the
entire design.  Should the power be used unevenly, the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; has
been designed to guarantee that every component still gets a sufficient
amount of power to run.&lt;/p&gt;

    &lt;p&gt;Since
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
development is done at a lower level, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer needs to concern himself with power distribution throughout his
design.  In particular, he needs to insure that none of the components of
the design are power starved.  Such
&lt;a href=&quot;https://en.wikipedia.org/wiki/Brownout_(electricity)&quot;&gt;brown-out&lt;/a&gt;’s
will create problems that can be difficult to trouble-shoot later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Process variations&lt;/p&gt;

    &lt;p&gt;If the above differences weren’t sufficient to highlight that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
development has many differences from
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
development, then you should know we’re not done yet.&lt;/p&gt;

    &lt;p&gt;The next difference is “process variations.”
Basically, by process variations, I am referring to the reality that
very small silicon components, on the order of tens of nanometers
or smaller, aren’t necessarily all manufactured to the same exact size.
Some components may be thicker than others just because it is difficult
to manufacture components that small to any exacting standard.&lt;/p&gt;

    &lt;p&gt;What this means for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
developer is that their design needs to be verified for process extremes.
At one extreme, logic might work faster than another extreme.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
developer, using tools designed for this purpose,
needs to be able to deal with this and properly simulate both extremes,
to validate that the logic will work within the full limits of the
manufacturer’s process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tools&lt;/p&gt;

    &lt;p&gt;When I first starting learning
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design, I learned the synthesis and implementation buttons within
&lt;a href=&quot;http://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/ise-design-suite.html&quot;&gt;ISE&lt;/a&gt;
program.  Synthesize; implement; generate programming file; load onto
hardware, and that was all I needed to know.  Moving to
&lt;a href=&quot;https://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt;
was easy: once I found the synthesis, implementation, and bitstream
generation buttons I had all I needed.&lt;/p&gt;

    &lt;p&gt;The tools required for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design, however, are much more extensive.&lt;/p&gt;

    &lt;p&gt;Sure, there’s the basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_synthesis&quot;&gt;synthesis&lt;/a&gt; tool, but there
are also arithmetic
synthesis and power synthesis tools as well.  These help the designer choose
and trade off multiplier architectures and power structures.&lt;/p&gt;

    &lt;p&gt;There’s also place and route tools and timing analyzers for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
just as there are for
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s.&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer also has floor planning tools to help him place components, insert
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal#Distribution&quot;&gt;clock tree&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scan_scan&quot;&gt;scan chains&lt;/a&gt;
and &lt;a href=&quot;http://semimd.com/favre/2015/10/26/lefdef-io-ring-check-automation/&quot;&gt;I/O rings&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Modern
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designers also need to be able to estimate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_capacitance&quot;&gt;parasitic capacitance&lt;/a&gt;,
sometimes just referred to as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_capacitance&quot;&gt;parasitics&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_capacitance&quot;&gt;Parasitics&lt;/a&gt; arise
when conductors of different potentials are placed close to each other.
While this effect can usually be ignored at low frequencies, it can
cause &lt;a href=&quot;https://en.wikipedia.org/wiki/Crosstalk&quot;&gt;crosstalk&lt;/a&gt;
between digital logic lines,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Feedback&quot;&gt;feedback&lt;/a&gt; within analog circuits,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_oscillation&quot;&gt;parasitic
oscillations&lt;/a&gt;, and more
at higher frequencies.  To avoid these effects, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_extraction&quot;&gt;parasitic
extraction&lt;/a&gt; tools
to estimate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_capacitance&quot;&gt;parasitics&lt;/a&gt; within the
design for the purpose of updating his design simulations to see if the
estimated &lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_capacitance&quot;&gt;parasitic
capacitance&lt;/a&gt;
will impact design performance.&lt;/p&gt;

    &lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_equivalence_checking&quot;&gt;logic equivalence
checker&lt;/a&gt;
is another 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
tool that may be unfamiliar to an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designer.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_equivalence_checking&quot;&gt;Logic equivalence
checker&lt;/a&gt;s
are used to formally prove that the circuit designed
to this point matches the initial desired behavior.&lt;/p&gt;

    &lt;p&gt;When this is all done, there are a series of physical checks that can be
made to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_design_(electronics)&quot;&gt;physical
design&lt;/a&gt; before
&lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt;.  For example, the final
&lt;a href=&quot;https://en.wikipedia.org/wiki/Layout_Versus_Schematic&quot;&gt;layout should be checked to make certain it still matches the
schematic&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Antenna_effect&quot;&gt;Antenna rule checking&lt;/a&gt; is
used to make static electric discharge does not damage the device
during manufacture.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_rule_checking&quot;&gt;Design Rule Checks
(DRC)&lt;/a&gt; can also be
used.  DRC checks were initially used to just verify that all of the
components within a design have the correct widths, separations,
and that any enclosures were the minimum size.  Modern
&lt;a href=&quot;https://en.wikipedia.org/wiki/Design_rule_checking&quot;&gt;DRC&lt;/a&gt;
checkers now look for potential short-circuits, undriven lines, and much
more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Selecting a Package&lt;/p&gt;

    &lt;p&gt;An
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
board designer can often select between a variety of chip shapes, form
factors, and means of connecting to the board.  Some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
have ball grid array connectors, other’s have their pins on the sides.&lt;/p&gt;

    &lt;p&gt;Unlike the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
board designer, who gets to choose from pre-made packages, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer is required to pick which package he wants his chip to be placed
within.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Have I convinced you that there are more parts to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design than
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
design?  If not, just understand that we haven’t yet touched on the
test, verification, and debugging differences yet.&lt;/p&gt;

&lt;h2 id=&quot;asic-hell-is-worse-then-fpga-hell&quot;&gt;ASIC Hell is worse then FPGA Hell&lt;/h2&gt;

&lt;p&gt;Verifying and subsequently testing an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design is very different from that of an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design for two basic reasons: the monetary and calendar
costs.  As I mentioned above, a simple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design can be made, tested, and proven in an afternoon for the simple cost of
a small development board.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;s,
on the other hand, can require months to manufacture, not to
mention the millions of dollars required to manufacture them.&lt;/p&gt;

&lt;p&gt;Now, consider how this impacts the cost of any design bug.
If you find a mistake within your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
logic, you can often fix it within a week or so of isolating the problem.
If you’ve already delivered the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
solution to your customer, all it takes to upgrade their hardware is to send
them an updated configuration file electronically.  The cost is minimal.
On the other hand, if you find a bug in an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design, you will need to re-manufacture your chips at the cost of months
and millions of dollars.  Customer’s will be required to assemble new boards
with the new chips in their design.  As an example of how painful this can
become, you might wish to consider how Intel &lt;a href=&quot;https://en.wikipedia.org/wiki/Pentium_FDIV_bug&quot;&gt;paid roughly $475M for the
mistake in their divide
algorithm&lt;/a&gt;,
shipped with the first Pentium computers.&lt;/p&gt;

&lt;p&gt;Indeed, if you think &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt; is a
nightmare, imagine being stuck in the same position after designing an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;!
Your costs would be orders of magnitude higher!  Not only would you have to pay
the multiple millions of dollars for each new mask, but imagine if you didn’t
know &lt;em&gt;what&lt;/em&gt; the problem was in order to fix it?&lt;/p&gt;

&lt;p&gt;Just to illustrate, let’s consider the cost of finding and fixing bugs in
software,
on an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
and within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In software, the
&lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;debugger&lt;/a&gt;
can help you find your fault.  You can often find and fix the problem in seconds
to minutes.  (Often, not always.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
are harder to debug than software since you cannot see within them to examine
what’s going on.  Dealing with this problem has been one of the focuses of
&lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;.  Hence we’ve
discussed many techniques that can be used to find faults within
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designs.  We’ve discussed &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;how to get information
into an&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design, and how to pull information out.  We’ve discussed
&lt;a href=&quot;/digilent/2017/05/29/fft-debugging.html&quot;&gt;how to “single-step”&lt;/a&gt; an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design, &lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;how to “single-step” a
CPU&lt;/a&gt;
within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design, as well as how to &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;pull a trace out from within such a
design&lt;/a&gt;.
Using these techniques, faults can often be found within anywhere between an
hour or two on up to a couple of days–depending upon the fault.  Sometimes,
&lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;I’ve had faults take a month or
longer&lt;/a&gt; to find and fix–but
this is rare.&lt;/p&gt;

&lt;p&gt;Now, imagine how you would debug an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design?&lt;/p&gt;

&lt;p&gt;Your first and foremost goal would be to find problems within your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design before you send it out for manufacture.  Indeed, if you can find bugs
before &lt;a href=&quot;https://en.wikipedia.org/wiki/Tape-out&quot;&gt;tape out&lt;/a&gt;, your cost per bug
will be relatively cheap.  Here are some methods you might use:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/23/my-dbg-philosophy.html&quot;&gt;Simulation&lt;/a&gt; is
an obvious technique.  This works for both
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
as well as
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s.&lt;/p&gt;

    &lt;p&gt;Unlike
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s,
however,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s
can contain both digital and analog circuitry.  Hence an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;’s
simulation needs may require tools that can handle analog circuitry
as well as digital.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Prototyping digital circuitry using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;If you’d like to know if your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
will even boot, or if it will properly run programs, this is often a good
place to start.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designers also tend to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal
methods&lt;/a&gt; to find obscure
bugs that their test benches don’t reveal.&lt;/p&gt;

    &lt;p&gt;The big difference between &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal
methods&lt;/a&gt; and more
traditional test benching approaches is that traditional test benches often
test only a couple logic paths.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;Formal methods&lt;/a&gt; attempt
to test &lt;em&gt;every&lt;/em&gt; logic path in order to &lt;em&gt;prove&lt;/em&gt; that the design “works”.&lt;/p&gt;

    &lt;p&gt;There are several types of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal methods&lt;/a&gt;
available, with each type able to find a different type of design fault.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the cheap means of debugging an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design.  They are cheap because they can be performed without actually
manufacturing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
chips themselves.&lt;/p&gt;

&lt;p&gt;The more difficult task is testing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
after it has been manufactured.  This is often done, not for the purpose of
finding faults in the design (those were fixed before manufacture, right?),
but rather for the purpose of finding faults
within the manufacture of the particular part.&lt;/p&gt;

&lt;p&gt;Two basic approaches are used for this task.  The first approach is to use a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scan_scan&quot;&gt;scan chain&lt;/a&gt;, the second to do
&lt;a href=&quot;https://en.wikipedia.org/wiki/Boundary_scan&quot;&gt;boundary scans&lt;/a&gt;.  While
both are similar, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scan_scan&quot;&gt;scan chain&lt;/a&gt; approach applies to
the internal logic within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;,
whereas the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Boundary_scan&quot;&gt;boundary scan&lt;/a&gt; approach applies
to the I/O pads only.&lt;/p&gt;

&lt;p&gt;To test an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Scan_scan&quot;&gt;scan chain&lt;/a&gt;, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer must first connect every
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;
within the design to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scan_scan&quot;&gt;scan chain&lt;/a&gt;.  This must be done
as part of the design process, and before the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
is manufactured.  A debug port is also created on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
part, allowing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer access to the scan chain.  When activated, every flip flop within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
may be read and set.  This allows an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
designer internal visibility into their design, allowing him to determine
if the device that was manufactured accurately represents what he had
intended to manufacture.&lt;/p&gt;

&lt;p&gt;This debugging &lt;a href=&quot;https://en.wikipedia.org/wiki/Scan_scan&quot;&gt;scan chain&lt;/a&gt;
capability is often hidden within the manufacturer specified power and
ground rails supplied to the design, as well as (potentially) pins with
no particular connection to them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Boundary_scan&quot;&gt;Boundary scan&lt;/a&gt; scan testing is
very similar, with the difference that instead of connecting to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip-flop&lt;/a&gt;s
within a design, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Boundary_scan&quot;&gt;boundary scan&lt;/a&gt; circuitry
connects to all of the I/O’s within a design.  As a result, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Boundary_scan&quot;&gt;boundary scan&lt;/a&gt; can be used
to verify that different parts within a board are properly connected, and
that there are no short circuits between the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
and the rest of the board it is placed within.  Unlike the hidden nature of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Scan_scan&quot;&gt;scan chain&lt;/a&gt;’s, many chip manufacturers
use a standard
&lt;a href=&quot;https://en.wikipedia.org/wiki/JTAG&quot;&gt;JTAG&lt;/a&gt; interface to their
&lt;a href=&quot;https://en.wikipedia.org/wiki/Boundary_scan&quot;&gt;boundary scan&lt;/a&gt; logic.&lt;/p&gt;

&lt;p&gt;Given the above, I think it’s safe to conclude that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
testing methodologies are a superset of the technologies used to design
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
logic.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;While I haven’t discussed &lt;a href=&quot;http://www.clifford.at/yosys/about.html&quot;&gt;yosys&lt;/a&gt;
much on &lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;,
&lt;a href=&quot;http://www.clifford.at/yosys/about.html&quot;&gt;yosys&lt;/a&gt;
provides both an open source synthesis capability as well as access to several
open source &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal verification
methods&lt;/a&gt; for HDL designs.
These can then be used to &lt;em&gt;prove&lt;/em&gt; that the logic, either within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
or an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;
design, will work.&lt;/p&gt;

&lt;p&gt;I’d like to experiment with some of these methods,
and report about them on
&lt;a href=&quot;http://zipcpu.com/&quot;&gt;this blog&lt;/a&gt;.
Indeed, I think it would be valuable to &lt;em&gt;prove&lt;/em&gt; that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; does what that
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/doc/spec.pdf&quot;&gt;specification&lt;/a&gt;
says it is supposed to do.  Sure, I’ve tested it with a &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/sw/board/cputest.c&quot;&gt;roaming test
program&lt;/a&gt;,
but I expect that a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_verification&quot;&gt;formal&lt;/a&gt; proof would be
more complete.&lt;/p&gt;

&lt;p&gt;Once I get the chance to try this, I’ll be glad to write about my experiences
with &lt;a href=&quot;http://www.clifford.at/yosys/about.html&quot;&gt;yosys&lt;/a&gt; verification methods,
and share any thing I discovered with everyone here.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Again, the kingdom of heaven is like unto treasure hid in a field; the which when a man hath found, he hideth, and for joy thereof goeth and selleth all that he hath, and buyeth that field.&lt;/em&gt;</description>
        <pubDate>Fri, 13 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://zipcpu.com/blog/2017/10/13/fpga-v-asic.html</link>
        <guid isPermaLink="true">http://zipcpu.com/blog/2017/10/13/fpga-v-asic.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
