<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ZipCPU by Gisselquist Technology</title>
    <description>The ZipCPU blog, featuring how to discussions of FPGA and soft-core CPU design.  This site will be focused on Verilog solutions, using exclusively OpenSource IP products for FPGA design.  Particular focus areas include topics often left out of more mainstream FPGA design courses such as how to debug an FPGA design.
</description>
    <link>https://zipcpu.com/</link>
    <atom:link href="https://zipcpu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 Oct 2018 21:57:55 -0400</pubDate>
    <lastBuildDate>Thu, 04 Oct 2018 21:57:55 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    <image>
      <url>https://zipcpu.com/img/gt-rss.png</url>
      <title></title>
      <link></link>
    </image>
    
      <item>
        <title>Taking a look at the TinyFPGA BX</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The TinyFPGA BX&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/TinyFPGA-BX.png&quot; alt=&quot;&quot; width=&quot;202&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Some time ago, I wrote a &lt;a href=&quot;/blog/2017-12/16/max1k.html&quot;&gt;review of the MAX-1000 FPGA board&lt;/a&gt; sold by
&lt;a href=&quot;https://www.trenz-electronic.de/en&quot;&gt;Trenz&lt;/a&gt;.  Today, I’d like to share my thoughts on another small &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
development board: the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; board.&lt;/p&gt;

&lt;p&gt;If you’ve paid attention to the boards I like to purchase, I have a particular
love for the smaller &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards.  Examples include the
&lt;a href=&quot;http://www.xess.com/shop/product/xula2-lx25&quot;&gt;XuLA2-LX25&lt;/a&gt;,
&lt;a href=&quot;http://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod S6&lt;/a&gt;,
and the &lt;a href=&quot;/blog/2017-12/16/max1k.html&quot;&gt;MAX-1000&lt;/a&gt;.
These boards have all pin-holes for connections, running around the edges of
the board.  As a result, they either have very few peripherals, or these
boards are rife with possibilities and just waiting for a fun electronics
project.  Your choice.&lt;/p&gt;

&lt;p&gt;That said, this is probably a character flaw on my own part, because I’ve
never been comfortable with a soldering iron.  In reality, I shouldn’t be
so concerned.  At the extremely low cost of these small boards–and
particularly the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA
BX&lt;/a&gt;, I can afford a soldering failure,
or two, or perhaps even twenty, and I would quickly learn to be a better
engineer as a result.&lt;/p&gt;

&lt;p&gt;But let’s dig into the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;, and
see what we can do with something like this special board.&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-bx&quot;&gt;TinyFPGA BX&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; is a bare bones
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
board.  And, when I say bare bones, that’s
exactly what you have.  The board contains:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;a href=&quot;http://ww1.microchip.com/downloads/en/DeviceDoc/20005625B.pdf&quot;&gt;ultra low power 16MHz clock MEMs
oscillator&lt;/a&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;a href=&quot;http://www.adestotech.com/wp-content/uploads/DS-AT25SF081_45.pdf&quot;&gt;1MB SPI flash, capable of QSPI
mode&lt;/a&gt;,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A power LED and a user controlled LED, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A reset button to reload the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; from &lt;a href=&quot;}/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A USB connection for programming the board&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An iCE40 LP8k FPGA.  This FPGA has 7680 4-LUTs, and is supported by a fully
open source toolchain consisting of &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;, &lt;a href=&quot;http://www.clifford.at/icestorm&quot;&gt;ice-storm&lt;/a&gt;, and now &lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;NextPNR&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This iCE40 also has 16kB of block RAM.&lt;/p&gt;

    &lt;p&gt;When I tried to place the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on this board, I quickly discovered I’d
never be able to use all of that blockRAM for &lt;a href=&quot;/about/zipcpu.html&quot;&gt;my CPU&lt;/a&gt;.  Since the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
uses block RAM for more than one purpose (RAM, CPU registers, serial port
FIFO, etc.), this effectively limited the size of the block
RAM device available for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to 8kB.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;Oh, I almost forgot, one of the great strengths of the board is that it has
24 digital I/O’s with which you can do whatever with.  These I/O’s are brought
out to pins on the edge of the board.  Indeed, the strength of the board, as
in other boards of this minimalist variety, lies in what you can do with these
I/O’s.&lt;/p&gt;

&lt;p&gt;What really sets the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; apart,
though, is how it handles the USB port.&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-usb&quot;&gt;TinyFPGA USB&lt;/h2&gt;

&lt;p&gt;Most of the programmable &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards I have include an &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.dpf&quot;&gt;FTDI
FT2232H&lt;/a&gt;
chip connected to the USB port.  This chip contains all the hardware necessary
to both program the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, and to connect a basic serial port from your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design to your host computer.&lt;/p&gt;

&lt;p&gt;Not so with the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;.  This is perhaps the biggest thing that sets the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; apart from other &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; solutions: &lt;em&gt;it has no auxilliary chip for
dealing with the USB&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Instead, the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; requires &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design logic to communicate over the USB
port–if at all.&lt;/p&gt;

&lt;p&gt;I’ll be honest, before I discovered the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;, I thought it was impossible
to program an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; to communicate over the USB in a raw fashion like that.
The &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt; proves me wrong.&lt;/p&gt;

&lt;p&gt;Here’s how this works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When you power up the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;, it immediately loads
an initial “&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;”
design onto the board–much like a lot of microcontrollers, such as the PIC.
This is not your user design.  Instead, this is a design that will either
load your design, or communicate with the board over USB, and so allow you
to write a user design to the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Fig 2. on the right shows the basic
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory segregation.
The first 165kB is used by this USB enabled boot-loader, the next 165kB
is used  by the user design, and the rest of the flash is available to your
design.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2. Flash Memory by the Section&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tinyfpga-flash-layout.svg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Using the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-B-Series/tree/master/programmer&quot;&gt;TinyFPGA BX python
tools&lt;/a&gt;,
you can communicate with this &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;
and load your design into the next 165kB of
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, when you are ready and with the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;
plugged in, a USB command can be sent to the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; to cause it to switch to the user design.
This uses the iCE40 WARMBOOT primitive to cause the iCE40 to load a
new design from a non-zero address within &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; memory.&lt;/p&gt;

    &lt;p&gt;Once complete, your user design starts running.  If your design doesn’t
have USB capability within it, then you won’t have USB connectivity again
until you restart the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ever after, the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; will load your design after waiting a second or
two on startup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To return to the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; mode, you either need to press the reset button,
pull power from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, or
issue your own command to the WARMBOOT
primitive from within your own design to cause the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; to
reload itself from the zero address.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this is to say that the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; doesn’t really
provide the same functionality that the &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.dpf&quot;&gt;FTDI
chip&lt;/a&gt;
did.  Under this design concept, you cannot load a design onto the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; without also loading it onto the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; first.
There is no usable JTAG port to directly load the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; apart from
loading it into the &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;,
or to debug the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
using vendor tools.  Further, if you want a USB console port to your board,
then you may need to design and and add it yourself.&lt;/p&gt;

&lt;p&gt;It’s a pretty neat design concept.  Better yet, it’s all open source!  You can
look up how the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;does
it&lt;/a&gt;, and then modify
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;that design&lt;/a&gt;
for your own purposes.&lt;/p&gt;

&lt;h2 id=&quot;practical-consequences&quot;&gt;Practical Consequences&lt;/h2&gt;

&lt;p&gt;There are, however, some practical consequences of both the design concept
and the hardware on the board.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Because loading your design onto the board requires a design already loaded
onto the board, you’ll need to be careful not to erase, overwrite, or
otherwise damage the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; design.&lt;/p&gt;

    &lt;p&gt;If you do, you haven’t quite bricked your board.  However, you will then
be stuck trying to reload the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; design back onto the board using
the SPI pads (not pins, nor pin holes, but pads) on the back of the board.&lt;/p&gt;

    &lt;p&gt;While this may sound scary, the reality is that if you are going to be
soldering or otherwise wiring this board into your own project somewhere,
then you already have the skills to do this–even if it is a hassle.
Indeed, if you look at the underside of the board, you’ll be able to see
small pin-prick indents in the pads there, showing you where pins were used
to connect to the design to load the &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt; initially.&lt;/p&gt;

    &lt;p&gt;If this is still more than you bargained for, then &lt;a href=&quot;https://www.tindie.com&quot;&gt;Tindie&lt;/a&gt; sells a &lt;a href=&quot;https://www.tindie.com/products/loglow/tinyfpga-bx-breakout-revision-a&quot;&gt;breakout
board&lt;/a&gt;
for the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; for only $11 that should give you access to these
SPI pins for this purpose as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to USB enable your own design, there are some consequences.
First, the USB &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; requires about 1k LUTs out of a board containing
only 7.6k LUTs in the first place.  Placing this &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;, or other USB
design, into your &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design will limit what you can do with your own
design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The really ugly part of this setup is that neither
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;nextpnr&lt;/a&gt; nor
&lt;a href=&quot;https://github.com/YosysHQ/arachne-pnr&quot;&gt;arachne-pnr&lt;/a&gt;
support multiple clock timing-driven placement (yet), nor does the
&lt;a href=&quot;https://github.com/cliffordwolf/icestorm/tree/main/icetime&quot;&gt;icetime timing checker&lt;/a&gt; within the
&lt;a href=&quot;https://www.clifford.at/icestorm&quot;&gt;icestorm toolkit&lt;/a&gt;.  Think this through.
The USB design used by the bootloader runs at 48MHz.  It is very much wed
to this speed, and it would be difficult to change it.  If your user design
doesn’t run at 48MHz, you’ll be stuck either using the proprietary
tool-chain or waiting for dual-clock support in
&lt;a href=&quot;https://github.com/YosysHQ/nextpnr&quot;&gt;nextpnr&lt;/a&gt;.
(&lt;a href=&quot;https://github.com/YosysHQ/arachne-pnr&quot;&gt;Arachne-pnr&lt;/a&gt;, though maintained,
is no longer under active development.)&lt;/p&gt;

    &lt;p&gt;Just to give you a feel for timing, my own
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; runs at 100MHz on a Xilinx
Artix-7.  &lt;a href=&quot;https://github.com/ZipCPU/xulalx25soc&quot;&gt;It runs at 80MHz on a
Spartan 6&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;It runs at 50MHz on
an iCE40 HX8k&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;It runs at 25 MHz on
the iCE40 LP8k&lt;/a&gt; found within the
&lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;.
(&lt;a href=&quot;https://github.com/cliffordwolf/icestorm/tree/main/icetime&quot;&gt;icetime&lt;/a&gt;
gives the design a 30MHz maximum clock speed.)  Without being able to route
my design for two separate clocks, my design will not have USB support.&lt;/p&gt;

    &lt;p&gt;Or would they?  The ice40 boards do have an &lt;code class=&quot;highlighter-rouge&quot;&gt;SB_IO&lt;/code&gt; primitive that provides
support for a DDR capability …&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What does this mean for me?&lt;/p&gt;

&lt;p&gt;First, the small block RAM space on the chip is too small to hold the
&lt;a href=&quot;https://sourceware.org/newlib&quot;&gt;newlib&lt;/a&gt; C-library.  Hence, if I want to run
&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt; I’ll need
to store as much library code as I can in the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;flash&lt;/a&gt;.  I’ll need to be
extra careful that, in this process, I don’t affect the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;.  In addition, 
&lt;a href=&quot;https://en.wikipedia.org/wiki/&amp;quot;Hello,_World!&amp;quot;_program&quot;&gt;Hello World&lt;/a&gt;
will need 2 wires dedicated to my &lt;a href=&quot;https://store.digilentinc.com/pmod-usbuart-usb-to-uart-interface/&quot;&gt;USB-UART PMod&lt;/a&gt;, just so I can see the result
and interact with my design–assuming that I can’t get a USB console to work.&lt;/p&gt;

&lt;p&gt;I’m also very thankful that the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA
BX&lt;/a&gt; (now) supports all the wires
necessary for &lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;QSPI flash&lt;/a&gt;!
That will help to help keep the &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;CPU speed up
there&lt;/a&gt;, in spite
of the non-pipelined CPU configuration (the only one that would fit).&lt;/p&gt;

&lt;h2 id=&quot;tinyfpga-and-fpga-hell&quot;&gt;TinyFPGA and FPGA Hell&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; has a USB protocol driver.  This was one of the things
that surprised me and caught my attention when I first discovered this board.
In particular, I was curious to know how Luke Valenty built it.  The USB
specification is rather large and complex.  I had to ask: What design method
did Valenty use to get this interaction up and running?&lt;/p&gt;

&lt;p&gt;So I asked.  Valenty was more than happy to share how he had (or rather hadn’t)
avoided &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt; during his design
process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I notice the &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt;
design includes a USB capability.  Can you tell my readers anything about
how you went about building it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards use a dedicated USB interface chip to enable programming
and communication between the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; and a host computer.  The most popular
choice is an &lt;a href=&quot;http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.dpf&quot;&gt;FTDI chip&lt;/a&gt;.
This chip costs as much as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; itself!  I
had a goal of developing a small and cost-effective &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; board and I
really wanted to deliver.  I have a lot of experience with USB, so I
decided to implement the USB interface fully on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; itself.
The ICE40 FPGAs have a multiboot capability that allows for multiple
configuration bitstreams to be stored in the
&lt;a href=&quot;/blog/2018/08/16/spiflash.html&quot;&gt;SPI flash&lt;/a&gt; and loaded at will
by the design.  This allowed me to develop a USB &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; in a similar
way that microcontrollers can bootload themselves over serial or  USB
interfaces.&lt;/p&gt;

  &lt;p&gt;The plan was to test the design on the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; hardware against a real
USB host.  I had no testbench for simulation nor did I have any 
&lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formal assertions or assumptions&lt;/a&gt;.  This was a terrible idea and I
spent a lot of time debugging issues on real hardware and implementing
workarounds in the original programmer software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I’m not a board designer myself, so I have the advantage of examining a
  canned &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design for the board I’m working with before I ever start.
  Even better, I can return to that design if I think there might be a
  hardware problem with the board I am working with.&lt;/p&gt;

&lt;p&gt;As a board supplier, can you share anything about what it took to get a
  first initial design running on the board?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because I didn’t have any simulation or &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; environment,
I had to do all my testing and debugging on the real hardware.  This
involved running tests on the board while connected to a USB host and
spying out internal signals to extenal pins so I can capture them on my
logic analyzer.  Debugging issues required me to make educated guesses
about what signals might help me to debug an issue and rerunning the test multiple times while capturing different groups of signals until the issue could be identified and fixed.&lt;/p&gt;

  &lt;p&gt;This was a long turnaround between seeing an issue, root-causing it, and
verifying a fix.  It took quite some time and long nights to get the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; working reliably on all platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Did you ever find yourself stuck in &lt;a href=&quot;/fpga-hell.html&quot;&gt;FPGA
  Hell&lt;/a&gt; while designing and
  building the &lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, in fact, any time I go back to the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; I have
to be very careful how I make changes.  I have since added a simulation
test bench and suite of tests, but making changes is still quite difficult.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Did you use any simulation or &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; techniques?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nope, and this was a major folly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Would you recommend this approach to others?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Valenty&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is pretty much the worst way to go about developing a digital design.
In the end I was able to get the
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; to work
very well, but I spent a substantial amount of time working through issues
that would have been trivial to find with a simulation testbench and/or
with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt; techniques.&lt;/p&gt;

  &lt;p&gt;I am currently working on a rewrite of the USB core and
&lt;a href=&quot;https://github.com/tinyfpga/TinyFPGA-Bootloader&quot;&gt;bootloader&lt;/a&gt; using
&lt;a href=&quot;http://m-labs.hk/migen/index.html&quot;&gt;Migen&lt;/a&gt; and a unit test methodology.
The design is broken down into small
and simple components that are then unit tested individually to ensure
they behave as expected.  This process is proving to be far easier, less
time-consuming, and is creating a more robust design.  If
&lt;a href=&quot;http://m-labs.hk/migen/index.html&quot;&gt;Migen&lt;/a&gt; ever
gets support for &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;formal assertions and assumptions&lt;/a&gt; I would be very
interested in trying them out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: Finally, what do you see as the biggest selling point of the
  &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; over and above other
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
  boards that may be out there today?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;https://tinyfpga.com/bx/guide.html&quot;&gt;TinyFPGA BX&lt;/a&gt; board is great to
me because it’s completely open and very small.  You have a lot of freedom
to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
in any way in which you feel without paying extra money for components or
peripherals you are not using.  It’s a great way to create new and unique
projects that take advantage of the power of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.  The
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; &lt;a href=&quot;https://discourse.tinyfpga.com&quot;&gt;Discourse server&lt;/a&gt;
has some excellent examples of projects the community has come up with:
&lt;a href=&quot;https://discourse.tinyfpga.com/c/tinyfpga-projects&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;h2 id=&quot;using-the-tinyfgpa&quot;&gt;Using the TinyFGPA&lt;/h2&gt;

&lt;p&gt;I hope I haven’t given you the wrong idea about the
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt; above.  It is designed to be a very minimalist
iCE40 FPGA board.  It fills that role quite nicely.  Even better,
it is supported by an entirely open source &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; tool chain.&lt;/p&gt;

&lt;p&gt;If this is your first project, then do be prepared to do some hand wiring
to connect your favorite devices/peripherals to the board.&lt;/p&gt;

&lt;p&gt;Others have already been very successful with this board.  These users have
proved that you can play pong, pac man, or even space invaders on the board.
Still others have ported the picoSoC project including a picoRV RISC-V CPU to
the board.  In other words, it’s not so spare that you can’t do anything with
it, but it might test your creativity.  Hopefully that’s why you are in the
market for a board like this in the first place.&lt;/p&gt;

&lt;p&gt;Me?  Well, it shouldn’t surprise you to know that I’m more interested in
placing a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; onto the board.&lt;/p&gt;

&lt;p&gt;Will the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; fit?  Yes.  With a
special hardware multiply unit, the normal divide unit, together with the
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;pipelined fetch unit&lt;/a&gt;
and compressed instruction support, a &lt;a href=&quot;https://github.com/ZipCPU/tinyzip&quot;&gt;minimum ZipCPU
build&lt;/a&gt; uses 5437 logic elements out of 7680,
or about 70%.  Yes, I rewrote both the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/slowmpy.v&quot;&gt;multiply&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/div.v&quot;&gt;divide&lt;/a&gt; units
to get the &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;logic
count&lt;/a&gt; this low.  I
could go lower if I wanted by removing some of these extra features.  My goal,
however, was to leave enough room at the end so that I could incorporate a USB
based serial port.  Sadly, I might end up waiting a while on that.&lt;/p&gt;

&lt;p&gt;Perhaps I’ll just &lt;a href=&quot;https://store.digilentinc.com/pmod-gps-gps-receiver&quot;&gt;GPS enable my
device&lt;/a&gt; instead.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Seest thou a man diligent in his busines?  He shall stand before kings; he shall not stand before mean men.  (Prov 22:29)&lt;/em&gt;</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/10/05/tinyfpga.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/10/05/tinyfpga.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>To my new readers and my new twitter followers, welcome!</title>
        <description>&lt;p&gt;If you are new here, I’d like to take this personal opportunity to welcome you
to the &lt;a href=&quot;https://zipcpu.com/&quot;&gt;ZipCPU blog&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I discuss FPGA design methodology, completed designs,
&lt;a href=&quot;/dsp/dsp.html&quot;&gt;DSP&lt;/a&gt;, &lt;a href=&quot;/formal/formal.html&quot;&gt;formal
methods&lt;/a&gt;, and more.  I’ve also been known
to &lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;tweet&lt;/a&gt; about the same as well.  If you
aren’t &lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;following me on twitter&lt;/a&gt;, then let me
invite you to do so–or you’ll miss the weekly formal verification quizzes.
The blog also has an &lt;a href=&quot;/feed.xml&quot;&gt;RSS feed&lt;/a&gt;, and
you are welcome to subscribe to it, although I have been known to wait some
time after posting before updating the &lt;a href=&quot;/feed.xml&quot;&gt;RSS feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are a beginner, the blog is loosely built so that the simpler topics
are the older ones that you’ll find at the bottom of the page.  I would
therefore recommend you start reading the blog from the oldest articles to
the newest.  If you do so, you’ll also notice my methods have changed somewhat
as well–I didn’t use &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;
at first.  Perhaps one day I’ll organize all of my posts into a textbook.
Such a textbook would be built around the premise that design engineers
spend the most of their time debugging, and so it would focus on not only
learning designs, but
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;,
&lt;a href=&quot;/blog/2018/08/22/what-is-simulation.html&quot;&gt;simulation&lt;/a&gt;,
and &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;troubleshooting as
well&lt;/a&gt;.
As such, it would have the three thrusts of learning shown below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Tentative Digital Design Learning Outline&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/course-outline.svg&quot; alt=&quot;&quot; width=&quot;760&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Until that time, these posts will remain organized by date only, somewhat
disorganized by ability level, and topically disorganized.  While I have tried
to sort the &lt;a href=&quot;/topics.html&quot;&gt;site by topic here&lt;/a&gt;, I’ve also
discovered in the process that the major categories overlap, so
&lt;a href=&quot;/topics.html&quot;&gt;that page&lt;/a&gt; has only been somewhat successful.&lt;/p&gt;

&lt;p&gt;I also teach a two-day on-site course in
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
using a commercial version
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
with support for VHDL, Verilog, SystemVerilog, and the full SystemVerilog
assertion language.  That course is more organized than these blog articles
are.  If you are interested,
&lt;a href=&quot;https://www.symbioticeda.com&quot;&gt;SymbioticEDA&lt;/a&gt;
handles the scheduling on my behalf.&lt;/p&gt;

&lt;p&gt;While I enjoy and welcome discussion, there is &lt;a href=&quot;/blog/2017/08/01/advertising.html&quot;&gt;no discussion
capability&lt;/a&gt; on &lt;a href=&quot;https://zipcpu.com/&quot;&gt;this
blog&lt;/a&gt;, and some topics just don’t fit
in &lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;tweets&lt;/a&gt;.  (Sorry.)  Depending upon the
type of discussion you would like, feel free to either ask on
&lt;a href=&quot;https://webchat.freenode.net&quot;&gt;freenode&lt;/a&gt;’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;#yosys&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;##FPGA&lt;/code&gt; channels (you will need to get a free account) where I am
known as ZipCPU, or alternatively on &lt;a href=&quot;https://www.reddit.com&quot;&gt;Reddit&lt;/a&gt; where I
try to monitor both the &lt;a href=&quot;https://www.reddit.com/r/FPGA&quot;&gt;FPGA&lt;/a&gt; and the
&lt;a href=&quot;https://www.reddit.com/r/yosys&quot;&gt;yosys&lt;/a&gt; channels as well.
If you ask a yosys question that is too difficult for me on
&lt;a href=&quot;https://www.reddit.com/r/yosys&quot;&gt;reddit&lt;/a&gt;, I’ve been known to bring it up to
Clifford at our weekly meetings, and answer it then.  For such questions,
&lt;a href=&quot;https://www.reddit.com/r/yosys&quot;&gt;reddit replies&lt;/a&gt; can take a couple of days.&lt;/p&gt;

&lt;p&gt;You should also know that I am a Christian, and I am not ashamed of it.  My own
life has been dedicated to the service of Christ, and that now includes this
blog.  You can expect occasional articles on
&lt;a href=&quot;/blog/2017/08/12/caused-to-lie.html&quot;&gt;ethics&lt;/a&gt;,
morality,
and &lt;a href=&quot;/blog/2018/04/01/resurrection-day.html&quot;&gt;Christianity&lt;/a&gt;,
verses at the end of each post, and even
&lt;a href=&quot;https://www.twitter.com/ZipCPU&quot;&gt;tweets&lt;/a&gt; on such topics from time to time.&lt;/p&gt;

&lt;p&gt;My Christian beliefs are centered around a literal interpretation of the Bible.
This includes a belief in a &lt;a href=&quot;https://www.blueletterbible.org/kjv/exo/20/11&quot;&gt;6-day
creation&lt;/a&gt;
that took place roughly six-thousand years ago, a belief that God will
&lt;a href=&quot;https://www.blueletterbible.org/kjv/2pe/3/7&quot;&gt;cause the end of this world&lt;/a&gt;
rather than any man-induced climate change, a firm belief that a &lt;a href=&quot;https://www.blueletterbible.org/kjv/luk/22/36&quot;&gt;free people
should be an armed people&lt;/a&gt;,
and more.&lt;/p&gt;

&lt;p&gt;These beliefs have also led me to very strong right-wing political views.&lt;/p&gt;

&lt;p&gt;My point is simply this: if these things will offend you, and they have
offended some, then consider this as your fair warning.&lt;/p&gt;

&lt;p&gt;If you are still interested in the &lt;a href=&quot;https://zipcpu.com/&quot;&gt;ZipCPU
blog&lt;/a&gt;, and even more if you find it valuable,
then please consider supporting it.  The &lt;a href=&quot;https://zipcpu.com/&quot;&gt;ZipCPU
blog&lt;/a&gt; is supported entirely through
donations made by folks such as you, as well as my own love of helping and
encouraging others.  If you have benefited from the blog, then let me invite
you to &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;contribute a small sum on a monthly
basis&lt;/a&gt;.  Should you do so, you’ll also have
access to another discussion forum on &lt;a href=&quot;https://www.patreon.com/ZipCPU&quot;&gt;Patreon&lt;/a&gt;,
where I write occasional messages to my sponsors, ask them about what topics
might interest them and so on.  I also have some designs, such as a WB to
AXI-lite bridge, an AXI-lite to WB bridge, together with an AXI-lite formal
property file, which are available to sponsors only.  Using this formal
property file, it’s easy to show how and why Xilinx’s example AXI peripheral
code is broken.&lt;/p&gt;

&lt;p&gt;Either way, welcome, and I hope to have had the opportunity to encourage you
in your own journey while you are here.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;From that time many of his disciples went back, and walked no more with him. (John 6:66)&lt;/em&gt;</description>
        <pubDate>Thu, 04 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/10/04/welcome.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/10/04/welcome.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>An Open Source Pipelined FFT Generator</title>
        <description>&lt;p&gt;Have you ever tried to simulate a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt; algorithm using &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;, only to
then realize that your design required an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
and that all you had was a proprietary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
implementation?  Perhaps you
then looked for open source alternatives among the &lt;a href=&quot;https://opencores.org/projects?expanded=DSP core&quot;&gt;DSP
cores&lt;/a&gt; on
&lt;a href=&quot;https://opencores.org&quot;&gt;OpenCores&lt;/a&gt;, only to find that the particular
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
size you needed wasn’t supported, or that it required more
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s
than your board had?  Perhaps the open core you found didn’t work, and you
were unable to either verify the core by re-running the formal verification
or by running the test bench.&lt;/p&gt;

&lt;p&gt;This happened to me when I set out to build one of my first &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; designs: a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Positioning_System&quot;&gt;GPS&lt;/a&gt; processing algorithm.  However, in my case, things were worse.  I needed an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
that could process two incoming samples per clock, or I would have
no chance of applying my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
based &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Positioning_System&quot;&gt;GPS&lt;/a&gt;
processing algorithm in real time.&lt;/p&gt;

&lt;p&gt;Since building this core, I’ve discovered how universally applicable an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
core is.  As a result, I’ve expanded the initial
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
capability that I had built in order to handle some of the
more common use cases.  Not only does this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
process a high speed input at
two samples per clock, but it can now handle the typical case of one input
sample per clock, or even half or a third of that rate.  Part of my hope
with this change is to be able to easily process audio samples at rates
much slower than the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline&lt;/a&gt;
can handle.&lt;/p&gt;

&lt;p&gt;Why not implement a block
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
then?  That’s a good question.  For now, my simple is simply
one project at a time.&lt;/p&gt;

&lt;p&gt;Today, I’d like to introduce &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT core
generator&lt;/a&gt;, show you how to generate
a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;custom FFT core&lt;/a&gt;
for your own purposes, and then discuss how I’ve gone about
formally verifying the components of the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the core&lt;/a&gt;.
Yes, it has been formally verified–at least, most of it has.  But I’ll get
to that in a moment.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-fft&quot;&gt;What is an FFT&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. Spectral representation of speech&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-echoes-burning-bush.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you aren’t familiar with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;, then you
should know that it is a very important part of &lt;em&gt;many&lt;/em&gt; engineering applications.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s are
an important part of any digital &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectrum_analyzer&quot;&gt;spectrum
analyzer&lt;/a&gt;.
You’re likely to find one of these in just about any good electronics lab.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s can
also be used when implementing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectrogram&quot;&gt;spectrogram&lt;/a&gt;, such as the
one shown in Fig 1. on the right, or Fig 2 below.  Such
&lt;a href=&quot;https://en.wikipedia.org/wiki/Spectrogram&quot;&gt;spectrogram&lt;/a&gt;s make
it easier to understand artifacts of speech and other sounds, or even
radio frequency waveforms, by visual inspection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolutions&lt;/a&gt; and/or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-correlation&quot;&gt;correlations&lt;/a&gt; can often be
implemented much faster and cheaper using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation
of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;This means that &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;digital
filters&lt;/a&gt; can be
implemented with &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;
enabled &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolutions&lt;/a&gt;
faster/better/cheaper.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;
are used to understand and analyze &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_system&quot;&gt;control
systems&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I was personally surprised at how easy it became to study and understand
a &lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;PLL&lt;/a&gt;s implementation
once &lt;a href=&quot;https://www.amazon.com/Phaselock-Techniques-Floyd-M-Gardner/dp/0471430633/&quot;&gt;Gardner rewrote
it&lt;/a&gt;
using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Z-transform&quot;&gt;Z-transform&lt;/a&gt;, a
variant of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fifth, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;s
are used not only in &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;filter&lt;/a&gt;
implementations, but they are also used in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parks-MccClellan_filter_design_algorithm&quot;&gt;filter
design&lt;/a&gt;
process.  We’ve
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;discussed this somewhat&lt;/a&gt;
already.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, just like you can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; to evaluate
&lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;filter&lt;/a&gt;
implementations, you can also use them to &lt;a href=&quot;/dsp/2018/01/16/interpolation-is-convolution.html&quot;&gt;evaluate and compare interpolator
implementations&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Indeed, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;transform&lt;/a&gt;
is so ubiquitous in &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;digital signal
processing&lt;/a&gt;
that it can be hard to avoid: it is the &lt;a href=&quot;/dsp/2017/11/22/fltr-response.html&quot;&gt;&lt;em&gt;natural way of expressing a signal
or linear operation in a time-independent fashion&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. An FSK decomposed with FFT based processing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-fsk.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;&lt;em&gt;Fast&lt;/em&gt; Fourier
Transform (FFT)&lt;/a&gt;
is a specific implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;, that drastically
reduces the cost of implementing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; Prior to the
invention of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt; could only
be calculated the hard way with &lt;code class=&quot;highlighter-rouge&quot;&gt;N^2&lt;/code&gt; multiplication operations per transform
of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; points.  Since &lt;a href=&quot;https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm&quot;&gt;Cooley and
Tukey&lt;/a&gt;
&lt;a href=&quot;http://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf&quot;&gt;published&lt;/a&gt;
their algorithmic implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;,
they can now be calculated with &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N log_2(N))&lt;/code&gt; multiplies.&lt;/p&gt;

&lt;p&gt;Needless to say, the invention of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; immediately
started to transform
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;signal processing&lt;/a&gt;.
But let’s back up and understand a little more about what a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; is first.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt; is
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_map&quot;&gt;linear operator&lt;/a&gt; that decomposes
a signal from a representation in time, to a time-less representation in
frequency.  This is done via a continuous-time &lt;a href=&quot;https://en.wikipedia.org/wiki/Projection_(linear_algebra)&quot;&gt;projection
operator&lt;/a&gt;
applied across all time to an incoming signal,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Projection_(linear_operator)&quot;&gt;projecting&lt;/a&gt;
the incoming signal onto a set of &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex
exponential&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Basis_function&quot;&gt;basis
functions&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-fourier-transform.png&quot; alt=&quot;&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is the definition you will first come across when studying
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;.
This form above is easy to work with mathematically with
just pen and paper–as long as you don’t try to calculate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt;
of &lt;code class=&quot;highlighter-rouge&quot;&gt;e^{j 2pi ft}&lt;/code&gt; across all time–something which only
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dirac_delta_function&quot;&gt;questionably converges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two problems with this nice mathematical definition when it comes
to working with an engineering reality.&lt;/p&gt;

&lt;p&gt;The first problem is that digital algorithms don’t operate upon continuous
signals very well.  Computers and other &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;digital signal
processors&lt;/a&gt;
do a much better job with
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt;&lt;/em&gt;
signals.  Hence, we’ll switch from discussing the
pure &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier transform&lt;/a&gt; shown above and examine the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;Discrete-time Fourier
transform&lt;/a&gt;
instead.  For this, we’ll switch from a continuous incoming signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;x(t)&lt;/code&gt;, to its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt;
representation, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt;.  The &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;Discrete-time Fourier
transform&lt;/a&gt;
can then be applied to our signal.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-discrete-fourier.png&quot; alt=&quot;&quot; width=&quot;327&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While this &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;discrete-time
transform&lt;/a&gt;
works very nicely for representing the response of certain
&lt;a href=&quot;/dsp/2017/11/22/fltr-response.html&quot;&gt;digital filters&lt;/a&gt;,
it’s still not all that practical.&lt;/p&gt;

&lt;p&gt;This brings us to the second problem: Computers can’t handle an infinite
number of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;,
nor can they handle an infinite number potential frequencies.  Both of these
need to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt;
and finite.&lt;/p&gt;

&lt;p&gt;Fixing this second problem brings us to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-fast-dft.png&quot; alt=&quot;&quot; width=&quot;291&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, not only is the &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt; used in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;this transform&lt;/a&gt;
discrete, but the frequency index, &lt;code class=&quot;highlighter-rouge&quot;&gt;k/N&lt;/code&gt;, is as well.&lt;/p&gt;

&lt;p&gt;All three of these representations are very tightly related.  Indeed, it can
be argued that under certain conditions, such as those of a sufficiently
band limited and time limited signal, each of these three operators
can be said to be roughly equivalent.&lt;/p&gt;

&lt;p&gt;Ouch.  Did I just say that?  The
mathematician within me is screaming that this statement is in gross error.
Mathematically, there are major and significant differences between these
transforms.  Practically, however, only this last transform can ever be
computed digitally.  Therefore, the first two expressions of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt; and then the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform&quot;&gt;discrete time Fourier
transform&lt;/a&gt;
can only ever be digitally approximated by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps I should just leave this point by saying these three representations
are tightly related.&lt;/p&gt;

&lt;p&gt;It is this third representation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;, known as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete
Fourier transform&lt;/a&gt;,
that we’ll be discussing the implementation of today.  I’m also going to argue
that this is the only representation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier
transform&lt;/a&gt;
that can be numerically computed for any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sampled&lt;/a&gt; finite
sequence, but I’ll be glad to invite you to prove me wrong.&lt;/p&gt;

&lt;p&gt;If you look at the form above, you can see it takes as input &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; data
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x[n]&lt;/code&gt;,
and calculates one summation across those inputs for every value of &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; to
produce &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
out, &lt;code class=&quot;highlighter-rouge&quot;&gt;X[k/N]&lt;/code&gt;.  Given that there’s a complex multiplication
required for every term in that summation of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; numbers, and that there are
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; relevant outputs, this will cost &lt;code class=&quot;highlighter-rouge&quot;&gt;N^2&lt;/code&gt; painful multiplications to calculate.&lt;/p&gt;

&lt;p&gt;If we just left things there,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;this transform&lt;/a&gt;,
would be so hard to calculate that no one would ever use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm&quot;&gt;Cooley and
Tukey&lt;/a&gt;,
however, described a way that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;
can be decomposed into two transforms, each of them being half the size of
the original, for the cost of only &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; multiplies.  If you then repeat this
&lt;code class=&quot;highlighter-rouge&quot;&gt;log_2(N)&lt;/code&gt; times, you’ll get to a one point transform, for a total cost of
&lt;code class=&quot;highlighter-rouge&quot;&gt;N log_2(N)&lt;/code&gt; multiplies.  At this cost point, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;
becomes relevant.  Indeed, it becomes a significant and fundamental
&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signal_processing&quot;&gt;DSP&lt;/a&gt; operation.&lt;/p&gt;

&lt;p&gt;Let’s take a moment to scratch the surface of how this is done, using the
“decimation in frequency” approach to decomposing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
that is used within
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core&lt;/a&gt;.  It involves first
splitting the summation into two parts, one containing the low numbered
terms and one containing the higher numbered terms.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-bisum.png&quot; alt=&quot;&quot; width=&quot;566&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The left term captures the first half of the summation, whereas the right term
captures the second half.&lt;/p&gt;

&lt;p&gt;If you look at the two summation terms above, you’ll see that they share a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;e^{-j2pi kn/N}&lt;/code&gt;.  We can factor this common term out to the right.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-subfft.png&quot; alt=&quot;&quot; width=&quot;537&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Once factored, this almost looks like the same summation we started with, only
in a recursive form.  The difference is that we are now calculating a smaller
&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;, summing
over only half as many points as before.  The big difference is a subtle
modification to the inside.&lt;/p&gt;

&lt;p&gt;To draw this out, let us consider even and odd frequency bins, &lt;code class=&quot;highlighter-rouge&quot;&gt;2k&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2k+1&lt;/code&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dif-prebutterfly.png&quot; alt=&quot;&quot; width=&quot;711&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We can simplify this further by the simple fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; raised to any
integer multiple of &lt;code class=&quot;highlighter-rouge&quot;&gt;2pi&lt;/code&gt; will be one.  Similarly, &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; raised to any odd
integer multiple of &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt; will be negative one.  This allows just a touch more
simplification.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dif-butterfly.png&quot; alt=&quot;&quot; width=&quot;681&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This means that with just a little bit of manipulation, we can split the
calculation of one &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;
into the calculation of two similar &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;Discrete Fourier
transform&lt;/a&gt;,
each that are only half the size of the original.&lt;/p&gt;

&lt;p&gt;The frequency independent &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex
number&lt;/a&gt; in the second line,
&lt;code class=&quot;highlighter-rouge&quot;&gt;e^{-j 2pi n/N}&lt;/code&gt; is commonly known as a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;generated
pipeline FFT&lt;/a&gt; will
use a lookup table to avoid the need to calculate this on the fly.&lt;/p&gt;

&lt;p&gt;Reducing an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; by
pairs of frequencies in this fashion is accomplished via what’s called a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Butterfly_diagram&quot;&gt;butterfly&lt;/a&gt;.  In the code
we’ll discuss below, we’ll use the term &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FFT
stage&lt;/code&gt;&lt;/a&gt; to reference
decomposing an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; into
two smaller &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s,
and we’ll call the calculation of the values within the parenthesis above
a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;butterfly&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I said I was going to gloss over the gory details, so I’ll start doing so here.
These details are readily available to anyone who wishes to look them up.&lt;/p&gt;

&lt;p&gt;However, there is one important detail associated with which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Butterfly_diagram&quot;&gt;butterflies&lt;/a&gt;
are applied to that I don’t want to skip.  From the equations above, you can
see that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Butterfly_diagram&quot;&gt;butterfly&lt;/a&gt;
will be applied to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n+N/2&lt;/code&gt;.  What’s not so obvious is that we can then repeat
this same decomposition using
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n+N/4&lt;/code&gt;, and we can then repeat the decomposition again.&lt;/p&gt;

&lt;p&gt;The other important detail in this process is that the result will be produced
in a &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bit-reversal_permutation&quot;&gt;bit-reversed&lt;/a&gt;&lt;/em&gt;
order.  You can see some of that above.  Notice how the values &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n+N/2&lt;/code&gt;
were used to calculate frequencies &lt;code class=&quot;highlighter-rouge&quot;&gt;2k&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2k+1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well come back to some of these details in a bit when we discuss how
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core&lt;/a&gt;
was verified.&lt;/p&gt;

&lt;h2 id=&quot;running-the-core-generator&quot;&gt;Running the Core Generator&lt;/h2&gt;

&lt;p&gt;If you want to try out the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;core
generator&lt;/a&gt;, you’ll need to download and
build it first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/ZipCPU/dblclockfft
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I like to think that &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the project&lt;/a&gt;
doesn’t have any dependencies.  It would be more realistic to point out that
it depends upon &lt;a href=&quot;https://www.gnu.org/software/gcc&quot;&gt;GCC&lt;/a&gt; (or other C compiler),
&lt;a href=&quot;https://www.gnu.org/software/binutils/&quot;&gt;binutils&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;make&lt;/a&gt;, and a
basic Linux environment.  (This is currently necessary for creating
directories, etc.)  The various bench tests currently require
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
though some require &lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;
as well, and the formal proofs of the various components require
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
and both the
&lt;a href=&quot;http://yices.csl.sri.com&quot;&gt;yices&lt;/a&gt; and
&lt;a href=&quot;https://boolector.github.io&quot;&gt;boolector&lt;/a&gt;
engines.  Neither
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/software/octave&quot;&gt;Octave&lt;/a&gt;,
nor &lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
or the formal engines, are required to use the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;core
generator&lt;/a&gt;, however.  Feel free to
correct me if there’s anything I’m missing here.&lt;/p&gt;

&lt;p&gt;Once the “&lt;a href=&quot;https://www.gnu.org/software/make/&quot;&gt;make&lt;/a&gt;” command completes, you
should have an &lt;code class=&quot;highlighter-rouge&quot;&gt;fftgen&lt;/code&gt; program in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sw/&lt;/code&gt; subdirectory within the core.
That’s what we’ll be working with.&lt;/p&gt;

&lt;p&gt;Need an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;?  Let’s get
started using &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this coregen&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Suppose you want a 128-pt
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  You can
simply run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a directory &lt;code class=&quot;highlighter-rouge&quot;&gt;fft-core&lt;/code&gt;, into which it will place the Verilog
code for this &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, and
the various hex files for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle
factor&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Of course, in any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;,
bit size is closely related to &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;logic
usage&lt;/a&gt; within
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;the core&lt;/a&gt;,
and so it can be very important to control bit size.  The example above will
create an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; with a
default input bit-width of 16-bits per input.  Not only that, but this width
will grow at one bit for every two stages.&lt;/p&gt;

&lt;p&gt;Would you rather have an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; with a 12-bit
input width?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a 128-pt
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
with 12-bit inputs and 16-bit outputs.&lt;/p&gt;

&lt;p&gt;What if you only wanted a 12-bit output?  You could limit the internal bit
growth, and hence the output size, to only 12-bits by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;-m 12&lt;/code&gt; to your
command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default, this will use &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle
factor&lt;/a&gt;s
(constant approximations of those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Euler&#39;s_formula&quot;&gt;complex exponential&lt;/a&gt;s)
of 12-bits–the same size as the input bit width.&lt;/p&gt;

&lt;p&gt;What if that’s not enough?  An
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;s
the same width as the data will suffer from some amount of &lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;truncation
error&lt;/a&gt;.  We can
increase the number of bits used by these &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle
factor&lt;/a&gt;s to help reduce this
&lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;truncation error&lt;/a&gt;.
Let’s increase them by making them two bits longer than the data at every stage.
To do this, we’ll add &lt;code class=&quot;highlighter-rouge&quot;&gt;-x 2&lt;/code&gt; to our command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will reduce the &lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;internal truncation
error&lt;/a&gt; associated with
calculating the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.
This &lt;a href=&quot;/dsp/2017/09/27/quantization.html&quot;&gt;truncation error&lt;/a&gt;
will decrease until about &lt;code class=&quot;highlighter-rouge&quot;&gt;-x 4&lt;/code&gt; or so, after which adding additional bits
bits is not likely to yield any significant additional improvements.&lt;/p&gt;

&lt;p&gt;Voila!  A wonderful &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Well, not quite.  The big problem with this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
is that we’ve used &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;hand-generated shift-add multiplication
logic&lt;/a&gt; for
many stages.  These soft-multiplies are expensive, and may well consume all
of the logic within your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
If you are instead using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; that
provides hardware accelerated multiplies (i.e.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements),
then you can authorize the core to use some limited number of these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements.&lt;/p&gt;

&lt;p&gt;For example, let’s build an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
using no more than 15
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; by adding
&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 15&lt;/code&gt; to our command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2 -p 15&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, all of the multiplies within five of the seven stages of our
128-pt &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; will now use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;hardware multipliers&lt;/a&gt;,
at three multiplies per stage.  The last two stages don’t use any multiplies,
since they can be accomplished simply using additions and subtractions.&lt;/p&gt;

&lt;p&gt;On the other hand, if your signal will come into the core at no more than one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
every other clock cycle, then you can drop the number of multiplies
used per stage from three down to two.&lt;/p&gt;

&lt;p&gt;This is the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; parameter.  &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 2&lt;/code&gt; will cause the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
to assume that you’ll never give it two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
on adjacent clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2 -p 15 -k 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will now use &lt;code class=&quot;highlighter-rouge&quot;&gt;2(N-2)&lt;/code&gt; multiplies for a &lt;code class=&quot;highlighter-rouge&quot;&gt;2^N&lt;/code&gt; point
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, of which
no more than 15 of these (&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 15&lt;/code&gt;) will use your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements.&lt;/p&gt;

&lt;p&gt;Need to use fewer
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements?
Suppose no more than every third value required
a multiply?  Then we could do &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 3&lt;/code&gt;, and use no more than one multiply per
stage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./fftgen -f 128 -n 12 -m 12 -x 2 -p 15 -k 3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This could be very valuable when processing an audio signal, for example, that
only ever has less than one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
every thousand clock ticks.&lt;/p&gt;

&lt;p&gt;Other options of interest include &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; to generate an inverse
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; (conjugates the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;s),
&lt;code class=&quot;highlighter-rouge&quot;&gt;-2&lt;/code&gt; to generate an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
that can ingest two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock, and so on.&lt;/p&gt;

&lt;p&gt;Indeed, you can just run &lt;code class=&quot;highlighter-rouge&quot;&gt;fftgen -h&lt;/code&gt; to get a list of all of the options &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this
FFT core generator&lt;/a&gt; will support.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./fftgen -h
USAGE:	fftgen [-f &amp;lt;size&amp;gt;] [-d dir] [-c cbits] [-n nbits] [-m mxbits] [-s]
	-1	Build a normal FFT, running at one clock per complex sample, or
		(for a real FFT) at one clock per two real input samples.
	-a &amp;lt;hdrname&amp;gt;  Create a header of information describing the built-in
		parameters, useful for module-level testing with Verilator
	-c &amp;lt;cbits&amp;gt;	Causes all internal complex coefficients to be
		longer than the corresponding data bits, to help avoid
		coefficient truncation errors.  The default is 4 bits longer
		than the data bits.
	-d &amp;lt;dir&amp;gt;  Places all of the generated verilog files into &amp;lt;dir&amp;gt;.
		The default is a subdirectory of the current directory
		named fft-core.
	-f &amp;lt;size&amp;gt;  Sets the size of the FFT as the number of complex
		samples input to the transform.  (No default value, this is
		a required parameter.)
	-i	An inverse FFT, meaning that the coefficients are
		given by e^{ j 2 pi k/N n }.  The default is a forward FFT, with
		coefficients given by e^{ -j 2 pi k/N n }.
	-k #	Sets # clocks per sample, used to minimize multiplies.  Also
		sets one sample in per i_ce clock (opt -1)
	-m &amp;lt;mxbits&amp;gt;	Sets the maximum bit width that the FFT should ever
		produce.  Internal values greater than this value will be
		truncated to this value.  (The default value grows the input
		size by one bit for every two FFT stages.)
	-n &amp;lt;nbits&amp;gt;	Sets the bitwidth for values coming into the (i)FFT.
		The default is 16 bits input for each component of the two
		complex values into the FFT.
	-p &amp;lt;nmpy&amp;gt;  Sets the number of hardware multiplies (DSPs) to use, versus
		shift-add emulation.  The default is not to use any hardware
		multipliers.
	-s	Skip the final bit reversal stage.  This is useful in
		algorithms that need to apply a filter without needing to do
		bin shifting, as these algorithms can, with this option, just
		multiply by a bit reversed correlation sequence and then
		inverse FFT the (still bit reversed) result.  (You would need
		a decimation in time inverse to do this, which this program does
		not yet provide.)
	-S	Include the final bit reversal stage (default).
	-x &amp;lt;xtrabits&amp;gt;	Use this many extra bits internally, before any final
		rounding or truncation of the answer to the final number of
		bits.  The default is to use 0 extra bits internally.
$&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll admit this &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;FFT generator
project&lt;/a&gt; remains a bit of a work
in progress, there’s just so much more I’d like to do!  For example, it
currently only calculates a complex
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  There’s a
real-to-complex stage that needs to be implemented in order to do real
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s.  I’d also like
to implement a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm&quot;&gt;decimation in
time&lt;/a&gt;
algorithm, since having both will allow me to (optionally, under some
pass-through implementations) remove the &lt;a href=&quot;https://github.com/ZipCPU/dblclock/blob/master/rtl/bitreverse.html&quot;&gt;bit reversal
stage&lt;/a&gt;.
Eventually, I’d love to build a block processing
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; as well.
All of these items are on my to-do list for
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/rtl&quot;&gt;this core&lt;/a&gt;,
they just haven’t been done yet.&lt;/p&gt;

&lt;p&gt;Still, it currently works as advertised.  Care to try it?&lt;/p&gt;

&lt;h2 id=&quot;interfacing-with-the-fft-core&quot;&gt;Interfacing with the FFT Core&lt;/h2&gt;

&lt;p&gt;Once you’ve generated an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;,
it’s then time to try it out.  To do that, you’ll need to connect it up to
your design.  The generated core has a couple of basic input ports, shown
below and in Fig 3.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fftmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Basic Pipelined FFT Ports&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-ports.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;These basic ports are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt; should be self explanatory.  This core consists of synchronous logic
only, and everything is synchronous to the clock input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; is a positive edge synchronous reset signal.  If you would rather
an asynchronous reset, there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; option to generate logic using
asynchronous negative edge resets.  However, since I tend not to use them,
I haven’t tested this option much.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is a global CE signal.  It is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; on every clock where a valid
new &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
is available on the input.  It’s very useful for processing signal
that may be at a rate slower than the system clock, such as &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;we discussed
some time
ago&lt;/a&gt;.
Once &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; becomes true, one data
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
will come out of the core and be valid on every clock cycle that
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is high.&lt;/p&gt;

    &lt;p&gt;If you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-k 3&lt;/code&gt; options, you’ll need to guarantee that
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is never true twice in two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
or twice in three
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
respectively, to allow the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; a chance to compute the data.&lt;/p&gt;

    &lt;p&gt;While this breaks the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;assumptions I described earlier for the global CE
signal&lt;/a&gt;,
specifically that nothing should act if &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is false, doing so allows the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; to share multiplication elements when possible.&lt;/p&gt;

    &lt;p&gt;One final note here: if you want or need to control when the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; starts
processing, or specifically which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt; is the
first &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt; of
the frame, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; input for that purpose.  The first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt; value
where &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is true and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; is false will be the first value into
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; is actually a pair of values, both real and imaginary, stuffed
into one signal bus.  The real portion is placed in the upper bits, and the
imaginary portion is placed in the lower or least significant bits.  Both
values are in traditional twos complement format, just stuffed together into
a single input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; is the output of one &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; bin from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  It is in the exact
same format as &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;, save only that the output bit-widths used in
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; may be different from the input bit-widths used in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;If you can’t remember what bitwidths the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; was generated for, just check
the &lt;code class=&quot;highlighter-rouge&quot;&gt;IWIDTH&lt;/code&gt; (input width) and &lt;code class=&quot;highlighter-rouge&quot;&gt;OWIDTH&lt;/code&gt; (output width) local parameters in
the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftmain.v&quot;&gt;main, or toplevel, FFT core
file&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; is the last output in the port list.  This signal will be true
when &lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt; contains the first output bin coming out of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  This will be
the zero frequency bin.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; signal is provided to allow any
following logic to synchronize to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; frame structure.&lt;/p&gt;

    &lt;p&gt;The core does not produce an input synchronization signal to signal the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
of the frame.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the core is configured to handle two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock, the data ports and port names are subtly adjusted.  The new
ports are:&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left; padding: 24px&quot;&gt;&lt;caption&gt;Fig 4. Pipelined FFT Ports, two samples per clock&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-dblports.svg&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i_left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_right&lt;/code&gt; replace &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt; when/if you want an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; that processes two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock.  They have the same format as &lt;code class=&quot;highlighter-rouge&quot;&gt;i_sample&lt;/code&gt;.
The difference is that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_left&lt;/code&gt; is processed as though it came before
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_right&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o_left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_right&lt;/code&gt; are the output values that replace &lt;code class=&quot;highlighter-rouge&quot;&gt;o_result&lt;/code&gt;.
As with the two-sample per clock &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; inputs, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_right&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_left&lt;/code&gt; is the “first” output of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_right&lt;/code&gt; is the second
one.  Hence, if you include the bit reversal step then &lt;code class=&quot;highlighter-rouge&quot;&gt;o_left&lt;/code&gt; will
refer to an even output bin, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_right&lt;/code&gt; will only ever carry information
for odd output bins.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The particular core generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;fftgen&lt;/code&gt; is a
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, rather than a
block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  This means
that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is always
busy after accepting the first
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;.
Once the first &lt;code class=&quot;highlighter-rouge&quot;&gt;o_sync&lt;/code&gt; is true, then
valid data is coming out of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  On every
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
thereafter where &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; is true, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
will produce another output
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may be familiar with another
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation,
that of a block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
implementation.  In a block
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, a single block of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
would be provided to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; engine, after which
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; engine would
become busy and not accept any other
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;.  Once a
block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; finishes
processing the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
given to it, then it becomes ready for a second block.  As a
result, a block &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; may
have other external signals beyond the ones shown above.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation
I am discussing today, however, is only a straight
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipeline&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verifying-an-fft&quot;&gt;Verifying an FFT&lt;/h2&gt;

&lt;p&gt;This blog &lt;a href=&quot;/about/about.html&quot;&gt;remains dedicated&lt;/a&gt; to keeping
students out of &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;.
So, how did I make certain that &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT
implementation&lt;/a&gt; worked?&lt;/p&gt;

&lt;p&gt;Let me begin by saying that
“&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;”
gains a new meaning when working with an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;s are difficult
to understand internally, particularly because it can be difficult to validate
the data midway through.  Yes, I’ve written multiple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
implementations, both in software and now in hardware.  Yes, I’ve gone through
the mathematics.  That doesn’t mean they are simple.  Even with full access
to every internal signal within an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
they can still be a bear to debug.  Indeed, I still get surprised at the end
of this rather complex transform when signals suddenly pass through it properly.&lt;/p&gt;

&lt;p&gt;Now that I’ve said all that, it should come as no surprise that debugging the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is really a story
in itself.  Let me try telling what I can of it.&lt;/p&gt;

&lt;p&gt;When I first built the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;,
it was to support a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Positioning_System&quot;&gt;GPS&lt;/a&gt; processing
accelerator.  I had a hard time limit that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; needed to meet,
or the accelerated operation wouldn’t meet real time requirements.  I became
concerned during this process that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; wouldn’t be
fast enough, so I built an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; that could process
two &lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;samples&lt;/a&gt;
per clock.&lt;/p&gt;

&lt;p&gt;To verify this initial
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, I created &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;test
benches&lt;/a&gt;
for all of the components.  The test bench would work by running data
through each component of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  At the same time,
I would double check the output values within the C++ driver of my various
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;test benches&lt;/a&gt;.
At first, the data was carefully chosen to find specific potential flaws
within the various &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
components.  Later tests then threw random data through the component(s) to
prove their functionality.&lt;/p&gt;

&lt;p&gt;Perhaps walking through an example might help explain this.&lt;/p&gt;

&lt;h3 id=&quot;initial-butterfly-verification&quot;&gt;Initial Butterfly Verification&lt;/h3&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. A Decimation in Frequency Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-butterfly.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As an example of this initial functional verification method, let’s consider the
implementation of the butterfly shown on the right.  This should look
familiar to you, as we discussed the equation for this earlier.  It’s
known as a “radix-2” decimation in frequency &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; butterfly, and it’s a
primary component within the design.  Indeed, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is formed around
calculating this operation repeatedly.&lt;/p&gt;

&lt;p&gt;If we let&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-twiddle.png&quot; alt=&quot;W = e^{-j2pi n/N}&quot; width=&quot;145&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then we can represent this butterfly as,&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-butterfly-implementation.png&quot; alt=&quot;&quot; width=&quot;217&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;x0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;x1&lt;/code&gt; are &lt;em&gt;complex&lt;/em&gt; inputs to the butterfly, &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; is a complex
exponential constant coefficient, and &lt;code class=&quot;highlighter-rouge&quot;&gt;y0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y1&lt;/code&gt; are complex outputs.&lt;/p&gt;

&lt;p&gt;We can break this operation down further, and write&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-butterfly-real.png&quot; alt=&quot;&quot; width=&quot;347&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If this looks complicated while reading it, relax.  It’s much more complicated
in its actual implementation.&lt;/p&gt;

&lt;p&gt;There are several problems with implementing this equation that aren’t
immediately apparent from just reading it.  The least of these problems are the
four multiplies.  Because multiplication is so expensive, I used a three
multiply alternative in the actual implementation.  But I digress.&lt;/p&gt;

&lt;p&gt;Originally, the test bench would just create one line of text output per clock.
This line would include the time step, then the inputs to the module, and
finally the outputs from the module–all on the same line.  Sometimes, I’d even
place intermediate values on the line as well.  The trick to making this work
was to halt as soon as an invalid value was returned from the core, so that
value could be examined.  The disadvantage with this approach is that there
are only so many values that can fit on a line that can be reasonably
comprehended.&lt;/p&gt;

&lt;p&gt;Eventually, I enabled &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
generation as well, and then began examining output files via
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;
in addition to the textual output.&lt;/p&gt;

&lt;p&gt;To test the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly
module&lt;/a&gt;, I
provided initial inputs where all values but one were zero.  I then provided
inputs to
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;this module&lt;/a&gt;
where the coefficients were plus or minus one or plus or minus Pi.&lt;/p&gt;

&lt;p&gt;To verify the proper functionality of the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;,
I repeated the calculation within C++ inside my
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;test
bench&lt;/a&gt;.
I then judged that, if the two matched, then the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;
worked.&lt;/p&gt;

&lt;p&gt;Once I tested all of the basic inputs outlined above, I then moved on to
throwing random values at the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;
to “prove” that it worked.  In reality,
this approach never “proved” anything, but it does help to provide some
assurance.  Eventually, I modified the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;test bench&lt;/a&gt;
so that it would
completely exhaust the entire space of possibilities.  Be aware, though, such
an exhaust can send massive amounts of text to your output stream, and fill
up 42GB (or more) of &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace
files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The annoying problem with this approach to debugging is the sheer size of the
data that needs to be searched through and processed once a bug is detected.
A recent run, as an example, generated 42GB of
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD data&lt;/a&gt;.
Ouch!  That can be hard to process with
&lt;a href=&quot;http://gtkwave.sourceforge.net&quot;&gt;GTKWave&lt;/a&gt;,
and generating file size that large has been known to impact the user
response time of my computer.  I know I’ve wondered at times if my CPU needs to
be given a hard reset, or just left to continue.&lt;/p&gt;

&lt;p&gt;Still, this is a good example of how &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT
core&lt;/a&gt; was originally tested.  Indeed,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;these bench tests&lt;/a&gt;
remain within &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the repository&lt;/a&gt;.
There are test benches for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;regular
butterflies&lt;/a&gt;,
for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/hwbfly_tb.cpp&quot;&gt;hardware assisted
butterflies&lt;/a&gt;
(those using &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s),
for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/fftstage_tb.cpp&quot;&gt;basic FFT radix-2
stages&lt;/a&gt;,
the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/qtrstage_tb.cpp&quot;&gt;penultimate FFT
stage&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;final FFT
stage&lt;/a&gt;.
There’s also a test bench for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/bitreverse_tb.cpp&quot;&gt;bit reversal
stage&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/fft_tb.cpp&quot;&gt;FFT as a
whole&lt;/a&gt;.
These &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;test benches&lt;/a&gt;
still work, and they are available for inspection and test within &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the
repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;making-the-fft-general-purpose&quot;&gt;Making the FFT General Purpose&lt;/h3&gt;

&lt;p&gt;Recently, I came back to &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT core
generator&lt;/a&gt; to see if I could make turn it
into a general purpose
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, instead of one
that could only operate in a two-sample per clock mode.  Two big things
changed in this process.&lt;/p&gt;

&lt;p&gt;First, in hind sight, I realized many of the “special modules” of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
could be parameterized into a few simple Verilog modules.  For example, the
2048 point radix-2 stage was fundamentally identical to the 64-point radix-2
stage with only a few differences that could be captured by parameters.&lt;br /&gt;
Likewise, the inverse
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
code was identical to the forward
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; code, save
only that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;s
needed to be conjugated.  In the end, only the top level component and the
coefficient files truly needed the core generator approach.&lt;/p&gt;

&lt;p&gt;The second big change was that I wanted to support three versions of all of the
butterflies, both &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;the one using the soft
multiplies&lt;/a&gt;
and the one using the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hard
multiplies&lt;/a&gt;.
I needed one version of each that would handle one operation
per clock, one that would multiplex the three multiplies across two
multiplication elements, and a third implementation that would multiplex the
three multiplies across three multiplication elements.&lt;/p&gt;

&lt;p&gt;There were other minor changes as well.  For example, the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;bit reversal
stage&lt;/a&gt;
needed to be rewritten to handle one value per clock, as did the
final radix-2 stage of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.  Further, the
core components had initially been written without setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;default_nettype&lt;/code&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt;, and without using &lt;code class=&quot;highlighter-rouge&quot;&gt;verilator -Wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a result, the minor change of adding support for three types of single
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sampling_(signal_processing)&quot;&gt;sample&lt;/a&gt;
at a time streams turned into a major rewrite of the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That also meant that everything needed to be reverified.  Test benches
needed to be updated and … searching through GB of files for bugs that
might or might not show up was becoming &lt;em&gt;really&lt;/em&gt; annoying.&lt;/p&gt;

&lt;p&gt;So, I switched to using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
to verify this &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;.
Once I had proved that the simple modules of &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;the
FFT&lt;/a&gt; worked, there were only a few
modules left.  That’s when it became personal: would it be possible to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt; the
entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Hold that thought.&lt;/p&gt;

&lt;p&gt;For now, let’s walk through a quick discussion of how each section was verified.&lt;/p&gt;

&lt;h4 id=&quot;bit-reversal&quot;&gt;Bit-Reversal&lt;/h4&gt;

&lt;p&gt;The bit reversal stage works by first writing a full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; output into a piece
of block RAM memory.  When the second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; output starts
coming into &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;the bit-reversal
core&lt;/a&gt;, &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;the
core&lt;/a&gt;
then switches to writing this new
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; into a second
block RAM area.  Then as more data comes in,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;the core&lt;/a&gt;
ping-pongs between the two sections of memory.&lt;/p&gt;

&lt;p&gt;Now, at the same time the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;bit reversal
stage&lt;/a&gt;
is writing incoming data into one memory area, it is also reading out
from the other memory in a bit-reversed order.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 6. The bit-reversal stage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-bitreverse.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To formally verify the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/bitreverse.v&quot;&gt;bit reversal
stage&lt;/a&gt;,
I let the formal tool pick an
arbitrary address (and memory area) , and then applied the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;basic memory proof&lt;/a&gt;
to that address.  Further, any time a value is written into this
special address, I assert that it wasn’t full before.  When this special value
is read out of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;,
I also assert that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is outputting the
right value.  In between, I assert that the memory contains my value of
interest.  It’s the &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;same three basic properties we’ve already
discussed&lt;/a&gt;, and it worked
quite well in this context.&lt;/p&gt;

&lt;h4 id=&quot;last-stage&quot;&gt;Last-Stage&lt;/h4&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 7. The butterfly to the last stage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-laststage.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/laststage.v&quot;&gt;last
stage&lt;/a&gt;
of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; is special.
It implements the same radix-2 butterfly
as any other stage, save that 1) it operates on adjacent pairs of data and
2) the complex exponential evaluates to either plus or minus one.  That
means all the work can be done using adds and subtracts–no multiplies are
required.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-laststage.png&quot; alt=&quot;&quot; width=&quot;196&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I struggled to get this simple operation right, I groaned at having to
build another test bench.  I just wanted this thing to work and building and
maintaining all those test benches were getting painful.  Couldn’t I just
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;prove&lt;/a&gt; that &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/laststage.v&quot;&gt;my
code&lt;/a&gt;
would work first using &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;So I created a formal properties section in the laststage.v, and recorded
a copy of the data that came into the core within that section.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I could then verify that the data going out matched the known
butterfly
equations.  First, there was the output that was the sum of the two inputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_syncd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then there was the output that was their difference.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_syncd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are a couple important things to note here.  First, I didn’t use
&lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; to capture the incoming data.  &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; works great for expressing
values for one (or more) clocks ago.  The problem with this implementation
was the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; value.  Were this value always &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt;, or even always alternating
&lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; might have been useful.  However, I needed to make
certain that the formal proof properly checked whether &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; was used
properly.  That meant I had to allow the formal solver to pick when &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;
was high and when it wasn’t.  Hence, the output value, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_val = {o_r,o_i}&lt;/code&gt;
might depend upon &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(i_val,2)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(i_val,3)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$past(i_val,4)&lt;/code&gt;,
or … you get the idea.&lt;/p&gt;

&lt;p&gt;A little more logic was required to make certain I knew which of the two
values to output at any given time, &lt;code class=&quot;highlighter-rouge&quot;&gt;y0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;y1&lt;/code&gt;, but no more logic than
that was required.&lt;/p&gt;

&lt;p&gt;At this point, I started to get excited by the idea of
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verifying&lt;/a&gt;
parts and pieces of &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this FFT&lt;/a&gt;.
Assertions like this weren’t that hard, and they could be easily made.&lt;/p&gt;

&lt;p&gt;So I moved on to the next module, the &lt;code class=&quot;highlighter-rouge&quot;&gt;qtrstgae.v&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-penultimate-fft-stage&quot;&gt;The Penultimate FFT Stage&lt;/h4&gt;

&lt;p&gt;I call the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/qtrstage.v&quot;&gt;second to the last FFT stage the quarter
stage&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;qtrstage&lt;/code&gt;.  This is the stage that applies two radix-2 butterflies to pairs
within every set of four points.  There were points 0 and 2, and points 1 and 3.&lt;/p&gt;

&lt;p&gt;Like the &lt;code class=&quot;highlighter-rouge&quot;&gt;laststage&lt;/code&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/qtrstage.v&quot;&gt;this stage&lt;/a&gt;
also required only additions and subtractions
to implement the necessary multiplies required by the butterfly.  Unlike the
&lt;code class=&quot;highlighter-rouge&quot;&gt;laststage&lt;/code&gt;, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factors&lt;/a&gt;
in this penultimate stage required multiplication by &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;-j&lt;/code&gt;.
This can still be implemented with additions and subtractions–I just needed
to keep track of which values these additions and subtractions were applied to.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-qtrstage.png&quot; alt=&quot;&quot; width=&quot;258&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you expand the last equation into its complex components, you’ll see
that it truly can be represented by just additions and subtractions.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/eqn-dft-qtrstage-mpy.png&quot; alt=&quot;&quot; width=&quot;251&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For this stage, I tried the same basic proof approach as the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/laststage.v&quot;&gt;prior
stage&lt;/a&gt;.
I created the sum and difference values, and verified that these indeed
matched as they were supposed to.  This logic was no more difficult than
before.  Aside from breaking the output into its real and imaginary
portions,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_o_real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_o_imag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_o_real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_o_imag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;OWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I could then verify each of the various output real and imaginary values,
depending upon which state, &lt;code class=&quot;highlighter-rouge&quot;&gt;f_state&lt;/code&gt;, the core was in.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_syncd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_o_real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_o_imag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_piped_imag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These were the three easy proofs, &lt;code class=&quot;highlighter-rouge&quot;&gt;bitreverse&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;laststage&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;qtrstage&lt;/code&gt;.
How was I going to then prove the butterflies?  Those depended upon a
multiply, and formal tools tend to &lt;em&gt;really&lt;/em&gt; struggle with multiplies.&lt;/p&gt;

&lt;h4 id=&quot;the-hardware-assisted-butterfly&quot;&gt;The Hardware Assisted Butterfly&lt;/h4&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 8. A Decimation in Frequency Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-butterfly.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;This FFT core generator&lt;/a&gt;
uses two separate types of butterfly implementations.
The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;first&lt;/a&gt;
uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; elements
within those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;s
that have them.  The core simply makes the assumption that &lt;code class=&quot;highlighter-rouge&quot;&gt;A * B&lt;/code&gt; can
be implemented by the synthesizer in hardware.  The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;second butterfly
implementation&lt;/a&gt;
uses a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;logic
multiply&lt;/a&gt;
implementation built specifically for this core.
Each of the two butterfly implementations has its own Verilog file, so we’ll
discuss them separately.  In this section, we’ll discuss the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware assisted
butterfly&lt;/a&gt;
that uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;
elements.&lt;/p&gt;

&lt;p&gt;When I started this major update, I had a working &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware assisted butterfly
implementation&lt;/a&gt;.
In that original implementation, everything moved forward anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; was
true, and it required three hardware assisted multiplication elements
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; blocks)
to complete.&lt;/p&gt;

&lt;p&gt;However, if you are using an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; with only
90 &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s that need to
be shared between other operations (i.e. &lt;a href=&quot;/dsp/2017/09/15/fastfir.html&quot;&gt;high speed
filters&lt;/a&gt;), those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s
can become very precious.  How precious?  When I built my first asynchronous
sample rate converter, I quickly ran out of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;
elements before finishing.
Were I to use an &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
in addition to such a poor design (it’s since been fixed), I might not have
enough &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s to make
it work.&lt;/p&gt;

&lt;p&gt;So I looked again at this algorithm to see if I could spare some multiplies.
What if the signal didn’t arrive at the rate of one sample every clock?
What if I could instead insist that the incoming data was less than half that 
speed, so there would always be an idle cycle between any two clock periods
where &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; was true?  If that were the case, I could then share one
multiplication element between two of the three multiplies I needed to compute.&lt;/p&gt;

&lt;p&gt;Alternatively, what if the signal didn’t arrive at a rate of every other clock,
but would arrive no faster than every third clock?  I might then share the
hardware multiply between the three separate multiplies I needed to calculate.&lt;/p&gt;

&lt;p&gt;You can see the possibilities in Fig 9 on the right.&lt;/p&gt;
&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Multiplies per FFT stage&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-dsp-cost.png&quot; alt=&quot;541&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This required modifying my &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware butterfly
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I managed to do this without too much fanfare, and without much work I modified
my bench test and could get the hardware
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt; to pass.  I did
the same for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;regular (non-hardware assisted)
butterfly&lt;/a&gt;
as well.  The problem was that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
kept failing in practice.  It passed the component bench testing step,
but yet still failed.&lt;/p&gt;

&lt;p&gt;In frustration, I switched verification methods to
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hadn’t wanted to do this at first.  I am painfully aware that
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
really struggle to handle multiplies, and these butterfly implementations both
depended heavily upon the multiply.  How could I test an algorithm that
required multiplies, without running into this trouble?&lt;/p&gt;

&lt;p&gt;The solution for me came from the
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
concept of abstraction, something I have yet to discuss on this blog.
(It’s a part of my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
&lt;a href=&quot;/projects.html&quot;&gt;class&lt;/a&gt;,
and on my to do list for the blog.)&lt;/p&gt;

&lt;p&gt;We’ll start with the basics.  Here was the code I wanted to verify.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Third clock, pipeline = 3
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//   As desired, each of these lines infers a DSP48
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;rp_one&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1c_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rp_two&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2c_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rp_three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3c_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From processing the previous two modules, I knew how to set up a verification
test of the result: I’d copy the inputs into a memory delay line on every
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;, and then verify the result at the end given the incoming values.&lt;/p&gt;

&lt;p&gt;I also knew that the hard multiply implementation “worked”.  This was the one
using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;s.
Hence I didn’t need to verify that the multiply worked.  Any tool that
allowed me to do this was one where the multiply was supported and worked.
I was willing to trust my tools.&lt;/p&gt;

&lt;p&gt;I wasn’t willing to trust &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;my own multiplication
implementation&lt;/a&gt;–but
we’ll come back to that in a moment.&lt;/p&gt;

&lt;p&gt;So I replaced the hardware multiplies with something that was nearly equivalent,
an abstraction.  In &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/abs_mpy.v&quot;&gt;this
abstraction&lt;/a&gt;,
the results were allowed to be any value,
chosen by the tools, but meeting three criteria: 1) zero times anything is
zero, 2) one times anything preserves the initial value, 3) negative one
times anything negates the other operand, and 4) the same concept, but
applied to higher powers of two instead of just one.  &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/abs_mpy.v&quot;&gt;This
abstraction&lt;/a&gt;
isn’t really a multiply, it just maintains some of the properties of
multiplication.&lt;/p&gt;

&lt;p&gt;You can examine it here in the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/abs_mpy.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;abs_mpy.v&lt;/code&gt;
file&lt;/a&gt;
if you would like.&lt;/p&gt;

&lt;p&gt;So, I replaced my multiplies with this abstraction.  Here it is for the
highest speed case where a data value could come in at any time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pre_rp_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;pre_rp_three&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;abs_mpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;onei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1c_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;abs_mpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;twoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2c_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;abs_mpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;threei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3c_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3d_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rp_one&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rp_two&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;rp_three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rp_three&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then later, within the formal property section of the code, I allowed the
formal tool to pick what data would come into the core and what coefficient
(&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;)
would come in.  I insisted upon my rules of multiplication
with one and zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Start by double checking that our delay line is valid,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// similar to f_past_valid
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_startup_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_sr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sumrx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_si&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sumix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aux_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_dlyaux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_difrx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_difix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;f_difrx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_widecoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_widecoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_difi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_widecoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpy_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;f_widecoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I found an amazing number of bugs in this fashion.&lt;/p&gt;

&lt;p&gt;Even better, the proof completes.&lt;/p&gt;

&lt;p&gt;The only problem was, at this point in my development, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; still didn’t
work.&lt;/p&gt;

&lt;p&gt;So I kept working.&lt;/p&gt;

&lt;h4 id=&quot;the-soft-butterfly&quot;&gt;The Soft Butterfly&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; has a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;second
butterfly implementation&lt;/a&gt;,
one that uses no hardware
accelerated multiplies.  Instead, it uses a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;(rather poor) multiplication
implementation&lt;/a&gt;
in logic.  I say &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;this
implementation&lt;/a&gt;
is rather poor simply because I haven’t yet optimized it, and because I know
that &lt;a href=&quot;https://github.com/ZipCPU/fwmpy&quot;&gt;better implementations&lt;/a&gt; exist.
In my case, I wanted a single multiplication implementation that could be
parameterized and yet apply to all bit-widths.  Worse, that implementation
needs to know what its own processing delay is.  My bare-bones,
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;basic implementation&lt;/a&gt;
does all of the above, it just could be better.  &lt;a href=&quot;https://github.com/ZipCPU/fwmpy&quot;&gt;My own optimmized
multiplication implementations&lt;/a&gt; doesn’t meet
this criteria.&lt;/p&gt;

&lt;p&gt;In the story of this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
development, it was this part of the implementation
that was most problematic for me.  I didn’t dare replace the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;hand-built
multiply&lt;/a&gt;
within it with some abstraction, primarily because I didn’t trust it: I was
always concerned there was a latent bug within the multiply.  For
example, what if I didn’t get the delay right?&lt;/p&gt;

&lt;p&gt;This was also the stage that was responsible for several bugs that were a pain
to chase down.&lt;/p&gt;

&lt;p&gt;I ran &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/tree/master/bench/cpp&quot;&gt;bench tests&lt;/a&gt;
on this stage in all three modes: continuous &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;s,
one clock between &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;s, and two clocks between &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt;s.  When the design
failed, I adjusted each of these three elements to randomly include another
clock step with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; false.  The tests would pass, and the design would fail.&lt;/p&gt;

&lt;p&gt;The bug, as it turns out, was quite subtle.&lt;/p&gt;

&lt;p&gt;Because the delay within my &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;hand-made
soft-multiply&lt;/a&gt;
was dependent upon the bit width, and because this was captured by
a parameter, and because the way I set up my
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
tests only one parameter set was getting tested despite multiple parameters
(and hence multiply delays) being used by the full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/butterfly_tb.cpp&quot;&gt;bench test&lt;/a&gt;
might pass for one set of multiplication bit-widths
and fail for the set that wasn’t bench tested.&lt;/p&gt;

&lt;p&gt;I didn’t find this bug until I started using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;,
although technically my
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
approach suffers from the same problem of only testing some multiplication
bit-widths.&lt;/p&gt;

&lt;p&gt;For this &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;soft
butterfly&lt;/a&gt;,
I call it &lt;code class=&quot;highlighter-rouge&quot;&gt;butterfly.v&lt;/code&gt;, I created the same basic
properties I had been using for the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/hwbfly.v&quot;&gt;hardware assisted
butterfly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To my immense relief, &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;this
butterfly&lt;/a&gt;
 failed to pass
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
(initially).  Indeed, it failed very quickly.  Why was this to my relief?
Because I had been struggling to find the bug.  It turns out, the bug was
associated with the remainder of the multiplication delay divided by two
or three–depending upon the mode.  A subtly different timing implementation
was required for each remainder, and I found that by using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, I could’ve found this using my test bench as well.  I just had two problems
when using it: First, I didn’t trust that it would try the right input
combination to trigger the bug.  Second, I was getting really tired of working
through GB &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I know what the problem was, the proof requires proving the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; for multiple
different potential parameter sets.
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; handles this nicely
using tasks–something I haven’t discussed much on the blog.  You can see the
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/formal/butterfly.sby&quot;&gt;script I used here&lt;/a&gt;,
which includes the multiple task definitions if you are interested.&lt;/p&gt;

&lt;p&gt;My problem with this proof is that while it quickly found my bugs in minutes,
it struggled to prove that there are no bugs.  By “struggled” I mean the took
multiple days–so long that I never let it finish.&lt;/p&gt;

&lt;p&gt;So I dug back into the proof.  I set up criteria within every stage of the
multiply to guide the proof: if multiplying by zero, the result in the middle
should be zero, if by one, etc.  I could then verify that the multiply
would truly return zero on a zero input, or return the same value on a one
input.&lt;/p&gt;

&lt;p&gt;This still took forever.&lt;/p&gt;

&lt;p&gt;The difficulty of this proof is also why this article took so long to write.
I had the essential proofs working early on, but this one proof just seemed
to take forever.&lt;/p&gt;

&lt;p&gt;Part of the issue here is, how long are you willing to wait for a proof to
return?  I personally want my proofs to all return within about fifteen minutes.
I’ll tolerate two to three hours, but not without grumping about it.  However,
this proof was taking over 72 hrs+ before I’d kill it.  This is unacceptable.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 10. Butterfly RTL components&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-butterfly-hierarchy.svg&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To understand the problem, consider Fig. 10.  I had verified the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;long binary
multiply implementation, &lt;code class=&quot;highlighter-rouge&quot;&gt;longbimpy&lt;/code&gt;&lt;/a&gt;.
I just wanted to prove some simple properties about the result, based upon the
initial values given to the
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/butterfly.v&quot;&gt;butterfly&lt;/a&gt;.
I wanted to verify that my estimate of the number of clocks
required by the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;long binary
multiply&lt;/a&gt;
 matched the length of my FIFO.  I wanted
to verify that the coefficients and inputs still matched the outputs, and that
one coefficient wasn’t getting confused with another piece of data.&lt;/p&gt;

&lt;p&gt;To do this, I insisted that a zero coefficient must result in a zero result.
A one coefficient must duplicate the data, and vice versa for the data.  These
are bare simple multiplication properties, but though they are simplistic
they are sufficient for verifying if the right inputs are given to the
multiplies, and if the matching results are drawn from them.&lt;/p&gt;

&lt;p&gt;After about two weeks of running 48+ hrs proofs that I’d never allow to
complete, I finally figured out how to bring the solution time down to
something more reasonable.  The trick?  Asserting that the inputs to the
multiply matched the butterflies copy of what those inputs were.  This last
assertion connected the proofs taking place within the multiply, with the
proofs that were about to take place on the multiply’s outputs.&lt;/p&gt;

&lt;p&gt;This necessitated a change to the portlist of the multiply, a change that
only needs to be made for the formal proof and not otherwise.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;longbimpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_a_unsorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_b_unsorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_r&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FORMAL&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_a_unsorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_past_b_unsorted&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;`endif&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;unsorted&lt;/code&gt; post-fix above references the number of bits in the values &lt;code class=&quot;highlighter-rouge&quot;&gt;i_a&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_b&lt;/code&gt;.  The algorithm internally sorts these two values so that the values
with the most bits is in &lt;code class=&quot;highlighter-rouge&quot;&gt;i_b&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;*_unsorted&lt;/code&gt; values just describe the
values before the bitwidth sort.&lt;/p&gt;

&lt;p&gt;Then, internal to the butterfly itself, I assert that the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_a_unsorted&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_b_unsorted&lt;/code&gt; values match the ones within the module.  There’s a
bit of unwinding that needs to take effect, though, since the those values can
refer to any of the multiplies inputs depending upon the time step.  That
places these values into &lt;code class=&quot;highlighter-rouge&quot;&gt;fp_*_ic&lt;/code&gt; for the coefficient and &lt;code class=&quot;highlighter-rouge&quot;&gt;fp_*_id&lt;/code&gt; for
the data.&lt;/p&gt;

&lt;p&gt;The last step is to verify these two values match, for all three of the
multiplication input sets.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_startup_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_one_ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_dlycoeff_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_two_ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;f_dlycoeff_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_one_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_two_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_predifi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_three_ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_p3c_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp_three_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_p3d_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That assertion was sufficient to bring the proof time down from days to hours.&lt;/p&gt;

&lt;p&gt;I can handle hours.  I can’t handle days.&lt;/p&gt;

&lt;h4 id=&quot;full-fft-stages&quot;&gt;Full FFT Stages&lt;/h4&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 11. A Decimation in Frequency Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-fftstage.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Because the butterflies were so hard to prove, I hadn’t spend much time
trying to formally verify the separate &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; stages.  I had just tested and
verified that these worked using the traditional bench testing method–using
carefully chosen and random inputs.&lt;/p&gt;

&lt;p&gt;Then, later, I got to thinking: this FFT implementation is &lt;em&gt;so&lt;/em&gt; close to having
a full formal verification proof, why not just add this last piece to the
set?  So I dug into the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; stage component.&lt;/p&gt;

&lt;p&gt;In the language of this core generator, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; stage is that portion of the
core that accepts inputs and feeds a single radix-2 butterfly.  This
means, for an &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;-point FFT stage, the core needs to read &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; values into
memory, and then apply these values, the next &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; input values, and a stored
ROM coefficient to the butterfly core.  This butterfly core will return a pair
of values some number of clocks later.  The data then need to be separated
again.  One output value from the butterfly needs to go immediately to the
output, the other value must go into memory.  Once &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; values are output,
the butterfly becomes idle and the stored &lt;code class=&quot;highlighter-rouge&quot;&gt;N/2&lt;/code&gt; values can be returned.&lt;/p&gt;

&lt;p&gt;Could this piece be &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Yes, it can.  To do this, though, I replaced the butterfly implementation
with a similar abstract implementation–like I had with the hardware multiply
when verifying the &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block#Hard_blocks&quot;&gt;DSP&lt;/a&gt;-enabled butterflies.
This abstract butterfly implementation returned arbitrary values selected by
the formal engine.  It also had a multiplication delay within it that would
be chosen by the formal engine, so that one proof could be made independent
of the final butterfly implementation and multiplier delay.&lt;/p&gt;

&lt;p&gt;Once done, the basic proof simply followed the &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;three basic memory
properties&lt;/a&gt;.
That is, I allowed the formal engine to pick an arbitrary address to the input
to the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftstage.v&quot;&gt;FFT
stage&lt;/a&gt;,
and then created a property to describe the inputs to the butterfly
on the clock of this address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyconst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IWIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;f_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any time the first value
to the butterfly showed up and got placed into memory, I’d capture that
value and assert that it remained in memory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I did the same on the second piece of data to enter the core.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;f_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then asserted that these values would be sent to the butterfly one
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_ce&lt;/code&gt; later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ib_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ib_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ib_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGSPAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you notice how I checked that the coefficient, &lt;code class=&quot;highlighter-rouge&quot;&gt;ib_c&lt;/code&gt;, matched the ROM
memory, &lt;code class=&quot;highlighter-rouge&quot;&gt;cmem&lt;/code&gt;, for this value?  This is all the proof required for the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then used roughly the &lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;same set of properties
properties&lt;/a&gt;
on the other side of the butterfly.&lt;/p&gt;

&lt;p&gt;While I’d like to say that formally verifying this
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftstage.v&quot;&gt;FFT stage&lt;/a&gt;
helped me find some latent bug, that wasn’t the case this time.  Once
I debugged the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
properties, this part of the core “just worked.”&lt;/p&gt;

&lt;p&gt;The only thing was, I noticed that the block RAM read on the output path
wasn’t optimized for all block RAM implementations.  (Some internal RAM
reads require the result be registered.)  Because of the
formal properties, when I changed this implementation to something
more portable and better, I could make this change with confidence.&lt;/p&gt;

&lt;h4 id=&quot;how-much-was-verified&quot;&gt;How much was verified?&lt;/h4&gt;

&lt;p&gt;I like to say that I have formally verified the entire FFT.  You might even
hear me boasting of this.  This isn’t quite true.  I only verified &lt;em&gt;most&lt;/em&gt;
of the FFT.  (Queue the Princess Bride “mostly
dead quote here …)  I didn’t formally verify that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Twiddle_factor&quot;&gt;twiddle factors&lt;/a&gt;
were right, that the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;soft multiply
worked&lt;/a&gt;,
or that the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftmain.v&quot;&gt;top
level&lt;/a&gt; was
properly wired together.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 12. Proven components of the Butterfly&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/fft-proven.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To see how much was
formally verified, consider Fig 12 on the left.  Everything
but the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;long binary multiply,
&lt;code class=&quot;highlighter-rouge&quot;&gt;longbimpy&lt;/code&gt;&lt;/a&gt;,
and the &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/fftmain.v&quot;&gt;toplevel,
&lt;code class=&quot;highlighter-rouge&quot;&gt;fftmain&lt;/code&gt;&lt;/a&gt;,
has been &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verified&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also only verified the components for particular parameter settings, not
necessarily the settings used within the generated design.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/rtl/longbimpy.v&quot;&gt;soft binary multiply,
longbimpy&lt;/a&gt;,
was &lt;em&gt;functionally&lt;/em&gt; verified (i.e. verified by &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft/blob/master/bench/cpp/mpy_tb.v&quot;&gt;test
bench&lt;/a&gt;),
in an exhaustive sense.  By that I mean that for a particular number of
coefficient bits, I tested every single multiply input looking for
problems.  While this may be overkill,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
was fast enough to do this in less than a minute.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Does your design need an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;?
Please consider
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core generator&lt;/a&gt;
for that purpose.  Using
&lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this core generator&lt;/a&gt;,
you can create roughly any
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipelined&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; implementation.
Even better, because the core is completely open source, you can use this
implementation within a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
simulation in a way you’d never be able to do with a proprietary
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; core generator.&lt;/p&gt;

&lt;p&gt;The second point I’d like to draw from this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt; discussion is that,
yes,
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
is up to an industrial formal verification task.  It can be applied to very
complex designs (no pun intended), piece by piece, just like we did with &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;this
FFT core generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also note that we didn’t formally verify
the entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
at once.  Neither did we formally verify that known input test vectors would
produce known output vectors.  If we did our job right, this will be a
consequence.  Somehow I just still didn’t trust the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
until running known data signals through it.  Hence, I still used
simulation to ultimately verify that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;
as a whole was working.&lt;/p&gt;

&lt;p&gt;Finally, if you’ve checked out my &lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;FFT-Demo&lt;/a&gt;
at all, you’ll see that an entire design using both co-simulated A/D,
&lt;a href=&quot;https://github.com/ZipCPU/fftdemo/blob/master/rtl/subfildown.v&quot;&gt;downsampling
filter&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Fourier_transform&quot;&gt;FFT&lt;/a&gt;, and
VGA output can all be simulated together.  In that case, all of the
components have been verified, but the full simulation of the entire
design is still very valuable.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;He that withholdeth corn, the people shall curse him: but blessing shall be upon the head of him that selleth it. (Prov 11:26)&lt;/em&gt;</description>
        <pubDate>Tue, 02 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/dsp/2018/10/02/fft.html</link>
        <guid isPermaLink="true">https://zipcpu.com/dsp/2018/10/02/fft.html</guid>
        
        
        <category>dsp</category>
        
      </item>
    
      <item>
        <title>It&#39;s time for ORCONF 2018!</title>
        <description>&lt;p&gt;It’s time again for &lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt;!  For those who are not
familiar with &lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt;, I like to think of it as the
premier conference discussing &lt;a href=&quot;https://fossi-foundation.org&quot;&gt;Free and Open Source Silicon
(FOSSI)&lt;/a&gt;.  You can read more about the
&lt;a href=&quot;https://orconf.org&quot;&gt;conference here&lt;/a&gt;, or even read the &lt;a href=&quot;https://orconf.org/#presentations&quot;&gt;abstracts of the
presentations here&lt;/a&gt;,
although this latter link is likely to go stale before ORCONF-2019.
&lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt; tends to be a small conference, and nothing like
the giant IEEE conferences I’ve been to in the past.  I see this as a good
thing, because it means I will actually have a chance to meet and say hello
to everyone there.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/verilator_256_200_min.png&quot; alt=&quot;&quot; width=&quot;256&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This year, among the many wonderful presentations that I lined up, I am
especially looking forward to &lt;a href=&quot;https://www.veripool.org/users/3&quot;&gt;Wilson
Snyder&lt;/a&gt;’s presentation on a multithreaded
version of &lt;a href=&quot;https://www.veripool.org/projects/verilator/wiki/Intro&quot;&gt;Verilator&lt;/a&gt;.
That could really transform my simulations!&lt;/p&gt;

&lt;p&gt;Here’s his abstract:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; 4.0 - Open Simulation Goes Multithreaded&lt;/p&gt;

  &lt;p&gt;The primary author of
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;, the open source
high-speed Verilog simulator, announces fresh for this meeting
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; 4.0 with
multithreading, and how you can get your designs the fast(est),
free simulation.&lt;/p&gt;

  &lt;p&gt;Presented by &lt;a href=&quot;https://www.veripool.org/users/3&quot;&gt;Wilson Snyder&lt;/a&gt;, one of the
primary authors of Verilator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/orconf-2018-title.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I will also be presenting this year, as I have the last two.  My title is:
Lessons learned while formally verifying the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; is a three-year old CPU
and &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;ISA&lt;/a&gt; designed for
low logic FPGA’s.  One of the challenges of any CPU design, to include the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, is coming up with a
sufficiently robust test suite to exercise all of the possible logic flows
within &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.html&quot;&gt;the CPU&lt;/a&gt;.  While &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; can be used
for this task, they are traditionally viewed as too computationally
expensive to formally verify something as complex as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;Contrary to this view, the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
has now been formally verified using
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;.  As a result,
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;many bugs have been found and
fixed&lt;/a&gt;-bugs not
found previously using &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;canned test
cases&lt;/a&gt;.  Not only
that, it has also &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;become easier to
modify&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;the core
CPU&lt;/a&gt; as
necessary to achieve lower logic utilization, knowing that the solver will
find any bugs in the updated implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you haven’t chosen to join us at &lt;a href=&quot;https://orconf.org&quot;&gt;ORCONF&lt;/a&gt;, then rest
assured the staff are really good at posting the various presentations later.
I will also post a copy of my slides on GitHub and link to them here, &lt;a href=&quot;/blog/2017/09/12/orconf-2017-return-home.html&quot;&gt;as I
did last year&lt;/a&gt;.
This is a small consolation, though, for missing the richness of actually
meeting and discussing digital design topics with the likes of those who
will be attending, or the opportunity to ask questions of the speakers.&lt;/p&gt;

&lt;p&gt;On the other hand, if you will be joining us, then please take a moment to
introduce yourself!  I’d love to have the opportunity to meet those who
have encouraged me over the last couple of years.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Making request, if by any means now at length I might have a prosperous journey by the will of God to come unto you.  (Rom 1:10)&lt;/em&gt;</description>
        <pubDate>Tue, 18 Sep 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/09/18/orconf-2018.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/09/18/orconf-2018.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>My design works in simulation, but not in hardware.  Can formal methods help me?</title>
        <description>&lt;p&gt;It’s not uncommon in &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design to have a design that “works in simulation”, but fails the ultimate test
in hardware.  I might argue that within
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
designs, this is almost cliche.  While I’d like to blame the problem on
poor test design, it can also happen with &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; if you haven’t
fully verified your design.&lt;/p&gt;

&lt;p&gt;Since this happens more often that I’d like to admit, let’s ask the question
of whether or not &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; can help find a bug
within an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design that is built, complete, loaded onto a piece of hardware, and yet
doesn’t work.&lt;/p&gt;

&lt;p&gt;The immediate answer shouldn’t surprise anyone: It depends.  Sometimes
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
can help, sometimes they can’t.&lt;/p&gt;

&lt;p&gt;For example, if you look through my &lt;a href=&quot;/blog/2018/08/04/sim-mismatch.html&quot;&gt;list of reasons why a design might
pass simulation, but still fail in
hardware&lt;/a&gt;, you’ll
see several situations where &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; aren’t going to
help much.  A classic example would be “timing problems.”  While &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; can help
when you are crossing clock domains, they can’t do as much to help when logic
within your implemented design can’t make it from one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;FF&lt;/a&gt; to the next
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;FF&lt;/a&gt;
within a single clock period.  In a similar manner, &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; aren’t going to help
when you haven’t handled your I/O timing well.&lt;/p&gt;

&lt;p&gt;Where &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt; &lt;em&gt;can&lt;/em&gt;
help is in eliminating possible causes of problems.&lt;/p&gt;

&lt;p&gt;For example, I recently tried to run my &lt;a href=&quot;https://github.com/ZipCPU/tttt&quot;&gt;4x4x4 Tic-Tac-Toe
game&lt;/a&gt; on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
within an &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;.
Much to my dismay, &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;my design&lt;/a&gt; didn’t load
onto the board properly.  Digging deeper, I discovered that read and write
requests of the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/README.md&quot;&gt;debugging
bus&lt;/a&gt;
were missing their acknowledgments.  I struggled to figure out what was going
on.  Where should I even look for the problem?&lt;/p&gt;

&lt;p&gt;In this example, &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; were able to
help me.  Let me outline three ways in which &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; can help in such
a case, and then tell you what I found.  Using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;, you can …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build a better test bench&lt;/p&gt;

    &lt;p&gt;One of the reasons why I got involved in &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; in the first
place was because my test bench authoring methods were just too poor to be
complete.  I’ve since replaced my individual test benches with proofs using
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;.  These
tend to be of a higher quality, and they tend to find more bugs.&lt;/p&gt;

    &lt;p&gt;While saying you should build a better bench test is sort of like saying
you should’ve built in right in the first place, it can help to go back
and thoroughly examine a component that you think might have faults within
it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Cover” the problem&lt;/p&gt;

    &lt;p&gt;Once you see a problem in your logic within hardware, sometimes it helps
to &lt;code class=&quot;highlighter-rouge&quot;&gt;cover&lt;/code&gt; the situation.  In this case, you would pick a component, and
describe within that component a situation that you think is happening
in hardware.  If you then &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; that situation, you can then get a trace
showing how your design might get into that situation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assert the problem will never happen&lt;/p&gt;

    &lt;p&gt;Alternatively, if the state the design gets into is an “illegal state”
that it should never get into, then it might help to &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; that it
should never happen.  For example, if your design outputs values one and
three but skips the second value, then you can make an assertion that it
will never skip values and see if you can formally prove that assertion.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the case I outlined above, I had a two sides of an interface I was working
with.  To illustrate, consider Fig 1 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1: ICO Board Parallel Port bug&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ico-pport-bug.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One side of this interface had my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
logic on it, and the other side contained
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/netpport.cpp&quot;&gt;software&lt;/a&gt;
on a &lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;.  By inspection, I could see
that data was getting dropped in the interface.  But which side was at fault?&lt;/p&gt;

&lt;p&gt;Perhaps you might remember the module of interest on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;: it was the
same &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/README.md&quot;&gt;debugging bus
core&lt;/a&gt; we built here
on the blog before I discovered &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;.  Since
it had never been
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt;, I
&lt;em&gt;suspected&lt;/em&gt; a fault within it.&lt;/p&gt;

&lt;p&gt;If you remember the
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/README.md&quot;&gt;design&lt;/a&gt;
from when we built it, the return data path following the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbexec.v&quot;&gt;bus
request&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/rtl/hbbus.v&quot;&gt;consisted of a series of separate
stages&lt;/a&gt;, each
with back pressure.  In other words,
each stage was given a stall signal from the next stage, and generated a stall
signal for the prior stage.  Similarly, each stage created a data valid
signal I called a “strobe”.  Together with this data valid signal was data
that should be output from the stage.
I’ve written about this &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipelining strategy
before&lt;/a&gt;,
calling it the &lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;“travelling CE”
strategy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was one obvious place where data might be lost.&lt;/p&gt;

&lt;p&gt;I simply wanted to verify that no data would ever be lost in the pipeline.&lt;/p&gt;

&lt;p&gt;Therefore I went through all of the stages within the interface, and added
an assertion between the various stages: if the current stage was producing a
valid output but the next stage was busy, then the same data should still be
valid on the next clock.  No changes were allowed, and data was not allowed
to be dropped.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this assertion didn’t pass at first.  When I dug further, I found
some race conditions within my code.  I also found a couple of cases where a
value would be created by one of the stages, but yet it was designed to be
pre-empted should a newer value show up.  So I spent a bit of time to &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/hexbus/&quot;&gt;clean
up the code and my
properties&lt;/a&gt;,
and eventually it passed &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;forma
 verification&lt;/a&gt; through
and through.&lt;/p&gt;

&lt;p&gt;The only problem was this interface still didn’t work, and hence I still
couldn’t play &lt;a href=&quot;https://github.com/ZipCPU/tttt&quot;&gt;4x4x4 tic-tac-toe&lt;/a&gt;
using the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;icoboard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, though, I now knew that my
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/blob/master/hexbus/README.md&quot;&gt;debugging bus&lt;/a&gt;
would &lt;em&gt;NEVER&lt;/em&gt; skip data words.&lt;/p&gt;

&lt;p&gt;That meant the problem had to lie within the
&lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/netpport.cpp&quot;&gt;code&lt;/a&gt;.
Sure enough, I found something similar to the following logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;data_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_ITERATIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Process the data
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Read the next data
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;data_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was supposed to read the data from my device and process it.  To keep the
routine from hanging, it would only repeat the loop &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_ITERATIONS&lt;/code&gt; times.&lt;/p&gt;

&lt;p&gt;See the bug?&lt;/p&gt;

&lt;p&gt;And to think, I was chasing this all over my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
design wondering what was going wrong.  Once I
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verified&lt;/a&gt; through
the relevant portions of my
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; code, I
was able to stop chasing phantoms and move quickly to the real problem.&lt;/p&gt;

&lt;p&gt;My point is here is simply this: &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt; can still help–even
when the design is already implemented in (and failing in) hardware.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Howbeit this kind goeth not out but by prayer and fasting. (Matt 17:21)&lt;/em&gt;</description>
        <pubDate>Sat, 08 Sep 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2018/09/08/hw-failure.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/09/08/hw-failure.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
      <item>
        <title>Handling multiple clocks with Verilator</title>
        <description>&lt;p&gt;For some reason, every time I’ve ever worked with video I’ve never managed to
be fortunate enough to have the same clock rate for both the pixel clock
and the memory.  The closest I came was using a 25MHz pixel clock on the
&lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users&quot;&gt;Basys3 board&lt;/a&gt;
which I could create by dividing a &lt;a href=&quot;https://reference.digilentinc.com/reference/programmable-logic/basys-3/reference-manual&quot;&gt;100MHz clock by
four&lt;/a&gt;
in logic.  While that probably wasn’t the best way to do it, I did manage to
successfully create a 640x480 image on my test display.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. A Nexys Video Board&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/nexys-video.png&quot; alt=&quot;&quot; width=&quot;473&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When I moved on to the more serious pixel clock of 148.5 MHz in my
&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip project&lt;/a&gt; using the
&lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video board&lt;/a&gt;,
I could no longer manipulate my 100MHz system clock in logic to generate a
148.5MHz pixel clock.  &lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;’s DDR3 memory
controller insisted on a clock of 100MHz, so I was stuck needing to deal with
two dissimilar clocks.&lt;/p&gt;

&lt;p&gt;Up until &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;that project&lt;/a&gt;, I had never
used more than one clock with
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;.
Many of my designs were based upon just a single clock.  How was I going to
handle multiple clocks?  This turned into one of the biggest
challenges I had when developing &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip&lt;/a&gt;.
(&lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip&lt;/a&gt; remains a work in progress.)&lt;/p&gt;

&lt;p&gt;The pixel clock on the &lt;a href=&quot;https://store.digilentinc.com/nexys-video-artix-7-fpga-trainer-board-for-multimedia-applications&quot;&gt;Nexys Video
board&lt;/a&gt;
isn’t the only problem for &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip&lt;/a&gt;.
The Gb &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet&lt;/a&gt; port (&lt;a href=&quot;https://en.wikipedia.org/wiki/Media-independent_interface&quot;&gt;RGMII&lt;/a&gt;) wants to run at 125 MHz, reasoning about 8-bits at a time.  If this weren’t bad enough, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/I2S&quot;&gt;I2S&lt;/a&gt;
audio interface wants an outgoing clock rate near 49.152 MHz.  While logical
and ugly kludges to this problem exist (which I may yet write about), the
appropriate way to deal with this is to use a PLL or digital clock manager to
generate these dissimilar clocks.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2: Multiple Clocking Needs&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tbclock-nexys.svg&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The unfortunate consequence was that I needed a multiple clock simulation
capability.  Ouch.&lt;/p&gt;

&lt;p&gt;The solution I eventually chose crosses multiple project boundaries,
but it is worthwhile enough that I’ll share it here.  It involves not only
modifying my prior &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator test bench
wrapper&lt;/a&gt;,
but also a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;test-bench clock helper
class&lt;/a&gt;.
While the updated test bench wrapper can be created manually, I’ll show you
in the end how to use
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;
to tie each piece together into your design.&lt;/p&gt;

&lt;h2 id=&quot;reasoning-about-clocks&quot;&gt;Reasoning about clocks&lt;/h2&gt;

&lt;p&gt;If you remember
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;how I use&lt;/a&gt;
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;,
you’ll remember that I like to wrap a
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilated&lt;/a&gt;
design in a test bench class I call
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;.
Among other things, this &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;test bench
class&lt;/a&gt;
has an &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method that I
can call any time I want the clock within my design to tick once.
In my &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt; enabled projects, this
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;
class is created via &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;AutoFPGA&lt;/a&gt;.  The class also
has some nice capabilities for opening and closing
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace files&lt;/a&gt;–but
those are not a part of today’s story.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; works by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Leaving the clock at zero and dumping the design state to a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt; (if so enabled).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting the clock to one, and dumping the design state to a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt; again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting the clock back to zero, and dumping the design state again.&lt;/p&gt;

    &lt;p&gt;This time, though, the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD trace&lt;/a&gt;
is flushed to disk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The module is then allowed to read any inputs that may have changed,
and adjust any outputs that may need to be changed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Return to step one and repeat until the simulation is done.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This works great for synchronous designs with only one clock.  Using this
method I can not only test my own design, but also incorporate
&lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulation&lt;/a&gt;
tests: Serial port, I2C, video, you name it, all of that can fit in this
context.&lt;/p&gt;

&lt;p&gt;The problem is that this &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method works great for designs with only
one clock, but it is entirely insufficient when dealing with multiple clocks.
It’s not that &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
is somehow insufficient.  It’s not.
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; can handle multiple clocks
easily–as long as you can properly drive them.
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;’s
interface requires the caller to generate inputs at whatever rate they wish
to do so.  This was what I needed to do.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 3: TBCLOCK enabled Verilator simulation structure&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tbclock-sim-structure.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My first step was to create a class to describe a clock to my test bench.
I call this class
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;,
or “test bench clock”.  Its purpose is primarily to help me reason about time,
and about one specific clock.  To understand the next step, let’s first take a
moment to understand &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;this
class&lt;/a&gt;
and its methods.  We can then look at how 
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
can help us adjust our
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;
with multi-clock aware information.&lt;/p&gt;

&lt;h2 id=&quot;tbclock&quot;&gt;TBCLOCK&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
has four basic methods: &lt;code class=&quot;highlighter-rouge&quot;&gt;time_to_edge&lt;/code&gt;, returning the number of picoseconds to
the next clock edge, &lt;code class=&quot;highlighter-rouge&quot;&gt;advance&lt;/code&gt;, which advances the clock by some number of
picoseconds, and &lt;code class=&quot;highlighter-rouge&quot;&gt;rising_edge&lt;/code&gt; which can be used to tell if the clock is
currently on its rising edge.  The fourth method, &lt;code class=&quot;highlighter-rouge&quot;&gt;falling_edge&lt;/code&gt; is identical
to &lt;code class=&quot;highlighter-rouge&quot;&gt;rising_edge&lt;/code&gt;, but for falling edge clocks.&lt;/p&gt;

&lt;p&gt;Put together, these three methods work like this: the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;
object queries the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
objects to determine the amount of time to skip forward to get to the next
clock edge.  This looks sort of like
Fig 4 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: Time to next clock edge&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tbclock-basic.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
compares the current time to when the next edge will take place, and returns
that amount of time in picoseconds.  (Why picoseconds?  It was an arbitrary
decision based upon the reality that nanoseconds wasn’t enough for the
application(s) shown above, and femptoseconds were overkill.)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;
enhanced logic then advances all of the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
objects to the time of this next edge, adjusts the clock input(s) and calls
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt; function to update any logic dependent upon that clock.&lt;/p&gt;

&lt;p&gt;When viewed across three separate clocks, the result might look like Fig 5.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 5: Multiple clocks&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tbclock-advance.svg&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can see the resulting step sizes as events in the bottom trace in Fig 5.
As a result, &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
doesn’t step forward uniformly by the minimum common denominator of all clock
steps, but rather in a non-uniform fashion–so that it is only ever called to
evaluate logic following a clock edge.&lt;/p&gt;

&lt;p&gt;Creating a 
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
is fairly straight forward.  Or, rather, it should be.  I got it wrong many
times over while just trying to get the basics below right.  To create an
object of this class, just declare one with the number of picoseconds
per clock tick.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;TBCLOCK&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ....
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TBCLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ....
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The initialization routine uses &lt;code class=&quot;highlighter-rouge&quot;&gt;increment_ps&lt;/code&gt; to create an internal stepping
interval &lt;code class=&quot;highlighter-rouge&quot;&gt;m_increment_ps&lt;/code&gt; which is half of the original &lt;code class=&quot;highlighter-rouge&quot;&gt;increment_ps&lt;/code&gt;.  This
allows the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
object to reason about both positive and negative edge going clocks.&lt;/p&gt;

&lt;p&gt;The next capability the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;test bench
clock&lt;/a&gt;
offers is the ability to return the number of picoseconds until the next clock
tick.  This was what Fig 4 was showing above.  We’ll use this in the next
section in our inner clock loop.  The
next clock edge will come &lt;code class=&quot;highlighter-rouge&quot;&gt;m_increment_ps&lt;/code&gt; picoseconds after the last clock
edge.  If you subtract this future time from the current time, you’ll get a
value of how many picoseconds remain until the next clock edge.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_increment_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Next edge is a negative edge
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_increment_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if (m_last_posedge_ps + 2*m_increment_ps &amp;gt; m_now_ps)
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// Next edge is a positive edge
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_increment_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the clock generator has been queried for the time to the next edge, the
test-bench driver can then determine which clock edge comes next.
From here, each clock can be advanced until that next edge.  That’s the purpose
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;advance()&lt;/code&gt; function: given a step size (in ps), advance the global
clock time maintained within this &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;test bench support
clock&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, not quite.  &lt;code class=&quot;highlighter-rouge&quot;&gt;advance()&lt;/code&gt; has one other purpose.  It also returns the value
of the clock, either &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, at this new time instant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;advance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_increment_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Advance to the next positive edge, and return
&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// a positive valued clock
&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_increment_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_ticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_increment_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Negative half of the clock&#39;s duty cycle
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Positive half of the clock&#39;s duty cycle
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the next section, we’ll use the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;advance()&lt;/code&gt; to set the
clock input value to the main Verilog &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;test
bench function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two other helper functions to determine if the current time is a
rising or a falling edge, but that’s the basics of the first part.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Return true if this is a rising clock edge
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;rising_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Return true if this is a falling clock edge
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;falling_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_now_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_last_posedge_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_increment_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The primary work in this class is done within the &lt;code class=&quot;highlighter-rouge&quot;&gt;time_to_edge&lt;/code&gt; method.
We’ll see how this helps in the next section.&lt;/p&gt;

&lt;h2 id=&quot;updating-the-inner-testbench-class-testb&quot;&gt;Updating the inner testbench class, TESTB&lt;/h2&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
class we discussed above is only a &lt;em&gt;helper&lt;/em&gt; in the scheme of things.  Most of
the actual logic takes place within the updated &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; function found within
the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;test bench object,
TESTB&lt;/a&gt;,
used to drive the &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; inputs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;As you may
recall&lt;/a&gt;,
I started creating a &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;test bench class
wrapper&lt;/a&gt;
once I noticed that I kept using the same code for every
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
based test bench.  The code to open a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace file&lt;/a&gt;
was the same.  The code to capture data to that
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace file&lt;/a&gt;
was the same.  The &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;code to toggle the
clock&lt;/a&gt;
was the same.  I found myself copying these pieces of code from one simulation
wrapper to another.  Rather than just duplicate the same code,
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;I created&lt;/a&gt; the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;test bench
wrapper&lt;/a&gt;
class,
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the primary functions of the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;test bench
wrapper&lt;/a&gt;
object is to advance the clock.
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
requires that the clock toggle from low to high in order to call the
positive edge logic within your design.  The clock needs to then return low,
and all of these transitions require calls to the &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator tracing
methods&lt;/a&gt; if you
want a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt; when you are
done.&lt;/p&gt;

&lt;p&gt;I found this cumbersome, so I wrapped all of that logic with a &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method.
This is the same &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method I discussed above.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method of
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;
would capture inputs to the core in a trace,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_tickcount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Step one--don&#39;t skip this one!
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// This step is necessary to make certain any combinatorial
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// logic settles prior to the positive edge of the clock, and
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// following any adjustments to design&#39;s inputs
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// m_core-&amp;gt;i_clk = 0; // (This is implied)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_tickcount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;toggle the clock high,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Step two
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;capture the results in a trace,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_tickcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then toggle the clock low&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Step three
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and capture the results in the trace again–this time flushing the trace file.
(Flushing is important–I’ve had too many designs fail some C-assertion in their
associated logic, and without the flush you may not get the state of your
variables at that last clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_tickcount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before moving on, let me foot-stomp here that &lt;em&gt;all three calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;
are essential!&lt;/em&gt;.  While it may look like the last step and the first step
are identical since they both leave the clock at zero, they are not the same.
Between these two steps,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulation&lt;/a&gt;
logic might change inputs to the design.  Unless you call &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt; following
any &lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulation&lt;/a&gt; updates to
design inputs, combinational logic depending upon these inputs may not
settle.  This is a painful bug to search for, so I recommend you learn the
lesson here.&lt;/p&gt;

&lt;p&gt;In this single clock paradigm outlined above, I could read any outputs and
adjust any inputs after calling this one &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method.  I could also call
the C &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt; function if something had gone wrong–the &lt;code class=&quot;highlighter-rouge&quot;&gt;flush()&lt;/code&gt; command
above guaranteed that the relevant portion of the trace was in &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;the
file&lt;/a&gt;.  This approach was simple
enough, and I’ve used this pattern for many of my designs.  (You can read more
about it &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Sadly, this initial approach didn’t work when dealing with multiple clocks.&lt;/p&gt;

&lt;p&gt;Instead, let’s walk through how this &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; method can be updated to deal
with multiple clocks.  In the example below, drawn from the &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;VideoZip
project&lt;/a&gt;,
I have four clocks: &lt;code class=&quot;highlighter-rouge&quot;&gt;hdmi_out&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;hdmi_in&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;net_rx_clk&lt;/code&gt;, and my default &lt;code class=&quot;highlighter-rouge&quot;&gt;clk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first step when calling &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; is to check the number of picoseconds
till the next clock edge.  This is the minimum time to the next edge among
all clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// m_clk describes the system clock
&lt;/span&gt;		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// m_hdmi_out_clk describes the HDMI output clock
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// This is at 148.5MHz for this design
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hdmi_out_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hdmi_out_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// m_hdmi_in_clk describes the HDMI input clock
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// This is identical to the HDMI output clock in this design
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hdmi_in_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hdmi_in_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// m_net_rx_clk describes the 125MHz ethernet RGMII interface
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// clock
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_net_rx_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_net_rx_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we know this amount of time, we’ll call &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt; once out of an abundance
of caution.  This makes sure, before any clock edges change, that all of the
combinational logic associated with any potentially changed input wires has
settled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once done, each of the various clock objects may be advanced by this amount
of time, and our global estimate of the current time can advance as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hdmi_out_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hdmi_out_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_hdmi_in_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hdmi_in_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_net_rx_clk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_net_rx_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;m_time_ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mintime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, using these new clock values, we can call
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
to evaluate our design in this new interval–adjusting any edge triggered
logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we are recording a trace at this time, we’ll then call
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
to dump the current state of the design to a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace file&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_time_ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t forget to flush it!  There’s been more than one time when I’ve checked
the outputs of a core after ticking the clock, decided their was a problem and
aborted, only to find the relevant signals hadn’t ended up in the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we’ll call any external simulation logic depending on clock edges.
In my single clock designs, I do this about mid-way through the low period of
the clock, so you can “see” the transformation.  I also did it between calls to
&lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt;.  This doesn’t work with multiple-clocks, since peripherals are often
defined by the clock the logic is associated with.  For this reason,
we’ll have to call separate functions for each clock to allow these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulations&lt;/a&gt;
to update.  We’ll do this on
the falling edges of their respective clocks.  This includes possibly updating
the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;video simulation&lt;/a&gt;, checking for
simulated network packets, and more.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hdmi_out_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;falling_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sim_hdmi_out_clk_tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hdmi_in_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;falling_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sim_hdmi_in_clk_tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_net_rx_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;falling_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sim_clk_tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;falling_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sim_clk_tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For example, in my &lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;spectrogram demo
project&lt;/a&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sim_clk_tick()&lt;/code&gt; function
advances the &lt;a href=&quot;https://github.com/ZipCPU/fftdemo/blob/master/bench/cpp/micnco.cpp&quot;&gt;A/D
simulation&lt;/a&gt;
and so updates &lt;code class=&quot;highlighter-rouge&quot;&gt;i_adc_miso&lt;/code&gt;, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;sim_pixclk_tick()&lt;/code&gt; advances the
&lt;a href=&quot;https://github.com/ZipCPU/blob/master/bench/cpp/vgasim.cpp&quot;&gt;simulated video on the
screen&lt;/a&gt;
using the outgoing pixel, and the various outgoing synch signals.
(&lt;a href=&quot;https://github.com/ZipCPU/blob/master/bench/cpp/main_tb.cpp&quot;&gt;Ref&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The conclusion here is that if you want to use this technique, you’ll want to
copy the
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
class (or build your own), and then create a
&lt;a href=&quot;https://github.com/ZipCPU/videozip/blob/master/sim/verilated/testb.h&quot;&gt;test bench wrapper&lt;/a&gt;
that references your
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilator/tbclock.h&quot;&gt;TBCLOCK&lt;/a&gt;
objects and gets all the pieces right.&lt;/p&gt;

&lt;p&gt;Alternatively, you could use &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
to handle all of this busy work for you.&lt;/p&gt;

&lt;h2 id=&quot;using-autofpga-to-build-the-testbench&quot;&gt;Using AutoFPGA to build the testbench&lt;/h2&gt;

&lt;p&gt;If you are not familiar with &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;,
then in quick sum: it is Verilog-based code generator based upon a copy and
paste concept with minimal substitution capability.  You specify the code
snippets associated with each design component or peripheral in an
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
configuration file, and then when you call
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; specifying that configuration
file (among many others),
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
will create your top level (device dependent) design, your main design
(device independent) file, and several other bus related files associated with
the peripherals you are making or using.&lt;/p&gt;

&lt;p&gt;If you are interested in this, consider reading about
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;design goal’s&lt;/a&gt;, 
or the primer on &lt;a href=&quot;/zipcpu/2017/10/06/autofpga-dataword.html&quot;&gt;how to connect simple register-based components to a
debugging bus&lt;/a&gt;
using &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The neat thing about using &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
for a purpose like this one, is that when you no longer need the extra
clock or the logic that uses it, you can just remove the reference to the
configuration file describing those components of your design from the
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
command line.  If you want to see how this works, consider examining a &lt;a href=&quot;https://github.com/ZipCPU/zbasic&quot;&gt;project
that uses&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;, and then looking in the 
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/tree/master/auto-data&quot;&gt;configuration file directory&lt;/a&gt;
for the &lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/auto-data/Makefile&quot;&gt;Makefile&lt;/a&gt;.  In there, you’ll find some lines similar to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; global.txt bkram.txt buserr.txt clock.txt                       &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	dlyarbiter.txt flash.txt rtclight.txt   rtcdate.txt             &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	pic.txt pwrcount.txt                                            &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	version.txt busconsole.txt zipmaster.txt sdspi.txt

&lt;span class=&quot;nv&quot;&gt;AUTOFPGA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; ../../../autofpga/trunk/sw/autofpga

&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(AUTOFPGA) $(DATA)&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(AUTOFPGA)&lt;/span&gt; -o . &lt;span class=&quot;nv&quot;&gt;$(DATA)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This captures, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(DATA)&lt;/code&gt; variable a list of configuration files that
are given to &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then in the main project
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt; the created
code files will be copied to their various parts of the project tree if
running &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; had changed them–but
not otherwise.  As an
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/Makefile&quot;&gt;example&lt;/a&gt; from
&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;Zbasic&lt;/a&gt;, these
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt;
lines would look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autodata&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;autodata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check-autofpga&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$(MAKE)&lt;/span&gt; --no-print-directory --directory&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto-data
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/toplevel.v,rtl/toplevel.v&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/main.v,rtl/main.v&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/regdefs.h,sw/host/regdefs.h&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/regdefs.cpp,sw/host/regdefs.cpp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/board.h,sw/zlib/board.h&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/board.ld,sw/board/board.ld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/rtl.make.inc,rtl/make.inc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/testb.h,sim/verilated/testb.h&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;call copyif-changed,auto-data/main_tb.cpp,sim/verilated/main_tb.cpp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a little later, you’ll see the definition of this &lt;code class=&quot;highlighter-rouge&quot;&gt;copyif-changed&lt;/code&gt;
function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;err&quot;&gt;define&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;copyif-changed&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;@bash&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;cmp $(1) $(2); if [[ $$? != 0 ]]; then echo &quot;Copying $(1) to $(2)&quot;; cp $(1) $(2); fi&#39;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;endef&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basically, if files &lt;code class=&quot;highlighter-rouge&quot;&gt;$(1)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$(2)&lt;/code&gt; differ, then &lt;code class=&quot;highlighter-rouge&quot;&gt;$(1)&lt;/code&gt; is copied on top of
&lt;code class=&quot;highlighter-rouge&quot;&gt;$(2)&lt;/code&gt;.  This keeps &lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;make&lt;/a&gt; from rebuilding
things that depend upon files that haven’t changed.&lt;/p&gt;

&lt;p&gt;But that’s not my point here and now.&lt;/p&gt;

&lt;p&gt;What I want to share right now is how easy it is to teach
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; about your multiple clocks.&lt;/p&gt;

&lt;p&gt;First, you’ll want to define each of your clocks.  A clock, in terms of
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;, has three components:
a name, the name of the wire that contains this clock, and the frequency of
the clock in Hz.  For example, you might have a clock &lt;code class=&quot;highlighter-rouge&quot;&gt;clk&lt;/code&gt; contained in the
wire &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk&lt;/code&gt;, that runs at 100MHz.  You’d then define this as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;CLOCK.NAME= clk
CLOCK.WIRE= i_clk
CLOCK.FREQUENCY= 100000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This alone is all that is needed to create the clock in the
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; generated
&lt;a href=&quot;https://github.com/ZipCPU/zbasic/blob/master/sim/verilated/testb.h&quot;&gt;TESTB&lt;/a&gt;
file.&lt;/p&gt;

&lt;p&gt;What about simulating a component requiring this clock?&lt;/p&gt;

&lt;p&gt;Let’s consider simulating a video display.  You can find a video display
simulator &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;here&lt;/a&gt;.  Let’s assume your
design has outputs &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_vsync&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_hsync&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_red&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_grn&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_vga_blu&lt;/code&gt;–such as this one does.  Then, you’d want to declare a &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/vgasim.cpp&quot;&gt;VGA
simulator&lt;/a&gt;
VGA simulator in your Verilog design component,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;SIM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;VGASIM&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d then want to initialize this component.  Here, we’ll set it up for an
800x600 display mode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;SIM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VGASIM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then call this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulation&lt;/a&gt;
component on every clock tick, with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;SIM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TICK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_vsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_hsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_grn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_vga_blu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t forget to define the clock!  For an &lt;code class=&quot;highlighter-rouge&quot;&gt;800x600&lt;/code&gt; display mode, you’ll need
a &lt;code class=&quot;highlighter-rouge&quot;&gt;40MHz&lt;/code&gt; clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;CLOCK.NAME= pixclk
CLOCK.WIRE= i_pixclk
CLOCK.FREQUENCY= 40000000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ideally, you could just add this updated configuration file to your design
to add this component, or remove it from your design to remove the component.
At this point, this would work for a
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
simulation.  If you wanted to go beyond simulation, you’d
need to actually add and configure the PLL in the toplevel design component.
You’d use the &lt;code class=&quot;highlighter-rouge&quot;&gt;TOP.INSERT&lt;/code&gt;
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
tag for that purpose.
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
would then copy the contents of that tag into your toplevel.v
design file.  No &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
doesn’t configure the PLL itself (yet)–you still have to give it the code
for that (with the &lt;code class=&quot;highlighter-rouge&quot;&gt;TOP.INSERT&lt;/code&gt;).  Still,
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
will put that code in place for you, making reconfiguration simpler.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Perhaps that seems like a lot of work.  It’s not really.  We’re primarily
talking about 20-40 lines of code in total.  It’s just a different way of
thinking.  The only sad and complicated part is that all of these lines of
code take place over many design files.  Having
&lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
manage this for me has helped to keep all of the changes to support multiple
clocks within one or two files only.&lt;/p&gt;

&lt;p&gt;In the end, we now have a
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;,
based design that runs using multiple clocks.  Not only that, you can generate
a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;VCD file&lt;/a&gt;
showing all of these various clocks and their respective traces.&lt;/p&gt;

&lt;p&gt;While this capability does not (yet) allow the generation of multiple clocks
with a known phase relationship, such as one might use with an ISERDES or an
OSERDES, upgrading the tools to do so would be fairly trivial.  I’m sure I’ll
get around to that when I have a need for it.&lt;/p&gt;

&lt;p&gt;Perhaps some of you are wondering to yourselves, “Verilog offers a capability
to generate multiple clocks already.  Why aren’t you using Verilog’s test bench
capability to do this?”&lt;/p&gt;

&lt;p&gt;My answer to that is simple: I know how to interface a C++ module with my
computer’s Windowing system using &lt;a href=&quot;https://www.gtkmm.org&quot;&gt;GTKMM&lt;/a&gt;.
I don’t know the Verilog system call to do that.&lt;/p&gt;

&lt;p&gt;What can you use this for?  I’ve already mentioned
&lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;video&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ethernet&quot;&gt;Ethernet&lt;/a&gt;, and
audio applications.  There’s no reason why you can’t use this for custom
applications as well.  For example, I’m still looking forward to completing the
&lt;a href=&quot;https://forum.digilentinc.com/topic/2898-differential-pmod-challenge/&quot;&gt;differential pmod challenge&lt;/a&gt;
… but that’s really another topic for another day.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;And Jesus answered and said unto them, Elias truly shall first come, and restore all things. (Matt 17:11)&lt;/em&gt;</description>
        <pubDate>Thu, 06 Sep 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/09/06/tbclock.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/09/06/tbclock.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>RE: Building a simulation for my design?  What does that mean?</title>
        <description>&lt;p&gt;Recently, a student wrote to me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello.  I am a student taking my first digital design course, and I stumbled
upon your website.  Specifically, &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;this
article&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;What exactly is meant here when you talk about building a simulation for
your design?&lt;/p&gt;

  &lt;p&gt;(I’ll keep the student’s name anonymous.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1: Typical Student Design Process&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/student-design-process.svg&quot; alt=&quot;&quot; width=&quot;180&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;He’s specifically talking about
&lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;an article&lt;/a&gt;
where I discuss the student design process, as shown in Fig 1. on the right.
If you haven’t read
&lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;that article&lt;/a&gt;,
I would commend it to you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;The article&lt;/a&gt;
recommends having a valid/working &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt; before ever moving
to hardware.  It also recommends using some form of
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt; and/or
&lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;internal logic analyzer&lt;/a&gt;
for debugging designs that have moved to hardware.  About the time the article
was written, I was mentoring another college student who had been
struggling through to build a design of his own.  When he came across
&lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;this article&lt;/a&gt;,
he was kind enough to respond with &lt;a href=&quot;/blog/2017/06/10/lost-college-student.html&quot;&gt;his own
experiences&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, &lt;a href=&quot;/blog/2017/06/10/lost-college-student.html&quot;&gt;this
experience&lt;/a&gt;
of frustration is common.  It is so common, that I coined the phrase
“&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;” to describe it,
and then &lt;a href=&quot;/fpga-hell.html&quot;&gt;dedicated my blog&lt;/a&gt; to keeping
students out of &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;.  Much to
my surprise, I’ve since spoken with many professionals who have been
interested in these topics as well.  Apparently,
&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;
in the business (i.e.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Application-specific_integrated_circuit&quot;&gt;ASIC&lt;/a&gt;)
world can easily translate into &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;millions of lost
dollars&lt;/a&gt;–and often
lost jobs as well.&lt;/p&gt;

&lt;p&gt;But let me come back to the original question: what do I mean when I talk about
&lt;a href=&quot;/blog/2017/06/23/my-dbg-philosophy.html&quot;&gt;building a simulation for a
design&lt;/a&gt;?  There
are two types of &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulations&lt;/a&gt;
I have used in my designs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;Simulation&lt;/a&gt; in this context can
reference a quick bench test of a module, that attempts to verify the module
logic works.&lt;/p&gt;

    &lt;p&gt;I used to do this with my components a lot.  I don’t do this as much any
more.  Why not?  My own efforts just weren’t very effective at finding bugs.&lt;/p&gt;

    &lt;p&gt;That said, this remains my approach when &lt;a href=&quot;/dsp/2017/07/24/dsp-debugging.html&quot;&gt;debugging any DSP
design&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;It&lt;/a&gt; can also refer to an
integrated test of the entire design and all of its pieces, together with
&lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulations&lt;/a&gt; of all of the
attached pieces of hardware.  I do this before moving to actual hardware.&lt;/p&gt;

    &lt;p&gt;I continue this practice religiously, and every system level project I have
has a full simulation capability.  Depending on the project this simulation
can either be found in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bench/cpp&lt;/code&gt; directory or a similar &lt;code class=&quot;highlighter-rouge&quot;&gt;sim/verilated&lt;/code&gt;
directory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve discussed &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt; many
times over on &lt;a href=&quot;&quot;&gt;the blog&lt;/a&gt;, providing both
examples of &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt;, and
discussing how I put &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulations&lt;/a&gt;
together.  For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I use &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
for all of my simulating needs.  We’ve discussed how to build a
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;verilator&lt;/a&gt;-based
bench test already on this blog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ve also discussed &lt;a href=&quot;/dsp/2017/11/04/genfil-tb.html&quot;&gt;how to test a DSP filter
design&lt;/a&gt; using
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The same applies to testing a
&lt;a href=&quot;/dsp/2017/10/02/cordic-tb.html&quot;&gt;CORDIC&lt;/a&gt;
algorithm that can evaluate sine and cosine functions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Did I mention discussing how to build a simulation for a
&lt;a href=&quot;/dsp/2017/12/14/logic-pll.html&quot;&gt;logic PLL&lt;/a&gt;?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
allows me to integrate C++ &lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulation&lt;/a&gt;
code into my designs.  (&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
is not necessarily unique in this fashion, there are other approaches, however
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
is most definitely my chosen approach.)  Examples include:&lt;/p&gt;

    &lt;p&gt;– A &lt;a href=&quot;https://github.com/ZipCPU/wbuart32&quot;&gt;serial port&lt;/a&gt; that you can connect
 to using &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP/IP&lt;/a&gt;, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet localhost &amp;lt;port #&amp;gt;&lt;/code&gt;.  You can read about an example using this approach &lt;a href=&quot;/blog/2017/06/26/dbgbus-verilator.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;– A &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;parallel port&lt;/a&gt; that takes the place
 of the serial port in my design for the &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO Board&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;– A &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA simulator&lt;/a&gt;: includes both
 &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp&quot;&gt;source&lt;/a&gt; (i.e. a camera)
 and &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp&quot;&gt;sink&lt;/a&gt; (i.e. a window
 on your screen)
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;co-simulators&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;– An &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;A/D simulator&lt;/a&gt; for &lt;a href=&quot;http://store.digilentinc.com/pmod-mic3-mems-microphone-with-adjustable-gain&quot;&gt;this
 microphone&lt;/a&gt; PMod.&lt;/p&gt;

    &lt;p&gt;– A &lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;flash simulator&lt;/a&gt;.  This has
 been so useful, I’ve reused it just about all of my
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; projects&lt;/p&gt;

    &lt;p&gt;– A &lt;a href=&quot;https://github.com/ZipCPU/sdspi&quot;&gt;SD-Card simulator (SPI mode only)&lt;/a&gt;.
 When I finally get to implementing Linux on the
 &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;, being able to simulate an
 SD card capability will be very important.&lt;/p&gt;

    &lt;p&gt;– An &lt;a href=&quot;https://github.com/ZipCPU/wbi2c&quot;&gt;I2C simulator&lt;/a&gt;.  This was a necessary
 part of my (still incomplete) &lt;a href=&quot;https://github.com/ZipCPU/videozip&quot;&gt;HDMI
 design&lt;/a&gt;, since modern monitors are
 supposed to respond to a query and reply with the video formats they support.
 (The I2C part of the design works.)&lt;/p&gt;

    &lt;p&gt;– &lt;a href=&quot;https://github.com/ZipCPU/openarty&quot;&gt;One of my designs&lt;/a&gt; even includes a
 &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/gpsclock_tb.v&quot;&gt;GPS PPS signal
 simulator&lt;/a&gt;,
 for testing my &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/gpsclock.v&quot;&gt;GPS time-tracking
 algorithm(s)&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am a firm believer in building a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt; that you can interact
with using &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;a TCP/IP network
port&lt;/a&gt;.
This allows you to test/verify interacting with a design using your
production software.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;one blog post&lt;/a&gt;
I discuss how to run the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
in an environment using a simulated serial port.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/zipcpu/2018/02/12/zbasic-intro.html&quot;&gt;This blog post&lt;/a&gt;
also includes instructions for playing
&lt;a href=&quot;https://github.com/ZipCPU/tttt&quot;&gt;4x4x4 Tic-Tac-Toe&lt;/a&gt; on the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;–&lt;em&gt;running in simulation only&lt;/em&gt;.
If you’ve never tried &lt;a href=&quot;https://github.com/ZipCPU/tttt&quot;&gt;4x4x4 Tic-Tac-Toe&lt;/a&gt;, I
challenge you to try to beat the computer at the game.  It’s not unbeatable,
but the artificial intelligence used by that design is pretty good.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA Simulation&lt;/a&gt; project contains
code for two &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt;
components within it.  (Both are
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
based).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 2: VGA Simulation, displays on a window of your screen&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/vgasim.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/main_tb.cpp&quot;&gt;main_tb&lt;/a&gt;
  simulator simulates an &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/wbvgaframe.v&quot;&gt;RTL
  design&lt;/a&gt;
  that &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/rtl/imgfifo.v&quot;&gt;reads from a frame
  buffer&lt;/a&gt; in
  &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/bench/rtl/memdev.v&quot;&gt;memory&lt;/a&gt;
  and draws the contents of that frame buffer to the screen.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see an example of the window this draws on my screen in Fig 2 on the
  right.&lt;/p&gt;

&lt;p&gt;The importance of having such a video &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt; capability can not be
  understated.  It is not that uncommon to have a bug in the graphics
  produced by a video-enabled design.  Just because you can see that bug on
  the screen doesn’t mean you can then find it within your design.&lt;/p&gt;

&lt;p&gt;By being able to run the design in a desktop application (i.e. in a
  &lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt;)
  that recreates all of your logic, and saves every signal to a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace
  file&lt;/a&gt;
  that can later be examined, finding and fixing bugs doesn’t become easy,
  &lt;em&gt;it becomes possible&lt;/em&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 3: Creating a simulated video input&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/camsim.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;The other video &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt; is one I call
   &lt;a href=&quot;https://github.com/ZipCPU/vgasim/blob/master/bench/cpp/simcheck.cpp&quot;&gt;simcheck&lt;/a&gt;.
   This &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt; reads the 640x480 pixels at the top left of your screen,
   and creates Verilog signals from that portion of the screen that can then
   be ingested into your design.  (The frame size is configurable, as is the
   rest of the &lt;a href=&quot;https://en.wikipedia.org/wiki/XFree86_Modeline&quot;&gt;mode line&lt;/a&gt;.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you just route these values into the other video
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Co-simulation&quot;&gt;simulator&lt;/a&gt;,
   you can see the video output within a window on your desktop, as shown in
   Fig 3 on the left.  If you place that window near the same upper-left corner
   of your screen, you’ll get a cool recursive effect–also shown in Fig 3 on
   the left.&lt;/p&gt;

&lt;p&gt;Perhaps the best way I could describe all of this would be to point out a
&lt;a href=&quot;https://github.com/ZipCPU/fftdemo&quot;&gt;spectrogram&lt;/a&gt; design I recently built.
The &lt;a href=&quot;https://github.com/ZipCPU/fftdemo/blob/master/bench/cpp/main_tb.cpp&quot;&gt;simulation for this
demo&lt;/a&gt;
includes the &lt;a href=&quot;https://github.com/ZipCPU/wbpmic&quot;&gt;A/D simulator&lt;/a&gt; I mentioned
above, as well as the &lt;a href=&quot;https://github.com/ZipCPU/vgasim&quot;&gt;VGA output simulator&lt;/a&gt;.
Using this
&lt;a href=&quot;https://github.com/ZipCPU/fftdemo/blob/master/bench/cpp/main_tb.cpp&quot;&gt;simulation&lt;/a&gt;,
I can capture any
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;,
and see every bit of logic flowing through my design
as it reads from a (simulated) A/D device, &lt;a href=&quot;https://github.com/ZipCPU/fftdemo/blob/master/rtl/subfildown.v&quot;&gt;filters and downsamples&lt;/a&gt; the signal,
takes a &lt;a href=&quot;https://github.com/ZipCPU/dblclockfft&quot;&gt;Fourier transform&lt;/a&gt;,
and then plots the result onto a window of my screen in a scrolling fashion.&lt;/p&gt;

&lt;p&gt;If I want, I can then even test other signal processing approaches, such as the
one shown below in Fig 4.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 4: High Resolution FFT Window Processing&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/tweets/fq-swepttone.png&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is what I mean by &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt;:
being able to repeat and test the entire design using software alone.&lt;/p&gt;

&lt;p&gt;Further, all of these &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt;
components are available for student use (and more):
they are (mostly) licensed under
&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;GPLv3&lt;/a&gt;.
(Some are licensed under LGPLv3.)  If your instructor/advisor allows you to,
please feel free to try them and use them in one of your own projects.&lt;/p&gt;

&lt;h2 id=&quot;formal-verification&quot;&gt;Formal Verification&lt;/h2&gt;

&lt;p&gt;Since writing the original article on &lt;a href=&quot;/blog/2017/06/02/design-process.html&quot;&gt;The Actual Design
Process&lt;/a&gt;, I’ve come
across a new technique so powerful when it comes to finding bugs that my
own practices have since changed and changed significantly.  Instead of
&lt;a href=&quot;/blog/2017/06/23/my-dbg-philosophy.html&quot;&gt;first simulating any design
components&lt;/a&gt;, I now
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally verify&lt;/a&gt;
every design component.  I use this new technique in place of bench testing:
it takes less work to do, finds bugs faster, and doesn’t require searching
through GB of
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt; to find any bugs.&lt;/p&gt;

&lt;p&gt;Why did I change?  I changed because none of my bench tests ever &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;tested
enough of the design space&lt;/a&gt;.
This meant that I would then integrate design
components together that I &lt;em&gt;thought&lt;/em&gt; were working, only to &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;later discover the
design as a whole wasn’t working&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps this would be during an integrated
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;Verilator&lt;/a&gt;-enabled
&lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt;.  However, in that
environment, I’d find myself searching through 1-10GB
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; files trying to find a
needle (the bug) in a haystack (the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;).
Worse, I might’ve tried to place the design onto an 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;
where I no longer have the same visibility into the design in order to
investigate any bugs.&lt;/p&gt;

&lt;p&gt;On the other hand, when using a
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;
approach, such as the one enabled by
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;,
I’d find (and fix) many more bugs than I would’ve ever dreamed of testing while
trying to drive a simulation bench/test.  Even better, I can normally find
these bugs with between only 10-150 time-steps, and &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace
files&lt;/a&gt; less than 100kB in size.&lt;/p&gt;

&lt;p&gt;Having used
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification&lt;/a&gt;,
do I still use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation&quot;&gt;simulation&lt;/a&gt;?  Absolutely!
Although I’ve &lt;a href=&quot;/formal/2018/04/23/invariant.html&quot;&gt;discussed how to formally verify the aggregation of multiple
design components&lt;/a&gt;,
I have yet to learn how to do this reliably and in general with large
system level designs.&lt;/p&gt;

&lt;p&gt;That said, if you’ve never tried &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
methods&lt;/a&gt;,
then let me invite you to try out
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;.
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt; is a free and
open-source program that can be used to formally verify a Verilog design.
Not only are there &lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys/tree/master/docs/examples&quot;&gt;several example
designs&lt;/a&gt;,
in the &lt;a href=&quot;https://github.com/YosysHQ/SymbiYosys&quot;&gt;SymbiYosys repository&lt;/a&gt;,
but you can also find examples in many of &lt;a href=&quot;https://github.com/ZipCPU&quot;&gt;my own
repositories&lt;/a&gt;.  Look in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bench/formal&lt;/code&gt;
subdirectory for any
&lt;a href=&quot;https://symbiyosys.readthedocs.io/en/latest&quot;&gt;SymbiYosys&lt;/a&gt;
scripts–those are the files that end in .sby.&lt;/p&gt;

&lt;p&gt;Thank you for that excellent question!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Thou therefore which teachest another, teachest thou not thyself?  thou that preachest a man should not steal, dost thou steal? (Rom 2:21)&lt;/em&gt;</description>
        <pubDate>Wed, 22 Aug 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/08/22/what-is-simulation.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/08/22/what-is-simulation.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>How to build a SPI Flash Controller for an FPGA</title>
        <description>&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 1. The ICO board&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/icoBoard.Vorne.1.1.jpg&quot; alt=&quot;Picture of an ICO Board&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Perhaps &lt;a href=&quot;/formal/2018/07/21/zipcpu-icoboard.html&quot;&gt;you may
remember&lt;/a&gt; that
I’ve been working to port the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
to an &lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt; HX8k
platform: the &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;.  I like to boast that the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was designed for low logic
applications, and the
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt; is certainly a
low logic chip.  While the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
isn’t the &lt;em&gt;smallest&lt;/em&gt; processor out there, there are some forth processors
that are much smaller, it does fit nicely with room to spare on the
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt; 8k.&lt;/p&gt;

&lt;p&gt;However, if you want a design that starts immediately upon power up, or if you
want more memory than is available in 8kB of block RAM or (in this case) even
in 128kB of &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;,
then you need access to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt;.
Why?  First, &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt; is
non-volatile, so anything that reads from it can do so immediately upon
power up.  Second, most
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s &lt;em&gt;need&lt;/em&gt; a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip to store their design
within, so &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chips are a
common addition on &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; boards.  Third,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is fairly cheap: a single 16MB
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip can sell for as little as $1 on
&lt;a href=&quot;https://www.digikey.com&quot;&gt;Digikey&lt;/a&gt;.  Given that my
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; design logic for the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt; only requires about
132kB of memory, that leaves me with &lt;em&gt;lots&lt;/em&gt; of memory to play with … if I
just had a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
controller.&lt;/p&gt;

&lt;p&gt;I also had another reason for this project as well: I wanted to learn about
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;System Verilog sequences&lt;/a&gt;,
and whether or not they could be used to &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formally
verify&lt;/a&gt; a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;.
Yes, I had access to the full commercial (&lt;a href=&quot;http://www.verific.com&quot;&gt;Verific&lt;/a&gt;
enabled) version of &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;
to do this.  But I wanted to see how useful this full version would be when
it came to designing a new/better &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; controller.&lt;/p&gt;

&lt;p&gt;So let’s see what it takes.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned-from-other-flash-controllers&quot;&gt;Lessons learned from other flash controllers&lt;/h2&gt;

&lt;p&gt;When I start any new design, my first step is to download the
&lt;a href=&quot;https://drive.google.com/file/d/0By-zY9AlHqXIcXZ6ZWdBR2dPXzg/view&quot;&gt;schematic&lt;/a&gt;
for the board that I have, and data sheets for all of the parts.  In this case, 
the &lt;a href=&quot;http://icoboard.org&quot;&gt;ICO board&lt;/a&gt; has a &lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;Cypress S25FL127S 128 Mbit
(16MByte) chip&lt;/a&gt;
connected to the &lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.
I then spend some time reading the specifications and studying the
&lt;a href=&quot;https://drive.google.com/file/d/0By-zY9AlHqXIcXZ6ZWdBR2dPXzg/view&quot;&gt;schematic&lt;/a&gt;
before building anything.&lt;/p&gt;

&lt;p&gt;In this case, by the time I came to
&lt;a href=&quot;http://icoboard.org&quot;&gt;this board&lt;/a&gt;’s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
I had already built several
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
controllers before.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 2. A Basys3 board&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/Basys3.png&quot; alt=&quot;Picture of an Basys3 Board&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; controller
I ever built was for the &lt;a href=&quot;https://store.digilentinc.com/basys-3-artix-7-fpga-trainer-board-recommended-for-introductory-users/&quot;&gt;Basys-3 board&lt;/a&gt;.
This board had a
&lt;a href=&quot;http://www.cypress.com/file/196861/download&quot;&gt;Spansion S25FL032P&lt;/a&gt; 4MB
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
Since it was my first &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;controller&lt;/a&gt; design, my goal was
to design something that could do everything:&lt;/p&gt;

    &lt;p&gt;– It could read the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
   at both high (QSPI) and low
   (&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;) speeds&lt;/p&gt;

    &lt;p&gt;– It could read the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;’s internal
   configuration register in order to determine if the QSPI
   mode was even enabled&lt;/p&gt;

    &lt;p&gt;– It could both erase and program the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;– It could be used for reading the vendor identification words back from
   the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and&lt;/p&gt;

    &lt;p&gt;– It could be used for reading the status register and/or writing the
   configuration register of the
   &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;This&lt;/a&gt; was a great general
purpose &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; controller,
and I’ve used it many times since.  However, all of this extra logic has
consequences when you want to place your design on a small board.  How bad?
&lt;a href=&quot;https://opencores.org/project/qspiflash&quot;&gt;It&lt;/a&gt; consumed about 1263
of the 7680 cells on an
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt;,
or about 16% of the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; logic.&lt;/p&gt;

    &lt;p&gt;The other problem I had with this design was when I tried to place it onto
the Spartan 6/LX4 of the &lt;a href=&quot;https://store.digilentinc.com/cmod-s6-breadboardable-spartan-6-fpga-module&quot;&gt;CMod
S6&lt;/a&gt;.
Sure, there was plenty of room for the
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/wbqspiflash.v&quot;&gt;controller&lt;/a&gt;
and the &lt;a href=&quot;/blog/2017/06/05/wb-bridge-overview.html&quot;&gt;debugging
bus&lt;/a&gt;
I was using at the time–there just wasn’t much room for anything else.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. An Arty-A7 Board&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/arty-board.png&quot; alt=&quot;Picture of an Arty Board&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Sometime later I decided I wanted to build a &lt;em&gt;high speed&lt;/em&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; controller, so that I
could push &lt;a href=&quot;https://store.digilentinc.com/arty-a7-artix-7-fpga-development-board-for-makers-and-hobbyists&quot;&gt;Digilent’s Arty&lt;/a&gt;
up to a system clock rate of 200MHz.  Why 200MHz?
Because I had mistakenly thought this was the clock speed I’d need to use
to interact with the &lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;DDR3 SDRAM&lt;/a&gt;
on board.  When I realized I &lt;a href=&quot;https://opencores.org/project/wbddr3&quot;&gt;couldn’t
interact&lt;/a&gt; with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/DDR3_SDRAM&quot;&gt;SDRAM&lt;/a&gt;
any faster than about 82MHz, I abandoned &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/eqspiflash.v&quot;&gt;this
controller&lt;/a&gt;
and never used for any other projects.&lt;/p&gt;

    &lt;p&gt;Still, if the &lt;a href=&quot;http://opencores.org/project/qspiflash&quot;&gt;last controller&lt;/a&gt;
was full featured,
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/eqspiflash.v&quot;&gt;this one&lt;/a&gt;
was even more so.
&lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/eqspiflash.v&quot;&gt;It&lt;/a&gt;
not only allowed you to read and write any of several configuration
registers, it would also allow you to read and write the one-time
programmable (OTP) ROM.  Further, since I wanted this to run at 200MHz,
there was a lot of
&lt;a href=&quot;/blog/2017/08/14/strategies-for-pipelining.html&quot;&gt;pipelining&lt;/a&gt;
(and extra latency) to &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/eqspiflash.v&quot;&gt;this controller&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In hind sight, &lt;a href=&quot;https://github.com/ZipCPU/openarty/blob/master/rtl/eqspiflash.v&quot;&gt;this controller&lt;/a&gt;
was a boat anchor.  It’s bloated with features I never used and as a result
was way too big for the job.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: left&quot;&gt;&lt;caption&gt;Fig 4. A Cmod S6 board&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/cmods6.png&quot; alt=&quot;Picture of a CMod S6&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;However, when I needed to upgrade the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; in my
&lt;a href=&quot;https://github.com/ZipCPU/s6soc&quot;&gt;S6SoC design&lt;/a&gt; so that
it would support 8-bit bytes (the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; was originally a 32-bit byte
architecture), I needed to find &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;spare
LUTs&lt;/a&gt;
anywhere I could.  2,400 6-LUTs isn’t a lot of room for a multi-processing
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;CPU&lt;/a&gt;, and so I had to strip
everything out that I could.&lt;/p&gt;

    &lt;p&gt;The first thing to go was everything but the read capability from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/wbsqspiflash.v&quot;&gt;controller&lt;/a&gt;.
That removed 30% of the logic in the controller.&lt;/p&gt;

    &lt;p&gt;It wasn’t enough.&lt;/p&gt;

    &lt;p&gt;Then I stepped back and realized that I would only ever run the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
from an already programmed
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and that all I ever
&lt;em&gt;really&lt;/em&gt; needed from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
was the ability to read from it.  I didn’t need to be able to read
the status register, the configuation register, the vendor’s ID, or anything
else: I just needed to read the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I also needed speed.&lt;/p&gt;

    &lt;p&gt;So I created a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/qflashxpress.v&quot;&gt;controller&lt;/a&gt;
that used the Spartan 6’s DDR capability so that it could read
from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; at the system
clock speed.  This
provided a rough 2x improvement in speed.  Further, the rewrite to create
this capability, and this capability alone dropped the
&lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;number of LUTs&lt;/a&gt;
used by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; from
(roughly) 569 down to about 100 or so.&lt;/p&gt;

    &lt;p&gt;(These numbers are approximate because
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; doesn’t yet pack
&lt;a href=&quot;https://www.xilinx.com&quot;&gt;Xilinx&lt;/a&gt;
LUT’s together, but they do give an idea of usage.)&lt;/p&gt;

    &lt;p&gt;Since &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/qflashxpress.v&quot;&gt;this
controller&lt;/a&gt;
offered only a read capability and nothing more, I
called it my &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/qflashxpress.v&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;qflashxpress&lt;/code&gt;&lt;/a&gt; controller.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 5. A TinyFPGA Bx&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/TinyFPGA-BX.png&quot; alt=&quot;Picture of a TinyFPGA BX baord&quot; width=&quot;120&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;I recently started working on a fourth
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/tinyzip/blob/master/rtl/dualflexpress.v&quot;&gt;controller&lt;/a&gt;
modeled after this last one, but using the Dual SPI read mode of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/tinyzip/blob/master/rtl/dualflexpress.v&quot;&gt;This
controller&lt;/a&gt;
is designed to support the
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt;
on the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt;.  However, on my pre-production
version of the &lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA BX&lt;/a&gt;, only the MISO and MOSI
lines are connected to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, so the best/fastest I
could ever do is Dual SPI which would only allow me to read/write two
bits at a time.  (I have been assured that this has been fixed for the
production versions.)&lt;/p&gt;

    &lt;p&gt;Unlike the previous &lt;a href=&quot;https://github.com/ZipCPU/s6soc/blob/master/rtl/qflashxpress.v&quot;&gt;qflashxpress
controller&lt;/a&gt;,
I wanted the erase/program capability back.  Rather
then teach the HDL controller all of the necessary states associated with
erasing and reprogramming a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, I initially created
a bit banging port that could override the natural logic of the port.&lt;/p&gt;

    &lt;p&gt;The more I thought this through, though, the more I realized that bit banging
over the &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;debugging bus&lt;/a&gt;
would be horrendously inefficient.  Better yet, the
code already had the capability to send data to and receive data from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, why not just
adjust the configuration access so that it can command an 8-bit transfer?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That leads me to the basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
I want to discuss today.&lt;/p&gt;

&lt;p&gt;Why do I need a new &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;?
For a couple of reasons.  The first and perhaps more important is
the reality of how the &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt; was wired.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 6. ICO Board hardware overview&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ico-hwoverview.svg&quot; alt=&quot;Overview of the ICO board&#39;s hardware architecture&quot; width=&quot;640&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In order to make certain that both the &lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry
Pi&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; the
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt; could
control the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; memory, the
memory was routed through a
&lt;a href=&quot;https://www.latticesemi.com/Products/FPGAandCPLD/MachXO2&quot;&gt;MachXO2&lt;/a&gt; chip
as a traffic controller.  However, the
&lt;a href=&quot;https://www.latticesemi.com/Products/FPGAandCPLD/MachXO2&quot;&gt;MachXO2&lt;/a&gt; as wired
has no capability of dynamically controlling pin direction–the pins can only
ever go one way–either master in and slave out (MISO), or master out and
slave in (MOSI).  In other words,
any &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;flash controller&lt;/a&gt;
for the &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt; can only ever use the traditional
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; mode, and
thus any DSPI or QSPI enabled controller will only consume excess and unused
logic in an already tight space.&lt;/p&gt;

&lt;p&gt;All this is to say that this is my now a fifth generation
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
for me.  I’ve also learned along the way what’s important in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First and foremost, the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;:
must be able to read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  It must do this
function well and fast, since this is its purpose for being.  As you’ll
see, with no other logic this will cost us 147 of the 7680 cells on the
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;If I wanted, I could stop here.  Nothing more is really required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, as an optional performance improvement, it should be able to read
data from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; in
long strings of uninterrupted transactions.
Adding this logic to the controller will eventually cost us another 88
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt; logic
cells.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Third, as a second optional enhancement, it needs to support a single
configuration register providing access to the rest of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;’s
capabilities without burdening the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
with unnecessary features.  This final feature will cost an additional
38 logic cells, bringing our entire total up to 273 logic cells out of
7680, or about 3% of the entire design.&lt;/p&gt;

    &lt;p&gt;This is a reasonable usage number for our purposes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;the controller&lt;/a&gt;
we’ll examine today.&lt;/p&gt;

&lt;h2 id=&quot;basic-spi&quot;&gt;Basic SPI&lt;/h2&gt;

&lt;p&gt;If you are not familiar with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;Serial Peripheral Interconnect
(SPI)&lt;/a&gt; means
of communicating between digital components, then let me recommend the
&lt;a href=&quot;https://www.fpga4fun.com/SPI.html&quot;&gt;SPI article on fpga4fun.com&lt;/a&gt;.  It’s short,
and it explains a lot of good details about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI
protocol&lt;/a&gt;
that you might find valuable.  In sum, it describes what can be a shared bus,
with typically a single master and many slaves, operating over a
synchronous (i.e. clocked) interface.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 7. A basic SPI transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spi-raw.svg&quot; alt=&quot;Wiring diagram showing a SPI transaction&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The basic wires associated with this interface are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt;, a ‘negative logic’ chip select sometimes called &lt;code class=&quot;highlighter-rouge&quot;&gt;SS&lt;/code&gt; for the “slave
select” line.  This is the one line that is unique to each bus slave.
It is used to create a capability whereby multiple chips can have access to
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
bus at the same time.  The “master” simply selects the one chip it is
interested in.  The other chips are then required to place their output
pin into a high impedance state and to ignore any transactions for which
they are not selected.&lt;/p&gt;

    &lt;p&gt;This means that anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; is high, the chip of interest is not selected
and all of other wires are “don’t cares”.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; signal is also be used for synchronization.  Pulling this wire
low (active) signals to the slave the beginning of a transaction, and
hence the slave knows which bit is the “first” bit of the transaction packet.&lt;/p&gt;

    &lt;p&gt;Today, we’ll be focusing on the interaction associated with a single chip.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; is the serial clock.  Since this is a clocked interface, &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; provides
that clock.  The
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
protocol allows for several definitions of how this clock needs to be
implemented, so check the chip you wish to interface with to double check
for example the polarity and phase of the clock signal that it is expecting.&lt;/p&gt;

    &lt;p&gt;For our implementation below, we’ll insist that &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; be high any time
&lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; is inactive, even though technically this is a “don’t care” signal
in such cases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt;.  I pronounce this wire as “MOH-see”, although it’s technically the
acronymn, “Master Out Slave In”.  Some chips will call this wire SDI for
Slave Data In or even just SI for Slave Input.  This is the one wire
running from the master to all of the
slaves containing information coming from the master.&lt;/p&gt;

    &lt;p&gt;As with the clock, pay attention to your chips specification of this signal.
We’ll treat this signal today as a signal that can only change on the
negative edge of &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MISO&lt;/code&gt;, or “MEE-soh” as I like to pronounce it, is the “Master In, Slave Out”
wire–a single wire interface shared among all
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
slaves and containing the data being returned from the selected slave device.
Some chips will call this wire SDO for Slave Data Out, or even SO for Slave
Output.  All of these terms refer to the same basic wire.&lt;/p&gt;

    &lt;p&gt;Check the specification of the chip you are working with for details on this
signal, but from my experience this signal tends to change some number of &lt;code class=&quot;highlighter-rouge&quot;&gt;ns&lt;/code&gt;
following the last negative &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; edge.  It should be stable whenever &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;
is high, as long as you don’t make &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; run too fast,
so you can read it any time &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; is high.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the basic signals we’ll be working with.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; doesn’t typically use the
full interface capabilities, however.  Instead, every
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
protocol I’ve read about has actually been a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Simplex_communication&quot;&gt;Simplex&lt;/a&gt;,
or one-way, protocol.  The basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
transaction involves sending an 8-bit command, followed by any command specific
arguments (if any–depends upon the command), after which the slave will
return some kind of response.  In no part of this process are both &lt;code class=&quot;highlighter-rouge&quot;&gt;MISO&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt; lines containing valid data going in opposite directions at the same
time.
Either the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
is sending data to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip,
or the data is going in the reverse direction.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 8. SPI for Flash is a Simplex Protocol&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spi-simplex.svg&quot; alt=&quot;Wiring diagram, showing a simplex SPI transaction--MISO is unsed during command, MOSI is unused during a response&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you examine the
&lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;specification&lt;/a&gt;
for the &lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;Cypress Flash&lt;/a&gt;
device on the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;, and look closely through it, you’ll
quickly discover that all transactions are composed of sequences of octets
(8-bits)–just like we discussed above.  This is common among
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; based
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chips.&lt;/p&gt;

&lt;p&gt;Those first 8-bits of the transaction, though, are the important ones.  Hence
the &lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;spec&lt;/a&gt;
outlines all the different commands that can be started from any 8-bit
value.  The command set is rather long, though, stretching across both
page 109 and 110–so I’ll only reference it here.  Further, there’s a whole
chapter devoted to walking through each of the commands in detail.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 9. Basic Flash I/O chip pins&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-io-pins.svg&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This &lt;a href=&quot;https://en.wikipedia.org/wiki/Simplex_communication&quot;&gt;simplex&lt;/a&gt;
command response protocol also allows particular bastardizations of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
protocol whereby the &lt;code class=&quot;highlighter-rouge&quot;&gt;MISO&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt; lines are re-purposed into bi-directional
wires: the master might send on both bits during the argument period of the
command, and then receive on both bits during the response period.  This is
called “Dual SPI” mode, or DSPI for short.  Many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chips (including &lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;this one&lt;/a&gt;)
also have two other wires, a negative logic reset/hold pin and a negative logic
write protect pin.  These can also be re-purposed into further bidirectional
data wires, creating a four-wire bidirectional data bus for even faster
communication.  This four wire mode is often called “Quad SPI”, or QSPI
for short.&lt;/p&gt;

&lt;p&gt;Today, we’ll be looking at two basic capabilities, both within the basic
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; protocol.
The first capability will send a &lt;em&gt;read&lt;/em&gt; command to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
and then read data back in the response.  This will be our basic read
capability.  The second will send an arbitrary 8-bit command to the flash,
and then maintain the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; pin low and the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; pin stable (and high) until
either another command is received, or our
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
is explicitly told to adjust them again.&lt;/p&gt;

&lt;h3 id=&quot;read-only&quot;&gt;Read only&lt;/h3&gt;

&lt;p&gt;If you look through the command table on &lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;page 109 of the specification for
this chip&lt;/a&gt;, you’ll notice several
commands that can be used to read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  There’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;READ&lt;/code&gt;
command which tops out at a maximum &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; clock rate of &lt;code class=&quot;highlighter-rouge&quot;&gt;50MHz&lt;/code&gt;, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;FAST_READ&lt;/code&gt;, topping out at 108MHz, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DOR&lt;/code&gt; or dual read output, and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;QOR&lt;/code&gt; or quad read output.  There are also some faster read commands, such as
the &lt;code class=&quot;highlighter-rouge&quot;&gt;DIOR&lt;/code&gt; or dual I/O read and the &lt;code class=&quot;highlighter-rouge&quot;&gt;QIOR&lt;/code&gt; or quad I/O read.  There are also
4-byte address commands, although they are not required on this &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From my own experience, I have found that the reads delivering 4-bits at a
time are the fastest, especially when you can start the transaction immediately
with the address in what is sometimes called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Execute_in_place&quot;&gt;XIP&lt;/a&gt; mode–but we’ll have
to leave that discussion for another day, since the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt; layout doesn’t support these
high speed access modes.&lt;/p&gt;

&lt;p&gt;So let’s return to the basic &lt;code class=&quot;highlighter-rouge&quot;&gt;READ&lt;/code&gt; command.  This command starts from
the device in its idle or default state, requires the controller to send an
8-bit &lt;code class=&quot;highlighter-rouge&quot;&gt;READ&lt;/code&gt; command to the device (&lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h03&lt;/code&gt;), followed by a 3-byte (24-bit)
address.  Once done, the device will return bytes to us in sequence from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, starting at the
address we give it and incrementing by one for each byte read.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;spec&lt;/a&gt; shows a picture of
this operation for us, which I’ve copied below into Fig 10.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 10. The basic command to read from flash&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spi-spec.png&quot; alt=&quot;&quot; width=&quot;799&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Unlike many of the other things we’ve discussed, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; interaction is very
much an organized interaction over many clock cycles.
Let’s copy our interaction into
&lt;a href=&quot;https://www.wavedrom.com/editor.html&quot;&gt;wavedrom&lt;/a&gt; where we can edit it, and
then take another look again.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 11. Beginning our transaction design&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spi-bare.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This now becomes our goal–the specification our component must match.&lt;/p&gt;

&lt;p&gt;One key point in this picture is the clock rate.  The device will limit our
maximum &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; rate to 50MHz when using the basic read command, &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h03&lt;/code&gt;.  Given that my goal system clock rate for &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;this
design&lt;/a&gt; is 50MHz as well, this will work well.&lt;/p&gt;

&lt;p&gt;But how to get an &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;	of 50MHz from a 50MHz system clock?  To do this, &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/oclkddr.v&quot;&gt;we’ll
use&lt;/a&gt;
a &lt;code class=&quot;highlighter-rouge&quot;&gt;DDR&lt;/code&gt; output function of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SB_IO&lt;/code&gt; primitive provided by the
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt;.
That will allow us to run all of our logic at full speed,
even though this clock signal will toggle twice as fast as our logic.&lt;/p&gt;

&lt;p&gt;Before moving forward, let’s add one more design requirement to the
waveform file in Fig 11:  Our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
must also interact with a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;.  Let’s think about
how we’ll do this for a moment.  Ideally, the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
will need to accept a request from the bus, and then immediately
start the read transaction with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip.  Once done, the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
will need to return a response, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;, to the same bus.  All in all, this should look something like
Fig 12 below.  In between the request and the acknowledgment, the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;
signal should be high.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 12. Bus read transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spi-read.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Notice also that I added two other control wires to this picture: &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt;
is an internal counter, and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; is an output from our
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
to the &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/oclkddr.v&quot;&gt;DDR output
module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; counter will be used to keep track of where
we are in the sequence.  This is shown at the bottom of Fig 12 above.  Once
&lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; hits zero, we should be done with our transaction.  If you look
in the sequence above, you’ll notice that the same clock &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; hits
zero is also the clock &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; is high, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; is valid, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;
returns to zero, and &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; returns high.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; signal also needs a bit more explanation.  This isn’t the
actual &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; signal going to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip, but rather
a signal to the &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/oclkddr.v&quot;&gt;DDR output
module&lt;/a&gt;
telling it to toggle the clock.  You may notice that this signal is set
immediately after the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
strobe (request) signal is accepted (i.e. strobe is high and stall is low).
However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; signal doesn’t start toggling for another clock period
after setting this &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; signal high.  (This was unexpected, and so
we’ll discuss this again in our testing section below.  This one clock change
forced me to delay all of the other signals by one clock, as already shown in
Fig 12 above.&lt;/p&gt;

&lt;p&gt;For now, though, let’s return to that &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; signal and just point out that
we’ll be using this signal internally to control a basic state machine.&lt;/p&gt;

&lt;p&gt;We’ll start our state machine with a “bus request”: a request to read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.  That will look
something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then use this &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; signal to start our &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; counter.
Once started, &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; will just count down to zero, when we will
acknowledge the bus request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&#39;d65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second piece of circuitry we’ll want is a shift register controlling the
&lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt; values that we send to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
interface.  This will include both our command, &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h03&lt;/code&gt;, and the address we
wish to read from, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i_wb_address,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&#39;b0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.  (The last two bits are zero,
because the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
address is a word address, not a byte address.) Since we know the address at
time zero when the &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; is made, this can be as simple as,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Here&#39;s the data stream we wish to send
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h03&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the extra zero bit out front.  This is due to the extra clock it takes to
start the DDR &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; signal that we mentioned above, and diagrammed in Fig 12.&lt;/p&gt;

&lt;p&gt;All that remains is to set the rest of our signals based upon this counter,
using Fig. 12 above as a guide.  Remember, signals that are set on the
positive edge of a clock need to be set one clock before they are to be valid.
Hence, if you want to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; signal high so that it is
high when &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; returns to zero, you’ll want to set it that way when
&lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;7&#39;d1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, upon a bus request, we would get things started.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, while things are running, we update any signals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get to the end, we’ll need to shut down our interface and return
an acknowledgment and our data.  We can also turn the stall signal off
at this time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Turn off the interface
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, if &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay==0&lt;/code&gt; and there’s no &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt;, then we just want
our interface to remain idle.  We’ll also quietly ignore any write requests
from the bus, acknowledging them immediately while we are idle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Interface is idle
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is our primary capability.  We could ideally stop here if all you wanted
was a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
to only read from your &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;second-piped-reads-as-well&quot;&gt;Second: Piped reads as well&lt;/h3&gt;

&lt;p&gt;One problem with stopping here, though, is that this approach to reading from a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; memory is &lt;em&gt;painfully&lt;/em&gt;
slow–especially for a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Soft_microprocessor&quot;&gt;soft-core CPU&lt;/a&gt;
when its speed is limited by the speed it can read instructions from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
If you just count clock cycles, then the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
as is takes 66 cycles per
read.  This will limit any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s speed to
66 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycles_per_instruction&quot;&gt;cycles per instruction
(CPI)&lt;/a&gt;.  While this
may be faster than your average snail, I’d like &lt;a href=&quot;/about/zipcpu.html&quot;&gt;my
CPU&lt;/a&gt; to run a bit faster.&lt;/p&gt;

&lt;p&gt;If you remember our &lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;discussion about pipelining a
prefetch&lt;/a&gt;, then
you’ll remember how I managed to keep a rolling
&lt;a href=&quot;/zipcpu/2017/11/18/wb-prefetch.html&quot;&gt;prefetch&lt;/a&gt;
going in the presence of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
device.  That would increase the speed of a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; bound
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
from 66
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cycles_per_instruction&quot;&gt;CPI&lt;/a&gt;
(minimum) up to 33 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cycles_per_instruction&quot;&gt;CPI&lt;/a&gt;.  It’s
still a snail’s pace, but a factor of two better is still a factor of two.&lt;/p&gt;

&lt;p&gt;How might we do this?&lt;/p&gt;

&lt;p&gt;The first step is to go back to the
&lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;specfication&lt;/a&gt; for our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip, and then to
remember that once the read is started the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; will just keep producing
subsequent bytes.  This is what we’d like to capitalize on.  We could do this
if we just kept the transaction going for another 32-bit word, but only
if there was a request for the next word from the bus.  We’ll have to test
for that in a moment.&lt;/p&gt;

&lt;p&gt;We’ll start this modified design by returning to our timing diagram.
Specifically, we’d like to be able to accept a request for the next
address just in time so that we don’t lose any clock cycles in our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
transaction.  Hence, if we were just about at the end of one transaction,
then we should be able to extend it by one more transaction, as shown in Fig. 13
below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 13. Pipelined read transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spi-pipe.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Notice a couple key points here.  First, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; line never hits
zero–it just immediately goes into the next word.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; lines maintain their requirement, they are to be valid one
clock after &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay==1&lt;/code&gt;.  Indeed, in many
ways, this looks identical to what we had before with the exception that
following a &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; for the next word we go immediately into reading it
instead of sending a new address.&lt;/p&gt;

&lt;p&gt;Our first problem in this picture is the stall line–it needs to be low one
clock early, or when &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay==1&lt;/code&gt;, and not when &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; returns to zero.
The only thing is, we can’t do this at all times, but &lt;em&gt;only&lt;/em&gt; when
the address requested is for the next word, &lt;em&gt;only&lt;/em&gt; when this is a read request.&lt;/p&gt;

&lt;p&gt;That’s going to require some extra logic.&lt;/p&gt;

&lt;p&gt;It also requires a little bit of trickery that doesn’t quite follow the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/doc/wbspec_b4.pdf&quot;&gt;specification&lt;/a&gt;:
we’ll take a peek at any pending transaction on one clock and set a flag
based upon it,
then we’ll check that flag and drop &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; if necessary on the
following clock.  This new flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;next_request&lt;/code&gt; is shown at the bottom of
Fig. 13 above.&lt;/p&gt;

&lt;p&gt;So here’s the extra logic.  First, we’ll capture the next address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, we’ll put our &lt;code class=&quot;highlighter-rouge&quot;&gt;next_request&lt;/code&gt; flag together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;next_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can come back and review our basic signals from before.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt; signal is a don’t care, so we can keep our &lt;code class=&quot;highlighter-rouge&quot;&gt;wdata_pipe&lt;/code&gt; logic
simple.&lt;/p&gt;

&lt;p&gt;The logic for &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; doesn’t change either–it’s set to zero on any bus
request, and this pipe request (once the stall is lowered) is just another
bus request.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; logic does need to be adjusted, but this is minor.  Specifically, if there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; is already low, then only set
&lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; to 32 instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;65&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d65&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; signals are a touch more difficult.  First, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; signal needs to remain high one clock longer if &lt;code class=&quot;highlighter-rouge&quot;&gt;next_request&lt;/code&gt; is high.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// NEW LOGIC: keep the clock going if there&#39;s a second request
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// coming.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, and really this is the key piece of logic on which all the others
depend, the stall line needs to be lowered
so the request can be accepted in time to start the new transaction without
any delayed cycles.  This pins the stall low clock period to be the same 
clock period where &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// NEW LOGIC: Drop the stall line if a request for the
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// next address is pending.  The stall line will be
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// low in this case when ack_delay == 1.
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how these changes are fairly minor, but yet they can speed up a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/03/21/dblfetch.html&quot;&gt;instruction fetch by a factor of
two&lt;/a&gt; (… but only if the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt;
doesn’t use the bus for data, doesn’t branch, doesn’t … etc).  There are
some &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; speed
details in there that I’m glossing over.  Still, we haven’t changed our
logic all that much to get this additional capability.&lt;/p&gt;

&lt;p&gt;At this point, we could stop again.  We’d now have a faster &lt;code class=&quot;highlighter-rouge&quot;&gt;ROM&lt;/code&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; device.  The 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; would need to be written
using some other configuration, but we’d be able to read it in high speed.&lt;/p&gt;

&lt;p&gt;But, couldn’t we get the ability to read and write the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; for just a little bit more
work?  That’s the purpose of the configuration port that we’ll discuss next.&lt;/p&gt;

&lt;h3 id=&quot;third-configuration-port&quot;&gt;Third: Configuration port&lt;/h3&gt;

&lt;p&gt;Can we add a configuration port capability to this 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;?
Specifically, it would be nice to have access to all of those other commands
outlined in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;specfication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use a separate
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
port for this purpose.  By that I mean, let’s create a separate strobe signal,
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt;,
but otherwise share all of the signals between these two ports.  The &lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;bus
interconnect&lt;/a&gt;
can then set this new strobe signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt;, to indicate
a request on this new port.&lt;/p&gt;

&lt;p&gt;Unlike the primary &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt;,
we’ll make this one so that you can both write and then read
from this port.  Write’s will send 8-bits to the device over the &lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt; line,
and reads will read the 8-bits returned in the &lt;code class=&quot;highlighter-rouge&quot;&gt;MISO&lt;/code&gt; line.  In order to
allow longer interactions, extending beyond a single 8-bit transaction,
we’ll allocate bit &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[8]&lt;/code&gt; and use it to control the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; bit.&lt;/p&gt;

&lt;p&gt;Fig. 14 below shows this concept of this protocol.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 14. Configuration port transaction&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spi-cmd.svg&quot; alt=&quot;A direct SPI command, bypassing the controller&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Writes with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[8]&lt;/code&gt; low will cause 8-bits to be sent, reads will
return the response.  Writes with &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_data[8]&lt;/code&gt; set will return the
device to the mode where we can read data again.&lt;/p&gt;

&lt;p&gt;Were we building &lt;em&gt;only&lt;/em&gt; this interface, the logic would look &lt;em&gt;very&lt;/em&gt; similar to
just the logic necessary to implement Fig. 14 above.  We’d start with an
&lt;code class=&quot;highlighter-rouge&quot;&gt;user_request&lt;/code&gt; signal, capturing the write request on this configuration
channel.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_ata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we could just walk through our basic signals again.&lt;/p&gt;

&lt;p&gt;We’d start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt; signal.  This was based upon a &lt;code class=&quot;highlighter-rouge&quot;&gt;wdata_pipe&lt;/code&gt;
shift register before.  We can do this again now.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;24&#39;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can keep our &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; state variable as well.  Only now, we’ll start it
from &lt;code class=&quot;highlighter-rouge&quot;&gt;7&#39;d9&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;7&#39;d65&lt;/code&gt;, but the rest of the logic is nearly identical.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Amazingly, the rest of the logic is the same as it was before, save for
some new checks for &lt;code class=&quot;highlighter-rouge&quot;&gt;(user_request)&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;(bus_request)&lt;/code&gt; to know when
to start a transaction.&lt;/p&gt;

&lt;p&gt;This is why I like this particular approach over and above the bit-banging
approach I had tried on the fourth attempt I wrote about above–you can
share most of the configuration port logic with the regular read logic we
presented above.&lt;/p&gt;

&lt;h2 id=&quot;examining-the-controllers-verilog-code&quot;&gt;Examining the Controller’s Verilog Code&lt;/h2&gt;

&lt;p&gt;We’ve now walked through a description of how the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
interaction works, together with three separate interactions we want to
accomplish.  At this point, you know the basics, and you’ve seen some
useful code snippets.  The problem is we’ve ignored several key details
of this implementation along the way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Resets&lt;/p&gt;

    &lt;p&gt;Our &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal property list for the
Wishbone bus&lt;/a&gt;
requires the implementation of a reset signal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Aborts&lt;/p&gt;

    &lt;p&gt;Similarly, the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;formal properties for the
Wishbone&lt;/a&gt;
bus require us to support the case where the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit&quot;&gt;CPU&lt;/a&gt; (or other bus
master) suddenly aborts the 
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
transaction.&lt;/p&gt;

    &lt;p&gt;I’ve come across two approaches to this requirement.  One is to continue the
transaction anyway, and just not to acknowledge the result at the end.
The second approach, which we’ll use here, is to actually terminate the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
transaction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All Acknowledgments&lt;/p&gt;

    &lt;p&gt;A third problem we have is that we’ve only discussed how to respond to three
of four possible requests.  We’ve discussed how to respond to a bus read,
and to reads from and writes to the configuration port.  What about
writes to the read port?  Or reads from the configuration port when
the port isn’t in the configuration mode?  (i.e. when &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; remains high)&lt;/p&gt;

    &lt;p&gt;Some controllers would issue
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; for the unsupported
transactions shown in Fig. 15 below.  However, in my search for low logic
and simple controllers, I tend to &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;return acknowledgments
instead&lt;/a&gt;–even when a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt; might make more sense.
We can argue over whether or not this is the best choice, but today’s
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
doesn’t issue any
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 15. Request Combinations&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-ack.svg&quot; alt=&quot;Chart showing the different types of transactions&quot; width=&quot;480&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Actually, I’m personally kind of conflicted over whether or not this was the
  right implementation choice, so I’ll listen to anyone with an opinion on the
  issue.&lt;/p&gt;

&lt;p&gt;Specifically, we’ll simply acknowledge an illegal operation, even
  if it means returning potentially bad data.  In Fig. 15 above, I called
  these “Empty ACK”s.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Options&lt;/p&gt;

    &lt;p&gt;Because I know that different designs will have different needs, I’m also
going to implement our extensions as part of two options controlled by
one bit parameters: if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt;, the core will support
pipelined reads.  Similarly, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CFG&lt;/code&gt; parameter is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;b1&lt;/code&gt;
the core will support the configuration port.&lt;/p&gt;

    &lt;p&gt;Perhaps I should also create an &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_ERROR&lt;/code&gt; that can be set if I want this
core to return a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_error&quot;&gt;bus errors&lt;/a&gt;
for the unsupported cases in Fig. 15.  That would certainly be an option.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s one last difference you’ll see in the code below.  That is that I like
to split up my always blocks so that they only define the logic for one
register at a time.
This has two purposes.  First, it helps to minimize the gate count.  Wires
that don’t depend upon lots of nested if’s don’t need to have that nested
if logic required by other signals encumbering them.  Second, it keeps me
from the &lt;a href=&quot;http://www.clifford.at/papers/2017/togglemux/dac2017_paper.pdf&quot;&gt;issue associated with ‘x’, or don’t care,
values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do I find this multiple always block approach more confusing?  Yes.  However,
the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;
help to keep me out of trouble, and catch any cases I might be missing.&lt;/p&gt;

&lt;p&gt;That said, let’s walk through &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;the
code&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;spixpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// OPT_PIPE allows successive, sequential, transactions to
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// incrementing addresses without requiring a new address to be sent.
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Random access performance:	65+64(N-1)
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Performance when pipelined:	65+32(N-1)
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// OPT_CFG creates a configuration register that can be accessed through
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// i_cfg_stb when the core isn&#39;t busy.  Using this configuration
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// register, it is possible to send arbitrary commands to the flash,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// and hence to erase or program the flash.  Since the access is
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// arbitrary, other flash features are supported as well such as
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// programming or reading the one-time-programmable memory or more.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;next_request&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;user_request&lt;/code&gt; (i.e.
the configuration port request) from our discussions above.  Here are those
definitions now.  The big differences here from the logic I presented above
are the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CFG&lt;/code&gt; parameters.  The synthesis tool will use
these one-bit logic values to trim logic below, starting with this logic here
in case either of these two options are not defined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;next_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One requirement we shall place upon the
&lt;a href=&quot;/blog/2017/06/22/simple-wb-interconnect.html&quot;&gt;interconnect&lt;/a&gt;
is that the two ports are to have different addresses on the same bus.  In
other words, &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; may be high or &lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt;, but never both on the
same clock.&lt;/p&gt;

&lt;p&gt;We’ll start building our logic with the state variable that will drive
everything else, &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt;.  This logic is just as we discussed above,
save that we’ve now merged all three modes together, and added support for
resets and &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus
aborts&lt;/a&gt; that would bring us
back to an idle state early.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d65&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The simplest wire to control in this design is the &lt;code class=&quot;highlighter-rouge&quot;&gt;MOSI&lt;/code&gt; wire.  This follows
from the &lt;code class=&quot;highlighter-rouge&quot;&gt;wdata_pipe&lt;/code&gt; discussion above, only we’ve now combined the two types
of bus requests together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (bus_request)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (user_request)
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wdata_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the two extra bits at the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;i_wb_addr[21:0],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&#39;b00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.
These will be pruned by the optimizer within the &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;synthesis
tool&lt;/a&gt;.
I’ve kept them in there to keep the bottom bits of shift register byte aligned,
although they could easily be pruned here.  The top zero bit of
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&#39;b0,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;8&#39;h03&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; follows from the reality that it will cost a one
clock delay to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; to start toggling after we set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other thing to notice about the &lt;code class=&quot;highlighter-rouge&quot;&gt;wdata_pipe&lt;/code&gt; logic is that I’ve split
it into two blocks.  This is for exactly those same reasons I was describing
above.  Bits &lt;code class=&quot;highlighter-rouge&quot;&gt;[23:0]&lt;/code&gt; depend only upon the address, and then only upon a read
request.  Once set and the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
turns busy, these become a shift register that shifts left.
Bits &lt;code class=&quot;highlighter-rouge&quot;&gt;[32:24]&lt;/code&gt; are similarly a shift register when busy, but when upon
a regular bus request these are the read command.  Otherwise on a configuration
port write, these bits are set to the bottom 8-bits from the data bus.&lt;/p&gt;

&lt;p&gt;Turning to the bus acknowledgment signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt;, this is
just set any time the &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; transitions to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite.  We needed to support
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus aborts&lt;/a&gt;, so
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; is set to zero if the cycle line was dropped.&lt;/p&gt;

&lt;p&gt;Even that’s not it.  We still need to acknowledge anything that will not
set the &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
port in motion.  That’s the rest of the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; logic.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the configuration port parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_CFG&lt;/code&gt;, is set then we’ll need to
keep track of whether or not the port is forcing the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line low.  We’ll
call this the &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_user_mode&lt;/code&gt; and use a register of the same name to keep
track of whether or not we need to hold &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; low while waiting for the
next transaction.  This idea of holding &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; low was shown on the right
edge of Fig 14 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One variable we didn’t discuss above was the &lt;code class=&quot;highlighter-rouge&quot;&gt;actual_sck&lt;/code&gt; register defined
below.  This register’s purpose is to unwind the delay associated with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/oclkddr.v&quot;&gt;DDR
implementation&lt;/a&gt;,
which causes &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; one cycle after we set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; high.  This register
is an important part of knowing when to shift a new bit into &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; next.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need &lt;code class=&quot;highlighter-rouge&quot;&gt;actual_sck&lt;/code&gt; to tell us when to update the outgoing data register,
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt;, with a new &lt;code class=&quot;highlighter-rouge&quot;&gt;i_spi_miso&lt;/code&gt; value.  Basically, anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;actual_sck&lt;/code&gt;
is high, we’ll clock in a new &lt;code class=&quot;highlighter-rouge&quot;&gt;i_spi_miso&lt;/code&gt; bit on the right, pushing everything
left.  If &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_user_mode&lt;/code&gt; is high, we’ll also clear the high 24-bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;24&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;24&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s return to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
port again for a bit.  Here’s the logic for the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; signal.  Note the
few differences.  First, we set (inactivate) &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; on any reset or bus
idle (or abort), save when &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_user_mode&lt;/code&gt; is true.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, the rest is just about as it was, save for the extra configuration
mode logic: clearing &lt;code class=&quot;highlighter-rouge&quot;&gt;o_cs_n&lt;/code&gt; and holding it clear while &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_user_mode&lt;/code&gt; is
high, until it is released by the next configuration register write–following
Fig. 14 above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; signal is mostly just the merge of the logic above.
Differences include the reset and &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus
abort&lt;/a&gt;
logic.  Other than that, we set &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; on any request, and clear it once
the &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; register has counted down to one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Bus abort check
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that in the case of a pipelined read, the case where we don’t want
to clear &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; on clock one, &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; will be true.  Hence we only
need to check for &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay &amp;gt; 2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay == 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That brings us back to the bus, and to the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
stall signal, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt;.  If there’s no ongoing bus cycle, we’ll set
the stall line to zero.  Likewise, on any &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; or configuration port
&lt;code class=&quot;highlighter-rouge&quot;&gt;user_request&lt;/code&gt;, the stall line goes high while we respond to the request.
Finally, when &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; gets to zero, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; must also return to zero.&lt;/p&gt;

&lt;p&gt;That’s our logic below, save only for the special exemption when there’s a
request for the next address in memory, in order to support pipelined read requests.
That was the “New logic” we presented and discussed above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, our &lt;code class=&quot;highlighter-rouge&quot;&gt;next_addr&lt;/code&gt; logic below is identical to what we presented above,
save that this time we’ve used the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; flag to guarantee that this
&lt;code class=&quot;highlighter-rouge&quot;&gt;next_addr&lt;/code&gt; calculation will only create logic when &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; is non-zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;our flash
controller&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The big remaining question remaining, though, is whether or not
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;this core&lt;/a&gt;
will work in practice and on my &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO Board&lt;/a&gt;.  So,
let’s turn our attention from creating this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
to verifying it.&lt;/p&gt;

&lt;h2 id=&quot;formally-verifying-the-flash&quot;&gt;Formally Verifying the flash&lt;/h2&gt;

&lt;p&gt;Normally when I get to this section of a post, I walk through the
verification of a core in the order the logic exists within a core.&lt;/p&gt;

&lt;p&gt;I’m going to try a bit of a different order today.&lt;/p&gt;

&lt;p&gt;Let’s instead work through this core in the order that I would build the
properties within the file.  I’ll try to follow the spirit of the
&lt;em&gt;formal driven development&lt;/em&gt; concept I &lt;a href=&quot;/formal/2018/07/14/dev-cycle.html&quot;&gt;shared
earlier&lt;/a&gt;.  This means
that I will start with a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement (or four), then add the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus properties&lt;/a&gt;
to the core, some ad-hoc properties, and then finally the &lt;em&gt;contract&lt;/em&gt; the
core is supposed to meet.  Actually, I normally place the contract earlier
in the process, before the ad-hoc properties, but we’ll put the contract at
the end today because that’s where the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
will be found and therefore that was the last part I verified.&lt;/p&gt;

&lt;h3 id=&quot;step-one-covering-the-results&quot;&gt;Step one: Covering the results&lt;/h3&gt;

&lt;p&gt;The first formal property I like to start with these days whenever I build
a new IP core is a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement.  For bus
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slaves&lt;/a&gt;, this
usually takes the form of,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For many peripherals, this will exercise all of the logic in the core and
then present create a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
at the end of the logic flow.  This 
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
will show you an example of how the internal logic functions (or doesn’t).&lt;/p&gt;

&lt;p&gt;In this case, that simple &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement doesn’t work like I want.
Instead of giving me a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
through all of the logic in the core, it just immediately returns one of the
empty acknowledgments.&lt;/p&gt;

&lt;p&gt;That’s not very useful.&lt;/p&gt;

&lt;p&gt;Hence, to get a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; covering
both a bus request and a configuration write command, I set two flags,
&lt;code class=&quot;highlighter-rouge&quot;&gt;pending_bus_request&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pending_user_request&lt;/code&gt;, to record when such a
request has been made.  In order to keep this logic from impacting any other
part of the proof, I place it in a generated section depending upon a formal
option cover parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_COVER&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_COVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_pending_user_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Pending bus (read) request
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That captures a &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; of &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;this
core&lt;/a&gt;
illustrating a read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.  You can see
this &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; below in Fig 16.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 16. Cover trace of the basic read operation&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-trace-read.png&quot; alt=&quot;Trace of a SPI read transaction&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fig 16 should look very much like our design requirement trace from Fig 12
above.&lt;/p&gt;

&lt;p&gt;Now for the configuration port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_pending_user_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_pending_user_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_pending_user_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_pending_user_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// The actual cover statement for the user request
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pending_user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The configuration &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;
this generates is shown below in Fig 17.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 17. Cover trace of a configuration port operation&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-trace-cfg.png&quot; alt=&quot;Trace of a configuration port request&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Keep in mind, I’m able to acquire and examining these
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt; &lt;em&gt;without writing any
simulation code&lt;/em&gt;.  That comes later, in a discussion we’ll need to save for
another day.&lt;/p&gt;

&lt;p&gt;Finally, to capture the pipelined read request, we’ll cover the entrance
into the pipeline read mode, just like we traced out in Fig. 13 above.
For this purpose, we can just &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; the lowered stall line when &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt;
is one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;7&#39;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only problem is, the formal tools failed to find
&lt;em&gt;any&lt;/em&gt; &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; that would
make this &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement true.  To debug that failed &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement,
I backed up a step, and tried to &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; the prior clock cycle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_pending_bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;7&#39;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eventually I get the &lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; in
Fig 18 from the first of these two &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statements.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 18. Cover trace showing the entrance of a pipelined read request&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/spix-trace-pipe.png&quot; alt=&quot;Trace showing the entrance to a pipelined read&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is also my general approach for those times where I am struggling to
get a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement to produce a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt;: I back up a
step, add an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement, and then repeat the process
until I find the bug–just like I showed here.  &lt;code class=&quot;highlighter-rouge&quot;&gt;assert()&lt;/code&gt; statements can help
this process as well.&lt;/p&gt;

&lt;p&gt;Fig 18 also illustrates one of the problems with &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statements: the tool
is free to cover your logic any way it pleases.  In this case, it covered the
entrance into the pipelined read, and then immediately issued a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus abort&lt;/a&gt;
by dropping the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_cyc&lt;/code&gt; line.  While legal, it’s hardly satisfying.&lt;/p&gt;

&lt;p&gt;We could add some assumptions to keep this from taking place.  That’s part of
the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;F_OPT_COVER&lt;/code&gt; generate block–to be able to add any
assumptions necessary for getting the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt; you want.  For example,
we could add an assumption that there would never be any
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus abort&lt;/a&gt;s during
pipelined reads.  However, this &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; has accomplished my purpose as
it is: it has proven that a pipelined read request will bring the core
back into the regular read logic as desired.  Therefore, I’ll leave any
further work with assumptions as a exercise for the student.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;/formal/2018/07/14/dev-cycle.html&quot;&gt;helps me create an initial
draft&lt;/a&gt;
of this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller
core&lt;/a&gt;.
Well, not quite.  I’ll describe a missing piece in the next section.&lt;/p&gt;

&lt;h3 id=&quot;step-one-reset-and-bus-interaction&quot;&gt;Step one: Reset and bus interaction&lt;/h3&gt;

&lt;p&gt;One of the problems with the &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statements in the last section is that,
when unconstrained, the incoming bus request doesn’t act like a bus request
should.  Bus requests may be made, stalled, and then new requests will be made
even though the prior request hasn’t gone been accepted into the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;.
Similarly, the strobe line might be high, even though the bus cycle line is low.
For these reasons, we need to bring in some &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;properties describing our
bus&lt;/a&gt;.  Let’s do that in
this section, starting with the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; signal the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus properties depend upon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reset logic uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; operator.  This operator will only work right
if the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; time doesn’t occur before time began with the &lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt;
statements.  Hence, we’ll create an &lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; register to tell us when
we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$past()&lt;/code&gt; operator successfully.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We want to &lt;code class=&quot;highlighter-rouge&quot;&gt;assume()&lt;/code&gt; that our design starts with the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; line high.
This means we want to assume &lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; in both the initial state, and anytime
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_past_valid&lt;/code&gt; is false.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now for a fun trick: I’d like to insure that any register responsive to an
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; signal is also properly initialized to the same value.  Checking
for &lt;code class=&quot;highlighter-rouge&quot;&gt;!f_past_valid&lt;/code&gt; tells us if we are in the initial state, whereas
&lt;code class=&quot;highlighter-rouge&quot;&gt;$past(i_reset)&lt;/code&gt; checks whether or not our design just followed an
&lt;code class=&quot;highlighter-rouge&quot;&gt;i_reset&lt;/code&gt; signal.  By placing the asserted values below, that guarantees them
to be the same under both circumstances.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can start to get the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt; to act like
a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt; should.&lt;/p&gt;

&lt;p&gt;To do this, we’ll reference a &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
bus&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/ex/fwb_slave.v&quot;&gt;property
file&lt;/a&gt; from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
repository.  This core needs a bit of configuration, so let’s configure its
parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AW&lt;/code&gt;: Our address bus has 22 bits, sufficient to handle a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
of 16MB of memory.  (Remember the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone
address&lt;/a&gt; is a &lt;em&gt;word&lt;/em&gt;
address, and not an 8-bit octet address.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_STALL&lt;/code&gt;: Our design may stall the bus no more than 66 clock cycles,
 one more than the length of one non-pipelined bus read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_ACK_DELAY&lt;/code&gt;: Similarly, it may take at most 66 cycles for an
acknowledgment to be returned upon any request.&lt;/p&gt;

    &lt;p&gt;This is a bit of overkill for both &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_STALL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_ACK_DELAY&lt;/code&gt;
by one cycle, but it gives us a little wiggle room in case our design changes
in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_LGDEPTH&lt;/code&gt;: Since both counters require 7-bits, and since we’ll never have
 more than &lt;code class=&quot;highlighter-rouge&quot;&gt;2^7&lt;/code&gt; or 128 requests outstanding, we’ll set the log (based two)
of the pipeline depth to 7.  This also determines the number of bits in our
counters: &lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs&lt;/code&gt;, the number of requests that have been made,
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_nacks&lt;/code&gt;, the number of acknowledgments that have been returned,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding&lt;/code&gt;, the number of currently outstanding transactions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F_MAX_REQUESTS&lt;/code&gt; describes the maximum number of requests that can be made
in any transaction.  This creates an assertion that
&lt;code class=&quot;highlighter-rouge&quot;&gt;f_nreqs &amp;lt; F_MAX_REQUESTS&lt;/code&gt;.  While this is great for our non-pipelined mode,
in the pipelined mode it is possible to make request upon request.  Hence,
we’ll set this to one for the non-pipelined mode, and to zero if we are
running in a pipelined mode.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s enough configuration to include this property set in our design.  We’ll
make one other adjustment here: we’ll &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt;
together to create one unified &lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slave&lt;/a&gt; port.  This saves us from including two
separate property files to describe each of the two
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/zipcpu/2017/05/29/simple-wishbone.html&quot;&gt;slaves&lt;/a&gt;, but it’ll give us a bit of hassle that we’ll have to clean up in a moment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;localparam&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_nreqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_nacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;fwb_slave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_STALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_ACK_DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LGDEPTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_MAX_REQUESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_OPT_MINCLOCK_DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slavei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4&#39;hf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_nreqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_nacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first clean up assumption is to require that only one &lt;code class=&quot;highlighter-rouge&quot;&gt;i_*_stb&lt;/code&gt; signal
will ever be active at any given time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, we’ll require that any time either of &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;i_cfg_stb&lt;/code&gt; is
active, &lt;em&gt;and&lt;/em&gt; the bus is stalled, that the same strobe signal remains active
on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In hindsight, this just makes sense.  In reality, I didn’t put this assumption
into place until I saw this rule violated in one of my early &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt;
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we’ve added our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;bus properties&lt;/a&gt;,
the bus starts to act right in the
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;traces&lt;/a&gt;
generated by our &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statements.  The design just doesn’t pass
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
yet.  For that, we’ll need to add some ad-hoc assertions in the next section.&lt;/p&gt;

&lt;h3 id=&quot;step-two-ad-hoc-immediate-assertions&quot;&gt;Step two: Ad-hoc Immediate assertions&lt;/h3&gt;

&lt;p&gt;Often I separate formal properties into two types: there’s the primary
type based upon the outputs of the core that’s designed to determine whether
the core functions as intended.  We’ll call this the &lt;em&gt;contract&lt;/em&gt; that the
core needs to fulfill.  Other properties are more ad-hoc.  They
wouldn’t be needed, save for the reality that
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
starts with unconstrained values within the core.  We’ll express how
this core needs to operate, it’s &lt;em&gt;contract&lt;/em&gt; if you will, using &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;System Verilog
sequences&lt;/a&gt;
in the next section.  For the purpose of this section, let’s just constrain
the design to make certain it doesn’t enter into any illegal states during
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll start out with some assertions regarding our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone properties&lt;/a&gt;.
Specifically, we need to ensure that the counters within the &lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone property
module&lt;/a&gt;
match our current understanding of our state.  Further, since a pipelined
operation can go on forever, we’ll only examine the number of outstanding
transactions kept in the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding&lt;/code&gt; value returned from the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone property&lt;/a&gt; set.&lt;/p&gt;

&lt;p&gt;For our first test, we’ll insist that we never have more than one outstanding
request.  That is unless we are in a pipelined read operation, where there
would be one cycle where the number of outstanding transactions would be two
instead of one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a similar fashion, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is zero then we aren’t in an
extended transaction.  Such a time step must either include the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt;
from a just-ended transaction or the number of outstanding transactions
must be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, without anything more, we may get a
&lt;a href=&quot;/blog/2017/07/31/vcd.html&quot;&gt;trace&lt;/a&gt; from the tools
that has &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; on for a very long time, yet &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding&lt;/code&gt; is some value
inconsistent with our design.  For example, the core could be responding to one
empty acknowledgment request after another while &lt;code class=&quot;highlighter-rouge&quot;&gt;f_outstanding ==2&lt;/code&gt;.&lt;br /&gt;
Of course the core would never get into this situation, but we need to
communicate that to the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine.&lt;/p&gt;

&lt;p&gt;In the first case, following any non-pipelined &lt;code class=&quot;highlighter-rouge&quot;&gt;i_wb_stb&lt;/code&gt; request, there should
then be only one request outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise in the middle of any request, there should only be one bus request
outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;highlight&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-verilog&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;verilog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;there&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;are&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acknowledgments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;they&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acknowledgments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discussed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earlier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outstanding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is only one time we should ever have two requests outstanding: that is
when we just accepted a request for a pipelined interaction and &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; is
true.  On that same clock, the acknowledgment line should be high, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt;
should be active (low), and &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; should be 32.  Under no other
circumstances should there ever be two requests outstanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Following any bus strobe that is neither a &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; nor a &lt;code class=&quot;highlighter-rouge&quot;&gt;user_request&lt;/code&gt;
of the configuration port, there should immediately be an acknowledgment
on the next clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_outstanding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the last of the assertions necessary to make certain the formal
properties for &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;this
core&lt;/a&gt;
properly integrate with the properties from our
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone property set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s make some assertions of the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
protocol next.&lt;/p&gt;

&lt;p&gt;If you’ve taken my course in formal verification, you may remember that I
usually spend some time discussing how to properly describe a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
protocol interaction in the multi-clock section.  This is not necessary
here.  Not only is everything synchronous, but the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt; interaction
of interest isn’t slow enough to make any of those multiclock property
descriptions, &lt;code class=&quot;highlighter-rouge&quot;&gt;$rose()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$fell()&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;$stable()&lt;/code&gt;, all that useful here.&lt;/p&gt;

&lt;p&gt;Still, we can describe some useful parts of the interaction here.&lt;/p&gt;

&lt;p&gt;For example, we’ve chosen to leave the clock idle unless &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt; is low.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While I suppose we could just leave the clock running, that would break some
other things–notably the configuration port.&lt;/p&gt;

&lt;p&gt;Similarly, any time &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is other than zero, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; line should be
high.  This would reference either &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; going to the &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/oclkddr.v&quot;&gt;output DDR
module&lt;/a&gt;,
or our local version of whether or &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; is really ticking in &lt;code class=&quot;highlighter-rouge&quot;&gt;actual_sck&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Anytime &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is zero, we are not in the middle of any transactions.
Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_stall&lt;/code&gt; should also be zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Likewise, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is ever greater than one, then the bus should
be stalled.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Indeed, with one exception any time &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is greater than zero the bus
should be stalled.  The one exception is just before a pipelined transaction.
Hence, if &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is one and pipelined reads are disabled, or equivalently
if we are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_user_mode&lt;/code&gt;, then the interface should be stalled
when &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; is one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just to constrain the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine further, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; should always be less than or equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;65&lt;/code&gt;.
Although we know this to be true already, the
&lt;a href=&quot;/blog/2018/03/10/induction-exercise.html&quot;&gt;induction&lt;/a&gt;
engine can do some weird things if you don’t limit values like this properly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In a similar fashion, if &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_user_mode&lt;/code&gt; is ever true, then the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; must be less than or equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our final ad-hoc assertion will be that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt; is only ever active
(low) if either we are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg_user_mode&lt;/code&gt; or if &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay &amp;gt; 0&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These simple assertions above will keep us in the valid operating range of &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;this
core&lt;/a&gt;.
Now we just need to convince ourselves that this core actually works and does
what it is supposed to do.  To do that, we’ll try out some of the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;System
Verilog
sequences&lt;/a&gt;
available to the &lt;a href=&quot;http://www.verific.com&quot;&gt;Verific-enabled&lt;/a&gt; version of
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;step-three-sequence-assertions&quot;&gt;Step three: Sequence Assertions&lt;/h3&gt;

&lt;p&gt;If you recall from the beginning of this article, one of the reasons for
this project was to see if a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
would be a good test of &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;System Verilog
sequences&lt;/a&gt;.
In particular, I’ve been looking for some of the use cases that highlight
the utility of &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;System
Verilog’s
sequences&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Prior to this project, I had only tested
&lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;’s ability to handle
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;System Verilog
sequences&lt;/a&gt;
with FIFOs and a &lt;a href=&quot;https://github.com/ZipCPU/wbuart32/blob/master/rtl/txuartlite.v&quot;&gt;UART
transmitter&lt;/a&gt;.
Since starting this project, I have now tested and tried
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;them&lt;/a&gt;
out with a &lt;a href=&quot;https://github.com/ZipCPU/wbpmic/blob/master/rtl/smpladc.v&quot;&gt;SPI-based ADC&lt;/a&gt;,
and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_random-access_memory&quot;&gt;SRAM&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/sramdev.v&quot;&gt;controller&lt;/a&gt;
for this same &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;ICOZip Project&lt;/a&gt;.
While I like the expressiveness of the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;System Verilog
sequence&lt;/a&gt;
language, I’m also glad I learned how to do
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal verification with immediate assertions only&lt;/a&gt; first.  &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;Sequence&lt;/a&gt;
are not nearly as simple or as easy to work with as the immediate assertions
we’ve been working with, and the background I gained in immediate assertions
helped me a lot while learning
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll split the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
discussion here into two parts.  The first part, contained in this section,
will be about guaranteeing that our &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; based state machine works as
desired.  In the next section, will dig in a bit further and verify that what
gets returned to the bus is actually what we read from the device.  Once we’re
done, we’ll move on to how I tested &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;this
core&lt;/a&gt;
on the actual hardware of the &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In many ways, it might make the most sense to read this section from the
bottom up, rather than the top down, because in order to finally express
what we want to at the end, we have to build a lot of infrastructure to get
there.  Hence, if you want to see where we are going, skip to the end of
this section and look over the assertions found there.&lt;/p&gt;

&lt;p&gt;That said, let’s start with two variables these
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
will use.  In particular, we want some values that are guaranteed to stay
constant throughout the duration of the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;–values
the &lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
can reference, and that won’t change.  We’ll create two here, one to capture
the last address requested of the bus, and a second to capture what would be
the next address after that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;cp&quot;&gt;`ifdef&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;VERIFIC&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_next_addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_next_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our first assertion is something simple: Any request, other than a
&lt;code class=&quot;highlighter-rouge&quot;&gt;user_request&lt;/code&gt; (i.e. a write) of the configuration port or a normal
&lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; (i.e. a read) should be acknowledged on the next clock, without
stalling the bus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bus_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this form of an assertion is new to you, then don’t let it be.  We’ve been
discussing this basic assertion for some time, only we’ve described it in
a different fashion.  Instead of,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;we’ve been writing&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The two are really just two forms of the same thing.  Personally, I like the
new form.  It seems simpler and cleaner.&lt;/p&gt;

&lt;p&gt;What about the &lt;code class=&quot;highlighter-rouge&quot;&gt;disable iff&lt;/code&gt; statement?  That just disables the assertion
on any of the clocks that it would be applied to.  Hence,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s another new form as well.  Instead of writing,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;we could equivalently write&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these newer forms, however, currently require the
&lt;a href=&quot;http://www.verific.com&quot;&gt;Verific enabled&lt;/a&gt;
version of &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using this newer form, I can express&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_next_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is to say, if we ever accept a new &lt;code class=&quot;highlighter-rouge&quot;&gt;bus_request&lt;/code&gt; while &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt;
is active (low), then &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; must be valid and this new request
address &lt;em&gt;must&lt;/em&gt; be for the next address in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Those two assertions should get your feet wet.  Now let’s try our first
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.
If you’ve never used them,
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;
are neither assertions nor assumptions.  Instead, they can be used to describe
a &lt;em&gt;&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;&lt;/em&gt;
of states that can then be used within an assertion, assumption, or even
a cover property.&lt;/p&gt;

&lt;p&gt;For this first sequence, let’s describe the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
read command where we send a &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h03&lt;/code&gt; to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
device.  This sequence starts with an idle cycle with &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt; active
and &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; true, but &lt;code class=&quot;highlighter-rouge&quot;&gt;actual_sck&lt;/code&gt; hasn’t been set yet.&lt;/p&gt;

&lt;p&gt;We’ll start this description by naming our
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;READ_COMMAND&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;8&#39;h03&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll describe that first state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the next clock, we get into sending the actual command contained in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_mosi&lt;/code&gt; output values.  To express that this will start on the next
clock, we’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;##1&lt;/code&gt; expression.  This portion of the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;,
however, will take us a whole 8 clocks.  During all of those 8 clocks,
we’ll want to assert that the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_last_addr&lt;/code&gt; value stays constant, that
&lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt; stays active, and that &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; remains true.  Hence,
&lt;em&gt;throughout&lt;/em&gt; these next 8-clocks, these must hold.  That’s the purpose of
the &lt;em&gt;throughout&lt;/em&gt; statement.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can work our way through each of those individual 8 clocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
description, I’ve tried to constrain and describe every register that’s a part
of state associated with sending this command.  Further, since the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_mosi&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; values changed during these 8-clocks, I didn’t lump them
together with the other predicates that needed to be true &lt;code class=&quot;highlighter-rouge&quot;&gt;throughout&lt;/code&gt;
all eight of these cycles.&lt;/p&gt;

&lt;p&gt;The next
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
is the one where we send the address we want to read from to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  Since the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;
is word based, and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; is byte based, we’ll add
two zero’s at the end of this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.
The format itself should look very similar to the
format of the last one: we’ll start by naming the 
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;SEND_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then we’ll define those properties that must hold throughout the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;finally, we’ll step through each of the clock cycles within the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t forget the two zero bits at the end of the address!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now define a third
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;:
the one where we actually read the data from the device.  This has the exact
same form as before, only we’re going to introduce  new expression, the &lt;code class=&quot;highlighter-rouge&quot;&gt;[*8]&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;[*7]&lt;/code&gt;.  This means that we want to repeat the given state by that many
clocks.  I’m going to use this to help keep &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; bounded–at least
bounded enough that the formal tools properly recognize after more than eight
clocks which state of this sequence is taking place, should they decide
to try to start in the middle of the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As before, we start with the name of the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
followed by the properties that will hold &lt;code class=&quot;highlighter-rouge&quot;&gt;throughout&lt;/code&gt; the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;READ_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first clock period, however, will be replicated 8 times.  It will primarily
just constrain &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And so on, repeating each clock period 8 times until the last.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7&#39;d9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7&#39;d8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7&#39;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Watch the parentheses, because that last line also ends the &lt;code class=&quot;highlighter-rouge&quot;&gt;throughout&lt;/code&gt;
statement that we started with, even though the we’re not done defining
this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
yet.&lt;/p&gt;

&lt;p&gt;We’ve broken the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
at this point because the next period is special.
That’s the only period where the our signals might change in order to support
a pipelined interaction.  In this case, the stall line might be low if
&lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; is also true, otherwise we remain stalled like we were in the
last clock.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we’ll end this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
describing a read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;
with a bus acknowledgment, and a guarantee if &lt;code class=&quot;highlighter-rouge&quot;&gt;OPT_PIPE&lt;/code&gt; isn’t true
that the bus has returned to idle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What can you do with all these
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
we’ve just defined?  You can string them together within an assertion!&lt;/p&gt;

&lt;p&gt;The following assertion asserts that, following any read request from the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
the device will send the &lt;code class=&quot;highlighter-rouge&quot;&gt;READ_COMMAND&lt;/code&gt;, the address (&lt;code class=&quot;highlighter-rouge&quot;&gt;SEND_ADDRESS&lt;/code&gt;), and
then read the data (&lt;code class=&quot;highlighter-rouge&quot;&gt;READ_DATA&lt;/code&gt;) from the device.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Send command 8&#39;h03
&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_COMMAND&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Send the requested address
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_last_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SEND_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Clock in 32-bits of data
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not bad, huh?&lt;/p&gt;

&lt;p&gt;This gets us most of the way there.  However, a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
is a type of memory, and there are
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;particular properties&lt;/a&gt;
you want to formally verify with respect to any
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory&lt;/a&gt;
interaction.  That will be our next section.&lt;/p&gt;

&lt;h3 id=&quot;step-four-known-addressdata-assertions&quot;&gt;Step four: Known Address/Data Assertions&lt;/h3&gt;

&lt;p&gt;The rule for formally verifying
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memories&lt;/a&gt; is that
you want to &lt;em&gt;assume&lt;/em&gt; any time you read from an arbitrary address, that
you get a known arbitrary value in response.  The second part is to &lt;em&gt;assert&lt;/em&gt;
that whenever you return the result of the read to the bus, you also return the
arbitrarily chosen value.&lt;/p&gt;

&lt;p&gt;I initially created those rules here in
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
logic.  One property assumed known data would be read from &lt;code class=&quot;highlighter-rouge&quot;&gt;i_spi_miso&lt;/code&gt;
following a request from that known address, and the second property asserted
that the same known data would be returned in &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_data&lt;/code&gt; once &lt;code class=&quot;highlighter-rouge&quot;&gt;o_wb_ack&lt;/code&gt; was
set.&lt;/p&gt;

&lt;p&gt;I’ve since torn that work up.  It turns out that there’s an easier way
to do the same thing when you are using
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;.
We’ll still allow the formal tool to pick an arbitrary data value, but we can
do this without the heavy weight of the formal
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memories&lt;/a&gt; rule.
In particular, we don’t need the arbitrary address, just the data.&lt;/p&gt;

&lt;p&gt;Here’s how we’ll do it: we’ll create a rule that whenever the arbitrary data is
read, regardless of what address it is read from, that value read from the
device is returned to the bus.&lt;/p&gt;

&lt;p&gt;We’ll start at the top by assuming a constant 32-bit value.  The formal solver
will get to pick any value it wants for these 32-bits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anyconst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we’ll define a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
where an arbitrary octet, &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;, is received from the interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DATA_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you notice that this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
accepted an 8-bit parameter?  Neat!&lt;/p&gt;

&lt;p&gt;Now, if we string four of these 
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
together, then we can describe receiving an arbitrary value on the &lt;code class=&quot;highlighter-rouge&quot;&gt;i_spi_miso&lt;/code&gt;
wire.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;sequence&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;THIS_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;DATA_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;endsequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that this only works because &lt;code class=&quot;highlighter-rouge&quot;&gt;f_data&lt;/code&gt; is constant, since the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
will reference the current value of &lt;code class=&quot;highlighter-rouge&quot;&gt;f_data&lt;/code&gt;, rather than the value
when the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
is activated.&lt;/p&gt;

&lt;p&gt;Now, here’s the trick: &lt;code class=&quot;highlighter-rouge&quot;&gt;THIS_DATA&lt;/code&gt; is a
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
containing a description of our known data being received.  While this
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
is being received, &lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; will go from &lt;code class=&quot;highlighter-rouge&quot;&gt;7&#39;d32&lt;/code&gt; down to &lt;code class=&quot;highlighter-rouge&quot;&gt;7&#39;d1&lt;/code&gt;.  Once
&lt;code class=&quot;highlighter-rouge&quot;&gt;ack_delay&lt;/code&gt; hits zero, or goes around again, there should also be an
acknowledgment.  So, let’s add to that assertion that the outgoing data also
matches the received data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THIS_DATA&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&#39;d32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Did you see how this accomplishes both sides of the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory proof&lt;/a&gt;
requirement?  Because we placed the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;known data&lt;/a&gt;
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
before the non-overlapping implication operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;|=&amp;gt;&lt;/code&gt;, the
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequence&lt;/a&gt;
acted as an assumption.  As a result, we now know that no matter what
value is received, the proper value will be returned.&lt;/p&gt;

&lt;p&gt;I then applied the same basic approach to the configuration port.  However,
in the interests of space in an already long article, I’ll let you peruse it
if you are interested.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Configuration writes
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throughout&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_wr_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&#39;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// And then configuration reads.  First the write needs to
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// charge the o_wb_data buffer
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_cyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_cfg_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_ack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;24&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_stall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Then it needs to stay constant until another SPI
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// command
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;iff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_user_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;|=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endgenerate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;how-to-test-it&quot;&gt;How to test it?&lt;/h2&gt;

&lt;p&gt;Now that we’ve built &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;our
controller&lt;/a&gt;,
how shall we test it to know that it works?&lt;/p&gt;

&lt;p&gt;Hopefully you’ve been around long enough to remember all of our work building
a &lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;basic debugging bus&lt;/a&gt;,
following the &lt;a href=&quot;/blog/2017/05/22/a-vision-for-controlling-fpgas.html&quot;&gt;initial vision I presented for controlling FPGA
logic&lt;/a&gt;.
With just a little effort, we can connect a
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;
and our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
to this &lt;a href=&quot;/blog/2017/06/28/dbgbus-goal.html&quot;&gt;debugging bus&lt;/a&gt;,
and then see how our
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; interacts
with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 19. Digilent&#39;s Digital Discovery 2&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/digital-discovery-top-130.png&quot; alt=&quot;A Picture of Digilent&#39;s Digital Discovery 2 logic analyzer&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;this particular core&lt;/a&gt;,
I didn’t start my debugging with the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;.
I started instead with a &lt;a href=&quot;https://store.digilentinc.com/digital-discovery-portable-logic-analyzer-and-digital-pattern-generator&quot;&gt;Digilent Digital
Discovery 2&lt;/a&gt;.
Why?  Two reasons: 1. I had it &lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;available to
me&lt;/a&gt;
and on my desk, and 2. I was concerned about the timing of the clock pulses.
Sure enough, the 
&lt;a href=&quot;https://store.digilentinc.com/digital-discovery-portable-logic-analyzer-and-digital-pattern-generator&quot;&gt;DD&lt;/a&gt;
revealed that the
&lt;a href=&quot;http://www.latticesemi.com/Products/FPGAandCPLD/iCE40&quot;&gt;iCE40&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SB_IO&lt;/code&gt; primitive in DDR mode delayed the &lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt; by one clock more than I was
expecting.  (The code above has been fixed to accommodate this.)  This sent
me back through the entire design to do some massive updates:
all other signals needed to be delayed by one and the &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_sck&lt;/code&gt; signal
needed to return to zero one cycle earlier.  Indeed, there were several head
scratching moments at this point in order to get the timing right.&lt;/p&gt;

&lt;p&gt;We’ve &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;discussed hooking
up&lt;/a&gt; the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;
to a design before.  I’ll just touch on a couple of pieces briefly here.
First, you need to decide which 32-bits you want to capture and select a
relevant trigger.  I personally like to place the trigger in the MSB of this
word–it makes it easier to switch to a &lt;a href=&quot;https://github.com/ZipCPU/wbscope/blob/master/rtl/wbscopc&quot;&gt;compressed wishbone
scope&lt;/a&gt; later if I
need to.   In my case, I ultimately chose the following wires to capture:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;spixpress_debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flash_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flash_cfg_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;flash_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flash_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;flash_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;mh&quot;&gt;3&#39;h0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_spi_sck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_spi_mosi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_spi_miso&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That gives me access to all of the critical
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
wires, as well as the entire
&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
interface.&lt;/p&gt;

&lt;p&gt;The majority of the connections required to connect this to the
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone&lt;/a&gt;
bus were made by &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;–allowing
me to remove the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;
later if I so wish by just removing the &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/auto-data/spixscope.txt&quot;&gt;scope’s AutoFPGA configuration file’s
name&lt;/a&gt;
from the &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; command line.
Among other changes, this places the following additional code into the &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/main.v&quot;&gt;main
design file&lt;/a&gt; of
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;this design&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;n&quot;&gt;wbscope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LGMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYNCHRONOUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOLDOFFBITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;spixscopei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_spi_cs_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spixpress_debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_cyc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wb_stb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spixscope_sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wb_we&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;spixscope_ack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spixscope_stall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spixscope_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;spixscope_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/auto-data/spixscope.txt&quot;&gt;configuration
file&lt;/a&gt;
also places a &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; into the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/regdefs.h&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;regdefs.h&lt;/code&gt;&lt;/a&gt;
file, defining &lt;code class=&quot;highlighter-rouge&quot;&gt;R_SPIXSCOPE&lt;/code&gt; to have the address of the control
register for the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see the entire &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/auto-data/spixscope.txt&quot;&gt;configuration file&lt;/a&gt;
for this debugging scope
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/auto-data/spixscope.txt&quot;&gt;here&lt;/a&gt;.
Adding this to the &lt;a href=&quot;https://github.com/ZipCPU/autofpga&quot;&gt;AutoFPGA&lt;/a&gt; command line
in the &lt;a href=&quot;https://github.com/ZipCPU/icozip/tree/master/rtl/auto-data&quot;&gt;auto-data&lt;/a&gt;/&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/auto-data/Makefile&quot;&gt;Makefile&lt;/a&gt;
will add this to the design, and removing it from the command line will remove
this component and &lt;a href=&quot;/zipcpu/2017/10/05/autofpga-intro.html&quot;&gt;all of its
dependencies&lt;/a&gt;
from the design as well.  There’s also a &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/spixscope.cpp&quot;&gt;software
component&lt;/a&gt;
to this
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;’s
setup as well, found in the &lt;a href=&quot;https://github.com/ZipCPU/icozip/tree/master/sw/host&quot;&gt;sw/host
directory&lt;/a&gt;
of &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;the project&lt;/a&gt;—but we’ve discussed &lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;how
to build those
before&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;test-one-using-wbregs-to-read-a-known-value-from-the-flash&quot;&gt;Test one: Using wbregs to read a known value from the flash&lt;/h3&gt;

&lt;p&gt;The next step, and really the first true test, is an important one when
designing for an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;:
you want to make certain you can read back a &lt;em&gt;known piece of data&lt;/em&gt; from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.  While
there may be other uses for the vendor identification protocol within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; specification, I find that
using it as a test read from the device is the most useful.  In particular, if
I read that ID from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
I can quickly determine if I managed to get the sequencing right between all of
the various signals.&lt;/p&gt;

&lt;p&gt;Looking over the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;specfication&lt;/a&gt;,
you’ll see that sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;0x9f&lt;/code&gt; to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
chip will request this identification value.  Ever after until the chip select
is deactivated, the incoming data to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; is ignored, and the
outgoing data from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
will be this known identification sequence–just as we showed in Fig. 14 above.&lt;/p&gt;

&lt;p&gt;Most of my designs contain a command-line driven
&lt;a href=&quot;https://en.wikipedia.org/wiki/PEEK_and_POKE&quot;&gt;peek and poke&lt;/a&gt;
capability &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;I call
&lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt;&lt;/a&gt;.
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/wbregs.cpp&quot;&gt;This command&lt;/a&gt;,
found in almost all of &lt;a href=&quot;/projects.html&quot;&gt;my system-level
projects&lt;/a&gt;, allows you to read or
write addresses within the device’s internal
&lt;a href=&quot;/zipcpu/2017/11/07/wb-formal.html&quot;&gt;Wishbone bus&lt;/a&gt;,
&lt;a href=&quot;/blog/2017/05/22/a-vision-for-controlling-fpgas.html&quot;&gt;just the same as though those commands were issued
internally&lt;/a&gt; from a source within the design.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;this project&lt;/a&gt;, which needs to support
software on both the &lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry
Pi&lt;/a&gt; and on whatever &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;host machine might connect
to it&lt;/a&gt;, the
project will build one of two versions of this
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/wbregs.cpp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt;&lt;/a&gt;
program.  The first is &lt;code class=&quot;highlighter-rouge&quot;&gt;arm-wbregs&lt;/code&gt; for running on the
&lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Pi&lt;/a&gt;, whereas the second is &lt;code class=&quot;highlighter-rouge&quot;&gt;pc-wbregs&lt;/code&gt; for
running on whatever other host platform might connect with the
&lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Pi&lt;/a&gt; over a &lt;a href=&quot;/blog/2017/06/17/why-network-debugging.html&quot;&gt;TCP/IP
connection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s run this &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; manufacture
identification test using &lt;code class=&quot;highlighter-rouge&quot;&gt;pc-wbregs&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./pc-wbregs flashcfg 0x0100
00200000 (FLASHCFG)-&amp;gt; 00000100
$ ./pc-wbregs flashcfg 0x09f
00200000 (FLASHCFG)-&amp;gt; 0000009f
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [....] 00000001
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [....] 00000020
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [....] 00000018
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [...M] 0000004d
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [....] 00000001
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [....] 00000080
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [...1] 00000031
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [...0] 00000030
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [....] 00000083
$ ./pc-wbregs flashcfg 0x000 ; ./pc-wbregs flashcfg
00200000 (FLASHCFG)-&amp;gt; 00000000
00200000 (FLASHCFG) : [....] 000000ff&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you watched the lower octet of the results, you’ll see that we just
read the ID string: &lt;code class=&quot;highlighter-rouge&quot;&gt;01:20:18:4d:01:80:31:30:83&lt;/code&gt;.  While that works for
debugging by hand, it’s somewhat hard to read and we can do this better.  So
let’s tighten this up a bit, by switching our development to C++.&lt;/p&gt;

&lt;h3 id=&quot;test-two-accessing-the-flash-from-within-a-c-program&quot;&gt;Test two: Accessing the flash from within a C++ program&lt;/h3&gt;

&lt;p&gt;I thought it might be fun to show how easy this is to do via C++ when using
the &lt;a href=&quot;/blog/2017/05/22/a-vision-for-controlling-fpgas.html&quot;&gt;debugging bus concept&lt;/a&gt;.
When using the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus
interface&lt;/a&gt;,
all it takes is a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;m_fpga-&amp;gt;readio(addr);&lt;/code&gt; method to read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;, or
likewise a &lt;code class=&quot;highlighter-rouge&quot;&gt;m_fpga-&amp;gt;writeio(addr,value);&lt;/code&gt; call to write a value to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;.  In our
case, we have a configuration register at address &lt;code class=&quot;highlighter-rouge&quot;&gt;R_FLASHCFG&lt;/code&gt; that we wish
to read from or write to, so an example of reading from this register would
look like,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looking at the relevant portion of &lt;code class=&quot;highlighter-rouge&quot;&gt;flashid.cpp&lt;/code&gt;, it starts with clearing
the trigger for the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;
(if present).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef	R_SPIXSCOPE
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Start up the scope at the beginning, in case anything goes wrong
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_SPIXSCOPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will cause the
&lt;a href=&quot;/blog/2017/07/08/getting-started-with-wbscope.html&quot;&gt;scope&lt;/a&gt;
to trigger on the lowering of the &lt;code class=&quot;highlighter-rouge&quot;&gt;CS_n&lt;/code&gt; line, and then to wait another
124 clocks before it &lt;a href=&quot;/blog/2017/06/08/simple-scope.html&quot;&gt;freezes its buffer and stops
collecting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step is to issue the &lt;code class=&quot;highlighter-rouge&quot;&gt;READID&lt;/code&gt; command (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x9f&lt;/code&gt;) to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x09f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will send a &lt;code class=&quot;highlighter-rouge&quot;&gt;0x9f&lt;/code&gt; to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, and leave the chip select
active–just the way we designed &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;this
core&lt;/a&gt; to
behave above.&lt;/p&gt;

&lt;p&gt;We can now read the actual identification bytes.  Even
though our goal is to &lt;em&gt;read&lt;/em&gt;, because of how we built the interface we’ll
need to write to the register first in order to clock the data out out of the
device.  The information we write isn’t relevant, so we can just
write a zero, and later read from the register.&lt;/p&gt;

&lt;p&gt;The following does exactly that, but with perhaps a little more flair.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ID:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Read and print the last byte read
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c%02x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// and clock in the next byte across the SPI interface
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, now that we are all done, we’ll want to return the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; to its
default state, allowing regular reads to be made again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happens when we run this program?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./pc-flashid 
ID: 01:20:18:4d:01:80:31:30:83:ff:ff:ff&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is essentially the same thing we did before with &lt;code class=&quot;highlighter-rouge&quot;&gt;pc-wbregs&lt;/code&gt;, only now
done from within C++.  That looks prettier now, doesn’t it?&lt;/p&gt;

&lt;p&gt;If you look this value up in the
&lt;a href=&quot;http://www.cypress.com/file/177961/download&quot;&gt;flash specification&lt;/a&gt;,
you can verify that these are indeed the right values we should expect.
Therefore, we’ve now finished test number two.&lt;/p&gt;

&lt;h3 id=&quot;test-three-copying-the-memory-out-of-the-flash&quot;&gt;Test three: Copying the memory out of the flash&lt;/h3&gt;

&lt;p&gt;For our next test, let’s try reading from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could use &lt;code class=&quot;highlighter-rouge&quot;&gt;wbregs&lt;/code&gt; again to read a word from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  Here we read the
first word from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./pc-wbregs flash
01000000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;   FLASH&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;....] ff0000ff&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This looks like a synchronization word.  Indeed, it matches the first word
in our binary design file, suggesting this might also be the first word of the
binary that came shipped with our &lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So … let’s read out the entire design!&lt;/p&gt;

&lt;p&gt;We’ll do that with a program I call
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/dumpflash.cpp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dumpflash&lt;/code&gt;&lt;/a&gt;.
It’s usually the first program I run on any board I purchase, so that I never
lose the original manufacture provided pre-loaded design image.  The relevant
line to read the entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
found within
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/dumpflash.cpp&quot;&gt;`dumpflash.cpp&lt;/a&gt;,
is simply&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMPMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it!  By the time that command returns, and it will take a while since
it’s reading the &lt;em&gt;ENTIRE&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DUMPMEM&lt;/code&gt; buffer
will contain all of the contents from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not all of these contents are relevant.&lt;/p&gt;

&lt;p&gt;When a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; is erased, all of
the bits within it are set to ones.  Usually, upon delivery, this is how a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
comes from the manufacturer with one exception: the board manufacturer has
usually placed an initial load into the beginning of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt;.  For this reason, we can
trim any all one’s words from the end of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUFLN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once done, we can write the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; contents to an external file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ERR: Could not write %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That was easier than you might have expected, now, wasn’t it?  See how powerful
the &lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus
concept&lt;/a&gt; is?&lt;/p&gt;

&lt;p&gt;Just as a foot note, be aware that this data may be byte swapped at this
point.  The
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt; 
&lt;a href=&quot;https://github.com/ZipCPU/dbgbus/tree/master/hexbus&quot;&gt;implementation I’ve
created&lt;/a&gt;
is &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;big endian&lt;/a&gt;,
even though most computers these days are &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;little
endian&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;test-four-writing-to-the-flash&quot;&gt;Test four: Writing to the flash&lt;/h3&gt;

&lt;p&gt;Each of the projects I have containing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash chip&lt;/a&gt; also contains a &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;flash
driver&lt;/a&gt;
host software component.  This makes writing to the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; fairly simple.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/flashdrvr.h&quot;&gt;C++ interface&lt;/a&gt;
to this &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;device driver&lt;/a&gt;
is primarily a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;FLASHDRVR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FLASHDRVR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By calling this function with the address within the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
that you wish to write to, together with the length of the data and a pointer
to that same data, the &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;device
driver&lt;/a&gt;
will first check what is currently written on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
erase if necessary, and then write the new values to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That function calls two other functions that need to work in order to be able
to program and reprogram the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.  The
first is the &lt;code class=&quot;highlighter-rouge&quot;&gt;erase_sector&lt;/code&gt; function, and the second the &lt;code class=&quot;highlighter-rouge&quot;&gt;page_program&lt;/code&gt;
function.  Sector in this context is 4kB
of &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;,
aligned on a 4kB boundary.  A page is similar: it references
256 bytes of memory, aligned on a 256 byte boundary.&lt;/p&gt;

&lt;p&gt;Erasing a sector requires a couple steps.  First, a command needs to sent to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
to enable write mode.  This is a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h06&lt;/code&gt; command that needs to be sent
to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.
It’s a straight forward use of the configuration port.  We’ll start by
clearing the configuration mode by writing &lt;code class=&quot;highlighter-rouge&quot;&gt;9&#39;100&lt;/code&gt; to the interface, just out
of an abundance of caution to make certain &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt; is high (inactive).
We’ll then write the &lt;code class=&quot;highlighter-rouge&quot;&gt;8&#39;h06&lt;/code&gt; write enable command, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_WREN&lt;/code&gt;, and tell
the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
to end the transaction by lowering &lt;code class=&quot;highlighter-rouge&quot;&gt;o_spi_cs_n&lt;/code&gt; again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;// Write enable
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_WREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now issue the sector erase command, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_SE&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0d8&lt;/code&gt;.  This command
is followed by a three byte argument containing the
address of the 4kB segment that we wish to erase.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_SE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll then wait for this operation to complete by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;flwait()&lt;/code&gt;.
This function simply sends the “read-status register” command, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_RDSR1=0x05&lt;/code&gt;,
to the flash.  Ever after, every time 8-clocks are sent to the flash an
updated status register will be returned.  Once the low order bit, &lt;code class=&quot;highlighter-rouge&quot;&gt;WIP=1&lt;/code&gt;,
is clear, the flash has finished erasing our sector.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;FLASHDRVR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flwait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;WIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Write in progress bit
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;DEVBUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUSW&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_RDSR1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Erasing a sector turns all the bits in that sector to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.  This really isn’t
what we want to do end the end.  We want our data written to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
regardless of whether it consists of &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;’s or &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;’s, and we want the &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;’s
and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;’s put in the right place.  The difference is associated with how
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; is built.  The only way to turn a bit from a &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is to first erase a large block of &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt;.  In this case, we erased
a 4kB sector.  Some
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chips allow erasing smaller
portions of memory called subsectors.&lt;/p&gt;

&lt;p&gt;One problem that results from erasing
4kB at a time in order to write to &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
memory&lt;/a&gt; is that of collateral
damage: it is possible that by erasing a sector, some other valuable
information in that sector will get erased.  This &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;flash
driver&lt;/a&gt;
handles that problem by assuming that you will be smart enough
not to do that.  (You will, right?)  If you write to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
using &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/flashdrvr.cpp&quot;&gt;this
driver&lt;/a&gt;,
starting from a sector boundary and ending on a sector boundary then you will
have no problems.&lt;/p&gt;

&lt;p&gt;The second step of writing information to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; is to &lt;em&gt;program&lt;/em&gt; the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.  Programming the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; turns user specified bits
to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.  It cannot return bits to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, it can only turn them from &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Programming the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; is, in many ways, very similar to the erase cycle presented above.  It starts with sending a
write enable command to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Write enable
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_WREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;followed by a “page program” command, &lt;code class=&quot;highlighter-rouge&quot;&gt;F_PP = 0x02&lt;/code&gt; to actually write
the page of &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash memory&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Issue the command
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_PP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Like the erase command, the page program command needs the address of where
to begin programming.  This is passed as a three byte argument following
the 8-bit command word.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// The address
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flashaddr&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The third step is to write the data, byte by byte, to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
controller, and hence to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; chip.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;		&lt;span class=&quot;c1&quot;&gt;// Write the page data itself
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m_fpga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_FLASHCFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once this programming request closes, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
will become busy again.  As with the erase, we’ll call the &lt;code class=&quot;highlighter-rouge&quot;&gt;flwait()&lt;/code&gt;
function to wait for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; to complete.&lt;/p&gt;

&lt;p&gt;Now, using the
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/host/zipload.cpp&quot;&gt;zipload&lt;/a&gt;
program, we can load a &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; executable program onto the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;, to see if it runs.&lt;/p&gt;

&lt;p&gt;I’ll skip to the end at this point and just say that the interface works.
You can now run the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/board/cputest.c&quot;&gt;CPUTEST&lt;/a&gt; on the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;.  &lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/sw/board/hello.c&quot;&gt;Hello
World&lt;/a&gt; 
works too!&lt;/p&gt;

&lt;p&gt;If you’d like more instructions, feel free to check out the
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;README&lt;/a&gt;
to the &lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;icozip project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Okay, so what have we done here?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We learned about basic
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface&quot;&gt;SPI&lt;/a&gt;
  interactions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ve built a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
to get fast access to reading from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;,
quick access to continued readings, and we even created a configuration port
for issuing arbitrary commands to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We demonstrated how a &lt;code class=&quot;highlighter-rouge&quot;&gt;cover()&lt;/code&gt; statement can make building a new core
easier.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We learned about System Verilog
&lt;a href=&quot;http://www.asic-world.com/systemverilog/assertions4.html#Sequences&quot;&gt;sequences&lt;/a&gt;,
and saw how they could simplify properties describing interactions that take
place over several clock cycles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We looked at how the
&lt;a href=&quot;/zipcpu/2018/07/13/memories.html&quot;&gt;memory properties&lt;/a&gt;
for reading the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
could be written with just a single assertion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We then saw how powerful the
&lt;a href=&quot;/blog/2017/06/16/dbg-bus-forest.html&quot;&gt;debugging bus&lt;/a&gt;
was in order to know if this device driver worked or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, I pointed you to instructions for running one of two demonstration
programs on the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; on the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s a lot of ground in one post!  However, notice how it was necessary to
make it from design to demonstration to know that the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;
fully worked.&lt;/p&gt;

&lt;p&gt;While this may be a first &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/icozip/blob/master/rtl/icozip/spixpress.v&quot;&gt;controller&lt;/a&gt;,
I wouldn’t recommend stopping here.  Most &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash
chips&lt;/a&gt; offer DSPI or QSPI support,
and even then there’s an &lt;a href=&quot;https://en.wikipedia.org/wiki/Execute_in_place&quot;&gt;eXecute In Place
(XIP)&lt;/a&gt; option on top of that.
Usually, for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_memory&quot;&gt;flash&lt;/a&gt; controller,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Execute_in_place&quot;&gt;XIP&lt;/a&gt; means that you don’t
need to re-issue the command–you can just issue the address and start reading.
However, these are topics we may return to on another day, but until then I
would encourage you to look into on your own should you be so interested.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;For I am  the LORD, I change not; therefore ye sons of Jacob are not consumed. (Malachi 3:6)&lt;/em&gt;</description>
        <pubDate>Thu, 16 Aug 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/08/16/spiflash.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/08/16/spiflash.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Reasons why Synthesis might not match Simulation</title>
        <description>&lt;p&gt;When I first learned digital design, I never simulated any of my designs:
I just placed them directly onto the hardware and debugged them there.&lt;/p&gt;

&lt;p&gt;I’ve since become convinced in using simulation for several reasons: simulation
can be faster than synthesizing a design.  Indeed, any time I run
&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
I can find many syntax errors in my design before Vivado fully starts up and
shows me one bug.  But that’s just synthesis.  For small designs, simulation
is still faster.  Of course, ultimately, the hardware is always faster–but 
in the time it takes to get there, you might manage to get an answer via
simulation.&lt;/p&gt;

&lt;p&gt;The second reason why I like simulation is that a simulation generated trace
will contain &lt;em&gt;every wire&lt;/em&gt; within the design.  For this reason, when something
doesn’t work in hardware, I’ll almost always return to simulation and try to do
the same thing in simulation to see if I can come across the same bug.  That
allows me to be able to turn around quickly and find the bug.&lt;/p&gt;

&lt;p&gt;Or … not so quickly.  On one recent design, I read the entire 16MB from a
SPI flash memory, only to have the design fail when reading the last word
from the flash.  Not knowing where to start, I started with simulation–but
then had to trim down the trace before filling up every bit in my computers
disk drive.&lt;/p&gt;

&lt;p&gt;But what happens when you cannot simulate the problem?  When your design
works perfectly in simulation, but fails on the hardware?&lt;/p&gt;

&lt;p&gt;I’ll admit this happened to me recently as well.  I think it happens to
everyone at some point.&lt;/p&gt;

&lt;p&gt;Therefore, to help keep you from
&lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;, I &lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/8g26i1/reasons_why_simulation_doesnt_match_synthesis/&quot;&gt;asked on
Reddit&lt;/a&gt;
for a list of things that might cause your simulation not to match reality.
When I asked, I thought I knew most of the reasons.  To my surprise, the kind
&lt;a href=&quot;https://www.reddit.com/r/FPGA&quot;&gt;Reddit readers&lt;/a&gt; were glad to share with me
many more reasons why simulation might not match actual hardware performance.&lt;/p&gt;

&lt;p&gt;Let me try to list and explain the reasons I’ve found here, and see if I managed
to (finally) get all of the reasons given to me on
&lt;a href=&quot;https://www.reddit.com/r/FPGA/comments/8g26i1/reasons_why_simulation_doesnt_match_synthesis/&quot;&gt;Reddit&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;timing&quot;&gt;Timing&lt;/h2&gt;

&lt;p&gt;Digital designs don’t work if the time between clock pulses isn’t sufficient
for all of the logic to take place between when one
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip flop&lt;/a&gt; 
sets its value and the next one needs the value to be held constant.  This
is often the meaning of the word
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)#Timing_considerations&quot;&gt;“timing”&lt;/a&gt; 
in this context.  Here are some reasons why
a design might fail associated with this design problem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Design failed to pass timing, yet was used anyway&lt;/p&gt;

    &lt;p&gt;Following place and route, you need to check whether the resulting design
ensured that all the setup and hold requirements for all of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip
flops&lt;/a&gt; 
within (or external to) your design were met.  Usually the tools will do this
for you automatically.  However, if you fail to check this
result and use the design anyway … then it is likely to have some problems.
Worse, the behavior you see might masquerade as a completely different
problem.&lt;/p&gt;

    &lt;p&gt;For this reason, whenever I have a design that doesn’t work, I first
double check the timing report.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The timing checker wasn’t given the right clock rate&lt;/p&gt;

    &lt;p&gt;If you tell the timing checker you either have no clock in your design
(yes, I did this once), or if you give it the wrong frequency, your
design may appear to pass the timing check–even though the check
 is invalid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using delays in test bench design&lt;/p&gt;

    &lt;p&gt;This is one reason why I avoid the “#” syntax in Verilog, such as
&lt;code class=&quot;highlighter-rouge&quot;&gt;a &amp;lt;= #2 b;&lt;/code&gt;.  Just because you
tell the Verilog simulator that something will happen “2.5ns” later,
doesn’t mean it will achieve that “2.5ns” result in hardware.  Worse,
these statements are often ignored by the synthesizer. Hence, if you use
them, don’t use them on code you intend to place on actual hardware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Just being wrong about the clock frequency on the board&lt;/p&gt;

    &lt;p&gt;This is subtly different from giving the timing analyzer the wrong rate.
For example, if you think your clock rate is 100MHz, and get your design
to pass the timing check for 100Mhz, even though the clock rate is really
50MHz, any logic that depends upon this number is not likely to work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;metastabilityhttpsenwikipediaorgwikimetastabilityinelectronics&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;Metastability&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We’ve discussed &lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt; a couple of times on this blog–mostly associated
with &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crossing clock domains&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;Metastability&lt;/a&gt; is caused when a signal input to
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip flop&lt;/a&gt; 
is changing right as the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;flip flop&lt;/a&gt;s
clock arrives.  In that case, the design might have a value that is
neither “1” nor “0”, causing unpredictable results in subsequent logic.
Because &lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt; is only caused if the signal changes right at the
clock edge, it is a rare event–but often not rare enough.  Either way,
the simulator will rarely if ever notice it.&lt;/p&gt;

&lt;p&gt;Here are some examples of things that might cause &lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;No synchronization of async signal&lt;/p&gt;

    &lt;p&gt;Inputs to a design may be asynchronous.  A good example is a button press,
or a serial port input.  Such inputs need to be
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;synchronized&lt;/a&gt; before
use!  This is actually a common problem among beginners–they’ll use a value
without
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;synchronizing&lt;/a&gt;
it, ignorant that this might cause problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improperly managed &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain crossing&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is another classic problem.  When you cross from one &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock
domain&lt;/a&gt;
to another, you need to manage the clock crossing with either a
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;synchronizer&lt;/a&gt;
or an &lt;a href=&quot;/blog/2018/07/06/afifo.html&quot;&gt;asynchronous
FIFO&lt;/a&gt;–which will use
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;synchronizers&lt;/a&gt;
internally.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any time a register is clocked by two different clocks in the same process&lt;/p&gt;

    &lt;p&gt;I haven’t personally come across this one, but imagine a process that is
sensitive to &lt;code class=&quot;highlighter-rouge&quot;&gt;@(posedge i_clk, negedge i_reset, posedge something_else)&lt;/code&gt;.
This can be a recipe for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Metastability_in_electronics&quot;&gt;metastability&lt;/a&gt; disaster.&lt;/p&gt;

    &lt;p&gt;You can read how we handled this with the &lt;a href=&quot;/formal/2018/04/12/areset.html&quot;&gt;asynchronous reset&lt;/a&gt; here.
However, I tend to try to avoid this situation by just not writing code
of this type.  This was one of those reasons why I &lt;a href=&quot;/blog/2017/08/21/rules-for-newbies.html&quot;&gt;recommended to
beginners&lt;/a&gt;
that only &lt;em&gt;clock&lt;/em&gt; edges should ever be in the sensitivity list.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Timing errors due to incorrect multipath constraints that are not checked
in simulation&lt;/p&gt;

    &lt;p&gt;When &lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;crossing clock domains&lt;/a&gt;,
it’s not exactly clear upon which edge of the
next clock a particular signal will arrive.  Hence, if you have a
signal defined in one
&lt;a href=&quot;/blog/2017/10/20/cdc.html&quot;&gt;clock domain&lt;/a&gt;,
yet crossing into another in order to
be the input of two separate pieces of logic, you’ll be surprised that
in the real hardware, the two pieces of logic might not do the same
thing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s illustrate this last problem with an example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_clk_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_outb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_clk_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_ina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_outb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Here&#39;s our first synchronizer
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;threesync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threein&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;threein&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;threesync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threein&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threesync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threesync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ina&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Here&#39;s some logic dependent upon its result
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bythrees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;bythrees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threein&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bythrees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bythrees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// That&#39;s the first path, now let&#39;s look at the second path
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// It starts with a separate synchronizer
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fivesync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fivein&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fivein&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fivesync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fivein&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fivesync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fivesync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_ina&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	
	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;byfives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;byfives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fivein&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;byfives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byfives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_outb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byfives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bythrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, let’s assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ina&lt;/code&gt; is some logic that is set on &lt;code class=&quot;highlighter-rouge&quot;&gt;i_clk_a&lt;/code&gt;’s
positive edge.  You’d expect &lt;code class=&quot;highlighter-rouge&quot;&gt;o_outb&lt;/code&gt; to be zero at all times, right?  (Both
registers will toggle the lowest bit on any &lt;code class=&quot;highlighter-rouge&quot;&gt;i_ina&lt;/code&gt; input.  You
might be surprised by the hardware when it isn’t.&lt;/p&gt;

&lt;h2 id=&quot;blocking-vs-non-blocking-assignments&quot;&gt;Blocking vs Non-blocking assignments&lt;/h2&gt;

&lt;p&gt;Every now and again I need to remind myself why blocking assignments are so bad.
A blocking assignment sets the value of a register immediately, whereas a
non-blocking assignment waits until the clock tick to set the value with it’s
new result.&lt;/p&gt;

&lt;p&gt;So, tell me, what would happen in the following code,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the first clock tick, what will the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; be?  Will it be five,
or will it be ten?&lt;/p&gt;

&lt;p&gt;In hardware the result will always be five.  In simulation, the answer is … it
depends.  Specifically, it depends upon which of the two always blocks the
simulator decides to evaluate first.&lt;/p&gt;

&lt;h2 id=&quot;poor-simulation-model&quot;&gt;Poor simulation model&lt;/h2&gt;

&lt;p&gt;This one seems to hit the beginner the first time he uses simulation, when the
inputs to his simulation don’t quite match how the real hardware acts.
You can read &lt;a href=&quot;/blog/2017/06/10/lost-college-student.html&quot;&gt;one students
account&lt;/a&gt;
of how this problem bit him here on this site.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Buttons may be the most classic example&lt;/p&gt;

    &lt;p&gt;Buttons tend to be the first thing a beginner works with.  They are easy and
simple to work with, and seem to impact your design in a very reliable way.&lt;/p&gt;

    &lt;p&gt;The beginner quickly learns about buttons, and the next step is a counter.
He wants to know if his counter is working, so he creates an example piece
of code much like the following.  (We’ll assume he gets the synchronizer
right, although this does tend to be rare.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btnled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_btn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;input&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;wire&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_btn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;output&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Let&#39;s synchronize the button, to avoid two issues
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;syncd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;syncd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syncd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syncd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// i.e. the button was just pressed
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o_led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This beginner will be surprised when his LED doesn’t necessarily toggle on every
button press.  The problem?  Buttons bounce!  Feel free to take a look at &lt;a href=&quot;/blog/2017/08/02/debounce-teaser.html&quot;&gt;this
article&lt;/a&gt; for an
illustration of the problem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve also personally struggled with Xilinx’s ICAPE2 interface&lt;/p&gt;

    &lt;p&gt;Yes, I know Xilinx described the interface in their &lt;a href=&quot;https://www.xilinx.com/support/documentation/user_guides/ug470_7Series_Config.pdf&quot;&gt;Configuration
user’s guide&lt;/a&gt;.
But how often have you misunderstood the specification and built your
simulation component to simulate the wrong interface?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My own I2C story&lt;/p&gt;

    &lt;p&gt;Buried within the repository for my &lt;a href=&quot;https://github.com/ZipCPU/wbscope&quot;&gt;wishbone
scope&lt;/a&gt;, is an
&lt;a href=&quot;https://github.com/ZipCPU/wbscope/tree/master/doc/examples/hdmi-eddc&quot;&gt;article&lt;/a&gt;
about how I once seriously misunderstood the &lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C
specification&lt;/a&gt;.  I built a simulation
model for the wrong specification, and managed to get my design to work with
it.  When I moved to hardware, … it didn’t match like I thought it should.&lt;/p&gt;

    &lt;p&gt;That’s all fixed now, though.  You should find
&lt;a href=&quot;https://github.com/ZipCPU/wbi2c&quot;&gt;my simulation model&lt;/a&gt; for
&lt;a href=&quot;https://www.i2c-bus.org/specification&quot;&gt;I2C&lt;/a&gt; fully working … now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Example: a vendor model for an SDRAM didn’t perform under burst access
like the hardware did&lt;/p&gt;

    &lt;p&gt;This one hasn’t happened to me yet.  Yet.  However, it follows the same
basic idea.  You have a design that matches a simulation specification,
but that simulation was only partially accurate.  Perhaps it didn’t implement
every mode of the device.&lt;/p&gt;

    &lt;p&gt;Either way, you’ll be surprised when your design doesn’t work, and then stuck
debugging your design in hardware–assuming you didn’t immediately get stuck
in &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA Hell&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;asynchronous-reset-triggered-by-spurious-rf&quot;&gt;Asynchronous Reset triggered by spurious RF&lt;/h2&gt;

&lt;p&gt;I wouldn’t have believed this one myself if I hadn’t come across it while
browsing Xilinx’s forums.  You can read &lt;a href=&quot;https://forums.xilinx.com/t5/PLD-Blog-Archived/That-Dangerous-Asynchronous-Reset/ba-p/12856&quot;&gt;the article I found
here&lt;/a&gt;.
The basic sum of it is that the reset wire can act as a high frequency antenna,
and so send spurious reset signals through your design.  Ouch.&lt;/p&gt;

&lt;p&gt;This just happens to be one more reason to use a synchronous reset within
an &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt; design.&lt;/p&gt;

&lt;h2 id=&quot;failure-to-start-the-design-in-a-known-configuration&quot;&gt;Failure to start the design in a known configuration&lt;/h2&gt;

&lt;p&gt;Over the years I’ve discovered that values not initialized on a Xilinx device
default to all ones.  They may start out as something different in simulation.
For example, I had one simulation environment that would initialize all values
to zero.  Indeed, the formal tools based upon
&lt;a href=&quot;https://www.clifford.at/yosys&quot;&gt;Yosys&lt;/a&gt;
assume all unspecified memory has an initial value of zero.&lt;/p&gt;

&lt;p&gt;This problem also highlights one of the &lt;a href=&quot;/blog/2017/10/13/fpga-v-asic.html&quot;&gt;differences between FPGA development
and ASIC development&lt;/a&gt;:
ASIC designs need that initial reset to set their values.  They have no
problems setting all RAM values to zero or one.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s on the other hand
truly honor the &lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; conditions given in the design.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Failure to set initial values for registered outputs&lt;/p&gt;

    &lt;p&gt;This is pretty much what I just described: when you don’t give your design
an initial value, it will still start with an initial value–it just might
not be the one you are intending.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Failure to match reset values to initial values&lt;/p&gt;

    &lt;p&gt;Would it surprise you if I told you this was one of the most common, and
yet simple, bugs I find with formal tools?  It’s so common that I’ve gotten
into a rut testing for it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_past_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// For each input constrained by an initial or a reset
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its_initial_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// .. Repeat as necessary
&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Likewise for each local register or output
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_register&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its_initial_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps you’ll find this pattern useful in your own designs as well–it helps
to guarantee that both the reset and the initial value do the same thing.&lt;/p&gt;

&lt;p&gt;As another example, on some designs I’ll assume it starts with a reset.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;initial&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i_reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;insufficient-test-bench-cases&quot;&gt;Insufficient test bench cases&lt;/h2&gt;

&lt;p&gt;Sadly, this one was common for me–especially before I started using formal
verification.  Perhaps you may remember the &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;problem I had with the test bench
for my initial FIFO
implementation&lt;/a&gt;? 
Sure, I had built a test bench for my &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;, it just didn’t quite test all of
the possible paths through my &lt;a href=&quot;/blog/2017/07/29/fifo.html&quot;&gt;FIFO&lt;/a&gt;’s logic.&lt;/p&gt;

&lt;p&gt;This hit me hard with my &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;first I-cache
design&lt;/a&gt; as well.
Sure, the design worked in my simulation test bench. It just didn’t when
one day when I placed it onto the hardware.  It wasn’t the first day I had
placed the cache into hardware either–it had worked before.  What was the
problem?  That is &lt;a href=&quot;/zipcpu/2017/12/28/ugliest-bug.html&quot;&gt;a
story&lt;/a&gt;
in itself.&lt;/p&gt;

&lt;p&gt;Perhaps I just don’t have the imagination to think of every way a design
component might be accessed–correctly or incorrectly in order to truly test
every path through a design.&lt;/p&gt;

&lt;p&gt;In many ways this isn’t really a failure of simulation to match the
synthesized design in hardware, rather it’s a failure to completely test the
design in simulation.  As a result, the solution is to go back and to
simulate the design in the same way it just failed on the hardware (assuming
you can), and to see if you can try to find the bug.&lt;/p&gt;

&lt;p&gt;An even better solution is to turn to formal methods …&lt;/p&gt;

&lt;p&gt;I found myself in just this situation this last week: after reading 128MB
less the last four bytes from a flash device, the reader received a bus
timeout error on the very last word.  No, I hadn’t simulated that test
case because … well, who wants to &lt;em&gt;simulate&lt;/em&gt; reading 128MB from
a flash device over a slow debugging bus?  That said, it was the only way
I found the problem.  (The bug was mis-configured bus arbiter.  Yes, the
arbiter itself had been formally verified.  It wasn’t the arbiter’s fault, 
from that perspective, I had just hooked it up wrong and never verified the
parent module.)&lt;/p&gt;

&lt;h2 id=&quot;symbols-left-out-of-the-sensitivity-list&quot;&gt;Symbols left out of the sensitivity list&lt;/h2&gt;

&lt;p&gt;I don’t normally use sensitivity lists, but let’s see if we can build an
example of this problem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See the problem?  If &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; changes, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will also change.  However, the simulator
won’t adjust the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; changes–even though the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will
change in hardware upon any change of &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;latches&quot;&gt;Latches&lt;/h2&gt;

&lt;p&gt;Remember the latch we placed into our &lt;a href=&quot;/formal/2018/05/31/clkswitch.html&quot;&gt;clock
switch&lt;/a&gt; design?  Here’s
what one &lt;a href=&quot;https://www.reddit.com/r/FPGA&quot;&gt;Reddit&lt;/a&gt; user wrote about latches:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Latches.  Definitely more of a problem only beginners will run into but
still good to be aware of.  Depending on synthesis settings it may fail
or it may just produce warnings but this was the most common problem I
helped students with when I was a TA for our intro to digital logic class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not familiar with a latch?  Here’s an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; isn’t being set on a clock, yet it’s required to hold its
value if &lt;code class=&quot;highlighter-rouge&quot;&gt;!A&lt;/code&gt; is true.  This is a latch.&lt;/p&gt;

&lt;p&gt;A latch is what the synthesis tools will infer anytime you don’t set the
value of a combinational result for all combinations.  The rule of thumb I’ve
been taught to make sure you avoid this is to always set the value at the
beginning of the block–then the value is set no matter how ugly the following
logic gets.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another user recommended I beware of the &lt;code class=&quot;highlighter-rouge&quot;&gt;full_case&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;parallel_case&lt;/code&gt;
directives.  I’d never heard of these before!  However, you can read more
about misusing these directives &lt;a href=&quot;http://www.sunburst-design.com/papers/CummingsSNUG1999Boston_FullParallelCase.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;forgetting-to-assign-pin-locations&quot;&gt;Forgetting to assign pin locations&lt;/h2&gt;

&lt;p&gt;What happens if you don’t assign an output pin to a physical location?  Some
tools will pick a location for you.  How much do you want to bet that they
don’t pick the right location?&lt;/p&gt;

&lt;p&gt;A related bug is not forgetting the pin assignment, but rather assigning
the wrong pin to your logic.&lt;/p&gt;

&lt;p&gt;The solution?  Always double and triple check your pin assignments.  The master
&lt;code class=&quot;highlighter-rouge&quot;&gt;xdc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ucf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pcf&lt;/code&gt; or whatever file is very likely going to need to be changed
for your design from the one given you by the manufacturer of the board.&lt;/p&gt;

&lt;h2 id=&quot;comparing-with-x-values&quot;&gt;Comparing with ‘X’ values&lt;/h2&gt;

&lt;p&gt;(False in simulation, might be true in H/W)&lt;/p&gt;

&lt;p&gt;I’m told that the ARM development team once got themselves caught in an ugly
way with this bug.  According to the story, that happened some time ago, but
since then the story has become ingrained into their culture: don’t use
&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; assignments!&lt;/p&gt;

&lt;p&gt;Why not?  Well, a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;bx&lt;/code&gt; value has a different meaning between synthesis and
simulation.  In synthesis, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;bx&lt;/code&gt; is a don’t care–the synthesis tool is allowed
to set the value to whatever it would wish.  In simulation, &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;bx&lt;/code&gt; is a
specific value that a register might contain.
(&lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; doesn’t support &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;bx&lt;/code&gt;,
so I don’t use them often.)&lt;/p&gt;

&lt;p&gt;What happens when &lt;code class=&quot;highlighter-rouge&quot;&gt;a=1&#39;bx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b=1&#39;b0&lt;/code&gt;?  &lt;code class=&quot;highlighter-rouge&quot;&gt;a==b&lt;/code&gt; will be false in simulation.
Worse, &lt;code class=&quot;highlighter-rouge&quot;&gt;a != b&lt;/code&gt; will also be false in simulation.  However,
in hardware the result will be tested based upon the actual achieved
voltage value, whether it be a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.
See the different result?  Avoid setting any values to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&#39;bx&lt;/code&gt; to keep yourself
from this bug.&lt;/p&gt;

&lt;p&gt;You can read more about the problems with &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; values
&lt;a href=&quot;https://www.researchgate.net/publication/240753489_The_Dangers_of_living_with_an_X_bugs_hidden_in_your_Verilog&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tool-problem&quot;&gt;Tool problem&lt;/h2&gt;

&lt;p&gt;Yes, it is possible that the tools might not work for you.  There are bugs
within most if not all tool suites, they just tend to take a special design
to trigger.  Don’t believe me?  Read the forum posts associated with each
vendor’s tool suite.  Sometimes bugs get fixed.  Sometimes the fixes create
other bugs.  At other times, they are reported and the vendor does nothing.&lt;/p&gt;

&lt;h2 id=&quot;asynchronous-systems&quot;&gt;Asynchronous Systems&lt;/h2&gt;

&lt;p&gt;I don’t usually design asynchronous systems, although I have done so once or
twice.  What happens when you need the asynchronous system to operate in an
ordered fashion?&lt;/p&gt;

&lt;p&gt;Here’s what one
&lt;a href=&quot;https://www.reddit.com/r/FPGA&quot;&gt;Reddit&lt;/a&gt; user wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you design asynchronous systems with matched delay elements between
each sequential stages.  In that case, logic delay is part of the system
behaviour.  The alternative to synthesis is to use a not synthesizable model
for delay chains based on « transport … after » statements.  Although
I must say, synthesis of asynchronous system is also a pain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;generics&quot;&gt;Generics&lt;/h2&gt;

&lt;p&gt;Here’s one I’ve struggled with personally: using one set of top level generic
values (VHDL term for what would be called a &lt;code class=&quot;highlighter-rouge&quot;&gt;parameter&lt;/code&gt; in Verilog) for
simulation, and another for synthesis.&lt;/p&gt;

&lt;p&gt;I worry about this one when using formal methods especially.  Sometimes the
design is just too complicated to fully verify–a 12x12 multiply might be such
an example, or a &lt;a href=&quot;/dsp/2017/11/10/delayw.html&quot;&gt;delay&lt;/a&gt;
by 2047 time-steps.  So I’ll limit the design, using a Verilog parameter
(VHDL generic) to a smaller/simpler design that I can then prove–for example,
a delay by 7 time-steps instead of 2047.  I try to
convince myself that the proof will be equivalent, but … will it be?&lt;/p&gt;

&lt;h2 id=&quot;using-different-source-files-for-simulation-and-synthesis&quot;&gt;Using different source files for simulation and synthesis&lt;/h2&gt;

&lt;p&gt;I do this all the time.  I simulate the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; module, which is a subset of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;toplevel&lt;/code&gt; module.  I place into my &lt;code class=&quot;highlighter-rouge&quot;&gt;toplevel&lt;/code&gt; all of the hardware specific
items that &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;
can’t simulate.&lt;/p&gt;

&lt;p&gt;What happens when one of my bugs is in that top level?
You can read about my struggles with that
&lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is why you want to do everything you can to make certain that the
design you simulate is also the same design you intend to synthesize.&lt;/p&gt;

&lt;h2 id=&quot;block-rams-with-other-than-power-of-two-sizes&quot;&gt;Block RAM’s with other than power of two sizes&lt;/h2&gt;

&lt;p&gt;I try to only ever use block RAM’s with a power of two size.  I often forget
why.&lt;/p&gt;

&lt;p&gt;Once when I used a non-power of two block RAM, I wrote to an address that wasn’t
in the RAM and crashed &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;.
Why?  &lt;a href=&quot;https://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt; only allocated,
in C++, the number of elements I told it were in the array.&lt;/p&gt;

&lt;p&gt;Even if you don’t write beyond the array, you might read and get a different
answer than you were expecting from simulation alone.&lt;/p&gt;

&lt;h2 id=&quot;vhdl-specific&quot;&gt;VHDL Specific&lt;/h2&gt;

&lt;p&gt;If you know me, you’ll know I don’t work in VHDL.  Others who do were kind
enough to offer my the following examples specific to VHDL.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clk&#39;event and clk == &#39;1&#39;&lt;/code&gt; doesn’t behave the same between synthesis and
 simulation.  Always use &lt;code class=&quot;highlighter-rouge&quot;&gt;rising_edge(clk)&lt;/code&gt; instead.  (This is another one
 of those issues where &lt;code class=&quot;highlighter-rouge&quot;&gt;clk&lt;/code&gt; might be neither &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;1b&#39;x&lt;/code&gt;
 example we discussed above.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forgetting to add &lt;code class=&quot;highlighter-rouge&quot;&gt;if rising_edge(clk)&lt;/code&gt; in a clocked process.  I think this
would then fit under both the latch example above as well as the signals
left out of the sensitivity list.  Feel free to correct me here if I am wrong.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comparisons with a null range vector is “true” in Aldec and “false” in
Synplify (null ranges often occur with extensive us of generics.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any time a different architecture is used between synthesis and simulation&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sense a reoccurring theme?&lt;/p&gt;

&lt;h2 id=&quot;verilog&quot;&gt;Verilog&lt;/h2&gt;

&lt;p&gt;I’ve been surprised as I’ve worked with Verilog to discover the system model
for a verilator based design is specified to be the same as if all the
files were concatenated together before synthesis, and then that single
concatenated file is synthesized.  A &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; in one module can therefore
impact another–the modules are no longer independent.  If multiple files
define the same value differently, and then the order of the files changes
between simulation and synthesis … then you’ll
get different results between the two.&lt;/p&gt;

&lt;p&gt;This was not something I was expecting, and I was a bit surprised to learn it.
Once it was explained to me, it made sense, but it sure seems like a backwards
way to do things–especially for someone like me who was first trained in &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;systemverilog&quot;&gt;SystemVerilog&lt;/h2&gt;

&lt;p&gt;One user wrote the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve found when using some of the more new SystemVerilog features
[that] simulation and synthesis can differ.  I read about unions in
Vivado being an issue here.&lt;/p&gt;

  &lt;p&gt;Personally using unpacked arrays and passing them between modules and
accidentally writing something like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;moduleA has output logic bus [3:0]
moduleB has input bus[4]
// connection between them was logic[3:0]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Modelsim and Quartus produced different results&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I don’t use any of SystemVerilog’s special features beyond the
formal properties we’ve already discussed on this blog, I haven’t come across
this one personally yet.  For those who do use SystemVerilog, look out for
this bug!&lt;/p&gt;

&lt;h2 id=&quot;hardware-failures&quot;&gt;Hardware Failures&lt;/h2&gt;

&lt;p&gt;Here’s a set of problems most software engineers will be surprised by: hardware
failures.  Why do I say it that way?  Because with all my own years of working
on software, I could reliably depend upon the fact that the hardware always
worked–unless in very rare cases it didn’t.  Sherlock Holmes’ logic makes the
most sense here, “Once you eliminate the impossible, whatever remains, no
matter how improbable, must be the truth.”  (Arthur Conan Doyle)&lt;/p&gt;

&lt;p&gt;That said, here are two hardware problems I’ve suffered from.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Noisy or insufficient power supply&lt;/p&gt;

    &lt;p&gt;In one RF design, the noisy power supply crept through the device into the
powered antenna and … well, the result wasn’t the pretty sampled data
I was expecting.&lt;/p&gt;

    &lt;p&gt;In another design, this one for motors, the design failed because the motor
PMod required more power than the board could supply.  In that case, the
FPGA was powered from a Raspberry Pi and the power supply just didn’t cut
it for what we needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PLL’s haven’t converged&lt;/p&gt;

    &lt;p&gt;Remember when I &lt;a href=&quot;/blog/2017/09/14/even-i-get-stuck.html&quot;&gt;wrote about this
earlier&lt;/a&gt;?&lt;/p&gt;

    &lt;p&gt;At one time I assumed that PLL’s will &lt;em&gt;always&lt;/em&gt; converge.
Then I tried to a design for the iCE40 that used a PLL.  No, I didn’t use
&lt;code class=&quot;highlighter-rouge&quot;&gt;icepll&lt;/code&gt;–I should have.  Instead, I just assumed that the PLL converged.
For the life of me, I couldn’t figure out why my design wasn’t working.
I spent months scratching my head until some friends at Digilent
were kind enough to provide me with one of their &lt;a href=&quot;https://store.digilentinc.com/digital-discovery-portable-logic-analyzer-and-digital-pattern-generator/&quot;&gt;Digital
Discovery&lt;/a&gt;’s.
Yes, it took that external logic analyzer for me to figure out what the
problem was.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You may want to keep this list in your back pocket, and remember these reasons
the next time your design doesn’t work.  Some of these reasons require good
desk checking: check your pin outs, double check your timing, etc.  Other
items require an external scope, such as the PLL that hadn’t converged.
Still others need a good internal scope, such as when the simulation model
doesn’t quite match how the hardware actually works.  Finally, it might also
be that you haven’t fully simulated the design.&lt;/p&gt;

&lt;p&gt;The bottom line is that hardware design isn’t like software design.  There are
a lot more things that can go wrong, and figuring out the problem can require
more sleuthing than you plan upon.&lt;/p&gt;

&lt;p&gt;This is also why I like working with hardware.  Sure, it’s a greater challenge,
but so too is the joy and excitement when everything works as designed on the
hardware.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;There is a path which no fowl knoweth, and which the vulture's eye hath not seen (Job 28:7)&lt;/em&gt;</description>
        <pubDate>Sat, 04 Aug 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/blog/2018/08/04/sim-mismatch.html</link>
        <guid isPermaLink="true">https://zipcpu.com/blog/2018/08/04/sim-mismatch.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Why I like Formal: the ZipCPU and the ICO board</title>
        <description>&lt;p&gt;I’ve been working for some time, off and on, on
&lt;a href=&quot;http://github.com/ZipCPU/icozip&quot;&gt;a port&lt;/a&gt; of the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; to the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt;. 
&lt;a href=&quot;https://github.com/ZipCPU/icozip&quot;&gt;The port&lt;/a&gt; isn’t complete (yet), and it’s
not paid for, so the work isn’t going very fast.  However, I came across
something very interesting in this process that I thought would be worth
sharing.&lt;/p&gt;

&lt;p&gt;At issue is the fact that the &lt;a href=&quot;https://en.wikipedia.org/wiki/ICE_(FPGA)&quot;&gt;iCE40&lt;/a&gt; doesn’t support distributed RAM.  Unlike
other &lt;a href=&quot;https://en.wikipedia.org/wiki/Field-programmable_gate_array&quot;&gt;FPGA&lt;/a&gt;’s,
it only has block RAM.&lt;/p&gt;

&lt;p&gt;To understand the distinction, consider the following piece of code from
within the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;At issue is how the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; reads from
its &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register file&lt;/a&gt; itself
is declared as a memory of thirty two 32-bit words.  Internally, these are
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;split into two register sets–a user register set and a supervisor register
set&lt;/a&gt;, but for now
all that matters is that this is declared as a RAM.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;regset&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; reads from this RAM after
decoding the &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;
that will be used by the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;.  Once the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; addresses,
&lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_B&lt;/code&gt; are available from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decoder&lt;/a&gt;, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt; reads
from its &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_op_Av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice how this isn’t a clocked read.  This will come back into play in a
moment.&lt;/p&gt;

&lt;p&gt;This is the simple part.  The next step are the many paths from here to the
input to the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here, let’s focus on the second
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;’s path,
what I call &lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;register B&lt;/a&gt;.
This rather complicated path is shown in Fig 1 below.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 1. Original path from the register read to Operand B&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-register-lookup.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To get from this
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; read to the input
to the &lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;, the value
needs to go through some logic.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; has
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;16 registers in its working
set&lt;/a&gt;.  Of these sixteen
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;,
one is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;
(register 15).  This
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt;, however,
isn’t maintained in the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register file&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;regset&lt;/code&gt;.  Instead, it is maintained in one of two separate registers:
&lt;code class=&quot;highlighter-rouge&quot;&gt;ipc&lt;/code&gt; for the supervisor or interrupt level &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;upc&lt;/code&gt; for the user &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;gie&lt;/code&gt;
flag (global interrupt enable) controls which of the two
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counters&lt;/a&gt;
is currently in use.&lt;/p&gt;

&lt;p&gt;When this information comes from the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decoder&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_pc&lt;/code&gt; contains a pointer to the next
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;
in the current
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;
stream.  If we want to read our own &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt; for this
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;,
that is if the &lt;code class=&quot;highlighter-rouge&quot;&gt;gie&lt;/code&gt; flag coming from the decoder or &lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_gie&lt;/code&gt; matches the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register set&lt;/a&gt;
in question, then we’ll want the value to be &lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_pc&lt;/code&gt;.  Otherwise, it can
only be the supervisor mode reading the the user mode &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll pick from between these two &lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program
counter&lt;/a&gt; registers here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_gie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_pcB_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_pcB_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll need this value in another moment, so hang on to this thought.  For
now, let’s return to the read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register set&lt;/a&gt;
above, where we left the result in &lt;code class=&quot;highlighter-rouge&quot;&gt;w_op_Bv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next thing you need to remember from the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;’s
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction set&lt;/a&gt; is that
(just about) every
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;
can have an immediate attached.  The two inputs, therefore, to any
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;
are a register I call operand &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, and a second value &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; which includes an
optional register, &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;, plus an immediate.  If no
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; is read, the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;
only references the immediate.&lt;/p&gt;

&lt;p&gt;To handle this selection, the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decoder&lt;/a&gt;
produces a flag, &lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_rB&lt;/code&gt;.   This will be true any time the &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; operand comes
from a register.&lt;/p&gt;

&lt;p&gt;There’s also another special register–the &lt;a href=&quot;https://en.wikipedia.org/wiki/Status_register&quot;&gt;condition
codes&lt;/a&gt;.  This register
contains a variety of
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
mode selection bits together with the traditional flags, zero (&lt;code class=&quot;highlighter-rouge&quot;&gt;Z&lt;/code&gt;),
carry (&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;), negative (&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;), and overflow (&lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt;).  As with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Program_counter&quot;&gt;program counter&lt;/a&gt; above,
there are two versions of this register–one for
supervisor mode and one for user mode.&lt;/p&gt;

&lt;p&gt;In our next step, we are going to calculate the value of the B input in
all respects except the immediate.&lt;/p&gt;

&lt;p&gt;First, if there’s no register read, then the input (not including the
immediate) is zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_rB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_op_BnI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Second, in the case of a concurrent register write, the register value is the
result of the register write.  This allows the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt; to bypass
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register file&lt;/a&gt;, so that
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
outputs can be immediately available for the next instruction–making the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt; run
that much faster.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPELINED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_op_BnI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_gpreg_vl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Third, if this is a reference to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Status_register&quot;&gt;condition codes&lt;/a&gt; register, then
we’ll set that based upon some special flags.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_Bcc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_op_BnI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_cpu_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_op_Bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;1&#39;b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_uflags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_iflags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we get past all of that logic, we can finally deal with the expected
situation–that the &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; operand comes from the result of the register
we just read above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_op_BnI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_op_Bv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a final step, we’ll add the immediate value associated with the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_I&lt;/code&gt;, to our value and register the result for the next stage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPELINED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_Bpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_rB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_pcB_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;2&#39;b00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r_op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_op_BnI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcd_I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPELINED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_rB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_Bid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_reg_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r_op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_gpreg_vl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, not quite.  That’s the last step on that clock.  Before we send
this value to the &lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;,
we’ll need to double check that the value isn’t being written to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register
file&lt;/a&gt;
on the same clock (again).  In this case,
&lt;code class=&quot;highlighter-rouge&quot;&gt;wr_reg_ce&lt;/code&gt; is a flag indicating that a value is being written to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register file&lt;/a&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;wr_reg_id&lt;/code&gt; is the address of that register, and &lt;code class=&quot;highlighter-rouge&quot;&gt;wr_gpreg_vl&lt;/code&gt;
is the value of that register.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPT_PIPELINED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_Bid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_rB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_gpreg_vl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_op_Bv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you got lost in the explanation above, relax.  My whole point here
is that this logic is complicated.&lt;/p&gt;

&lt;p&gt;Because of this complexity, this was one of those pieces of logic that I was
most interested in formally verifying within the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;.  Along the way I came
across &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;several pipeline hazards I wasn’t
expecting&lt;/a&gt;.  For
example, what happens if you set &lt;code class=&quot;highlighter-rouge&quot;&gt;r_op_Bv&lt;/code&gt; as
the result of a register plus an immediate, only to have the register
updated on the next clock?  &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;Pipeline
logic&lt;/a&gt;,
primarily captured by the &lt;code class=&quot;highlighter-rouge&quot;&gt;op_ce&lt;/code&gt; flag, needs to prevent that from happening.&lt;/p&gt;

&lt;p&gt;Here’s the problem: the &lt;a href=&quot;https://en.wikipedia.org/wiki/ICE_(FPGA)&quot;&gt;iCE40&lt;/a&gt; doesn’t support memory reads unless the result
is immediately registered, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_op_Av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w_op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While &lt;a href=&quot;http://www.clifford.at/yosys&quot;&gt;yosys&lt;/a&gt; will try to work around this
problem using flip-flops and &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUTs&lt;/a&gt;,
it does so at &lt;a href=&quot;/blog/2017/06/12/minimizing-luts.html&quot;&gt;the
cost&lt;/a&gt; of about 3k or
more &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUTs&lt;/a&gt; on a
7.6k &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_block&quot;&gt;LUT&lt;/a&gt; device.  That’s bigger
than the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; itself!  This so badly
broke the bank for the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
that unless I could change things there was no way it would work on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/ICE_(FPGA)&quot;&gt;iCE40&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The basic solution to this problem is to move the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt; read logic
one clock earlier–to shuffle logic from one clock to the next.
In other words, I needed to read from the block RAM in the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;decode&lt;/a&gt;
stage, before I got to the selection logic above.  My fear was, how could
I patch this change in and remain certain that the
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt;
would still work?&lt;/p&gt;

&lt;p&gt;Hint: this is one of the reasons why I like
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, rather than clocking the register address into
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decoder&lt;/a&gt;
outputs, I left it as combinatorial logic alone–making two additional outputs
for that purpose.  I could now read the register one clock earlier, and
clock the value in with the same control signal that was used to clock the
&lt;a href=&quot;/zipcpu/2018/01/01/zipcpu-isa.html&quot;&gt;instruction&lt;/a&gt;
 &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/idecode.v&quot;&gt;decoder&lt;/a&gt;
outputs, &lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dcd_ce&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_op_Av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_preA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_preB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But … what would happen if one of those
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;
was written on the exact same cycle?  (This is actually pretty common.)
How can we make sure we have the right value from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;To do that, I captured the result of the last
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;
write, and created a registered flag to indicate that the correct value
wasn’t from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;registers&lt;/a&gt;
set.  You can see this pictorially in Fig 2.&lt;/p&gt;

&lt;table align=&quot;center&quot; style=&quot;float: none&quot;&gt;&lt;caption&gt;Fig 2. Adjusted path from the register read to Operand B&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/zipcpu-register-lookup-after.svg&quot; alt=&quot;&quot; width=&quot;780&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;See the difference at the top of the diagram?  Let’s walk through this
updated logic in steps below.  Not only do we read from the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register file&lt;/a&gt; on a clock,
but we also keep track of whether the register we need is being written
to the register file on this clock as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_rewrite_flag_A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_preA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_reg_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_rewrite_flag_B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcd_preB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_reg_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pre_rewrite_value&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_gpreg_vl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, on the next clock we can select which of the two values we should be using.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_op_Av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_rewrite_flag_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rewrite_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_op_Av&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;assign&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;w_op_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_rewrite_flag_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_rewrite_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_op_Bv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we have some code we can use to replace the original &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register
file&lt;/a&gt; read, but this time the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register file&lt;/a&gt; is read
using clocked rather than combinational logic.&lt;/p&gt;

&lt;p&gt;My fear in all of this, though, was that I would somehow get this logic
wrong.  I mean, there’s so much that can go wrong with this change, how
can I rest assured that the result works?&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Within the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
&lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/zipcpu.html&quot;&gt;core&lt;/a&gt;
(on the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/tree/dev&quot;&gt;dev branch&lt;/a&gt; currently),
there’s a set of properties rebuilding the logic we worked through above
describing the values going into the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt;
(or &lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/core/memops.v&quot;&gt;memory&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ZipCPU/blob/master/rtl/core/div.v&quot;&gt;divide&lt;/a&gt;, etc).  Getting
the &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/master/rtl/core/zipcpu.v&quot;&gt;CPU&lt;/a&gt; and
these properties right took the majority of the work using &lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formal methods on
this CPU&lt;/a&gt;
to date.  What makes these properties special is that they aren’t clocked.
They don’t need to be.
&lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;Formal properties&lt;/a&gt;
don’t need to meet timing requirements like synthesizable logic does.  As a
result, I can assert that both &lt;code class=&quot;highlighter-rouge&quot;&gt;op_Av&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;op_Bv&lt;/code&gt; have the &lt;em&gt;right&lt;/em&gt; value using simpler logic than the logic we expressed
above.  Even better, I can make that assertion &lt;em&gt;independent&lt;/em&gt; of any
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline stalls&lt;/a&gt; or
hazards.  The result is that the property tends to find hazards I wasn’t
expecting.&lt;/p&gt;

&lt;p&gt;The end of this &lt;a href=&quot;https://github.com/ZipCPU/zipcpu/blob/dev/rtl/core/zipcpu.v&quot;&gt;chain of
logic&lt;/a&gt;
is a short set of assertions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-verilog&quot; data-lang=&quot;verilog&quot;&gt;	&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i_clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_op_insn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_const_illegal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc_illegal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr_reg_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;`CPU_PC_REG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbg_clear_pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear_pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc_rA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc_Aid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;3&#39;h7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;cp&quot;&gt;`PHASE_TWO_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_Av&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_Av&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;cp&quot;&gt;`PHASE_TWO_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_Bv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_Bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important part is in the middle.  First, I assert that the value of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; register going into the
&lt;a href=&quot;/zipcpu/2017/08/11/simple-alu.html&quot;&gt;ALU&lt;/a&gt; is as it should
be, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Yes, there are a lot of caveats to this assertion–the values only need to be
correct if the illegal instruction flag isn’t set, if the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
isn’t being cleared, if the
&lt;a href=&quot;/zipcpu/2017/08/25/hw-debugging.html&quot;&gt;debugging port&lt;/a&gt;
isn’t going to force the
&lt;a href=&quot;/zipcpu/2017/08/23/cpu-pipeline.html&quot;&gt;pipeline&lt;/a&gt;
to be cleared on the next clock, and so on.&lt;/p&gt;

&lt;p&gt;The good news?  Once I made the change outlined above, I could go back and
rerun the
&lt;a href=&quot;/blog/2018/04/02/formal-cpu-bugs.html&quot;&gt;formal proof&lt;/a&gt;–this
time with the &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_DISTRIBUTED_RAM&lt;/code&gt; define
selected.  Once the proof passed, I knew the change “worked”.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;table align=&quot;center&quot; style=&quot;float: right&quot;&gt;&lt;caption&gt;Fig 3. Development Process&lt;/caption&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/img/ice40-process.svg&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One of the topics I discuss in the two-day formal verification course I teach
is the idea of moving logic between clocks.  In the course, we adjust a
flag indicating that a counter is non-zero to the clock before the counter’s
value in question. To me, this is one of the very important uses of &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
verification&lt;/a&gt;–being
able to tell when you make a change, no matter how complex,
that the properties you had asserted before remain true.  In this case,
I was able to prove that the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt;
maintained the correct
&lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot;&gt;register&lt;/a&gt;
inputs, in spite of moving the logic earlier by one clock.&lt;/p&gt;

&lt;p&gt;Does this mean that the &lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; works on the &lt;a href=&quot;https://en.wikipedia.org/wiki/ICE_(FPGA)&quot;&gt;iCE40&lt;/a&gt;?  Well, let’s just say that
now it builds for the &lt;a href=&quot;https://en.wikipedia.org/wiki/ICE_(FPGA)&quot;&gt;iCE40&lt;/a&gt; whereas it wouldn’t build before.  The project
remains ongoing.  I would like to implement the
&lt;a href=&quot;/about/zipcpu.html&quot;&gt;ZipCPU&lt;/a&gt; both on the
&lt;a href=&quot;http://www.icoboard.org&quot;&gt;ICO board&lt;/a&gt; as well as on Luke Valenty’s new
&lt;a href=&quot;https://tinyfpga.com&quot;&gt;TinyFPGA&lt;/a&gt;.  Before I get there, though,
I’ve still got a lot of &lt;a href=&quot;/blog/2017/06/23/my-dbg-philosophy.html&quot;&gt;peripheral
simulation&lt;/a&gt;
work to get through.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2017/06/23/my-dbg-philosophy.html&quot;&gt;Simulation&lt;/a&gt;
work?  Yes.  To avoid &lt;a href=&quot;/blog/2017/05/19/fpga-hell.html&quot;&gt;FPGA
Hell&lt;/a&gt;, I’m not only
running my designs through the (incomplete) &lt;a href=&quot;/blog/2017/10/19/formal-intro.html&quot;&gt;formal
proof&lt;/a&gt;, but also through
&lt;a href=&quot;/blog/2017/06/21/looking-at-verilator.html&quot;&gt;simulation&lt;/a&gt;.
You can see my process in the figure on the right.&lt;/p&gt;

&lt;hr /&gt;&lt;p&gt;&lt;em&gt;God is our refuge and strength, a very present help in trouble.  Ps 46:1&lt;/em&gt;</description>
        <pubDate>Sat, 21 Jul 2018 00:00:00 -0400</pubDate>
        <link>https://zipcpu.com/formal/2018/07/21/zipcpu-icoboard.html</link>
        <guid isPermaLink="true">https://zipcpu.com/formal/2018/07/21/zipcpu-icoboard.html</guid>
        
        
        <category>formal</category>
        
      </item>
    
  </channel>
</rss>
